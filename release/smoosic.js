(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Smo"] = factory();
	else
		root["Smo"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/application/application.ts":
/*!****************************************!*\
  !*** ./src/application/application.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QueryParser: () => (/* binding */ QueryParser),
/* harmony export */   SuiApplication: () => (/* binding */ SuiApplication)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _common_midiWriter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/midiWriter */ "./src/common/midiWriter.js");
/* harmony import */ var _configuration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./configuration */ "./src/application/configuration.ts");
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../smo/xform/undo */ "./src/smo/xform/undo.ts");
/* harmony import */ var _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../smo/mxml/xmlToSmo */ "./src/smo/mxml/xmlToSmo.ts");
/* harmony import */ var _render_sui_scoreViewOperations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../render/sui/scoreViewOperations */ "./src/render/sui/scoreViewOperations.ts");
/* harmony import */ var _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../render/audio/oscillator */ "./src/render/audio/oscillator.ts");
/* harmony import */ var _render_audio_samples__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../render/audio/samples */ "./src/render/audio/samples.ts");
/* harmony import */ var _styles_font_metrics_arial_metrics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../styles/font_metrics/arial_metrics */ "./src/styles/font_metrics/arial_metrics.js");
/* harmony import */ var _styles_font_metrics_times_metrics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../styles/font_metrics/times_metrics */ "./src/styles/font_metrics/times_metrics.js");
/* harmony import */ var _styles_font_metrics_Commissioner_Medium_Metrics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../styles/font_metrics/Commissioner-Medium-Metrics */ "./src/styles/font_metrics/Commissioner-Medium-Metrics.js");
/* harmony import */ var _styles_font_metrics_ConcertOne_Regular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../styles/font_metrics/ConcertOne-Regular */ "./src/styles/font_metrics/ConcertOne-Regular.js");
/* harmony import */ var _styles_font_metrics_Merriweather_Regular__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../styles/font_metrics/Merriweather-Regular */ "./src/styles/font_metrics/Merriweather-Regular.js");
/* harmony import */ var _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../styles/font_metrics/ssp-sans-metrics */ "./src/styles/font_metrics/ssp-sans-metrics.js");
/* harmony import */ var _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../styles/font_metrics/ssp-serif-metrics */ "./src/styles/font_metrics/ssp-serif-metrics.js");
/* harmony import */ var _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ui/fileio/xhrLoader */ "./src/ui/fileio/xhrLoader.ts");
/* harmony import */ var _ui_menus_manager__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ui/menus/manager */ "./src/ui/menus/manager.ts");
/* harmony import */ var _ui_eventSource__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ui/eventSource */ "./src/ui/eventSource.ts");
/* harmony import */ var _ui_i18n_translationEditor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ui/i18n/translationEditor */ "./src/ui/i18n/translationEditor.ts");
/* harmony import */ var _ui_i18n_language__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../ui/i18n/language */ "./src/ui/i18n/language.ts");
/* harmony import */ var _ui_buttons_ribbon__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../ui/buttons/ribbon */ "./src/ui/buttons/ribbon.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./dom */ "./src/application/dom.ts");
/* harmony import */ var _keyCommands__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./keyCommands */ "./src/application/keyCommands.ts");
/* harmony import */ var _eventHandler__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./eventHandler */ "./src/application/eventHandler.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./common */ "./src/application/common.ts");
/* harmony import */ var _smo_data_measure__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../smo/data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _ui_help__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../ui/help */ "./src/ui/help.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../common/vex */ "./src/common/vex.ts");
/* harmony import */ var _common_textformatter__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../common/textformatter */ "./src/common/textformatter.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
































const VF = _common_vex__WEBPACK_IMPORTED_MODULE_30__.VexFlow;
/**
 * Parse query string for application
 * @category AppUtil
 */
class QueryParser {
    queryPair(str) {
        var i = 0;
        const ar = str.split('=');
        const rv = {};
        for (i = 0; i < ar.length - 1; i += 2) {
            const name = decodeURIComponent(ar[i]);
            rv[name] = decodeURIComponent(ar[i + 1]);
        }
        return rv;
    }
    constructor() {
        this.pairs = [];
        let i = 0;
        if (window.location.search) {
            const cmd = window.location.search.substring(1, window.location.search.length);
            const cmds = cmd.split('&');
            for (i = 0; i < cmds.length; ++i) {
                const cmd = cmds[i];
                this.pairs.push(this.queryPair(cmd));
            }
        }
    }
}
/** SuiApplication
 * main entry point of application.  Based on the configuration,
 * either start the default UI, or initialize library mode and
 * await further instructions.
 * @category SuiApplication
 */
class SuiApplication {
    static configure(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = new _configuration__WEBPACK_IMPORTED_MODULE_2__.SmoConfiguration(params);
            window.SmoConfig = config;
            const application = new SuiApplication(config);
            SuiApplication.registerFonts();
            return application.initialize();
        });
    }
    constructor(config) {
        this.instance = null;
        this.score = null;
        this.view = null;
        this.config = config;
        this.domElement = this._getDomContainer();
    }
    _getDomContainer() {
        const el = (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_28__.getDomContainer)(this.config.scoreDomContainer);
        if (typeof (el) === 'undefined') {
            throw 'scoreDomContainer is a required config parameter';
        }
        return el;
    }
    /**
    // Different applications can create their own key bindings, these are the defaults.
    // Many editor commands can be reached by a single keystroke.  For more advanced things there
    // are menus.
    */
    static get keyBindingDefaults() {
        var editorKeys = _eventHandler__WEBPACK_IMPORTED_MODULE_25__.SuiEventHandler.editorKeyBindingDefaults;
        editorKeys.forEach((key) => {
            key.module = 'keyCommands';
        });
        var trackerKeys = _eventHandler__WEBPACK_IMPORTED_MODULE_25__.SuiEventHandler.trackerKeyBindingDefaults;
        trackerKeys.forEach((key) => {
            key.module = 'tracker';
        });
        return trackerKeys.concat(editorKeys);
    }
    /**
     * Initialize the library according to instruction in config object:
     * 1.  Try to load a new score
     * 2.  If in application mode, start the UI.  If in translation mode, start translation
     * @returns
     */
    initialize() {
        const samplePromise = _render_audio_samples__WEBPACK_IMPORTED_MODULE_8__.SuiSampleMedia.samplePromise(_render_audio_oscillator__WEBPACK_IMPORTED_MODULE_7__.SuiOscillator.audio);
        const self = this;
        // Hide header at the top of some applications
        $('#link-hdr button').off('click').on('click', () => {
            $('#link-hdr').addClass('hide');
        });
        const createScore = () => {
            return self.createScore();
        };
        const startApplication = () => {
            if (self.config.mode === 'translate') {
                self._startApplication();
            }
            else if (self.config.mode === 'application') {
                self._startApplication();
            }
            else { // library mode.
                self.createView(self.score);
            }
        };
        const render = () => {
            var _a;
            return (_a = self.view) === null || _a === void 0 ? void 0 : _a.renderer.renderPromise();
        };
        const rv = new Promise((resolve) => {
            samplePromise.then(createScore).then(startApplication).then(render)
                .then(() => {
                resolve(self);
            });
        });
        return rv;
    }
    /**
     * Create the initial score we use to populate the UI etc:
     * 0. if translation mode, return empty promise, it won't be used anyway
     * 1. if remoteScore is set in config, try to load from remote
     * 2. if initialScore is set, use that
     * 3. if a score is saved locally with quick save (browser local cache), use that
     * 4. if all else fails, return an 'empty' score.
     * @returns promise for a remote load.  If a local load, will resolve immediately
     */
    createScore() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.mode === 'translate') {
                return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
            }
            if (this.config.remoteScore) {
                const loader = new _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_16__.SuiXhrLoader(this.config.remoteScore);
                const file = yield loader.loadAsync();
                this.score = this._tryParse(file);
                return this.score;
            }
            else if (this.config.initialScore) {
                if (typeof (this.config.initialScore) === 'string') {
                    this.score = this._tryParse(this.config.initialScore);
                    return (this.score);
                }
                else {
                    this.score = this.config.initialScore;
                    return null;
                }
            }
            else {
                const localScore = localStorage.getItem(_common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.localScore);
                if (localScore) {
                    this.score = this._tryParse(localScore);
                }
                else {
                    this.score = _smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.getDefaultScore(_smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.defaults, null);
                    if (this.config.mode === 'application') {
                        _ui_help__WEBPACK_IMPORTED_MODULE_29__.SuiHelp.displayHelp();
                    }
                }
            }
            return this.score;
        });
    }
    _tryParse(scoreJson) {
        try {
            if (scoreJson[0] === '<') {
                const parser = new DOMParser();
                const xml = parser.parseFromString(scoreJson, 'text/xml');
                return _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_5__.XmlToSmo.convert(xml);
            }
            return _smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.deserialize(scoreJson);
        }
        catch (exp) {
            console.warn('could not parse score');
            return _smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.getDefaultScore(_smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.defaults, _smo_data_measure__WEBPACK_IMPORTED_MODULE_27__.SmoMeasure.defaults);
        }
    }
    _startApplication() {
        var _a;
        // Initialize the midi writer library
        (0,_common_midiWriter__WEBPACK_IMPORTED_MODULE_1__._MidiWriter)();
        const queryString = new QueryParser();
        const languageSelect = (_a = queryString.pairs.find((x) => x['language'])) !== null && _a !== void 0 ? _a : { 'language': 'en' };
        if (this.config.mode === 'translate') {
            this._deferCreateTranslator();
            return;
        }
        if (languageSelect) {
            SuiApplication._deferLanguageSelection(languageSelect.language);
        }
        this.createUi();
    }
    createView(score) {
        let sdc = this.domElement;
        const svgContainer = document.createElement('div');
        $(svgContainer).attr('id', 'boo').addClass('musicContainer');
        $(sdc).append(svgContainer);
        const undoBuffer = new _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer();
        const view = new _render_sui_scoreViewOperations__WEBPACK_IMPORTED_MODULE_6__.SuiScoreViewOperations(this.config, svgContainer, score, sdc, undoBuffer);
        const eventSource = new _ui_eventSource__WEBPACK_IMPORTED_MODULE_18__.BrowserEventSource();
        eventSource.setRenderElement(svgContainer);
        this.view = view;
        view.startRenderingEngine();
        return {
            view, eventSource, undoBuffer, renderer: view.renderer
        };
    }
    /**
     * Convenience constructor, take the score and render it in the
     * configured rendering space.
     */
    createUi() {
        const viewObj = this.createView(this.score);
        if (!viewObj) {
            return;
        }
        const view = this.view;
        const tracker = view.tracker;
        const eventSource = new _ui_eventSource__WEBPACK_IMPORTED_MODULE_18__.BrowserEventSource(); // events come from the browser UI.
        const undoBuffer = viewObj.undoBuffer;
        const completeNotifier = new _common__WEBPACK_IMPORTED_MODULE_26__.ModalEventHandlerProxy(eventSource);
        const menus = new _ui_menus_manager__WEBPACK_IMPORTED_MODULE_17__.SuiMenuManager({
            view, eventSource, completeNotifier, undoBuffer
        });
        const ribbon = new _ui_buttons_ribbon__WEBPACK_IMPORTED_MODULE_21__.RibbonButtons({
            config: this.config,
            ribbons: this.config.ribbonLayout,
            ribbonButtons: this.config.buttonDefinition,
            menus: menus,
            completeNotifier,
            view: view,
            eventSource: eventSource,
            tracker: view.tracker
        });
        const keyCommands = new _keyCommands__WEBPACK_IMPORTED_MODULE_24__.SuiKeyCommands({
            view, slashMode: true, completeNotifier, tracker, eventSource
        });
        const eventHandler = new _eventHandler__WEBPACK_IMPORTED_MODULE_25__.SuiEventHandler({
            view, eventSource, tracker, keyCommands, menus, completeNotifier,
            keyBindings: SuiApplication.keyBindingDefaults, config: this.config
        });
        this.instance = {
            view, eventSource, eventHandler, undoBuffer,
            tracker, ribbon, keyCommands, menus
        };
        SuiApplication.instance = this.instance;
        completeNotifier.handler = eventHandler;
        eventSource.setRenderElement(view.renderer.elementId);
        // eslint-disable-next-line
        SuiApplication.instance = this.instance;
        ribbon.display();
        _dom__WEBPACK_IMPORTED_MODULE_23__.SuiDom.splash(this.config);
    }
    static loadMusicFont(face, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const new_font = new FontFace('Bravura', `url(${url})`);
            const loadedFace = yield new_font.load();
            document.fonts.add(loadedFace);
        });
    }
    static registerFonts() {
        return __awaiter(this, void 0, void 0, function* () {
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_arial_metrics__WEBPACK_IMPORTED_MODULE_9__.ArialFont.name,
                resolution: _styles_font_metrics_arial_metrics__WEBPACK_IMPORTED_MODULE_9__.ArialFont.resolution,
                glyphs: _styles_font_metrics_arial_metrics__WEBPACK_IMPORTED_MODULE_9__.ArialFont.glyphs,
                family: _styles_font_metrics_arial_metrics__WEBPACK_IMPORTED_MODULE_9__.ArialFont.fontFamily,
                serifs: false,
                monospaced: false,
                italic: true,
                bold: true,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Built-in sans font',
            });
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_times_metrics__WEBPACK_IMPORTED_MODULE_10__.TimesFont.name,
                resolution: _styles_font_metrics_times_metrics__WEBPACK_IMPORTED_MODULE_10__.TimesFont.resolution,
                glyphs: _styles_font_metrics_times_metrics__WEBPACK_IMPORTED_MODULE_10__.TimesFont.glyphs,
                family: _styles_font_metrics_times_metrics__WEBPACK_IMPORTED_MODULE_10__.TimesFont.fontFamily,
                serifs: false,
                monospaced: false,
                italic: true,
                bold: true,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Built-in serif font',
            });
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_Commissioner_Medium_Metrics__WEBPACK_IMPORTED_MODULE_11__.Commissioner_MediumFont.name,
                resolution: _styles_font_metrics_Commissioner_Medium_Metrics__WEBPACK_IMPORTED_MODULE_11__.Commissioner_MediumFont.resolution,
                glyphs: _styles_font_metrics_Commissioner_Medium_Metrics__WEBPACK_IMPORTED_MODULE_11__.Commissioner_MediumFont.glyphs,
                family: _styles_font_metrics_Commissioner_Medium_Metrics__WEBPACK_IMPORTED_MODULE_11__.Commissioner_MediumFont.fontFamily,
                serifs: false,
                monospaced: false,
                italic: false,
                bold: false,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Low-contrast sans-serif text font',
            });
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_ConcertOne_Regular__WEBPACK_IMPORTED_MODULE_12__.Concert_OneFont.name,
                resolution: _styles_font_metrics_ConcertOne_Regular__WEBPACK_IMPORTED_MODULE_12__.Concert_OneFont.resolution,
                glyphs: _styles_font_metrics_ConcertOne_Regular__WEBPACK_IMPORTED_MODULE_12__.Concert_OneFont.glyphs,
                family: _styles_font_metrics_ConcertOne_Regular__WEBPACK_IMPORTED_MODULE_12__.Concert_OneFont.fontFamily,
                serifs: false,
                monospaced: false,
                italic: false,
                bold: false,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Rounded grotesque typeface inspired by 19th century 3D l',
            });
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_Merriweather_Regular__WEBPACK_IMPORTED_MODULE_13__.MerriweatherFont.name,
                resolution: _styles_font_metrics_Merriweather_Regular__WEBPACK_IMPORTED_MODULE_13__.MerriweatherFont.resolution,
                glyphs: _styles_font_metrics_Merriweather_Regular__WEBPACK_IMPORTED_MODULE_13__.MerriweatherFont.glyphs,
                family: _styles_font_metrics_Merriweather_Regular__WEBPACK_IMPORTED_MODULE_13__.MerriweatherFont.fontFamily,
                serifs: true,
                monospaced: false,
                italic: false,
                bold: false,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Serif screen font from Sorkin Type',
            });
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_14__.SourceSansProFont.name,
                resolution: _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_14__.SourceSansProFont.resolution,
                glyphs: _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_14__.SourceSansProFont.glyphs,
                family: _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_14__.SourceSansProFont.fontFamily,
                serifs: false,
                monospaced: false,
                italic: false,
                bold: false,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Open source Sans screen font from Adobe',
            });
            _common_textformatter__WEBPACK_IMPORTED_MODULE_31__.TextFormatter.registerInfo({
                name: _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_15__.SourceSerifProFont.name,
                resolution: _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_15__.SourceSerifProFont.resolution,
                glyphs: _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_15__.SourceSerifProFont.glyphs,
                family: _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_15__.SourceSerifProFont.fontFamily,
                serifs: false,
                monospaced: false,
                italic: false,
                bold: false,
                maxSizeGlyph: 'H',
                superscriptOffset: 0.66,
                subscriptOffset: 0.66,
                description: 'Open source Serif screen font from Adobe',
            });
            yield SuiApplication.loadMusicFont('Bravura', '../styles/fonts/Bravura_1.392.woff');
            // await SuiApplication.loadMusicFont('Bravura', '../styles/fonts/Bravura_1.392.woff');
        });
    }
    _deferCreateTranslator() {
        _dom__WEBPACK_IMPORTED_MODULE_23__.SuiDom.createUiDom(this.config.scoreDomContainer);
        setTimeout(() => {
            _ui_i18n_translationEditor__WEBPACK_IMPORTED_MODULE_19__.SmoTranslationEditor.startEditor(this.config.language);
        }, 1);
    }
    static _deferLanguageSelection(lang) {
        setTimeout(() => {
            _ui_i18n_language__WEBPACK_IMPORTED_MODULE_20__.SmoTranslator.setLanguage(lang);
        }, 1);
    }
}


/***/ }),

/***/ "./src/application/common.ts":
/*!***********************************!*\
  !*** ./src/application/common.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModalEventHandler: () => (/* binding */ ModalEventHandler),
/* harmony export */   ModalEventHandlerProxy: () => (/* binding */ ModalEventHandlerProxy),
/* harmony export */   SimpleEventHandler: () => (/* binding */ SimpleEventHandler)
/* harmony export */ });
/**
 * Shared interface for menus, dialogs, etc that can
 * accept UI events
 * @category SuiUiBase
 */
class ModalEventHandler {
}
class SimpleEventHandler extends ModalEventHandler {
    ;
    constructor(mouseMove, mouseClick, keyHandler) {
        super();
        this.mouseMoveHandler = mouseMove;
        this.mouseClickHandler = mouseClick;
        this.evKeyHandler = keyHandler;
    }
    mouseMove(ev) {
        this.mouseMove(ev);
    }
    mouseClick(ev) {
        this.mouseClick(ev);
    }
    evKey(ev) {
        this.evKeyHandler(ev);
    }
}
/**
 * Dependency injection, sends events to a proxy object, gets around some
 * cyclic dependencies when bootstrapping the application.
 * @category AppUtil
 */
class ModalEventHandlerProxy {
    constructor(evSource) {
        this._handler = null;
        this.unbound = true;
        this.keydownHandler = null;
        this.mouseMoveHandler = null;
        this.mouseClickHandler = null;
        this.eventSource = evSource;
        this.bindEvents();
    }
    set handler(value) {
        this._handler = value;
        this.unbound = false;
    }
    evKey(ev) {
        if (this._handler) {
            this._handler.evKey(ev);
        }
    }
    mouseMove(ev) {
        if (this._handler) {
            this._handler.mouseMove(ev);
        }
    }
    mouseClick(ev) {
        if (this._handler) {
            this._handler.mouseClick(ev);
        }
    }
    bindEvents() {
        this.mouseMoveHandler = this.eventSource.bindMouseMoveHandler(this, 'mouseMove');
        this.mouseClickHandler = this.eventSource.bindMouseClickHandler(this, 'mouseClick');
        this.keydownHandler = this.eventSource.bindKeydownHandler(this, 'evKey');
    }
    unbindKeyboardForModal(dialog) {
        if (this.unbound) {
            console.log('received duplicate bind event');
            return;
        }
        if (!this.keydownHandler || !this.mouseMoveHandler || !this.mouseClickHandler) {
            console.log('received bind with no handlers');
            return;
        }
        this.unbound = true;
        const rebind = () => {
            this.unbound = false;
            this.bindEvents();
        };
        this.eventSource.unbindKeydownHandler(this.keydownHandler);
        this.eventSource.unbindMouseMoveHandler(this.mouseMoveHandler);
        this.eventSource.unbindMouseClickHandler(this.mouseClickHandler);
        dialog.closeModalPromise.then(rebind);
    }
}


/***/ }),

/***/ "./src/application/configuration.ts":
/*!******************************************!*\
  !*** ./src/application/configuration.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConfigurationNumberOptions: () => (/* binding */ ConfigurationNumberOptions),
/* harmony export */   ConfigurationStringOptions: () => (/* binding */ ConfigurationStringOptions),
/* harmony export */   SmoConfiguration: () => (/* binding */ SmoConfiguration)
/* harmony export */ });
/* harmony import */ var _ui_keyBindings_default_editorKeys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/keyBindings/default/editorKeys */ "./src/ui/keyBindings/default/editorKeys.ts");
/* harmony import */ var _ui_keyBindings_default_trackerKeys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/keyBindings/default/trackerKeys */ "./src/ui/keyBindings/default/trackerKeys.ts");
/* harmony import */ var _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/ribbonLayout/default/defaultRibbon */ "./src/ui/ribbonLayout/default/defaultRibbon.ts");
/* harmony import */ var _render_audio_musicCursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/audio/musicCursor */ "./src/render/audio/musicCursor.ts");




var ConfigurationStringOptions = ['language', 'libraryUrl', 'remoteScore'];
var ConfigurationNumberOptions = ['demonPollTime', 'idleRedrawTime'];
/**
 * Configures smoosic library or application. It is a union of UI, rendering and application configuration parameters
 * @param mode - score mode `'library' | 'application' | 'translate'`
 *   Library mode starts the view but not the UI.  application mode starts the UI and expects UI parameters.
 *   translation mode is the translation editor, for creating translations for dialog/menu components
 * @param language - startup language
 * @param initialScore? - the library score JSON, if you are loading from a JSON string, or a SmoScore object
 * @param remoteScore? - path to a remote score, if loading from an URL
 * @param scoreDomContainer - the parent of the svg container (required)
 * @param leftControls - the location of the vertical button control, applies if mode is 'application'
 * @param topControls - the location of the horizontal button control, applies if mode is 'application'
 * @param libraryUrl - loader URL for Smo libraries, applies if application mode
 * @param demonPollTime - how often we poll the score to see if it's changed
 * @param idleRedrawTime - how often the entire score re-renders
 * @category SuiApplication
 */
class SmoConfiguration {
    static get defaults() {
        return {
            mode: 'application',
            language: 'en',
            scoreDomContainer: 'boo',
            libraryUrl: 'https://aarondavidnewman.github.io/Smoosic/release/library/links/smoLibrary.json',
            demonPollTime: 50, // how often we poll the score to see if it changed
            idleRedrawTime: 1000, // maximum time between score modification and render
            ribbonLayout: _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__.defaultRibbonLayout.ribbons,
            buttonDefinition: _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__.defaultRibbonLayout.ribbonButtons,
            audioAnimation: {
                audioAnimationHandler: _render_audio_musicCursor__WEBPACK_IMPORTED_MODULE_3__.defaultAudioAnimationHandler,
                clearAudioAnimationHandler: _render_audio_musicCursor__WEBPACK_IMPORTED_MODULE_3__.defaultClearAudioAnimationHandler
            }
        };
    }
    static get keyBindingDefaults() {
        const editorKeys = _ui_keyBindings_default_editorKeys__WEBPACK_IMPORTED_MODULE_0__.defaultEditorKeys.keys;
        const trackerKeys = _ui_keyBindings_default_trackerKeys__WEBPACK_IMPORTED_MODULE_1__.defaultTrackerKeys.keys;
        editorKeys.forEach((key) => {
            key.module = 'keyCommands';
        });
        trackerKeys.forEach((key) => {
            key.module = 'tracker';
        });
        return { editorKeys, trackerKeys };
    }
    constructor(params) {
        var _a, _b, _c;
        this.language = '';
        this.demonPollTime = 0; // how often we poll the score to see if it changed
        this.idleRedrawTime = 0;
        const defs = SmoConfiguration.defaults;
        ConfigurationStringOptions.forEach((param) => {
            var _a;
            const sp = (_a = params[param]) !== null && _a !== void 0 ? _a : defs[param];
            this[param] = sp !== null && sp !== void 0 ? sp : '';
        });
        this.scoreDomContainer = (_a = params.scoreDomContainer) !== null && _a !== void 0 ? _a : defs.scoreDomContainer;
        this.initialScore = (_b = params.initialScore) !== null && _b !== void 0 ? _b : undefined;
        ConfigurationNumberOptions.forEach((param) => {
            var _a;
            this[param] = (_a = params[param]) !== null && _a !== void 0 ? _a : defs[param];
        });
        this.mode = (_c = params.mode) !== null && _c !== void 0 ? _c : defs.mode;
        if (this.mode === 'application') {
            this.leftControls = params.leftControls;
            this.topControls = params.topControls;
        }
        this.ribbonLayout = params.ribbonLayout ? params.ribbonLayout : _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__.defaultRibbonLayout.ribbons;
        this.buttonDefinition = params.buttonDefinition ? params.buttonDefinition : _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__.defaultRibbonLayout.ribbonButtons;
        if (!params.ribbonLayout) {
            this.ribbonLayout = _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__.defaultRibbonLayout.ribbons;
        }
        if (!params.buttonDefinition) {
            this.buttonDefinition = _ui_ribbonLayout_default_defaultRibbon__WEBPACK_IMPORTED_MODULE_2__.defaultRibbonLayout.ribbonButtons;
        }
        if (!params.audioAnimation) {
            this.audioAnimation = SmoConfiguration.defaults.audioAnimation;
        }
        else {
            this.audioAnimation = params.audioAnimation;
        }
    }
}


/***/ }),

/***/ "./src/application/dom.ts":
/*!********************************!*\
  !*** ./src/application/dom.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiDom: () => (/* binding */ SuiDom)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/sui/piano */ "./src/render/sui/piano.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



class SuiDom {
    static splash(config) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var logoPath = '../styles/images/logo.png';
        var r = b('div').classes('bug-modal').append(b('img').attr('src', logoPath).classes('splash-logo').attr('width', '300px').attr('height', '300px'))
            .append(b('button').classes('icon icon-cross bug-dismiss-button'))
            .append(b('div').classes('splash-div')
            .append(b('span').classes('splash-title').text('Sm'))
            .append(b('span').classes('splash-shine').text('ooooooooo'))
            .append(b('span').classes('splash-title').text('sic')));
        $('body').append(r.dom());
        $('body').addClass('splashScreen modal');
        setTimeout(function () {
            $('body').removeClass('splashScreen modal');
        }, 1000);
    }
    static createUiDom(uiDomContainer) {
        var _a;
        if (!uiDomContainer) {
            return;
        }
        if (typeof (uiDomContainer) === 'string') {
            uiDomContainer = (_a = document.getElementById(uiDomContainer)) !== null && _a !== void 0 ? _a : undefined;
        }
        if (!uiDomContainer) {
            return;
        }
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var r = b('div').classes('dom-container')
            .append(b('div').classes('workspace language-dir').attr('dir', 'ltr')
            .append(b('div').classes('control-bar')
            .append(b('div').classes('titleText').text('Smoosic'))
            .append(b('div').classes('piano-container')
            .append(b('div').classes('key-left-ctrl'))
            .append(b('div').classes('piano-keys'))
            .append(b('div').classes('key-right-ctrl')))
            .append(b('div').classes('controls-top').attr('id', 'controls-top')))
            .append(b('div').classes('media')
            .append(b('div').classes('controls-left').attr('id', 'controls-left'))));
        uiDomContainer.append(r.dom()[0]);
        const scrollRegion = document.createElement('div');
        $(scrollRegion).attr('id', 'smo-scroll-region').addClass('musicRelief');
        $('.dom-container .media').append(scrollRegion);
        var pianoDom = $('.piano-keys')[0];
        var svg = document.createElementNS(_render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.namespace, 'svg');
        svg.id = 'piano-svg';
        svg.setAttributeNS('', 'width', '' + _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__.SuiPiano.owidth * _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__.SuiPiano.dimensions.octaves);
        svg.setAttributeNS('', 'height', '' + _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__.SuiPiano.dimensions.wheight);
        svg.setAttributeNS('', 'viewBox', '0 0 ' + _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__.SuiPiano.owidth * _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__.SuiPiano.dimensions.octaves + ' ' + _render_sui_piano__WEBPACK_IMPORTED_MODULE_2__.SuiPiano.dimensions.wheight);
        pianoDom.appendChild(svg);
    }
}


/***/ }),

/***/ "./src/application/eventHandler.ts":
/*!*****************************************!*\
  !*** ./src/application/eventHandler.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiEventHandler: () => (/* binding */ SuiEventHandler)
/* harmony export */ });
/* harmony import */ var _ui_exceptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/exceptions */ "./src/ui/exceptions.ts");
/* harmony import */ var _ui_qwerty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/qwerty */ "./src/ui/qwerty.ts");
/* harmony import */ var _ui_dialogs_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/dialogs/factory */ "./src/ui/dialogs/factory.ts");
/* harmony import */ var _render_sui_piano__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/sui/piano */ "./src/render/sui/piano.ts");
/* harmony import */ var _ui_help__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ui/help */ "./src/ui/help.ts");
/* harmony import */ var _render_sui_tracker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../render/sui/tracker */ "./src/render/sui/tracker.ts");
/* harmony import */ var _ui_keyBindings_default_editorKeys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/keyBindings/default/editorKeys */ "./src/ui/keyBindings/default/editorKeys.ts");
/* harmony import */ var _ui_keyBindings_default_trackerKeys__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/keyBindings/default/trackerKeys */ "./src/ui/keyBindings/default/trackerKeys.ts");
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.









/**
 * this is the default keyboard/mouse handler for smoosic in application mode.
 * It diverts key events to tracker or key commmands as appropriate, and mouse events to
 * tracker.  Modal elements take this control away temporarily.
 *
 * It also handles some global events such as window resize and scroll of the music region.
 * @category SuiApplication
*/
class SuiEventHandler {
    static showQwerty() {
        SuiEventHandler.keyboardUi = _ui_qwerty__WEBPACK_IMPORTED_MODULE_1__.Qwerty;
        _ui_qwerty__WEBPACK_IMPORTED_MODULE_1__.Qwerty.displayKb();
    }
    constructor(params) {
        this.resizing = false;
        this.undoStatus = 0;
        this.trackScrolling = false;
        this.keyHandlerObj = null;
        this.piano = null;
        SuiEventHandler.instance = this;
        this.view = params.view;
        this.config = params.config;
        this.menus = params.menus;
        this.completeNotifier = params.completeNotifier;
        this.eventSource = params.eventSource;
        this.tracker = params.tracker; // needed for key event handling
        this.keyBind = params.keyBindings;
        this.keyCommands = params.keyCommands;
        this.keyCommands.view = this.view;
        this.resizing = false;
        this.undoStatus = 0;
        this.trackScrolling = false;
        this.keyHandlerObj = null;
        // create global exception instance
        this.exhandler = new _ui_exceptions__WEBPACK_IMPORTED_MODULE_0__.SuiExceptionHandler(this);
        this.bindEvents();
        this.bindResize();
        this.createPiano();
    }
    static get scrollable() {
        return '.musicRelief';
    }
    handleScrollEvent() {
        const self = this;
        if (self.trackScrolling) {
            return;
        }
        self.trackScrolling = true;
        setTimeout(function () {
            try {
                // wait until redraw is done to track scroll events.
                self.trackScrolling = false;
                // Thisi s a WIP...
                self.view.tracker.scroller.handleScroll($(SuiEventHandler.scrollable)[0].scrollLeft, $(SuiEventHandler.scrollable)[0].scrollTop);
            }
            catch (e) {
                _ui_exceptions__WEBPACK_IMPORTED_MODULE_0__.SuiExceptionHandler.instance.exceptionHandler(e);
            }
        }, 500);
    }
    createPiano() {
        this.piano = new _render_sui_piano__WEBPACK_IMPORTED_MODULE_3__.SuiPiano(this.view);
    }
    resizeEvent() {
        var self = this;
        if (this.resizing) {
            return;
        }
        if (!this.piano) {
            return;
        }
        if ($('body').hasClass('printing')) {
            return;
        }
        this.resizing = true;
        setTimeout(function () {
            console.log('resizing');
            self.resizing = false;
            self.piano.handleResize();
            self.view.refreshViewport();
        }, 1);
    }
    createModifierDialog(modifierSelection) {
        var parameters = {
            modifier: modifierSelection.modifier,
            view: this.view, eventSource: this.eventSource,
            completeNotifier: this.completeNotifier, keyCommands: this.keyCommands,
            ctor: '', // filled in by the factory
            tracker: this.tracker,
            startPromise: null,
            id: 'modifier-dialog',
            config: this.config
        };
        return _ui_dialogs_factory__WEBPACK_IMPORTED_MODULE_2__.SuiModifierDialogFactory.createModifierDialog(modifierSelection.modifier, parameters);
    }
    // If the user has selected a modifier via the mouse/touch, bring up mod dialog
    // for that modifier
    trackerModifierSelect(ev) {
        var modSelection = this.view.tracker.getSelectedModifier();
        if (modSelection) {
            var dialog = this.createModifierDialog(modSelection);
            if (dialog) {
                // this.view.tracker.selectSuggestion(ev);
                return;
                // this.unbindKeyboardForModal(dialog);
            }
            else {
                this.view.tracker.advanceModifierSelection(this.view.score, ev);
            }
        }
        else {
            this.view.tracker.selectSuggestion(this.view.score, ev);
        }
        return;
    }
    // ### bindResize
    // This handles both resizing of the music area (scrolling) and resizing of the window.
    // The latter results in a redraw, the former just resets the client/logical map of elements
    // in the tracker.
    bindResize() {
        const self = this;
        const el = $(SuiEventHandler.scrollable)[0];
        // unit test programs don't have resize html
        if (!el) {
            return;
        }
        window.addEventListener('resize', function () {
            self.resizeEvent();
        });
        let scrollCallback = () => {
            self.handleScrollEvent();
        };
        el.onscroll = scrollCallback;
    }
    // ### renderElement
    // return render element that is the DOM parent of the svg
    get renderElement() {
        return this.view.renderer.renderElement;
    }
    // ## editorKeyBindingDefaults
    // ## Description:
    // execute a simple command on the editor, based on a keystroke.
    static get editorKeyBindingDefaults() {
        return _ui_keyBindings_default_editorKeys__WEBPACK_IMPORTED_MODULE_6__.defaultEditorKeys.keys;
    }
    // ## trackerKeyBindingDefaults
    // ### Description:
    // Key bindings for the tracker.  The tracker is the 'cursor' in the music
    // that lets you select and edit notes.
    static get trackerKeyBindingDefaults() {
        return _ui_keyBindings_default_trackerKeys__WEBPACK_IMPORTED_MODULE_7__.defaultTrackerKeys.keys;
    }
    helpControls() {
        var self = this;
        var rebind = function () {
            self.bindEvents();
        };
    }
    menuHelp() {
        _ui_help__WEBPACK_IMPORTED_MODULE_4__.SuiHelp.displayHelp();
    }
    evKey(evdata) {
        if ($('body').hasClass('translation-mode')) {
            return;
        }
        console.log("KeyboardEvent: key='" + evdata.key + "' | code='" +
            evdata.code + "'"
            + " shift='" + evdata.shiftKey + "' control='" + evdata.ctrlKey + "'" + " alt='" + evdata.altKey + "'");
        evdata.preventDefault();
        if (SuiEventHandler.keyboardUi) {
            _ui_qwerty__WEBPACK_IMPORTED_MODULE_1__.Qwerty.handleKeyEvent(evdata);
        }
        const dataCopy = _render_sui_tracker__WEBPACK_IMPORTED_MODULE_5__.SuiTracker.serializeEvent(evdata);
        this.view.renderer.updatePromise().then(() => {
            if (dataCopy.key == '?') {
                _ui_help__WEBPACK_IMPORTED_MODULE_4__.SuiHelp.displayHelp();
            }
            if (dataCopy.key == '/') {
                // set up menu DOM.
                this.menus.slashMenuMode(this.completeNotifier);
            }
            if (dataCopy.key == 'Enter') {
                this.trackerModifierSelect(dataCopy);
            }
            var binding = this.keyBind.find((ev) => ev.event === 'keydown' && ev.key === dataCopy.key &&
                ev.ctrlKey === dataCopy.ctrlKey &&
                ev.altKey === dataCopy.altKey && dataCopy.shiftKey === ev.shiftKey);
            if (binding) {
                try {
                    if (binding.module === 'tracker') {
                        this.tracker[binding.action](this.view.score, dataCopy);
                    }
                    else {
                        this.keyCommands[binding.action](dataCopy);
                    }
                }
                catch (e) {
                    if (typeof (e) === 'string') {
                        console.error(e);
                    }
                    this.exhandler.exceptionHandler(e);
                }
            }
        });
    }
    mouseMove(ev) {
        this.view.tracker.intersectingArtifact(_render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_8__.SvgHelpers.smoBox({
            x: ev.clientX,
            y: ev.clientY
        }));
    }
    mouseClick(ev) {
        const dataCopy = _render_sui_tracker__WEBPACK_IMPORTED_MODULE_5__.SuiTracker.serializeEvent(ev);
        this.view.renderer.updatePromise().then(() => {
            this.view.tracker.selectSuggestion(this.view.score, dataCopy);
            var modifier = this.view.tracker.getSelectedModifier();
            if (modifier) {
                this.createModifierDialog(modifier);
            }
        });
    }
    bindEvents() {
        const self = this;
        const tracker = this.view.tracker;
        $('body').off('forceScrollEvent').on('forceScrollEvent', function () {
            self.handleScrollEvent();
        });
        $('body').off('forceResizeEvent').on('forceResizeEvent', function () {
            self.resizeEvent();
        });
        this.helpControls();
    }
}
SuiEventHandler.reentry = false;


/***/ }),

/***/ "./src/application/generateVexTests.ts":
/*!*********************************************!*\
  !*** ./src/application/generateVexTests.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderVexTests: () => (/* binding */ renderVexTests)
/* harmony export */ });
/* harmony import */ var _application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./application */ "./src/application/application.ts");
/* harmony import */ var _smo_xform_toVex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../smo/xform/toVex */ "./src/smo/xform/toVex.ts");
/* harmony import */ var _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/fileio/xhrLoader */ "./src/ui/fileio/xhrLoader.ts");
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../smo/data/score */ "./src/smo/data/score.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const filesToRender = {
    'PreciousLord': {
        title: 'PreciousLord',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/hymns/Precious Lord.json',
        pages: [0]
    }, 'BachWTC': {
        title: 'BachWTC',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/piano/BachWTC-3.json',
        pages: [0, 1, 2]
    }, 'BachInvention': {
        title: 'BachInv1',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/piano/BachInvention.json',
        pages: [1]
    }, 'Gnossienne3': {
        title: 'Gnossienne3',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/piano/Gnossienne3-3.json',
        pages: [0, 1]
    }, 'GFWMessiah-I-2': {
        title: 'GFWMessiah-I-2',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/messiah/Messiah-I-2.json',
        pages: [0, 1]
    }, 'Joplin': {
        title: 'Joplin',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/piano/Joplin-Entertainer.json',
        pages: [0, 1, 2]
    }, 'Plena': {
        title: 'Plena',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/bigband/Plena.json',
        pages: [2]
    }, 'Postillionlied': {
        title: 'Postillion Lied',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/soprano/Postillionlied.json',
        pages: [0, 1, 2]
    }, 'Solovey': {
        title: 'Solovey',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/soprano/Solovey.json',
        pages: [0, 1]
    }, 'Bilongo': {
        title: 'Bilongo',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/bigband/Bilongo-Mandinga.json',
        pages: [7]
    }, 'Yama': {
        title: 'Yama',
        path: 'https://aarondavidnewman.github.io/Smoosic/release/library/Yama2.json',
        pages: [1]
    }
};
const addFileLink = (filename, txt, parent, mimeType = 'application/octet-stream') => {
    var anchor = $('<a></a>');
    var url = URL.createObjectURL(new Blob([txt], { type: mimeType }));
    $(anchor).attr('href', url);
    $(anchor).attr('download', filename);
    $(anchor).text('save');
    $(parent).html('');
    $(parent).append(anchor);
};
function renderVexTests(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const zipName = 'output.zip';
        const zipFile = new JSZip();
        const application = yield _application__WEBPACK_IMPORTED_MODULE_0__.SuiApplication.configure(config);
        const view = application.view;
        if (!view) {
            return;
        }
        const fileKeys = Object.keys(filesToRender);
        for (var i = 0; i < fileKeys.length; ++i) {
            const fileInfo = filesToRender[fileKeys[i]];
            const path = fileInfo.path;
            const loader = new _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_2__.SuiXhrLoader(path);
            const scoreJson = yield loader.loadAsync();
            const score = _smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.deserialize(scoreJson);
            yield view.changeScore(score);
            fileInfo.pages.forEach((page) => {
                const vexText = _smo_xform_toVex__WEBPACK_IMPORTED_MODULE_1__.SmoToVex.convert(view.score, { div: 'smoo', page });
                const fileName = `${fileInfo.title}-${page}.js`;
                zipFile.file(fileName, vexText);
            });
        }
        const blob = yield zipFile.generateAsync({ type: 'blob' });
        const element = document.getElementById('remoteLink');
        addFileLink(zipName, blob, element);
        $('#remoteLink a')[0].click();
    });
}


/***/ }),

/***/ "./src/application/keyCommands.ts":
/*!****************************************!*\
  !*** ./src/application/keyCommands.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiKeyCommands: () => (/* binding */ SuiKeyCommands)
/* harmony export */ });
/* harmony import */ var _ui_dialogs_tempo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ui/dialogs/tempo */ "./src/ui/dialogs/tempo.ts");
/* harmony import */ var _ui_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _render_audio_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/audio/player */ "./src/render/audio/player.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../smo/data/common */ "./src/smo/data/common.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.





/**
 * KeyCommands object handles key events and converts them into commands, updating the score and
 * display
 * @category SuiApplication
 * */
class SuiKeyCommands {
    constructor(params) {
        this.slashMode = false;
        this.slashMode = false;
        this.view = params.view;
        this.tracker = params.view.tracker;
        this.completeNotifier = params.completeNotifier;
        this.eventSource = params.eventSource;
    }
    tempoDialog() {
        const tempo = this.tracker.selections[0].measure.getTempo();
        (0,_ui_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_ui_dialogs_tempo__WEBPACK_IMPORTED_MODULE_0__.SuiTempoDialog, {
            id: 'tempoDialog',
            ctor: 'SuiTempoDialog',
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            tracker: this.tracker,
            startPromise: null,
            modifier: tempo
        });
    }
    get score() {
        return this.view.score;
    }
    undo() {
        this.view.undo();
    }
    copy() {
        this.view.copy();
    }
    paste() {
        this.view.paste();
    }
    toggleBeamGroup() {
        this.view.toggleBeamGroup();
    }
    beamSelections() {
        this.view.beamSelections();
    }
    toggleBeamDirection() {
        this.view.toggleBeamDirection();
    }
    collapseChord() {
        this.view.collapseChord();
    }
    togglePlayer() {
        if (_render_audio_player__WEBPACK_IMPORTED_MODULE_2__.SuiAudioPlayer.playing) {
            this.stopPlayer();
        }
        else {
            this.playScore();
        }
    }
    playScore() {
        this.view.playFromSelection();
    }
    stopPlayer() {
        this.view.stopPlayer();
    }
    pausePlayer() {
        _render_audio_player__WEBPACK_IMPORTED_MODULE_2__.SuiAudioPlayer.pausePlayer();
    }
    intervalAdd(interval, direction) {
        this.view.setInterval(direction * interval);
    }
    interval(keyEvent) {
        // code='Digit3'
        var interval = parseInt(keyEvent.keyCode, 10) - 49; // 48 === '0', 0 indexed
        if (isNaN(interval) || interval < 1 || interval > 7) {
            return;
        }
        this.intervalAdd(interval, keyEvent.shiftKey ? -1 : 1);
    }
    transpose(offset) {
        this.view.transposeSelections(offset);
    }
    transposeDown() {
        this.transpose(-1);
    }
    transposeUp() {
        this.transpose(1);
    }
    upOctave() {
        this.transpose(12);
    }
    downOctave() {
        this.transpose(-12);
    }
    makeRest() {
        this.view.makeRest();
    }
    setPitchCommand(letter) {
        this.view.setPitch(letter);
    }
    setPitch(keyEvent) {
        const letter = keyEvent.key.toLowerCase();
        if ((0,_smo_data_common__WEBPACK_IMPORTED_MODULE_4__.IsPitchLetter)(letter)) {
            this.setPitchCommand(letter);
        }
    }
    dotDuration() {
        this.view.batchDurationOperation('dotDuration');
    }
    undotDuration() {
        this.view.batchDurationOperation('undotDuration');
    }
    doubleDuration() {
        this.view.batchDurationOperation('doubleDuration');
    }
    halveDuration() {
        this.view.batchDurationOperation('halveDuration');
    }
    addMeasure(keyEvent) {
        this.view.addMeasure(keyEvent.shiftKey);
    }
    deleteNote() {
        this.view.deleteNote();
    }
    toggleCourtesyAccidental() {
        this.view.toggleCourtesyAccidentals();
    }
    toggleEnharmonic() {
        this.view.toggleEnharmonic();
    }
    makeTupletCommand(numNotes) {
        this.view.makeTuplet(numNotes);
    }
    makeTuplet(keyEvent) {
        const numNotes = parseInt(keyEvent.key, 10);
        this.makeTupletCommand(numNotes);
    }
    unmakeTuplet() {
        this.view.unmakeTuplet();
    }
    setNoteHead() {
        this.view.setNoteHead('x2');
    }
    removeGraceNote() {
        this.view.removeGraceNote();
    }
    addGraceNote() {
        this.view.addGraceNote();
    }
    slashGraceNotes() {
        this.view.slashGraceNotes();
    }
    toggleArticulationCommand(articulation, ctor) {
        this.view.toggleArticulation(articulation, ctor);
    }
    addRemoveAccent() {
        this.toggleArticulationCommand(_smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.articulations.accent, 'SmoArticulation');
    }
    addRemoveTenuto() {
        this.toggleArticulationCommand(_smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.articulations.tenuto, 'SmoArticulation');
    }
    addRemoveStaccato() {
        this.toggleArticulationCommand(_smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.articulations.staccato, 'SmoArticulation');
    }
    addRemoveMarcato() {
        this.toggleArticulationCommand(_smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.articulations.marcato, 'SmoArticulation');
    }
    addRemovePizzicato() {
        this.toggleArticulationCommand(_smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.articulations.pizzicato, 'SmoArticulation');
    }
}


/***/ }),

/***/ "./src/common/htmlHelpers.ts":
/*!***********************************!*\
  !*** ./src/common/htmlHelpers.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DomBuilder: () => (/* binding */ DomBuilder),
/* harmony export */   Draggable: () => (/* binding */ Draggable),
/* harmony export */   InputTrapper: () => (/* binding */ InputTrapper),
/* harmony export */   addFileLink: () => (/* binding */ addFileLink),
/* harmony export */   buildDom: () => (/* binding */ buildDom),
/* harmony export */   closeDialogPromise: () => (/* binding */ closeDialogPromise),
/* harmony export */   createTopDomContainer: () => (/* binding */ createTopDomContainer),
/* harmony export */   draggable: () => (/* binding */ draggable),
/* harmony export */   focusableElements: () => (/* binding */ focusableElements),
/* harmony export */   getDomContainer: () => (/* binding */ getDomContainer)
/* harmony export */ });
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
* returns an object that  lets you build a DOM in a somewhat readable way.
*
* ## Usage
* ``` javascript
* var b = buildDom;
* var r =
*   b('tr').classes('jsSharingMember').data('entitykey', key).data('name', name).data('entitytype', entityType).append(
*     b('td').classes('noSideBorderRight').append(
*    ...
* $(parent).append(r.dom());
* ```
* Don't forget the '.dom()' !  That is the actual jquery element object
* @returns
**/
class DomBuilder {
    constructor(el) {
        this.e = $('<' + el + '/>');
    }
    classes(cl) {
        $(this.e).addClass(cl);
        return this;
    }
    html(value) {
        $(this.e).html(value);
        return this;
    }
    data(name, value) {
        $(this.e).attr('data-' + name, value);
        return this;
    }
    attr(name, value) {
        $(this.e).attr(name, value);
        return this;
    }
    prop(name, value) {
        $(this.e).prop(name, value);
        return this;
    }
    css(name, value) {
        $(this.e).css(name, value);
        return this;
    }
    append(el) {
        $(this.e).append(el.e);
        return this;
    }
    text(tx) {
        $(this.e).append(document.createTextNode(tx));
        return this;
    }
    dom() {
        return this.e;
    }
}
function buildDom(e) {
    return new DomBuilder(e);
}
function focusableElements() {
    return ['a', 'input', 'select', 'textarea', 'button', 'li[tabindex]', 'div[tabindex]'];
}
function addFileLink(filename, txt, parent, mimeType = 'application/octet-stream') {
    var anchor = $('<a></a>');
    var url = URL.createObjectURL(new Blob([txt], { type: mimeType }));
    $(anchor).attr('href', url);
    $(anchor).attr('download', filename);
    $(anchor).text('save');
    $(parent).html('');
    $(parent).append(anchor);
}
class InputTrapper {
    constructor(selector) {
        this.selector = selector;
        this.modalInputs = [];
        this.disabledInputs = [];
        this.siblingInputs = [];
        this.parent = $(this.selector);
        this.id = $(this.parent).attr('id');
        this.parentId = $(this.parent).parent().attr('id');
        var idstr = Math.round(Math.random() * (999999 - 1) + 1);
        if (!this.id) {
            $(this.parent).attr('id', idstr + '-element');
            this.id = $(this.parent).attr('id');
        }
        if (!this.parentId) {
            $(this.parent).parent().attr('id', idstr + '-parent');
            this.parentId = $(this.parent).parent().attr('id');
        }
    }
    trap() {
        // aria-hide peers of dialog and peers of parent that are not the parent.
        var peers = $(this.parent).parent().children().toArray();
        peers.forEach((node) => {
            var ptag = $(node)[0].tagName;
            if (ptag === 'SCRIPT' || ptag === 'LINK' || ptag === 'STYLE') {
                ;
            }
            else if ($(node).attr('id') === this.parentId ||
                $(node).attr('id') === this.id ||
                $(node).hasClass('helpDialog')) { // help dialog can be shown with modal dialog
                ;
            }
            else {
                var hidden = $(node).attr('aria-hidden');
                if (!hidden || hidden != 'true') {
                    $(node).attr('aria-hidden', 'true');
                    this.siblingInputs.push(node);
                }
            }
        });
        focusableElements().forEach((etype) => {
            var elements = $(etype).toArray();
            elements.forEach((element) => {
                var tagName = $(element)[0].tagName;
                if ($(element).attr('id') === this.id) {
                    ;
                }
                else if ($(element).closest('.helpDialog').length) {
                    ;
                }
                else if ($(element).prop('disabled')) {
                    ;
                }
                else if ($(element).hasClass('hide')) {
                    ;
                }
                else if ($(element).closest(this.selector).length) {
                    // inside
                    this.modalInputs.push(element);
                }
                else if ((tagName === 'A' || tagName === 'DIV' || tagName === 'LI') && $(element).attr('tabIndex') === '-1') {
                    ;
                }
                else {
                    this.disabledInputs.push(element);
                    if (tagName === 'A' || tagName === 'DIV' || tagName === 'LI') {
                        $(element).attr('tabIndex', '-1');
                    }
                    else {
                        $(element).prop('disabled', true);
                    }
                }
            });
        });
    }
    close() {
        this.disabledInputs.forEach(function (element) {
            var tagName = $(element)[0].tagName;
            if (tagName === 'A' || tagName === 'DIV' || tagName === 'LI') {
                $(element).attr('tabIndex', '0');
            }
            else {
                $(element).prop('disabled', false);
            }
        });
        this.siblingInputs.forEach((el) => {
            $(el).removeAttr('aria-hidden');
        });
    }
}
function closeDialogPromise() {
    return new Promise((resolve) => {
        $('body').off('dialogDismiss').on('dialogDismiss', function () {
            resolve();
        });
    });
}
/**
 * Extract an HTMLElement from a Jquery id, DOM element ID, or HTMLELement.  If
 * an HTMLElement can't be created, return null
 * @param selector
 * @returns HTMLElement
 */
function getDomContainer(selector) {
    if (typeof (selector) === 'string') {
        if (selector[0] === '#') {
            const el = $(selector)[0];
            if (!(el instanceof HTMLElement)) {
                return undefined;
            }
            return el;
        }
        else {
            const el = document.getElementById(selector);
            if (!el) {
                return undefined;
            }
            return el;
        }
    }
    else if (selector instanceof HTMLElement) {
        return selector;
    }
    else {
        return undefined;
    }
}
/**
 * Create a top-level HTML element for modal containers - dialogs etc.
 * from a jquery selector, or just return same if it exists
 * @param selector
 * @returns
 */
function createTopDomContainer(selector, elementType) {
    const container = $(selector);
    if (!elementType) {
        elementType = 'div';
    }
    if (container.length > 0) {
        return container[0];
    }
    else {
        const ndiv = document.createElement(elementType);
        if (typeof (selector) === 'string') {
            const cl = (selector[0] === '.' || selector[0] === '#') ? selector.substring(1) : selector;
            $(ndiv).addClass(cl);
            if (selector[0] === '#') {
                $(ndiv).attr('id', selector.substring(1));
            }
        }
        $('body').append(ndiv);
        return $(ndiv)[0];
    }
}
/**
 *
 * @param parameters
 * @returns
 */
function draggable(parameters) {
    return new Draggable(parameters);
}
class Draggable {
    constructor(parameters) {
        this.dragging = false;
        this.parent = parameters.parent;
        this.handle = parameters.handle;
        this.animeClass = parameters.animateDiv;
        this.dragParent = parameters.dragParent;
        // TODO: make '.dom-container' a part of the configuration
        this.domOffset = $('.dom-container').offset();
        this.svg = parameters['svg'];
        this.width = $(this.parent).outerWidth();
        this.height = $(this.parent).outerHeight();
        this.lastX = $(this.handle).offset().left - this.domOffset.left;
        this.lastY = $(this.handle).offset().top - this.domOffset.top;
        this.cb = parameters.cb;
        this.moveParent = parameters.moveParent;
        var self = this;
        // $('.itemMenu input[name="itemTitle"]').css('width','60%');
        $(this.handle)
            .off('mousedown').on('mousedown', function (e) {
            self.mousedown(e);
        });
        $(document)
            .on('mousemove', function (e) {
            self.mousemove(e);
        })
            .on('mouseup', function (e) {
            self.mouseup(e);
        });
    }
    _animate(e) {
        this.lastX = e.clientX;
        this.lastY = e.clientY;
        $(this.animeClass).css('left', this.lastX - this.domOffset.left);
        $(this.animeClass).css('top', this.lastY - this.domOffset.top);
        if (this.dragParent) {
            $(this.parent).css('left', this.lastX + 'px');
            $(this.parent).css('top', this.lastY + 'px');
        }
    }
    mousedown(e) {
        if (!this.dragging) {
            $(this.animeClass).removeClass('hide');
            $(this.animeClass).css('width', this.width);
            $(this.animeClass).css('height', this.height);
        }
        this.dragging = true;
        this._animate(e);
    }
    enddrag() {
        this.lastX = Math.max(this.lastX - this.domOffset.left, 0);
        this.lastY = Math.max(this.lastY - this.domOffset.top, 0);
        if (this.moveParent) {
            $(this.parent).css('left', this.lastX + 'px');
            $(this.parent).css('top', this.lastY + 'px');
        }
        $(this.animeClass).addClass('hide');
        this.cb(this.lastX, this.lastY);
    }
    mouseup(e) {
        // stop resizing
        if (this.dragging) {
            this.dragging = false;
            this.lastX = e.clientX;
            this.lastY = e.clientY;
            this.enddrag();
        }
    }
    mousemove(e) {
        // we don't want to do anything if we aren't resizing.
        if (!this.dragging)
            return;
        this._animate(e);
    }
}


/***/ }),

/***/ "./src/common/midiWriter.js":
/*!**********************************!*\
  !*** ./src/common/midiWriter.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _MidiWriter: () => (/* binding */ _MidiWriter)
/* harmony export */ });
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../smo/data/music */ "./src/smo/data/music.ts");
// Credit for Midi functionality goes to:
// https://github.com/grimmdude/MidiWriterJS

var _MidiWriter = function () {
    /**
     * MIDI file format constants.
     * @return {Constants}
     */
    var Constants = {
        VERSION: 1,
        HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64],
        // Mthd
        HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06],
        // Header size for SMF
        HEADER_CHUNK_FORMAT0: [0x00, 0x00],
        // Midi Type 0 id
        HEADER_CHUNK_FORMAT1: [0x00, 0x01],
        // Midi Type 1 id
        HEADER_CHUNK_DIVISION: [0x00, 0x80],
        // Defaults to 128 ticks per beat
        TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b],
        // MTrk,
        META_EVENT_ID: 0xFF,
        META_TEXT_ID: 0x01,
        META_COPYRIGHT_ID: 0x02,
        META_TRACK_NAME_ID: 0x03,
        META_INSTRUMENT_NAME_ID: 0x04,
        META_LYRIC_ID: 0x05,
        META_MARKER_ID: 0x06,
        META_CUE_POINT: 0x07,
        META_TEMPO_ID: 0x51,
        META_SMTPE_OFFSET: 0x54,
        META_TIME_SIGNATURE_ID: 0x58,
        META_KEY_SIGNATURE_ID: 0x59,
        META_END_OF_TRACK_ID: [0x2F, 0x00],
        CONTROLLER_CHANGE_STATUS: 0xB0,
        // includes channel number (0)
        PROGRAM_CHANGE_STATUS: 0xC0,
        // includes channel number (0)
        PITCH_BEND_STATUS: 0xE0 // includes channel number (0)
    };
    function _typeof(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function (obj) {
                return typeof obj;
            };
        }
        else {
            _typeof = function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
            return false;
        if (Reflect.construct.sham)
            return false;
        if (typeof Proxy === "function")
            return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
            return true;
        }
        catch (e) {
            return false;
        }
    }
    function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
            _construct = Reflect.construct;
        }
        else {
            _construct = function _construct(Parent, args, Class) {
                var a = [null];
                a.push.apply(a, args);
                var Constructor = Function.bind.apply(Parent, a);
                var instance = new Constructor();
                if (Class)
                    _setPrototypeOf(instance, Class.prototype);
                return instance;
            };
        }
        return _construct.apply(null, arguments);
    }
    function _isNativeFunction(fn) {
        return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? new Map() : undefined;
        _wrapNativeSuper = function _wrapNativeSuper(Class) {
            if (Class === null || !_isNativeFunction(Class))
                return Class;
            if (typeof Class !== "function") {
                throw new TypeError("Super expression must either be null or a function");
            }
            if (typeof _cache !== "undefined") {
                if (_cache.has(Class))
                    return _cache.get(Class);
                _cache.set(Class, Wrapper);
            }
            function Wrapper() {
                return _construct(Class, arguments, _getPrototypeOf(this).constructor);
            }
            Wrapper.prototype = Object.create(Class.prototype, {
                constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            return _setPrototypeOf(Wrapper, Class);
        };
        return _wrapNativeSuper(Class);
    }
    function _wrapRegExp(re, groups) {
        _wrapRegExp = function (re, groups) {
            return new BabelRegExp(re, undefined, groups);
        };
        var _RegExp = _wrapNativeSuper(RegExp);
        var _super = RegExp.prototype;
        var _groups = new WeakMap();
        function BabelRegExp(re, flags, groups) {
            var _this = _RegExp.call(this, re, flags);
            _groups.set(_this, groups || _groups.get(re));
            return _this;
        }
        _inherits(BabelRegExp, _RegExp);
        BabelRegExp.prototype.exec = function (str) {
            var result = _super.exec.call(this, str);
            if (result)
                result.groups = buildGroups(result, this);
            return result;
        };
        BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
            if (typeof substitution === "string") {
                var groups = _groups.get(this);
                return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
                    return "$" + groups[name];
                }));
            }
            else if (typeof substitution === "function") {
                var _this = this;
                return _super[Symbol.replace].call(this, str, function () {
                    var args = [];
                    args.push.apply(args, arguments);
                    if (typeof args[args.length - 1] !== "object") {
                        args.push(buildGroups(args, _this));
                    }
                    return substitution.apply(this, args);
                });
            }
            else {
                return _super[Symbol.replace].call(this, str, substitution);
            }
        };
        function buildGroups(result, re) {
            var g = _groups.get(re);
            return Object.keys(g).reduce(function (groups, name) {
                groups[name] = result[g[name]];
                return groups;
            }, Object.create(null));
        }
        return _wrapRegExp.apply(this, arguments);
    }
    /**
     * Static utility functions used throughout the library.
     */
    var Utils = /*#__PURE__*/ function () {
        function Utils() {
            _classCallCheck(this, Utils);
        }
        _createClass(Utils, null, [{
                key: "version",
                value: 
                /**
                 * Gets MidiWriterJS version number.
                 * @return {string}
                 */
                function version() {
                    return Constants.VERSION;
                }
                /**
                 * Convert a string to an array of bytes
                 * @param {string} string
                 * @return {array}
                 */
            }, {
                key: "stringToBytes",
                value: function stringToBytes(string) {
                    return string.split('').map(function (_char) {
                        return _char.charCodeAt();
                    });
                }
                /**
                 * Checks if argument is a valid number.
                 * @param {*} n - Value to check
                 * @return {boolean}
                 */
            }, {
                key: "isNumeric",
                value: function isNumeric(n) {
                    return !isNaN(parseFloat(n)) && isFinite(n);
                }
                /**
                 * Returns the correct MIDI number for the specified pitch.
                 * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi
                 * @param {(string|number)} pitch - 'C#4' or midi note code
                 * @return {number}
                 */
            }, {
                key: "getPitch",
                value: function getPitch(pitch) {
                    return _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.midiPitchToMidiNumber(pitch);
                }
                /**
                 * Translates number of ticks to MIDI timestamp format, returning an array of
                 * hex strings with the time values. Midi has a very particular time to express time,
                 * take a good look at the spec before ever touching this function.
                 * Thanks to https://github.com/sergi/jsmidi
                 *
                 * @param {number} ticks - Number of ticks to be translated
                 * @return {array} - Bytes that form the MIDI time value
                 */
            }, {
                key: "numberToVariableLength",
                value: function numberToVariableLength(ticks) {
                    ticks = Math.round(ticks);
                    var buffer = ticks & 0x7F;
                    while (ticks = ticks >> 7) {
                        buffer <<= 8;
                        buffer |= ticks & 0x7F | 0x80;
                    }
                    var bList = [];
                    while (true) {
                        bList.push(buffer & 0xff);
                        if (buffer & 0x80)
                            buffer >>= 8;
                        else {
                            break;
                        }
                    }
                    return bList;
                }
                /**
                 * Counts number of bytes in string
                 * @param {string} s
                 * @return {array}
                 */
            }, {
                key: "stringByteCount",
                value: function stringByteCount(s) {
                    return encodeURI(s).split(/%..|./).length - 1;
                }
                /**
                 * Get an int from an array of bytes.
                 * @param {array} bytes
                 * @return {number}
                 */
            }, {
                key: "numberFromBytes",
                value: function numberFromBytes(bytes) {
                    var hex = '';
                    var stringResult;
                    bytes.forEach(function (_byte) {
                        stringResult = _byte.toString(16); // ensure string is 2 chars
                        if (stringResult.length == 1)
                            stringResult = "0" + stringResult;
                        hex += stringResult;
                    });
                    return parseInt(hex, 16);
                }
                /**
                 * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded
                 * @param {number} number
                 * @param {number} bytesNeeded
                 * @return {array} - Array of bytes
                 */
            }, {
                key: "numberToBytes",
                value: function numberToBytes(number, bytesNeeded) {
                    bytesNeeded = bytesNeeded || 1;
                    var hexString = number.toString(16);
                    if (hexString.length & 1) {
                        // Make sure hex string is even number of chars
                        hexString = '0' + hexString;
                    } // Split hex string into an array of two char elements
                    var hexArray = hexString.match(/.{2}/g); // Now parse them out as integers
                    hexArray = hexArray.map(function (item) {
                        return parseInt(item, 16);
                    }); // Prepend empty bytes if we don't have enough
                    if (hexArray.length < bytesNeeded) {
                        while (bytesNeeded - hexArray.length > 0) {
                            hexArray.unshift(0);
                        }
                    }
                    return hexArray;
                }
                /**
                 * Converts value to array if needed.
                 * @param {string} value
                 * @return {array}
                 */
            }, {
                key: "toArray",
                value: function toArray(value) {
                    if (Array.isArray(value))
                        return value;
                    return [value];
                }
                /**
                 * Converts velocity to value 0-127
                 * @param {number} velocity - Velocity value 1-100
                 * @return {number}
                 */
            }, {
                key: "convertVelocity",
                value: function convertVelocity(velocity) {
                    // Max passed value limited to 100
                    velocity = velocity > 100 ? 100 : velocity;
                    return Math.round(velocity / 100 * 127);
                }
                /**
                 * Gets the total number of ticks of a specified duration.
                 * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
                 * @param {(string|array)} duration
                 * @return {number}
                 */
            }, {
                key: "getTickDuration",
                value: function getTickDuration(duration) {
                    if (Array.isArray(duration)) {
                        // Recursively execute this method for each item in the array and return the sum of tick durations.
                        return duration.map(function (value) {
                            return Utils.getTickDuration(value);
                        }).reduce(function (a, b) {
                            return a + b;
                        }, 0);
                    }
                    duration = duration.toString();
                    if (duration.toLowerCase().charAt(0) === 't') {
                        // If duration starts with 't' then the number that follows is an explicit tick count
                        return parseInt(duration.substring(1));
                    } // Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION
                    var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);
                    var tickDuration = quarterTicks * Utils.getDurationMultiplier(duration);
                    return Utils.getRoundedIfClose(tickDuration);
                }
                /**
                 * Due to rounding errors in JavaScript engines,
                 * it's safe to round when we're very close to the actual tick number
                 *
                 * @static
                 * @param {number} tick
                 * @return {number}
                 */
            }, {
                key: "getRoundedIfClose",
                value: function getRoundedIfClose(tick) {
                    var roundedTick = Math.round(tick);
                    return Math.abs(roundedTick - tick) < 0.000001 ? roundedTick : tick;
                }
                /**
                 * Due to low precision of MIDI,
                 * we need to keep track of rounding errors in deltas.
                 * This function will calculate the rounding error for a given duration.
                 *
                 * @static
                 * @param {number} tick
                 * @return {number}
                 */
            }, {
                key: "getPrecisionLoss",
                value: function getPrecisionLoss(tick) {
                    var roundedTick = Math.round(tick);
                    return roundedTick - tick;
                }
                /**
                 * Gets what to multiple ticks/quarter note by to get the specified duration.
                 * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
                 * @param {string} duration
                 * @return {number}
                 */
            }, {
                key: "getDurationMultiplier",
                value: function getDurationMultiplier(duration) {
                    // Need to apply duration here.
                    // Quarter note == Constants.HEADER_CHUNK_DIVISION ticks.
                    if (duration === '0')
                        return 0;
                    var match = duration.match(/*#__PURE__*/ _wrapRegExp(/^(d+)?([0-9]+)(?:t([0-9]*))?/, {
                        dotted: 1,
                        base: 2,
                        tuplet: 3
                    }));
                    if (match) {
                        var base = Number(match.groups.base); // 1 or any power of two:
                        var isValidBase = base === 1 || (base & base - 1) === 0;
                        if (isValidBase) {
                            // how much faster or slower is this note compared to a quarter?
                            var ratio = base / 4;
                            var durationInQuarters = 1 / ratio;
                            var _match$groups = match.groups, dotted = _match$groups.dotted, tuplet = _match$groups.tuplet;
                            if (dotted) {
                                var thisManyDots = dotted.length;
                                var divisor = Math.pow(2, thisManyDots);
                                durationInQuarters = durationInQuarters + durationInQuarters * ((divisor - 1) / divisor);
                            }
                            if (typeof tuplet === 'string') {
                                var fitInto = durationInQuarters * 2; // default to triplet:
                                var thisManyNotes = Number(tuplet || '3');
                                durationInQuarters = fitInto / thisManyNotes;
                            }
                            return durationInQuarters;
                        }
                    }
                    throw new Error(duration + ' is not a valid duration.');
                }
            }]);
        return Utils;
    }();
    /**
     * Holds all data for a "note on" MIDI event
     * @param {object} fields {data: []}
     * @return {NoteOnEvent}
     */
    var NoteOnEvent = /*#__PURE__*/ function () {
        function NoteOnEvent(fields) {
            _classCallCheck(this, NoteOnEvent);
            // Set default fields
            fields = Object.assign({
                channel: 1,
                startTick: null,
                velocity: 50,
                wait: 0
            }, fields);
            this.type = 'note-on';
            this.channel = fields.channel;
            this.pitch = fields.pitch;
            this.wait = fields.wait;
            this.velocity = fields.velocity;
            this.startTick = fields.startTick;
            this.midiNumber = Utils.getPitch(this.pitch);
            this.tick = null;
            this.delta = null;
            this.data = fields.data;
        }
        /**
         * Builds int array for this event.
         * @param {Track} track - parent track
         * @return {NoteOnEvent}
         */
        _createClass(NoteOnEvent, [{
                key: "buildData",
                value: function buildData(track, precisionDelta) {
                    this.data = []; // Explicitly defined startTick event
                    if (this.startTick) {
                        this.tick = Utils.getRoundedIfClose(this.startTick); // If this is the first event in the track then use event's starting tick as delta.
                        if (track.tickPointer == 0) {
                            this.delta = this.tick;
                        }
                    }
                    else {
                        this.delta = Utils.getTickDuration(this.wait);
                        this.tick = Utils.getRoundedIfClose(track.tickPointer + this.delta);
                    }
                    this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);
                    this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection).concat(this.getStatusByte(), this.midiNumber, Utils.convertVelocity(this.velocity));
                    return this;
                }
                /**
                 * Gets the note on status code based on the selected channel. 0x9{0-F}
                 * Note on at channel 0 is 0x90 (144)
                 * 0 = Ch 1
                 * @return {number}
                 */
            }, {
                key: "getStatusByte",
                value: function getStatusByte() {
                    return 144 + this.channel - 1;
                }
            }]);
        return NoteOnEvent;
    }();
    /**
     * Holds all data for a "note off" MIDI event
     * @param {object} fields {data: []}
     * @return {NoteOffEvent}
     */
    var NoteOffEvent = /*#__PURE__*/ function () {
        function NoteOffEvent(fields) {
            _classCallCheck(this, NoteOffEvent);
            // Set default fields
            fields = Object.assign({
                channel: 1,
                velocity: 50,
                tick: null
            }, fields);
            this.type = 'note-off';
            this.channel = fields.channel;
            this.pitch = fields.pitch;
            this.duration = fields.duration;
            this.velocity = fields.velocity;
            this.midiNumber = Utils.getPitch(this.pitch);
            this.tick = fields.tick;
            this.delta = Utils.getTickDuration(this.duration);
            this.data = fields.data;
        }
        /**
         * Builds int array for this event.
         * @param {Track} track - parent track
         * @return {NoteOffEvent}
         */
        _createClass(NoteOffEvent, [{
                key: "buildData",
                value: function buildData(track, precisionDelta) {
                    if (this.tick === null) {
                        this.tick = Utils.getRoundedIfClose(this.delta + track.tickPointer);
                    }
                    this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);
                    this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection).concat(this.getStatusByte(), this.midiNumber, Utils.convertVelocity(this.velocity));
                    return this;
                }
                /**
                 * Gets the note off status code based on the selected channel. 0x8{0-F}
                 * Note off at channel 0 is 0x80 (128)
                 * 0 = Ch 1
                 * @return {number}
                 */
            }, {
                key: "getStatusByte",
                value: function getStatusByte() {
                    return 128 + this.channel - 1;
                }
            }]);
        return NoteOffEvent;
    }();
    /**
     * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.
     * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}
     * @return {NoteEvent}
     */
    var NoteEvent = /*#__PURE__*/ function () {
        function NoteEvent(fields) {
            _classCallCheck(this, NoteEvent);
            // Set default fields
            fields = Object.assign({
                channel: 1,
                repeat: 1,
                sequential: false,
                startTick: null,
                velocity: 50,
                wait: 0
            }, fields);
            this.data = [];
            this.type = 'note';
            this.pitch = Utils.toArray(fields.pitch);
            this.channel = fields.channel;
            this.duration = fields.duration;
            this.grace = fields.grace;
            this.repeat = fields.repeat;
            this.sequential = fields.sequential;
            this.startTick = fields.startTick;
            this.velocity = fields.velocity;
            this.wait = fields.wait;
            this.tickDuration = Utils.getTickDuration(this.duration);
            this.restDuration = Utils.getTickDuration(this.wait);
            this.events = []; // Hold actual NoteOn/NoteOff events
        }
        /**
         * Builds int array for this event.
         * @return {NoteEvent}
         */
        _createClass(NoteEvent, [{
                key: "buildData",
                value: function buildData() {
                    var _this = this;
                    // Reset data array
                    this.data = [];
                    this.tickDuration;
                    this.restDuration; // Apply grace note(s) and subtract ticks (currently 1 tick per grace note) from tickDuration so net value is the same
                    if (this.grace) {
                        var graceDuration = 1;
                        this.grace = Utils.toArray(this.grace);
                        this.grace.forEach(function (pitch) {
                            var noteEvent = new NoteEvent({
                                pitch: _this.grace,
                                duration: 'T' + graceDuration
                            });
                            _this.data = _this.data.concat(noteEvent.data);
                        });
                    } // fields.pitch could be an array of pitches.
                    // If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.
                    if (!this.sequential) {
                        // Handle repeat
                        for (var j = 0; j < this.repeat; j++) {
                            // Note on
                            this.pitch.forEach(function (p, i) {
                                if (i == 0) {
                                    var noteOnNew = new NoteOnEvent({
                                        channel: _this.channel,
                                        wait: _this.wait,
                                        velocity: _this.velocity,
                                        pitch: p,
                                        startTick: _this.startTick
                                    });
                                }
                                else {
                                    // Running status (can ommit the note on status)
                                    //noteOn = new NoteOnEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});
                                    var noteOnNew = new NoteOnEvent({
                                        channel: _this.channel,
                                        wait: 0,
                                        velocity: _this.velocity,
                                        pitch: p,
                                        startTick: _this.startTick
                                    });
                                }
                                _this.events.push(noteOnNew);
                            }); // Note off
                            this.pitch.forEach(function (p, i) {
                                if (i == 0) {
                                    //noteOff = new NoteOffEvent({data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), Utils.convertVelocity(this.velocity))});
                                    var noteOffNew = new NoteOffEvent({
                                        channel: _this.channel,
                                        duration: _this.duration,
                                        velocity: _this.velocity,
                                        pitch: p,
                                        tick: _this.startTick !== null ? Utils.getTickDuration(_this.duration) - _this.startTick : null
                                    });
                                }
                                else {
                                    // Running status (can ommit the note off status)
                                    //noteOff = new NoteOffEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});
                                    var noteOffNew = new NoteOffEvent({
                                        channel: _this.channel,
                                        duration: 0,
                                        velocity: _this.velocity,
                                        pitch: p,
                                        tick: _this.startTick !== null ? Utils.getTickDuration(_this.duration) - _this.startTick : null
                                    });
                                }
                                _this.events.push(noteOffNew);
                            });
                        }
                    }
                    else {
                        // Handle repeat
                        for (var j = 0; j < this.repeat; j++) {
                            this.pitch.forEach(function (p, i) {
                                var noteOnNew = new NoteOnEvent({
                                    channel: _this.channel,
                                    wait: i > 0 ? 0 : _this.wait,
                                    // wait only applies to first note in repetition
                                    velocity: _this.velocity,
                                    pitch: p,
                                    startTick: _this.startTick
                                });
                                var noteOffNew = new NoteOffEvent({
                                    channel: _this.channel,
                                    duration: _this.duration,
                                    velocity: _this.velocity,
                                    pitch: p
                                });
                                _this.events.push(noteOnNew, noteOffNew);
                            });
                        }
                    }
                    return this;
                }
            }]);
        return NoteEvent;
    }();
    /**
     * Holds all data for a "Pitch Bend" MIDI event
     * [ -1.0, 0, 1.0 ] ->  [ 0, 8192, 16383]
     * @param {object} fields { bend : float, channel : int }
     * @return {PitchBendEvent}
     */
    var scale14bits = function scale14bits(zeroOne) {
        if (zeroOne <= 0) {
            return Math.floor(16384 * (zeroOne + 1) / 2);
        }
        return Math.floor(16383 * (zeroOne + 1) / 2);
    };
    var PitchBendEvent = function PitchBendEvent(fields) {
        _classCallCheck(this, PitchBendEvent);
        this.type = 'pitch-bend';
        var bend14 = scale14bits(fields.bend);
        var channel = fields.channel || 0;
        var lsbValue = bend14 & 0x7f;
        var msbValue = bend14 >> 7 & 0x7f;
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.PITCH_BEND_STATUS | channel, lsbValue, msbValue);
    };
    /**
     * Holds all data for a "program change" MIDI event
     * @param {object} fields {instrument: integer}
     * @return {ProgramChangeEvent}
     */
    var ProgramChangeEvent = function ProgramChangeEvent(fields) {
        _classCallCheck(this, ProgramChangeEvent);
        this.type = 'program'; // delta time defaults to 0.
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.PROGRAM_CHANGE_STATUS, fields.instrument);
    };
    /**
     * Holds all data for a "controller change" MIDI event
     * @param {object} fields {controllerNumber: integer, controllerValue: integer}
     * @return {ControllerChangeEvent}
     */
    var ControllerChangeEvent = function ControllerChangeEvent(fields) {
        _classCallCheck(this, ControllerChangeEvent);
        this.type = 'controller'; // delta time defaults to 0.
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.CONTROLLER_CHANGE_STATUS, fields.controllerNumber, fields.controllerValue);
    };
    /**
     * Object representation of a tempo meta event.
     * @param {string} text - Copyright text
     * @return {CopyrightEvent}
     */
    var CopyrightEvent = function CopyrightEvent(text) {
        _classCallCheck(this, CopyrightEvent);
        this.type = 'copyright';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_COPYRIGHT_ID, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Text
        );
    };
    /**
     * Object representation of a cue point meta event.
     * @param {string} text - Cue point text
     * @return {CuePointEvent}
     */
    var CuePointEvent = function CuePointEvent(text) {
        _classCallCheck(this, CuePointEvent);
        this.type = 'marker';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_CUE_POINT, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Text
        );
    };
    /**
     * Object representation of a end track meta event.
     * @return {EndTrackEvent}
     */
    var EndTrackEvent = function EndTrackEvent() {
        _classCallCheck(this, EndTrackEvent);
        this.type = 'end-track'; // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_END_OF_TRACK_ID);
    };
    /**
     * Object representation of an instrument name meta event.
     * @param {number} bpm - Beats per minute
     * @return {InstrumentNameEvent}
     */
    var InstrumentNameEvent = function InstrumentNameEvent(text) {
        _classCallCheck(this, InstrumentNameEvent);
        this.type = 'instrument-name';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_INSTRUMENT_NAME_ID, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Instrument name
        );
    };
    /**
     * Object representation of a key signature meta event.
     * @return {KeySignatureEvent}
     */
    var KeySignatureEvent = function KeySignatureEvent(sf, mi) {
        _classCallCheck(this, KeySignatureEvent);
        this.type = 'key-signature';
        var mode = mi || 0;
        sf = sf || 0; //	Function called with string notation
        if (typeof mi === 'undefined') {
            var fifths = [['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'], ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']];
            var _sflen = sf.length;
            var note = sf || 'C';
            if (sf[0] === sf[0].toLowerCase())
                mode = 1;
            if (_sflen > 1) {
                switch (sf.charAt(_sflen - 1)) {
                    case 'm':
                        mode = 1;
                        note = sf.charAt(0).toLowerCase();
                        note = note.concat(sf.substring(1, _sflen - 1));
                        break;
                    case '-':
                        mode = 1;
                        note = sf.charAt(0).toLowerCase();
                        note = note.concat(sf.substring(1, _sflen - 1));
                        break;
                    case 'M':
                        mode = 0;
                        note = sf.charAt(0).toUpperCase();
                        note = note.concat(sf.substring(1, _sflen - 1));
                        break;
                    case '+':
                        mode = 0;
                        note = sf.charAt(0).toUpperCase();
                        note = note.concat(sf.substring(1, _sflen - 1));
                        break;
                }
            }
            var fifthindex = fifths[mode].indexOf(note);
            sf = fifthindex === -1 ? 0 : fifthindex - 7;
        } // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_KEY_SIGNATURE_ID, [0x02], // Size
        Utils.numberToBytes(sf, 1), // Number of sharp or flats ( < 0 flat; > 0 sharp)
        Utils.numberToBytes(mode, 1) // Mode: 0 major, 1 minor
        );
    };
    /**
     * Object representation of a lyric meta event.
     * @param {string} text - Lyric text
     * @return {LyricEvent}
     */
    var LyricEvent = function LyricEvent(text) {
        _classCallCheck(this, LyricEvent);
        this.type = 'marker';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_LYRIC_ID, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Text
        );
    };
    /**
     * Object representation of a marker meta event.
     * @param {string} text - Marker text
     * @return {MarkerEvent}
     */
    var MarkerEvent = function MarkerEvent(text) {
        _classCallCheck(this, MarkerEvent);
        this.type = 'marker';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_MARKER_ID, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Text
        );
    };
    /**
     * Object representation of a tempo meta event.
     * @param {number} bpm - Beats per minute
     * @return {TempoEvent}
     */
    var TempoEvent = function TempoEvent(bpm) {
        _classCallCheck(this, TempoEvent);
        this.type = 'tempo';
        var tempo = Math.round(60000000 / bpm); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_TEMPO_ID, [0x03], // Size
        Utils.numberToBytes(tempo, 3) // Tempo, 3 bytes
        );
    };
    /**
     * Object representation of a tempo meta event.
     * @param {number} bpm - Beats per minute
     * @return {TextEvent}
     */
    var TextEvent = function TextEvent(text) {
        _classCallCheck(this, TextEvent);
        this.type = 'text';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_TEXT_ID, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Text
        );
    };
    /**
     * Object representation of a time signature meta event.
     * @return {TimeSignatureEvent}
     */
    var TimeSignatureEvent = function TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock) {
        _classCallCheck(this, TimeSignatureEvent);
        this.type = 'time-signature'; // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_TIME_SIGNATURE_ID, [0x04], // Size
        Utils.numberToBytes(numerator, 1), // Numerator, 1 bytes
        Utils.numberToBytes(Math.log2(denominator), 1), // Denominator is expressed as pow of 2, 1 bytes
        Utils.numberToBytes(midiclockspertick || 24, 1), // MIDI Clocks per tick, 1 bytes
        Utils.numberToBytes(notespermidiclock || 8, 1) // Number of 1/32 notes per MIDI clocks, 1 bytes
        );
    };
    /**
     * Object representation of a tempo meta event.
     * @param {number} bpm - Beats per minute
     * @return {TrackNameEvent}
     */
    var TrackNameEvent = function TrackNameEvent(text) {
        _classCallCheck(this, TrackNameEvent);
        this.type = 'track-name';
        var textBytes = Utils.stringToBytes(text); // Start with zero time delta
        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, Constants.META_TRACK_NAME_ID, Utils.numberToVariableLength(textBytes.length), // Size
        textBytes // Text
        );
    };
    /**
     * Holds all data for a track.
     * @param {object} fields {type: number, data: array, size: array, events: array}
     * @return {Track}
     */
    var Track = /*#__PURE__*/ function () {
        function Track() {
            _classCallCheck(this, Track);
            this.type = Constants.TRACK_CHUNK_TYPE;
            this.data = [];
            this.size = [];
            this.events = [];
            this.explicitTickEvents = []; // If there are any events with an explicit tick defined then we will create a "sub" track for those
            // and merge them in and the end.
            this.tickPointer = 0; // Each time an event is added this will increase
        }
        /**
         * Adds any event type to the track.
         * Events without a specific startTick property are assumed to be added in order of how they should output.
         * Events with a specific startTick property are set aside for now will be merged in during build process.
         * @param {(NoteEvent|ProgramChangeEvent)} events - Event object or array of Event objects.
         * @param {function} mapFunction - Callback which can be used to apply specific properties to all events.
         * @return {Track}
         */
        _createClass(Track, [{
                key: "addEvent",
                value: function addEvent(events, mapFunction) {
                    var _this = this;
                    Utils.toArray(events).forEach(function (event, i) {
                        if (event instanceof NoteEvent) {
                            // Handle map function if provided
                            if (typeof mapFunction === 'function') {
                                var properties = mapFunction(i, event);
                                if (_typeof(properties) === 'object') {
                                    for (var j in properties) {
                                        switch (j) {
                                            case 'channel':
                                                event.channel = properties[j];
                                                break;
                                            case 'duration':
                                                event.duration = properties[j];
                                                break;
                                            case 'sequential':
                                                event.sequential = properties[j];
                                                break;
                                            case 'velocity':
                                                event.velocity = Utils.convertVelocity(properties[j]);
                                                break;
                                        }
                                    }
                                }
                            } // If this note event has an explicit startTick then we need to set aside for now
                            if (event.startTick !== null) {
                                _this.explicitTickEvents.push(event);
                            }
                            else {
                                // Push each on/off event to track's event stack
                                event.buildData().events.forEach(function (e) {
                                    return _this.events.push(e);
                                });
                            }
                        }
                        else {
                            _this.events.push(event);
                        }
                    });
                    return this;
                }
                /**
                 * Builds int array of all events.
                 * @return {Track}
                 */
            }, {
                key: "buildData",
                value: function buildData() {
                    var _this2 = this;
                    // Remove existing end track event and add one.
                    // This makes sure it's at the very end of the event list.
                    this.removeEventsByType('end-track').addEvent(new EndTrackEvent()); // Reset
                    this.data = [];
                    this.size = [];
                    this.tickPointer = 0;
                    var precisionLoss = 0;
                    this.events.forEach(function (event, eventIndex) {
                        // Build event & add to total tick duration
                        if (event instanceof NoteOnEvent || event instanceof NoteOffEvent) {
                            var built = event.buildData(_this2, precisionLoss);
                            precisionLoss = Utils.getPrecisionLoss(event.deltaWithPrecisionCorrection || 0);
                            _this2.data = _this2.data.concat(built.data);
                            _this2.tickPointer = Utils.getRoundedIfClose(event.tick);
                        }
                        else {
                            _this2.data = _this2.data.concat(event.data);
                        }
                    });
                    this.mergeExplicitTickEvents();
                    this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long
                    return this;
                }
            }, {
                key: "mergeExplicitTickEvents",
                value: function mergeExplicitTickEvents() {
                    var _this3 = this;
                    if (!this.explicitTickEvents.length)
                        return; // First sort asc list of events by startTick
                    this.explicitTickEvents.sort(function (a, b) {
                        return a.startTick - b.startTick;
                    }); // Now this.explicitTickEvents is in correct order, and so is this.events naturally.
                    // For each explicit tick event, splice it into the main list of events and
                    // adjust the delta on the following events so they still play normally.
                    this.explicitTickEvents.forEach(function (noteEvent) {
                        // Convert NoteEvent to it's respective NoteOn/NoteOff events
                        // Note that as we splice in events the delta for the NoteOff ones will
                        // Need to change based on what comes before them after the splice.
                        noteEvent.buildData().events.forEach(function (e) {
                            return e.buildData(_this3);
                        }); // Merge each event indivually into this track's event list.
                        noteEvent.events.forEach(function (event) {
                            return _this3.mergeSingleEvent(event);
                        });
                    }); // Hacky way to rebuild track with newly spliced events.  Need better solution.
                    this.explicitTickEvents = [];
                    this.buildData();
                }
                /**
                 * Merges another track's events with this track.
                 * @param {Track} track
                 * @return {Track}
                 */
            }, {
                key: "mergeTrack",
                value: function mergeTrack(track) {
                    var _this4 = this;
                    // First build this track to populate each event's tick property
                    this.buildData(); // Then build track to be merged so that tick property is populated on all events & merge each event.
                    track.buildData().events.forEach(function (event) {
                        return _this4.mergeSingleEvent(event);
                    });
                }
                /**
                 * Merges a single event into this track's list of events based on event.tick property.
                 * @param {NoteOnEvent|NoteOffEvent} - event
                 * @return {Track}
                 */
            }, {
                key: "mergeSingleEvent",
                value: function mergeSingleEvent(event) {
                    // Find index of existing event we need to follow with
                    var lastEventIndex = 0;
                    for (var i = 0; i < this.events.length; i++) {
                        if (this.events[i].tick > event.tick)
                            break;
                        lastEventIndex = i;
                    }
                    var splicedEventIndex = lastEventIndex + 1; // Need to adjust the delta of this event to ensure it falls on the correct tick.
                    event.delta = event.tick - this.events[lastEventIndex].tick; // Splice this event at lastEventIndex + 1
                    this.events.splice(splicedEventIndex, 0, event); // Now adjust delta of all following events
                    for (var i = splicedEventIndex + 1; i < this.events.length; i++) {
                        // Since each existing event should have a tick value at this point we just need to
                        // adjust delta to that the event still falls on the correct tick.
                        this.events[i].delta = this.events[i].tick - this.events[i - 1].tick;
                    }
                }
                /**
                 * Removes all events matching specified type.
                 * @param {string} eventType - Event type
                 * @return {Track}
                 */
            }, {
                key: "removeEventsByType",
                value: function removeEventsByType(eventType) {
                    var _this5 = this;
                    this.events.forEach(function (event, index) {
                        if (event.type === eventType) {
                            _this5.events.splice(index, 1);
                        }
                    });
                    return this;
                }
                /**
                 * Sets tempo of the MIDI file.
                 * @param {number} bpm - Tempo in beats per minute.
                 * @return {Track}
                 */
            }, {
                key: "setTempo",
                value: function setTempo(bpm) {
                    return this.addEvent(new TempoEvent(bpm));
                }
                /**
                 * Sets time signature.
                 * @param {number} numerator - Top number of the time signature.
                 * @param {number} denominator - Bottom number of the time signature.
                 * @param {number} midiclockspertick - Defaults to 24.
                 * @param {number} notespermidiclock - Defaults to 8.
                 * @return {Track}
                 */
            }, {
                key: "setTimeSignature",
                value: function setTimeSignature(numerator, denominator, midiclockspertick, notespermidiclock) {
                    return this.addEvent(new TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock));
                }
                /**
                 * Sets key signature.
                 * @param {*} sf -
                 * @param {*} mi -
                 * @return {Track}
                 */
            }, {
                key: "setKeySignature",
                value: function setKeySignature(sf, mi) {
                    return this.addEvent(new KeySignatureEvent(sf, mi));
                }
                /**
                 * Adds text to MIDI file.
                 * @param {string} text - Text to add.
                 * @return {Track}
                 */
            }, {
                key: "addText",
                value: function addText(text) {
                    return this.addEvent(new TextEvent(text));
                }
                /**
                 * Adds copyright to MIDI file.
                 * @param {string} text - Text of copyright line.
                 * @return {Track}
                 */
            }, {
                key: "addCopyright",
                value: function addCopyright(text) {
                    return this.addEvent(new CopyrightEvent(text));
                }
                /**
                 * Adds Sequence/Track Name.
                 * @param {string} text - Text of track name.
                 * @return {Track}
                 */
            }, {
                key: "addTrackName",
                value: function addTrackName(text) {
                    return this.addEvent(new TrackNameEvent(text));
                }
                /**
                 * Sets instrument name of track.
                 * @param {string} text - Name of instrument.
                 * @return {Track}
                 */
            }, {
                key: "addInstrumentName",
                value: function addInstrumentName(text) {
                    return this.addEvent(new InstrumentNameEvent(text));
                }
                /**
                 * Adds marker to MIDI file.
                 * @param {string} text - Marker text.
                 * @return {Track}
                 */
            }, {
                key: "addMarker",
                value: function addMarker(text) {
                    return this.addEvent(new MarkerEvent(text));
                }
                /**
                 * Adds cue point to MIDI file.
                 * @param {string} text - Text of cue point.
                 * @return {Track}
                 */
            }, {
                key: "addCuePoint",
                value: function addCuePoint(text) {
                    return this.addEvent(new CuePointEvent(text));
                }
                /**
                 * Adds lyric to MIDI file.
                 * @param {string} text - Lyric text to add.
                 * @return {Track}
                 */
            }, {
                key: "addLyric",
                value: function addLyric(text) {
                    return this.addEvent(new LyricEvent(text));
                }
                /**
                 * Channel mode messages
                 * @return {Track}
                 */
            }, {
                key: "polyModeOn",
                value: function polyModeOn() {
                    var event = new NoteOnEvent({
                        data: [0x00, 0xB0, 0x7E, 0x00]
                    });
                    return this.addEvent(event);
                }
                /**
                 * Sets a pitch bend.
                 * @param {float} bend - Bend value ranging [-1,1], zero meaning no bend.
                 * @return {Track}
                 */
            }, {
                key: "setPitchBend",
                value: function setPitchBend(bend) {
                    return this.addEvent(new PitchBendEvent({
                        bend: bend
                    }));
                }
                /**
                 * Adds a controller change event
                 * @param {number} number - Control number.
                 * @param {number} value - Control value.
                 * @return {Track}
                 */
            }, {
                key: "controllerChange",
                value: function controllerChange(number, value) {
                    return this.addEvent(new ControllerChangeEvent({
                        controllerNumber: number,
                        controllerValue: value
                    }));
                }
            }]);
        return Track;
    }();
    var VexFlow = /*#__PURE__*/ function () {
        function VexFlow() {
            _classCallCheck(this, VexFlow);
        }
        _createClass(VexFlow, [{
                key: "trackFromVoice",
                value: 
                /**
                 * Support for converting VexFlow voice into MidiWriterJS track
                 * @return MidiWriter.Track object
                 */
                function trackFromVoice(voice) {
                    var _this = this;
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                        addRenderedAccidentals: false
                    };
                    var track = new Track();
                    var wait = [];
                    voice.tickables.forEach(function (tickable) {
                        if (tickable.noteType === 'n') {
                            track.addEvent(new NoteEvent({
                                pitch: tickable.keys.map(function (pitch, index) {
                                    return _this.convertPitch(pitch, index, tickable, options.addRenderedAccidentals);
                                }),
                                duration: _this.convertDuration(tickable),
                                wait: wait
                            })); // reset wait
                            wait = [];
                        }
                        else if (tickable.noteType === 'r') {
                            // move on to the next tickable and add this to the stack
                            // of the `wait` property for the next note event
                            wait.push(_this.convertDuration(tickable));
                            return;
                        }
                    }); // There may be outstanding rests at the end of the track,
                    // pad with a ghost note (zero duration and velocity), just to capture the wait.
                    if (wait.length > 0) {
                        track.addEvent(new NoteEvent({
                            pitch: '[c4]',
                            duration: '0',
                            wait: wait,
                            velocity: '0'
                        }));
                    }
                    return track;
                }
                /**
                 * Converts VexFlow pitch syntax to MidiWriterJS syntax
                 * @param pitch string
                 * @param index pitch index
                 * @param note struct from Vexflow
                 * @param addRenderedAccidentals adds Vexflow rendered accidentals
                 */
            }, {
                key: "convertPitch",
                value: function convertPitch(pitch, index, note) {
                    var addRenderedAccidentals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                    // Splits note name from octave
                    var pitchParts = pitch.split('/'); // Retrieves accidentals from pitch
                    // Removes natural accidentals since they are not accepted in Tonal Midi
                    var accidentals = pitchParts[0].substring(1).replace('n', '');
                    if (addRenderedAccidentals) {
                        var _note$getAccidentals;
                        (_note$getAccidentals = note.getAccidentals()) === null || _note$getAccidentals === void 0 ? void 0 : _note$getAccidentals.forEach(function (accidental) {
                            if (accidental.index === index) {
                                if (accidental.type === 'n') {
                                    accidentals = '';
                                }
                                else {
                                    accidentals += accidental.type;
                                }
                            }
                        });
                    }
                    return pitchParts[0][0] + accidentals + pitchParts[1];
                }
                /**
                 * Converts VexFlow duration syntax to MidiWriterJS syntax
                 * @param note struct from VexFlow
                 */
            }, {
                key: "convertDuration",
                value: function convertDuration(note) {
                    return 'd'.repeat(note.dots) + this.convertBaseDuration(note.duration) + (note.tuplet ? 't' + note.tuplet.num_notes : '');
                }
                /**
                 * Converts VexFlow base duration syntax to MidiWriterJS syntax
                 * @param duration Vexflow duration
                 * @returns MidiWriterJS duration
                 */
            }, {
                key: "convertBaseDuration",
                value: function convertBaseDuration(duration) {
                    switch (duration) {
                        case 'w':
                            return '1';
                        case 'h':
                            return '2';
                        case 'q':
                            return '4';
                        default:
                            return duration;
                    }
                }
            }]);
        return VexFlow;
    }();
    /**
     * Object representation of a header chunk section of a MIDI file.
     * @param {number} numberOfTracks - Number of tracks
     * @return {HeaderChunk}
     */
    var HeaderChunk = function HeaderChunk(numberOfTracks) {
        _classCallCheck(this, HeaderChunk);
        this.type = Constants.HEADER_CHUNK_TYPE;
        var trackType = numberOfTracks > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;
        this.data = trackType.concat(Utils.numberToBytes(numberOfTracks, 2), // two bytes long,
        Constants.HEADER_CHUNK_DIVISION);
        this.size = [0, 0, 0, this.data.length];
    };
    /**
     * Object that puts together tracks and provides methods for file output.
     * @param {array|Track} tracks - A single {Track} object or an array of {Track} objects.
     * @return {Writer}
     */
    var Writer = /*#__PURE__*/ function () {
        function Writer(tracks) {
            var _this = this;
            _classCallCheck(this, Writer);
            // Ensure track is an array
            tracks = Utils.toArray(tracks);
            this.data = [];
            this.data.push(new HeaderChunk(tracks.length)); // For each track add final end of track event and build data
            tracks.forEach(function (track, i) {
                _this.data.push(track.buildData());
            });
        }
        /**
         * Builds the file into a Uint8Array
         * @return {Uint8Array}
         */
        _createClass(Writer, [{
                key: "buildFile",
                value: function buildFile() {
                    var build = []; // Data consists of chunks which consists of data
                    this.data.forEach(function (d) {
                        return build = build.concat(d.type, d.size, d.data);
                    });
                    return new Uint8Array(build);
                }
                /**
                 * Convert file buffer to a base64 string.  Different methods depending on if browser or node.
                 * @return {string}
                 */
            }, {
                key: "base64",
                value: function base64() {
                    if (typeof btoa === 'function')
                        return btoa(String.fromCharCode.apply(null, this.buildFile()));
                    return Buffer.from(this.buildFile()).toString('base64');
                }
                /**
                 * Get the data URI.
                 * @return {string}
                 */
            }, {
                key: "dataUri",
                value: function dataUri() {
                    return 'data:audio/midi;base64,' + this.base64();
                }
                /**
                 * Output to stdout
                 * @return {string}
                 */
            }, {
                key: "stdout",
                value: function stdout() {
                    return process.stdout.write(new Buffer(this.buildFile()));
                }
                /**
                 * Save to MIDI file
                 * @param {string} filename
                 */
            }, /* {
              key: "saveMIDI",
              value: function saveMIDI(filename) {
                var fs = require('fs');
          
                var buffer = new Buffer.from(this.buildFile());
                fs.writeFile(filename + '.mid', buffer, function (err) {
                  if (err) throw err;
                });
              }
            }  */
        ]);
        return Writer;
    }();
    var main = {
        Constants: Constants,
        NoteOnEvent: NoteOnEvent,
        NoteOffEvent: NoteOffEvent,
        NoteEvent: NoteEvent,
        PitchBendEvent: PitchBendEvent,
        ProgramChangeEvent: ProgramChangeEvent,
        Track: Track,
        Utils: Utils,
        VexFlow: VexFlow,
        Writer: Writer
    };
    window.MidiWriter = main;
};


/***/ }),

/***/ "./src/common/promiseHelpers.ts":
/*!**************************************!*\
  !*** ./src/common/promiseHelpers.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PromiseHelpers: () => (/* binding */ PromiseHelpers),
/* harmony export */   TEmptyPromise: () => (/* binding */ TEmptyPromise)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function TEmptyPromise(obj) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(obj);
        }, 1);
    });
}
class PromiseHelpers {
    // ### makePromise
    // poll on endCondition at a rate of pollTime.  Resolve the promise
    // when endCondition is met, calling preResolveMethod first.   On
    // polls where the end condition is not met, call pollMethod
    // Resolve method and pollMethod are optional
    static makePromise(endCondition, preResolveMethod, pollMethod, pollTime) {
        return new Promise((resolve) => {
            const checkit = () => {
                setTimeout(() => {
                    if (endCondition()) {
                        if (preResolveMethod) {
                            preResolveMethod();
                        }
                        resolve();
                    }
                    else {
                        if (pollMethod) {
                            pollMethod();
                        }
                        checkit();
                    }
                }, pollTime);
            };
            checkit();
        });
    }
    static makePromiseObj(endCondition, preResolveMethod, pollMethod, pollTime) {
        return {
            endCondition,
            preResolveMethod,
            pollMethod,
            pollTime
        };
    }
    // ### promiseChainThen
    // Call a chain of promises in array order, with parameters of makePromise
    static promiseChainThen(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const promiseArray = [];
            params.forEach((param) => {
                promiseArray.push(() => __awaiter(this, void 0, void 0, function* () {
                    return PromiseHelpers.makePromise(param.endCondition, param.preResolveMethod, param.pollMethod, param.pollTime);
                }));
            });
            let result;
            for (const f of promiseArray) {
                result = yield f();
            }
            return result;
        });
    }
    static emptyPromise() {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 1);
        });
    }
}


/***/ }),

/***/ "./src/common/serializationHelpers.js":
/*!********************************************!*\
  !*** ./src/common/serializationHelpers.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   smoSerialize: () => (/* binding */ smoSerialize)
/* harmony export */ });
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
// ## smoSerialize
// Helper functions that perform serialized merges, general JSON
// types of routines.
// ---
class smoSerialize {
    static vexMerge(dest, src) {
        if (typeof (src) === 'undefined') {
            return;
        }
        const keys = Object.keys(src);
        keys.forEach((key) => {
            dest[key] = src[key];
        });
    }
    static tryParseUnicode(text) {
        let rv = text;
        try {
            eval('rv="' + text + '"');
        }
        catch (ex) {
            console.log('bad unicode');
        }
        return rv;
    }
    // ### filteredMerge
    // Like vexMerge, but only for specific attributes.
    static filteredMerge(attrs, src, dest) {
        attrs.forEach(function (attr) {
            if (typeof (src[attr]) != 'undefined') {
                dest[attr] = src[attr];
            }
        });
    }
    static get localScore() {
        return '_smoosicScore';
    }
    static loadRemoteFile(path) {
        const req = new XMLHttpRequest();
        req.addEventListener('load', () => {
            callback(req.responseText);
        });
        req.open('GET', path);
        req.send();
    }
    // This is the token map we use to reduce the size of
    // serialized data.
    static get tokenMap() {
        var _tm = `{
      "a": "score",
      "b": "layout",
      "c": "leftMargin",
      "d": "rightMargin",
      "e": "topMargin",
      "f": "bottomMargin",
      "g": "pageWidth",
      "h": "pageHeight",
      "i": "orientation",
      "j": "interGap",
      "k": "intraGap",
      "l": "svgScale",
      "m": "zoomScale",
      "n": "zoomMode",
      "o": "pages",
      "p": "pageSize",
      "q": "startIndex",
      "r": "renumberingMap",
      "s": "staves",
      "t": "staffId",
      "u": "staffX",
      "v": "staffY",
      "w": "adjY",
      "x": "staffWidth",
      "y": "staffHeight",
      "z": "keySignatureMap",
      "aa": "instrumentInfo",
      "ba": "instrumentName",
      "ca": "keyOffset",
      "da": "clef",
      "ea": "modifiers",
      "fa": "startSelector",
      "ga": "staff",
      "ha": "measure",
      "ia": "voice",
      "ja": "tick",
      "ka": "pitches",
      "la": "endSelector",
      "ma": "xOffset",
      "na": "cp1y",
      "oa": "cp2y",
      "pa": "attrs",
      "qa": "id",
      "ra": "type",
      "sa": "ctor",
      "ta": "yOffset",
      "ua": "position",
      "va": "measures",
      "wa": "timeSignature",
      "xa": "keySignature",
      "ya": "measureNumber",
      "za": "measureIndex",
      "ab": "systemIndex",
      "bb": "adjX",
      "cb": "tuplets",
      "db": "voices",
      "eb": "notes",
      "fb": "ticks",
      "gb": "numerator",
      "hb": "denominator",
      "ib": "remainder",
      "jb": "letter",
      "kb": "octave",
      "lb": "accidental",
      "mb": "symbol",
      "nb": "bpm",
      "ob": "display",
      "pb": "beatDuration",
      "qb": "beamBeats",
      "rb": "endBeam",
      "sb": "textModifiers",
      "tb": "text",
      "ub": "endChar",
      "vb": "fontInfo",
      "wb": "size",
      "xb": "family",
      "yb": "style",
      "zb": "weight",
      "ac": "classes",
      "bc": "verse",
      "cc": "fill",
      "dc": "scaleX",
      "ec": "scaleY",
      "fc": "translateX",
      "gc": "translateY",
      "hc": "selector",
      "ic": "renderedBox",
      "jc": "x",
      "kc": "y",
      "lc": "width",
      "mc": "height",
      "nc": "logicalBox",
      "oc": "noteType",
      "pc": "cautionary",
      "qc": "articulations",
      "rc": "articulation",
      "sc": "activeVoice",
      "tc": "flagState",
      "uc": "invert",
      "vc": "fontSize",
      "wc": "yOffsetLine",
      "xc": "yOffsetPixels",
      "yc": "scoreText",
      "zc": "backup",
      "ad": "edited",
      "bd": "pagination",
      "cd": "boxModel",
      "dd": "justification",
      "ed": "autoLayout",
      "fd": "ornaments",
      "gd": "offset",
      "hd": "ornament",
      "id": "tempoMode",
      "jd": "tempoText",
      "kd": "barline",
      "ld": "systemBreak",
      "md": "graceNotes",
      "nd": "tones",
      "od": "tuplet",
      "pd": "beam_group",
      "qd": "renderId",
      "rd": "numNotes",
      "sd": "totalTicks",
      "td": "stemTicks",
      "ud": "durationMap",
      "vd": "bracketed",
      "wd": "ratioed",
      "xd": "location",
      "yd": "systemGroups",
      "zd": "leftConnector",
      "ae": "padLeft",
      "be": "customStretch",
      "ce": "engravingFont",
      "de": "customProportion",
      "ee": "columnAttributeMap",
      "fe": "tempo",
      "ge": "textGroups",
      "he": "textBlocks",
      "ie": "backupBlocks",
      "je": "blocks",
      "ke": "_text",
      "le": "parser",
      "me": "fonts",
      "ne": "name",
      "oe": "purpose",
      "pe": "custom",
      "qe": "transposeIndex",
      "re": "noteHead",
      "se": "slash",
      "te": "pointSize",
      "ue": "spacing",
      "ve": "relativePosition",
      "we": "activeText",
      "xe": "attachToSelector",
      "ye": "musicXOffset",
      "ze": "musicYOffset",
      "af": "formattingIterations",
      "bf": "startBar",
      "cf": "endBar",
      "df": "endingId",
      "ef": "autoJustify",
      "ff": "thickness",
      "gf": "number",
      "hf": "preferences",
      "if": "autoPlay",
      "jf": "autoAdvance",
      "kf": "defaultDupleDuration",
      "lf": "defaultTripleDuration",
      "mf": "scoreInfo",
      "nf": "version",
      "of": "title",
      "pf": "subTitle",
      "qf": "composer",
      "rf": "copyright",
      "sf": "localIndex",
      "tf": "hairpinType",
      "uf": "customText",
      "vf": "noteSpacing",
      "wf": "lines",
      "xf": "from",
      "yf": "layoutManager",
      "zf": "pageLayouts",
      "ag": "fillStyle",
      "bg": "hidden",
      "cg": "adjustNoteWidthLyric",
      "dg": "xOffsetStart",
      "eg": "xOffsetEnd",
      "fg": "measureFormats",
      "gg": "format",
      "hg": "pageBreak",
      "ig": "xOffsetLeft",
      "jg": "xOffsetRight",
      "kg": "padAllInSystem",
      "lg": "rotate",
      "mg": "actualBeats",
      "ng": "useSymbol",
      "og": "showPiano",
      "pg": "globalLayout",
      "qg": "measureInstrumentMap",
      "rg": "partInfo",
      "sg": "partName",
      "tg": "partAbbreviation",
      "ug": "stavesAfter",
      "vg": "stavesBefore",
      "wg": "measureFormatting",
      "xg": "preserveTextGroups",
      "yg": "cueInScore",
      "zg": "tie_spacing",
      "ah": "position_end",
      "bh": "transposingScore",
      "ch": "proportionality",
      "dh": "maxMeasureSystem",
      "eh": "cp2x",
      "fh": "restBreak",
      "gh": "expandMultimeasureRests",
      "hh": "midiInstrument",
      "ih": "channel",
      "jh": "program",
      "kh": "volume",
      "lh": "pan",
      "mh": "midiDevice"
      }`;
        return JSON.parse(_tm);
    }
    static get valueTokens() {
        var vm = `{"@sn","SmoNote"}`;
        return JSON.parse(vm);
    }
    static reverseMap(map) {
        const rv = {};
        const keys = Object.keys(map);
        keys.forEach((key) => {
            rv[map[key]] = key;
        });
        return rv;
    }
    static get tokenValues() {
        return smoSerialize.reverseMap(smoSerialize.tokenMap);
    }
    // ## detokenize
    // If we are saving, replace token values with keys, since the keys are smaller.
    // if we are loading, replace the token keys with values so the score can
    // deserialize it
    static detokenize(json, dictionary) {
        const rv = {};
        const smoKey = (key) => {
            return typeof (dictionary[key]) !== 'undefined' ? dictionary[key] : key;
        };
        const _tokenRecurse = (input, output) => {
            if (input === null) {
                return;
            }
            const keys = Object.keys(input);
            keys.forEach((key) => {
                const val = input[key];
                const dkey = smoKey(key);
                if (typeof (val) == 'string' || typeof (val) == 'number' || typeof (val) == 'boolean') {
                    output[dkey] = val;
                    // console.log('240: output[' + dkey + '] = ' + val);
                }
                if (typeof (val) == 'object' && key != 'dictionary') {
                    if (Array.isArray(val)) {
                        output[dkey] = [];
                        // console.log('245: processing array ' + dkey);
                        val.forEach((arobj) => {
                            if (typeof (arobj) === 'string' || typeof (arobj) === 'number' || typeof (arobj) === 'boolean') {
                                output[dkey].push(arobj);
                                // console.log('249: ar element ' + arobj);
                            }
                            else if (arobj && typeof (arobj) === 'object') {
                                const nobj = {};
                                _tokenRecurse(arobj, nobj);
                                output[dkey].push(nobj);
                            }
                        });
                    }
                    else {
                        const nobj = {};
                        // console.log('259: processing child object of ' + dkey);
                        _tokenRecurse(val, nobj);
                        output[dkey] = nobj;
                    }
                }
            });
        };
        _tokenRecurse(json, rv);
        // console.log(JSON.stringify(rv,null,' '));
        return rv;
    }
    static incrementIdentifier(label) {
        const increcurse = (ar, ix) => {
            const n1 = (ar[ix].charCodeAt(0) - 97) + 1;
            if (n1 > 25) {
                ar[ix] = 'a';
                if (ar.length <= ix + 1) {
                    ar.push('a');
                }
                else {
                    increcurse(ar, ix + 1);
                }
            }
            else {
                ar[ix] = String.fromCharCode(97 + n1);
            }
        };
        if (!label) {
            label = 'a';
        }
        const ar = label.split('');
        increcurse(ar, 0);
        label = ar.join('');
        return label;
    }
    // used to generate a tokenization scheme that I will use to make
    // saved files smaller
    static jsonTokens(json) {
        const map = {};
        const valmap = {};
        const startKeys = Object.keys(smoSerialize.tokenMap);
        let keyLabel = startKeys[startKeys.length - 1];
        keyLabel = smoSerialize.incrementIdentifier(keyLabel);
        const exist = smoSerialize.tokenValues;
        const addMap = (key) => {
            if (!exist[key] && !map[key] && key.length > keyLabel.length) {
                map[key] = keyLabel;
                keyLabel = smoSerialize.incrementIdentifier(keyLabel);
            }
        };
        const _tokenRecurse = (obj) => {
            if (!obj) {
                console.warn('failure to parse');
                return;
            }
            const keys = Object.keys(obj);
            keys.forEach((key) => {
                const val = obj[key];
                if (val !== null) {
                    if (typeof (val) === 'string' || typeof (val) === 'number'
                        || typeof (val) === 'boolean') {
                        addMap(key);
                    }
                    if (typeof (val) == 'object') {
                        if (Array.isArray(val)) {
                            addMap(key);
                            val.forEach((arobj) => {
                                if (arobj && typeof (arobj) === 'object') {
                                    _tokenRecurse(arobj);
                                }
                            });
                        }
                        else {
                            addMap(key);
                            _tokenRecurse(val);
                        }
                    }
                }
            });
        };
        _tokenRecurse(json);
        const mkar = Object.keys(map);
        const m2 = {};
        mkar.forEach((mk) => {
            m2[map[mk]] = mk;
        });
        console.log(JSON.stringify(m2, null, ' '));
    }
    // ### serializedMerge
    // serialization-friendly, so merged, copied objects are deep-copied
    static serializedMerge(attrs, src, dest) {
        attrs.forEach(function (attr) {
            if (typeof (src[attr]) !== 'undefined') {
                // copy the number 0
                if (typeof (src[attr]) === 'number' ||
                    typeof (src[attr]) === 'boolean' ||
                    typeof (src[attr]) === 'string') {
                    dest[attr] = src[attr];
                    // copy the empty array
                }
                else if (Array.isArray(src[attr])) {
                    dest[attr] = JSON.parse(JSON.stringify(src[attr]));
                }
                else {
                    // but don't copy empty/null objects
                    if (src[attr]) {
                        if (typeof (src[attr]) == 'object') {
                            dest[attr] = JSON.parse(JSON.stringify(src[attr]));
                        }
                        else {
                            dest[attr] = src[attr];
                        }
                    }
                }
            }
        });
    }
    /**
     * Only serialize non-default values.
     * @param {*} defaults - the class-defined defaults
     * @param {*} attrs - the list of attributes (untyped)
     * @param {*} src - the object we're serializing
     * @param {*} dest - the output json
     */
    static serializedMergeNonDefault(defaults, attrs, src, dest) {
        attrs.forEach(function (attr) {
            if (typeof (src[attr]) != 'undefined') {
                // copy the number 0
                if (typeof (src[attr]) === 'number' ||
                    typeof (src[attr]) === 'boolean' ||
                    typeof (src[attr]) === 'string') {
                    // always persist object type so it can be deserialized
                    if (src[attr] !== defaults[attr] || attr === 'ctor') {
                        dest[attr] = src[attr];
                    }
                    // copy the empty array
                }
                else if (Array.isArray(src[attr])) {
                    const defval = JSON.stringify(defaults[attr]);
                    const srcval = JSON.stringify(src[attr]);
                    if (defval != srcval) {
                        dest[attr] = JSON.parse(srcval);
                    }
                }
                else {
                    // but don't copy empty/null objects
                    if (src[attr]) {
                        if (typeof (src[attr]) == 'object') {
                            const defval = JSON.stringify(defaults[attr]);
                            const srcval = JSON.stringify(src[attr]);
                            if (defval != srcval) {
                                dest[attr] = JSON.parse(srcval);
                            }
                        }
                        else {
                            if (src[attr] != defaults[attr]) {
                                dest[attr] = src[attr];
                            }
                        }
                    }
                }
            }
        });
    }
    static stringifyAttrs(attrs, obj) {
        let rv = '';
        attrs.forEach((attr) => {
            if (obj[attr]) {
                rv += attr + ':' + obj[attr] + ', ';
            }
            else {
                rv += attr + ': null,';
            }
        });
        return rv;
    }
    // ### printXlate
    // print json with string labels to use as a translation file seed.
    static printTranslate(_class) {
        const xxx = Smo.getClass(_class + '.printTranslate');
        if (typeof (xxx) === 'function') {
            xxx();
        }
    }
}


/***/ }),

/***/ "./src/common/textformatter.ts":
/*!*************************************!*\
  !*** ./src/common/textformatter.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextFormatter: () => (/* binding */ TextFormatter)
/* harmony export */ });
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/vex */ "./src/common/vex.ts");
// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// MIT License

const VF = _common_vex__WEBPACK_IMPORTED_MODULE_0__.VexFlow;
/**
 * Text widths are stored in a cache, so we don't have to recompute widths
 * for the same font + string combination.
 *
 * The cache is first keyed by the font information. The key is of the form:
 *   `${family}-${size}-${weight}-${style}`
 * The second level key is the specific text to be measured.
 *
 * The stored value is the measured width in `em` units.
 *   textWidth == textWidthCache[cacheKey][textToMeasure]
 */
const textWidthCache = {};
const textHeightCache = {};
/**
 * Applications may register additional fonts via `TextFormatter.registerInfo(info)`.
 * The metrics for those fonts will be made available to the application.
 */
const registry = {};
class TextFormatter {
    /**
     * Return all registered font families.
     */
    static getFontFamilies() {
        const registeredFonts = [];
        for (const fontFamily in registry) {
            const formatterInfo = registry[fontFamily];
            registeredFonts.push(Object.assign({}, formatterInfo));
        }
        return registeredFonts;
    }
    /**
     * Call `TextFormatter.registerInfo(info)` to register font information before using this method.
     *
     * This method creates a formatter for the font that most closely matches the requested font.
     * We compare font family, bold, and italic attributes.
     * This method will return a fallback formatter if there are no matches.
     */
    static create(requestedFont = {}) {
        if (!requestedFont.family) {
            requestedFont.family = 'Sans Serif';
        }
        // TODO: One potential (small) optimization is to cache the TextFormatter object
        // returned for each font info. We would probably want to clear the cache if
        // the registry is ever updated.
        const candidates = [];
        // The incoming font family is a string of comma-separated font family names.
        // (e.g., `PetalumaScript, Arial, sans-serif`).
        const requestedFamilies = requestedFont.family.split(/\s*,\s*/);
        for (const requestedFamily of requestedFamilies) {
            for (const fontFamily in registry) {
                // Support cases where the registry contains 'Roboto Slab Medium',
                // but the requestedFont.family is 'Roboto Slab'.
                if (fontFamily.startsWith(requestedFamily)) {
                    candidates.push(registry[fontFamily]);
                }
            }
            if (candidates.length > 0) {
                break;
            }
        }
        let formatter;
        if (candidates.length === 0) {
            // No match, so return a fallback text formatter.
            formatter = new TextFormatter(Object.values(registry)[0]);
        }
        else if (candidates.length === 1) {
            formatter = new TextFormatter(candidates[0]);
        }
        else {
            const bold = VF.Font.isBold(requestedFont.weight);
            const italic = VF.Font.isItalic(requestedFont.style);
            const perfectMatch = candidates.find((f) => f.bold === bold && f.italic === italic);
            if (perfectMatch) {
                formatter = new TextFormatter(perfectMatch);
            }
            else {
                const partialMatch = candidates.find((f) => f.italic === italic || f.bold === bold);
                if (partialMatch) {
                    formatter = new TextFormatter(partialMatch);
                }
                else {
                    formatter = new TextFormatter(candidates[0]);
                }
            }
        }
        const fontSize = requestedFont.size;
        if (typeof fontSize !== 'undefined') {
            const fontSizeInPt = VF.Font.convertSizeToPointValue(fontSize);
            formatter.setFontSize(fontSizeInPt);
        }
        return formatter;
    }
    /**
     * @param fontFamily used as a key to the font registry.
     * @returns the same info object that was passed in via `TextFormatter.registerInfo(info)`
     */
    static getInfo(fontFamily) {
        return registry[fontFamily];
    }
    /**
     * Apps may register their own fonts and metrics, and those metrics
     * will be available to the app for formatting.
     *
     * Metrics can be generated from a font file using fontgen_text.js in the tools/fonts directory.
     * @param info
     * @param overwrite
     */
    static registerInfo(info, overwrite = false) {
        const fontFamily = info.family;
        const currFontInfo = registry[fontFamily];
        if (currFontInfo === undefined || overwrite) {
            registry[fontFamily] = info;
        }
    }
    /**
     * Use `TextFormatter.create(...)` to build an instance from information previously
     * registered via `TextFormatter.registerInfo(info)`.
     */
    constructor(formatterInfo) {
        /** Font family. */
        this.family = '';
        /** Specified in `pt` units. */
        this.size = 14;
        /** Font metrics are extracted at 1000 upem (units per em). */
        this.resolution = 1000;
        /**
         * For text formatting, we do not require glyph outlines, but instead rely on glyph
         * bounding box metrics such as:
         * ```
         * {
         *    x_min: 48,
         *    x_max: 235,
         *    y_min: -17,
         *    y_max: 734,
         *    ha: 751,
         *    leftSideBearing: 48,
         *    advanceWidth: 286,
         *  }
         * ```
         */
        this.glyphs = {};
        this.serifs = false;
        this.monospaced = false;
        this.italic = false;
        this.bold = false;
        this.superscriptOffset = 0;
        this.subscriptOffset = 0;
        this.maxSizeGlyph = '@';
        // This is an internal key used to index the `textWidthCache`.
        this.cacheKey = '';
        this.updateParams(formatterInfo);
    }
    get localHeightCache() {
        var _a;
        if (textHeightCache[this.cacheKey] === undefined) {
            textHeightCache[this.cacheKey] = {};
        }
        return (_a = textHeightCache[this.cacheKey]) !== null && _a !== void 0 ? _a : {};
    }
    updateParams(params) {
        if (params.family)
            this.family = params.family;
        if (params.resolution)
            this.resolution = params.resolution;
        if (params.glyphs)
            this.glyphs = params.glyphs;
        if (params.serifs)
            this.serifs = params.serifs;
        if (params.monospaced)
            this.monospaced = params.monospaced;
        if (params.italic)
            this.italic = params.italic;
        if (params.bold)
            this.bold = params.bold;
        if (params.maxSizeGlyph)
            this.maxSizeGlyph = params.maxSizeGlyph;
        if (params.superscriptOffset)
            this.superscriptOffset = params.superscriptOffset;
        if (params.subscriptOffset)
            this.subscriptOffset = params.subscriptOffset;
        this.updateCacheKey();
    }
    /** Create a hash with the current font data, so we can cache computed widths. */
    updateCacheKey() {
        const family = this.family.replace(/\s+/g, '_');
        const size = this.size;
        const weight = this.bold ? VF.FontWeight.BOLD : VF.FontWeight.NORMAL;
        const style = this.italic ? VF.FontStyle.ITALIC : VF.FontStyle.NORMAL;
        // Use the same key format as SVGContext.
        this.cacheKey = `${family}%${size}%${weight}%${style}`;
    }
    /**
     * The glyphs table is indexed by the character (e.g., 'C', '@').
     * See: robotoslab_glyphs.ts & petalumascript_glyphs.ts.
     */
    getGlyphMetrics(character) {
        if (this.glyphs[character]) {
            return this.glyphs[character];
        }
        else {
            return this.glyphs[this.maxSizeGlyph];
        }
    }
    get maxHeight() {
        const metrics = this.getGlyphMetrics(this.maxSizeGlyph);
        return (metrics.ha / this.resolution) * this.fontSizeInPixels;
    }
    /**
     * Retrieve the character's advanceWidth as a fraction of an `em` unit.
     * For the space character ' ' as defined in the:
     *   petalumascript_glyphs.ts: 250 advanceWidth in the 1000 unitsPerEm font returns 0.25.
     *   robotoslab_glyphs.ts:     509 advanceWidth in the 2048 unitsPerEm font returns 0.2485.
     */
    getWidthForCharacterInEm(c) {
        var _a;
        const metrics = this.getGlyphMetrics(c);
        if (!metrics) {
            // An arbitrary number, close to the `em` width of the '#' and '5' characters in PetalumaScript.
            return 0.65;
        }
        else {
            const advanceWidth = (_a = metrics.advanceWidth) !== null && _a !== void 0 ? _a : 0;
            return advanceWidth / this.resolution;
        }
    }
    /**
     * Retrieve the character's y bounds (ymin, ymax) and height.
     */
    getYForCharacterInPx(c) {
        const metrics = this.getGlyphMetrics(c);
        const rv = { yMin: 0, yMax: this.maxHeight, height: this.maxHeight };
        if (!metrics) {
            return rv;
        }
        else {
            if (typeof metrics.yMin === 'number') {
                rv.yMin = (metrics.yMin / this.resolution) * this.fontSizeInPixels;
            }
            if (typeof metrics.yMax === 'number') {
                rv.yMax = (metrics.yMax / this.resolution) * this.fontSizeInPixels;
            }
            rv.height = rv.yMax - rv.yMin;
            return rv;
        }
    }
    getYForStringInPx(str) {
        const entry = this.localHeightCache;
        const extent = { yMin: 0, yMax: this.maxHeight, height: this.maxHeight };
        const cache = entry[str];
        if (cache !== undefined) {
            return cache;
        }
        for (let i = 0; i < str.length; ++i) {
            const curY = this.getYForCharacterInPx(str[i]);
            extent.yMin = Math.min(extent.yMin, curY.yMin);
            extent.yMax = Math.max(extent.yMax, curY.yMax);
            extent.height = extent.yMax - extent.yMin;
        }
        entry[str] = extent;
        return extent;
    }
    /**
     * Retrieve the total width of `text` in `em` units.
     */
    getWidthForTextInEm(text) {
        const key = this.cacheKey;
        // Get the cache for this specific font family, size, weight, style combination.
        // The cache contains previously computed widths for different `text` strings.
        let cachedWidths = textWidthCache[key];
        if (cachedWidths === undefined) {
            cachedWidths = {};
            textWidthCache[key] = cachedWidths;
        }
        let width = cachedWidths[text];
        if (width === undefined) {
            width = 0;
            for (let i = 0; i < text.length; ++i) {
                width += this.getWidthForCharacterInEm(text[i]);
            }
            cachedWidths[text] = width;
        }
        return width;
    }
    /** The width of the text (in `em`) is scaled by the font size (in `px`). */
    getWidthForTextInPx(text) {
        return this.getWidthForTextInEm(text) * this.fontSizeInPixels;
    }
    /**
     * @param size in pt.
     */
    setFontSize(size) {
        this.size = size;
        // The width cache key depends on the current font size.
        this.updateCacheKey();
        return this;
    }
    /** `this.size` is specified in points. Convert to pixels. */
    get fontSizeInPixels() {
        return this.size * VF.Font.scaleToPxFrom.pt;
    }
    getResolution() {
        return this.resolution;
    }
}


/***/ }),

/***/ "./src/common/vex.ts":
/*!***************************!*\
  !*** ./src/common/vex.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChordSymbolGlyphs: () => (/* binding */ ChordSymbolGlyphs),
/* harmony export */   VexFlow: () => (/* binding */ VexFlow),
/* harmony export */   addChordGlyph: () => (/* binding */ addChordGlyph),
/* harmony export */   applyStemDirection: () => (/* binding */ applyStemDirection),
/* harmony export */   chordSubscriptOffset: () => (/* binding */ chordSubscriptOffset),
/* harmony export */   chordSuperscriptOffset: () => (/* binding */ chordSuperscriptOffset),
/* harmony export */   createHairpin: () => (/* binding */ createHairpin),
/* harmony export */   createSlur: () => (/* binding */ createSlur),
/* harmony export */   createStave: () => (/* binding */ createStave),
/* harmony export */   createStaveText: () => (/* binding */ createStaveText),
/* harmony export */   createTie: () => (/* binding */ createTie),
/* harmony export */   createVoice: () => (/* binding */ createVoice),
/* harmony export */   defaultCueScale: () => (/* binding */ defaultCueScale),
/* harmony export */   defaultMeasurePadding: () => (/* binding */ defaultMeasurePadding),
/* harmony export */   defaultNoteScale: () => (/* binding */ defaultNoteScale),
/* harmony export */   getChordSymbolGlyphFromCode: () => (/* binding */ getChordSymbolGlyphFromCode),
/* harmony export */   getGlyphWidth: () => (/* binding */ getGlyphWidth),
/* harmony export */   getMultimeasureRest: () => (/* binding */ getMultimeasureRest),
/* harmony export */   getOrnamentGlyph: () => (/* binding */ getOrnamentGlyph),
/* harmony export */   getRepeatBar: () => (/* binding */ getRepeatBar),
/* harmony export */   getSlashGlyph: () => (/* binding */ getSlashGlyph),
/* harmony export */   getVexNoteParameters: () => (/* binding */ getVexNoteParameters),
/* harmony export */   getVexTuplets: () => (/* binding */ getVexTuplets),
/* harmony export */   glyphPixels: () => (/* binding */ glyphPixels),
/* harmony export */   pitchToLedgerLine: () => (/* binding */ pitchToLedgerLine),
/* harmony export */   renderDynamics: () => (/* binding */ renderDynamics),
/* harmony export */   setFontStack: () => (/* binding */ setFontStack),
/* harmony export */   vexCanonicalNotes: () => (/* binding */ vexCanonicalNotes),
/* harmony export */   vexOrnaments: () => (/* binding */ vexOrnaments)
/* harmony export */ });
/* harmony import */ var vexflow_smoosic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vexflow_smoosic */ "./node_modules/vexflow_smoosic/build/esm/entry/vexflow.js");
/* harmony import */ var _serializationHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializationHelpers */ "./src/common/serializationHelpers.js");

/**
 * Module vex.ts.  This handles vexflow calls and structures that have changed
 * between v4 and v5.  There will be a custom version of this file for each.
 * Most of the differences are trivial - e.g. different naming conventions for variables.
 */

// export type Vex = SmoVex;
const VexFlow = vexflow_smoosic__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow;
const VF = VexFlow;
;
;
function chordSubscriptOffset() {
    return VF.ChordSymbol.subscriptOffset;
}
function chordSuperscriptOffset() {
    return VF.ChordSymbol.superscriptOffset;
}
function createVoice(params) {
    const voice = new VF.Voice({
        num_beats: params.actualBeats,
        beat_value: params.beatDuration
    }).setMode(VF.Voice.Mode.SOFT);
    voice.addTickables(params.notes);
    return voice;
}
/**
 * Vex4 and Vex5 handle width differently.  Vex5, width comes directly from the
 * font glyph, vex4 the glyph is a path so it comes from the stored information about
 * the path.
 *
 * @param smoGlyph
 * @returns
 */
function getGlyphWidth(smoGlyph) {
    if (smoGlyph.vexGlyph) {
        /* const vexGlyph = (VF.Glyphs as Record<string, string>)[smoGlyph.vexGlyph];
        if (vexGlyph) {
          return VF.Element.measureWidth(vexGlyph);
        }
        return VF.Element.measureWidth(smoGlyph.vexGlyph);  */
        const vf = VF.Glyph.MUSIC_FONT_STACK[0].getGlyphs()[smoGlyph.vexGlyph];
        return (vf.x_max - vf.x_min) * glyphPixels();
    }
    return smoGlyph.width;
}
/**
 * V4 uses the glyph name, V5 uses the unicode value
 * @returns
 */
function getSlashGlyph() {
    // vexNote = new VF.GlyphNote('\uE504', { duration });
    return new VF.GlyphNote(new VF.Glyph('repeat1Bar', 38), { duration: 'w' }, { line: 2 });
}
function getRepeatBar() {
    return new VF.GlyphNote(new VF.Glyph('repeat1Bar', 38), { duration: 'w' }, { line: 2 });
}
function getMultimeasureRest(multimeasureLength) {
    return new VF.MultiMeasureRest(multimeasureLength, 
    // { numberOfMeasures: this.smoMeasure.svg.multimeasureLength });
    { number_of_measures: multimeasureLength });
}
function pitchToLedgerLine(vexPitch, clef) {
    return -1.0 * (VF.keyProperties(vexPitch).line - 4.5)
        - VF.clefProperties(clef).line_shift;
}
function vexCanonicalNotes() {
    // return VF.Music.canonicalNotes[SmoMusic.noteValues[vexKey].int_val];
    return VF.Music.canonical_notes;
}
function createStave(params) {
    const stave = new VF.Stave(params.x, params.y, params.staffWidth - params.padLeft);
    stave.setAttribute('id', params.id);
    // If there is padLeft, draw an invisible box so the padding is included in the measure box
    if (params.padLeft) {
        params.context.rect(params.staffX, params.y, params.padLeft, 50, {
            fill: 'none', 'stroke-width': 1, stroke: 'white'
        });
    }
    // stave.options.spaceAboveStaffLn = 0; // don't let vex place the staff, we want to.
    stave.options.space_above_staff_ln = 0; // don't let vex place the staff, we want to.
    // Add a clef and time signature.
    if (params.forceClef) {
        stave.addClef(params.clef);
    }
    if (params.forceKey) {
        const sig = new VF.KeySignature(params.key);
        if (params.canceledKey) {
            sig.cancelKey(params.canceledKey);
        }
        sig.addToStave(stave);
    }
    const curX = stave.getNoteStartX();
    stave.setNoteStartX(curX + (params.startX - params.adjX));
    return stave;
}
function getVexTuplets(params) {
    const vexTuplet = new VF.Tuplet(params.vexNotes, {
        num_notes: params.numNotes,
        notes_occupied: params.notesOccupied,
        ratioed: false,
        bracketed: true,
        location: params.location
    });
    return vexTuplet;
}
function getVexNoteParameters(params) {
    // If this is a tuplet, we only get the duration so the appropriate stem
    // can be rendered.  Vex calculates the actual ticks later when the tuplet is made
    var duration = params.isTuplet ?
        params.closestTicks :
        params.exactTicks;
    if (typeof (duration) === 'undefined') {
        console.warn('bad duration in measure ' + params.measureIndex);
        duration = '8';
    }
    // transpose for instrument-specific keys
    const noteParams = {
        clef: params.clef,
        keys: params.keys,
        duration: duration + params.noteType
    };
    return { noteParams, duration };
}
function applyStemDirection(params, vxParams) {
    if (params.voiceCount === 1 && params.isAuto) {
        vxParams.auto_stem = true;
    }
    else if (!params.isAuto) {
        vxParams.stem_direction = params.isUp ? 1 : -1;
    }
    else if (params.voiceIx % 2) {
        vxParams.stem_direction = -1;
    }
    else {
        vxParams.stem_direction = 1;
    }
}
const setSameIfNull = (a, b) => {
    if (typeof (a) === 'undefined' || a === null) {
        return b;
    }
    return a;
};
function createStaveText(text, position, options) {
    return new vexflow_smoosic__WEBPACK_IMPORTED_MODULE_0__.StaveText(text, position, options);
}
function createHairpin(params) {
    const vexParams = {};
    if (params.vxStart) {
        vexParams.first_note = params.vxStart;
    }
    if (params.vxEnd) {
        vexParams.last_note = params.vxEnd;
    }
    const hairpin = new VF.StaveHairpin(vexParams, params.hairpinType);
    hairpin.setRenderOptions({
        height: params.height,
        y_shift: params.yOffset,
        left_shift_px: params.leftShiftPx,
        right_shift_px: params.rightShiftPx
    });
    return hairpin;
}
const defaultMeasurePadding = VF.Stave.defaultPadding;
function createSlur(params) {
    if (params.vxStart === null && params.vxEnd === null) {
        throw (' slur with no points');
    }
    const vxStart = setSameIfNull(params.vxStart, params.vxEnd);
    const vxEnd = setSameIfNull(params.vxEnd, params.vxStart);
    const curve = new VF.Curve(vxStart, vxEnd, {
        thickness: params.thickness,
        x_shift: params.xShift,
        y_shift: params.yShift,
        cps: params.cps,
        invert: params.invert,
        position: params.position,
        position_end: params.positionEnd
    });
    return curve;
}
function createTie(params) {
    const fromLines = params.fromLines;
    const toLines = params.toLines;
    const tie = new VF.StaveTie({
        first_note: params.firstNote,
        last_note: params.lastNote,
        first_indices: fromLines,
        last_indices: toLines
    });
    _serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.vexMerge(tie.render_options, params.vexOptions);
    return tie;
}
const defaultNoteScale = 30;
const defaultCueScale = 19.8;
function glyphPixels() {
    return 96 * (defaultNoteScale / (VF.Glyph.MUSIC_FONT_STACK[0].getResolution() * 72));
    // return defaultNoteScale;
}
function setFontStack(font) {
    const fs = {
        /* Bravura: () => { VexFlow.setFonts('Bravura', 'Gonville', 'Custom'); },
        Gonville: () => { VexFlow.setFonts('Gonville', 'Bravura', 'Custom'); },
        Petaluma: () => { VexFlow.setFonts('Petaluma', 'Bravura', 'Gonville', 'Custom'); },
        Leland: () => { VexFlow.setFonts('Leland', 'Bravura', 'Gonville', 'Custom'); } */
        Bravura: () => { VexFlow.setMusicFont('Bravura', 'Gonville', 'Custom'); },
        Gonville: () => { VexFlow.setMusicFont('Gonville', 'Bravura', 'Custom'); },
        Petaluma: () => { VexFlow.setMusicFont('Petaluma', 'Bravura', 'Gonville', 'Custom'); },
        Leland: () => { VexFlow.setMusicFont('Leland', 'Bravura', 'Gonville', 'Custom'); }
    };
    fs[font]();
}
/**
 * Render a dynamics glyph.  Return the height of width/height of the glyph
 * @param context
 * @param text
 * @param fontSize
 * @param x
 * @param y
 * @returns
 */
function renderDynamics(context, text, fontSize, x, y) {
    /* const glyph = new VF.Element();
    glyph.setText(text);
    glyph.setFontSize(fontSize);
    glyph.renderText(context, x, y);
    return { width: glyph.getWidth(), height: glyph.getHeight() };*/
    const glyph = new VF.Glyph(text, fontSize);
    glyph.render(context, x, y);
    // vex 5 incompatibility.
    // x += VF.TextDynamics.GLYPHS[text].width;
    const metrics = glyph.getMetrics();
    return { width: metrics.width, height: metrics.height };
}
function getOrnamentGlyph(glyph) {
    return glyph;
    // return vexOrnaments[glyph];
}
function addChordGlyph(cs, symbol) {
    cs.addGlyph(symbol);
}
/**
 *
 * @export
 * @param {string} code
 * @return {*}
 */
function getChordSymbolGlyphFromCode(code) {
    const keys = Object.keys(ChordSymbolGlyphs);
    const rv = keys.find((key) => ChordSymbolGlyphs[key].code === code);
    if (typeof (rv) === 'string') {
        return rv;
    }
    return code;
}
// Glyph data.  Note Vex4 and Vex5 have different requirements.  Vex5 expects the unicode identifier (16-bit number)
// where vex4 expects a string glyph
const ChordSymbolGlyphs = {
    diminished: {
        code: 'csymDiminished',
    },
    dim: {
        code: 'csymDiminished',
    },
    csymDiminished: {
        code: 'csymDiminished'
    },
    halfDiminished: {
        code: 'csymHalfDiminished',
    },
    csymHalfDiminished: {
        code: 'csymHalfDiminished'
    },
    '+': {
        code: 'csymAugmented',
    },
    augmented: {
        code: 'csymAugmented',
    },
    csymAugmented: {
        code: 'csymAugmented',
    },
    majorSeventh: {
        code: 'csymMajorSeventh',
    },
    csymMajorSeventh: {
        code: 'csymMajorSeventh',
    },
    csymMinor: {
        code: 'csymMinor',
    },
    minor: {
        code: 'csymMinor',
    },
    '-': {
        code: 'csymMinor',
    },
    '(': {
        code: 'csymParensLeftTall',
    },
    leftParen: {
        code: 'csymParensLeftTall',
    },
    ')': {
        code: 'csymParensRightTall',
    },
    rightParen: {
        code: 'csymParensRightTall',
    },
    leftBracket: {
        code: 'csymBracketLeftTall',
    },
    rightBracket: {
        code: 'csymBracketRightTall',
    },
    leftParenTall: {
        code: 'csymParensLeftVeryTall',
    }, rightParenTall: {
        code: 'csymParensRightVeryTall',
    },
    '/': {
        code: 'csymDiagonalArrangementSlash',
    },
    over: {
        code: 'csymDiagonalArrangementSlash',
    },
    '#': {
        code: 'accidentalSharp',
    },
    b: {
        code: 'accidentalFlat',
    },
};
const vexOrnaments = {
    mordent: '\ue56c' /*ornamentShortTrill*/,
    mordent_inverted: '\ue56d' /*ornamentMordent*/,
    turn: '\ue567' /*ornamentTurn*/,
    turn_inverted: '\ue569' /*ornamentTurnSlash*/,
    tr: '\ue566' /*ornamentTrill*/,
    upprall: '\ue5b5' /*ornamentPrecompSlideTrillDAnglebert*/,
    downprall: '\ue5c3' /*ornamentPrecompDoubleCadenceUpperPrefix*/,
    prallup: '\ue5bb' /*ornamentPrecompTrillSuffixDandrieu*/,
    pralldown: '\ue5c8' /*ornamentPrecompTrillLowerSuffix*/,
    upmordent: '\ue5b8' /*ornamentPrecompSlideTrillBach*/,
    downmordent: '\ue5c4' /*ornamentPrecompDoubleCadenceUpperPrefixTurn*/,
    lineprall: '\ue5b2' /*ornamentPrecompAppoggTrill*/,
    prallprall: '\ue56e' /*ornamentTremblement*/,
    scoop: '\ue5d0' /*brassScoop*/,
    doit: '\ue5d5' /*brassDoitMedium*/,
    fall: '\ue5d7' /*brassFallLipShort*/,
    doitLong: '\ue5d2' /*brassLiftMedium*/,
    fallLong: '\ue5de' /*brassFallRoughMedium*/,
    bend: '\ue5e3' /*brassBend*/,
    plungerClosed: '\ue5e5' /*brassMuteClosed*/,
    plungerOpen: '\ue5e7' /*brassMuteOpen*/,
    flip: '\ue5e1' /*brassFlip*/,
    jazzTurn: '\ue5e4' /*brassJazzTurn*/,
    smear: '\ue5e2' /*brassSmear*/,
};


/***/ }),

/***/ "./src/render/audio/musicCursor.ts":
/*!*****************************************!*\
  !*** ./src/render/audio/musicCursor.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultAudioAnimationHandler: () => (/* binding */ defaultAudioAnimationHandler),
/* harmony export */   defaultClearAudioAnimationHandler: () => (/* binding */ defaultClearAudioAnimationHandler)
/* harmony export */ });
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sui/layoutDebug */ "./src/render/sui/layoutDebug.ts");



const defaultClearAudioAnimationHandler = (delay) => {
    if (delay < 1) {
        const ell = document.getElementById('vf-music-cursor');
        if (ell) {
            ell.remove();
        }
    }
    else {
        setTimeout(() => {
            defaultClearAudioAnimationHandler(0);
        }, delay);
    }
};
/**
  * default implementation of playback animation.
  * @param selector
  * @returns
  */
const defaultAudioAnimationHandler = (view, selector, offsetPct, durationPct) => {
    var _a, _b;
    const score = view.renderer.score;
    if (!score) {
        return;
    }
    const scroller = view.scroller;
    const renderer = view.renderer;
    // Get note from 0th staff if we can
    const measureSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.measureSelection(score, score.staves.length - 1, selector.measure);
    const zmeasureSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.measureSelection(score, 0, selector.measure);
    const measure = measureSel === null || measureSel === void 0 ? void 0 : measureSel.measure;
    if (measure.svg.logicalBox && ((_b = (_a = zmeasureSel === null || zmeasureSel === void 0 ? void 0 : zmeasureSel.measure) === null || _a === void 0 ? void 0 : _a.svg) === null || _b === void 0 ? void 0 : _b.logicalBox)) {
        const context = renderer.pageMap.getRenderer(measure.svg.logicalBox);
        const topBox = _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(zmeasureSel.measure.svg.logicalBox);
        topBox.y -= context.box.y;
        const botBox = _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(measure.svg.logicalBox);
        botBox.y -= context.box.y;
        const height = (botBox.y + botBox.height) - topBox.y;
        const measureWidth = botBox.width - measure.svg.adjX;
        const nhWidth = 10 / score.layoutManager.getGlobalLayout().svgScale;
        let width = measureWidth * durationPct - 10 / score.layoutManager.getGlobalLayout().svgScale;
        width = Math.max(nhWidth, width);
        const y = topBox.y;
        let x = topBox.x + measure.svg.adjX + offsetPct * measureWidth;
        const noteBox = score.staves[selector.staff].measures[selector.measure].voices[selector.voice].notes[selector.tick];
        if (noteBox && noteBox.logicalBox) {
            x = noteBox.logicalBox.x;
        }
        const screenBox = _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.boxPoints(x, y, width, height);
        const fillParams = {};
        fillParams['fill-opacity'] = '0.5';
        fillParams['fill'] = '#4444ff';
        const ctx = context.getContext();
        defaultClearAudioAnimationHandler(0);
        ctx.save();
        ctx.openGroup('music-cursor', 'music-cursor');
        ctx.rect(x, screenBox.y, width, screenBox.height, fillParams);
        ctx.closeGroup();
        ctx.restore();
        _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.updatePlayDebug(selector, measure.svg.logicalBox);
        scroller.scrollVisibleBox(zmeasureSel.measure.svg.logicalBox);
    }
};


/***/ }),

/***/ "./src/render/audio/oscillator.ts":
/*!****************************************!*\
  !*** ./src/render/audio/oscillator.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiOscillator: () => (/* binding */ SuiOscillator),
/* harmony export */   SuiReverb: () => (/* binding */ SuiReverb),
/* harmony export */   SuiSampler: () => (/* binding */ SuiSampler),
/* harmony export */   SuiWavetable: () => (/* binding */ SuiWavetable),
/* harmony export */   SynthWavetable: () => (/* binding */ SynthWavetable)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _samples__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./samples */ "./src/render/audio/samples.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



/**
 * Create audio reverb node.
 * @category SuiAudio
 */
class SuiReverb {
    static get defaults() {
        return { length: 0.2, decay: 2 };
    }
    connect(destination) {
        this.output.connect(destination);
    }
    disconnect() {
        this.output.disconnect();
        this.input.disconnect();
    }
    // credit: https://github.com/nick-thompson
    _buildImpulse() {
        let n = 0;
        let i = 0;
        if (SuiReverb.impulse) {
            this.input.buffer = SuiReverb.impulse;
            return;
        }
        const rate = this._context.sampleRate;
        const length = rate * this.length;
        const decay = this.decay;
        const impulse = this._context.createBuffer(2, length, rate);
        const impulseL = impulse.getChannelData(0);
        const impulseR = impulse.getChannelData(1);
        for (i = 0; i < length; i++) {
            n = this.reverse ? length - i : i;
            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay) * this.damp;
            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay) * this.damp;
        }
        SuiReverb.impulse = impulse;
        this.input.buffer = impulse;
    }
    constructor(context) {
        this.damp = 1.0;
        this.reverse = false;
        this.input = this.output = context.createConvolver();
        this.length = SuiReverb.defaults.length;
        this.decay = SuiReverb.defaults.decay;
        this._context = context;
        this._buildImpulse();
    }
}
const SynthWavetable = {
    real: [0,
        0.3, 0.3, 0, 0, 0,
        0.1, 0, 0, 0, 0,
        0.05, 0, 0, 0, 0,
        0.01, 0, 0, 0, 0,
        0.01, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0],
    imaginary: [0,
        0, 0.05, 0, 0, 0,
        0, 0.01, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0]
};
/**
 * Simple waveform synthesizer thing that plays notes.  Oscillator works in either
 * analog synthisizer or sampler mode.
 * @category SuiAudio
 */
class SuiOscillator {
    static get defaults() {
        const wavetable = {
            real: [], imaginary: []
        };
        const obj = {
            duration: 1000,
            frequency: 440,
            attackEnv: 0.05,
            decayEnv: 0.4,
            sustainEnv: 0.8,
            releaseEnv: 0.25,
            sustainLevel: 0.5,
            releaseLevel: 0.1,
            waveform: 'custom',
            gain: 0.2,
            wavetable,
            useReverb: false,
            instrument: 'piano'
        };
        return JSON.parse(JSON.stringify(obj));
    }
    static playSelectionNow(selection, score, gain) {
        // In the midst of re-rendering...
        if (!selection.note) {
            return;
        }
        if (selection.note.isRest() || selection.note.isSlash() || selection.note.isHidden()) {
            return;
        }
        const soundInfo = selection.staff.getStaffInstrument(selection.selector.measure);
        const oscInfo = _samples__WEBPACK_IMPORTED_MODULE_2__.SuiSampleMedia.getSmoOscillatorInfo(soundInfo.instrument);
        setTimeout(() => {
            const ar = SuiOscillator.fromNote(selection.measure, selection.note, score, oscInfo[0], gain);
            ar.forEach((osc) => {
                osc.play();
            });
        }, 1);
    }
    static get attackTime() {
        return 25;
    }
    static get decayTime() {
        return 15;
    }
    // ### fromNote
    // Create an areray of oscillators for each pitch in a note
    static fromNote(measure, note, score, soundInfo, gain) {
        let frequency = 0;
        let duration = 0;
        const tempo = measure.getTempo();
        const bpm = tempo.bpm;
        const beats = note.tickCount / 4096;
        duration = (beats / bpm) * 60000;
        // adjust if bpm is over something other than 1/4 note
        duration = duration * (4096 / tempo.beatDuration);
        if (soundInfo.waveform === 'sample') {
            duration = 250;
        }
        const ar = [];
        gain = isNaN(gain) ? 0.2 : gain;
        gain = gain / note.pitches.length;
        if (note.noteType === 'r') {
            gain = 0.001;
        }
        note.pitches.forEach((pitch, pitchIx) => {
            var _a;
            const mtone = (_a = note.getMicrotone(pitchIx)) !== null && _a !== void 0 ? _a : null;
            frequency = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoAudioPitch.smoPitchToFrequency(pitch, -1 * measure.transposeIndex, mtone);
            const def = SuiOscillator.defaults;
            def.instrument = soundInfo.instrument;
            def.frequency = frequency;
            def.duration = duration;
            def.gain = gain;
            if (soundInfo.waveform !== 'sample') {
                def.waveform = soundInfo.waveform;
                if (def.waveform === 'custom') {
                    def.wavetable = SynthWavetable;
                }
                const osc = new SuiWavetable(def);
                ar.push(osc);
            }
            else {
                const osc = new SuiSampler(def);
                ar.push(osc);
            }
        });
        return ar;
    }
    static get attributes() {
        return ['duration', 'frequency', 'pitch', 'attackEnv', 'sustainEnv', 'decayEnv',
            'releaseEnv', 'sustainLevel', 'releaseLevel', 'waveform', 'wavetable', 'gain'];
    }
    static resolveAfter(time) {
        return new Promise((resolve) => {
            const timerFunc = () => {
                resolve();
            };
            setTimeout(() => {
                timerFunc();
            }, time);
        });
    }
    _playPromise(duration, gain) {
        const audio = SuiOscillator.audio;
        const promise = new Promise((resolve) => {
            if (this.osc) {
                this.osc.start(0);
            }
            setTimeout(() => {
                resolve();
            }, duration);
            setTimeout(() => {
                if (this.osc) {
                    this.osc.stop(0);
                }
                this.disconnect();
            }, duration + 500);
        });
        return promise;
    }
    static toFloatArray(ar) {
        const rv = new Float32Array(ar.length);
        let i = 0;
        for (i = 0; i < ar.length; ++i) {
            rv[i] = ar[i];
        }
        return rv;
    }
    constructor(parameters) {
        this.attackEnv = -1;
        this.duration = -1;
        this.decayEnv = -1;
        this.sustainEnv = -1;
        this.releaseEnv = -1;
        this.gain = 1.0;
        this.sustainLevel = 0;
        this.releaseLevel = 0;
        this.frequency = -1;
        this.wavetable = null;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SuiOscillator.attributes, parameters, this);
        this.reverb = null;
        // this.reverb = null;
        this.attack = this.attackEnv * SuiOscillator.attackTime;
        this.decay = this.decayEnv * SuiOscillator.decayTime;
        this.sustain = this.sustainEnv * this.duration;
        this.release = this.releaseEnv * this.duration;
        this.instrument = parameters.instrument;
        if (parameters.wavetable) {
            this.wavetable = parameters.wavetable;
        }
        this.useReverb = parameters.useReverb;
        // this.frequency = this.frequency / 2;  // Overtones below partial
        this.waveform = parameters.waveform;
        if (!parameters.wavetable && this.waveform === 'custom') {
            this.waveform = 'sine';
        }
    }
    disconnect() {
        if (this.osc) {
            this.osc.disconnect();
        }
        if (this.gainNode) {
            this.gainNode.disconnect();
        }
        if (this.delayNode) {
            this.delayNode.disconnect();
        }
        if (this.reverb) {
            this.reverb.disconnect();
        }
        SuiOscillator.created -= 1;
    }
    /**
     * Connect the audio sound source to the output, combining other
     * nodes in the mix such as convolver (reverb), delay, and gain.
     * Also set up the envelope
     * @returns - a promise that tis resolved when `duration` time has expired
     */
    createAudioGraph() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.frequency === 0) {
                return SuiSampler.resolveAfter(this.duration);
            }
            const audio = SuiOscillator.audio;
            const attack = this.attack / 1000;
            const decay = this.decay / 1000;
            const sustain = this.sustain / 1000;
            const release = this.release / 1000;
            this.gainNode = audio.createGain();
            const gp1 = this.gain;
            if (this.useReverb) {
                this.reverb = new SuiReverb(SuiOscillator.audio);
            }
            if (this.useReverb && this.reverb) {
                this.delayNode = audio.createDelay(this.reverb.length);
            }
            this.gainNode.gain.exponentialRampToValueAtTime(gp1, audio.currentTime + attack);
            this.gainNode.gain.exponentialRampToValueAtTime(this.sustainLevel * gp1, audio.currentTime + attack + decay);
            this.gainNode.gain.exponentialRampToValueAtTime(this.releaseLevel * gp1, audio.currentTime + attack + decay + sustain);
            this.gainNode.gain.exponentialRampToValueAtTime(0.001, audio.currentTime + attack + decay + sustain + release);
            this.osc = this.createAudioNode();
            // osc.connect(gain1);
            if (this.useReverb && this.reverb && this.osc) {
                this.osc.connect(this.reverb.input);
            }
            this.osc.connect(this.gainNode);
            if (this.delayNode && this.reverb) {
                this.reverb.connect(this.delayNode);
                this.delayNode.connect(audio.destination);
            }
            this.gainNode.connect(audio.destination);
            SuiOscillator.created += 1;
            return this.playPromise(this.duration);
        });
    }
    playPromise(duration) {
        const promise = new Promise((resolve) => {
            if (this.osc) {
                this.osc.start(0);
            }
            setTimeout(() => {
                resolve();
            }, duration);
            setTimeout(() => {
                if (this.osc) {
                    this.osc.stop(0);
                }
                this.disconnect();
            }, Math.round(duration * 1.05));
        });
        return promise;
    }
}
SuiOscillator.audio = new AudioContext();
SuiOscillator.created = 0;
SuiOscillator.sampleFiles = ['bb4', 'cn4'];
SuiOscillator.samples = [];
/**
 * An audio output that uses browser audio api OscillatorNode as a sound source
 * @category SuiAudio
 */
class SuiWavetable extends SuiOscillator {
    createAudioNode() {
        const node = SuiOscillator.audio.createOscillator();
        if (this.wavetable && this.wavetable.imaginary.length > 0 && this.wavetable.real.length > 0 && this.waveform === 'custom') {
            const wave = SuiOscillator.audio.createPeriodicWave(SuiOscillator.toFloatArray(this.wavetable.real), SuiOscillator.toFloatArray(this.wavetable.imaginary), { disableNormalization: false });
            node.setPeriodicWave(wave);
        }
        else {
            node.type = this.waveform;
        }
        node.frequency.value = this.frequency;
        return node;
    }
    // play the audio oscillator for the specified duration.  Return a promise that
    // resolves after the duration.  Also dispose of the audio resources after the play is complete.
    play() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.createAudioGraph();
        });
    }
}
/**
 * An audio output primitive that uses frequency-adjusted sampled sounds
 */
class SuiSampler extends SuiOscillator {
    constructor(params) {
        super(params);
        if (_samples__WEBPACK_IMPORTED_MODULE_2__.SuiSampleMedia.sampleOscMap[this.instrument]) {
            const sampleInfo = _samples__WEBPACK_IMPORTED_MODULE_2__.SuiSampleMedia.sampleOscMap[this.instrument];
            if (sampleInfo.length) {
                if (sampleInfo[0].sustain === 'sustained') {
                    this.attack = 0.1 * this.duration;
                }
            }
        }
    }
    // Note: samplePromise must be complete before you call this  
    createAudioNode() {
        const node = SuiOscillator.audio.createBufferSource();
        const chooserParams = {
            instrument: this.instrument,
            frequency: this.frequency,
            duration: this.duration,
            gain: this.gain
        };
        const sample = _samples__WEBPACK_IMPORTED_MODULE_2__.SuiSampleMedia.matchedSample(chooserParams);
        if (!sample) {
            return node;
        }
        const cents = 1200 * (Math.log(this.frequency / sample.frequency))
            / Math.log(2);
        node.buffer = sample.sample;
        node.detune.value = cents;
        return node;
    }
    play() {
        return __awaiter(this, void 0, void 0, function* () {
            const self = this;
            return _samples__WEBPACK_IMPORTED_MODULE_2__.SuiSampleMedia.samplePromise(SuiOscillator.audio).then(() => {
                self.createAudioGraph();
            });
        });
    }
}


/***/ }),

/***/ "./src/render/audio/player.ts":
/*!************************************!*\
  !*** ./src/render/audio/player.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CuedAudioContexts: () => (/* binding */ CuedAudioContexts),
/* harmony export */   SuiAudioPlayer: () => (/* binding */ SuiAudioPlayer)
/* harmony export */ });
/* harmony import */ var _oscillator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./oscillator */ "./src/render/audio/oscillator.ts");
/* harmony import */ var _smo_xform_audioTrack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/xform/audioTrack */ "./src/smo/xform/audioTrack.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




/**
 * Maintain a list of buffers ready to play, since this is a
 * system resource.
 * @category SuiAudio
 */
class CuedAudioContexts {
    constructor() {
        this.soundHead = null;
        this.soundTail = null;
        this.paramLinkHead = null;
        this.paramLinkTail = null;
        this.soundListLength = 0;
        this.playWaitTimer = 0;
        this.playMeasureIndex = 0; // index of the measure we are playing
        this.cueMeasureIndex = 0; // measure index we are populating
        this.complete = false;
    }
    addToTail(cuedSound) {
        const tail = { sound: cuedSound, next: null };
        if (this.soundTail === null) {
            this.soundTail = tail;
            this.soundHead = tail;
        }
        else {
            this.soundTail.next = { sound: cuedSound, next: null };
            this.soundTail = this.soundTail.next;
        }
        this.soundListLength += cuedSound.oscs.length;
    }
    advanceHead() {
        if (this.soundHead === null) {
            return null;
        }
        const cuedSound = this.soundHead.sound;
        this.soundHead = this.soundHead.next;
        this.soundListLength -= cuedSound.oscs.length;
        return cuedSound;
    }
    get soundCount() {
        return this.soundListLength;
    }
    reset() {
        this.soundHead = null;
        this.soundTail = null;
        this.paramLinkHead = null;
        this.paramLinkTail = null;
        this.soundListLength = 0;
        this.playWaitTimer = 0;
        this.playMeasureIndex = 0;
        this.cueMeasureIndex = 0;
        this.complete = false;
    }
}
/**
 * Play the music, ja!
 * @category SuiAudio
 */
class SuiAudioPlayer {
    static set playing(val) {
        SuiAudioPlayer._playing = val;
    }
    static get audioBufferSize() {
        return 512;
    }
    static incrementInstanceId() {
        const id = SuiAudioPlayer.instanceId + 1;
        SuiAudioPlayer.instanceId = id;
        return id;
    }
    static get playing() {
        if (typeof (SuiAudioPlayer._playing) === 'undefined') {
            SuiAudioPlayer._playing = false;
        }
        return SuiAudioPlayer._playing;
    }
    static pausePlayer() {
        if (SuiAudioPlayer._playingInstance) {
            const a = SuiAudioPlayer._playingInstance;
            a.paused = true;
            a.audioAnimation.clearAudioAnimationHandler(0);
        }
        SuiAudioPlayer.playing = false;
    }
    constructor(parameters) {
        this.audioDefaults = _oscillator__WEBPACK_IMPORTED_MODULE_0__.SuiOscillator.defaults;
        this.openTies = {};
        this.instanceId = SuiAudioPlayer.incrementInstanceId();
        this.paused = false;
        this.view = parameters.view;
        this.score = parameters.score;
        // Assume tempo is same for all measures
        this.cuedSounds = new CuedAudioContexts();
        this.audioAnimation = parameters.audioAnimation;
    }
    getNoteSoundData(measureIndex) {
        const measureNotes = {};
        let measureTicks = this.score.staves[0].measures[measureIndex].getMaxTicksVoice();
        const freqDuplicates = {};
        const voiceCount = {};
        this.score.staves.forEach((staff, staffIx) => {
            const measure = staff.measures[measureIndex];
            measure.voices.forEach((voice, voiceIx) => {
                let curTick = 0;
                const instrument = staff.getStaffInstrument(measure.measureNumber.measureIndex);
                voice.notes.forEach((smoNote, tickIx) => {
                    const frequencies = [];
                    const xpose = -1 * measure.transposeIndex;
                    const selector = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.default;
                    selector.measure = measureIndex;
                    selector.staff = staffIx;
                    selector.voice = voiceIx;
                    selector.tick = tickIx;
                    let ties = [];
                    const tieIx = '' + staffIx + '-' + measureIndex + '-' + voiceIx;
                    let tiedNote = false;
                    if (smoNote.noteType === 'n' && !smoNote.isHidden()) {
                        ties = staff.getTiesStartingAt(selector);
                        smoNote.pitches.forEach((pitch, pitchIx) => {
                            var _a;
                            const freq = _smo_data_music__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPitch.smoPitchToFrequency(pitch, xpose, (_a = smoNote.getMicrotone(pitchIx)) !== null && _a !== void 0 ? _a : null);
                            const freqRound = Math.round(freq);
                            if (!freqDuplicates[curTick]) {
                                freqDuplicates[curTick] = {};
                                voiceCount[curTick] = 0;
                            }
                            const freqBeat = freqDuplicates[curTick];
                            if (!freqBeat[freqRound]) {
                                freqBeat[freqRound] = 0;
                            }
                            if (freqBeat[freqRound] < SuiAudioPlayer.duplicatePitchThresh && voiceCount[curTick] < SuiAudioPlayer.voiceThresh) {
                                frequencies.push(freq);
                                freqBeat[freqRound] += 1;
                                voiceCount[curTick] += 1;
                            }
                        });
                        const duration = smoNote.tickCount;
                        const volume = _smo_xform_audioTrack__WEBPACK_IMPORTED_MODULE_1__.SmoAudioScore.volumeFromNote(smoNote, _smo_xform_audioTrack__WEBPACK_IMPORTED_MODULE_1__.SmoAudioScore.dynamicVolumeMap.mf);
                        const soundData = {
                            frequencies,
                            volume,
                            offsetPct: curTick / measureTicks,
                            durationPct: duration / measureTicks,
                            noteType: smoNote.noteType,
                            duration,
                            instrument: instrument.instrument,
                            selector
                        };
                        const pushTickArray = (curTick, soundData) => {
                            if (typeof (measureNotes[curTick]) === 'undefined') {
                                measureNotes[curTick] = [];
                            }
                            measureNotes[curTick].push(soundData);
                        };
                        // If this is continuation of tied note, just change duration
                        if (this.openTies[tieIx]) {
                            this.openTies[tieIx].duration += duration;
                            if (ties.length === 0) {
                                this.openTies[tieIx] = null;
                            }
                        }
                        else if (ties.length) {
                            // If start of tied note, record the tie note, the next note in this voice
                            // will adjust duration
                            this.openTies[tieIx] = soundData;
                            pushTickArray(curTick, soundData);
                        }
                        else {
                            pushTickArray(curTick, soundData);
                        }
                    }
                    curTick += Math.round(smoNote.tickCount);
                });
            });
        });
        const keys = Object.keys(measureNotes).map((x) => parseInt(x, 10));
        if (keys.length) {
            measureTicks -= keys.reduce((a, b) => a > b ? a : b);
        }
        return { endTicks: measureTicks, measureNotes };
    }
    createCuedSound(measureIndex) {
        let i = 0;
        let j = 0;
        let measureBeat = 0;
        if (!SuiAudioPlayer.playing || this.cuedSounds.paramLinkHead === null) {
            return;
        }
        // TODO base on the selection start.
        const { endTicks, measureNotes } = { endTicks: this.cuedSounds.paramLinkHead.endTicks, measureNotes: this.cuedSounds.paramLinkHead.soundParams };
        this.cuedSounds.paramLinkHead = this.cuedSounds.paramLinkHead.next;
        const maxMeasures = this.score.staves[0].measures.length;
        const smoTemp = this.score.staves[0].measures[measureIndex].getTempo();
        const tempo = smoTemp.bpm * (smoTemp.beatDuration / 4096);
        const keys = [];
        Object.keys(measureNotes).forEach((key) => {
            keys.push(parseInt(key, 10));
        });
        // There is a key for each note in the measure.  The value is the number of ticks before that note is played
        for (j = 0; j < keys.length; ++j) {
            const beatTime = keys[j];
            const soundData = measureNotes[beatTime];
            let durationPct = 0;
            let offsetPct = 0;
            if (soundData.length === 0) {
                console.log('empty sound measure');
                continue;
            }
            soundData.forEach((ss) => {
                if (durationPct === 0) {
                    durationPct = ss.durationPct;
                    offsetPct = ss.offsetPct;
                }
                durationPct = Math.min(durationPct, ss.durationPct);
                offsetPct = Math.min(offsetPct, ss.offsetPct);
            });
            const cuedSound = { oscs: [], waitTime: 0, playMeasureIndex: measureIndex, playTickIndex: j,
                offsetPct, durationPct, selector: soundData[0].selector };
            const timeRatio = 60000 / (tempo * 4096);
            // If there is complete silence here, put a silent beat
            if (beatTime > measureBeat) {
                const params = this.audioDefaults;
                params.frequency = 0;
                params.duration = (beatTime - measureBeat) * timeRatio;
                params.gain = 0;
                params.useReverb = false;
                const silence = { oscs: [], waitTime: params.duration, playMeasureIndex: measureIndex, playTickIndex: j,
                    offsetPct, durationPct, selector: soundData[0].selector };
                silence.oscs.push(new _oscillator__WEBPACK_IMPORTED_MODULE_0__.SuiSampler(params));
                this.cuedSounds.addToTail(silence);
                measureBeat = beatTime;
            }
            this.cuedSounds.addToTail(cuedSound);
            soundData.forEach((sound) => {
                const adjDuration = Math.round(sound.duration * timeRatio) + 150;
                for (i = 0; i < sound.frequencies.length && sound.noteType === 'n'; ++i) {
                    const freq = sound.frequencies[i];
                    const params = this.audioDefaults;
                    params.frequency = freq;
                    params.duration = adjDuration;
                    params.gain = sound.volume;
                    params.instrument = sound.instrument;
                    params.useReverb = this.score.audioSettings.reverbEnable;
                    if (this.score.audioSettings.playerType === 'synthesizer') {
                        params.wavetable = _oscillator__WEBPACK_IMPORTED_MODULE_0__.SynthWavetable;
                        params.waveform = this.score.audioSettings.waveform;
                        cuedSound.oscs.push(new _oscillator__WEBPACK_IMPORTED_MODULE_0__.SuiWavetable(params));
                    }
                    else {
                        cuedSound.oscs.push(new _oscillator__WEBPACK_IMPORTED_MODULE_0__.SuiSampler(params));
                    }
                }
            });
            if (j + 1 < keys.length) {
                const diff = (keys[j + 1] - keys[j]);
                cuedSound.waitTime = diff * timeRatio;
                measureBeat += diff;
            }
            else if (measureIndex + 1 < maxMeasures) {
                // If the next measure, calculate the frequencies for the next track.
                this.cuedSounds.cueMeasureIndex += 1;
                cuedSound.waitTime = endTicks * timeRatio;
            }
            else {
                this.cuedSounds.complete = true;
            }
            // }, 1);
        }
    }
    populateSounds(measureIndex) {
        if (!SuiAudioPlayer.playing) {
            return;
        }
        const interval = 20;
        let draining = false;
        const buffer = SuiAudioPlayer.audioBufferSize;
        const timer = setInterval(() => {
            if (this.cuedSounds.complete || SuiAudioPlayer.playing === false) {
                clearInterval(timer);
                return;
            }
            if (this.cuedSounds.paramLinkHead === null) {
                this.cuedSounds.complete = true;
                return;
            }
            if (draining && this.cuedSounds.soundCount > buffer / 4) {
                return;
            }
            if (this.cuedSounds.soundCount > buffer) {
                draining = true;
                return;
            }
            draining = false;
            this.createCuedSound(measureIndex);
            measureIndex += 1;
        }, interval);
    }
    playSounds() {
        this.cuedSounds.playMeasureIndex = 0;
        this.cuedSounds.playWaitTimer = 0;
        let previousDuration = 0;
        const timer = () => {
            setTimeout(() => {
                const cuedSound = this.cuedSounds.advanceHead();
                if (cuedSound === null) {
                    SuiAudioPlayer._playing = false;
                    this.audioAnimation.clearAudioAnimationHandler(previousDuration);
                    return;
                }
                if (SuiAudioPlayer._playing === false) {
                    this.audioAnimation.clearAudioAnimationHandler(previousDuration);
                    return;
                }
                if (cuedSound.oscs.length === 0) {
                    this.cuedSounds.playMeasureIndex += 1;
                    this.cuedSounds.playWaitTimer = cuedSound.waitTime;
                    console.warn('empty oscs in playback');
                    timer();
                    return;
                }
                previousDuration = cuedSound.oscs[0].duration;
                SuiAudioPlayer._playChord(cuedSound.oscs);
                this.audioAnimation.audioAnimationHandler(this.view, cuedSound.selector, cuedSound.offsetPct, cuedSound.durationPct);
                this.cuedSounds.playMeasureIndex += 1;
                this.cuedSounds.playWaitTimer = cuedSound.waitTime;
                timer();
            }, this.cuedSounds.playWaitTimer);
        };
        timer();
    }
    playAfter(milliseconds, oscs) {
        setTimeout(() => {
            SuiAudioPlayer._playChord(oscs);
        }, milliseconds);
    }
    startPlayer(measureIndex) {
        this.openTies = {};
        this.cuedSounds.reset();
        this.cuedSounds.cueMeasureIndex = measureIndex;
        this.cuedSounds.playMeasureIndex = this.cuedSounds.cueMeasureIndex;
        this.cuedSounds.paramLinkHead = null;
        this.cuedSounds.paramLinkTail = null;
        const endMeasure = this.score.staves[0].measures.length;
        let i = 0;
        for (i = this.cuedSounds.cueMeasureIndex; i < endMeasure; ++i) {
            const { endTicks, measureNotes } = this.getNoteSoundData(i);
            const node = {
                soundParams: measureNotes,
                endTicks,
                next: null
            };
            if (this.cuedSounds.paramLinkHead === null) {
                this.cuedSounds.paramLinkHead = node;
                this.cuedSounds.paramLinkTail = node;
            }
            else {
                this.cuedSounds.paramLinkTail.next = node;
                this.cuedSounds.paramLinkTail = this.cuedSounds.paramLinkTail.next;
            }
        }
        setTimeout(() => {
            this.populateSounds(measureIndex);
        }, 1);
        const bufferThenPlay = () => {
            setTimeout(() => {
                if (this.cuedSounds.soundListLength >= SuiAudioPlayer.audioBufferSize || this.cuedSounds.complete) {
                    this.playSounds();
                }
                else {
                    bufferThenPlay();
                }
            }, 50);
        };
        bufferThenPlay();
    }
    static stopPlayer() {
        if (SuiAudioPlayer._playingInstance) {
            const a = SuiAudioPlayer._playingInstance;
            a.audioAnimation.clearAudioAnimationHandler(0);
            a.paused = false;
            a.cuedSounds.reset();
        }
        SuiAudioPlayer.playing = false;
    }
    static get playingInstance() {
        if (!SuiAudioPlayer._playingInstance) {
            return null;
        }
        return SuiAudioPlayer._playingInstance;
    }
    // the oscAr contains an oscillator for each pitch in the chord.
    // each inner oscillator is a promise, the combined promise is resolved when all
    // the beats have completed.
    static _playChord(oscAr) {
        var par = [];
        oscAr.forEach((osc) => {
            par.push(osc.play());
        });
        return Promise.all(par);
    }
    // Starts the player.
    play() {
        var _a, _b;
        let i = 0;
        if (SuiAudioPlayer.playing) {
            return;
        }
        SuiAudioPlayer._playingInstance = this;
        SuiAudioPlayer.playing = true;
        const startIndex = (_b = (_a = this.view.tracker.getFirstMeasureOfSelection()) === null || _a === void 0 ? void 0 : _a.measureNumber.measureIndex) !== null && _b !== void 0 ? _b : 0;
        //for (i = this.startIndex; i < this.score.staves[0].measures.length; ++i) {
        //   this.tracks.push(SuiAudioPlayer.getTrackSounds(this.audio.tracks, i));
        // }
        // const sounds = SuiAudioPlayer.getTrackSounds(this.audio.tracks, this.startIndex);
        // this.playSoundsAtOffset(sounds, 0);
        this.startPlayer(startIndex);
    }
}
SuiAudioPlayer._playing = false;
SuiAudioPlayer.instanceId = 0;
SuiAudioPlayer.duplicatePitchThresh = 4;
SuiAudioPlayer.voiceThresh = 16;
SuiAudioPlayer._playingInstance = null;


/***/ }),

/***/ "./src/render/audio/samples.ts":
/*!*************************************!*\
  !*** ./src/render/audio/samples.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiSampleMedia: () => (/* binding */ SuiSampleMedia),
/* harmony export */   sampleForPercussion: () => (/* binding */ sampleForPercussion),
/* harmony export */   sampleFromFrequency: () => (/* binding */ sampleFromFrequency),
/* harmony export */   sampleFromMinDuration: () => (/* binding */ sampleFromMinDuration)
/* harmony export */ });
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



const sampleForPercussion = (params, samples) => {
    const longSamples = samples.filter((ss) => ss.instrument === 'percussion');
    let sample = null;
    if (longSamples.length) {
        sample = sampleFromFrequency(params, longSamples);
        if (sample) {
            return sample;
        }
    }
    return sampleFromFrequency(params, samples);
};
/**
 * For instruments like violin that require different samples depending on note duration
 * @param params
 * @param samples
 * @returns
 * @category SuiAudio
 */
const sampleFromMinDuration = (params, samples) => {
    const longSamples = samples.filter((ss) => ss.minDuration < params.duration && ss.minDuration > 0);
    if (longSamples.length) {
        return sampleFromFrequency(params, longSamples);
    }
    return sampleFromFrequency(params, samples.filter((ss) => ss.minDuration === 0));
};
/**
 * Give a set of samples, return the one that closest matches the frequency
 * @param params
 * @param samples
 * @returns
 * @category SuiAudio
*/
const sampleFromFrequency = (params, samples) => {
    let min = 9999;
    let rv = null;
    let i = 0;
    const f = params.frequency;
    for (i = 0; i < samples.length; ++i) {
        const oscInfo = samples[i];
        if (!oscInfo.sample || !SuiSampleMedia.sampleBufferMap[oscInfo.sample]) {
            continue;
        }
        const buffer = SuiSampleMedia.sampleBufferMap[oscInfo.sample];
        if (Math.abs(f - oscInfo.nativeFrequency) < min) {
            min = Math.abs(f - oscInfo.nativeFrequency);
            rv = {
                sample: buffer,
                frequency: oscInfo.nativeFrequency,
                patch: oscInfo.sample
            };
        }
    }
    return rv;
};
/**
 * Logic to create audio nodes out of HTML5 media elements
 * @category SuiAudio
 */
class SuiSampleMedia {
    static getFamilyForInstrument(instKey) {
        const sound = SuiSampleMedia.instrumentChooser[instKey];
        if (sound && sound.samples.length) {
            return sound.samples[0].family;
        }
        return 'keyboard';
    }
    static insertIntoMap(sample) {
        const oscInfo = _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoInstrument.defaultOscillatorParam;
        const populatePartial = (partial, full, param) => {
            full[param] = typeof (partial[param]) === 'undefined' ? full[param] : partial[param];
        };
        _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoOscillatorInfoAllTypes.forEach((paramType) => {
            populatePartial(sample, oscInfo, paramType);
        });
        if (!this.sampleOscMap[oscInfo.instrument]) {
            this.sampleOscMap[oscInfo.instrument] = [];
        }
        this.sampleOscMap[oscInfo.instrument].push(oscInfo);
        SuiSampleMedia.sampleFiles.push(oscInfo);
    }
    static populateSampleMap() {
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'samplecn4',
            family: 'keyboard',
            instrument: 'piano',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            realOvertones: [],
            imaginaryOvertones: [],
            sample: 'samplebb4',
            family: 'keyboard',
            instrument: 'piano',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'b', accidental: 'b', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'basspizz-c2-sso',
            family: 'strings',
            instrument: 'jazzBass',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: '#', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'basspizz-c3-sso',
            family: 'strings',
            instrument: 'jazzBass',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: '#', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'eguitar-e3',
            family: 'strings',
            instrument: 'eGuitar',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'eguitar-d4',
            family: 'strings',
            instrument: 'eGuitar',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'd', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-bass-a1',
            family: 'strings',
            instrument: 'bass',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'a', accidental: 'n', octave: 1 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-bass-a3',
            family: 'strings',
            instrument: 'bass',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'a', accidental: 'n', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-violinshort-c4',
            family: 'strings',
            instrument: 'violin',
            minDuration: 0,
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 5 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-violinshort-b5',
            family: 'strings',
            instrument: 'violin',
            minDuration: 0,
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'b', accidental: 'n', octave: 6 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-violinshort-e5',
            family: 'strings',
            instrument: 'violin',
            minDuration: 0,
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 6 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-violin-e6',
            family: 'strings',
            instrument: 'violin',
            minDuration: 400,
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 6 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-violin-e5',
            family: 'strings',
            instrument: 'violin',
            minDuration: 400,
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 5 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-violin-e4',
            family: 'strings',
            instrument: 'violin',
            minDuration: 400,
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-cello-bb3',
            family: 'strings',
            instrument: 'cello',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'b', accidental: 'n', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-cello-c4',
            family: 'strings',
            instrument: 'cello',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'trumpet-g5-sso',
            family: 'brass',
            instrument: 'trumpet',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'g', accidental: 'n', octave: 5 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'trumpet-e4-sso',
            family: 'brass',
            instrument: 'trumpet',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-horn-e4',
            family: 'brass',
            instrument: 'horn',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 4 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-horn-g3',
            family: 'brass',
            instrument: 'horn',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'g', accidental: 'n', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'trombone-g3-sso',
            family: 'brass',
            instrument: 'trombone',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'g', accidental: 'n', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'trombone-g4-sso',
            family: 'brass',
            instrument: 'trombone',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'g', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-tuba-c2',
            family: 'brass',
            instrument: 'tuba',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 2 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-tuba-c3',
            family: 'brass',
            instrument: 'tuba',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 3 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-flute-c5',
            family: 'wind',
            instrument: 'flute',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 5 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-flute-c6',
            family: 'wind',
            instrument: 'flute',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 6 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-clarinet-c4',
            family: 'wind',
            instrument: 'clarinet',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-clarinet-c5',
            family: 'wind',
            instrument: 'clarinet',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 5 }, 0, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-asax-a3',
            family: 'wind',
            instrument: 'altoSax',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'a', accidental: 'n', octave: 3 }, 12, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-asax-c4',
            family: 'wind',
            instrument: 'altoSax',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 12, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-asax-a3',
            family: 'wind',
            instrument: 'tenorSax',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'a', accidental: 'n', octave: 3 }, 24, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'sample-asax-c4',
            family: 'wind',
            instrument: 'tenorSax',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 24, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'barisax-d2-nz10',
            family: 'wind',
            instrument: 'bariSax',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'd', accidental: 'n', octave: 2 }, 12, null),
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'barisax-c3-nz10',
            family: 'wind',
            instrument: 'bariSax',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 3 }, 12, null) - 5,
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'pad-c4-vita',
            family: 'synth',
            instrument: 'pad',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 3 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'sustained',
            sample: 'pad-c5-vita',
            family: 'synth',
            instrument: 'pad',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'drum-hh-closed',
            family: 'drums',
            instrument: 'percussion',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'g', accidental: 'n', octave: 5 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'drum-drumset-snare',
            family: 'drums',
            instrument: 'percussion',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'f', accidental: 'n', octave: 4 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'drum-drumset-tom1',
            family: 'drums',
            instrument: 'percussion',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'a', accidental: 'n', octave: 4 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'drum-drumset-tom2',
            family: 'drums',
            instrument: 'percussion',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'e', accidental: 'n', octave: 5 }, 0, null),
            dynamic: 100
        });
        SuiSampleMedia.insertIntoMap({
            sustain: 'percussive',
            sample: 'drum-drumset-kick',
            family: 'drums',
            instrument: 'percussion',
            nativeFrequency: _smo_data_music__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPitch.smoPitchToFrequency({ letter: 'c', accidental: 'n', octave: 4 }, 0, null),
            dynamic: 100
        });
        const instrumentMap = Object.keys(SuiSampleMedia.sampleOscMap);
        instrumentMap.forEach((instrumentKey) => {
            SuiSampleMedia.instrumentChooser[instrumentKey] = {
                instrument: instrumentKey,
                samples: SuiSampleMedia.sampleOscMap[instrumentKey],
                sampleChooser: sampleFromFrequency
            };
        });
        SuiSampleMedia.instrumentChooser['violin'].sampleChooser = sampleFromMinDuration;
        SuiSampleMedia.instrumentChooser['percussion'].sampleChooser = sampleForPercussion;
    }
    static getSmoOscillatorInfo(instrument) {
        if (!SuiSampleMedia.sampleOscMap[instrument]) {
            return SuiSampleMedia.sampleOscMap['piano'];
        }
        return SuiSampleMedia.sampleOscMap[instrument];
    }
    /**
    * Load samples so we can play the music
    * @returns - promise, resolved when loaded
    */
    static samplePromise(audio) {
        const mediaElements = [];
        let i = 0;
        if (SuiSampleMedia.receivedBuffer) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
        }
        SuiSampleMedia.populateSampleMap();
        const loadedSamples = {};
        for (i = 0; i < SuiSampleMedia.sampleFiles.length; ++i) {
            const file = SuiSampleMedia.sampleFiles[i];
            if (!file.sample) {
                continue;
            }
            const sampleName = file.sample;
            const audioElement = document.getElementById(file.sample);
            if (!loadedSamples[file.sample] && audioElement) {
                loadedSamples[file.sample] = true;
                const media = audio.createMediaElementSource(audioElement);
                mediaElements.push(audioElement);
                const req = new XMLHttpRequest();
                req.open('GET', media.mediaElement.src, true);
                req.responseType = 'arraybuffer';
                req.send();
                req.onload = () => {
                    const audioData = req.response;
                    audio.decodeAudioData(audioData, (decoded) => {
                        SuiSampleMedia.sampleBufferMap[sampleName] = decoded;
                        SuiSampleMedia.receivedBuffer = true;
                    });
                };
            }
            if (mediaElements.length < 1) {
                return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
            }
        }
        const rv = new Promise((resolve) => {
            const checkSample = () => {
                setTimeout(() => {
                    if (!SuiSampleMedia.receivedBuffer) {
                        checkSample();
                    }
                    else {
                        resolve();
                    }
                }, 100);
            };
            checkSample();
        });
        return rv;
    }
    static sampleForFrequency(f, oscs) {
        let min = 9999;
        let rv = null;
        let i = 0;
        for (i = 0; i < oscs.length; ++i) {
            const oscInfo = oscs[i];
            if (!oscInfo.sample || !SuiSampleMedia.sampleBufferMap[oscInfo.sample]) {
                continue;
            }
            const buffer = SuiSampleMedia.sampleBufferMap[oscInfo.sample];
            if (Math.abs(f - oscInfo.nativeFrequency) < min) {
                min = Math.abs(f - oscInfo.nativeFrequency);
                rv = {
                    sample: buffer,
                    frequency: oscInfo.nativeFrequency,
                    patch: oscInfo.sample
                };
            }
        }
        return rv;
    }
    static matchedSample(params) {
        let instrumentKey = params.instrument;
        if (!SuiSampleMedia.instrumentChooser[instrumentKey]) {
            instrumentKey = 'piano';
        }
        if (!SuiSampleMedia.instrumentChooser[instrumentKey]) {
            const keys = Object.keys(SuiSampleMedia.sampleOscMap);
            if (keys.length === 0) {
                return null;
            }
            instrumentKey = keys[0];
        }
        return SuiSampleMedia.instrumentChooser[instrumentKey].sampleChooser(params, SuiSampleMedia.instrumentChooser[instrumentKey].samples);
    }
}
SuiSampleMedia.sampleFiles = [];
SuiSampleMedia.sampleBufferMap = {};
SuiSampleMedia.sampleOscMap = {};
SuiSampleMedia.instrumentChooser = {};
SuiSampleMedia.receivedBuffer = false;


/***/ }),

/***/ "./src/render/sui/formatter.ts":
/*!*************************************!*\
  !*** ./src/render/sui/formatter.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiLayoutFormatter: () => (/* binding */ SuiLayoutFormatter)
/* harmony export */ });
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vex/glyphDimensions */ "./src/render/vex/glyphDimensions.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _smo_data_note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _smo_xform_beamers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/xform/beamers */ "./src/smo/xform/beamers.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _layoutDebug__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _smo_data_measure__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../smo/data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../smo/data//measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
/* harmony import */ var _common_textformatter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/textformatter */ "./src/common/textformatter.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Utilities for formatting the music by estimating the geometry of the music.
 * @module /render/sui/formatter
 */












const VF = _common_vex__WEBPACK_IMPORTED_MODULE_10__.VexFlow;
/**
 * Utilities for estimating measure/system/page width and height
 * @category SuiRender
 */
class SuiLayoutFormatter {
    constructor(score, svg, renderedPages) {
        this.systems = {};
        this.currentPage = 0;
        this.lines = [];
        this.score = score;
        this.svg = svg;
        this.columnMeasureMap = {};
        this.renderedPages = renderedPages;
        this.score.staves.forEach((staff) => {
            staff.measures.forEach((measure) => {
                if (!this.columnMeasureMap[measure.measureNumber.measureIndex]) {
                    this.columnMeasureMap[measure.measureNumber.measureIndex] = [];
                }
                this.columnMeasureMap[measure.measureNumber.measureIndex].push(measure);
            });
        });
    }
    /**
     * Once we know which line a measure is going on, make a map for it for easy
     * looking during rendering
     * @param measures
     * @param lineIndex
     * @param systemIndex
     */
    updateSystemMap(measures, lineIndex, systemIndex) {
        if (!this.systems[lineIndex]) {
            const nextLr = {
                systems: {}
            };
            this.systems[lineIndex] = nextLr;
        }
        const systemRender = this.systems[lineIndex];
        if (!systemRender.systems[systemIndex]) {
            systemRender.systems[systemIndex] = measures;
        }
    }
    trimPages(startPageCount) {
        var _a, _b, _c, _d;
        let pl = (_b = (_a = this.score) === null || _a === void 0 ? void 0 : _a.layoutManager) === null || _b === void 0 ? void 0 : _b.pageLayouts;
        if (pl) {
            if (this.currentPage < pl.length - 1) {
                this.score.layoutManager.trimPages(this.currentPage);
                pl = (_d = (_c = this.score) === null || _c === void 0 ? void 0 : _c.layoutManager) === null || _d === void 0 ? void 0 : _d.pageLayouts;
            }
            if (pl && pl.length !== startPageCount) {
                return true;
            }
        }
        return false;
    }
    /**
     * see if page breaks this boundary.  If it does, bump the current page and move the system down
     * to the new page
     * @param scoreLayout
     * @param currentLine
     * @param bottomMeasure
     * @returns
     */
    checkPageBreak(scoreLayout, currentLine, bottomMeasure) {
        let pageAdj = 0;
        const lm = this.score.layoutManager;
        // See if this measure breaks a page.
        const maxY = bottomMeasure.svg.logicalBox.y + bottomMeasure.svg.logicalBox.height;
        if (maxY > ((this.currentPage + 1) * scoreLayout.pageHeight) - scoreLayout.bottomMargin) {
            this.currentPage += 1;
            // If this is a new page, make sure there is a layout for it.
            lm.addToPageLayouts(this.currentPage);
            scoreLayout = lm.getScaledPageLayout(this.currentPage);
            // When adjusting the page, make it so the top staff of the system
            // clears the bottom of the page.
            const topMeasure = currentLine.reduce((a, b) => a.svg.logicalBox.y < b.svg.logicalBox.y ? a : b);
            const minMaxY = topMeasure.svg.logicalBox.y;
            pageAdj = (this.currentPage * scoreLayout.pageHeight) - minMaxY;
            pageAdj = pageAdj + scoreLayout.topMargin;
            // For each measure on the current line, move it down past the page break;
            currentLine.forEach((measure) => {
                measure.setBox(_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(measure.svg.logicalBox.x, measure.svg.logicalBox.y + pageAdj, measure.svg.logicalBox.width, measure.svg.logicalBox.height), '_checkPageBreak');
                measure.setY(measure.staffY + pageAdj, '_checkPageBreak');
                measure.svg.pageIndex = this.currentPage;
            });
        }
        return scoreLayout;
    }
    measureToLeft(measure) {
        const j = measure.measureNumber.staffId;
        const i = measure.measureNumber.measureIndex;
        return (i > 0 ? this.score.staves[j].measures[i - 1] : null);
    }
    // {measures,y,x}  the x and y at the left/bottom of the render
    /**
     * Estimate the dimensions of a column when it's rendered.
     * @param scoreLayout
     * @param measureIx
     * @param systemIndex
     * @param lineIndex
     * @param x
     * @param y
     * @returns { MeasureEstimate } - the measures in the column and the x, y location
     */
    estimateColumn(scoreLayout, measureIx, systemIndex, lineIndex, x, y) {
        const s = {};
        const measures = this.columnMeasureMap[measureIx];
        let rowInSystem = 0;
        let voiceCount = 0;
        let unalignedCtxCount = 0;
        let wsum = 0;
        let dsum = 0;
        let maxCfgWidth = 0;
        let isPickup = false;
        // Keep running tab of accidental widths for justification
        const contextMap = {};
        let forceClefCount = 0;
        let measureToSkip = false;
        let maxColumnStartX = 0;
        measures.forEach((measure) => {
            // use measure to left to figure out whether I need to render key signature, etc.
            // If I am the first measure, just use self and we always render them on the first measure.
            let measureToLeft = this.measureToLeft(measure);
            if (!measureToLeft) {
                measureToLeft = measure;
            }
            s.measureKeySig = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySignatureTranspose(measure.keySignature, 0);
            s.keySigLast = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySignatureTranspose(measureToLeft.keySignature, 0);
            s.tempoLast = measureToLeft.getTempo();
            s.timeSigLast = measureToLeft.timeSignature;
            s.clefLast = measureToLeft.clef;
            this.calculateBeginningSymbols(systemIndex, measure, s.clefLast, s.keySigLast, s.timeSigLast, s.tempoLast);
            const startX = SuiLayoutFormatter.estimateStartSymbolWidth(measure);
            measure.svg.adjX = startX;
            maxColumnStartX = Math.max(maxColumnStartX, startX);
        });
        measures.forEach((measure) => {
            measure.svg.maxColumnStartX = maxColumnStartX;
            _smo_xform_beamers__WEBPACK_IMPORTED_MODULE_5__.SmoBeamer.applyBeams(measure);
            voiceCount += measure.voices.length;
            if (measure.isPickup()) {
                isPickup = true;
            }
            if (measure.format.skipMeasureCount) {
                measureToSkip = true;
            }
            measure.measureNumber.systemIndex = systemIndex;
            measure.svg.rowInSystem = rowInSystem;
            measure.svg.lineIndex = lineIndex;
            measure.svg.pageIndex = this.currentPage;
            // calculate vertical offsets from the baseline
            const offsets = this.estimateMeasureHeight(measure);
            measure.setYTop(offsets.aboveBaseline, 'render:estimateColumn');
            measure.setY(y - measure.yTop, 'estimateColumns height');
            measure.setX(x, 'render:estimateColumn');
            // Add custom width to measure:
            measure.setBox(_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(measure.staffX, y, measure.staffWidth, offsets.belowBaseline - offsets.aboveBaseline), 'render: estimateColumn');
            this.estimateMeasureWidth(measure, scoreLayout, contextMap);
            y = y + measure.svg.logicalBox.height + scoreLayout.intraGap;
            maxCfgWidth = Math.max(maxCfgWidth, measure.staffWidth);
            rowInSystem += 1;
        });
        // justify this column to the maximum width.
        const startX = measures[0].staffX;
        const adjX = measures[0].svg.maxColumnStartX;
        const contexts = Object.keys(contextMap);
        const widths = [];
        const durations = [];
        let minTotalWidth = 0;
        contexts.forEach((strIx) => {
            const ix = parseInt(strIx);
            let tickWidth = 0;
            const context = contextMap[ix];
            if (context.tickCounts.length < voiceCount) {
                unalignedCtxCount += 1;
            }
            context.widths.forEach((w, ix) => {
                wsum += w;
                dsum += context.tickCounts[ix];
                widths.push(w);
                durations.push(context.tickCounts[ix]);
                tickWidth = Math.max(tickWidth, w);
            });
            minTotalWidth += tickWidth;
        });
        // Vex formatter adjusts location of ticks based to keep the justified music aligned.  It does this
        // by moving notes to the right.  We try to add padding to each tick context based on the 'entropy' of the 
        // music.   4 quarter notes with no accidentals in all voices will have 0 entropy.  All the notes need the same
        // amount of space, so they don't need additional space to align.
        // wvar - the std deviation in the widths or 'width entropy'
        // dvar - the std deviation in the duration between voices or 'duration entropy'
        const sumArray = (arr) => arr.reduce((a, b) => a + b, 0);
        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;
        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));
        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;
        const davg = dsum / durations.length;
        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));
        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;
        const unalignedPadding = 2;
        const padmax = Math.max(dpads, wpads) * contexts.length * unalignedPadding;
        const unalignedPad = unalignedPadding * unalignedCtxCount;
        let maxWidth = Math.max(adjX + minTotalWidth + Math.max(unalignedPad, padmax), maxCfgWidth);
        if (scoreLayout.maxMeasureSystem > 0 && !isPickup && !measureToSkip) {
            // Add 1 because there is some overhead in each measure, 
            // so there can never be (width/max) measures in the system
            const defaultWidth = (scoreLayout.pageWidth / (scoreLayout.maxMeasureSystem + 1));
            maxWidth = Math.max(maxWidth, defaultWidth);
        }
        const maxX = startX + maxWidth;
        measures.forEach((measure) => {
            measure.setWidth(maxWidth, 'render:estimateColumn');
            // measure.svg.adjX = adjX;
        });
        const rv = { measures, y, x: maxX };
        return rv;
    }
    /**
     * return true if this is the last measure, taking into account multimeasure rest
     * @param measureIx
     * @returns
     */
    isLastVisibleMeasure(measureIx) {
        if (measureIx >= this.score.staves[0].measures.length) {
            return true;
        }
        if (this.score.staves[0].partInfo.expandMultimeasureRests) {
            return false;
        }
        let i = 0;
        for (i = measureIx; i < this.score.staves[0].measures.length; ++i) {
            const mm = this.score.staves[0].measures[i];
            if (!mm.svg.hideMultimeasure) {
                return false;
            }
        }
        return true;
    }
    /**
     * Calculate the geometry for the entire score, based on estimated measure width and height.
     * @returns
     */
    layout() {
        let measureIx = 0;
        let systemIndex = 0;
        if (!this.score.layoutManager) {
            return;
        }
        let scoreLayout = this.score.layoutManager.getScaledPageLayout(0);
        let y = 0;
        let x = 0;
        let lineIndex = 0;
        this.lines = [];
        let pageCheck = 0;
        // let firstMeasureOnPage = 0;
        this.lines.push(lineIndex);
        let currentLine = []; // the system we are esimating
        let measureEstimate = null;
        _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.clearDebugBoxes(_layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.values.pre);
        _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.clearDebugBoxes(_layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.values.system);
        const timestamp = new Date().valueOf();
        y = scoreLayout.topMargin;
        x = scoreLayout.leftMargin;
        while (measureIx < this.score.staves[0].measures.length) {
            if (this.score.isPartExposed()) {
                if (this.score.staves[0].measures[measureIx].svg.hideMultimeasure) {
                    measureIx += 1;
                    continue;
                }
            }
            measureEstimate = this.estimateColumn(scoreLayout, measureIx, systemIndex, lineIndex, x, y);
            x = measureEstimate.x;
            if (systemIndex > 0 &&
                (measureEstimate.measures[0].format.systemBreak || measureEstimate.x > (scoreLayout.pageWidth - scoreLayout.leftMargin))) {
                this.justifyY(scoreLayout, measureEstimate.measures.length, currentLine, false);
                // find the measure with the lowest y extend (greatest y value), not necessarily one with lowest
                // start of staff.
                const bottomMeasure = currentLine.reduce((a, b) => a.svg.logicalBox.y + a.svg.logicalBox.height > b.svg.logicalBox.y + b.svg.logicalBox.height ? a : b);
                this.checkPageBreak(scoreLayout, currentLine, bottomMeasure);
                const renderedPage = this.renderedPages[pageCheck];
                if (renderedPage) {
                    if (pageCheck !== this.currentPage) {
                        // The last measure in the last system of the previous page
                        const previousSystem = currentLine[0].measureNumber.measureIndex - 1;
                        if (renderedPage.endMeasure !== previousSystem) {
                            this.renderedPages[pageCheck] = null;
                        }
                        const nextPage = this.renderedPages[this.currentPage];
                        if (nextPage && nextPage.startMeasure !== previousSystem + 1) {
                            this.renderedPages[this.currentPage] = null;
                        }
                    }
                }
                pageCheck = this.currentPage;
                const ld = _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug;
                const sh = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers;
                if (_layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.mask & _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.values.system) {
                    currentLine.forEach((measure) => {
                        if (measure.svg.logicalBox) {
                            const context = this.svg.getRenderer(measure.svg.logicalBox);
                            if (context) {
                                ld.debugBox(context.svg, measure.svg.logicalBox, _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.values.system);
                            }
                        }
                    });
                }
                // Now start rendering on the next system.
                y = bottomMeasure.svg.logicalBox.height + bottomMeasure.svg.logicalBox.y + scoreLayout.interGap;
                currentLine = [];
                systemIndex = 0;
                x = scoreLayout.leftMargin;
                lineIndex += 1;
                this.lines.push(lineIndex);
                measureEstimate = this.estimateColumn(scoreLayout, measureIx, systemIndex, lineIndex, x, y);
                x = measureEstimate.x;
            }
            measureEstimate === null || measureEstimate === void 0 ? void 0 : measureEstimate.measures.forEach((measure) => {
                const context = this.svg.getRenderer(measure.svg.logicalBox);
                if (context) {
                    _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.debugBox(context.svg, measure.svg.logicalBox, _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.values.pre);
                }
            });
            this.updateSystemMap(measureEstimate.measures, lineIndex, systemIndex);
            currentLine = currentLine.concat(measureEstimate.measures);
            measureIx += 1;
            systemIndex += 1;
            // If this is the last measure but we have not filled the x extent,
            // still justify the vertical staves and check for page break.
            if (this.isLastVisibleMeasure(measureIx) && measureEstimate !== null) {
                this.justifyY(scoreLayout, measureEstimate.measures.length, currentLine, true);
                const bottomMeasure = currentLine.reduce((a, b) => a.svg.logicalBox.y + a.svg.logicalBox.height > b.svg.logicalBox.y + b.svg.logicalBox.height ? a : b);
                scoreLayout = this.checkPageBreak(scoreLayout, currentLine, bottomMeasure);
            }
        }
        // If a measure was added to the last page, make sure we re-render the page
        const renderedPage = this.renderedPages[this.currentPage];
        if (renderedPage) {
            if (renderedPage.endMeasure !== currentLine[0].measureNumber.measureIndex) {
                this.renderedPages[this.currentPage] = null;
            }
        }
        _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.setTimestamp(_layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.codeRegions.COMPUTE, new Date().valueOf() - timestamp);
    }
    static estimateMusicWidth(smoMeasure, tickContexts) {
        const widths = [];
        // Add up the widths of the music glyphs for each voice, including accidentals etc.  We save the widths in a hash by duration
        // and later consider overlapping/colliding ticks in each voice
        const tmObj = smoMeasure.createMeasureTickmaps();
        smoMeasure.voices.forEach((voice) => {
            let width = 0;
            let duration = 0;
            const noteCount = voice.notes.length;
            voice.notes.forEach((note) => {
                let noteWidth = 0;
                const dots = (note.dots ? note.dots : 0);
                let headWidth = _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.width(_vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.noteHead);
                // Maybe not the best place for this...ideally we'd get the note head glyph from
                // the ntoe.
                if (note.tickCount >= 4096 * 4 && note.noteType === 'n') {
                    headWidth *= 2;
                }
                const dotWidth = _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.width(_vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.dot);
                noteWidth += headWidth +
                    _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.noteHead.spacingRight;
                // TODO: Consider engraving font and adjust grace note size?
                noteWidth += (headWidth + _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.noteHead.spacingRight) * note.graceNotes.length;
                noteWidth += dotWidth * dots + _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.dot.spacingRight * dots;
                note.pitches.forEach((pitch) => {
                    const keyAccidental = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getAccidentalForKeySignature(pitch, smoMeasure.keySignature);
                    const accidentals = tmObj.accidentalArray.filter((ar) => ar.duration < duration && ar.pitches[pitch.letter]);
                    const acLen = accidentals.length;
                    const declared = acLen > 0 ?
                        accidentals[acLen - 1].pitches[pitch.letter].pitch.accidental : keyAccidental;
                    if (declared !== pitch.accidental || pitch.cautionary) {
                        noteWidth += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.accidentalWidth(pitch.accidental);
                    }
                });
                let verse = 0;
                let lyricBase = note.getLyricForVerse(verse, _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLyric.parsers.lyric);
                while (lyricBase.length) {
                    let lyric = lyricBase[0];
                    let lyricWidth = 0;
                    let i = 0;
                    // TODO: kerning and all that...
                    if (!lyric.text.length) {
                        break;
                    }
                    // why did I make this return an array?
                    // oh...because of voices
                    const textFont = _common_textformatter__WEBPACK_IMPORTED_MODULE_11__.TextFormatter.create({ family: lyric.fontInfo.family,
                        size: lyric.fontInfo.size, weight: 'normal' });
                    const lyricText = lyric.getText();
                    for (i = 0; i < lyricText.length; ++i) {
                        lyricWidth += textFont.getWidthForTextInPx(lyricText[i]);
                    }
                    if (lyric.isHyphenated()) {
                        lyricWidth += 2 * textFont.getWidthForTextInPx('-');
                    }
                    else {
                        lyricWidth += 2 * textFont.getWidthForTextInPx('H');
                    }
                    noteWidth = Math.max(lyricWidth, noteWidth);
                    verse += 1;
                    lyricBase = note.getLyricForVerse(verse, _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLyric.parsers.lyric);
                }
                if (!tickContexts[duration]) {
                    tickContexts[duration] = {
                        widths: [],
                        tickCounts: []
                    };
                }
                if (smoMeasure.repeatSymbol) {
                    noteWidth = _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.repeatSymbolWidth() / noteCount;
                }
                tickContexts[duration].widths.push(noteWidth);
                tickContexts[duration].tickCounts.push(note.tickCount);
                duration += Math.round(note.tickCount);
                width += noteWidth;
            });
            widths.push(width);
        });
        widths.sort((a, b) => a > b ? -1 : 1);
        return widths[0];
    }
    static estimateStartSymbolWidth(smoMeasure) {
        let width = 0;
        // the variables starts and digits used to be in the if statements. I moved them here to fix the resulting error
        var starts = smoMeasure.getStartBarline();
        var digits = smoMeasure.timeSignature.timeSignature.split('/')[0].length;
        if (smoMeasure.svg.forceKeySignature) {
            if (smoMeasure.canceledKeySignature) {
                width += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.keySignatureLength(smoMeasure.canceledKeySignature);
            }
            width += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.keySignatureLength(smoMeasure.keySignature);
        }
        if (smoMeasure.svg.forceClef) {
            const clefGlyph = _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.clef(smoMeasure.clef);
            width += clefGlyph.width + clefGlyph.spacingRight;
        }
        if (smoMeasure.svg.forceTimeSignature) {
            width += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.width(_vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.timeSignature) * digits + _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.dimensions.timeSignature.spacingRight;
        }
        if (starts) {
            width += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.barWidth(starts);
        }
        return width;
    }
    static estimateEndSymbolWidth(smoMeasure) {
        var width = 0;
        var ends = smoMeasure.getEndBarline();
        if (ends) {
            width += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.barWidth(ends);
        }
        return width;
    }
    estimateMeasureWidth(measure, scoreLayout, tickContexts) {
        // Calculate the existing staff width, based on the notes and what we expect to be rendered.
        let measureWidth = SuiLayoutFormatter.estimateMusicWidth(measure, tickContexts) + _common_vex__WEBPACK_IMPORTED_MODULE_10__.defaultMeasurePadding;
        // measure.svg.adjX already set based on max column adjX
        measure.svg.adjRight = SuiLayoutFormatter.estimateEndSymbolWidth(measure);
        measureWidth += measure.svg.adjX + measure.svg.adjRight + measure.format.customStretch + measure.format.padLeft;
        const y = measure.svg.logicalBox.y;
        // For systems that start with padding, add width for the padding
        measure.setWidth(measureWidth, 'estimateMeasureWidth adjX adjRight');
        // Calculate the space for left/right text which displaces the measure.
        // measure.setX(measure.staffX  + textOffsetBox.x,'estimateMeasureWidth');
        measure.setBox(_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(measure.staffX, y, measure.staffWidth, measure.svg.logicalBox.height), 'estimate measure width');
    }
    static _beamGroupForNote(measure, note) {
        let rv = null;
        if (!note.beam_group) {
            return null;
        }
        measure.beamGroups.forEach((bg) => {
            if (!rv) {
                if (bg.notes.findIndex((note) => note.beam_group && note.beam_group.id === bg.attrs.id) >= 0) {
                    rv = bg;
                }
            }
        });
        return rv;
    }
    /**
     * A system has gone beyond the page width.  Lop the last measure off the end and move it to the first measure of the
     * next system.  Then seal the last system by justifying the measures vertically and horinzontally
     * @param scoreLayout
     * @param measureEstimate
     * @param currentLine
     * @param columnCount
     * @param lastSystem
     */
    justifyY(scoreLayout, rowCount, currentLine, lastSystem) {
        let i = 0;
        const sh = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers;
        // If there are fewer measures in the system than the max, don't justify.
        // We estimate the staves at the same absolute y value.
        // Now, move them down so the top of the staves align for all measures in a  row.
        const measuresToHide = [];
        let anyNotes = false;
        for (i = 0; i < rowCount; ++i) {
            // lowest staff has greatest staffY value.
            const rowAdj = currentLine.filter((mm) => mm.svg.rowInSystem === i);
            const lowestStaff = rowAdj.reduce((a, b) => a.staffY > b.staffY ? a : b);
            const hasNotes = rowAdj.findIndex((x) => x.isRest() === false) >= 0;
            if (hasNotes) {
                anyNotes = true;
            }
            rowAdj.forEach((measure) => {
                measure.svg.hideEmptyMeasure = false;
                if (this.score.preferences.hideEmptyLines && !hasNotes && !this.score.isPartExposed()) {
                    measuresToHide.push(measure);
                }
                const adj = lowestStaff.staffY - measure.staffY;
                measure.setY(measure.staffY + adj, 'justifyY');
                measure.setBox(sh.boxPoints(measure.svg.logicalBox.x, measure.svg.logicalBox.y + adj, measure.svg.logicalBox.width, measure.svg.logicalBox.height), 'justifyY');
            });
            const rightStaff = rowAdj.reduce((a, b) => a.staffX + a.staffWidth > b.staffX + b.staffWidth ? a : b);
            const ld = _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug;
            let justifyX = 0;
            let columnCount = rowAdj.length;
            // missing offset is for systems that have fewer measures than the default (due to section break or score ending)
            let missingOffset = 0;
            if (scoreLayout.maxMeasureSystem > 1 &&
                columnCount < scoreLayout.maxMeasureSystem
                && lastSystem) {
                missingOffset = (scoreLayout.pageWidth / (scoreLayout.maxMeasureSystem + 1)) * (scoreLayout.maxMeasureSystem - columnCount);
                columnCount = scoreLayout.maxMeasureSystem;
            }
            if (scoreLayout.maxMeasureSystem > 1 || !lastSystem) {
                justifyX = Math.round((scoreLayout.pageWidth - (scoreLayout.leftMargin + scoreLayout.rightMargin + rightStaff.staffX + rightStaff.staffWidth + missingOffset))
                    / columnCount);
            }
            let justOffset = 0;
            rowAdj.forEach((measure) => {
                measure.setWidth(measure.staffWidth + justifyX, '_estimateMeasureDimensions justify');
                measure.setX(measure.staffX + justOffset, 'justifyY');
                measure.setBox(sh.boxPoints(measure.svg.logicalBox.x + justOffset, measure.svg.logicalBox.y, measure.staffWidth, measure.svg.logicalBox.height), 'justifyY');
                const context = this.svg.getRenderer(measure.svg.logicalBox);
                if (context) {
                    ld.debugBox(context.svg, measure.svg.logicalBox, _layoutDebug__WEBPACK_IMPORTED_MODULE_7__.layoutDebug.values.adjust);
                }
                justOffset += justifyX;
            });
        }
        if (this.score.preferences.hideEmptyLines && anyNotes) {
            let adjY = 0;
            for (i = 0; i < rowCount; ++i) {
                const rowAdj = measuresToHide.filter((mm) => mm.svg.rowInSystem === i);
                if (rowAdj.length) {
                    adjY += rowAdj[0].svg.logicalBox.height;
                    rowAdj.forEach((mm) => {
                        mm.svg.logicalBox.height = 0;
                        mm.svg.hideEmptyMeasure = true;
                    });
                }
                else {
                    const rowAdj = currentLine.filter((mm) => mm.svg.rowInSystem === i);
                    rowAdj.forEach((row) => {
                        row.setY(row.svg.staffY - adjY, 'format-hide');
                    });
                }
            }
        }
    }
    // ### _highestLowestHead
    // highest value is actually the one lowest on the page
    static _highestLowestHead(measure, note) {
        const hilo = { hi: 0, lo: 9999999 };
        note.pitches.forEach((pitch) => {
            // 10 pixels per line
            const ledger = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToLedgerLine(measure.clef, pitch);
            const noteHeight = ledger > 0 ? 10 : -10;
            const px = (10 * ledger) + noteHeight;
            hilo.lo = Math.min(hilo.lo, px);
            hilo.hi = Math.max(hilo.hi, px);
        });
        return hilo;
    }
    static textFont(lyric) {
        return _common_textformatter__WEBPACK_IMPORTED_MODULE_11__.TextFormatter.create(lyric.fontInfo);
    }
    /**
     * Calculate the dimensions of symbols based on where in a system we are, like whether we need to show
     * the key signature, clef etc.
     * @param systemIndex
     * @param measure
     * @param clefLast
     * @param keySigLast
     * @param timeSigLast
     * @param tempoLast
     * @param score
     */
    calculateBeginningSymbols(systemIndex, measure, clefLast, keySigLast, timeSigLast, tempoLast) {
        var _a, _b, _c;
        // The key signature is set based on the transpose index already, i.e. an Eb part in concert C already has 3 sharps.
        const xposeScore = ((_b = (_a = this.score) === null || _a === void 0 ? void 0 : _a.preferences) === null || _b === void 0 ? void 0 : _b.transposingScore) && (((_c = this.score) === null || _c === void 0 ? void 0 : _c.isPartExposed()) === false);
        const xposeOffset = xposeScore ? measure.transposeIndex : 0;
        const measureKeySig = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySignatureTranspose(measure.keySignature, xposeOffset);
        measure.svg.forceClef = (systemIndex === 0 || measure.clef !== clefLast);
        measure.svg.forceTimeSignature = (measure.measureNumber.measureIndex === 0 ||
            (!_smo_data_measure__WEBPACK_IMPORTED_MODULE_8__.SmoMeasure.timeSigEqual(timeSigLast, measure.timeSignature)) || measure.timeSignature.displayString.length > 0);
        if (measure.timeSignature.display === false) {
            measure.svg.forceTimeSignature = false;
        }
        measure.svg.forceTempo = false;
        const tempo = measure.getTempo();
        if (tempo && measure.measureNumber.measureIndex === 0) {
            measure.svg.forceTempo = tempo.display && measure.svg.rowInSystem === 0;
        }
        else if (tempo && tempoLast) {
            if (!_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText.eq(tempo, tempoLast) && measure.svg.rowInSystem === 0) {
                measure.svg.forceTempo = tempo.display;
            }
        }
        else if (tempo) {
            measure.svg.forceTempo = tempo.display && measure.svg.rowInSystem === 0;
        }
        if (measureKeySig !== keySigLast && measure.measureNumber.measureIndex > 0) {
            measure.canceledKeySignature = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySigWithOffset(keySigLast, xposeOffset);
            measure.svg.forceKeySignature = true;
        }
        else if (systemIndex === 0 && measureKeySig !== 'C') {
            measure.svg.forceKeySignature = true;
        }
        else {
            measure.svg.forceKeySignature = false;
        }
    }
    /**
     * The baseline is the top line of the staff.  aboveBaseline is a negative number
     * that indicates how high above the baseline the measure goes.  belowBaseline
     * is a positive number that indicates how far below the baseline the measure goes.
     * the height of the measure is below-above.  Vex always renders a staff such that
     * the y coordinate passed in for the stave is on the baseline.
     *
     * Note to past self: this was a really useful comment.  Thank you.
     * **/
    estimateMeasureHeight(measure) {
        let yTop = 0; // highest point, smallest Y value
        let yBottom = measure.lines * 10; // lowest point, largest Y value.
        let flag = -1;
        let lyricOffset = 0;
        const measureIndex = measure.measureNumber.measureIndex;
        const staffIndex = measure.measureNumber.staffId;
        const stave = this.score.staves[staffIndex];
        stave.renderableModifiers.forEach((mm) => {
            if (mm.startSelector.staff === staffIndex && (mm.startSelector.measure <= measureIndex && mm.endSelector.measure >= measureIndex) ||
                mm.endSelector.staff === staffIndex &&
                    (mm.endSelector.measure <= measureIndex && mm.endSelector.measure >= measureIndex && mm.endSelector.measure !== mm.startSelector.measure)) {
                if (mm.ctor === 'SmoHairpin') {
                    const hp = mm;
                    if (hp.position === _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin.positions.ABOVE) {
                        yTop = yTop - hp.height;
                    }
                    else {
                        yBottom = yBottom + hp.height;
                    }
                }
                else if (mm.ctor === 'SmoStaffTextBracket') {
                    const tb = mm;
                    const tbHeight = 14 + (10 * Math.abs(tb.line - 1)); // 14 default font size
                    if (tb.position === _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.positions.TOP) {
                        yTop = yTop - tbHeight;
                    }
                    else {
                        yBottom = yBottom + tbHeight;
                    }
                }
            }
        });
        if (measure.svg.forceClef) {
            yBottom += _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.clef(measure.clef).yTop + _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.clef(measure.clef).yBottom;
            yTop = yTop - _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.clef(measure.clef).yTop;
        }
        if (measure.svg.forceTempo) {
            yTop = Math.min(-1 * _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.tempo.yTop, yTop);
        }
        measure.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                const bg = SuiLayoutFormatter._beamGroupForNote(measure, note);
                flag = _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.auto;
                if (bg && note.noteType === 'n') {
                    flag = bg.notes[0].flagState;
                    // an  auto-flag note is up if the 1st note is middle line
                    if (flag === _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.auto) {
                        const pitch = bg.notes[0].pitches[0];
                        flag = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToLedgerLine(measure.clef, pitch)
                            >= 2 ? _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.up : _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.down;
                    }
                }
                else {
                    flag = note.flagState;
                    // an  auto-flag note is up if the 1st note is middle line
                    if (flag === _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.auto) {
                        const pitch = note.pitches[0];
                        flag = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToLedgerLine(measure.clef, pitch)
                            >= 2 ? _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.up : _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.down;
                    }
                }
                const hiloHead = SuiLayoutFormatter._highestLowestHead(measure, note);
                if (flag === _smo_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.flagStates.down) {
                    yTop = Math.min(hiloHead.lo, yTop);
                    yBottom = Math.max(hiloHead.hi + _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.stem.height, yBottom);
                }
                else {
                    yTop = Math.min(hiloHead.lo - _vex_glyphDimensions__WEBPACK_IMPORTED_MODULE_2__.vexGlyph.stem.height, yTop);
                    yBottom = Math.max(hiloHead.hi, yBottom);
                }
                // Lyrics will be rendered below the lowest thing on the staff, so add to
                // belowBaseline value based on the max number of verses and font size
                // it will extend
                const lyrics = note.getTrueLyrics();
                if (lyrics.length) {
                    const maxLyric = lyrics.reduce((a, b) => a.verse > b.verse ? a : b);
                    const fontInfo = SuiLayoutFormatter.textFont(maxLyric);
                    lyricOffset = Math.max((maxLyric.verse + 2) * fontInfo.maxHeight, lyricOffset);
                }
                const dynamics = note.getModifiers('SmoDynamicText');
                dynamics.forEach((dyn) => {
                    yBottom = Math.max((10 * dyn.yOffsetLine - 50) + 11, yBottom);
                    yTop = Math.min(10 * dyn.yOffsetLine - 50, yTop);
                });
                note.articulations.forEach((articulation) => {
                    if (articulation.position === _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.positions.above) {
                        yTop -= 10;
                    }
                    else {
                        yBottom += 10;
                    }
                });
                note.ornaments.forEach((ornament) => {
                    if (ornament.position === _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoOrnament.positions.above) {
                        yTop -= 10;
                    }
                    else {
                        yBottom += 10;
                    }
                });
            });
        });
        yBottom += lyricOffset;
        return { belowBaseline: yBottom, aboveBaseline: yTop };
    }
}


/***/ }),

/***/ "./src/render/sui/layoutDebug.ts":
/*!***************************************!*\
  !*** ./src/render/sui/layoutDebug.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   layoutDebug: () => (/* binding */ layoutDebug)
/* harmony export */ });
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.

class layoutDebug {
    static get values() {
        return {
            pre: 1,
            play: 2,
            adjust: 4,
            system: 8,
            scroll: 16,
            artifactMap: 32,
            mouseDebug: 64,
            dragDebug: 128,
            dialogEvents: 256,
            cursor: 512
        };
    }
    static get classes() {
        return {
            1: 'measure-place-dbg',
            2: 'measure-play-dbg',
            4: 'measure-adjust-dbg',
            8: 'system-place-dbg',
            16: 'scroll-box-debug',
            32: 'measure-adjustHeight-dbg',
            64: 'mouse-debug',
            128: 'drag-debug',
            256: '',
            512: 'cursor-adj-dbg',
        };
    }
    static get codeRegions() {
        return {
            COMPUTE: 0,
            PREFORMATA: 1,
            PREFORMATB: 2,
            PREFORMATC: 3,
            FORMAT: 4,
            RENDER: 5,
            UPDATE_MAP: 6,
            POST_RENDER: 7,
            MAP: 8,
            LAST: 8
        };
    }
    static get codeRegionStrings() {
        return ['COMPUTE', 'PREFORMATA', 'PREFORMATB', 'PREFORMATC', 'FORMAT', 'RENDER', 'UPDATE_MAP', 'POST_RENDER', 'MAP'];
    }
    static clearTimestamps() {
        for (var i = 0; i <= layoutDebug.codeRegions.LAST; ++i) {
            layoutDebug.timestampHash[i] = 0;
        }
    }
    static setTimestamp(region, millis) {
        layoutDebug.timestampHash[region] += millis;
    }
    static printTimeReport() {
        let total = 0;
        let report = {};
        let i = 0;
        for (i = 0; i <= layoutDebug.codeRegions.LAST; ++i) {
            total += layoutDebug.timestampHash[i];
            report[layoutDebug.codeRegionStrings[i]] = {
                time: layoutDebug.timestampHash[i], percent: 0
            };
        }
        report['total'] = { time: total, percent: 100 };
        for (i = 0; i <= layoutDebug.codeRegions.LAST; ++i) {
            report[layoutDebug.codeRegionStrings[i]].percent =
                Math.round((report[layoutDebug.codeRegionStrings[i]].time * 100) / report.total.time);
        }
        console.log(JSON.stringify(report, null, ' '));
    }
    static flagSet(value) {
        return layoutDebug.mask & value;
    }
    static clearAll() {
        layoutDebug.mask = 0;
    }
    static setAll() {
        layoutDebug.mask = 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256;
    }
    static setRenderFlags() {
        layoutDebug.mask = 1 + 2 + 4 + 8 + 16 + 32;
    }
    static clearDebugBoxes(value) {
        if (layoutDebug.flagSet(value)) {
            var selector = 'g.' + layoutDebug.classes[value];
            $(selector).remove();
        }
    }
    static debugBox(svg, box, flag) {
        if (!box) {
            return;
        }
        if (!box.height) {
            box.height = 1;
        }
        if (layoutDebug.flagSet(flag)) {
            _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.debugBox(svg, box, layoutDebug.classes[flag], 0);
        }
    }
    static setFlag(value) {
        var flag = layoutDebug.values[value];
        if (typeof (layoutDebug.mask) == 'undefined') {
            layoutDebug.mask = flag;
            return;
        }
        layoutDebug.mask |= flag;
        layoutDebug.setFlagDivs();
    }
    static setFlagDivs() {
        $('.scroll-box-debug').remove();
        $('.drag-debug').remove();
        $('.mouse-debug').remove();
        $('.play-debug').remove();
        if (layoutDebug.mask & layoutDebug.values.scroll) {
            const dbgDiv = $('<div class="scroll-box-debug"/>');
            $('body').append(dbgDiv);
        }
        if (layoutDebug.mask & layoutDebug.values.mouseDebug) {
            const dbgDiv = $('<div class="mouse-debug"/>');
            $('body').append(dbgDiv);
        }
        if (layoutDebug.mask & layoutDebug.values.dragDebug) {
            const dbgDiv = $('<div class="drag-debug"/>');
            $('body').append(dbgDiv);
        }
        if (layoutDebug.mask & layoutDebug.values.play) {
            const dbgDiv = $('<div class="play-debug"/>');
            $('body').append(dbgDiv);
        }
    }
    static updateScrollDebug(point) {
        const displayString = 'X: ' + point.x + ' Y: ' + point.y;
        $('.scroll-box-debug').text(displayString);
        $('.scroll-box-debug').css('left', '2%').css('top', '20px');
    }
    static updateMouseDebug(client, logical, offset) {
        const displayString = `clientX: ${client.x} clientY: ${client.y} svg: (${logical.x},${logical.y}) offset (${offset.x}, ${offset.y})`;
        $('.mouse-debug').text(displayString);
        $('.mouse-debug').css('left', '2%').css('top', '60px').css('position', 'absolute').css('font-size', '11px');
    }
    static updateDragDebug(client, logical, state) {
        const displayString = `clientX: ${client.x} clientY: ${client.y} svg: (${logical.x},${logical.y}) state ${state})`;
        $('.drag-debug').text(displayString);
        $('.drag-debug').css('left', '2%').css('top', '80px').css('position', 'absolute').css('font-size', '11px');
    }
    static updatePlayDebug(selector, logical) {
        const displayString = `mm: ${selector.measure} tick: ${selector.tick} svg: (${logical.x},${logical.y}, ${logical.width}, ${logical.height})`;
        $('.play-debug').text(displayString);
        $('.play-debug').css('left', '2%').css('top', '100px').css('position', 'absolute').css('font-size', '11px');
    }
    static addTextDebug(value) {
        layoutDebug._textDebug.push(value);
        console.log(value);
    }
    static addDialogDebug(value) {
        layoutDebug._dialogEvents.push(value);
        console.log(value);
    }
    static measureHistory(measure, oldVal, newVal, description) {
        if (layoutDebug.flagSet(layoutDebug.values.measureHistory)) {
            var oldExp = (typeof (measure.svg[oldVal]) == 'object') ?
                JSON.stringify(measure.svg[oldVal]).replace(/"/g, '') : measure.svg[oldVal];
            var newExp = (typeof (newVal) == 'object') ? JSON.stringify(newVal).replace(/"/g, '') : newVal;
            measure.svg.history.push(oldVal + ': ' + oldExp + '=> ' + newExp + ' ' + description);
        }
    }
}
layoutDebug.mask = 0;
layoutDebug._textDebug = [];
layoutDebug.timestampHash = {};
layoutDebug._dialogEvents = [];


/***/ }),

/***/ "./src/render/sui/mapper.ts":
/*!**********************************!*\
  !*** ./src/render/sui/mapper.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiMapper: () => (/* binding */ SuiMapper)
/* harmony export */ });
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _svgPageMap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./svgPageMap */ "./src/render/sui/svgPageMap.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.





/**
 * Map the notes in the svg so they can respond to events and interact
 * with the mouse/keyboard
 * @category SuiRender
 */
class SuiMapper {
    constructor(renderer, scroller, pasteBuffer) {
        // measure to selector map
        this.measureNoteMap = {};
        // notes currently selected.  Something is always selected
        // modifiers (text etc.) that have been selected
        this.modifierSelections = [];
        this.selections = [];
        // The list of modifiers near the current selection
        this.localModifiers = [];
        this.modifierIndex = -1;
        this.modifierSuggestion = null;
        this.pitchIndex = -1;
        // By default, defer highlights for performance.
        this.deferHighlightMode = true;
        this.suggestion = null;
        this.mouseHintBox = null;
        this.selectionRects = {};
        this.outlines = {};
        this.mapping = false;
        // renderer renders the music when it changes
        this.renderer = renderer;
        this.scroller = scroller;
        this.modifierIndex = -1;
        this.localModifiers = [];
        // index if a single pitch of a chord is selected
        this.pitchIndex = -1;
        // the current selection, which is also the copy/paste destination
        this.pasteBuffer = pasteBuffer;
        this.highlightQueue = { selectionCount: 0, deferred: false };
    }
    updateHighlight() {
        const self = this;
        if (this.selections.length === 0) {
            this.highlightQueue.deferred = false;
            this.highlightQueue.selectionCount = 0;
            return;
        }
        if (this.highlightQueue.selectionCount === this.selections.length) {
            this.highlightSelection();
            this.highlightQueue.deferred = false;
        }
        else {
            this.highlightQueue.selectionCount = this.selections.length;
            setTimeout(() => {
                self.updateHighlight();
            }, 50);
        }
    }
    deferHighlight() {
        if (!this.deferHighlightMode) {
            this.highlightSelection();
        }
        const self = this;
        if (!this.highlightQueue.deferred) {
            this.highlightQueue.deferred = true;
            setTimeout(() => {
                self.updateHighlight();
            }, 50);
        }
    }
    _createLocalModifiersList() {
        this.localModifiers = [];
        let index = 0;
        this.selections.forEach((sel) => {
            var _a, _b;
            (_a = sel.note) === null || _a === void 0 ? void 0 : _a.getGraceNotes().forEach((gg) => {
                var _a;
                this.localModifiers.push({ index, selection: sel, modifier: gg, box: (_a = gg.logicalBox) !== null && _a !== void 0 ? _a : _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default });
                index += 1;
            });
            (_b = sel.note) === null || _b === void 0 ? void 0 : _b.getModifiers('SmoDynamicText').forEach((dyn) => {
                var _a;
                this.localModifiers.push({ index, selection: sel, modifier: dyn, box: (_a = dyn.logicalBox) !== null && _a !== void 0 ? _a : _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default });
                index += 1;
            });
            sel.measure.getModifiersByType('SmoVolta').forEach((volta) => {
                var _a;
                this.localModifiers.push({ index, selection: sel, modifier: volta, box: (_a = volta.logicalBox) !== null && _a !== void 0 ? _a : _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default });
                index += 1;
            });
            sel.measure.getModifiersByType('SmoTempoText').forEach((tempo) => {
                var _a;
                this.localModifiers.push({ index, selection: sel, modifier: tempo, box: (_a = tempo.logicalBox) !== null && _a !== void 0 ? _a : _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default });
                index += 1;
            });
            sel.staff.getModifiers().forEach((mod) => {
                if (_smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.gteq(sel.selector, mod.startSelector) &&
                    _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.lteq(sel.selector, mod.endSelector) && mod.logicalBox) {
                    const exists = this.localModifiers.find((mm) => mm.modifier.ctor === mod.ctor);
                    if (!exists) {
                        this.localModifiers.push({ index, selection: sel, modifier: mod, box: mod.logicalBox });
                        index += 1;
                    }
                }
            });
        });
    }
    /**
     * When a modifier is selected graphically, update the selection list
     * and create a local modifier list
     * @param modifierTabs
     */
    createLocalModifiersFromModifierTabs(modifierTabs) {
        const selections = [];
        const modMap = {};
        modifierTabs.forEach((mt) => {
            if (mt.selection) {
                const key = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.getNoteKey(mt.selection.selector);
                if (!modMap[key]) {
                    selections.push(mt.selection);
                    modMap[key] = true;
                }
            }
        });
        if (selections.length) {
            this.selections = selections;
            this._createLocalModifiersList();
            this.deferHighlight();
        }
    }
    // used by remove dialogs to clear removed thing
    clearModifierSelections() {
        this.modifierSelections = [];
        this._createLocalModifiersList();
        this.modifierIndex = -1;
        if (this.outlines['staffModifier'] && this.outlines['staffModifier'].element) {
            this.outlines['staffModifier'].element.remove();
            this.outlines['staffModifier'].element = undefined;
        }
        // this.eraseRect('staffModifier');  not sure where this should go
    }
    // ### loadScore
    // We are loading a new score.  clear the maps so we can rebuild them after
    // rendering
    loadScore() {
        this.measureNoteMap = {};
        this.clearModifierSelections();
        this.selections = [];
        this.highlightQueue = { selectionCount: 0, deferred: false };
    }
    // ### _clearMeasureArtifacts
    // clear the measure from the measure and note maps so we can rebuild it.
    clearMeasureMap(measure) {
        const selector = { staff: measure.measureNumber.staffId, measure: measure.measureNumber.measureIndex, voice: 0, tick: 0, pitches: [] };
        // Unselect selections in this measure so we can reselect them when re-tracked
        const ar = [];
        this.selections.forEach((selection) => {
            if (selection.selector.staff !== selector.staff || selection.selector.measure !== selector.measure) {
                ar.push(selection);
            }
        });
        this.selections = ar;
    }
    _copySelectionsByMeasure(staffIndex, measureIndex) {
        const rv = this.selections.filter((sel) => sel.selector.staff === staffIndex && sel.selector.measure === measureIndex);
        const ticks = rv.length < 1 ? 0 : rv.map((sel) => sel.note.tickCount).reduce((a, b) => a + b);
        const selectors = [];
        rv.forEach((sel) => {
            const nsel = JSON.parse(JSON.stringify(sel.selector));
            if (!nsel.pitches) {
                nsel.pitches = [];
            }
            selectors.push(nsel);
        });
        return { ticks, selectors };
    }
    deleteMeasure(selection) {
        const selCopy = this._copySelectionsByMeasure(selection.selector.staff, selection.selector.measure)
            .selectors;
        this.clearMeasureMap(selection.measure);
        if (selCopy.length) {
            selCopy.forEach((selector) => {
                const nsel = JSON.parse(JSON.stringify(selector));
                if (selector.measure === 0) {
                    nsel.measure += 1;
                }
                else {
                    nsel.measure -= 1;
                }
                this.selections.push(this._getClosestTick(nsel));
            });
        }
    }
    _updateNoteModifier(selection, modMap, modifier, ix) {
        if (!modMap[modifier.attrs.id] && modifier.logicalBox) {
            this.renderer.pageMap.addModifierTab({
                modifier,
                selection,
                box: modifier.logicalBox,
                index: ix
            });
            ix += 1;
            const context = this.renderer.pageMap.getRendererFromModifier(modifier);
            modMap[modifier.attrs.id] = true;
        }
        return ix;
    }
    _updateModifiers() {
        let ix = 0;
        const modMap = {};
        if (!this.renderer.score) {
            return;
        }
        this.renderer.score.textGroups.forEach((modifier) => {
            if (!modMap[modifier.attrs.id] && modifier.logicalBox) {
                this.renderer.pageMap.addModifierTab({
                    modifier,
                    selection: null,
                    box: modifier.logicalBox,
                    index: ix
                });
                ix += 1;
            }
        });
        const keys = Object.keys(this.measureNoteMap);
        keys.forEach((selKey) => {
            var _a, _b;
            const selection = this.measureNoteMap[selKey];
            selection.staff.renderableModifiers.forEach((modifier) => {
                if (_smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.contains(selection.selector, modifier.startSelector, modifier.endSelector)) {
                    if (!modMap[modifier.attrs.id]) {
                        if (modifier.logicalBox) {
                            this.renderer.pageMap.addModifierTab({
                                modifier,
                                selection,
                                box: modifier.logicalBox,
                                index: ix
                            });
                            ix += 1;
                            modMap[modifier.attrs.id] = true;
                        }
                    }
                }
            });
            selection.measure.modifiers.forEach((modifier) => {
                if (modifier.attrs.id
                    && !modMap[modifier.attrs.id]
                    && modifier.logicalBox) {
                    this.renderer.pageMap.addModifierTab({
                        modifier,
                        selection,
                        box: _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(modifier.logicalBox),
                        index: ix
                    });
                    ix += 1;
                    modMap[modifier.attrs.id] = true;
                }
            });
            (_a = selection.note) === null || _a === void 0 ? void 0 : _a.textModifiers.forEach((modifier) => {
                if (modifier.logicalBox) {
                    ix = this._updateNoteModifier(selection, modMap, modifier, ix);
                }
            });
            (_b = selection.note) === null || _b === void 0 ? void 0 : _b.graceNotes.forEach((modifier) => {
                ix = this._updateNoteModifier(selection, modMap, modifier, ix);
            });
        });
    }
    // ### _getClosestTick
    // given a musical selector, find the note artifact that is closest to it,
    // if an exact match is not available
    _getClosestTick(selector) {
        let tickKey = '';
        const measureKey = Object.keys(this.measureNoteMap).find((k) => _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.sameMeasure(this.measureNoteMap[k].selector, selector)
            && this.measureNoteMap[k].selector.tick === 0);
        tickKey = Object.keys(this.measureNoteMap).find((k) => _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.sameNote(this.measureNoteMap[k].selector, selector));
        const firstObj = this.measureNoteMap[Object.keys(this.measureNoteMap)[0]];
        if (tickKey) {
            return this.measureNoteMap[tickKey];
        }
        if (measureKey) {
            return this.measureNoteMap[measureKey];
        }
        return firstObj;
    }
    // ### _setModifierBoxes
    // Create the DOM modifiers for the lyrics and other modifiers
    _setModifierBoxes(measure) {
        const context = this.renderer.pageMap.getRenderer(measure.svg.logicalBox);
        measure.voices.forEach((voice) => {
            voice.notes.forEach((smoNote) => {
                if (context) {
                    const el = context.svg.getElementById(smoNote.renderId);
                    if (el) {
                        _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.updateArtifactBox(context, el, smoNote);
                        // TODO: fix this, only works on the first line.
                        smoNote.getModifiers('SmoLyric').forEach((lyrict) => {
                            const lyric = lyrict;
                            if (lyric.getText().length || lyric.isHyphenated()) {
                                const lyricElement = context.svg.getElementById('vf-' + lyric.attrs.id);
                                if (lyricElement) {
                                    _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.updateArtifactBox(context, lyricElement, lyric);
                                }
                            }
                        });
                    }
                    smoNote.graceNotes.forEach((g) => {
                        if (g.element) {
                        }
                        var gel = context.svg.getElementById('vf-' + g.renderId);
                        _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.updateArtifactBox(context, gel, g);
                    });
                    smoNote.textModifiers.forEach((modifier) => {
                        if (modifier.logicalBox && modifier.element) {
                            _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.updateArtifactBox(context, modifier.element, modifier);
                        }
                    });
                }
            });
        });
    }
    /**
     * returns true of the selections are adjacent
     * @param s1 a selections
     * @param s2 another election
     * @returns
     */
    isAdjacentSelection(s1, s2) {
        if (!this.renderer.score) {
            return false;
        }
        const nextSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.advanceTicks(this.renderer.score, s1, 1);
        if (!nextSel) {
            return false;
        }
        return _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.eq(nextSel.selector, s2.selector);
    }
    areSelectionsAdjacent() {
        let selectionIx = 0;
        for (selectionIx = 0; this.selections.length > 1 && selectionIx < this.selections.length - 1; ++selectionIx) {
            if (!this.isAdjacentSelection(this.selections[selectionIx], this.selections[selectionIx + 1])) {
                return false;
            }
        }
        return true;
    }
    // ### updateMeasure
    // A measure has changed.  Update the music geometry for it
    mapMeasure(staff, measure, printing) {
        let voiceIx = 0;
        let selectedTicks = 0;
        // We try to restore block selections. If all the selections in this block are not adjacent, only restore individual selections
        // if possible
        let adjacentSels = this.areSelectionsAdjacent();
        const lastResortSelection = [];
        let selectionChanged = false;
        let vix = 0;
        let replacedSelectors = 0;
        if (!measure.svg.logicalBox) {
            return;
        }
        this._setModifierBoxes(measure);
        const timestamp = new Date().valueOf();
        // Keep track of any current selections in this measure, we will try to restore them.
        const sels = this._copySelectionsByMeasure(staff.staffId, measure.measureNumber.measureIndex);
        this.clearMeasureMap(measure);
        if (sels.selectors.length) {
            vix = sels.selectors[0].voice;
        }
        sels.selectors.forEach((sel) => {
            sel.voice = vix;
        });
        measure.voices.forEach((voice) => {
            let tick = 0;
            voice.notes.forEach((note) => {
                const selector = {
                    staff: staff.staffId,
                    measure: measure.measureNumber.measureIndex,
                    voice: voiceIx,
                    tick,
                    pitches: []
                };
                if (typeof (note.logicalBox) === 'undefined') {
                    console.warn('note has no box');
                }
                // create a selection for the newly rendered note
                const selection = new _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection({
                    selector,
                    _staff: staff,
                    _measure: measure,
                    _note: note,
                    _pitches: [],
                    box: _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(_svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(note.logicalBox)),
                    type: 'rendered'
                });
                // and add it to the map
                this._updateMeasureNoteMap(selection, printing);
                // If this note is the same location as something that was selected, reselect it
                if (replacedSelectors < sels.selectors.length && selection.selector.tick === sels.selectors[replacedSelectors].tick &&
                    selection.selector.voice === vix) {
                    this.selections.push(selection);
                    // Reselect any pitches.
                    if (sels.selectors[replacedSelectors].pitches.length > 0) {
                        sels.selectors[replacedSelectors].pitches.forEach((pitchIx) => {
                            if (selection.note && selection.note.pitches.length > pitchIx) {
                                selection.selector.pitches.push(pitchIx);
                            }
                        });
                    }
                    const note = selection.note;
                    selectedTicks += note.tickCount;
                    replacedSelectors += 1;
                    selectionChanged = true;
                }
                else if (adjacentSels && selectedTicks > 0 && selectedTicks < sels.ticks && selection.selector.voice === vix) {
                    // try to select the same length of music as was previously selected.  So a 1/4 to 2 1/8, both
                    // are selected
                    replacedSelectors += 1;
                    this.selections.push(selection);
                    selectedTicks += note.tickCount;
                }
                else if (this.selections.length === 0 && sels.selectors.length === 0 && lastResortSelection.length === 0) {
                    lastResortSelection.push(selection);
                }
                tick += 1;
            });
            voiceIx += 1;
        });
        // We deleted all the notes that were selected, select something else
        if (this.selections.length === 0) {
            selectionChanged = true;
            this.selections = lastResortSelection;
        }
        // If there were selections on this measure, highlight them.
        if (selectionChanged) {
            this.deferHighlight();
        }
        _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.MAP, new Date().valueOf() - timestamp);
    }
    _getTicksFromSelections() {
        let rv = 0;
        this.selections.forEach((sel) => {
            if (sel.note) {
                rv += sel.note.tickCount;
            }
        });
        return rv;
    }
    _copySelections() {
        const rv = [];
        this.selections.forEach((sel) => {
            rv.push(sel.selector);
        });
        return rv;
    }
    // ### getExtremeSelection
    // Get the rightmost (1) or leftmost (-1) selection
    getExtremeSelection(sign) {
        let i = 0;
        let rv = this.selections[0];
        for (i = 1; i < this.selections.length; ++i) {
            const sa = this.selections[i].selector;
            if (sa.measure * sign > rv.selector.measure * sign) {
                rv = this.selections[i];
            }
            else if (sa.measure === rv.selector.measure && sa.tick * sign > rv.selector.tick * sign) {
                rv = this.selections[i];
            }
        }
        return rv;
    }
    _selectClosest(selector) {
        var artifact = this._getClosestTick(selector);
        if (!artifact) {
            return;
        }
        if (this.selections.find((sel) => JSON.stringify(sel.selector)
            === JSON.stringify(artifact.selector))) {
            return;
        }
        const note = artifact.note;
        if (selector.pitches && selector.pitches.length && selector.pitches.length <= note.pitches.length) {
            // If the old selection had only a single pitch, try to recreate that.
            artifact.selector.pitches = JSON.parse(JSON.stringify(selector.pitches));
        }
        this.selections.push(artifact);
    }
    // ### updateMap
    // This should be called after rendering the score.  It updates the score to
    // graphics map and selects the first object.
    updateMap() {
        var _a;
        const ts = new Date().valueOf();
        this.mapping = true;
        let tickSelected = 0;
        const selCopy = this._copySelections();
        const ticksSelectedCopy = this._getTicksFromSelections();
        const firstSelection = this.getExtremeSelection(-1);
        this._updateModifiers();
        // Try to restore selection.  If there were none, just select the fist
        // thing in the score
        const firstKey = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.getNoteKey(_smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.default);
        if (!selCopy.length && this.renderer.score) {
            // If there is nothing rendered, don't update tracker
            if (typeof (this.measureNoteMap[firstKey]) !== 'undefined' && !firstSelection)
                this.selections = [this.measureNoteMap[firstKey]];
        }
        else if (this.areSelectionsAdjacent() && this.selections.length > 1) {
            // If there are adjacent selections, restore selections to the ticks that are in the score now
            if (!firstSelection) {
                _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.UPDATE_MAP, new Date().valueOf() - ts);
                return;
            }
            this.selections = [];
            this._selectClosest(firstSelection.selector);
            const first = this.selections[0];
            tickSelected = (_a = first.note.tickCount) !== null && _a !== void 0 ? _a : 0;
            while (tickSelected < ticksSelectedCopy && first) {
                let delta = this._growSelectionRight(true);
                if (!delta) {
                    break;
                }
                tickSelected += delta;
            }
        }
        this.deferHighlight();
        this._createLocalModifiersList();
        this.mapping = false;
        _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.UPDATE_MAP, new Date().valueOf() - ts);
    }
    createMousePositionBox(logicalBox) {
        const pageMap = this.renderer.pageMap;
        const page = pageMap.getRendererFromPoint(logicalBox);
        if (page) {
            const cof = (pageMap.zoomScale * pageMap.renderScale);
            const debugBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(logicalBox);
            debugBox.y -= (page.box.y + 5 / cof);
            debugBox.x -= (page.box.x + 5 / cof);
            debugBox.width = 10 / cof;
            debugBox.height = 10 / cof;
            if (!this.mouseHintBox) {
                this.mouseHintBox = {
                    stroke: _svgPageMap__WEBPACK_IMPORTED_MODULE_4__.SvgPageMap.strokes['debug-mouse-box'],
                    classes: 'hide-print',
                    box: debugBox,
                    scroll: { x: 0, y: 0 },
                    context: page,
                    timeOff: 1000
                };
            }
            this.mouseHintBox.context = page;
            this.mouseHintBox.box = debugBox;
            _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.outlineRect(this.mouseHintBox);
        }
    }
    eraseMousePositionBox() {
        if (this.mouseHintBox && this.mouseHintBox.element) {
            this.mouseHintBox.element.remove();
            this.mouseHintBox.element = undefined;
        }
    }
    /**
     * Find any musical elements at the supplied screen coordinates and set them as the selection
     * @param bb
     * @returns
     */
    intersectingArtifact(bb) {
        const scrollState = this.scroller.scrollState;
        bb = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.boxPoints(bb.x + scrollState.x, bb.y + scrollState.y, bb.width ? bb.width : 1, bb.height ? bb.height : 1);
        const logicalBox = this.renderer.pageMap.clientToSvg(bb);
        const { selections, page } = this.renderer.pageMap.findArtifact(logicalBox);
        if (page) {
            const artifacts = selections;
            // const artifacts = SvgHelpers.findIntersectingArtifactFromMap(bb, this.measureNoteMap, SvgHelpers.smoBox(this.scroller.scrollState.scroll));
            // TODO: handle overlapping suggestions
            if (!artifacts.length) {
                const sel = this.renderer.pageMap.findModifierTabs(logicalBox);
                if (sel.length) {
                    this._setModifierAsSuggestion(sel[0]);
                    this.eraseMousePositionBox();
                }
                else {
                    // no intersection, show mouse hint          
                    this.createMousePositionBox(logicalBox);
                }
                return;
            }
            const artifact = artifacts[0];
            this.eraseMousePositionBox();
            this._setArtifactAsSuggestion(artifact);
        }
    }
    _getRectangleChain(selection) {
        const rv = [];
        if (!selection.note) {
            return rv;
        }
        rv.push(selection.measure.svg.pageIndex);
        rv.push(selection.measure.svg.lineIndex);
        rv.push(selection.measure.measureNumber.measureIndex);
        return rv;
    }
    _updateMeasureNoteMap(artifact, printing) {
        const note = artifact.note;
        const noteKey = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.getNoteKey(artifact.selector);
        const activeVoice = artifact.measure.getActiveVoice();
        // not has not been drawn yet.
        if ((!artifact.box) || (!artifact.measure.svg.logicalBox)) {
            return;
        }
        this.measureNoteMap[noteKey] = artifact;
        this.renderer.pageMap.addArtifact(artifact);
        artifact.scrollBox = { x: artifact.box.x,
            y: artifact.measure.svg.logicalBox.y };
    }
}


/***/ }),

/***/ "./src/render/sui/piano.ts":
/*!*********************************!*\
  !*** ./src/render/sui/piano.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiPiano: () => (/* binding */ SuiPiano)
/* harmony export */ });
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


class SuiPiano {
    constructor(view) {
        this.octaveOffset = 0;
        this.chordPedal = false;
        this.objects = [];
        this.suggestFadeTimer = null;
        this.elementId = 'piano-svg';
        this.renderElement = document.getElementById(this.elementId);
        this.view = view;
        this.render();
    }
    static get dimensions() {
        return {
            wwidth: 23,
            bwidth: 13,
            wheight: 120,
            bheight: 80,
            octaves: 1
        };
    }
    // 7 white keys per octave
    static get wkeysPerOctave() {
        return 7;
    }
    static get owidth() {
        return SuiPiano.dimensions.wwidth * SuiPiano.wkeysPerOctave;
    }
    static createAndDisplay() {
        // Called by ribbon button.
        $('body').trigger('show-piano-event');
        $('body').trigger('forceScrollEvent');
    }
    _mapKeys() {
        this.objects = [];
        var keys = [].slice.call(this.renderElement.getElementsByClassName('piano-key'));
        keys.forEach((key) => {
            var rect = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox(key.getBoundingClientRect());
            var id = key.getAttributeNS('', 'id');
            var artifact = {
                keyElement: key,
                box: rect,
                id: id
            };
            this.objects.push(artifact);
        });
    }
    _removeClass(classes) {
        Array.from(this.renderElement.getElementsByClassName('piano-key')).forEach((el) => {
            $(el).removeClass(classes);
        });
    }
    _removeGlow() {
        this._removeClass('glow-key');
    }
    _fadeGlow(el) {
        if (this.suggestFadeTimer) {
            clearTimeout(this.suggestFadeTimer);
        }
        // Make selection fade if there is a selection.
        this.suggestFadeTimer = setTimeout(() => {
            $(el).removeClass('glow-key');
        }, 1000);
    }
    bind() {
        // The menu option to toggle piano state
        $('body').off('show-piano-event').on('show-piano-event', () => {
            const isVisible = $('body').hasClass('show-piano');
            $('body').toggleClass('show-piano');
            this._mapKeys();
        });
        $('#piano-8va-button').off('click').on('click', (ev) => {
            $('#piano-8vb-button').removeClass('activated');
            if (this.octaveOffset === 0) {
                $(ev.currentTarget).addClass('activated');
                this.octaveOffset = 1;
            }
            else {
                $(ev.currentTarget).removeClass('activated');
                this.octaveOffset = 0;
            }
        });
        $('#piano-8vb-button').off('click').on('click', (ev) => {
            $('#piano-8va-button').removeClass('activated');
            if (this.octaveOffset === 0) {
                $(ev.currentTarget).addClass('activated');
                this.octaveOffset = -1;
            }
            else {
                $(ev.currentTarget).removeClass('activated');
                this.octaveOffset = 0;
            }
        });
        $('#piano-xpose-up').off('click').on('click', () => {
            this.view.transposeSelections(1);
        });
        $('#piano-xpose-down').off('click').on('click', () => {
            this.view.transposeSelections(-1);
        });
        $('#piano-enharmonic').off('click').on('click', () => {
            this.view.toggleEnharmonic();
        });
        $('button.jsLeft').off('click').on('click', () => {
            this.view.tracker.moveSelectionLeft();
        });
        $('button.jsRight').off('click').on('click', () => {
            this.view.tracker.moveSelectionRight(this.view.score, null, false);
        });
        $('button.jsGrowDuration').off('click').on('click', () => {
            this.view.batchDurationOperation('doubleDuration');
        });
        $('button.jsGrowDot').off('click').on('click', () => {
            this.view.batchDurationOperation('dotDuration');
        });
        $('button.jsShrinkDuration').off('click').on('click', () => {
            this.view.batchDurationOperation('halveDuration');
        });
        $('button.jsShrinkDot').off('click').on('click', () => {
            this.view.batchDurationOperation('undotDuration');
        });
        $('button.jsChord').off('click').on('click', (ev) => {
            $(ev.currentTarget).toggleClass('activated');
            this.chordPedal = !this.chordPedal;
        });
        $(this.renderElement).off('mousemove').on('mousemove', (ev) => {
            if (Math.abs(this.objects[0].box.x - this.objects[0].keyElement.getBoundingClientRect().x)
                > this.objects[0].box.width / 2) {
                console.log('remap piano');
                this._mapKeys();
            }
            if (!this.renderElement) {
                return;
            }
            const clientBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox(_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(ev.clientX, ev.clientY, 1, 1)); // last param is scroll offset
            var keyPressed = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.findSmallestIntersection(clientBox, this.objects);
            if (!keyPressed) {
                return;
            }
            const el = this.renderElement.getElementById(keyPressed.keyElement.id);
            if ($(el).hasClass('glow-key')) {
                return;
            }
            this._removeGlow();
            $(el).addClass('glow-key');
            this._fadeGlow(el);
        });
        $(this.renderElement).off('blur').on('blur', () => {
            this._removeGlow();
        });
        $(this.renderElement).off('click').on('click', (ev) => {
            this._updateSelections(ev);
        });
        // the close button on piano itself
        $('.close-piano').off('click').on('click', () => {
            this.view.score.preferences.showPiano = false;
            this.view.updateScorePreferences(this.view.score.preferences);
        });
    }
    static hidePiano() {
        if ($('body').hasClass('show-piano')) {
            $('body').removeClass('show-piano');
        }
    }
    static showPiano() {
        if ($('body').hasClass('show-piano') === false) {
            $('body').addClass('show-piano');
            // resize the work area.
            // $('body').trigger('forceResizeEvent');
        }
    }
    static get isShowing() {
        return $('body').hasClass('show-piano');
    }
    _updateSelections(ev) {
        // fake a scroller (piano scroller w/b cool tho...)
        if (!this.renderElement) {
            return;
        }
        const logicalBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox({ x: ev.clientX, y: ev.clientY });
        var keyPressed = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.findSmallestIntersection(logicalBox, this.objects);
        if (!keyPressed) {
            return;
        }
        if (!ev.shiftKey && !this.chordPedal) {
            this._removeClass('glow-key pressed-key');
        }
        else {
            var el = this.renderElement.getElementById(keyPressed.keyElement.id);
            $(el).addClass('pressed-key');
        }
        const key = keyPressed.keyElement.id.substr(6, keyPressed.keyElement.id.length - 6);
        const pitch = {
            letter: key[0].toLowerCase(),
            octave: this.octaveOffset,
            accidental: key.length > 1 ? key[1] : 'n'
        };
        this.view.setPitchPiano(pitch, this.chordPedal);
    }
    _renderControls() {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.buildDom;
        var r = b('button').classes('icon icon-cross close close-piano');
        $('.piano-container .key-right-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsGrowDuration').append(b('span').classes('icon icon-duration_grow'));
        $('.piano-container .key-right-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsShrinkDuration').append(b('span').classes('icon icon-duration_less'));
        $('.piano-container .key-right-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsGrowDot').append(b('span').classes('icon icon-duration_grow_dot'));
        $('.piano-container .key-right-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsShrinkDot').append(b('span').classes('icon icon-duration_less_dot'));
        $('.piano-container .key-right-ctrl').append(r.dom());
        r = b('button').classes('key-ctrl jsLeft').append(b('span').classes('icon icon-arrow-left'));
        $('.piano-container .piano-keys').prepend(r.dom());
        r = b('button').classes('key-ctrl jsRight').append(b('span').classes('icon icon-arrow-right'));
        $('.piano-container .piano-keys').append(r.dom());
        r = b('button').classes('piano-ctrl').attr('id', 'piano-8va-button').append(b('span').classes('bold-italic').text('8')).append(b('sup').classes('italic').text('va'));
        $('.piano-container .key-left-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl ').attr('id', 'piano-8vb-button').append(b('span').classes('bold-italic').text('8')).append(b('sup').classes('italic').text('vb'));
        $('.piano-container .key-left-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsXposeUp').attr('id', 'piano-xpose-up').append(b('span').classes('bold').text('+'));
        $('.piano-container .key-left-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsXposeDown').attr('id', 'piano-xpose-down').append(b('span').classes('bold').text('-'));
        $('.piano-container .key-left-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsEnharmonic').attr('id', 'piano-enharmonic').append(b('span').classes('bold icon icon-accident'));
        $('.piano-container .key-left-ctrl').append(r.dom());
        r = b('button').classes('piano-ctrl jsChord')
            .append(b('span').classes('icon icon-chords'));
        $('.piano-container .key-left-ctrl').append(r.dom());
    }
    handleResize() {
        this._mapKeys();
    }
    playNote() {
    }
    render() {
        $('body').addClass('show-piano');
        var b = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgBuilder.b;
        var d = SuiPiano.dimensions;
        // https://www.mathpages.com/home/kmath043.htm
        // Width of white key at back for C,D,E
        var b1off = d.wwidth - (d.bwidth * 2 / 3);
        // Width of other white keys at the back.
        var b2off = d.wwidth - (d.bwidth * 3) / 4;
        var xwhite = [{
                note: 'C',
                x: 0
            }, {
                note: 'D',
                x: d.wwidth
            }, {
                note: 'E',
                x: 2 * d.wwidth
            }, {
                note: 'F',
                x: 3 * d.wwidth
            }, {
                note: 'G',
                x: 4 * d.wwidth
            }, {
                note: 'A',
                x: 5 * d.wwidth
            }, {
                note: 'B',
                x: 6 * d.wwidth
            }
        ];
        var xblack = [{
                note: 'Db',
                x: b1off
            }, {
                note: 'Eb',
                x: 2 * b1off + d.bwidth
            }, {
                note: 'Gb',
                x: 3 * d.wwidth + b2off
            }, {
                note: 'Ab',
                x: (3 * d.wwidth + b2off) + b2off + d.bwidth
            }, {
                note: 'Bb',
                x: SuiPiano.owidth - (b2off + d.bwidth)
            }
        ];
        var wwidth = d.wwidth;
        var bwidth = d.bwidth;
        var wheight = d.wheight;
        var bheight = d.bheight;
        var owidth = SuiPiano.wkeysPerOctave * wwidth;
        // Start on C2 to C6 to reduce space
        var octaveOff = 7 - d.octaves;
        var x = 0;
        var y = 0;
        var r = b('g');
        for (var i = 0; i < d.octaves; ++i) {
            x = i * owidth;
            xwhite.forEach((key) => {
                var nt = key.note;
                var classes = 'piano-key white-key';
                if (nt == 'C4') {
                    classes += ' middle-c';
                }
                var rect = b('rect').attr('id', 'keyId-' + nt).rect(x + key.x, y, wwidth, wheight, classes);
                r.append(rect);
                var tt = b('text').text(x + key.x + (wwidth / 5), bheight + 16, 'note-text', nt);
                r.append(tt);
            });
            xblack.forEach((key) => {
                var nt = key.note;
                var classes = 'piano-key black-key';
                var rect = b('rect').attr('id', 'keyId-' + nt).attr('fill', 'url(#piano-grad)').rect(x + key.x, 0, bwidth, bheight, classes);
                r.append(rect);
            });
        }
        var el = document.getElementById(this.elementId);
        _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.gradient(el, 'piano-grad', 'vertical', [{ color: '#000', offset: '0%', opacity: 1 },
            { color: '#777', offset: '50%', opacity: 1 }, { color: '#ddd', offset: '100%', opacity: 1 }]);
        el.appendChild(r.dom());
        this._renderControls();
        this._mapKeys();
        this.bind();
    }
}


/***/ }),

/***/ "./src/render/sui/renderState.ts":
/*!***************************************!*\
  !*** ./src/render/sui/renderState.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiRenderState: () => (/* binding */ SuiRenderState),
/* harmony export */   scoreChangeEvent: () => (/* binding */ scoreChangeEvent)
/* harmony export */ });
/* harmony import */ var _smo_xform_undo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/xform/undo */ "./src/smo/xform/undo.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _scoreRender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scoreRender */ "./src/render/sui/scoreRender.ts");
/* harmony import */ var _ui_exceptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/exceptions */ "./src/ui/exceptions.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");






var scoreChangeEvent = 'smoScoreChangeEvent';
/**
 * Manage the state of the score rendering.  The score can be rendered either completely,
 * or partially for editing.  This class works with the RenderDemon to decide when to
 * render the score after it has been modified, and keeps track of what the current
 * render state is (dirty, etc.)
 * @category SuiRender
 * */
class SuiRenderState {
    constructor(config) {
        this.passState = SuiRenderState.passStates.initial;
        this._score = null;
        this._backupZoomScale = 0;
        this.idleLayoutTimer = 0; // how long the score has been idle
        this.handlingRedraw = false;
        // signal to render demon that we have suspended background
        // rendering because we are recording or playing actions.
        this.suspendRendering = false;
        this.undoStatus = 0;
        this.dirty = true;
        this.replaceQ = [];
        this.stateRepCount = 0;
        this.setPassState(SuiRenderState.passStates.initial, 'ctor');
        this.viewportChanged = false;
        this._resetViewport = false;
        this.measureMapper = null;
        this.renderer = new _scoreRender__WEBPACK_IMPORTED_MODULE_3__.SuiScoreRender(config);
        this.idleRedrawTime = config.config.idleRedrawTime;
        this.demonPollTime = config.config.demonPollTime;
        this.undoBuffer = config.undoBuffer;
    }
    get elementId() {
        return this.renderer.elementId;
    }
    get pageMap() {
        return this.renderer.vexContainers;
    }
    // ### setMeasureMapper
    // DI/notifier pattern.  The measure mapper/tracker is updated when the score is rendered
    // so the UI stays in sync with the location of elements in the score.
    setMeasureMapper(mapper) {
        this.measureMapper = mapper;
        this.renderer.measureMapper = mapper;
    }
    set stepMode(value) {
        this.suspendRendering = value;
        this.renderer.autoAdjustRenderTime = !value;
        if (this.measureMapper) {
            this.measureMapper.deferHighlightMode = !value;
        }
    }
    // ### createScoreRenderer
    // ### Description;
    // to get the score to appear, a div and a score object are required.  The layout takes care of creating the
    // svg element in the dom and interacting with the vex library.
    static createScoreRenderer(config, renderElement, score, undoBuffer) {
        const ctorObj = {
            config,
            elementId: renderElement,
            score,
            undoBuffer
        };
        const renderer = new SuiRenderState(ctorObj);
        return renderer;
    }
    static get passStates() {
        return { initial: 0, clean: 2, replace: 3 };
    }
    get renderElement() {
        return this.elementId;
    }
    notifyFontChange() {
        (0,_common_vex__WEBPACK_IMPORTED_MODULE_5__.setFontStack)(this.score.engravingFont);
    }
    addToReplaceQueue(selection) {
        if (this.passState === SuiRenderState.passStates.clean ||
            this.passState === SuiRenderState.passStates.replace) {
            if (Array.isArray(selection)) {
                this.replaceQ = this.replaceQ.concat(selection);
            }
            else {
                this.replaceQ.push(selection);
            }
            this.setDirty();
        }
    }
    setDirty() {
        if (!this.dirty) {
            this.dirty = true;
            if (this.passState === SuiRenderState.passStates.clean) {
                this.setPassState(SuiRenderState.passStates.replace, 'setDirty');
            }
        }
    }
    setRefresh() {
        this.dirty = true;
        this.setPassState(SuiRenderState.passStates.initial, 'setRefresh');
    }
    rerenderAll() {
        this.dirty = true;
        this.setPassState(SuiRenderState.passStates.initial, 'rerenderAll');
        this._resetViewport = true;
    }
    clearLine(measure) {
        const page = measure.svg.pageIndex;
        this.renderer.clearRenderedPage(page);
    }
    get renderStateClean() {
        return this.passState === SuiRenderState.passStates.clean && this.renderer.backgroundRender === false;
    }
    get renderStateRendered() {
        return (this.passState === SuiRenderState.passStates.clean && this.renderer.backgroundRender === false) ||
            (this.passState === SuiRenderState.passStates.replace && this.replaceQ.length === 0 && this.renderer.backgroundRender === false);
    }
    /**
     * Do a quick re-render of a measure that has changed, defer the whole score.
     * @returns
     */
    replaceMeasures() {
        const staffMap = {};
        if (this.score === null || this.measureMapper === null) {
            return;
        }
        this.replaceQ.forEach((change) => {
            this.renderer.replaceSelection(staffMap, change);
        });
        Object.keys(staffMap).forEach((key) => {
            const obj = staffMap[key];
            this.renderer.renderModifiers(obj.staff, obj.system);
            obj.system.renderEndings(this.measureMapper.scroller);
            obj.system.updateLyricOffsets();
        });
        this.replaceQ = [];
    }
    preserveScroll() {
        const scrollState = this.measureMapper.scroller.scrollState;
        return this.renderPromise().then(() => {
            this.measureMapper.scroller.restoreScrollState(scrollState);
        });
    }
    _renderStatePromise(condition) {
        const oldSuspend = this.suspendRendering;
        this.suspendRendering = false;
        const self = this;
        const endAction = () => {
            self.suspendRendering = oldSuspend;
        };
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.makePromise(condition, endAction, null, this.demonPollTime);
    }
    // ### renderPromise
    // return a promise that resolves when the score is in a fully rendered state.
    renderPromise() {
        return this._renderStatePromise(() => this.renderStateClean);
    }
    // ### renderPromise
    // return a promise that resolves when the score is in a fully rendered state.
    updatePromise() {
        this.replaceMeasures();
        return this._renderStatePromise(() => this.renderStateRendered);
    }
    handleRedrawTimer() {
        if (this.handlingRedraw) {
            return;
        }
        if (this.suspendRendering) {
            return;
        }
        this.handlingRedraw = true;
        const redrawTime = Math.max(this.renderer.renderTime, this.idleRedrawTime);
        // If there has been a change, redraw the score
        if (this.passState === SuiRenderState.passStates.initial) {
            this.dirty = true;
            this.undoStatus = this.undoBuffer.opCount;
            this.idleLayoutTimer = Date.now();
            // indicate the display is 'dirty' and we will be refreshing it.
            $('body').addClass('refresh-1');
            try {
                // Sort of a hack.  If the viewport changed, the scroll state is already reset
                // so we can't preserver the scroll state.
                if (!this.renderer.viewportChanged) {
                    this.preserveScroll();
                }
                this.render();
            }
            catch (ex) {
                console.error(ex);
                _ui_exceptions__WEBPACK_IMPORTED_MODULE_4__.SuiExceptionHandler.instance.exceptionHandler(ex);
                this.handlingRedraw = false;
            }
        }
        else if (this.passState === SuiRenderState.passStates.replace && this.undoStatus === this.undoBuffer.opCount) {
            // Consider navigation as activity when deciding to refresh
            this.idleLayoutTimer = Math.max(this.idleLayoutTimer, this.measureMapper.getIdleTime());
            $('body').addClass('refresh-1');
            // Do we need to refresh the score?
            if (this.renderer.backgroundRender === false && Date.now() - this.idleLayoutTimer > redrawTime) {
                this.passState = SuiRenderState.passStates.initial;
                if (!this.renderer.viewportChanged) {
                    this.preserveScroll();
                }
                this.render();
            }
        }
        else {
            this.idleLayoutTimer = Date.now();
            this.undoStatus = this.undoBuffer.opCount;
            if (this.replaceQ.length > 0) {
                this.render();
            }
        }
        this.handlingRedraw = false;
    }
    pollRedraw() {
        setTimeout(() => {
            this.handleRedrawTimer();
            this.pollRedraw();
        }, this.demonPollTime);
    }
    startDemon() {
        this.pollRedraw();
    }
    renderTextGroup(gg) {
        this.renderer.renderTextGroup(gg);
    }
    /**
     * Set the SVG viewport
     * @param reset whether to re-render the entire SVG DOM
     * @returns
     */
    setViewport() {
        if (!this.score || !this.renderer) {
            return;
        }
        this.renderer.setViewport();
        this.score.staves.forEach((staff) => {
            staff.measures.forEach((measure) => {
                if (measure.svg.logicalBox) {
                    measure.svg.history = ['reset'];
                }
            });
        });
    }
    renderForPrintPromise() {
        $('body').addClass('print-render');
        const self = this;
        if (!this.score) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
        }
        const layoutMgr = this.score.layoutManager;
        const layout = layoutMgr.getGlobalLayout();
        this._backupZoomScale = layout.zoomScale;
        layout.zoomScale = 1.0;
        layoutMgr.updateGlobalLayout(layout);
        this.setViewport();
        this.setRefresh();
        const promise = new Promise((resolve) => {
            const poll = () => {
                setTimeout(() => {
                    if (!self.dirty && !self.renderer.backgroundRender) {
                        // tracker.highlightSelection();
                        $('body').removeClass('print-render');
                        $('.vf-selection').remove();
                        $('body').addClass('printing');
                        $('.musicRelief').css('height', '');
                        resolve();
                    }
                    else {
                        poll();
                    }
                }, 500);
            };
            poll();
        });
        return promise;
    }
    restoreLayoutAfterPrint() {
        const layout = this.score.layoutManager.getGlobalLayout();
        layout.zoomScale = this._backupZoomScale;
        this.score.layoutManager.updateGlobalLayout(layout);
        this.setViewport();
        this.setRefresh();
    }
    setPassState(st, location) {
        const oldState = this.passState;
        let msg = '';
        if (oldState !== st) {
            this.stateRepCount = 0;
        }
        else {
            this.stateRepCount += 1;
        }
        msg = location + ': passState ' + this.passState + '=>' + st;
        if (this.stateRepCount > 0) {
            msg += ' (' + this.stateRepCount + ')';
        }
        console.log(msg);
        this.passState = st;
    }
    get score() {
        return this._score;
    }
    // used for debugging and drawing dots.
    dbgDrawDot(x, y, radius, startAngle, endAngle, counterclockwise) {
        const context = this.renderer.getRenderer({ x, y });
        if (context) {
            context.getContext().beginPath();
            context.getContext().arc(x, y, radius, startAngle, endAngle, counterclockwise);
            context.getContext().closePath();
            context.getContext().fill();
        }
    }
    set score(score) {
        if (score === null) {
            return;
        }
        /* if (this._score) {
          shouldReset = true;
        } */
        this.setPassState(SuiRenderState.passStates.initial, 'load score');
        const font = score.engravingFont;
        this.dirty = true;
        this._score = score;
        this.renderer.score = score;
        this.notifyFontChange();
        // if (shouldReset) {
        this.setViewport();
        if (this.measureMapper) {
            this.measureMapper.loadScore();
        }
    }
    // ### undo
    // Undo is handled by the render state machine, because the layout has to first
    // delete areas of the viewport that may have changed,
    // then create the modified score, then render the 'new' score.
    undo(undoBuffer, staffMap) {
        let op = 'setDirty';
        const buffer = undoBuffer.peek();
        // Unrender the modified music because the IDs may change and normal unrender won't work
        if (buffer) {
            const sel = buffer.selector;
            if (buffer.type === _smo_xform_undo__WEBPACK_IMPORTED_MODULE_0__.UndoBuffer.bufferTypes.MEASURE) {
                if (typeof (staffMap[sel.staff]) === 'number') {
                    const mSelection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.measureSelection(this.score, staffMap[sel.staff], sel.measure);
                    if (mSelection !== null) {
                        this.renderer.unrenderMeasure(mSelection.measure);
                    }
                }
            }
            else if (buffer.type === _smo_xform_undo__WEBPACK_IMPORTED_MODULE_0__.UndoBuffer.bufferTypes.STAFF) {
                if (typeof (staffMap[sel.staff]) === 'number') {
                    const sSelection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.measureSelection(this.score, staffMap[sel.staff], 0);
                    if (sSelection !== null) {
                        this.renderer.unrenderStaff(sSelection.staff);
                    }
                }
                op = 'setRefresh';
            }
            else {
                this.renderer.unrenderAll();
                op = 'setRefresh';
            }
            this._score = undoBuffer.undo(this._score, staffMap, false);
            // Broken encapsulation - we need to know if we are 'undoing' an entire score
            // so we can change the score pointed to by the renderer.
            if (buffer.type === _smo_xform_undo__WEBPACK_IMPORTED_MODULE_0__.UndoBuffer.bufferTypes.SCORE) {
                this.renderer.score = this._score;
            }
            this[op]();
        }
        if (!this._score) {
            throw ('no score when undo');
        }
        return this._score;
    }
    unrenderColumn(measure) {
        this.score.staves.forEach((staff) => {
            this.renderer.unrenderMeasure(staff.measures[measure.measureNumber.measureIndex]);
        });
    }
    // ### forceRender
    // For unit test applictions that want to render right-away
    forceRender() {
        this.setRefresh();
        this.render();
    }
    unrenderMeasure(measure) {
        this.renderer.unrenderMeasure(measure);
    }
    renderScoreModifiers() {
        this.renderer.renderScoreModifiers();
    }
    render() {
        if (this._resetViewport) {
            this.setViewport();
            this._resetViewport = false;
        }
        try {
            if (SuiRenderState.passStates.replace === this.passState) {
                this.replaceMeasures();
            }
            else if (SuiRenderState.passStates.initial === this.passState) {
                if (this.renderer.backgroundRender) {
                    return;
                }
                this.renderer.layout();
                this.renderer.drawPageLines();
                this.setPassState(SuiRenderState.passStates.clean, 'rs: complete render');
            }
        }
        catch (excp) {
            console.warn('exception in render: ' + excp);
        }
        this.dirty = false;
    }
}


/***/ }),

/***/ "./src/render/sui/scoreRender.ts":
/*!***************************************!*\
  !*** ./src/render/sui/scoreRender.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreRender: () => (/* binding */ SuiScoreRender)
/* harmony export */ });
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _vex_vxSystem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vex/vxSystem */ "./src/render/vex/vxSystem.ts");
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _piano__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piano */ "./src/render/sui/piano.ts");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter */ "./src/render/sui/formatter.ts");
/* harmony import */ var _smo_xform_beamers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../smo/xform/beamers */ "./src/smo/xform/beamers.ts");
/* harmony import */ var _textRender__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./textRender */ "./src/render/sui/textRender.ts");
/* harmony import */ var _layoutDebug__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../styles/font_metrics/ssp-sans-metrics */ "./src/styles/font_metrics/ssp-sans-metrics.js");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _svgPageMap__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./svgPageMap */ "./src/render/sui/svgPageMap.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");













const VF = _common_vex__WEBPACK_IMPORTED_MODULE_12__.VexFlow;
/**
 * This module renders the entire score.  It calculates the layout first based on the
 * computed dimensions.
  * @category SuiRender
**/
class SuiScoreRender {
    constructor(params) {
        this.startRenderTime = 0;
        this.formatter = null;
        // vexRenderer: any = null;
        this.score = null;
        this.measureMapper = null;
        this.measuresToMap = [];
        this.viewportChanged = false;
        this.renderTime = 0;
        this.backgroundRender = false;
        this.renderedPages = {};
        this._autoAdjustRenderTime = true;
        this.lyricsToOffset = new Map();
        this.renderingPage = -1;
        this.elementId = params.elementId;
        this.score = params.score;
        this.vexContainers = new _svgPageMap__WEBPACK_IMPORTED_MODULE_11__.SvgPageMap(this.score.layoutManager.globalLayout, this.elementId, this.score.layoutManager.pageLayouts);
        this.setViewport();
    }
    get autoAdjustRenderTime() {
        return this._autoAdjustRenderTime;
    }
    set autoAdjustRenderTime(value) {
        this._autoAdjustRenderTime = value;
    }
    getRenderer(box) {
        return this.vexContainers.getRenderer(box);
    }
    renderTextGroup(gg) {
        let ix = 0;
        let jj = 0;
        if (gg.skipRender || this.score === null || this.measureMapper === null) {
            return;
        }
        gg.elements.forEach((element) => {
            element.remove();
        });
        gg.elements = [];
        const layoutManager = this.score.layoutManager;
        const scaledScoreLayout = layoutManager.getScaledPageLayout(0);
        // If this text hasn't been rendered before, estimate the logical box.
        const dummyContainer = this.vexContainers.getRendererFromModifier(gg);
        if (dummyContainer && !gg.logicalBox) {
            const dummyBlock = _textRender__WEBPACK_IMPORTED_MODULE_7__.SuiTextBlock.fromTextGroup(gg, dummyContainer, this.vexContainers, this.measureMapper.scroller);
            gg.logicalBox = dummyBlock.getLogicalBox();
        }
        // If this is a per-page score text, get a text group copy for each page.
        // else the array contains the original.
        const groupAr = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.getPagedTextGroups(gg, this.score.layoutManager.pageLayouts.length, scaledScoreLayout.pageHeight);
        groupAr.forEach((newGroup) => {
            var _a, _b;
            let container = this.vexContainers.getRendererFromModifier(newGroup);
            // If this text is attached to the measure, base the block location on the rendered measure location.
            if (newGroup.attachToSelector) {
                // If this text is attached to a staff that is not visible, don't draw it.
                const mappedStaff = this.score.staves.find((staff) => staff.getMappedStaffId() === newGroup.selector.staff);
                if (!mappedStaff) {
                    return;
                }
                // Indicate the new map;
                // newGroup.selector.staff = mappedStaff.staffId;        
                const mmSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.measureSelection(this.score, mappedStaff.staffId, newGroup.selector.measure);
                if (mmSel) {
                    const mm = mmSel.measure;
                    if (mm.svg.logicalBox.width > 0) {
                        const xoff = mm.svg.logicalBox.x + newGroup.musicXOffset;
                        const yoff = mm.svg.logicalBox.y + newGroup.musicYOffset;
                        newGroup.textBlocks[0].text.x = xoff;
                        newGroup.textBlocks[0].text.y = yoff;
                    }
                }
            }
            if (container) {
                const block = _textRender__WEBPACK_IMPORTED_MODULE_7__.SuiTextBlock.fromTextGroup(newGroup, container, this.vexContainers, this.measureMapper.scroller);
                block.render();
                if ((_a = block.currentBlock) === null || _a === void 0 ? void 0 : _a.text.element) {
                    gg.elements.push((_b = block.currentBlock) === null || _b === void 0 ? void 0 : _b.text.element);
                }
                // For the first one we render, use that as the bounding box for all the text, for
                // purposes of mapper/tracker
                if (ix === 0) {
                    gg.logicalBox = JSON.parse(JSON.stringify(block.logicalBox));
                    // map all the child scoreText objects, too.
                    for (jj = 0; jj < gg.textBlocks.length; ++jj) {
                        gg.textBlocks[jj].text.logicalBox = JSON.parse(JSON.stringify(block.inlineBlocks[jj].text.logicalBox));
                    }
                }
                ix += 1;
            }
        });
    }
    // ### unrenderAll
    // ### Description:
    // Delete all the svg elements associated with the score.
    unrenderAll() {
        if (!this.score) {
            return;
        }
        this.score.staves.forEach((staff) => {
            this.unrenderStaff(staff);
        });
        // $(this.context.svg).find('g.lineBracket').remove();
    }
    // ### unrenderStaff
    // ### Description:
    // See unrenderMeasure.  Like that, but with a staff.
    unrenderStaff(staff) {
        staff.measures.forEach((measure) => {
            this.unrenderMeasure(measure);
        });
        staff.modifiers.forEach((modifier) => {
            if (modifier.element) {
                modifier.element.remove();
                modifier.element = null;
            }
        });
    }
    clearRenderedPage(pg) {
        if (this.renderedPages[pg]) {
            this.renderedPages[pg] = null;
        }
    }
    // ### _setViewport
    // Create (or recrate) the svg viewport, considering the dimensions of the score.
    setViewport() {
        if (this.score === null) {
            return;
        }
        const layoutManager = this.score.layoutManager;
        // All pages have same width/height, so use that
        const layout = layoutManager.getGlobalLayout();
        this.vexContainers.updateLayout(layout, layoutManager.pageLayouts);
        this.renderedPages = {};
        this.viewportChanged = true;
        if (this.measureMapper) {
            this.measureMapper.scroller.scrollAbsolute(0, 0);
        }
        if (this.measureMapper) {
            this.measureMapper.scroller.updateViewport();
        }
        // this.context.setFont(this.font.typeface, this.font.pointSize, "").setBackgroundFillStyle(this.font.fillStyle);
        console.log('layout setViewport: pstate initial');
    }
    renderScoreModifiers() {
        // remove existing modifiers, and also remove parent group for 'extra'
        // groups associated with pagination (once per page etc)
        this.score.textGroups.forEach((tg) => {
            tg.elements.forEach((element) => {
                element.remove();
            });
            tg.elements = [];
        });
        // group.classList.add('all-score-text');
        this.score.textGroups.forEach((tg) => {
            this.renderTextGroup(tg);
        });
    }
    /**
     * for music we've just rendered, get the bounding boxes.  We defer this step so we don't force
     * a reflow, which can slow rendering.
     * @param vxSystem
     * @param measures
     * @param modifiers
     * @param printing
     */
    measureRenderedElements(vxSystem, measures, modifiers, printing) {
        const pageContext = vxSystem.context;
        measures.forEach((smoMeasure) => {
            const element = smoMeasure.svg.element;
            if (element) {
                smoMeasure.setBox(pageContext.offsetBbox(element), 'vxMeasure bounding box');
            }
            const vxMeasure = vxSystem.getVxMeasure(smoMeasure);
            if (vxMeasure) {
                vxMeasure.modifiersToBox.forEach((modifier) => {
                    if (modifier.element) {
                        modifier.logicalBox = pageContext.offsetBbox(modifier.element);
                    }
                });
            }
            // unit test codes don't have tracker.
            if (this.measureMapper) {
                const tmpStaff = this.score.staves.find((ss) => ss.staffId === smoMeasure.measureNumber.staffId);
                if (tmpStaff) {
                    this.measureMapper.mapMeasure(tmpStaff, smoMeasure, printing);
                }
            }
        });
        modifiers.forEach((modifier) => {
            if (modifier.element) {
                modifier.logicalBox = pageContext.offsetBbox(modifier.element);
            }
        });
    }
    _renderSystem(lineIx, printing) {
        if (this.score === null || this.formatter === null) {
            return;
        }
        const measuresToBox = [];
        const modifiersToBox = [];
        const columns = this.formatter.systems[lineIx].systems;
        // If this page hasn't changed since rendered
        const pageIndex = columns[0][0].svg.pageIndex;
        if (this.renderingPage !== pageIndex && this.renderedPages[pageIndex]) {
            console.log(`skipping render on page ${pageIndex}`);
            return;
        }
        const context = this.vexContainers.getRendererForPage(pageIndex);
        if (this.renderingPage !== pageIndex) {
            context.clearMap();
            this.renderingPage = pageIndex;
        }
        const vxSystem = new _vex_vxSystem__WEBPACK_IMPORTED_MODULE_2__.VxSystem(context, 0, lineIx, this.score);
        const colKeys = Object.keys(columns);
        colKeys.forEach((colKey) => {
            columns[parseInt(colKey, 10)].forEach((measure) => {
                if (this.measureMapper !== null) {
                    const modId = 'mod-' + measure.measureNumber.staffId + '-' + measure.measureNumber.measureIndex;
                    _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.removeElementsByClass(context.svg, modId);
                    vxSystem.renderMeasure(measure, printing);
                    const pageIndex = measure.svg.pageIndex;
                    const renderMeasures = this.renderedPages[pageIndex];
                    if (!renderMeasures) {
                        this.renderedPages[pageIndex] = {
                            startMeasure: measure.measureNumber.measureIndex,
                            endMeasure: measure.measureNumber.measureIndex
                        };
                    }
                    else {
                        renderMeasures.endMeasure = measure.measureNumber.measureIndex;
                    }
                    measuresToBox.push(measure);
                    if (!printing && !measure.format.isDefault) {
                        const at = [];
                        at.push({ y: measure.svg.logicalBox.y - 5 });
                        at.push({ x: measure.svg.logicalBox.x + 25 });
                        at.push({ 'font-family': _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_9__.SourceSansProFont.fontFamily });
                        at.push({ 'font-size': '12pt' });
                        _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.placeSvgText(context.svg, at, 'measure-format', '*');
                    }
                }
            });
        });
        this.score.staves.forEach((stf) => {
            this.renderModifiers(stf, vxSystem).forEach((modifier) => {
                modifiersToBox.push(modifier);
            });
        });
        if (this.measureMapper !== null) {
            vxSystem.renderEndings(this.measureMapper.scroller);
        }
        this.measuresToMap.push({ vxSystem, measuresToBox, modifiersToBox, printing });
        // this.measureRenderedElements(vxSystem, measuresToBox, modifiersToBox, printing);
        const timestamp = new Date().valueOf();
        if (!this.lyricsToOffset.has(vxSystem.lineIndex)) {
            this.lyricsToOffset.set(vxSystem.lineIndex, vxSystem);
        }
        // vxSystem.updateLyricOffsets();
        _layoutDebug__WEBPACK_IMPORTED_MODULE_8__.layoutDebug.setTimestamp(_layoutDebug__WEBPACK_IMPORTED_MODULE_8__.layoutDebug.codeRegions.POST_RENDER, new Date().valueOf() - timestamp);
    }
    _renderNextSystemPromise(systemIx, keys, printing) {
        return new Promise((resolve) => {
            // const sleepDate = new Date().valueOf();
            this._renderSystem(keys[systemIx], printing);
            requestAnimationFrame(() => resolve());
        });
    }
    _renderNextSystem(lineIx, keys, printing) {
        var _a;
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_10__.createTopDomContainer)('#renderProgress', 'progress');
        if (lineIx < keys.length) {
            const progress = Math.round((100 * lineIx) / keys.length);
            $('#renderProgress').attr('max', 100);
            $('#renderProgress').val(progress);
            this._renderNextSystemPromise(lineIx, keys, printing).then(() => {
                lineIx++;
                this._renderNextSystem(lineIx, keys, printing);
            });
        }
        else {
            this.renderScoreModifiers();
            this.numberMeasures();
            this.measuresToMap.forEach((mm) => {
                this.measureRenderedElements(mm.vxSystem, mm.measuresToBox, mm.modifiersToBox, mm.printing);
            });
            this.lyricsToOffset.forEach((vv) => {
                vv.updateLyricOffsets();
            });
            this.measuresToMap = [];
            this.lyricsToOffset = new Map();
            // We pro-rate the background render timer on how long it takes
            // to actually render the score, so we are not thrashing on a large
            // score.
            if (this._autoAdjustRenderTime) {
                this.renderTime = new Date().valueOf() - this.startRenderTime;
            }
            $('body').removeClass('show-render-progress');
            // indicate the display is 'clean' and up-to-date with the score
            $('body').removeClass('refresh-1');
            if (this.measureMapper !== null) {
                this.measureMapper.updateMap();
                if (_layoutDebug__WEBPACK_IMPORTED_MODULE_8__.layoutDebug.mask & _layoutDebug__WEBPACK_IMPORTED_MODULE_8__.layoutDebug.values['artifactMap']) {
                    (_a = this.score) === null || _a === void 0 ? void 0 : _a.staves.forEach((staff) => {
                        staff.measures.forEach((mm) => {
                            mm.voices.forEach((voice) => {
                                voice.notes.forEach((note) => {
                                    if (note.logicalBox) {
                                        const page = this.vexContainers.getRendererFromPoint(note.logicalBox);
                                        if (page) {
                                            const noteBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.smoBox(note.logicalBox);
                                            noteBox.y -= page.box.y;
                                            _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.debugBox(page.svg, noteBox, 'measure-place-dbg', 0);
                                        }
                                    }
                                });
                            });
                        });
                    });
                }
            }
            this.backgroundRender = false;
        }
    }
    // ### unrenderMeasure
    // All SVG elements are associated with a logical SMO element.  We need to erase any SVG element before we change a SMO
    // element in such a way that some of the logical elements go away (e.g. when deleting a measure).
    unrenderMeasure(measure) {
        if (!measure) {
            return;
        }
        const modId = 'mod-' + measure.measureNumber.staffId + '-' + measure.measureNumber.measureIndex;
        const context = this.vexContainers.getRenderer(measure.svg.logicalBox);
        if (!context) {
            return;
        }
        _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.removeElementsByClass(context.svg, modId);
        if (measure.svg.element) {
            measure.svg.element.remove();
            measure.svg.element = null;
        }
        const renderPage = this.renderedPages[measure.svg.pageIndex];
        if (renderPage) {
            this.renderedPages[measure.svg.pageIndex] = null;
        }
        measure.setYTop(0, 'unrender');
    }
    // ### _renderModifiers
    // ### Description:
    // Render staff modifiers (modifiers straddle more than one measure, like a slur).  Handle cases where the destination
    // is on a different system due to wrapping.
    renderModifiers(staff, system) {
        let nextNote = null;
        let lastNote = null;
        let testNote = null;
        let vxStart = null;
        let vxEnd = null;
        const modifiersToBox = [];
        const removedModifiers = [];
        if (this.score === null || this.measureMapper === null) {
            return [];
        }
        const renderedId = {};
        staff.renderableModifiers.forEach((modifier) => {
            const startNote = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.noteSelection(this.score, modifier.startSelector.staff, modifier.startSelector.measure, modifier.startSelector.voice, modifier.startSelector.tick);
            const endNote = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.noteSelection(this.score, modifier.endSelector.staff, modifier.endSelector.measure, modifier.endSelector.voice, modifier.endSelector.tick);
            if (!startNote || !endNote) {
                // If the modifier doesn't have score endpoints, delete it from the score
                removedModifiers.push(modifier);
                return;
            }
            if (startNote.note !== null) {
                vxStart = system.getVxNote(startNote.note);
            }
            if (endNote.note !== null) {
                vxEnd = system.getVxNote(endNote.note);
            }
            // If the modifier goes to the next staff, draw what part of it we can on this staff.
            if (vxStart && !vxEnd) {
                nextNote = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.nextNoteSelection(this.score, modifier.startSelector.staff, modifier.startSelector.measure, modifier.startSelector.voice, modifier.startSelector.tick);
                if (nextNote === null) {
                    console.warn('bad selector ' + JSON.stringify(modifier.startSelector, null, ' '));
                }
                else {
                    if (nextNote.note !== null) {
                        testNote = system.getVxNote(nextNote.note);
                    }
                    while (testNote) {
                        vxEnd = testNote;
                        nextNote = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.nextNoteSelection(this.score, nextNote.selector.staff, nextNote.selector.measure, nextNote.selector.voice, nextNote.selector.tick);
                        if (!nextNote) {
                            break;
                        }
                        if (nextNote.note !== null) {
                            testNote = system.getVxNote(nextNote.note);
                        }
                        else {
                            testNote = null;
                        }
                    }
                }
            }
            if (vxEnd && !vxStart) {
                lastNote = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.lastNoteSelection(this.score, modifier.endSelector.staff, modifier.endSelector.measure, modifier.endSelector.voice, modifier.endSelector.tick);
                if (lastNote !== null && lastNote.note !== null) {
                    testNote = system.getVxNote(lastNote.note);
                    while (testNote !== null) {
                        vxStart = testNote;
                        lastNote = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.lastNoteSelection(this.score, lastNote.selector.staff, lastNote.selector.measure, lastNote.selector.voice, lastNote.selector.tick);
                        if (!lastNote) {
                            break;
                        }
                        if (lastNote.note !== null) {
                            testNote = system.getVxNote(lastNote.note);
                        }
                        else {
                            testNote = null;
                        }
                    }
                }
            }
            if (!vxStart && !vxEnd || renderedId[modifier.attrs.id]) {
                return;
            }
            renderedId[modifier.attrs.id] = true;
            system.renderModifier(this.measureMapper.scroller, modifier, vxStart, vxEnd, startNote, endNote);
            modifiersToBox.push(modifier);
        });
        // Silently remove modifiers from the score if the endpoints no longer exist
        removedModifiers.forEach((mod) => {
            staff.removeStaffModifier(mod);
        });
        return modifiersToBox;
    }
    drawPageLines() {
        let i = 0;
        const printing = $('body').hasClass('print-render');
        const layoutMgr = this.score.layoutManager;
        if (printing || !layoutMgr) {
            return;
        }
        for (i = 1; i < layoutMgr.pageLayouts.length; ++i) {
            const context = this.vexContainers.getRendererForPage(i - 1);
            if (context) {
                $(context.svg).find('.pageLine').remove();
                const scaledPage = layoutMgr.getScaledPageLayout(i);
                const y = scaledPage.pageHeight * i - context.box.y;
                _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.line(context.svg, 0, y, scaledPage.pageWidth, y, { strokeName: 'line', stroke: '#321', strokeWidth: '2', strokeDasharray: '4,1', fill: 'none', opacity: 1.0 }, 'pageLine');
            }
        }
    }
    replaceSelection(staffMap, change) {
        let system = null;
        if (this.renderedPages[change.measure.svg.pageIndex]) {
            this.renderedPages[change.measure.svg.pageIndex] = null;
        }
        _smo_xform_beamers__WEBPACK_IMPORTED_MODULE_6__.SmoBeamer.applyBeams(change.measure);
        // Defer modifier update until all selected measures are drawn.
        if (!staffMap[change.staff.staffId]) {
            const context = this.vexContainers.getRenderer(change.measure.svg.logicalBox);
            if (context) {
                system = new _vex_vxSystem__WEBPACK_IMPORTED_MODULE_2__.VxSystem(context, change.measure.staffY, change.measure.svg.lineIndex, this.score);
                staffMap[change.staff.staffId] = { system, staff: change.staff };
            }
        }
        else {
            system = staffMap[change.staff.staffId].system;
        }
        const selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.measuresInColumn(this.score, change.measure.measureNumber.measureIndex);
        const measuresToMeasure = [];
        selections.forEach((selection) => {
            if (system !== null && this.measureMapper !== null) {
                this.unrenderMeasure(selection.measure);
                system.renderMeasure(selection.measure, false);
                measuresToMeasure.push(selection.measure);
            }
        });
        if (system) {
            this.measureRenderedElements(system, measuresToMeasure, [], false);
        }
    }
    renderAllMeasures(lines) {
        if (!this.score) {
            return;
        }
        const printing = $('body').hasClass('print-render');
        $('.measure-format').remove();
        if (!printing) {
            $('body').addClass('show-render-progress');
            const isShowing = _piano__WEBPACK_IMPORTED_MODULE_4__.SuiPiano.isShowing;
            if (this.score.preferences.showPiano && !isShowing) {
                _piano__WEBPACK_IMPORTED_MODULE_4__.SuiPiano.showPiano();
                this.measureMapper.scroller.updateViewport();
            }
            else if (isShowing && !this.score.preferences.showPiano) {
                _piano__WEBPACK_IMPORTED_MODULE_4__.SuiPiano.hidePiano();
                this.measureMapper.scroller.updateViewport();
            }
        }
        this.backgroundRender = true;
        this.startRenderTime = new Date().valueOf();
        this.renderingPage = -1;
        this.vexContainers.updateContainerOffset(this.measureMapper.scroller.scrollState);
        this._renderNextSystem(0, lines, printing);
    }
    // Number the measures at the first measure in each system.
    numberMeasures() {
        const printing = $('body').hasClass('print-render');
        const staff = this.score.staves[0];
        const measures = staff.measures.filter((measure) => measure.measureNumber.systemIndex === 0);
        $('.measure-number').remove();
        measures.forEach((measure) => {
            const context = this.vexContainers.getRenderer(measure.svg.logicalBox);
            if (measure.measureNumber.localIndex > 0 && measure.measureNumber.systemIndex === 0 && measure.svg.logicalBox && context) {
                const numAr = [];
                const modBox = context.offsetSvgPoint(measure.svg.logicalBox);
                numAr.push({ y: modBox.y - 10 });
                numAr.push({ x: modBox.x });
                numAr.push({ 'font-family': _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_9__.SourceSansProFont.fontFamily });
                numAr.push({ 'font-size': '10pt' });
                _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.placeSvgText(context.svg, numAr, 'measure-number', (measure.measureNumber.localIndex + 1).toString());
                // Show line-feed symbol
                if (measure.format.systemBreak && !printing) {
                    const starAr = [];
                    const symbol = '\u21b0';
                    starAr.push({ y: modBox.y - 5 });
                    starAr.push({ x: modBox.x + 25 });
                    starAr.push({ 'font-family': _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_9__.SourceSansProFont.fontFamily });
                    starAr.push({ 'font-size': '12pt' });
                    _svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.placeSvgText(context.svg, starAr, 'measure-format', symbol);
                }
            }
        });
    }
    /**
     * This calculates the position of all the elements in the score, then renders the score
     * @returns
     */
    layout() {
        if (!this.score) {
            return;
        }
        const score = this.score;
        $('head title').text(this.score.scoreInfo.name);
        const formatter = new _formatter__WEBPACK_IMPORTED_MODULE_5__.SuiLayoutFormatter(score, this.vexContainers, this.renderedPages);
        Object.keys(this.renderedPages).forEach((key) => {
            this.vexContainers.clearModifiersForPage(parseInt(key));
        });
        const startPageCount = this.score.layoutManager.pageLayouts.length;
        this.formatter = formatter;
        formatter.layout();
        if (this.formatter.trimPages(startPageCount)) {
            this.setViewport();
        }
        this.measuresToMap = [];
        this.lyricsToOffset = new Map();
        this.renderAllMeasures(formatter.lines);
    }
}


/***/ }),

/***/ "./src/render/sui/scoreView.ts":
/*!*************************************!*\
  !*** ./src/render/sui/scoreView.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreView: () => (/* binding */ SuiScoreView)
/* harmony export */ });
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/xform/undo */ "./src/smo/xform/undo.ts");
/* harmony import */ var _smo_xform_copypaste__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/xform/copypaste */ "./src/smo/xform/copypaste.ts");
/* harmony import */ var _scroller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scroller */ "./src/render/sui/scroller.ts");
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _tracker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tracker */ "./src/render/sui/tracker.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _renderState__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./renderState */ "./src/render/sui/renderState.ts");
/* harmony import */ var _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../smo/xform/operations */ "./src/smo/xform/operations.ts");
/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../audio/player */ "./src/render/audio/player.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.















/**
 * Base class for all operations on the rendered score.  The base class handles the following:
 * 1. Undo and recording actions for the operation
 * 2. Maintain/change which staves in the score are displayed (staff map)
 * 3. Mapping between the displayed score and the data representation
 * @category SuiRender
 */
class SuiScoreView {
    constructor(config, svgContainer, score, scrollSelector, undoBuffer) {
        this.score = score;
        const renderParams = {
            elementId: svgContainer,
            score,
            config,
            undoBuffer
        };
        this.audioAnimation = config.audioAnimation;
        this.renderer = new _renderState__WEBPACK_IMPORTED_MODULE_10__.SuiRenderState(renderParams);
        this.config = config;
        const scoreJson = score.serialize();
        this.scroller = new _scroller__WEBPACK_IMPORTED_MODULE_6__.SuiScroller(scrollSelector, this.renderer.renderer.vexContainers);
        this.pasteBuffer = new _smo_xform_copypaste__WEBPACK_IMPORTED_MODULE_5__.PasteBuffer();
        this.storePaste = new _smo_xform_copypaste__WEBPACK_IMPORTED_MODULE_5__.PasteBuffer();
        this.tracker = new _tracker__WEBPACK_IMPORTED_MODULE_8__.SuiTracker(this.renderer, this.scroller, this.pasteBuffer);
        this.renderer.setMeasureMapper(this.tracker);
        this.storeScore = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.deserialize(JSON.stringify(scoreJson));
        this.synchronizeTextGroups();
        this.storeUndo = new _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer();
        this.staffMap = this.defaultStaffMap;
        SuiScoreView.Instance = this; // for debugging
        this.setMappedStaffIds();
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_9__.createTopDomContainer)('.saveLink'); // for file upload
    }
    synchronizeTextGroups() {
        // Synchronize the score text IDs so cut/paste/undo works transparently
        this.score.textGroups.forEach((tg, ix) => {
            this.storeScore.textGroups[ix].attrs.id = tg.attrs.id;
        });
    }
    /**
     * Await on the full update of the score
     * @returns
     */
    renderPromise() {
        return this.renderer.renderPromise();
    }
    /**
     * Await on the partial update of the score in the view
     * @returns
     */
    updatePromise() {
        return this.renderer.updatePromise();
    }
    /**
     * await on the full update of the score, also resetting the viewport (to reflect layout changes)
     * @returns
     */
    refreshViewport() {
        this.renderer.preserveScroll();
        this.renderer.setViewport();
        this.renderer.setRefresh();
        return this.renderer.renderPromise();
    }
    getPartMap() {
        let keepNext = false;
        let partCount = 0;
        let partMap = {};
        const keys = [];
        this.storeScore.staves.forEach((staff) => {
            const partInfo = staff.partInfo;
            partInfo.associatedStaff = staff.staffId;
            if (!keepNext) {
                partMap[partCount] = partInfo;
                keys.push(partCount);
                partCount += 1;
                if (partInfo.stavesAfter > 0) {
                    keepNext = true;
                }
            }
            else {
                keepNext = false;
            }
        });
        return { keys, partMap };
    }
    /**
     * This is used in some Smoosic demos and pens.
     * @param action any action, but most usefully a SuiScoreView method
     * @param repetition number of times to repeat, waiting on render promise between
     * if not specified, defaults to 1
     * @returns promise, resolved action has been completed and score is updated.
     */
    waitableAction(action, repetition) {
        const rep = repetition !== null && repetition !== void 0 ? repetition : 1;
        const self = this;
        const promise = new Promise((resolve) => {
            const fc = (count) => {
                if (count > 0) {
                    action();
                    self.renderer.updatePromise().then(() => {
                        fc(count - 1);
                    });
                }
                else {
                    resolve();
                }
            };
            fc(rep);
        });
        return promise;
    }
    /**
     * The plural form of _getEquivalentSelection
     * @param selections
     * @returns
     */
    _getEquivalentSelections(selections) {
        const rv = [];
        selections.forEach((selection) => {
            const sel = this._getEquivalentSelection(selection);
            if (sel !== null) {
                rv.push(sel);
            }
        });
        return rv;
    }
    /**
     * A staff modifier has changed, create undo operations for the measures affected
     * @param label
     * @param staffModifier
     * @param subtype
     */
    _undoStaffModifier(label, staffModifier, subtype) {
        const copy = _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.StaffModifierBase.deserialize(staffModifier.serialize());
        copy.startSelector = this._getEquivalentSelector(copy.startSelector);
        copy.endSelector = this._getEquivalentSelector(copy.endSelector);
        this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.STAFF_MODIFIER, _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default, copy.serialize(), subtype);
    }
    /**
     * Return the index of the page that is in the center of the client screen.
     */
    getFocusedPage() {
        if (this.score.layoutManager === undefined) {
            return 0;
        }
        const scrollAvg = this.tracker.scroller.netScroll.y + (this.tracker.scroller.viewport.height / 2);
        const midY = scrollAvg;
        const layoutManager = this.score.layoutManager.getGlobalLayout();
        const lh = layoutManager.pageHeight / layoutManager.svgScale;
        const lw = layoutManager.pageWidth / layoutManager.svgScale;
        const pt = this.renderer.pageMap.svgToClient(_svgHelpers__WEBPACK_IMPORTED_MODULE_7__.SvgHelpers.smoBox({ x: lw, y: lh }));
        return Math.round(midY / pt.y);
    }
    /**
     * Create a rectangle undo, like a multiple columns but not necessarily the whole
     * score.
     */
    _undoColumn(label, measureIndex) {
        this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.COLUMN, _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default, { score: this.storeScore, measureIndex }, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferSubtypes.NONE);
    }
    /**
     * Score preferences don't affect the display, but they do have an undo
     * @param label
     */
    _undoScorePreferences(label) {
        this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.SCORE_ATTRIBUTES, _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default, this.storeScore, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferSubtypes.NONE);
    }
    /**
     * Add to the undo buffer the current set of measures selected.
     * @param label
     * @returns
     */
    _undoTrackerMeasureSelections(label) {
        const measureSelections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.getMeasureList(this.tracker.selections);
        measureSelections.forEach((measureSelection) => {
            const equiv = this._getEquivalentSelection(measureSelection);
            if (equiv !== null) {
                this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.MEASURE, equiv.selector, equiv.measure, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferSubtypes.NONE);
            }
        });
        return measureSelections;
    }
    /**
     * operation that only affects the first selection.  Setup undo for the measure
     */
    _undoFirstMeasureSelection(label) {
        const sel = this.tracker.selections[0];
        const equiv = this._getEquivalentSelection(sel);
        if (equiv !== null) {
            this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.MEASURE, equiv.selector, equiv.measure, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferSubtypes.NONE);
        }
        return sel;
    }
    /**
     * Add the selection to the undo buffer
     * @param label
     * @param selection
     */
    _undoSelection(label, selection) {
        const equiv = this._getEquivalentSelection(selection);
        if (equiv !== null) {
            this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.MEASURE, equiv.selector, equiv.measure, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferSubtypes.NONE);
        }
    }
    /**
     * Add multiple selections to the undo buffer as a group
     * @param label
     * @param selections
     */
    _undoSelections(label, selections) {
        this.storeUndo.grouping = true;
        selections.forEach((selection) => {
            this._undoSelection(label, selection);
        });
        this.storeUndo.grouping = false;
    }
    /**
     * Update renderer for measures that have changed
    */
    _renderChangedMeasures(measureSelections) {
        if (!Array.isArray(measureSelections)) {
            measureSelections = [measureSelections];
        }
        measureSelections.forEach((measureSelection) => {
            this.renderer.addToReplaceQueue(measureSelection);
        });
    }
    /**
     * Update renderer for some columns
     * @param fromSelector
     * @param toSelector
     */
    _renderRectangle(fromSelector, toSelector) {
        this._getRectangleSelections(fromSelector, toSelector).forEach((s) => {
            this.renderer.addToReplaceQueue(s);
        });
    }
    /**
     * Setup undo for operation that affects the whole score
     * @param label
     */
    _undoScore(label) {
        this.storeUndo.addBuffer(label, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferTypes.SCORE, _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default, this.storeScore, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_4__.UndoBuffer.bufferSubtypes.NONE);
    }
    /**
     * Get the selector from this.storeScore that maps to the displayed selector from this.score
     * @param selector
     * @returns
     */
    _getEquivalentSelector(selector) {
        const rv = JSON.parse(JSON.stringify(selector));
        rv.staff = this.staffMap[selector.staff];
        return rv;
    }
    /**
     * Get the equivalent staff id from this.storeScore that maps to the displayed selector from this.score
     * @param staffId
     * @returns
     */
    _getEquivalentStaff(staffId) {
        return this.staffMap[staffId];
    }
    /**
     * Get the equivalent selection from this.storeScore that maps to the displayed selection from this.score
     * @param selection
     * @returns
     */
    _getEquivalentSelection(selection) {
        try {
            if (typeof (selection.selector.tick) === 'undefined') {
                return _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.measureSelection(this.storeScore, this.staffMap[selection.selector.staff], selection.selector.measure);
            }
            if (typeof (selection.selector.pitches) === 'undefined') {
                return _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.noteSelection(this.storeScore, this.staffMap[selection.selector.staff], selection.selector.measure, selection.selector.voice, selection.selector.tick);
            }
            return _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.pitchSelection(this.storeScore, this.staffMap[selection.selector.staff], selection.selector.measure, selection.selector.voice, selection.selector.tick, selection.selector.pitches);
        }
        catch (ex) {
            console.warn(ex);
            return null;
        }
    }
    /**
     * Get the equivalent selection from this.storeScore that maps to the displayed selection from this.score
     * @param selection
     * @returns
     */
    _getEquivalentGraceNote(selection, gn) {
        if (selection.note !== null) {
            const rv = selection.note.getGraceNotes().find((gg) => gg.attrs.id === gn.attrs.id);
            if (rv) {
                return rv;
            }
        }
        return gn;
    }
    /**
     * Get the rectangle of selections indicated by the parameters from the score
     * @param startSelector
     * @param endSelector
     * @param score
     * @returns
     */
    _getRectangleSelections(startSelector, endSelector) {
        const rv = [];
        let i = 0;
        let j = 0;
        for (i = startSelector.staff; i <= endSelector.staff; i++) {
            for (j = startSelector.measure; j <= endSelector.measure; j++) {
                const target = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.measureSelection(this.score, i, j);
                if (target !== null) {
                    rv.push(target);
                }
            }
        }
        return rv;
    }
    /**
     * set the grouping flag for undo operations
     * @param val
     */
    groupUndo(val) {
        this.storeUndo.grouping = val;
    }
    /**
     * Show all staves, 1:1 mapping of view score staff to stored score staff
     */
    get defaultStaffMap() {
        let i = 0;
        const rv = [];
        for (i = 0; i < this.storeScore.staves.length; ++i) {
            rv.push(i);
        }
        return rv;
    }
    /**
     * Bootstrapping function, creates the renderer and associated timers
     */
    startRenderingEngine() {
        if (!this.renderer.score) {
            // If there is only one part, display the part.
            if (this.storeScore.isPartExposed()) {
                this.exposePart(this.score.staves[0]);
            }
            // If the score is transposing, hide the instrument xpose settings
            this._setTransposing();
            this.renderer.score = this.score;
            this.renderer.setViewport();
        }
        this.renderer.startDemon();
    }
    /**
     * Gets the current mapping of displayed staves to score staves (this.storeScore)
     * @returns
     */
    getView() {
        const rv = [];
        let i = 0;
        for (i = 0; i < this.storeScore.staves.length; ++i) {
            const show = this.staffMap.indexOf(i) >= 0;
            rv.push({ show });
        }
        return rv;
    }
    /**
     * Update the staff ID when the view changes
     */
    setMappedStaffIds() {
        this.score.staves.forEach((staff) => {
            if (!this.isPartExposed()) {
                staff.partInfo.displayCues = staff.partInfo.cueInScore;
            }
            else {
                staff.partInfo.displayCues = false;
            }
            staff.setMappedStaffId(this.staffMap[staff.staffId]);
        });
    }
    /**
     * Exposes a part:  hides non-part staves, shows part staves.
     * Note this will reset the view.  After this operation, staff 0 will
     * be the selected part.
     * @param staff
     */
    exposePart(staff) {
        let i = 0;
        const exposeMap = [];
        let pushNext = false;
        for (i = 0; i < this.storeScore.staves.length; ++i) {
            const tS = this.storeScore.staves[i];
            const show = tS.staffId === staff.staffId;
            if (pushNext) {
                exposeMap.push({ show: true });
                pushNext = false;
            }
            else {
                exposeMap.push({ show });
                if (tS.partInfo.stavesAfter > 0 && show) {
                    pushNext = true;
                }
            }
        }
        this.setView(exposeMap);
    }
    /**
     * Indicates if the score is displaying in part-mode vs. score mode.
     * @returns
     */
    isPartExposed() {
        return this.score.isPartExposed();
    }
    /**
     * Parts have different formatting options from the parent score, indluding layout.  Reset
     * them when exposing a part.
     */
    _mapPartFormatting() {
        this.score.layoutManager = this.score.staves[0].partInfo.layoutManager;
        let replacedText = false;
        this.score.staves.forEach((staff) => {
            staff.updateMeasureFormatsForPart();
            if (staff.partInfo.preserveTextGroups && !replacedText) {
                const tga = [];
                replacedText = true;
                staff.partInfo.textGroups.forEach((tg) => {
                    tga.push(tg);
                });
                this.score.textGroups = tga;
            }
        });
    }
    /**
     * Update the list of staves in the score that are displayed.
    */
    setView(rows) {
        let i = 0;
        const any = rows.find((row) => row.show === true);
        if (!any) {
            return;
        }
        const nscore = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.deserialize(JSON.stringify(this.storeScore.serialize(true)));
        const staffMap = [];
        for (i = 0; i < rows.length; ++i) {
            const row = rows[i];
            if (row.show) {
                const srcStave = this.storeScore.staves[i];
                const jsonObj = srcStave.serialize();
                jsonObj.staffId = staffMap.length;
                const nStave = _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_1__.SmoSystemStaff.deserialize(jsonObj);
                nStave.mapStaffFromTo(i, nscore.staves.length);
                nscore.staves.push(nStave);
                if (srcStave.keySignatureMap) {
                    nStave.keySignatureMap = JSON.parse(JSON.stringify(srcStave.keySignatureMap));
                }
                nStave.measures.forEach((measure, ix) => {
                    const srcMeasure = srcStave.measures[ix];
                    measure.tempo = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_13__.SmoTempoText(srcMeasure.tempo.serialize());
                    measure.timeSignature = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_13__.TimeSignature(srcMeasure.timeSignature);
                    measure.keySignature = srcMeasure.keySignature;
                });
                staffMap.push(i);
            }
        }
        nscore.numberStaves();
        this.staffMap = staffMap;
        this.score = nscore;
        // Indicate which score staff view staves are mapped to, to decide to display
        // modifiers.
        this.setMappedStaffIds();
        // TODO: add part-specific measure formatting, etc.
        this._setTransposing();
        this.renderer.score = nscore;
        // If this current view is a part, show the part layout
        if (this.isPartExposed()) {
            this._mapPartFormatting();
            this.score.staves.forEach((staff) => {
                staff.partInfo.displayCues = false;
            });
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.computeMultipartRest(nscore);
        }
        else {
            this.score.staves.forEach((staff) => {
                staff.partInfo.displayCues = staff.partInfo.cueInScore;
            });
        }
        window.dispatchEvent(new CustomEvent(_renderState__WEBPACK_IMPORTED_MODULE_10__.scoreChangeEvent, { detail: { view: this } }));
        this.renderer.setViewport();
    }
    /**
     * view all the staffs in score mode.
     */
    viewAll() {
        this.score = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.deserialize(JSON.stringify(this.storeScore.serialize()));
        this.staffMap = this.defaultStaffMap;
        this.setMappedStaffIds();
        this._setTransposing();
        this.synchronizeTextGroups();
        this.renderer.score = this.score;
        this.pasteBuffer.setScore(this.score);
        window.dispatchEvent(new CustomEvent(_renderState__WEBPACK_IMPORTED_MODULE_10__.scoreChangeEvent, { detail: { view: this } }));
        this.renderer.setViewport();
    }
    /**
     * Update score based on transposing flag.
     */
    _setTransposing() {
        var _a;
        if (!this.isPartExposed()) {
            const xpose = (_a = this.score.preferences) === null || _a === void 0 ? void 0 : _a.transposingScore;
            if (xpose) {
                this.score.setTransposing();
            }
        }
    }
    /**
     * Update the view after loading or restoring a completely new score
     * @param score
     * @returns
     */
    changeScore(score) {
        this.storeUndo.reset();
        _audio_player__WEBPACK_IMPORTED_MODULE_12__.SuiAudioPlayer.stopPlayer();
        this.renderer.score = score;
        this.renderer.setViewport();
        this.storeScore = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.deserialize(JSON.stringify(score.serialize()));
        this.score = score;
        // If the score is non-transposing, hide the instrument xpose settings
        this._setTransposing();
        this.staffMap = this.defaultStaffMap;
        this.setMappedStaffIds();
        this.synchronizeTextGroups();
        if (this.storeScore.isPartExposed()) {
            this.exposePart(this.score.staves[0]);
        }
        const rv = this.renderPromise();
        window.dispatchEvent(new CustomEvent(_renderState__WEBPACK_IMPORTED_MODULE_10__.scoreChangeEvent, { detail: { view: this } }));
        return rv;
    }
    /**
     * for the view score, the renderer decides what to render
     * depending on what is undone.
     * @returns
     */
    undo() {
        if (!this.renderer.score) {
            return;
        }
        // A score-level undo might have changed the score.
        if (this.storeUndo.buffer.length < 1) {
            return;
        }
        const staffMap = {};
        const identityMap = {};
        this.defaultStaffMap.forEach((nn) => identityMap[nn] = nn);
        this.staffMap.forEach((mm, ix) => staffMap[mm] = ix);
        this.score = this.renderer.undo(this.storeUndo, staffMap);
        this.storeScore = this.storeUndo.undo(this.storeScore, identityMap, true);
    }
}
SuiScoreView.Instance = null;


/***/ }),

/***/ "./src/render/sui/scoreViewOperations.ts":
/*!***********************************************!*\
  !*** ./src/render/sui/scoreViewOperations.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreViewOperations: () => (/* binding */ SuiScoreViewOperations)
/* harmony export */ });
/* harmony import */ var _scoreView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scoreView */ "./src/render/sui/scoreView.ts");
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _smo_data_partInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/partInfo */ "./src/smo/data/partInfo.ts");
/* harmony import */ var _smo_data_measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../smo/xform/undo */ "./src/smo/xform/undo.ts");
/* harmony import */ var _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../smo/xform/operations */ "./src/smo/xform/operations.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _audio_oscillator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../audio/oscillator */ "./src/render/audio/oscillator.ts");
/* harmony import */ var _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../smo/mxml/xmlToSmo */ "./src/smo/mxml/xmlToSmo.ts");
/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../audio/player */ "./src/render/audio/player.ts");
/* harmony import */ var _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../ui/fileio/xhrLoader */ "./src/ui/fileio/xhrLoader.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _piano__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./piano */ "./src/render/sui/piano.ts");
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.























/**
 * MVVM-like operations on the displayed score.
 *
 * All operations that can be performed on a 'live' score go through this
 * module.  It maps the score view to the actual score and makes sure the
 * model and view stay in sync.
 *
 * Because this object operates on the current selections,
 * all operations return promise so applications can wait for the
 * operation to complete and update the selection list.
 * @category SuiRender
 */
class SuiScoreViewOperations extends _scoreView__WEBPACK_IMPORTED_MODULE_0__.SuiScoreView {
    /**
     * Add a new text group to the score
     * @param textGroup a new text group
     * @returns
     */
    addTextGroup(textGroup) {
        const altNew = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__.SmoTextGroup.deserializePreserveId(textGroup.serialize());
        _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.SmoUndoable.changeTextGroup(this.storeScore, this.storeUndo, altNew, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.ADD);
        if (this.isPartExposed()) {
            this.score.updateTextGroup(textGroup, true);
            const partInfo = this.storeScore.staves[this._getEquivalentStaff(0)].partInfo;
            partInfo.updateTextGroup(altNew, true);
        }
        else {
            this.score.addTextGroup(textGroup);
            this.storeScore.addTextGroup(altNew);
        }
        this.renderer.renderScoreModifiers();
        return this.renderer.updatePromise();
    }
    /**
     * Remove the text group from the score
     * @param textGroup
     * @returns
     */
    removeTextGroup(textGroup) {
        this.score.updateTextGroup(textGroup, false);
        const altGroup = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__.SmoTextGroup.deserializePreserveId(textGroup.serialize());
        textGroup.elements.forEach((el) => el.remove());
        textGroup.elements = [];
        const isPartExposed = this.isPartExposed();
        if (!isPartExposed) {
            _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.SmoUndoable.changeTextGroup(this.storeScore, this.storeUndo, altGroup, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.REMOVE);
            this.storeScore.updateTextGroup(altGroup, false);
        }
        else {
            const stave = this.storeScore.staves[this._getEquivalentStaff(0)];
            stave.partInfo.updateTextGroup(altGroup, false);
            _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.SmoUndoable.changeTextGroup(this.storeScore, this.storeUndo, altGroup, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.REMOVE);
        }
        this.renderer.renderScoreModifiers();
        return this.renderer.updatePromise();
    }
    /**
     * UPdate an existing text group.  The original is passed in, because since TG not tied to a musical
     * element, we need to find the one we're updating.
     * @param oldVersion
     * @param newVersion
     * @returns
     */
    updateTextGroup(newVersion) {
        const isPartExposed = this.isPartExposed();
        const altNew = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__.SmoTextGroup.deserializePreserveId(newVersion.serialize());
        this.score.updateTextGroup(newVersion, true);
        // If this is part text, don't store it in the score text, except for the displayed score
        if (!isPartExposed) {
            _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.SmoUndoable.changeTextGroup(this.storeScore, this.storeUndo, altNew, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.UPDATE);
            this.storeScore.updateTextGroup(altNew, true);
        }
        else {
            this.storeScore.staves[this._getEquivalentStaff(0)].partInfo.updateTextGroup(altNew, true);
        }
        // TODO: only render the one TG.
        this.renderer.renderScoreModifiers();
        // return this.renderer.updatePromise();
    }
    /**
     * load an mxml score remotely, return a promise that
     * completes when the file is loaded
     * @param url where to find the xml file
     * @returns
     */
    loadRemoteXml(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const req = new _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_17__.SuiXhrLoader(url);
            const self = this;
            // Shouldn't we return promise of actually displaying the score?
            yield req.loadAsync();
            const parser = new DOMParser();
            const xml = parser.parseFromString(req.value, 'text/xml');
            const score = _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_15__.XmlToSmo.convert(xml);
            score.layoutManager.zoomToWidth($('body').width());
            self.changeScore(score);
        });
    }
    /**
     * load a remote score in SMO format
     * @param url url to find the score
     * @returns
     */
    loadRemoteJson(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const req = new _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_17__.SuiXhrLoader(url);
            const self = this;
            return req.loadAsync().then(() => {
                const score = _smo_data_score__WEBPACK_IMPORTED_MODULE_1__.SmoScore.deserialize(req.value);
                self.changeScore(score);
            });
        });
    }
    /**
     * Load a remote score, return promise when it's been loaded
     * from afar.
     * @param pref
     * @returns
     */
    loadRemoteScore(url) {
        if (url.endsWith('xml') || url.endsWith('mxl')) {
            return this.loadRemoteXml(url);
        }
        else {
            return this.loadRemoteJson(url);
        }
    }
    updateAudioSettings(pref) {
        this._undoScorePreferences('Update preferences');
        this.score.audioSettings = pref;
        this.storeScore.audioSettings = new _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoAudioPlayerSettings(pref);
        // No rendering to be done
        return this.renderer.updatePromise();
    }
    /**
     * Global settings that control how the score editor behaves
     * @param pref
     * @returns
     */
    updateScorePreferences(pref) {
        this._undoScorePreferences('Update preferences');
        const oldXpose = this.score.preferences.transposingScore;
        const curXpose = pref.transposingScore;
        this.score.updateScorePreferences(new _smo_data_score__WEBPACK_IMPORTED_MODULE_1__.SmoScorePreferences(pref));
        this.storeScore.updateScorePreferences(new _smo_data_score__WEBPACK_IMPORTED_MODULE_1__.SmoScorePreferences(pref));
        if (curXpose === false && oldXpose === true) {
            this.score.setNonTransposing();
        }
        else if (curXpose === true && oldXpose === false) {
            this.score.setTransposing();
        }
        this.renderer.setDirty();
        return this.renderer.updatePromise();
    }
    /**
     * Update information about the score, composer etc.
     * @param scoreInfo
     * @returns
     */
    updateScoreInfo(scoreInfo) {
        this._undoScorePreferences('Update preferences');
        this.score.scoreInfo = scoreInfo;
        this.storeScore.scoreInfo = JSON.parse(JSON.stringify(scoreInfo));
        return this.renderer.updatePromise();
    }
    /**
     * Add a specific microtone modifier to the selected notes
     * @param tone
     * @returns
     */
    addRemoveMicrotone(tone) {
        const selections = this.tracker.selections;
        const altSelections = this._getEquivalentSelections(selections);
        const measureSelections = this._undoTrackerMeasureSelections('add/remove microtone');
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addRemoveMicrotone(null, selections, tone);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addRemoveMicrotone(null, altSelections, tone);
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    addRemoveArpeggio(code) {
        const selections = this.tracker.selections;
        const altSelections = this._getEquivalentSelections(selections);
        const measureSelections = this._undoTrackerMeasureSelections('add/remove microtone');
        [selections, altSelections].forEach((selType) => {
            selType.forEach((sel) => {
                if (sel.note) {
                    if (code === 'none') {
                        sel.note.arpeggio = undefined;
                    }
                    else {
                        sel.note.arpeggio = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoArpeggio({ type: code });
                    }
                }
            });
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Modify the dynamics assoicated with the specific selection
     * @param selection
     * @param dynamic
     * @returns
     */
    addDynamic(selection, dynamic) {
        this._undoFirstMeasureSelection('add dynamic');
        this._removeDynamic(selection, dynamic);
        const equiv = this._getEquivalentSelection(selection);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addDynamic(selection, dynamic);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addDynamic(equiv, _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoNoteModifierBase.deserialize(dynamic.serialize()));
        this.renderer.addToReplaceQueue(selection);
        return this.renderer.updatePromise();
    }
    /**
     * Remove dynamics from the selection
     * @param selection
     * @param dynamic
     * @returns
     */
    _removeDynamic(selection, dynamic) {
        const equiv = this._getEquivalentSelection(selection);
        if (equiv !== null && equiv.note !== null) {
            const altModifiers = equiv.note.getModifiers('SmoDynamicText');
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeDynamic(selection, dynamic);
            if (altModifiers.length) {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeDynamic(equiv, altModifiers[0]);
            }
        }
        return this.renderer.updatePromise();
    }
    /**
     * Remove dynamics from the current selection
     * @param dynamic
     * @returns
     */
    removeDynamic(dynamic) {
        const sel = this.tracker.modifierSelections[0];
        if (!sel.selection) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        this.tracker.selections = [sel.selection];
        this._undoFirstMeasureSelection('remove dynamic');
        this._removeDynamic(sel.selection, dynamic);
        this.renderer.addToReplaceQueue(sel.selection);
        return this.renderer.updatePromise();
    }
    /**
     * we never really delete a note, but we will convert it into a rest and if it's
     * already a rest we will try to hide it.
     * Operates on current selections
     * */
    deleteNote() {
        const measureSelections = this._undoTrackerMeasureSelections('delete note');
        this.tracker.selections.forEach((sel) => {
            if (sel.note) {
                const altSel = this._getEquivalentSelection(sel);
                // set the pitch to be a good position for the rest
                const pitch = JSON.parse(JSON.stringify(_smo_data_measure__WEBPACK_IMPORTED_MODULE_4__.SmoMeasure.defaultPitchForClef[sel.measure.clef]));
                const altPitch = JSON.parse(JSON.stringify(_smo_data_measure__WEBPACK_IMPORTED_MODULE_4__.SmoMeasure.defaultPitchForClef[altSel.measure.clef]));
                sel.note.pitches = [pitch];
                altSel.note.pitches = [altPitch];
                // If the note is a note, make it into a rest.  If the note is a rest already,
                // make it invisible.  If it is invisible already, make it back into a rest.
                if (sel.note.isRest() && !sel.note.isHidden()) {
                    sel.note.makeHidden(true);
                    altSel.note.makeHidden(true);
                }
                else {
                    sel.note.makeRest();
                    altSel.note.makeRest();
                    sel.note.makeHidden(false);
                    altSel.note.makeHidden(false);
                }
            }
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
    * The lyric editor moves around, so we can't depend on the tracker for the
    * correct selection.  We get it directly from the editor.
    *
    * @param selector - the selector of the note with the lyric to remove
    * @param lyric - a copy of the lyric to remove.  We use the verse, parser to identify it
    * @returns render promise
    */
    removeLyric(selector, lyric) {
        const selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.noteFromSelector(this.score, selector);
        if (selection === null) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        this._undoSelection('remove lyric', selection);
        selection.note.removeLyric(lyric);
        const equiv = this._getEquivalentSelection(selection);
        const storeLyric = equiv.note.getLyricForVerse(lyric.verse, lyric.parser);
        if (typeof (storeLyric) !== 'undefined') {
            equiv.note.removeLyric(lyric);
        }
        this.renderer.addToReplaceQueue(selection);
        lyric.deleted = true;
        return this.renderer.updatePromise();
    }
    /**
     * @param selector where to add or update the lyric
     * @param lyric a copy of the lyric to remove
     * @returns
     */
    addOrUpdateLyric(selector, lyric) {
        const selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.noteFromSelector(this.score, selector);
        if (selection === null) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        this._undoSelection('update lyric', selection);
        selection.note.addLyric(lyric);
        const equiv = this._getEquivalentSelection(selection);
        const altLyric = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoNoteModifierBase.deserialize(lyric.serialize());
        equiv.note.addLyric(altLyric);
        this.renderer.addToReplaceQueue(selection);
        return this.renderer.updatePromise();
    }
    /**
     * Delete all the notes for the currently selected voice
     * @returns
     */
    depopulateVoice() {
        const measureSelections = this._undoTrackerMeasureSelections('depopulate voice');
        measureSelections.forEach((selection) => {
            const ix = selection.measure.getActiveVoice();
            if (ix !== 0) {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.depopulateVoice(selection, ix);
                const equiv = this._getEquivalentSelection(selection);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.depopulateVoice(equiv, ix);
            }
        });
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setActiveVoice(this.score, 0);
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Change the active voice in a multi-voice measure.
     * @param index
     * @returns
     */
    _changeActiveVoice(index) {
        const measuresToAdd = [];
        const measureSelections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.getMeasureList(this.tracker.selections);
        measureSelections.forEach((measureSelection) => {
            if (index === measureSelection.measure.voices.length) {
                measuresToAdd.push(measureSelection);
            }
        });
        return measuresToAdd;
    }
    /**
     * Populate a new voice with default notes
     * @param index the voice to populate
     * @returns
     */
    populateVoice(index) {
        const measuresToAdd = this._changeActiveVoice(index);
        if (measuresToAdd.length === 0) {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setActiveVoice(this.score, index);
            this.tracker.selectActiveVoice();
            return this.renderer.updatePromise();
        }
        measuresToAdd.forEach((selection) => {
            this._undoSelection('popualteVoice', selection);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.populateVoice(selection, index);
            const equiv = this._getEquivalentSelection(selection);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.populateVoice(equiv, index);
        });
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setActiveVoice(this.score, index);
        this._renderChangedMeasures(measuresToAdd);
        return this.renderer.updatePromise();
    }
    /**
     * Assign an instrument to a set of measures
     * @param instrument the instrument to assign to the selections
     * @param selections
     * @returns
     */
    changeInstrument(instrument, selections) {
        if (typeof (selections) === 'undefined') {
            selections = this.tracker.selections;
        }
        this._undoSelections('change instrument', selections);
        const altSelections = this._getEquivalentSelections(selections);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.changeInstrument(instrument, selections);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.changeInstrument(instrument, altSelections);
        this._renderChangedMeasures(selections);
        return this.renderer.updatePromise();
    }
    /**
     * Set the time signature for a selection
     * @param timeSignature actual time signature
     */
    setTimeSignature(timeSignature) {
        this._undoScore('Set time signature');
        const selections = this.tracker.selections;
        const altSelections = this._getEquivalentSelections(selections);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setTimeSignature(this.score, selections, timeSignature);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setTimeSignature(this.storeScore, altSelections, timeSignature);
        this._renderChangedMeasures(_smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.getMeasureList(this.tracker.selections));
        return this.renderer.updatePromise();
    }
    /**
     * Move selected staff up or down in the score.
     * @param index direction to move
     * @returns
     */
    moveStaffUpDown(index) {
        this._undoScore('re-order staves');
        // Get staff to move
        const selection = this._getEquivalentSelection(this.tracker.selections[0]);
        // Make the move in the model, and reset the view so we can see the new
        // arrangement
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.moveStaffUpDown(this.storeScore, selection, index);
        this.viewAll();
        return this.renderer.updatePromise();
    }
    /**
     * Update the staff group for a score, which determines how the staves
     * are justified and bracketed
     * @param staffGroup
     */
    addOrUpdateStaffGroup(staffGroup) {
        this._undoScore('group staves');
        // Assume that the view is now set to full score
        this.score.addOrReplaceSystemGroup(staffGroup);
        this.storeScore.addOrReplaceSystemGroup(staffGroup);
        this.renderer.setDirty();
        return this.renderer.updatePromise();
    }
    /**
     * UPdate tempo for all or part of the score
     * @param measure the measure with the tempo.  Tempo is measure-wide parameter
     * @param scoreMode if true, update whole score.  Else selections
     * @returns
     */
    updateTempoScore(measure, tempo, scoreMode, selectionMode) {
        let measureIndex = 0;
        const originalTempo = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText(measure.tempo);
        this._undoColumn('update tempo', measure.measureNumber.measureIndex);
        let startMeasure = measure.measureNumber.measureIndex;
        let endMeasure = this.score.staves[0].measures.length;
        let displayed = false;
        if (selectionMode) {
            const endSel = this.tracker.getExtremeSelection(1);
            if (endSel.selector.measure > startMeasure) {
                endMeasure = endSel.selector.measure;
            }
        }
        // If we are only changing the position of the text, it only affects the tempo measure.
        if (_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText.eq(originalTempo, tempo) && tempo.yOffset !== originalTempo.yOffset && endMeasure > startMeasure) {
            endMeasure = startMeasure + 1;
        }
        for (measureIndex = startMeasure; measureIndex < endMeasure; ++measureIndex) {
            if (!scoreMode && !selectionMode) {
                // If not whole score or selections, change until the tempo doesn't match previous measure's tempo (next tempo change)
                const compMeasure = this.score.staves[0].measures[measureIndex];
                if (_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText.eq(originalTempo, compMeasure.tempo) || displayed === false) {
                    const sel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.measureSelection(this.score, 0, measureIndex);
                    const altSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.measureSelection(this.storeScore, 0, measureIndex);
                    if (sel && sel.measure.tempo.display && !displayed) {
                        this.renderer.addToReplaceQueue(sel);
                        displayed = true;
                    }
                    if (sel) {
                        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addTempo(this.score, sel, tempo);
                    }
                    if (altSel) {
                        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addTempo(this.storeScore, altSel, tempo);
                    }
                }
                else {
                    break;
                }
            }
            else {
                const sel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.measureSelection(this.score, 0, measureIndex);
                const altSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.measureSelection(this.storeScore, 0, measureIndex);
                if (sel) {
                    _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addTempo(this.score, sel, tempo);
                    if (!displayed) {
                        this.renderer.addToReplaceQueue(sel);
                        displayed = true;
                    }
                }
                if (altSel) {
                    _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addTempo(this.storeScore, altSel, tempo);
                }
            }
        }
        return this.renderer.updatePromise();
    }
    /**
     * 'remove' tempo, which means either setting the bars to the
     * default tempo, or the previously-set tempo.
     * @param scoreMode whether to reset entire score
     */
    removeTempo(measure, tempo, scoreMode, selectionMode) {
        const startSelection = this.tracker.selections[0];
        if (startSelection.selector.measure > 0) {
            const measureIx = startSelection.selector.measure - 1;
            const target = startSelection.staff.measures[measureIx];
            const tempo = target.getTempo();
            const newTempo = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText(tempo);
            newTempo.display = false;
            this.updateTempoScore(measure, newTempo, scoreMode, selectionMode);
        }
        else {
            this.updateTempoScore(measure, new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoTempoText.defaults), scoreMode, selectionMode);
        }
        return this.renderer.updatePromise();
    }
    /**
     * Add a grace note to the selected real notes.
     */
    addGraceNote() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('add grace note');
        selections.forEach((selection) => {
            const index = selection.note.getGraceNotes().length;
            const pitches = JSON.parse(JSON.stringify(selection.note.pitches));
            const grace = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoGraceNote({
                pitches, ticks: { numerator: 2048, denominator: 1, remainder: 0 }
            });
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addGraceNote(selection, grace, index);
            const altPitches = JSON.parse(JSON.stringify(selection.note.pitches));
            const altGrace = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoGraceNote({
                pitches: altPitches, ticks: { numerator: 2048, denominator: 1, remainder: 0 }
            });
            altGrace.attrs.id = grace.attrs.id;
            const altSelection = this._getEquivalentSelection(selection);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addGraceNote(altSelection, altGrace, index);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * remove selected grace note
     * @returns
     */
    removeGraceNote() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('remove grace note');
        selections.forEach((selection) => {
            // TODO: get the correct offset
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeGraceNote(selection, 0);
            const altSel = (this._getEquivalentSelection(selection));
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeGraceNote(altSel, 0);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Toggle slash in stem of grace note
     */
    slashGraceNotes() {
        const grace = this.tracker.getSelectedGraceNotes();
        const measureSelections = this._undoTrackerMeasureSelections('slash grace note toggle');
        grace.forEach((gn) => {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.slashGraceNotes(gn);
            if (gn.selection !== null) {
                const altSelection = this._getEquivalentSelection(gn.selection);
                const altGn = this._getEquivalentGraceNote(altSelection, gn.modifier);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.slashGraceNotes({
                    selection: altSelection, modifier: altGn,
                    box: _smo_data_common__WEBPACK_IMPORTED_MODULE_5__.SvgBox.default, index: 0
                });
            }
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * transpose selected notes
     * @param offset 1/2 steps
     * @returns
     */
    transposeSelections(offset) {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('transpose');
        const grace = this.tracker.getSelectedGraceNotes();
        if (grace.length) {
            grace.forEach((artifact) => {
                if (artifact.selection !== null && artifact.selection.note !== null) {
                    const gn1 = artifact.modifier;
                    const index = artifact.selection.note.graceNotes.findIndex((x) => x.attrs.id === gn1.attrs.id);
                    const altSelection = this._getEquivalentSelection(artifact.selection);
                    if (altSelection && altSelection.note !== null) {
                        const gn2 = altSelection.note.graceNotes[index];
                        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.transposeGraceNotes(altSelection, [gn2], offset);
                    }
                    _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.transposeGraceNotes(artifact.selection, [gn1], offset);
                }
            });
        }
        else {
            selections.forEach((selected) => {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.transpose(selected, offset);
                const altSel = this._getEquivalentSelection(selected);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.transpose(altSel, offset);
            });
            if (selections.length === 1 && this.score.preferences.autoPlay) {
                _audio_oscillator__WEBPACK_IMPORTED_MODULE_14__.SuiOscillator.playSelectionNow(selections[0], this.score, 1);
            }
        }
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * toggle the accidental spelling of the selected notes
     * @returns
     */
    toggleEnharmonic() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('toggle enharmonic');
        const grace = this.tracker.getSelectedGraceNotes();
        if (grace.length) {
            grace.forEach((artifact) => {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleGraceNoteEnharmonic(artifact.selection, [artifact.modifier]);
                const altSelection = this._getEquivalentSelection(artifact.selection);
                const altGr = this._getEquivalentGraceNote(altSelection, artifact.modifier);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleGraceNoteEnharmonic(altSelection, [altGr]);
            });
        }
        else {
            selections.forEach((selected) => {
                if (typeof (selected.selector.pitches) === 'undefined') {
                    selected.selector.pitches = [];
                }
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleEnharmonic(selected);
                const altSel = this._getEquivalentSelection(selected);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleEnharmonic(altSel);
            });
        }
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Toggle cautionary/courtesy accidentals
     */
    toggleCourtesyAccidentals() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('toggle courtesy accidental');
        const grace = this.tracker.getSelectedGraceNotes();
        if (grace.length) {
            grace.forEach((artifact) => {
                const gn1 = [artifact.modifier];
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleGraceNoteCourtesy(artifact.selection, gn1);
                const altSel = this._getEquivalentSelection(artifact.selection);
                const gn2 = this._getEquivalentGraceNote(altSel, gn1[0]);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleGraceNoteCourtesy(altSel, [gn2]);
            });
        }
        else {
            selections.forEach((selection) => {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleCourtesyAccidental(selection);
                const altSel = this._getEquivalentSelection(selection);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleCourtesyAccidental(altSel);
            });
        }
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * change the duration of notes for selected, creating more
     * or fewer notes.
     * After the change, reset the selection so it's as close as possible
     * to the original length
     * @param operation
     * @returns
     */
    batchDurationOperation(operation) {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('change duration');
        const grace = this.tracker.getSelectedGraceNotes();
        const graceMap = {
            doubleDuration: 'doubleGraceNoteDuration',
            halveDuration: 'halveGraceNoteDuration'
        };
        if (grace.length && typeof (graceMap[operation]) !== 'undefined') {
            operation = graceMap[operation];
            grace.forEach((artifact) => {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation[operation](artifact.selection, artifact.modifier);
                const altSelection = this._getEquivalentSelection(artifact.selection);
                const gn2 = this._getEquivalentGraceNote(altSelection, artifact.modifier);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation[operation](altSelection, gn2);
            });
        }
        else {
            const altAr = this._getEquivalentSelections(selections);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.batchSelectionOperation(this.score, selections, operation);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.batchSelectionOperation(this.storeScore, altAr, operation);
        }
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Toggle selected modifier on selected notes
     * @param modifier
     * @param ctor parent class constructor (e.g. SmoOrnament)
     * @returns
     */
    toggleArticulation(modifier, ctor) {
        const measureSelections = this._undoTrackerMeasureSelections('toggle articulation');
        this.tracker.selections.forEach((sel) => {
            if (ctor === 'SmoArticulation') {
                const aa = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoArticulation({ articulation: modifier });
                const altAa = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoArticulation({ articulation: modifier });
                altAa.attrs.id = aa.attrs.id;
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleArticulation(sel, aa);
                const altSelection = this._getEquivalentSelection(sel);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleArticulation(altSelection, altAa);
            }
            else {
                const aa = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoOrnament({ ornament: modifier });
                const altAa = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoOrnament({ ornament: modifier });
                altAa.attrs.id = aa.attrs.id;
                const altSelection = this._getEquivalentSelection(sel);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleOrnament(sel, aa);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleOrnament(altSelection, altAa);
            }
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * convert non-tuplet not to a tuplet
     * @param numNotes 3 means triplet, etc.
     */
    makeTuplet(numNotes) {
        const selection = this.tracker.selections[0];
        const measureSelections = this._undoTrackerMeasureSelections('make tuplet');
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.makeTuplet(selection, numNotes);
        const altSelection = this._getEquivalentSelection(selection);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.makeTuplet(altSelection, numNotes);
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Convert selected tuplet to a single (if possible) non-tuplet
     */
    unmakeTuplet() {
        const selection = this.tracker.selections[0];
        const measureSelections = this._undoTrackerMeasureSelections('unmake tuplet');
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.unmakeTuplet(selection);
        const altSelection = this._getEquivalentSelection(selection);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.unmakeTuplet(altSelection);
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Create a chord by adding an interval to selected note
     * @param interval 1/2 steps
     * @returns
     */
    setInterval(interval) {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('set interval');
        selections.forEach((selected) => {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.interval(selected, interval);
            const altSelection = this._getEquivalentSelection(selected);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.interval(altSelection, interval);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * change the selected chord into a single note
     * @returns
     */
    collapseChord() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('collapse chord');
        selections.forEach((selected) => {
            const note = selected.note;
            if (note) {
                const pp = JSON.parse(JSON.stringify(note.pitches[0]));
                const altpp = JSON.parse(JSON.stringify(note.pitches[0]));
                // No operation for this?
                note.pitches = [pp];
                const altSelection = this._getEquivalentSelection(selected);
                altSelection.note.pitches = [altpp];
            }
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Toggle chicken-scratches, for jazz improv, comping etc.
     */
    toggleSlash() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('make slash');
        selections.forEach((selection) => {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleSlash(selection);
            const altSel = this._getEquivalentSelection(selection);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleSlash(altSel);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * make selected notes into a rest, or visa-versa
     * @returns
     */
    makeRest() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('make rest');
        selections.forEach((selection) => {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleRest(selection);
            const altSel = this._getEquivalentSelection(selection);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleRest(altSel);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * toggle the 'end beam' flag for selected notes
     * @returns
     */
    toggleBeamGroup() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('toggle beam group');
        selections.forEach((selection) => {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleBeamGroup(selection);
            const altSel = this._getEquivalentSelection(selection);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleBeamGroup(altSel);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    toggleCue() {
        return __awaiter(this, void 0, void 0, function* () {
            const measureSelections = this._undoTrackerMeasureSelections('toggle note cue');
            this.tracker.selections.forEach((selection) => {
                const altSelection = this._getEquivalentSelection(selection);
                if (selection.note && selection.note.isRest() === false) {
                    selection.note.isCue = !selection.note.isCue;
                    if (altSelection && altSelection.note) {
                        altSelection.note.isCue = selection.note.isCue;
                    }
                }
            });
            this._renderChangedMeasures(measureSelections);
            yield this.renderer.updatePromise();
        });
    }
    /**
    * up or down
    * @returns
    */
    toggleBeamDirection() {
        const selections = this.tracker.selections;
        if (selections.length < 1) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        const measureSelections = this._undoTrackerMeasureSelections('toggle beam direction');
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleBeamDirection(selections);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.toggleBeamDirection(this._getEquivalentSelections(selections));
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Add the selected notes to a beam group
     */
    beamSelections() {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('beam selections');
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.beamSelections(this.score, selections);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.beamSelections(this.storeScore, this._getEquivalentSelections(selections));
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * change key signature for selected measures
     * @param keySignature vex key signature
     */
    addKeySignature(keySignature) {
        const measureSelections = this._undoTrackerMeasureSelections('set key signature ' + keySignature);
        measureSelections.forEach((sel) => {
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addKeySignature(this.score, sel, keySignature);
            const altSel = this._getEquivalentSelection(sel);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addKeySignature(this.storeScore, altSel, keySignature);
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Sets a pitch from the piano widget.
     * @param pitch {Pitch}
     * @param chordPedal {boolean} - indicates we are adding to a chord
     */
    setPitchPiano(pitch, chordPedal) {
        const measureSelections = this._undoTrackerMeasureSelections('setAbsolutePitch ' + pitch.letter + '/' + pitch.accidental);
        this.tracker.selections.forEach((selected) => {
            const npitch = {
                letter: pitch.letter,
                accidental: pitch.accidental, octave: pitch.octave
            };
            const octave = _smo_data_measure__WEBPACK_IMPORTED_MODULE_4__.SmoMeasure.defaultPitchForClef[selected.measure.clef].octave;
            npitch.octave += octave;
            const altSel = this._getEquivalentSelection(selected);
            if (chordPedal && selected.note) {
                selected.note.toggleAddPitch(npitch);
                altSel.note.toggleAddPitch(npitch);
            }
            else {
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setPitch(selected, [npitch]);
                _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setPitch(altSel, [npitch]);
            }
        });
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * show or hide the piano widget
     * @param value to show it
     */
    showPiano(value) {
        this.score.preferences.showPiano = value;
        this.storeScore.preferences.showPiano = value;
        if (value) {
            _piano__WEBPACK_IMPORTED_MODULE_20__.SuiPiano.showPiano();
        }
        else {
            _piano__WEBPACK_IMPORTED_MODULE_20__.SuiPiano.hidePiano();
        }
        return this.renderer.updatePromise();
    }
    /**
     * Render a pitch for each letter name-pitch in the string,
     * @param pitches letter names for pitches
     * @returns promise, resolved when all pitches rendered
     * @see setPitch
     */
    setPitchesPromise(pitches) {
        const self = this;
        const promise = new Promise((resolve) => {
            const fc = (index) => {
                if (index >= pitches.length) {
                    resolve();
                }
                else {
                    self.setPitch(pitches[index]).then(() => {
                        fc(index + 1);
                    });
                }
            };
            fc(0);
        });
        return promise;
    }
    /**
     * Add a pitch to the score at the cursor.  This tries to find the best pitch
     * to match the letter key (F vs F# for instance) based on key and surrounding notes
     * @param letter string
     */
    setPitch(letter) {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('set pitch ' + letter);
        selections.forEach((selected) => {
            const selector = selected.selector;
            let hintSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.lastNoteSelection(this.score, selector.staff, selector.measure, selector.voice, selector.tick);
            if (!hintSel) {
                hintSel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.nextNoteSelection(this.score, selector.staff, selector.measure, selector.voice, selector.tick);
            }
            // The selection no longer exists, possibly deleted
            if (hintSel === null || hintSel.note === null) {
                return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
            }
            const pitch = _smo_data_music__WEBPACK_IMPORTED_MODULE_13__.SmoMusic.getLetterNotePitch(hintSel.note.pitches[0], letter, hintSel.measure.keySignature);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setPitch(selected, [pitch]);
            const altSel = this._getEquivalentSelection(selected);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setPitch(altSel, [pitch]);
            if (this.score.preferences.autoAdvance) {
                this.tracker.moveSelectionRight(this.score, null, true);
            }
        });
        if (selections.length === 1 && this.score.preferences.autoPlay) {
            _audio_oscillator__WEBPACK_IMPORTED_MODULE_14__.SuiOscillator.playSelectionNow(selections[0], this.score, 1);
        }
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Generic clipboard copy action
     */
    copy() {
        this.pasteBuffer.setSelections(this.score, this.tracker.selections);
        const altAr = [];
        this.tracker.selections.forEach((sel) => {
            const noteSelection = this._getEquivalentSelection(sel);
            if (noteSelection !== null) {
                altAr.push(noteSelection);
            }
        });
        this.storePaste.setSelections(this.storeScore, altAr);
        return this.renderer.updatePromise();
    }
    /**
     * clipboard paste action
     * @returns
     */
    paste() {
        // We undo the whole score on a paste, since we don't yet know the
        // extent of the overlap
        this._undoScore('paste');
        this.renderer.preserveScroll();
        const firstSelection = this.tracker.selections[0];
        const pasteTarget = firstSelection.selector;
        const altSelection = this._getEquivalentSelection(firstSelection);
        const altTarget = altSelection.selector;
        this.pasteBuffer.pasteSelections(pasteTarget);
        this.storePaste.pasteSelections(altTarget);
        this._renderChangedMeasures(this.pasteBuffer.replacementMeasures);
        return this.renderer.updatePromise();
    }
    /**
     * specify a note head other than the default for the duration
     * @param head
     */
    setNoteHead(head) {
        const selections = this.tracker.selections;
        const measureSelections = this._undoTrackerMeasureSelections('set note head');
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setNoteHead(selections, head);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setNoteHead(this._getEquivalentSelections(selections), head);
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * Add a volta for selected measures
     */
    addEnding() {
        // TODO: we should have undo for columns
        this._undoScore('Add Volta');
        const ft = this.tracker.getExtremeSelection(-1);
        const tt = this.tracker.getExtremeSelection(1);
        const params = _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoVolta.defaults;
        params.startBar = ft.selector.measure;
        params.endBar = tt.selector.measure;
        params.number = 1;
        const volta = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoVolta(params);
        const altVolta = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoVolta(params);
        this._renderChangedMeasures([ft, tt]);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addEnding(this.storeScore, altVolta);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addEnding(this.score, volta);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * @param ending volta settings
     * @returns
     */
    updateEnding(ending) {
        this._undoScore('Change Volta');
        ending.elements.forEach((el) => {
            $(el).find('g.' + ending.attrs.id).remove();
        });
        ending.elements = [];
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeEnding(this.storeScore, ending);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeEnding(this.score, ending);
        const altVolta = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoVolta(ending);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addEnding(this.storeScore, altVolta);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addEnding(this.score, ending);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     *
     * @param ending volta to remove
     * @returns
     */
    removeEnding(ending) {
        this._undoScore('Remove Volta');
        ending.elements.forEach((el) => {
            $(el).find('g.' + ending.attrs.id).remove();
        });
        ending.elements = [];
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeEnding(this.storeScore, ending);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeEnding(this.score, ending);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     *
     * @param position begin or end
     * @param barline barline type
     * @returns
     */
    setBarline(position, barline) {
        const obj = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoBarline({ position, barline });
        const altObj = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoBarline({ position, barline });
        const selection = this.tracker.selections[0];
        this._undoColumn('set barline', selection.selector.measure);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setMeasureBarline(this.score, selection, obj);
        const altSel = this._getEquivalentSelection(selection);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setMeasureBarline(this.storeScore, altSel, altObj);
        this._renderChangedMeasures([selection]);
        return this.renderer.updatePromise();
    }
    /**
     *
     * @param position start or end
     * @param symbol coda, etc.
     */
    setRepeatSymbol(position, symbol) {
        const params = _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRepeatSymbol.defaults;
        params.position = position;
        params.symbol = symbol;
        const obj = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRepeatSymbol(params);
        const altObj = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRepeatSymbol(params);
        const selection = this.tracker.selections[0];
        this._undoColumn('set repeat symbol', selection.selector.measure);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setRepeatSymbol(this.score, selection, obj);
        const altSel = this._getEquivalentSelection(selection);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setRepeatSymbol(this.storeScore, altSel, altObj);
        this._renderChangedMeasures([selection]);
        return this.renderer.updatePromise();
    }
    /**
     *  toggle rehearsal mark on first selected measure
     * @returns
     */
    toggleRehearsalMark() {
        const selection = this.tracker.getExtremeSelection(-1);
        const altSelection = this._getEquivalentSelection(selection);
        const cmd = selection.measure.getRehearsalMark() ? 'removeRehearsalMark' : 'addRehearsalMark';
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation[cmd](this.score, selection, new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRehearsalMark(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRehearsalMark.defaults));
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation[cmd](this.storeScore, altSelection, new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRehearsalMark(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoRehearsalMark.defaults));
        this._renderChangedMeasures([selection]);
        return this.renderer.updatePromise();
    }
    _removeStaffModifier(modifier) {
        this.score.staves[modifier.associatedStaff].removeStaffModifier(modifier);
        const altModifier = _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__.StaffModifierBase.deserialize(modifier.serialize());
        altModifier.startSelector = this._getEquivalentSelector(altModifier.startSelector);
        altModifier.endSelector = this._getEquivalentSelector(altModifier.endSelector);
        this.storeScore.staves[this._getEquivalentStaff(modifier.associatedStaff)].removeStaffModifier(altModifier);
    }
    /**
     * Remove selected modifier
     * @param modifier slur, hairpin, etc.
     * @returns
     */
    removeStaffModifier(modifier) {
        this._undoStaffModifier('Set measure proportion', modifier, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.REMOVE);
        this._removeStaffModifier(modifier);
        this._renderRectangle(modifier.startSelector, modifier.endSelector);
        return this.renderer.updatePromise();
    }
    /**
     * Change a staff modifier
     * @param original original version
     * @param modifier modified version
     * @returns
     */
    addOrUpdateStaffModifier(original, modifier) {
        if (!modifier) {
            if (original) {
                // Handle legacy API changed
                modifier = _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__.StaffModifierBase.deserialize(original);
            }
            else {
                console.warn('update modifier: bad modifier');
                return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
            }
        }
        const existing = this.score.staves[modifier.startSelector.staff]
            .getModifier(modifier);
        const subtype = existing === null ? _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.ADD :
            _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.UPDATE;
        this._undoStaffModifier('Set measure proportion', original, subtype);
        this._removeStaffModifier(modifier);
        const copy = _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__.StaffModifierBase.deserialize(modifier.serialize());
        copy.startSelector = this._getEquivalentSelector(copy.startSelector);
        copy.endSelector = this._getEquivalentSelector(copy.endSelector);
        const sel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.noteFromSelector(this.score, modifier.startSelector);
        if (sel !== null) {
            const altSel = this._getEquivalentSelection(sel);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addStaffModifier(sel, modifier);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addStaffModifier(altSel, copy);
            const modId = 'mod-' + sel.selector.staff + '-' + sel.selector.measure;
            const context = this.renderer.renderer.getRenderer(sel.measure.svg.logicalBox);
            if (context) {
                _svgHelpers__WEBPACK_IMPORTED_MODULE_21__.SvgHelpers.removeElementsByClass(context.svg, modId);
            }
        }
        this._renderRectangle(modifier.startSelector, modifier.endSelector);
        return this.renderer.updatePromise();
    }
    _lineOperation(op) {
        // if (this.tracker.selections.length < 2) {
        //   return;
        // }
        const measureSelections = this._undoTrackerMeasureSelections(op);
        const ft = this.tracker.getExtremeSelection(-1);
        const tt = this.tracker.getExtremeSelection(1);
        const ftAlt = this._getEquivalentSelection(ft);
        const ttAlt = this._getEquivalentSelection(tt);
        const modifier = _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation[op](ft, tt);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation[op](ftAlt, ttAlt);
        this._undoStaffModifier('add ' + op, modifier, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.ADD);
        this._renderChangedMeasures(measureSelections);
    }
    /**
     * Add crescendo to selection
     */
    crescendo() {
        this._lineOperation('crescendo');
        return this.renderer.updatePromise();
    }
    /**
     * Add crescendo to selection
     */
    crescendoBracket() {
        this._lineOperation('crescendoBracket');
        return this.renderer.updatePromise();
    }
    /**
     * Add crescendo to selection
     */
    dimenuendo() {
        this._lineOperation('dimenuendo');
        return this.renderer.updatePromise();
    }
    /**
     * Add crescendo to selection
     */
    accelerando() {
        this._lineOperation('accelerando');
        return this.renderer.updatePromise();
    }
    /**
     * Add crescendo to selection
     */
    ritard() {
        this._lineOperation('ritard');
        return this.renderer.updatePromise();
    }
    /**
     * diminuendo selections
     * @returns
     */
    decrescendo() {
        this._lineOperation('decrescendo');
        return this.renderer.updatePromise();
    }
    removeTextBracket(bracket) {
        return this.removeStaffModifier(bracket);
    }
    addOrReplaceTextBracket(modifier) {
        const from1 = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.noteFromSelector(this.score, modifier.startSelector);
        const to1 = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.noteFromSelector(this.score, modifier.endSelector);
        if (from1 === null || to1 === null) {
            return;
        }
        const altFrom = this._getEquivalentSelection(from1);
        const altTo = this._getEquivalentSelection(to1);
        if (altFrom === null || altTo === null) {
            return;
        }
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addOrReplaceBracket(modifier, from1, to1);
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addOrReplaceBracket(modifier, altFrom, altTo);
        const redraw = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.getMeasuresBetween(this.score, from1.selector, to1.selector);
        this._undoStaffModifier('add repl text bracket', modifier, _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.ADD);
        this._renderChangedMeasures(redraw);
        return this.renderer.updatePromise();
    }
    /**
     * Slur selected notes
     * @returns
     */
    slur() {
        const measureSelections = this._undoTrackerMeasureSelections('slur');
        const ft = this.tracker.getExtremeSelection(-1);
        const tt = this.tracker.getExtremeSelection(1);
        const ftAlt = this._getEquivalentSelection(ft);
        const ttAlt = this._getEquivalentSelection(tt);
        const modifier = _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.slur(this.score, ft, tt);
        const altModifier = _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.slur(this.storeScore, ftAlt, ttAlt);
        this._undoStaffModifier('add ' + 'op', new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__.SmoSlur(modifier), _smo_xform_undo__WEBPACK_IMPORTED_MODULE_10__.UndoBuffer.bufferSubtypes.ADD);
        this._renderChangedMeasures(measureSelections);
        return this.renderer.updatePromise();
    }
    /**
     * tie selected notes
     * @returns
     */
    tie() {
        this._lineOperation('tie');
        return this.renderer.updatePromise();
    }
    updateZoom(zoomFactor) {
        const original = this.score.layoutManager.getGlobalLayout();
        original.zoomScale = zoomFactor;
        this.score.layoutManager.globalLayout.zoomScale = zoomFactor;
        this.renderer.pageMap.updateZoom(zoomFactor);
        this.renderer.pageMap.updateContainerOffset(this.scroller.scrollState);
    }
    /**
     * set global page for score, zoom etc.
     * @param layout global SVG settings
     * @returns
     */
    setGlobalLayout(layout) {
        this._undoScore('Set Global Layout');
        const original = this.score.layoutManager.getGlobalLayout().svgScale;
        this.score.layoutManager.updateGlobalLayout(layout);
        this.score.scaleTextGroups(original / layout.svgScale);
        this.storeScore.layoutManager.updateGlobalLayout(layout);
        this.renderer.rerenderAll();
        return this.renderer.preserveScroll();
    }
    /**
     * Set the layout of a single page
     * @param layout page layout
     * @param pageIndex which page to change
     * @returns
     */
    _setPageLayout(layout, pageIndex) {
        this.score.layoutManager.updatePage(layout, pageIndex);
        this.storeScore.layoutManager.updatePage(layout, pageIndex);
        // If we are in part mode, save the page layout in the part so it is there next time
        // the part is exposed.
        if (this.isPartExposed()) {
            this.score.staves.forEach((staff, staffIx) => {
                staff.partInfo.layoutManager.updatePage(layout, pageIndex);
                const altStaff = this.storeScore.staves[this.staffMap[staffIx]];
                altStaff.partInfo.layoutManager.updatePage(layout, pageIndex);
            });
        }
    }
    setPageLayouts(layout, startIndex, endIndex) {
        this._undoScore('Set Page Layout');
        let i = 0;
        for (i = startIndex; i <= endIndex; ++i) {
            this._setPageLayout(layout, i);
        }
        this.renderer.rerenderAll();
        return this.renderer.updatePromise();
    }
    /**
     * Update the music font
     * @param family
     * @returns
     */
    setEngravingFontFamily(family) {
        this.score.engravingFont = family;
        this.storeScore.engravingFont = family;
        this.renderer.notifyFontChange();
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * Upate global font used for chord changes
     * @param fontInfo
     * @returns
     */
    setChordFont(fontInfo) {
        this._undoScore('Set Chord Font');
        this.score.setChordFont(fontInfo);
        this.storeScore.setChordFont(fontInfo);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * Update font used for lyrics
     * @param fontInfo
     * @returns
     */
    setLyricFont(fontInfo) {
        this._undoScore('Set Lyric Font');
        this.score.setLyricFont(fontInfo);
        this.storeScore.setLyricFont(fontInfo);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * @param value if false, lyric widths don't affect measure width
     * @returns
     */
    setLyricAdjustWidth(value) {
        this._undoScore('Set Lyric Adj Width');
        this.score.setLyricAdjustWidth(value);
        this.storeScore.setLyricAdjustWidth(value);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * delete selected measures
     * @returns
     */
    deleteMeasure() {
        this._undoScore('Delete Measure');
        if (this.storeScore.staves[0].measures.length < 2) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        const selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.getMeasureList(this.tracker.selections);
        // THe measures get renumbered, so keep the index at 0
        const index = selections[0].selector.measure;
        for (var i = 0; i < selections.length; ++i) {
            // Unrender the deleted measure
            this.score.staves.forEach((staff) => {
                this.tracker.clearMeasureMap(staff.measures[index]);
                this.renderer.unrenderMeasure(staff.measures[index]);
                this.renderer.unrenderMeasure(staff.measures[staff.measures.length - 1]);
                // A little hacky - delete the modifiers if they start or end on
                // the measure
                staff.modifiers.forEach((modifier) => {
                    if (modifier.startSelector.measure === index || modifier.endSelector.measure === index) {
                        if (modifier.logicalBox) {
                            const context = this.renderer.renderer.getRenderer(modifier.logicalBox);
                            if (context) {
                                $(context.svg).find('g.' + modifier.attrs.id).remove();
                            }
                        }
                    }
                });
            });
            // Remove the SVG artifacts mapped to this measure.
            this.score.deleteMeasure(index);
            this.storeScore.deleteMeasure(index);
            // Note: index doesn't increment since there are now 1 fewer measures
        }
        ;
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * add number of measures, with default notes selections
     * @param append
     * @param numberToAdd
     * @returns
     */
    addMeasures(append, numberToAdd) {
        let pos = 0;
        let ix = 0;
        this._undoScore('Add Measure');
        for (ix = 0; ix < numberToAdd; ++ix) {
            const measure = this.tracker.getFirstMeasureOfSelection();
            if (measure) {
                const nmeasure = _smo_data_measure__WEBPACK_IMPORTED_MODULE_4__.SmoMeasure.getDefaultMeasureWithNotes(measure);
                pos = measure.measureNumber.measureIndex;
                if (append) {
                    pos += 1;
                }
                nmeasure.measureNumber.measureIndex = pos;
                nmeasure.setActiveVoice(0);
                this.score.addMeasure(pos);
                this.storeScore.addMeasure(pos);
            }
        }
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * add a single measure before or after selection
     * @param append
     * @returns
     */
    addMeasure(append) {
        this._undoScore('Add Measure');
        let pos = 0;
        const measure = this.tracker.getFirstMeasureOfSelection();
        if (!measure) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        const nmeasure = _smo_data_measure__WEBPACK_IMPORTED_MODULE_4__.SmoMeasure.getDefaultMeasureWithNotes(measure);
        pos = measure.measureNumber.measureIndex;
        if (append) {
            pos += 1;
        }
        nmeasure.measureNumber.measureIndex = pos;
        nmeasure.setActiveVoice(0);
        this.score.addMeasure(pos);
        this.storeScore.addMeasure(pos);
        this.renderer.clearLine(measure);
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    /**
     * remove an entire line of music
     * @returns
     */
    removeStaff() {
        this._undoScore('Remove Instrument');
        if (this.storeScore.staves.length < 2 || this.score.staves.length < 2) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_22__.PromiseHelpers.emptyPromise();
        }
        // if we are looking at a subset of the score,
        // revert to the full score view before removing the staff.
        const sel = this.tracker.selections[0];
        const scoreSel = this._getEquivalentSelection(sel);
        const staffIndex = scoreSel.selector.staff;
        _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.removeStaff(this.storeScore, staffIndex);
        this.viewAll();
        this.renderer.setRefresh();
        return this.renderer.updatePromise();
    }
    addStaff(instrument) {
        this._undoScore('Add Instrument');
        // if we are looking at a subset of the score, we won't see the new staff.  So
        // revert to the full view
        const staff = _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addStaff(this.storeScore, instrument);
        const instKeys = Object.keys(staff.measureInstrumentMap);
        // update the key signatures for the new part
        instKeys.forEach((key) => {
            const numKey = parseInt(key, 10);
            const inst = staff.measureInstrumentMap[numKey];
            const selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.innerSelections(this.storeScore, inst.startSelector, inst.endSelector);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.changeInstrument(inst, selections);
        });
        if (instrument.alignWithPrevious && instrument.staffId > 0) {
            const sel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelector.default;
            sel.staff = instrument.staffId - 1;
            const selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.measureSelection(this.storeScore, instrument.staffId - 1, 0);
            if (selection) {
                let grp = this.storeScore.getSystemGroupForStaff(selection);
                if (grp) {
                    grp.endSelector.staff = instrument.staffId;
                }
                else {
                    let grp = new _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSystemGroup(_smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSystemGroup.defaults);
                    grp.startSelector.staff = instrument.staffId - 1;
                    grp.endSelector.staff = instrument.staffId;
                    this.storeScore.systemGroups.push(grp);
                }
            }
        }
        this.viewAll();
        return this.renderer.updatePromise();
    }
    /**
     * Update part info assumes that the part is currently exposed - that
     * staff 0 is the first staff in the part prior to editing.
     * @param info
     */
    updatePartInfo(info) {
        let i = 0;
        this._undoScore('Update part info');
        const storeStaff = this.staffMap[0] - info.stavesBefore;
        const partLength = info.stavesBefore + info.stavesAfter + 1;
        const resetView = !_smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLayoutManager.areLayoutsEqual(info.layoutManager.getGlobalLayout(), this.score.layoutManager.getGlobalLayout());
        const restChange = this.score.staves[0].partInfo.expandMultimeasureRests != info.expandMultimeasureRests;
        for (i = 0; i < partLength; ++i) {
            const nStaffIndex = storeStaff + i;
            const nInfo = new _smo_data_partInfo__WEBPACK_IMPORTED_MODULE_3__.SmoPartInfo(info);
            nInfo.stavesBefore = i;
            nInfo.stavesAfter = partLength - i - 1;
            this.storeScore.staves[nStaffIndex].partInfo = nInfo;
            // If the staff index is currently displayed, 
            const displayedIndex = this.staffMap.findIndex((x) => x === nStaffIndex);
            if (displayedIndex >= 0) {
                this.score.staves[displayedIndex].partInfo = new _smo_data_partInfo__WEBPACK_IMPORTED_MODULE_3__.SmoPartInfo(nInfo);
                this.score.layoutManager = nInfo.layoutManager;
            }
        }
        if (resetView || restChange) {
            this.renderer.rerenderAll();
        }
        return this.renderer.updatePromise();
    }
    /**
     * A simpler API for applications to add a new staff to the score.
     * @param params - the instrument, which determines clef, etc.
     * @returns
     */
    addStaffSimple(params) {
        var _a;
        const instrumentParams = _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__.SmoInstrument.defaults;
        instrumentParams.startSelector.staff = instrumentParams.endSelector.staff = this.score.staves.length;
        instrumentParams.clef = (_a = params.clef) !== null && _a !== void 0 ? _a : instrumentParams.clef;
        const staffParams = _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_2__.SmoSystemStaff.defaults;
        staffParams.measureInstrumentMap[0] = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_19__.SmoInstrument(instrumentParams);
        this.addStaff(staffParams);
        return this.renderer.updatePromise();
    }
    /**
     * Save the score to local storage.
     */
    quickSave() {
        const scoreStr = JSON.stringify(this.storeScore.serialize());
        localStorage.setItem(_common_serializationHelpers__WEBPACK_IMPORTED_MODULE_12__.smoSerialize.localScore, scoreStr);
    }
    updateRepeatCount(count) {
        const measureSelections = this._undoTrackerMeasureSelections('repeat bar');
        const symbol = count > 0 ? true : false;
        measureSelections.forEach((ms) => {
            const store = this._getEquivalentSelection(ms);
            ms.measure.repeatCount = count;
            ms.measure.repeatSymbol = symbol;
            if (store) {
                store.measure.repeatCount = count;
                store.measure.repeatSymbol = symbol;
            }
        });
        this._renderChangedMeasures(measureSelections);
        return this.updatePromise();
    }
    /**
     * Update the measure formatting parameters for the current selection
     * @param format generic measure formatting parameters
     * @returns
     */
    setMeasureFormat(format) {
        const label = 'set measure format';
        const fromSelector = this.tracker.getExtremeSelection(-1).selector;
        const toSelector = this.tracker.getExtremeSelection(1).selector;
        const measureSelections = this.tracker.getSelectedMeasures();
        // If the formatting is on a part, preserve it in the part's info
        const isPart = this.isPartExposed();
        measureSelections.forEach((m) => {
            this._undoColumn(label, m.selector.measure);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setMeasureFormat(this.score, m, format);
            if (isPart) {
                m.staff.partInfo.measureFormatting[m.measure.measureNumber.measureIndex] = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoMeasureFormat(format);
            }
            const alt = this._getEquivalentSelection(m);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setMeasureFormat(this.storeScore, alt, format);
            if (isPart) {
                alt.staff.partInfo.measureFormatting[m.measure.measureNumber.measureIndex] = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoMeasureFormat(format);
            }
        });
        this._renderRectangle(fromSelector, toSelector);
        return this.renderer.updatePromise();
    }
    /**
     * Remove system breaks from the measure formatting for selected measures
     * @returns
     */
    removeSystemBreaks() {
        const label = 'set measure format';
        const fromSelector = this.tracker.getExtremeSelection(-1).selector;
        const toSelector = this.tracker.getExtremeSelection(1).selector;
        const measureSelections = this.tracker.getSelectedMeasures();
        // If the formatting is on a part, preserve it in the part's info
        const isPart = this.isPartExposed();
        measureSelections.forEach((m) => {
            this._undoColumn(label, m.selector.measure);
            const format = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoMeasureFormat(m.measure.format);
            format.systemBreak = false;
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setMeasureFormat(this.score, m, format);
            if (isPart) {
                m.staff.partInfo.measureFormatting[m.measure.measureNumber.measureIndex] = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoMeasureFormat(format);
            }
            const alt = this._getEquivalentSelection(m);
            _smo_xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.setMeasureFormat(this.storeScore, alt, format);
            if (isPart) {
                alt.staff.partInfo.measureFormatting[m.measure.measureNumber.measureIndex] = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoMeasureFormat(format);
            }
        });
        this._renderRectangle(fromSelector, toSelector);
        return this.renderer.updatePromise();
    }
    renumberMeasures(measureIndex, localIndex) {
        this.score.updateRenumberingMap(measureIndex, localIndex);
        this.storeScore.updateRenumberingMap(measureIndex, localIndex);
        const mmsel = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_18__.SmoSelection.measureSelection(this.score, 0, measureIndex);
        if (mmsel) {
            this._renderChangedMeasures([mmsel]);
        }
        return this.renderer.updatePromise();
    }
    /**
     * Play the music from the starting selection
     * @returns
     */
    playFromSelection() {
        var mm = this.tracker.getExtremeSelection(-1);
        if (_audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer.playingInstance && _audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer.playingInstance.paused) {
            _audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer.playingInstance.play();
            return;
        }
        if (_audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer.playing) {
            return;
        }
        new _audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer({ audioAnimation: this.audioAnimation, score: this.score, startIndex: mm.selector.measure, view: this }).play();
    }
    stopPlayer() {
        _audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer.stopPlayer();
    }
    pausePlayer() {
        _audio_player__WEBPACK_IMPORTED_MODULE_16__.SuiAudioPlayer.pausePlayer();
    }
    /**
     * Proxy calls to move the tracker parameters according to the
     * rules of the 'Home' key (depending on shift/ctrl/alt)
     * @param ev
     * @returns
     */
    moveHome(ev) {
        this.tracker.moveHome(this.score, ev);
        return this.renderer.updatePromise();
    }
    /**
     * Proxy calls to move the tracker parameters according to the
     * rules of the 'End' key (depending on shift/ctrl/alt)
     * @param ev
     * @returns
     */
    moveEnd(ev) {
        this.tracker.moveEnd(this.score, ev);
        return this.renderer.updatePromise();
    }
    /**
     * Grow the current selection by one to the left, if possible
     * @param ev
     * @returns
     */
    growSelectionLeft() {
        this.tracker.growSelectionLeft();
        return this.renderer.updatePromise();
    }
    /**
     * Grow the current selection by one to the right, if possible
     * @param ev
     * @returns
     */
    growSelectionRight() {
        this.tracker.growSelectionRight();
        return this.renderer.updatePromise();
    }
    /**
     * Select the next tabbable modifier near one of the selected notes
     * @param keyEv
     * @returns
     */
    advanceModifierSelection(keyEv) {
        this.tracker.advanceModifierSelection(this.score, keyEv);
        return this.renderer.updatePromise();
    }
    /**
     * Select the next entire measure, if possible
     * @returns
     */
    growSelectionRightMeasure() {
        this.tracker.growSelectionRightMeasure();
        return this.renderer.updatePromise();
    }
    /**
     * Advance cursor forwards, if possible
     * @param ev
     * @returns
     */
    moveSelectionRight(ev) {
        this.tracker.moveSelectionRight(this.score, ev, true);
        return this.renderer.updatePromise();
    }
    /**
     * Advance cursor backwards, if possible
     * @param ev
     * @returns
     */
    moveSelectionLeft() {
        this.tracker.moveSelectionLeft();
        return this.renderer.updatePromise();
    }
    /**
     * Advance cursor back entire measure, if possible
     * @returns
     */
    moveSelectionLeftMeasure() {
        this.tracker.moveSelectionLeftMeasure();
        return this.renderer.updatePromise();
    }
    /**
     * Advance cursor forward one measure, if possible
     * @returns
     */
    moveSelectionRightMeasure() {
        this.tracker.moveSelectionRightMeasure();
        return this.renderer.updatePromise();
    }
    /**
     * Move cursor to a higher pitch in the current chord, with wrap
     * @returns
     */
    moveSelectionPitchUp() {
        this.tracker.moveSelectionPitchUp();
        return this.renderer.updatePromise();
    }
    /**
     * Move cursor to a lower pitch in the current chord, with wrap
     */
    moveSelectionPitchDown() {
        this.tracker.moveSelectionPitchDown();
        return this.renderer.updatePromise();
    }
    /**
     * Move cursor up a staff in the system, if possible
     * @returns
     */
    moveSelectionUp() {
        this.tracker.moveSelectionUp();
        return this.renderer.updatePromise();
    }
    /**
     * Move cursor down a staff in the system, if possible
     * @returns
     */
    moveSelectionDown() {
        this.tracker.moveSelectionDown();
        return this.renderer.updatePromise();
    }
    /**
     * Set the current suggestions (hover element) as the selection
     * @returns
     */
    selectSuggestion(evData) {
        this.tracker.selectSuggestion(this.score, evData);
        return this.renderer.updatePromise();
    }
    /**
     * Find an element at the given box, and make it the current selection
     *  */
    intersectingArtifact(evData) {
        this.tracker.intersectingArtifact(evData);
        return this.renderer.updatePromise();
    }
}


/***/ }),

/***/ "./src/render/sui/scroller.ts":
/*!************************************!*\
  !*** ./src/render/sui/scroller.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScroller: () => (/* binding */ SuiScroller)
/* harmony export */ });
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layoutDebug */ "./src/render/sui/layoutDebug.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



/**
 * Respond to scroll events in music DOM, and handle the scroll of the viewport
 * @category SuiRender
 */
class SuiScroller {
    // ### constructor
    // selector is the scrollable DOM container of the music container
    // (grandparent of svg element)
    constructor(selector, svgPages) {
        this.viewport = _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        this.logicalViewport = _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        this.scrolling = false;
        const self = this;
        this.selector = selector;
        this._scroll = { x: 0, y: 0 };
        this.svgPages = svgPages;
        const scroller = $(selector);
        this._offsetInitial = { x: $(scroller).offset().left, y: $(scroller).offset().top };
    }
    get scrollState() {
        return { x: this._scroll.x, y: this._scroll.y };
    }
    restoreScrollState(state) {
        this.scrollOffset(state.x - this._scroll.x, state.y - this._scroll.y);
        this.deferUpdateDebug();
    }
    // ### handleScroll
    // update viewport in response to scroll events
    handleScroll(x, y) {
        this._scroll = { x, y };
        this.deferUpdateDebug();
    }
    updateDebug() {
        _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.updateScrollDebug(this._scroll);
    }
    deferUpdateDebug() {
        if (_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.mask & _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.values.scroll) {
            setTimeout(() => {
                this.updateDebug();
            }, 1);
        }
    }
    scrollAbsolute(x, y) {
        $(this.selector)[0].scrollLeft = x;
        $(this.selector)[0].scrollTop = y;
        this.netScroll.x = this._scroll.x = x;
        this.netScroll.y = this._scroll.y = y;
        this.deferUpdateDebug();
    }
    /**
     * Scroll such that the box is fully visible, if possible (if it is
     * not larger than the screen)
     **/
    scrollVisibleBox(box) {
        let yoff = 0;
        let xoff = 0;
        const screenBox = this.svgPages.svgToClientNoOffset(box);
        const scrollState = this.scrollState;
        const scrollDown = () => screenBox.y + screenBox.height > scrollState.y + this.viewport.height;
        const scrollUp = () => screenBox.y < scrollState.y;
        const scrollLeft = () => screenBox.x < scrollState.x;
        const scrollRight = () => screenBox.x + screenBox.width > scrollState.x + this.viewport.width;
        // Math: make sure we don't scroll down if scrollUp is indicated, etc.
        if (scrollUp()) {
            yoff = Math.min(screenBox.y - scrollState.y, 0);
        }
        if (scrollDown()) {
            yoff = Math.max(screenBox.y - (scrollState.y - screenBox.height), 0);
        }
        if (scrollLeft()) {
            xoff = Math.min(screenBox.x - scrollState.x, 0);
        }
        if (scrollRight()) {
            xoff = Math.max(screenBox.x - (scrollState.x - screenBox.height), 0);
        }
        this.scrollOffset(xoff, yoff);
    }
    // Update viewport size, and also fix height of scroll region.
    updateViewport() {
        $(this.selector).css('height', (window.innerHeight - $(this.selector).offset().top).toString() + 'px');
        this.viewport = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints($(this.selector).offset().left, $(this.selector).offset().top, $(this.selector).width(), $(this.selector).height());
        this.deferUpdateDebug();
    }
    // ### scrollBox
    // get the current viewport, in scrolled coordinates.  When tracker maps the
    // music element to client coordinates, these are the coordinates used in the
    // map
    get scrollBox() {
        return _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(this.viewport.x + this.netScroll.x, this.viewport.y + this.netScroll.y, this.viewport.width, this.viewport.height);
    }
    // ### scrollOffset
    // scroll the offset from the starting scroll point
    scrollOffset(x, y) {
        const xScreen = Math.max(this._scroll.x + x, 0);
        const yScreen = Math.max(this._scroll.y + y, 0);
        this.scrollAbsolute(xScreen, yScreen);
    }
    // ### netScroll
    // return the net amount we've scrolled, based on when the maps were make (initial)
    // , the offset of the container, and the absolute coordinates of the scrollbar.
    get netScroll() {
        var xoffset = $(this.selector).offset().left - this._offsetInitial.x;
        var yoffset = $(this.selector).offset().top - this._offsetInitial.y;
        return { x: this._scroll.x - xoffset, y: this._scroll.y - yoffset };
    }
}


/***/ }),

/***/ "./src/render/sui/svgHelpers.ts":
/*!**************************************!*\
  !*** ./src/render/sui/svgHelpers.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SvgBuilder: () => (/* binding */ SvgBuilder),
/* harmony export */   SvgHelpers: () => (/* binding */ SvgHelpers)
/* harmony export */ });
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.

class SvgBuilder {
    constructor(el) {
        const ns = SvgHelpers.namespace;
        this.e = document.createElementNS(ns, el);
    }
    classes(cl) {
        this.e.setAttributeNS('', 'class', cl);
        return this;
    }
    attr(name, value) {
        this.e.setAttributeNS('', name, value);
        return this;
    }
    text(x, y, classes, text) {
        x = typeof (x) == 'string' ? x : x.toString();
        y = typeof (y) == 'string' ? y : y.toString();
        this.e.setAttributeNS('', 'class', classes);
        this.e.setAttributeNS('', 'x', x);
        this.e.setAttributeNS('', 'y', y);
        this.e.textContent = text;
        return this;
    }
    rect(x, y, width, height, classes) {
        x = typeof (x) == 'string' ? x : x.toString();
        y = typeof (y) == 'string' ? y : y.toString();
        width = typeof (width) == 'string' ? width : width.toString();
        height = typeof (height) == 'string' ? height : height.toString();
        this.e.setAttributeNS('', 'x', x);
        this.e.setAttributeNS('', 'y', y);
        this.e.setAttributeNS('', 'width', width);
        this.e.setAttributeNS('', 'height', height);
        if (classes) {
            this.e.setAttributeNS('', 'class', classes);
        }
        return this;
    }
    line(x1, y1, x2, y2, classes) {
        x1 = typeof (x1) == 'string' ? x1 : x1.toString();
        y1 = typeof (y1) == 'string' ? y1 : y1.toString();
        x2 = typeof (x2) == 'string' ? x2 : x2.toString();
        y2 = typeof (y2) == 'string' ? y2 : y2.toString();
        this.e.setAttributeNS('', 'x1', x1);
        this.e.setAttributeNS('', 'y1', y1);
        this.e.setAttributeNS('', 'x2', x2);
        this.e.setAttributeNS('', 'y2', y2);
        if (classes) {
            this.e.setAttributeNS('', 'class', classes);
        }
        return this;
    }
    append(el) {
        this.e.appendChild(el.e);
        return this;
    }
    dom() {
        return this.e;
    }
    static b(element) {
        return new SvgBuilder(element);
    }
}
// ## SvgHelpers
// Mostly utilities for converting coordinate spaces based on transforms, etc.
// ### static class methods:
// ---
class SvgHelpers {
    static get namespace() {
        return "http://www.w3.org/2000/svg";
    }
    // ### gradient
    // Create an svg linear gradient.
    // Stops look like this:
    // `[{color:"#eee", offset:"0%",opacity:0.5}]`
    // orientation is horizontal or vertical
    static gradient(svg, id, orientation, stops) {
        var ns = SvgHelpers.namespace;
        var x2 = orientation === 'vertical' ? 0 : 1;
        var y2 = orientation === 'vertical' ? 1 : 0;
        var e = document.createElementNS(ns, 'linearGradient');
        e.setAttributeNS('', 'id', id);
        e.setAttributeNS('', 'x1', '0');
        e.setAttributeNS('', 'x2', x2.toString());
        e.setAttributeNS('', 'y1', '0');
        e.setAttributeNS('', 'y2', y2.toString());
        stops.forEach((stop) => {
            var s = document.createElementNS(ns, 'stop');
            s.setAttributeNS('', 'stop-opacity', stop.opacity.toString());
            s.setAttributeNS('', 'stop-color', stop.color);
            s.setAttributeNS('', 'offset', stop.offset);
            e.appendChild(s);
        });
        svg.appendChild(e);
    }
    static renderCursor(svg, x, y, height) {
        var ns = SvgHelpers.namespace;
        const width = height * 0.4;
        x = x - (width / 2);
        var mcmd = (d, x, y) => {
            return d + 'M ' + x.toString() + ' ' + y.toString() + ' ';
        };
        var qcmd = (d, x1, y1, x2, y2) => {
            return d + 'q ' + x1.toString() + ' ' + y1.toString() + ' ' + x2.toString() + ' ' + y2.toString() + ' ';
        };
        var lcmd = (d, x, y) => {
            return d + 'L ' + x.toString() + ' ' + y.toString() + ' ';
        };
        var x1 = (width / 2) * .333;
        var y1 = -1 * (x1 / 4);
        var x2 = (width / 2);
        var y2 = x2 / 4;
        var ns = SvgHelpers.namespace;
        var e = document.createElementNS(ns, 'path');
        var d = '';
        d = mcmd(d, x, y);
        d = qcmd(d, x1, y1, x2, y2);
        d = lcmd(d, x + (width / 2), y + height - (width / 8));
        d = mcmd(d, x + width, y);
        d = qcmd(d, -1 * x1, y1, -1 * x2, y2);
        d = mcmd(d, x, y + height);
        d = qcmd(d, x1, -1 * y1, x2, -1 * y2);
        d = mcmd(d, x + width, y + height);
        d = qcmd(d, -1 * x1, -1 * y1, -1 * x2, -1 * y2);
        e.setAttributeNS('', 'd', d);
        e.setAttributeNS('', 'stroke-width', '1');
        e.setAttributeNS('', 'stroke', '#555');
        e.setAttributeNS('', 'fill', 'none');
        svg.appendChild(e);
    }
    // ### boxNote
    // update the note geometry based on current viewbox conditions.
    // This may not be the appropriate place for this...maybe in layout
    static updateArtifactBox(context, element, artifact) {
        if (!element) {
            console.log('updateArtifactBox: undefined element!');
            return;
        }
        artifact.logicalBox = context.offsetBbox(element);
    }
    // ### eraseOutline
    // Erases old outlineRects.
    static eraseOutline(params) {
        // Hack:  Assume a stroke style, should just take a stroke param.
        if (params.element) {
            params.element.remove();
            params.element = undefined;
        }
    }
    static outlineRect(params) {
        const context = params.context;
        if (params.element && params.timer) {
            clearTimeout(params.timer);
            params.timer = undefined;
            params.element.remove();
            params.element = undefined;
        }
        if (params.timeOff) {
            params.timer = window.setTimeout(() => {
                if (params.element) {
                    params.element.remove();
                    params.element = undefined;
                    params.timer = undefined;
                }
            }, params.timeOff);
        }
        // Don't highlight in print mode.
        if ($('body').hasClass('printing')) {
            return;
        }
        const classes = params.classes.length > 0 ? params.classes + ' ' + params.stroke.strokeName : params.stroke.strokeName;
        var grp = context.getContext().openGroup(classes, classes + '-outline');
        params.element = grp;
        const boxes = Array.isArray(params.box) ? params.box : [params.box];
        boxes.forEach((box) => {
            if (box) {
                var strokeObj = params.stroke;
                strokeObj['stroke-width'] = params.stroke.strokeWidth;
                var margin = 5;
                /* if (params.clientCoordinates === true) {
                  box = SvgHelpers.smoBox(SvgHelpers.clientToLogical(context.svg, SvgHelpers.smoBox(SvgHelpers.adjustScroll(box, scroll))));
                } */
                context.getContext().rect(box.x - margin, box.y - margin, box.width + margin * 2, box.height + margin * 2, strokeObj);
            }
        });
        context.getContext().closeGroup(grp);
    }
    static setSvgStyle(element, attrs) {
        element.setAttributeNS('', 'stroke', attrs.stroke);
        if (attrs.strokeDasharray) {
            element.setAttributeNS('', 'stroke-dasharray', attrs.strokeDasharray.toString());
        }
        if (attrs.strokeWidth) {
            element.setAttributeNS('', 'stroke-width', attrs.strokeWidth.toString());
        }
        if (attrs.fill) {
            element.setAttributeNS('', 'fill', attrs.fill);
        }
    }
    static rect(svg, box, attrs, classes) {
        var rect = document.createElementNS(SvgHelpers.namespace, 'rect');
        SvgHelpers.setSvgStyle(rect, attrs);
        if (classes) {
            rect.setAttributeNS('', 'class', classes);
        }
        svg.appendChild(rect);
        return rect;
    }
    static line(svg, x1, y1, x2, y2, attrs, classes) {
        var line = document.createElementNS(SvgHelpers.namespace, 'line');
        x1 = typeof (x1) == 'string' ? x1 : x1.toString();
        y1 = typeof (y1) == 'string' ? y1 : y1.toString();
        x2 = typeof (x2) == 'string' ? x2 : x2.toString();
        y2 = typeof (y2) == 'string' ? y2 : y2.toString();
        line.setAttributeNS('', 'x1', x1);
        line.setAttributeNS('', 'y1', y1);
        line.setAttributeNS('', 'x2', x2);
        line.setAttributeNS('', 'y2', y2);
        SvgHelpers.setSvgStyle(line, attrs);
        if (classes) {
            line.setAttributeNS('', 'class', classes);
        }
        svg.appendChild(line);
    }
    static arrowDown(svg, box) {
        const arrowStroke = { strokeName: 'arrow-stroke', stroke: '#321', strokeWidth: '2', strokeDasharray: '4,1', fill: 'none', opacity: 1.0 };
        SvgHelpers.line(svg, box.x + box.width / 2, box.y, box.x + box.width / 2, box.y + box.height, arrowStroke, '');
        var arrowY = box.y + box.height / 4;
        SvgHelpers.line(svg, box.x, arrowY, box.x + box.width / 2, box.y + box.height, arrowStroke, '');
        SvgHelpers.line(svg, box.x + box.width, arrowY, box.x + box.width / 2, box.y + box.height, arrowStroke, '');
    }
    static debugBox(svg, box, classes, voffset) {
        voffset = voffset !== null && voffset !== void 0 ? voffset : 0;
        classes = classes !== null && classes !== void 0 ? classes : '';
        if (!box)
            return;
        classes += ' svg-debug-box';
        var b = SvgBuilder.b;
        var mid = box.x + box.width / 2;
        var xtext = 'x1: ' + Math.round(box.x);
        var wtext = 'x2: ' + Math.round(box.width + box.x);
        var ytext = 'y1: ' + Math.round(box.y);
        var htext = 'y2: ' + Math.round(box.height + box.y);
        var ytextp = Math.round(box.y + box.height);
        var ytextp2 = Math.round(box.y + box.height - 30);
        var r = b('g').classes(classes)
            .append(b('text').text(box.x + 20, box.y - 14 + voffset, 'svg-debug-text', xtext))
            .append(b('text').text(mid - 20, box.y - 14 + voffset, 'svg-debug-text', wtext))
            .append(b('line').line(box.x, box.y - 2, box.x + box.width, box.y - 2, ''))
            .append(b('line').line(box.x, box.y - 8, box.x, box.y + 5, ''))
            .append(b('line').line(box.x + box.width, box.y - 8, box.x + box.width, box.y + 5, ''))
            .append(b('text').text(Math.round(box.x - 14 + voffset), ytextp, 'svg-vdebug-text', ytext)
            .attr('transform', 'rotate(-90,' + Math.round(box.x - 14 + voffset) + ',' + ytextp + ')'));
        if (box.height > 2) {
            r.append(b('text').text(Math.round(box.x - 14 + voffset), ytextp2, 'svg-vdebug-text', htext)
                .attr('transform', 'rotate(-90,' + Math.round(box.x - 14 + voffset) + ',' + (ytextp2) + ')'))
                .append(b('line').line(Math.round(box.x - 2), Math.round(box.y + box.height), box.x - 2, box.y, ''))
                .append(b('line').line(Math.round(box.x - 8), Math.round(box.y + box.height), box.x + 6, Math.round(box.y + box.height), ''))
                .append(b('line').line(Math.round(box.x - 8), Math.round(box.y), Math.round(box.x + 6), Math.round(box.y), ''));
        }
        svg.appendChild(r.dom());
    }
    static debugBoxNoText(svg, box, classes, voffset) {
        voffset = voffset !== null && voffset !== void 0 ? voffset : 0;
        classes = classes !== null && classes !== void 0 ? classes : '';
        if (!box)
            return;
        classes += ' svg-debug-box';
        var b = SvgBuilder.b;
        var r = b('g').classes(classes)
            .append(b('line').line(box.x, box.y - 2, box.x + box.width, box.y - 2, ''))
            .append(b('line').line(box.x, box.y - 8, box.x, box.y + 5, ''))
            .append(b('line').line(box.x + box.width, box.y - 8, box.x + box.width, box.y + 5, ''));
        if (box.height > 2) {
            r.append(b('line').line(Math.round(box.x - 2), Math.round(box.y + box.height), box.x - 2, box.y, ''))
                .append(b('line').line(Math.round(box.x - 8), Math.round(box.y + box.height), box.x + 6, Math.round(box.y + box.height), ''))
                .append(b('line').line(Math.round(box.x - 8), Math.round(box.y), Math.round(box.x + 6), Math.round(box.y), ''));
        }
        svg.appendChild(r.dom());
    }
    static placeSvgText(svg, attributes, classes, text) {
        var ns = SvgHelpers.namespace;
        var e = document.createElementNS(ns, 'text');
        attributes.forEach((attr) => {
            var key = Object.keys(attr)[0];
            e.setAttributeNS('', key, attr[key].toString());
        });
        if (classes) {
            e.setAttributeNS('', 'class', classes);
        }
        var tn = document.createTextNode(text);
        e.appendChild(tn);
        svg.appendChild(e);
        return e;
    }
    static doesBox1ContainBox2(box1, box2) {
        if (!box1 || !box2) {
            return false;
        }
        const i1 = box2.x - box1.x;
        const i2 = box2.y - box1.y;
        return (i1 > 0 && i1 < box1.width && i2 > 0 && i2 < box1.height);
    }
    // ### findIntersectionArtifact
    // find all object that intersect with the rectangle
    static findIntersectingArtifact(clientBox, objects) {
        var box = SvgHelpers.smoBox(clientBox); //svgHelpers.untransformSvgPoint(this.context.svg,clientBox);
        // box.y = box.y - this.renderElement.offsetTop;
        // box.x = box.x - this.renderElement.offsetLeft;
        var rv = [];
        objects.forEach((object) => {
            // Measure has been updated, but not drawn.
            if (!object.box) {
                // console.log('there is no box');
            }
            else {
                var obox = SvgHelpers.smoBox(object.box);
                if (SvgHelpers.doesBox1ContainBox2(obox, box)) {
                    rv.push(object);
                }
            }
        });
        return rv;
    }
    static findSmallestIntersection(clientBox, objects) {
        var ar = SvgHelpers.findIntersectingArtifact(clientBox, objects);
        if (!ar.length) {
            return null;
        }
        var rv = ar[0];
        var min = ar[0].box.width * ar[0].box.height;
        ar.forEach((obj) => {
            var tst = obj.box.width * obj.box.height;
            if (tst < min) {
                rv = obj;
                min = tst;
            }
        });
        return rv;
    }
    static translateElement(g, x, y) {
        g.setAttributeNS('', 'transform', 'translate(' + x + ' ' + y + ')');
    }
    static stringify(box) {
        if (box['width']) {
            return JSON.stringify({
                x: box.x,
                y: box.y,
                width: box.width,
                height: box.height
            }, null, ' ');
        }
        else {
            return JSON.stringify({
                x: box.x,
                y: box.y
            }, null, ' ');
        }
    }
    static log(box) {
        if (box['width']) {
            console.log(JSON.stringify({
                x: box.x,
                y: box.y,
                width: box.width,
                height: box.height
            }, null, ' '));
        }
        else {
            console.log('{}');
        }
    }
    // ### smoBox:
    // return a simple box object that can be serialized, copied
    // (from svg DOM box)
    static smoBox(box) {
        if (typeof (box) === "undefined" || box === null) {
            return _smo_data_common__WEBPACK_IMPORTED_MODULE_0__.SvgBox.default;
        }
        let testBox = box;
        if (Array.isArray(box)) {
            testBox = box[0];
        }
        const hround = (f) => {
            return Math.round((f + Number.EPSILON) * 100) / 100;
        };
        const x = typeof (testBox.x) == 'undefined' ? hround(testBox.left) : hround(testBox.x);
        const y = typeof (testBox.y) == 'undefined' ? hround(testBox.top) : hround(testBox.y);
        return ({
            x: hround(x),
            y: hround(y),
            width: hround(testBox.width),
            height: hround(testBox.height)
        });
    }
    // ### unionRect
    // grow the bounding box two objects to include both.
    static unionRect(b1, b2) {
        const x = Math.min(b1.x, b2.x);
        const y = Math.min(b1.y, b2.y);
        const width = Math.max(b1.x + b1.width, b2.x + b2.width) - x;
        const height = Math.max(b1.y + b1.height, b2.y + b2.height) - y;
        return {
            x: x,
            y: y,
            width: width,
            height: height
        };
    }
    static boxPoints(x, y, w, h) {
        return ({
            x: x,
            y: y,
            width: w,
            height: h
        });
    }
    // ### svgViewport
    // set `svg` element to `width`,`height` and viewport `scale`
    static svgViewport(svg, xOffset, yOffset, width, height, scale) {
        svg.setAttributeNS('', 'width', '' + width);
        svg.setAttributeNS('', 'height', '' + height);
        svg.setAttributeNS('', 'viewBox', '' + xOffset + ' ' + yOffset + ' ' + Math.round(width / scale) + ' ' +
            Math.round(height / scale));
    }
    static removeElementsByClass(svg, className) {
        const els = svg.getElementsByClassName(className);
        const ellength = els.length;
        for (var xxx = 0; xxx < ellength; ++xxx) {
            els[0].remove();
        }
    }
}


/***/ }),

/***/ "./src/render/sui/svgPageMap.ts":
/*!**************************************!*\
  !*** ./src/render/sui/svgPageMap.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MappedMeasures: () => (/* binding */ MappedMeasures),
/* harmony export */   MappedNotes: () => (/* binding */ MappedNotes),
/* harmony export */   MappedSystems: () => (/* binding */ MappedSystems),
/* harmony export */   SelectionMap: () => (/* binding */ SelectionMap),
/* harmony export */   SvgPage: () => (/* binding */ SvgPage),
/* harmony export */   SvgPageMap: () => (/* binding */ SvgPageMap)
/* harmony export */ });
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");






const VF = _common_vex__WEBPACK_IMPORTED_MODULE_5__.VexFlow;
/**
 * A selection map maps a sub-section of music (a measure, for instance) to a region
 * on the screen.  SelectionMap can contain other SelectionMaps with
 * different 'T', for instance, notes in a measure, in a 'Russian Dolls' kind of model.
 * This allows us to search for elements in < O(n) time and avoid
 * expensive geometry operations.
 */
class SelectionMap {
    constructor() {
        /**
         * the outer bounding box of these selections
         */
        this.box = _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        /**
         * map of key to child SelectionMaps or SmoSelections
         */
        this.systemMap = new Map();
    }
    /**
     * Given a bounding box (or point), find all the musical elements contained
     * in that point
     * @param box
     * @returns SmoSelection[]
     */
    findArtifact(box) {
        let rv = [];
        for (const [key, value] of this.systemMap) {
            rv = rv.concat(this.findValueInMap(value, box));
        }
        return rv;
    }
    /**
     * Add a rendered element to the map, and update the bounding box
     * @param selection
     * @returns
     */
    addArtifact(selection) {
        if (!selection.note || !selection.note.logicalBox) {
            return;
        }
        const bounds = this.boxFromSelection(selection);
        if (this.systemMap.size === 0) {
            this.box = JSON.parse(JSON.stringify(bounds));
        }
        const ix = this.createKey(selection);
        this.addKeyToMap(ix, selection);
        this.box = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.unionRect(bounds, this.box);
    }
}
/**
 * logic to map a set of notes to a region on the screen, for searching
 */
class MappedNotes extends SelectionMap {
    createKey(selection) {
        return `${selection.selector.voice}-${selection.selector.tick}`;
    }
    boxFromSelection(selection) {
        var _a, _b;
        return (_b = (_a = selection.note) === null || _a === void 0 ? void 0 : _a.logicalBox) !== null && _b !== void 0 ? _b : _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
    }
    addKeyToMap(key, selection) {
        this.systemMap.set(key, selection);
    }
    findValueInMap(value, box) {
        const rv = [];
        const note = value.note;
        if (note && note.logicalBox && _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.doesBox1ContainBox2(note.logicalBox, box)) {
            rv.push(value);
        }
        return rv;
    }
}
/**
 * Map of measures to a region on the page.
 */
class MappedMeasures extends SelectionMap {
    constructor() {
        super(...arguments);
        this.box = _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        this.systemMap = new Map();
    }
    createKey(selection) {
        return `${selection.selector.staff}-${selection.selector.measure}`;
    }
    boxFromSelection(selection) {
        var _a, _b;
        const noteBox = (_b = (_a = selection.note) === null || _a === void 0 ? void 0 : _a.logicalBox) !== null && _b !== void 0 ? _b : _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        return _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.unionRect(noteBox, selection.measure.svg.logicalBox);
    }
    addKeyToMap(key, selection) {
        var _a;
        if (!this.systemMap.has(key)) {
            const nnote = new MappedNotes();
            this.systemMap.set(key, nnote);
        }
        (_a = this.systemMap.get(key)) === null || _a === void 0 ? void 0 : _a.addArtifact(selection);
    }
    findValueInMap(value, box) {
        let rv = [];
        if (_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.doesBox1ContainBox2(value.box, box)) {
            rv = rv.concat(value.findArtifact(box));
        }
        return rv;
    }
}
/**
 * Map of the systems on a page.  Each system has a unique line index
 * which is the hash
 */
class MappedSystems extends SelectionMap {
    constructor() {
        super(...arguments);
        this.box = _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        this.systemMap = new Map();
    }
    createKey(selection) {
        return selection.measure.svg.lineIndex;
    }
    boxFromSelection(selection) {
        var _a, _b;
        const noteBox = (_b = (_a = selection.note) === null || _a === void 0 ? void 0 : _a.logicalBox) !== null && _b !== void 0 ? _b : _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default;
        return _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.unionRect(noteBox, selection.measure.svg.logicalBox);
    }
    addKeyToMap(selectionKey, selection) {
        var _a;
        if (!this.systemMap.has(selectionKey)) {
            const nmeasure = new MappedMeasures();
            this.systemMap.set(selectionKey, nmeasure);
        }
        (_a = this.systemMap.get(selectionKey)) === null || _a === void 0 ? void 0 : _a.addArtifact(selection);
    }
    findValueInMap(value, box) {
        let rv = [];
        if (_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.doesBox1ContainBox2(value.box, box)) {
            rv = rv.concat(value.findArtifact(box));
        }
        return rv;
    }
    clearMeasure(selection) {
        if (this.systemMap.has(selection.measure.svg.lineIndex)) {
            const mmap = this.systemMap.get(selection.measure.svg.lineIndex);
            if (mmap) {
                this.systemMap.delete(selection.measure.svg.lineIndex);
            }
        }
    }
}
/**
 * Each page is a different SVG element, with its own offset within the DOM. This
 * makes partial updates faster.  SvgPage keeps track of all musical elements in SelectionMaps.
 * staff and score modifiers are kept in seperate lists since they may span multiple
 * musical elements (e.g. slurs, text elements).
 */
class SvgPage {
    static get defaultMap() {
        return {
            box: _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgBox.default,
            systemMap: new Map()
        };
    }
    /**
     * Modifiers are divided into `modifierDivs` vertical
     * rectangles for event lookup.
     */
    static get modifierDivs() {
        return 8;
    }
    /**
     * This is the VextFlow renderer context (SVGContext)
     * @returns
     */
    getContext() {
        return this._renderer.getContext();
    }
    get divSize() {
        return this.box.height / SvgPage.modifierDivs;
    }
    constructor(renderer, pageNumber, box) {
        this.systemMap = new MappedSystems();
        this.modifierYKeys = [];
        this.modifierTabDivs = {};
        this._renderer = renderer;
        this.pageNumber = pageNumber;
        this.box = box;
        let divEnd = this.divSize;
        for (let i = 0; i < SvgPage.modifierDivs; ++i) {
            this.modifierYKeys.push(divEnd);
            divEnd += this.divSize;
        }
    }
    /**
     * Given SVG y, return the div for modifiers
     * @param y
     * @returns
     */
    divIndex(y) {
        return Math.round((y - this.box.y) / this.divSize);
    }
    /**
     * Remove all elements and modifiers in this page, for a redraw.
     */
    clearMap() {
        this.systemMap = new MappedSystems();
        this.modifierTabDivs = {};
    }
    /**
     * Clear mapped objects associated with a measure, including any
     * modifiers that span that measure.
     * @param selection
     */
    clearMeasure(selection) {
        this.systemMap.clearMeasure(selection);
        const div = this.divIndex(selection.measure.svg.logicalBox.y);
        if (div < this.modifierYKeys.length) {
            const mods = [];
            this.modifierTabDivs[div].forEach((mt) => {
                if (mt.selection) {
                    if (!_smo_xform_selections__WEBPACK_IMPORTED_MODULE_4__.SmoSelector.sameMeasure(mt.selection.selector, selection.selector)) {
                        mods.push(mt);
                    }
                }
                else {
                    mods.push(mt);
                }
            });
            this.modifierTabDivs[div] = mods;
        }
    }
    /**
     * add a modifier to the page, indexed by its rectangle
     * @param modifier
     */
    addModifierTab(modifier) {
        const div = this.divIndex(modifier.box.y);
        if (div < this.modifierYKeys.length) {
            if (!this.modifierTabDivs[div]) {
                this.modifierTabDivs[div] = [];
            }
            this.modifierTabDivs[div].push(modifier);
        }
    }
    /**
     * Add a new selection to the page
     * @param selection
     */
    addArtifact(selection) {
        this.systemMap.addArtifact(selection);
    }
    /**
     * Try to find a selection on this page, based on the mouse event
     * @param box
     * @returns
     */
    findArtifact(box) {
        return this.systemMap.findArtifact(box);
    }
    /**
     * Try to find a modifier on this page, based on the mouse event
     * @param box
     * @returns
     */
    findModifierTabs(box) {
        const rv = [];
        const div = this.divIndex(box.y);
        if (div < this.modifierYKeys.length) {
            if (this.modifierTabDivs[div]) {
                this.modifierTabDivs[div].forEach((modTab) => {
                    if (_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.doesBox1ContainBox2(modTab.box, box)) {
                        rv.push(modTab);
                    }
                });
            }
        }
        return rv;
    }
    clearModifiers() {
        Object.keys(this.modifierTabDivs).forEach((key) => {
            const modifiers = this.modifierTabDivs[parseInt(key)];
            modifiers.forEach((mod) => {
                if (mod instanceof _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup) {
                    mod.elements.forEach((element) => {
                        element.remove();
                    });
                    mod.elements = [];
                }
            });
        });
        this.modifierTabDivs = {};
    }
    /**
     * Measure the bounding box of an element.  Return the box as if the top of the first page were 0,0.
     * Bounding boxes are stored in absolute coordinates from the top of the first page.  When rendering
     * elements, we adjust the coordinates for hte local page.
     * @param element
     * @returns
     */
    offsetBbox(element) {
        const yoff = this.box.y;
        const xoff = this.box.x;
        const lbox = element.getBBox();
        return ({ x: lbox.x + xoff, y: lbox.y + yoff, width: lbox.width, height: lbox.height });
    }
    /**
     * Adjust the bounding box to local coordinates for this page.
     * @param box
     * @returns
     */
    offsetSvgBox(box) {
        return { x: box.x - this.box.x, y: box.y - this.box.y, width: box.width, height: box.height };
    }
    /**
     * Adjust the point to local coordinates for this page.
     * @param box
     * @returns
     */
    offsetSvgPoint(box) {
        return { x: box.x - this.box.x, y: box.y - this.box.y };
    }
    get svg() {
        return this.getContext().svg;
    }
}
/**
 * A container for all the SVG elements, and methods to manage adding and finding elements.  Each
 * page of the score has its own SVG element.
 */
class SvgPageMap {
    static get strokes() {
        return {
            'debug-mouse-box': {
                strokeName: 'debug-mouse',
                stroke: '#7ce',
                strokeWidth: 3,
                strokeDasharray: '1,1',
                fill: 'none',
                opacity: 0.6
            }
        };
    }
    /**
     *
     * @param layout - defines the page width/height and relative zoom common to all the pages
     * @param container - the parent DOM element that contains all the pages
     * @param pages - the layouts (margins, etc) for each pages.
     */
    constructor(layout, container, pages) {
        this.vfRenderers = [];
        this.containerOffset = _smo_data_common__WEBPACK_IMPORTED_MODULE_1__.SvgPoint.default;
        this._layout = layout;
        this._container = container;
        this._pageLayouts = pages;
    }
    get container() {
        return this._container;
    }
    /**
     * Update the offset of the music container DOM element, in client coordinates. This is used
     * when converting absolute screen coordinates (like from a mouse event) to SVG coordinates
     * @param scrollPoint
     */
    updateContainerOffset(scrollPoint) {
        const rect = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox(this.container.getBoundingClientRect());
        this.containerOffset = { x: rect.x + scrollPoint.x, y: rect.y + scrollPoint.y };
    }
    get layout() {
        return this._layout;
    }
    get pageLayouts() {
        return this._pageLayouts;
    }
    get zoomScale() {
        return this.layout.zoomScale;
    }
    get renderScale() {
        return this.layout.svgScale;
    }
    get pageDivHeight() {
        return this.layout.pageHeight * this.zoomScale;
    }
    get pageDivWidth() {
        return this.layout.pageWidth * this.zoomScale;
    }
    get pageHeight() {
        return this.layout.pageHeight / this.layout.svgScale;
    }
    get pageWidth() {
        return this.layout.pageWidth / this.layout.svgScale;
    }
    get totalHeight() {
        return this.pageDivHeight * this.pageLayouts.length;
    }
    /**
     * create/re-create all the page SVG elements
     */
    createRenderers() {
        // $(this.container).html('');
        $(this.container).css('width', '' + Math.round(this.pageDivWidth) + 'px');
        $(this.container).css('height', '' + Math.round(this.totalHeight) + 'px');
        const toRemove = [];
        this.vfRenderers.forEach((renderer) => {
            const container = renderer.svg.parentElement;
            if (container) {
                toRemove.push(container);
            }
        });
        toRemove.forEach((tt) => {
            tt.remove();
        });
        this.vfRenderers = [];
        this.pageLayouts.forEach(() => {
            this.addPage();
        });
    }
    addPage() {
        const ix = this.vfRenderers.length;
        const container = document.createElement('div');
        container.setAttribute('id', 'smoosic-svg-div-' + ix.toString());
        this._container.append(container);
        const vexRenderer = new VF.Renderer(container, VF.Renderer.Backends.SVG);
        const svg = vexRenderer.getContext().svg;
        _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.svgViewport(svg, 0, 0, this.pageDivWidth, this.pageDivHeight, this.renderScale * this.zoomScale);
        const topY = this.pageHeight * ix;
        const box = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(0, topY, this.pageWidth, this.pageHeight);
        this.vfRenderers.push(new SvgPage(vexRenderer, ix, box));
    }
    updateZoom(zoomScale) {
        this.layout.zoomScale = zoomScale;
        this.vfRenderers.forEach((pp) => {
            _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.svgViewport(pp.svg, 0, 0, this.pageDivWidth, this.pageDivHeight, this.renderScale * this.zoomScale);
        });
        $(this.container).css('width', '' + Math.round(this.pageDivWidth) + 'px');
        $(this.container).css('height', '' + Math.round(this.totalHeight) + 'px');
    }
    /**
     * Convert from screen/client event to SVG space.  We assume the scroll offset is already added to `box`
     * @param box
     * @returns
     */
    clientToSvg(box) {
        const cof = (this.zoomScale * this.renderScale);
        const x = (box.x - this.containerOffset.x) / cof;
        const y = (box.y - this.containerOffset.y) / cof;
        const logicalBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(x, y, Math.max(box.width / cof, 1), Math.max(box.height / cof, 1));
        logicalBox.y -= Math.round(logicalBox.y / this.layout.pageHeight) / this.layout.svgScale;
        if (_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.mask | _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.values['mouseDebug']) {
            _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.updateMouseDebug(box, logicalBox, this.containerOffset);
        }
        return logicalBox;
    }
    /**
     * Convert from SVG bounding box to screen coordinates
     * @param box
     * @returns
     */
    svgToClient(box) {
        const cof = (this.zoomScale * this.renderScale);
        const x = (box.x * cof) + this.containerOffset.x;
        const y = (box.y * cof) + this.containerOffset.y;
        const clientBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(x, y, box.width * cof, box.height * cof);
        return clientBox;
    }
    /**
     * Convert from SVG bounding box to screen coordinates
     * @param box
     * @returns
    */
    svgToClientNoOffset(box) {
        const cof = (this.zoomScale * this.renderScale);
        const x = (box.x * cof);
        const y = (box.y * cof);
        const clientBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(x, y, box.width * cof, box.height * cof);
        return clientBox;
    }
    /**
     * Find a selection from a mouse event
     * @param box - location of a mouse event or specific screen coordinates
     * @returns
     */
    findArtifact(logicalBox) {
        const selections = [];
        const page = this.getRenderer(logicalBox);
        if (page) {
            return { selections: page.findArtifact(logicalBox), page };
        }
        return { selections, page: this.vfRenderers[0] };
    }
    /**
     * Find any modifiers intersecting with `box`
     * @param box
     * @returns
     */
    findModifierTabs(logicalBox) {
        const page = this.getRenderer(logicalBox);
        if (page) {
            return page.findModifierTabs(logicalBox);
        }
        return [];
    }
    /**
     * add a rendered page to the page map
     * @param selection
     * @returns
     */
    addArtifact(selection) {
        if (!selection.note || !selection.note.logicalBox) {
            return;
        }
        const page = this.getRenderer(selection.note.logicalBox);
        if (page) {
            page.addArtifact(selection);
        }
    }
    /**
     * add a rendered modifier to the page map
     * @param modifier
     */
    addModifierTab(modifier) {
        const page = this.getRenderer(modifier.box);
        if (page) {
            page.addModifierTab(modifier);
        }
    }
    clearModifiersForPage(page) {
        if (this.vfRenderers.length > page) {
            this.vfRenderers[page].clearModifiers();
        }
    }
    /**
     * The number of pages is changing, remove the last page
     * @returns
     */
    removePage() {
        let i = 0;
        // Don't remove the only page
        if (this.vfRenderers.length < 2) {
            return;
        }
        // Remove last page div
        const elementId = 'smoosic-svg-div-' + (this.vfRenderers.length - 1).toString();
        const container = document.getElementById(elementId);
        if (container) {
            container.remove();
        }
        // pop last renderer off the stack.
        const renderers = [];
        const layouts = [];
        for (i = 0; i < this.vfRenderers.length - 1; ++i) {
            renderers.push(this.vfRenderers[i]);
            layouts.push(this.pageLayouts[i]);
        }
        this.vfRenderers = renderers;
        this._pageLayouts = layouts;
        // update page height
        const totalHeight = this.pageDivHeight * this.pageLayouts.length;
        $(this.container).css('width', '' + Math.round(this.pageDivWidth) + 'px');
        $(this.container).css('height', '' + Math.round(totalHeight) + 'px');
    }
    /**
     * The score dimensions have changed, clear maps and recreate the pages.
     * @param layout
     * @param pageLayouts
     */
    updateLayout(layout, pageLayouts) {
        this._layout = layout;
        this._pageLayouts = pageLayouts;
        this.createRenderers();
    }
    /**
     * Return the page by index
     * @param page
     * @returns
     */
    getRendererForPage(page) {
        if (this.vfRenderers.length > page) {
            return this.vfRenderers[page];
        }
        return this.vfRenderers[this.vfRenderers.length - 1];
    }
    /**
     * Return the SvgPage based on SVG point (conversion from client coordinates already done)
     * @param point
     * @returns
     */
    getRendererFromPoint(point) {
        const ix = Math.floor(point.y / (this.layout.pageHeight / this.layout.svgScale));
        if (ix < this.vfRenderers.length) {
            return this.vfRenderers[ix];
        }
        return null;
    }
    /**
     * Return the SvgPage based on SVG point (conversion from client coordinates already done)
     * @param box
     * @returns
     */
    getRenderer(box) {
        const rv = this.getRendererFromPoint({ x: box.x, y: box.y });
        if (rv) {
            return rv;
        }
        return this.vfRenderers[0];
    }
    /**
     * Return the page based on the coordinates of a modifier
     * @param modifier
     * @returns
     */
    getRendererFromModifier(modifier) {
        let rv = this.vfRenderers[0];
        if (modifier && modifier.logicalBox) {
            const context = this.getRenderer(modifier.logicalBox);
            if (context) {
                rv = context;
            }
        }
        return rv;
    }
}


/***/ }),

/***/ "./src/render/sui/textEdit.ts":
/*!************************************!*\
  !*** ./src/render/sui/textEdit.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiChordEditor: () => (/* binding */ SuiChordEditor),
/* harmony export */   SuiChordSession: () => (/* binding */ SuiChordSession),
/* harmony export */   SuiDragSession: () => (/* binding */ SuiDragSession),
/* harmony export */   SuiLyricEditor: () => (/* binding */ SuiLyricEditor),
/* harmony export */   SuiLyricSession: () => (/* binding */ SuiLyricSession),
/* harmony export */   SuiTextBlockEditor: () => (/* binding */ SuiTextBlockEditor),
/* harmony export */   SuiTextEditor: () => (/* binding */ SuiTextEditor),
/* harmony export */   SuiTextSession: () => (/* binding */ SuiTextSession)
/* harmony export */ });
/* harmony import */ var _textRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textRender */ "./src/render/sui/textRender.ts");
/* harmony import */ var _renderState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderState */ "./src/render/sui/renderState.ts");
/* harmony import */ var _layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.










const VF = _common_vex__WEBPACK_IMPORTED_MODULE_9__.VexFlow;
/**
 * The heirarchy of text editing objects goes:
 *
 * `dialog -> component -> session -> editor`
 *
 * Editors and Sessions are defined in this module.
 * ### editor
 * handles low-level events and renders the preview using one
 * of the text layout objects.
 * ### session
 * creates and destroys editors, e.g. for lyrics that have a Different
 * editor instance for each note.
 *
 * ## SuiTextEditor
 * The base text editor handles the positioning and inserting
 * of text blocks into the text area.  The derived class shoud interpret key events.
 * A container class will manage the session for starting/stopping the editor
 * and retrieving the results into the target object.
 * */
class SuiTextEditor {
    static get States() {
        return { RUNNING: 1, STOPPING: 2, STOPPED: 4, PENDING_EDITOR: 8 };
    }
    // parsers use this convention to represent text types (superscript)
    static textTypeToChar(textType) {
        if (textType === _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.superScript) {
            return '^';
        }
        if (textType === _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.subScript) {
            return '%';
        }
        return '';
    }
    static textTypeFromChar(char) {
        if (char === '^') {
            return _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.superScript;
        }
        if (char === '%') {
            return _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.subScript;
        }
        return _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.normal;
    }
    constructor(params) {
        this.svgText = null;
        this.outlineInfo = null;
        this.x = 0;
        this.y = 0;
        this.textPos = 0;
        this.selectionStart = -1;
        this.selectionLength = -1;
        this.empty = true;
        this.suggestionIndex = -1;
        this.cursorState = false;
        this.cursorRunning = false;
        this.textType = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.normal;
        this.fontWeight = 'normal';
        this.fontFamily = 'Merriweather';
        this.fontSize = 14;
        this.state = SuiTextEditor.States.RUNNING;
        this.suggestionRect = null;
        this.scroller = params.scroller;
        this.context = params.context;
        this.x = params.x;
        this.y = params.y;
        this.text = params.text;
        this.pageMap = params.pageMap;
    }
    static get strokes() {
        return {
            'text-suggestion': {
                strokeName: 'text-suggestion',
                stroke: '#cce',
                strokeWidth: 1,
                strokeDasharray: '4,1',
                fill: 'none',
                opacity: 1.0
            },
            'text-selection': {
                strokeName: 'text-selection',
                stroke: '#99d',
                strokeWidth: 1,
                fill: 'none',
                strokeDasharray: '',
                opacity: 1.0
            },
            'text-highlight': {
                strokeName: 'text-highlight',
                stroke: '#dd9',
                strokeWidth: 1,
                strokeDasharray: '4,1',
                fill: 'none',
                opacity: 1.0
            },
            'text-drag': {
                strokeName: 'text-drag',
                stroke: '#d99',
                strokeWidth: 1,
                strokeDasharray: '2,1',
                fill: '#eee',
                opacity: 0.3
            },
            'inactive-text': {
                strokeName: 'inactive-text',
                stroke: '#fff',
                strokeWidth: 1,
                strokeDasharray: '',
                fill: '#ddd',
                opacity: 0.3
            }
        };
    }
    // ### _suggestionParameters
    // Create the svg text outline parameters
    _suggestionParameters(box, strokeName) {
        const outlineStroke = SuiTextEditor.strokes[strokeName];
        if (!this.suggestionRect) {
            this.suggestionRect = {
                context: this.context, box, classes: '',
                stroke: outlineStroke, scroll: this.scroller.scrollState, timeOff: 1000
            };
        }
        ;
        this.suggestionRect.box = _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.smoBox(box);
        return this.suggestionRect;
    }
    // ### _expandSelectionToSuggestion
    // Expand the selection to include the character the user clicked on.
    _expandSelectionToSuggestion() {
        if (this.suggestionIndex < 0) {
            return;
        }
        if (this.selectionStart < 0) {
            this._setSelectionToSugggestion();
            return;
        }
        else if (this.selectionStart > this.suggestionIndex) {
            const oldStart = this.selectionStart;
            this.selectionStart = this.suggestionIndex;
            this.selectionLength = (oldStart - this.selectionStart) + this.selectionLength;
        }
        else if (this.selectionStart < this.suggestionIndex
            && this.selectionStart > this.selectionStart + this.selectionLength) {
            this.selectionLength = (this.suggestionIndex - this.selectionStart) + 1;
        }
        this._updateSelections();
    }
    // ### _setSelectionToSugggestion
    // Set the selection to the character the user clicked on.
    _setSelectionToSugggestion() {
        this.selectionStart = this.suggestionIndex;
        this.selectionLength = 1;
        this.suggestionIndex = -1;
        this._updateSelections();
    }
    rerender() {
        var _a, _b;
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.unrender();
        (_b = this.svgText) === null || _b === void 0 ? void 0 : _b.render();
    }
    // ### handleMouseEvent
    // Handle hover/click behavior for the text under edit.
    // Returns: true if the event was handled here
    handleMouseEvent(ev) {
        let handled = false;
        if (this.svgText === null) {
            return false;
        }
        const clientBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.boxPoints(ev.clientX + this.scroller.scrollState.x, ev.clientY + this.scroller.scrollState.y, 1, 1);
        const logicalBox = this.pageMap.clientToSvg(clientBox);
        var blocks = this.svgText.getIntersectingBlocks(logicalBox);
        // The mouse is not over the text
        if (!blocks.length) {
            if (this.suggestionRect) {
                _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.eraseOutline(this.suggestionRect);
            }
            // If the user clicks and there was a previous selection, treat it as selected
            if (ev.type === 'click' && this.suggestionIndex >= 0) {
                if (ev.shiftKey) {
                    this._expandSelectionToSuggestion();
                }
                else {
                    this._setSelectionToSugggestion();
                }
                handled = true;
                this.rerender();
            }
            return handled;
        }
        handled = true;
        // outline the text that is hovered.  Since mouse is a point
        // there should only be 1
        blocks.forEach((block) => {
            _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.outlineRect(this._suggestionParameters(block.box, 'text-suggestion'));
            this.suggestionIndex = block.index;
        });
        // if the user clicked on it, add it to the selection.
        if (ev.type === 'click') {
            if (this.suggestionRect) {
                _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.eraseOutline(this.suggestionRect);
            }
            if (ev.shiftKey) {
                this._expandSelectionToSuggestion();
            }
            else {
                this._setSelectionToSugggestion();
            }
            const npos = this.selectionStart + this.selectionLength;
            if (npos >= 0 && npos <= this.svgText.blocks.length) {
                this.textPos = npos;
            }
            this.rerender();
        }
        return handled;
    }
    // ### _serviceCursor
    // Flash the cursor as a background task
    _serviceCursor() {
        var _a, _b;
        if (this.cursorState) {
            (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.renderCursorAt(this.textPos - 1, this.textType);
        }
        else {
            (_b = this.svgText) === null || _b === void 0 ? void 0 : _b.removeCursor();
        }
        this.cursorState = !this.cursorState;
    }
    // ### _refreshCursor
    // If the text position changes, update the cursor position right away
    // don't wait for blink.
    _refreshCursor() {
        var _a;
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.removeCursor();
        this.cursorState = true;
        this._serviceCursor();
    }
    get _endCursorCondition() {
        return this.cursorRunning === false;
    }
    _cursorPreResolve() {
        var _a;
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.removeCursor();
    }
    _cursorPoll() {
        this._serviceCursor();
    }
    // ### startCursorPromise
    // Used by the calling logic to start the cursor.
    // returns a promise that can be pended when the editing ends.
    startCursorPromise() {
        var _a;
        var self = this;
        this.cursorRunning = true;
        this.cursorState = true;
        (_a = self.svgText) === null || _a === void 0 ? void 0 : _a.renderCursorAt(this.textPos, _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.normal);
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.makePromise(() => this._endCursorCondition, () => this._cursorPreResolve(), () => this._cursorPoll(), 333);
    }
    stopCursor() {
        this.cursorRunning = false;
    }
    // ### setTextPos
    // Set the text position within the editor space and update the cursor
    setTextPos(val) {
        this.textPos = val;
        this._refreshCursor();
    }
    // ### moveCursorRight
    // move cursor right within the block of text.
    moveCursorRight() {
        if (this.svgText === null) {
            return;
        }
        if (this.textPos <= this.svgText.blocks.length) {
            this.setTextPos(this.textPos + 1);
        }
    }
    // ### moveCursorRight
    // move cursor left within the block of text.
    moveCursorLeft() {
        if (this.textPos > 0) {
            this.setTextPos(this.textPos - 1);
        }
    }
    // ### moveCursorRight
    // highlight the text selections
    _updateSelections() {
        var _a;
        let i = 0;
        const end = this.selectionStart + this.selectionLength;
        const start = this.selectionStart;
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.blocks.forEach((block) => {
            const val = start >= 0 && i >= start && i < end;
            this.svgText.setHighlight(block, val);
            ++i;
        });
    }
    // ### _checkGrowSelectionLeft
    // grow selection within the bounds
    _checkGrowSelectionLeft() {
        if (this.selectionStart > 0) {
            this.selectionStart -= 1;
            this.selectionLength += 1;
        }
    }
    // ### _checkGrowSelectionRight
    // grow selection within the bounds
    _checkGrowSelectionRight() {
        if (this.svgText === null) {
            return;
        }
        const end = this.selectionStart + this.selectionLength;
        if (end < this.svgText.blocks.length) {
            this.selectionLength += 1;
        }
    }
    // ### growSelectionLeft
    // handle the selection keys
    growSelectionLeft() {
        if (this.selectionStart === -1) {
            this.moveCursorLeft();
            this.selectionStart = this.textPos;
            this.selectionLength = 1;
        }
        else if (this.textPos === this.selectionStart) {
            this.moveCursorLeft();
            this._checkGrowSelectionLeft();
        }
        this._updateSelections();
    }
    // ### growSelectionRight
    // handle the selection keys
    growSelectionRight() {
        if (this.selectionStart === -1) {
            this.selectionStart = this.textPos;
            this.selectionLength = 1;
            this.moveCursorRight();
        }
        else if (this.selectionStart + this.selectionLength === this.textPos) {
            this._checkGrowSelectionRight();
            this.moveCursorRight();
        }
        this._updateSelections();
    }
    // ### _clearSelections
    // Clear selected text
    _clearSelections() {
        this.selectionStart = -1;
        this.selectionLength = 0;
    }
    // ### deleteSelections
    // delete the selected blocks of text/glyphs
    deleteSelections() {
        var _a;
        let i = 0;
        const blockPos = this.selectionStart;
        for (i = 0; i < this.selectionLength; ++i) {
            (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.removeBlockAt(blockPos); // delete shifts blocks so keep index the same.
        }
        this.setTextPos(blockPos);
        this.selectionStart = -1;
        this.selectionLength = 0;
    }
    // ### parseBlocks
    // THis can be overridden by the base class to create the correct combination
    // of text and glyph blocks based on the underlying text
    parseBlocks() {
        let i = 0;
        this.svgText = new _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText({
            context: this.context, startX: this.x, startY: this.y,
            fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: this.fontWeight, scroller: this.scroller,
            purpose: _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textPurposes.edit,
            fontStyle: 'normal', pageMap: this.pageMap
        });
        for (i = 0; i < this.text.length; ++i) {
            const def = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
            def.text = this.text[i];
            this.svgText.addTextBlockAt(i, def);
            this.empty = false;
        }
        this.textPos = this.text.length;
        this.state = SuiTextEditor.States.RUNNING;
        this.rerender();
    }
    // ### evKey
    // Handle key events that filter down to the editor
    evKey(evdata) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const removeCurrent = () => {
                var _a;
                if (this.svgText) {
                    (_a = this.svgText.element) === null || _a === void 0 ? void 0 : _a.remove();
                    this.svgText.element = null;
                }
            };
            if (evdata.code === 'ArrowRight') {
                if (evdata.shiftKey) {
                    this.growSelectionRight();
                }
                else {
                    this.moveCursorRight();
                }
                this.rerender();
                return true;
            }
            if (evdata.code === 'ArrowLeft') {
                if (evdata.shiftKey) {
                    this.growSelectionLeft();
                }
                else {
                    this.moveCursorLeft();
                }
                this.rerender();
                return true;
            }
            if (evdata.code === 'Backspace') {
                removeCurrent();
                if (this.selectionStart >= 0) {
                    this.deleteSelections();
                }
                else {
                    if (this.textPos > 0) {
                        this.selectionStart = this.textPos - 1;
                        this.selectionLength = 1;
                        this.deleteSelections();
                    }
                }
                this.rerender();
                return true;
            }
            if (evdata.code === 'Delete') {
                removeCurrent();
                if (this.selectionStart >= 0) {
                    this.deleteSelections();
                }
                else {
                    if (this.textPos > 0 && this.svgText !== null && this.textPos < this.svgText.blocks.length) {
                        this.selectionStart = this.textPos;
                        this.selectionLength = 1;
                        this.deleteSelections();
                    }
                }
                this.rerender();
                return true;
            }
            if (evdata.key.charCodeAt(0) >= 33 && evdata.key.charCodeAt(0) <= 126 && evdata.key.length === 1) {
                removeCurrent();
                const isPaste = evdata.ctrlKey && evdata.key === 'v';
                let text = evdata.key;
                if (isPaste) {
                    text = yield navigator.clipboard.readText();
                }
                if (this.empty) {
                    (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.removeBlockAt(0);
                    this.empty = false;
                    const def = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
                    def.text = text;
                    (_b = this.svgText) === null || _b === void 0 ? void 0 : _b.addTextBlockAt(0, def);
                    this.setTextPos(1);
                }
                else {
                    if (this.selectionStart >= 0) {
                        this.deleteSelections();
                    }
                    const def = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
                    def.text = text;
                    def.textType = this.textType;
                    (_c = this.svgText) === null || _c === void 0 ? void 0 : _c.addTextBlockAt(this.textPos, def);
                    this.setTextPos(this.textPos + 1);
                }
                this.rerender();
                return true;
            }
            return false;
        });
    }
}
class SuiTextBlockEditor extends SuiTextEditor {
    // ### ctor
    // ### args
    // params: {lyric: SmoLyric,...}
    constructor(params) {
        super(params);
        $(this.context.svg).find('g.vf-text-highlight').remove();
        this.parseBlocks();
    }
    _highlightEditor() {
        if (this.svgText === null || this.svgText.blocks.length === 0) {
            return;
        }
        const bbox = this.svgText.getLogicalBox();
        const outlineStroke = SuiTextEditor.strokes['text-highlight'];
        if (this.outlineInfo && this.outlineInfo.element) {
            this.outlineInfo.element.remove();
        }
        this.outlineInfo = {
            context: this.context, box: bbox, classes: '',
            stroke: outlineStroke, scroll: this.scroller.scrollState,
            timeOff: 0
        };
        _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.outlineRect(this.outlineInfo);
    }
    getText() {
        if (this.svgText !== null) {
            return this.svgText.getText();
        }
        return '';
    }
    evKey(evdata) {
        const _super = Object.create(null, {
            evKey: { get: () => super.evKey }
        });
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (evdata.key.charCodeAt(0) === 32) {
                if (this.empty) {
                    (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.removeBlockAt(0);
                    this.empty = false;
                    const def = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
                    def.text = ' ';
                    (_b = this.svgText) === null || _b === void 0 ? void 0 : _b.addTextBlockAt(0, def);
                    this.setTextPos(1);
                }
                else {
                    if (this.selectionStart >= 0) {
                        this.deleteSelections();
                    }
                    const def = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
                    def.text = ' ';
                    def.textType = this.textType;
                    (_c = this.svgText) === null || _c === void 0 ? void 0 : _c.addTextBlockAt(this.textPos, def);
                    this.setTextPos(this.textPos + 1);
                }
                this.rerender();
                return true;
            }
            const rv = _super.evKey.call(this, evdata);
            this._highlightEditor();
            return rv;
        });
    }
    stopEditor() {
        var _a;
        this.state = SuiTextEditor.States.STOPPING;
        $(this.context.svg).find('g.vf-text-highlight').remove();
        this.stopCursor();
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.unrender();
    }
}
class SuiLyricEditor extends SuiTextEditor {
    static get States() {
        return { RUNNING: 1, STOPPING: 2, STOPPED: 4 };
    }
    parseBlocks() {
        let i = 0;
        const def = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.defaults;
        def.context = this.context;
        def.startX = this.x;
        def.startY = this.y;
        def.scroller = this.scroller;
        this.svgText = new _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText(def);
        for (i = 0; i < this.text.length; ++i) {
            const blockP = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
            blockP.text = this.text[i];
            this.svgText.addTextBlockAt(i, blockP);
            this.empty = false;
        }
        this.textPos = this.text.length;
        this.state = SuiTextEditor.States.RUNNING;
        this.rerender();
    }
    getText() {
        if (this.svgText !== null) {
            return this.svgText.getText();
        }
        return '';
    }
    // ### ctor
    // ### args
    // params: {lyric: SmoLyric,...}
    constructor(params) {
        super(params);
        this.state = SuiTextEditor.States.PENDING_EDITOR;
        this.text = params.lyric.getText();
        if (params.lyric.isHyphenated()) {
            this.text += '-';
        }
        this.lyric = params.lyric;
        this.parseBlocks();
    }
    stopEditor() {
        this.state = SuiTextEditor.States.STOPPING;
        this.stopCursor();
        if (this.svgText !== null) {
            this.svgText.unrender();
        }
    }
}
class SuiChordEditor extends SuiTextEditor {
    static get States() {
        return { RUNNING: 1, STOPPING: 2, STOPPED: 4 };
    }
    static get SymbolModifiers() {
        return {
            NONE: 1,
            SUBSCRIPT: 2,
            SUPERSCRIPT: 3
        };
    }
    // ### toTextTypeChar
    // Given an old text type and a desited new text type,
    // return what the new text type character should be
    static toTextTypeChar(oldTextType, newTextType) {
        const tt = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.getTextTypeResult(oldTextType, newTextType);
        return SuiTextEditor.textTypeToChar(tt);
    }
    static toTextTypeTransition(oldTextType, result) {
        const tt = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.getTextTypeTransition(oldTextType, result);
        return SuiTextEditor.textTypeToChar(tt);
    }
    setTextType(textType) {
        this.textType = textType;
    }
    // Handle the case where user changed super/subscript in the middle of the
    // string.
    _updateSymbolModifiers() {
        let change = this.textPos;
        let render = false;
        let i = 0;
        for (i = this.textPos; this.svgText !== null && i < this.svgText.blocks.length; ++i) {
            const block = this.svgText.blocks[i];
            if (block.textType !== this.textType &&
                block.textType !== change) {
                change = block.textType;
                block.textType = this.textType;
                render = true;
            }
            else {
                break;
            }
        }
        if (render) {
            this.rerender();
        }
    }
    _setSymbolModifier(char) {
        if (['^', '%'].indexOf(char) < 0) {
            return false;
        }
        const currentTextType = this.textType;
        const transitionType = SuiTextEditor.textTypeFromChar(char);
        this.textType = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.getTextTypeResult(currentTextType, transitionType);
        this._updateSymbolModifiers();
        return true;
    }
    parseBlocks() {
        let readGlyph = false;
        let curGlyph = '';
        let blockIx = 0; // so we skip modifier characters
        let i = 0;
        const params = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.defaults;
        params.context = this.context;
        params.startX = this.x;
        params.startY = this.y;
        params.scroller = this.scroller;
        this.svgText = new _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText(params);
        for (i = 0; i < this.text.length; ++i) {
            const char = this.text[i];
            const isSymbolModifier = this._setSymbolModifier(char);
            if (char === '@') {
                if (!readGlyph) {
                    readGlyph = true;
                    curGlyph = '';
                }
                else {
                    this._addGlyphAt(blockIx, curGlyph);
                    blockIx += 1;
                    readGlyph = false;
                }
            }
            else if (!isSymbolModifier) {
                if (readGlyph) {
                    curGlyph = curGlyph + char;
                }
                else {
                    const blockP = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
                    blockP.text = char;
                    blockP.textType = this.textType;
                    this.svgText.addTextBlockAt(blockIx, blockP);
                    blockIx += 1;
                }
            }
            this.empty = false;
        }
        this.textPos = blockIx;
        this.state = SuiTextEditor.States.RUNNING;
        this.rerender();
    }
    // ### getText
    // Get the text value that we persist
    getText() {
        if (this.svgText === null || this.svgText.blocks.length < 1) {
            return '';
        }
        let text = '';
        let textType = this.svgText.blocks[0].textType;
        this.svgText.blocks.forEach((block) => {
            if (block.textType !== textType) {
                text += SuiChordEditor.toTextTypeTransition(textType, block.textType);
                textType = block.textType;
            }
            if (block.symbolType === _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.symbolTypes.GLYPH) {
                text += '@' + block.glyphCode + '@';
            }
            else {
                text += block.text;
            }
        });
        return text;
    }
    _addGlyphAt(ix, code) {
        var _a;
        if (this.selectionStart >= 0) {
            this.deleteSelections();
        }
        const blockP = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.blockDefaults;
        blockP.glyphCode = code;
        blockP.textType = this.textType;
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.addGlyphBlockAt(ix, blockP);
        this.textPos += 1;
    }
    unrender() {
        var _a;
        if (this.svgText) {
            (_a = this.svgText.element) === null || _a === void 0 ? void 0 : _a.remove();
        }
    }
    evKey(evdata) {
        const _super = Object.create(null, {
            evKey: { get: () => super.evKey }
        });
        return __awaiter(this, void 0, void 0, function* () {
            let edited = false;
            if (this._setSymbolModifier(evdata.key)) {
                return true;
            }
            // Dialog gives us a specific glyph code
            if (evdata.key[0] === '@' && evdata.key.length > 2) {
                this.unrender();
                const glyph = evdata.key.substr(1, evdata.key.length - 2);
                this._addGlyphAt(this.textPos, glyph);
                this.rerender();
                edited = true;
            }
            else if (VF.ChordSymbol.glyphs[evdata.key[0]]) { // glyph shortcut like 'b'
                this.unrender();
                // hack: vexflow 5 broke this
                this._addGlyphAt(this.textPos, (0,_common_vex__WEBPACK_IMPORTED_MODULE_9__.getChordSymbolGlyphFromCode)(evdata.key[0]));
                this.rerender();
                edited = true;
            }
            else {
                // some ordinary key
                edited = yield _super.evKey.call(this, evdata);
            }
            if (this.svgText !== null && this.svgText.blocks.length > this.textPos && this.textPos >= 0) {
                this.textType = this.svgText.blocks[this.textPos].textType;
            }
            return edited;
        });
    }
    // ### ctor
    // ### args
    // params: {lyric: SmoLyric,...}
    constructor(params) {
        super(params);
        this.text = params.lyric.text;
        this.lyric = params.lyric;
        this.textType = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.normal;
        this.parseBlocks();
    }
    stopEditor() {
        var _a;
        this.state = SuiTextEditor.States.STOPPING;
        this.stopCursor();
        (_a = this.svgText) === null || _a === void 0 ? void 0 : _a.unrender();
    }
    // ### _markStopped
    // Indicate this editor session is done running
    _markStopped() {
        this.state = SuiTextEditor.States.STOPPED;
    }
}
class SuiDragSession {
    constructor(params) {
        this.dragging = false;
        this.outlineRect = null;
        this.textGroup = params.textGroup;
        this.pageMap = params.context;
        this.scroller = params.scroller;
        this.page = this.pageMap.getRendererFromModifier(this.textGroup);
        // create a temporary text object for dragging
        this.textObject = _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiTextBlock.fromTextGroup(this.textGroup, this.page, this.pageMap, this.scroller); // SuiTextBlock
        this.dragging = false;
        this.outlineBox = this.textObject.getLogicalBox();
    }
    _outlineBox() {
        const outlineStroke = SuiTextEditor.strokes['text-drag'];
        const x = this.outlineBox.x - this.page.box.x;
        const y = this.outlineBox.y - this.page.box.y;
        if (!this.outlineRect) {
            this.outlineRect = {
                context: this.page,
                box: _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.boxPoints(x, y + this.outlineBox.height, this.outlineBox.width, this.outlineBox.height),
                classes: 'text-drag',
                stroke: outlineStroke, scroll: this.scroller.scrollState, timeOff: 1000
            };
        }
        this.outlineRect.box = _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.boxPoints(x, y + this.outlineBox.height, this.outlineBox.width, this.outlineBox.height),
            _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.outlineRect(this.outlineRect);
    }
    unrender() {
        this.textGroup.elements.forEach((el) => {
            el.remove();
        });
        this.textGroup.elements = [];
        this.textObject.unrender();
    }
    scrolledClientBox(x, y) {
        return { x: x + this.scroller.scrollState.x, y: y + this.scroller.scrollState.y, width: 1, height: 1 };
    }
    checkBounds() {
        if (this.outlineBox.y < this.outlineBox.height) {
            this.outlineBox.y = this.outlineBox.height;
        }
        if (this.outlineBox.x < 0) {
            this.outlineBox.x = 0;
        }
        if (this.outlineBox.x > this.page.box.x + this.page.box.width - this.outlineBox.width) {
            this.outlineBox.x = this.page.box.x + this.page.box.width - this.outlineBox.width;
        }
        if (this.outlineBox.y > this.page.box.y + this.page.box.height) {
            this.outlineBox.y = this.page.box.y + this.page.box.height;
        }
    }
    startDrag(e) {
        const evBox = this.scrolledClientBox(e.clientX, e.clientY);
        const svgMouseBox = this.pageMap.clientToSvg(evBox);
        svgMouseBox.y -= this.outlineBox.height;
        if (_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.mask & _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.values['dragDebug']) {
            _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.updateDragDebug(svgMouseBox, this.outlineBox, 'start');
        }
        if (!_svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.doesBox1ContainBox2(this.outlineBox, svgMouseBox)) {
            return;
        }
        this.dragging = true;
        this.outlineBox = svgMouseBox;
        const currentBox = this.textObject.getLogicalBox();
        this.outlineBox.width = currentBox.width;
        this.outlineBox.height = currentBox.height;
        this.unrender();
        this.checkBounds();
        this._outlineBox();
    }
    mouseMove(e) {
        if (!this.dragging) {
            return;
        }
        const evBox = this.scrolledClientBox(e.clientX, e.clientY);
        const svgMouseBox = this.pageMap.clientToSvg(evBox);
        svgMouseBox.y -= this.outlineBox.height;
        this.outlineBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.smoBox(svgMouseBox);
        const currentBox = this.textObject.getLogicalBox();
        this.outlineBox.width = currentBox.width;
        this.outlineBox.height = currentBox.height;
        this.checkBounds();
        this.textObject.offsetStartX(this.outlineBox.x - currentBox.x);
        this.textObject.offsetStartY(this.outlineBox.y - currentBox.y);
        this.textObject.render();
        if (_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.mask & _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.values['dragDebug']) {
            _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.updateDragDebug(svgMouseBox, this.outlineBox, 'drag');
        }
        if (this.outlineRect) {
            _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.eraseOutline(this.outlineRect);
            this.outlineRect = null;
        }
        this._outlineBox();
    }
    endDrag() {
        var _a;
        // this.textObject.render();
        const newBox = this.textObject.getLogicalBox();
        const curBox = (_a = this.textGroup.logicalBox) !== null && _a !== void 0 ? _a : _smo_data_common__WEBPACK_IMPORTED_MODULE_7__.SvgBox.default;
        if (_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.mask & _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.values['dragDebug']) {
            _layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.updateDragDebug(curBox, newBox, 'end');
        }
        this.textGroup.offsetX(newBox.x - curBox.x);
        this.textGroup.offsetY(newBox.y - curBox.y + this.outlineBox.height);
        this.dragging = false;
        if (this.outlineRect) {
            _svgHelpers__WEBPACK_IMPORTED_MODULE_4__.SvgHelpers.eraseOutline(this.outlineRect);
            this.outlineRect = null;
        }
    }
}
// ## SuiTextSession
// session for editing plain text
class SuiTextSession {
    static get States() {
        return { RUNNING: 1, STOPPING: 2, STOPPED: 4, PENDING_EDITOR: 8 };
    }
    constructor(params) {
        this.fontFamily = '';
        this.fontWeight = '';
        this.fontSize = 14;
        this.state = SuiTextEditor.States.PENDING_EDITOR;
        this.editor = null;
        this.cursorPromise = null;
        this.scroller = params.scroller;
        this.renderer = params.renderer;
        this.scoreText = params.scoreText;
        this.text = this.scoreText.text;
        this.x = params.x;
        this.y = params.y;
        this.textGroup = params.textGroup;
        this.renderer = params.renderer;
        // Create a text group if one was not a startup parameter
        if (!this.textGroup) {
            this.textGroup = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoTextGroup(_smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoTextGroup.defaults);
        }
        // Create a scoreText if one was not a startup parameter, or
        // get it from the text group
        if (!this.scoreText) {
            if (this.textGroup && this.textGroup.textBlocks.length) {
                this.scoreText = this.textGroup.textBlocks[0].text;
            }
            else {
                const stDef = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoScoreText.defaults;
                stDef.x = this.x;
                stDef.y = this.y;
                this.scoreText = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoScoreText(stDef);
                this.textGroup.addScoreText(this.scoreText, _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoTextGroup.relativePositions.RIGHT);
            }
        }
        this.fontFamily = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoScoreText.familyString(this.scoreText.fontInfo.family);
        this.fontWeight = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoScoreText.weightString(this.scoreText.fontInfo.weight);
        this.fontSize = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoScoreText.fontPointSize(this.scoreText.fontInfo.size);
        this.text = this.scoreText.text;
    }
    // ### _isRefreshed
    // renderer has partially rendered text(promise condition)
    get _isRefreshed() {
        return this.renderer.dirty === false;
    }
    get isStopped() {
        return this.state === SuiTextEditor.States.STOPPED;
    }
    get isRunning() {
        return this.state === SuiTextEditor.States.RUNNING;
    }
    _markStopped() {
        this.state = SuiTextEditor.States.STOPPED;
    }
    // ### _isRendered
    // renderer has rendered text(promise condition)
    get _isRendered() {
        return this.renderer.passState === _renderState__WEBPACK_IMPORTED_MODULE_1__.SuiRenderState.passStates.clean;
    }
    _removeScoreText() {
        const selector = '#' + this.scoreText.attrs.id;
        $(selector).remove();
    }
    // ### _startSessionForNote
    // Start the lyric session
    startSession() {
        const context = this.renderer.pageMap.getRenderer({ x: this.x, y: this.y });
        if (context) {
            this.editor = new SuiTextBlockEditor({
                x: this.x, y: this.y, scroller: this.scroller,
                context: context, text: this.scoreText.text, pageMap: this.renderer.pageMap
            });
            this.cursorPromise = this.editor.startCursorPromise();
            this.state = SuiTextEditor.States.RUNNING;
            this._removeScoreText();
        }
    }
    // ### _startSessionForNote
    // Stop the lyric session, return promise for done
    stopSession() {
        if (this.editor) {
            this.scoreText.text = this.editor.getText();
            this.scoreText.tryParseUnicode(); // convert unicode chars
            this.editor.stopEditor();
        }
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.makePromise(() => this._isRendered, () => this._markStopped(), null, 100);
    }
    // ### evKey
    // Key handler (pass to editor)
    evKey(evdata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state !== SuiTextEditor.States.RUNNING || this.editor === null) {
                return false;
            }
            const rv = yield this.editor.evKey(evdata);
            if (rv) {
                this._removeScoreText();
            }
            return rv;
        });
    }
    handleMouseEvent(ev) {
        if (this.isRunning && this.editor !== null) {
            this.editor.handleMouseEvent(ev);
        }
    }
}
// ## SuiLyricSession
// Manage editor for lyrics, jupmping from note to note if asked
class SuiLyricSession {
    static get States() {
        return { RUNNING: 1, STOPPING: 2, STOPPED: 4, PENDING_EDITOR: 8 };
    }
    constructor(params) {
        this.note = null;
        this.lyric = null;
        this.text = '';
        this.editor = null;
        this.state = SuiTextEditor.States.PENDING_EDITOR;
        this.cursorPromise = null;
        this.score = params.score;
        this.renderer = params.renderer;
        this.scroller = params.scroller;
        this.view = params.view;
        this.parser = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric.parsers.lyric;
        this.verse = params.verse;
        this.selector = params.selector;
        this.selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.noteFromSelector(this.score, this.selector);
        if (this.selection !== null) {
            this.note = this.selection.note;
        }
        this.originalText = '';
    }
    // ### _setLyricForNote
    // Get the text from the editor and update the lyric with it.
    _setLyricForNote() {
        this.lyric = null;
        if (!this.note) {
            return;
        }
        const lar = this.note.getLyricForVerse(this.verse, _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric.parsers.lyric);
        if (lar.length) {
            this.lyric = lar[0];
        }
        if (!this.lyric) {
            const scoreFont = this.score.fonts.find((fn) => fn.name === 'lyrics');
            const fontInfo = JSON.parse(JSON.stringify(scoreFont));
            const lyricD = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric.defaults;
            lyricD.text = '';
            lyricD.verse = this.verse;
            lyricD.fontInfo = fontInfo;
            this.lyric = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric(lyricD);
        }
        this.text = this.lyric.text;
        this.originalText = this.text;
        // this.view.addOrUpdateLyric(this.selection.selector, this.lyric);
    }
    // ### _endLyricCondition
    // Lyric editor has stopped running (promise condition)
    get _endLyricCondition() {
        return this.editor !== null && this.editor.state !== SuiTextEditor.States.RUNNING;
    }
    // ### _endLyricCondition
    // renderer has partially rendered text(promise condition)
    get _isRefreshed() {
        return this.renderer.renderStateRendered;
    }
    // ### _isRendered
    // renderer has rendered text(promise condition)
    get _isRendered() {
        return this.renderer.renderStateClean;
    }
    get _pendingEditor() {
        return this.state !== SuiTextEditor.States.PENDING_EDITOR;
    }
    // ### _hideLyric
    // Hide the lyric so you only see the editor.
    _hideLyric() {
        if (this.lyric !== null && this.lyric.selector) {
            $(this.lyric.selector).remove();
        }
    }
    get isStopped() {
        return this.state === SuiTextEditor.States.STOPPED;
    }
    get isRunning() {
        return this.state === SuiTextEditor.States.RUNNING;
    }
    // ### _markStopped
    // Indicate this editor session is done running
    _markStopped() {
        this.state = SuiTextEditor.States.STOPPED;
    }
    // ### _startSessionForNote
    // Start the lyric editor for a note (current selected note)
    _startSessionForNote() {
        if (this.lyric === null || this.note === null || this.note.logicalBox === null) {
            return;
        }
        let startX = this.note.logicalBox.x;
        let startY = this.note.logicalBox.y + this.note.logicalBox.height +
            _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_5__.SmoScoreText.fontPointSize(this.lyric.fontInfo.size);
        this.lyric.skipRender = true;
        const lyricRendered = this.lyric.text.length > 0;
        if (this.lyric.logicalBox !== null) {
            startX = this.lyric.logicalBox.x;
            startY = this.lyric.logicalBox.y + this.lyric.logicalBox.height;
        }
        const context = this.view.renderer.pageMap.getRenderer({ x: startX, y: startY });
        if (context) {
            this.editor = new SuiLyricEditor({
                context,
                lyric: this.lyric, x: startX, y: startY, scroller: this.scroller,
                text: this.lyric.getText(),
                pageMap: this.renderer.pageMap
            });
            this.state = SuiTextEditor.States.RUNNING;
            if (!lyricRendered && this.editor !== null && this.editor.svgText !== null) {
                const delta = 2 * this.editor.svgText.maxFontHeight(1.0) * (this.lyric.verse + 1);
                this.editor.svgText.offsetStartY(delta);
            }
            this.cursorPromise = this.editor.startCursorPromise();
            this._hideLyric();
        }
    }
    // ### _startSessionForNote
    // Start the lyric session
    startSession() {
        this._setLyricForNote();
        this._startSessionForNote();
        this.state = SuiTextEditor.States.RUNNING;
    }
    // ### _startSessionForNote
    // Stop the lyric session, return promise for done
    stopSession() {
        if (this.editor && !this._endLyricCondition) {
            this._updateLyricFromEditor();
            this.editor.stopEditor();
        }
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.makePromise(() => this._isRendered, () => this._markStopped(), null, 100);
    }
    // ### _advanceSelection
    // Based on a skip character, move the editor forward/back one note.
    _advanceSelection(isShift) {
        const nextSelection = isShift ? _smo_xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.lastNoteSelectionFromSelector(this.score, this.selector)
            : _smo_xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.nextNoteSelectionFromSelector(this.score, this.selector);
        if (nextSelection) {
            this.selector = nextSelection.selector;
            this.selection = nextSelection;
            this.note = nextSelection.note;
            this._setLyricForNote();
            const conditionArray = [];
            this.state = SuiTextEditor.States.PENDING_EDITOR;
            conditionArray.push(_common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.makePromiseObj(() => this._endLyricCondition, null, null, 100));
            conditionArray.push(_common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.makePromiseObj(() => this._isRefreshed, () => this._startSessionForNote(), null, 100));
            _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.promiseChainThen(conditionArray);
        }
    }
    // ### advanceSelection
    // external interfoace to move to next/last note
    advanceSelection(isShift) {
        if (this.isRunning) {
            this._updateLyricFromEditor();
            this._advanceSelection(isShift);
        }
    }
    removeLyric() {
        if (this.selection && this.lyric) {
            this.view.removeLyric(this.selection.selector, this.lyric);
            this.lyric.skipRender = true;
            this.advanceSelection(false);
        }
    }
    // ### _updateLyricFromEditor
    // The editor is done running, so update the lyric now.
    _updateLyricFromEditor() {
        if (this.editor === null || this.lyric === null) {
            return;
        }
        const txt = this.editor.getText();
        this.lyric.setText(txt);
        this.lyric.skipRender = false;
        this.editor.stopEditor();
        if (!this.lyric.deleted && this.originalText !== txt && this.selection !== null) {
            this.view.addOrUpdateLyric(this.selection.selector, this.lyric);
        }
    }
    // ### evKey
    // Key handler (pass to editor)
    evKey(evdata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state !== SuiTextEditor.States.RUNNING) {
                return false;
            }
            if (evdata.key === '-' || evdata.key === ' ') {
                // skip
                const back = evdata.shiftKey && evdata.key === ' ';
                if (evdata.key === '-' && this.editor !== null) {
                    yield this.editor.evKey(evdata);
                }
                this._updateLyricFromEditor();
                this._advanceSelection(back);
            }
            else if (this.editor !== null) {
                yield this.editor.evKey(evdata);
                this._hideLyric();
            }
            return true;
        });
    }
    get textType() {
        if (this.isRunning && this.editor !== null) {
            return this.editor.textType;
        }
        return _textRender__WEBPACK_IMPORTED_MODULE_0__.SuiInlineText.textTypes.normal;
    }
    set textType(type) {
        if (this.editor) {
            this.editor.textType = type;
        }
    }
    // ### handleMouseEvent
    // Mouse event (send to editor)
    handleMouseEvent(ev) {
        if (this.state !== SuiTextEditor.States.RUNNING || this.editor === null) {
            return;
        }
        this.editor.handleMouseEvent(ev);
    }
}
class SuiChordSession extends SuiLyricSession {
    constructor(params) {
        super(params);
        this.editor = null;
        this.parser = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric.parsers.chord;
    }
    // ### evKey
    // Key handler (pass to editor)
    evKey(evdata) {
        return __awaiter(this, void 0, void 0, function* () {
            let edited = false;
            if (this.state !== SuiTextEditor.States.RUNNING) {
                return false;
            }
            if (evdata.code === 'Enter') {
                this._updateLyricFromEditor();
                this._advanceSelection(evdata.shiftKey);
                edited = true;
            }
            else if (this.editor !== null) {
                edited = yield this.editor.evKey(evdata);
            }
            this._hideLyric();
            return edited;
        });
    }
    // ### _setLyricForNote
    // Get the text from the editor and update the lyric with it.
    _setLyricForNote() {
        this.lyric = null;
        if (this.note === null) {
            return;
        }
        const lar = this.note.getLyricForVerse(this.verse, this.parser);
        if (lar.length) {
            this.lyric = lar[0];
        }
        if (!this.lyric) {
            const scoreFont = this.score.fonts.find((fn) => fn.name === 'chords');
            const fontInfo = JSON.parse(JSON.stringify(scoreFont));
            const ldef = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric.defaults;
            ldef.text = '';
            ldef.verse = this.verse;
            ldef.parser = this.parser;
            ldef.fontInfo = fontInfo;
            this.lyric = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoLyric(ldef);
            this.note.addLyric(this.lyric);
        }
        this.text = this.lyric.text;
    }
    // ### _startSessionForNote
    // Start the lyric editor for a note (current selected note)
    _startSessionForNote() {
        if (this.lyric === null) {
            return;
        }
        if (this.selection === null || this.note === null || this.note.logicalBox === null) {
            return;
        }
        let startX = this.note.logicalBox.x;
        let startY = this.selection.measure.svg.logicalBox.y;
        if (this.lyric.logicalBox !== null) {
            startX = this.lyric.logicalBox.x;
            startY = this.lyric.logicalBox.y + this.lyric.logicalBox.height;
        }
        this.selection.measure.svg.logicalBox.y + this.selection.measure.svg.logicalBox.height - 70;
        const context = this.renderer.pageMap.getRenderer({ x: startX, y: startY });
        if (context) {
            this.editor = new SuiChordEditor({
                context,
                lyric: this.lyric, x: startX, y: startY, scroller: this.scroller,
                text: this.lyric.getText(),
                pageMap: this.renderer.pageMap
            });
            this.state = SuiTextEditor.States.RUNNING;
            if (this.editor !== null && this.editor.svgText !== null) {
                const delta = (-1) * this.editor.svgText.maxFontHeight(1.0) * (this.lyric.verse + 1);
                this.editor.svgText.offsetStartY(delta);
            }
            this.cursorPromise = this.editor.startCursorPromise();
            this._hideLyric();
        }
    }
}


/***/ }),

/***/ "./src/render/sui/textRender.ts":
/*!**************************************!*\
  !*** ./src/render/sui/textRender.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiInlineText: () => (/* binding */ SuiInlineText),
/* harmony export */   SuiTextBlock: () => (/* binding */ SuiTextBlock)
/* harmony export */ });
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _textEdit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textEdit */ "./src/render/sui/textEdit.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
/* harmony import */ var _common_textformatter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/textformatter */ "./src/common/textformatter.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.







const VF = _common_vex__WEBPACK_IMPORTED_MODULE_5__.VexFlow;
// ## textRender.js
// Classes responsible for formatting and rendering text in SVG space.
/**
 * Inline text is a block of SVG text with the same font.  Each block can
 * contain either text or an svg (vex) glyph.  Each block in the text has its own
 * metrics so we can support inline svg text editors (cursor).
 * @category SuiRender
 */
class SuiInlineText {
    static get textTypes() {
        return { normal: 0, superScript: 1, subScript: 2 };
    }
    static get symbolTypes() {
        return {
            GLYPH: 1,
            TEXT: 2,
            LINE: 3
        };
    }
    static get textPurposes() {
        return { render: 'sui-inline-render', edit: 'sui-inline-edit' };
    }
    // ### textTypeTransitions
    // Given a current text type and a type change request, what is the result
    // text type?  This truth table tells you.
    static get textTypeTransitions() {
        return [
            [1, 1, 0],
            [1, 0, 1],
            [1, 2, 2],
            [2, 2, 0],
            [2, 0, 2],
            [2, 1, 1],
            [0, 1, 1],
            [0, 0, 0],
            [0, 2, 2]
        ];
    }
    static getTextTypeResult(oldType, newType) {
        let rv = SuiInlineText.textTypes.normal;
        let i = 0;
        for (i = 0; i < SuiInlineText.textTypeTransitions.length; ++i) {
            const tt = SuiInlineText.textTypeTransitions[i];
            if (tt[0] === oldType && tt[1] === newType) {
                rv = tt[2];
                break;
            }
        }
        return rv;
    }
    static getTextTypeTransition(oldType, result) {
        let rv = SuiInlineText.textTypes.normal;
        let i = 0;
        for (i = 0; i < SuiInlineText.textTypeTransitions.length; ++i) {
            const tt = SuiInlineText.textTypeTransitions[i];
            if (tt[0] === oldType && tt[2] === result) {
                rv = tt[1];
                break;
            }
        }
        return rv;
    }
    get spacing() {
        return VF.ChordSymbol.spacingBetweenBlocks;
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            blocks: [],
            fontFamily: 'Merriweather',
            fontSize: 14,
            startX: 100,
            startY: 100,
            fontWeight: 500,
            fontStyle: 'normal',
            scale: 1,
            activeBlock: -1,
            artifacts: [],
            purpose: 'render',
            classes: '',
            updatedMetrics: false
        }));
    }
    updateFontInfo() {
        const tf = _common_textformatter__WEBPACK_IMPORTED_MODULE_6__.TextFormatter.create({
            family: this.fontFamily,
            weight: this.fontWeight,
            size: this.fontSize,
            style: this.fontStyle
        });
        return tf;
    }
    // ### constructor just creates an empty svg
    constructor(params) {
        this.width = -1;
        this.height = -1;
        this.blocks = [];
        this.updatedMetrics = false;
        this.artifacts = [];
        this.logicalBox = _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default;
        this.element = null;
        this.fontFamily = params.fontFamily;
        this.fontWeight = params.fontWeight;
        this.fontStyle = params.fontStyle;
        this.fontSize = params.fontSize;
        this.textFont = this.updateFontInfo();
        this.scroller = params.scroller;
        this.startX = params.startX;
        this.startY = params.startY;
        this.purpose = params.purpose;
        this.attrs = {
            id: (0,_smo_data_common__WEBPACK_IMPORTED_MODULE_3__.getId)().toString(),
            type: 'SuiInlineText'
        };
        this.context = params.context;
        this.pageMap = params.pageMap;
    }
    static fromScoreText(scoreText, context, pageMap, scroller) {
        var _a;
        const params = {
            fontFamily: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoScoreText.familyString(scoreText.fontInfo.family),
            fontWeight: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoScoreText.weightString(scoreText.fontInfo.weight),
            fontStyle: (_a = scoreText.fontInfo.style) !== null && _a !== void 0 ? _a : 'normal',
            startX: scoreText.x, startY: scoreText.y,
            scroller,
            purpose: SuiInlineText.textPurposes.render,
            fontSize: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoScoreText.fontPointSize(scoreText.fontInfo.size), context,
            pageMap
        };
        const rv = new SuiInlineText(params);
        rv.attrs.id = scoreText.attrs.id;
        const blockParams = SuiInlineText.blockDefaults;
        blockParams.text = scoreText.text;
        rv.addTextBlockAt(0, blockParams);
        return rv;
    }
    static get blockDefaults() {
        return JSON.parse(JSON.stringify({
            symbolType: SuiInlineText.symbolTypes.TEXT,
            textType: SuiInlineText.textTypes.normal,
            highlighted: false,
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            scale: 1.0,
            glyph: {},
            text: '',
            glyphCode: ''
        }));
    }
    // ### pointsToPixels
    // The font size is specified in points, convert to 'pixels' in the svg space
    get pointsToPixels() {
        return this.textFont.fontSizeInPixels;
    }
    offsetStartX(offset) {
        this.startX += offset;
        this.blocks.forEach((block) => {
            block.x += offset;
        });
    }
    offsetStartY(offset) {
        this.startY += offset;
        this.blocks.forEach((block) => {
            block.y += offset;
        });
    }
    maxFontHeight(scale) {
        return this.textFont.maxHeight * scale;
    }
    _glyphOffset(block) {
        // Vex 5 compatibility.  yShift
        return block.glyph.getMetrics().yShift * this.pointsToPixels * block.scale;
    }
    /**
     * Based on the font metrics, compute the width of the strings and glyph that make up
     * this block
     */
    _calculateBlockIndex() {
        var curX = this.startX;
        var maxH = 0;
        let superXAlign = 0;
        let superXWidth = 0;
        let prevBlock = null;
        let i = 0;
        this.textFont.setFontSize(this.fontSize);
        this.blocks.forEach((block) => {
            var _a;
            // super/subscript
            const sp = this.isSuperscript(block);
            const sub = this.isSubcript(block);
            block.width = 0;
            block.height = 0;
            // coeff for sub/super script
            const subAdj = (sp || sub) ? VF.ChordSymbol.superSubRatio : 1.0;
            // offset for super/sub
            let subOffset = 0;
            if (sp) {
                subOffset = (0,_common_vex__WEBPACK_IMPORTED_MODULE_5__.chordSuperscriptOffset)() * this.pointsToPixels;
            }
            else if (sub) {
                subOffset = (0,_common_vex__WEBPACK_IMPORTED_MODULE_5__.chordSubscriptOffset)() * this.pointsToPixels;
            }
            else {
                subOffset = 0;
            }
            block.x = curX;
            if (block.symbolType === SuiInlineText.symbolTypes.TEXT) {
                for (i = 0; i < block.text.length; ++i) {
                    const ch = block.text[i];
                    const glyph = this.textFont.getGlyphMetrics(ch);
                    block.width += (((_a = glyph.advanceWidth) !== null && _a !== void 0 ? _a : 0) / this.textFont.getResolution()) * this.pointsToPixels * block.scale * subAdj;
                    const blockHeight = (glyph.ha / this.textFont.getResolution()) * this.pointsToPixels * block.scale;
                    block.height = block.height < blockHeight ? blockHeight : block.height;
                    block.y = this.startY + (subOffset * block.scale);
                }
            }
            else if (block.symbolType === SuiInlineText.symbolTypes.GLYPH) {
                // TODO: vexflow broke leftSideBearing and advanceWidth
                // vex5
                block.width = (block.glyph.getMetrics().width) * this.pointsToPixels * block.scale;
                block.height = (block.glyph.getMetrics().ha) * this.pointsToPixels * block.scale;
                block.x += block.glyph.getMetrics().xMin * this.pointsToPixels * block.scale;
                /*
                block.width = (block.metrics.advanceWidth / VF.ChordSymbol.engravingFontResolution) * this.pointsToPixels * block.scale;
                block.height = (block.glyph.metrics.ha / VF.ChordSymbol.engravingFontResolution) * this.pointsToPixels * block.scale;
                block.x += block.metrics.leftSideBearing / VF.ChordSymbol.engravingFontResolution * this.pointsToPixels * block.scale;
                block.y = this.startY + this._glyphOffset(block) + subOffset;
                */
            }
            // Line subscript up with super if the follow each other
            if (sp) {
                if (superXAlign === 0) {
                    superXAlign = block.x;
                }
            }
            else if (sub) {
                if (superXAlign > 0 && prevBlock !== null) {
                    block.x = superXAlign;
                    superXWidth = prevBlock.x + prevBlock.width;
                    curX = superXAlign;
                    superXAlign = 0;
                }
                else {
                    if (superXWidth > 0 && superXWidth < block.width + block.x) {
                        superXWidth = block.width + block.x;
                    }
                }
            }
            else if (superXWidth > 0) {
                block.x = superXWidth + VF.ChordSymbol.spacingBetweenBlocks;
                superXWidth = 0;
            }
            else {
                superXAlign = 0;
            }
            curX += block.width;
            maxH = block.height > maxH ? maxH : block.height;
            prevBlock = block;
        });
        this.width = curX - this.startX;
        this.height = maxH;
        this.updatedMetrics = true;
    }
    // ### getLogicalBox
    // return the calculated svg metrics.  In SMO parlance the
    // logical box is in SVG space, 'renderedBox' is in client space.
    getLogicalBox() {
        let rv = _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default;
        if (!this.updatedMetrics) {
            this._calculateBlockIndex();
        }
        const adjBox = (box) => {
            const nbox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox(box);
            nbox.y = nbox.y - nbox.height;
            return nbox;
        };
        this.blocks.forEach((block) => {
            if (!rv.x) {
                rv = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox(adjBox(block));
            }
            else {
                rv = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.unionRect(rv, adjBox(block));
            }
        });
        return rv;
    }
    // ### renderCursorAt
    // When we are using textLayout to render editor, create a cursor that adjusts it's size
    renderCursorAt(position, textType) {
        let adjH = 0;
        let adjY = 0;
        if (!this.updatedMetrics) {
            this._calculateBlockIndex();
        }
        const group = this.context.getContext().openGroup();
        group.id = 'inlineCursor';
        const h = this.fontSize;
        if (this.blocks.length <= position || position < 0) {
            const x = this.startX - this.context.box.x;
            const y = this.startY - this.context.box.y;
            _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.renderCursor(group, x, y - h, h);
            this.context.getContext().closeGroup();
            return;
        }
        const block = this.blocks[position];
        adjH = block.symbolType === SuiInlineText.symbolTypes.GLYPH ? h / 2 : h;
        // For glyph, add y adj back to the cursor since it's not a glyph
        adjY = block.symbolType === SuiInlineText.symbolTypes.GLYPH ? block.y - this._glyphOffset(block) :
            block.y;
        if (typeof (textType) === 'number' && textType !== SuiInlineText.textTypes.normal) {
            const ratio = textType !== SuiInlineText.textTypes.normal ? VF.ChordSymbol.superSubRatio : 1.0;
            adjH = adjH * ratio;
            if (textType !== block.textType) {
                if (textType === SuiInlineText.textTypes.superScript) {
                    adjY -= h / 2;
                }
                else {
                    adjY += h / 2;
                }
            }
        }
        const x = block.x + block.width - this.context.box.x;
        const y = adjY - (adjH * block.scale) - this.context.box.y;
        _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.renderCursor(group, x, y, adjH * block.scale);
        this.context.getContext().closeGroup();
    }
    removeCursor() {
        $('svg #inlineCursor').remove();
    }
    unrender() {
        var _a;
        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();
        this.element = null;
    }
    getIntersectingBlocks(box) {
        if (!this.artifacts) {
            return [];
        }
        return _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.findIntersectingArtifact(box, this.artifacts);
    }
    _addBlockAt(position, block) {
        if (position >= this.blocks.length) {
            this.blocks.push(block);
        }
        else {
            this.blocks.splice(position, 0, block);
        }
    }
    removeBlockAt(position) {
        this.blocks.splice(position, 1);
        this.updatedMetrics = false;
    }
    // ### addTextBlockAt
    // Add a text block to the line of text.
    // params must contain at least:
    // {text:'xxx'}
    addTextBlockAt(position, params) {
        const block = JSON.parse(JSON.stringify(SuiInlineText.blockDefaults));
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_4__.smoSerialize.vexMerge(block, params);
        block.text = params.text;
        block.scale = params.scale ? params.scale : 1;
        this._addBlockAt(position, block);
        this.updatedMetrics = false;
    }
    _getGlyphBlock(params) {
        // vex 5
        const block = JSON.parse(JSON.stringify(SuiInlineText.blockDefaults));
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_4__.smoSerialize.vexMerge(block, params);
        params.text = params.glyphCode;
        block.text = params.text;
        block.scale = params.scale ? params.scale : 1;
        /*  vex 4
        const block = JSON.parse(JSON.stringify(SuiInlineText.blockDefaults));
        block.symbolType = SuiInlineText.symbolTypes.GLYPH;
    
        block.glyphCode = params.glyphCode;
        block.glyph = new VF.Glyph(block.glyphCode, this.fontSize);
        // Vex 4 feature, vex 5 elimitated metrics here
        block.metrics = VF.ChordSymbol.getMetricForGlyph(block.glyphCode);
        block.scale = (params.textType && params.textType !== SuiInlineText.textTypes.normal) ?
          2 * VF.ChordSymbol.superSubRatio : 2;
    
        block.textType = params.textType ? params.textType : SuiInlineText.textTypes.normal;
    
        block.glyph.scale = block.glyph.scale * block.scale;
        */
        return block;
    }
    // ### addGlyphBlockAt
    // Add a glyph block to the line of text.  Params must include:
    // {glyphCode:'csymDiminished'}
    addGlyphBlockAt(position, params) {
        const block = this._getGlyphBlock(params);
        this._addBlockAt(position, block);
        this.updatedMetrics = false;
    }
    isSuperscript(block) {
        return block.textType === SuiInlineText.textTypes.superScript;
    }
    isSubcript(block) {
        return block.textType === SuiInlineText.textTypes.subScript;
    }
    getHighlight(block) {
        return block.highlighted;
    }
    setHighlight(block, value) {
        block.highlighted = value;
    }
    rescale(scale) {
        scale = (scale * this.fontSize < 6) ? 6 / this.fontSize : scale;
        scale = (scale * this.fontSize > 72) ? 72 / this.fontSize : scale;
        this.blocks.forEach((block) => {
            block.scale = scale;
        });
        this.updatedMetrics = false;
    }
    render() {
        if (!this.updatedMetrics) {
            this._calculateBlockIndex();
        }
        this.context.getContext().setFont({
            family: this.fontFamily, size: this.fontSize, weight: this.fontWeight, style: this.fontStyle
        });
        const group = this.context.getContext().openGroup();
        this.element = group;
        const mmClass = 'suiInlineText';
        let ix = 0;
        group.classList.add('vf-' + this.attrs.id);
        group.classList.add(this.attrs.id);
        group.classList.add(mmClass);
        group.classList.add(this.purpose);
        group.id = this.attrs.id;
        this.artifacts = [];
        this.blocks.forEach((block) => {
            var bg = this.context.getContext().openGroup();
            bg.classList.add('textblock-' + this.attrs.id + ix);
            this._drawBlock(block);
            this.context.getContext().closeGroup();
            const artifact = { block, box: _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default, index: 0 };
            artifact.box = this.context.offsetBbox(bg);
            artifact.index = ix;
            this.artifacts.push(artifact);
            ix += 1;
        });
        this.context.getContext().closeGroup();
        this.logicalBox = this.context.offsetBbox(group);
    }
    _drawBlock(block) {
        const sp = this.isSuperscript(block);
        const sub = this.isSubcript(block);
        const highlight = this.getHighlight(block);
        const y = block.y - this.context.box.y; // relative y into page
        if (highlight) {
            this.context.getContext().save();
            this.context.getContext().setFillStyle('#999');
        }
        // This is how svgcontext expects to get 'style'
        const weight = this.fontWeight;
        const style = this.fontStyle;
        const family = this.fontFamily;
        if (sp || sub) {
            this.context.getContext().save();
            this.context.getContext().setFont({
                family, size: this.fontSize * VF.ChordSymbol.superSubRatio * block.scale, weight, style
            });
        }
        else {
            this.context.getContext().setFont({ family, size: this.fontSize * block.scale, weight, style });
        }
        if (block.symbolType === SuiInlineText.symbolTypes.TEXT) {
            this.context.getContext().fillText(block.text, block.x, y);
        }
        else if (block.symbolType === SuiInlineText.symbolTypes.GLYPH) {
            block.glyph.render(this.context.getContext(), block.x, y);
        }
        if (sp || sub) {
            this.context.getContext().restore();
        }
        if (highlight) {
            this.context.getContext().restore();
        }
    }
    getText() {
        let rv = '';
        this.blocks.forEach((block) => {
            rv += block.text;
        });
        return rv;
    }
}
// ## SuiTextBlock
// A text block is a set of inline blocks that can be aligned/arranged in different ways.
class SuiTextBlock {
    static get relativePosition() {
        return {
            ABOVE: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.ABOVE,
            BELOW: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.BELOW,
            LEFT: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.LEFT,
            RIGHT: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.RIGHT
        };
    }
    constructor(params) {
        this.inlineBlocks = [];
        this.spacing = 0;
        this.currentBlockIndex = 0;
        this.outlineRect = null;
        this.currentBlock = null;
        this.logicalBox = _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default;
        this.inlineBlocks = [];
        this.scroller = params.scroller;
        this.spacing = params.spacing;
        this.context = params.context;
        this.skipRender = false; // used when editing the text
        if (params.blocks.length < 1) {
            const inlineParams = SuiInlineText.defaults;
            inlineParams.scroller = this.scroller;
            inlineParams.context = this.context;
            const inst = new SuiInlineText(inlineParams);
            params.blocks = [{ text: inst, position: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.RIGHT, activeText: true }];
        }
        params.blocks.forEach((block) => {
            if (!this.currentBlock) {
                this.currentBlock = block;
                this.currentBlockIndex = 0;
            }
            this.inlineBlocks.push(block);
        });
        this.justification = params.justification ? params.justification :
            _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.justifications.LEFT;
    }
    render() {
        this.unrender();
        this.inlineBlocks.forEach((block) => {
            block.text.render();
            if (block.activeText) {
                this._outlineBox(this.context, block.text.logicalBox);
            }
            if (!this.logicalBox || this.logicalBox.width < 1) {
                this.logicalBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.smoBox(block.text.logicalBox);
            }
            else {
                this.logicalBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.unionRect(this.logicalBox, block.text.logicalBox);
            }
        });
    }
    _outlineBox(context, box) {
        const outlineStroke = _textEdit__WEBPACK_IMPORTED_MODULE_2__.SuiTextEditor.strokes['text-highlight'];
        if (!this.outlineRect) {
            this.outlineRect = {
                context, box, classes: 'text-drag',
                stroke: outlineStroke, scroll: this.scroller.scrollState, timeOff: 1000
            };
        }
        this.outlineRect.box = box;
        this.outlineRect.context = context;
        this.outlineRect.scroll = this.scroller.scrollState;
        _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.outlineRect(this.outlineRect);
    }
    offsetStartX(offset) {
        this.inlineBlocks.forEach((block) => {
            block.text.offsetStartX(offset);
        });
    }
    offsetStartY(offset) {
        this.inlineBlocks.forEach((block) => {
            block.text.offsetStartY(offset);
        });
    }
    rescale(scale) {
        this.inlineBlocks.forEach((block) => {
            block.text.rescale(scale);
        });
    }
    get x() {
        return this.getLogicalBox().x;
    }
    get y() {
        return this.getLogicalBox().y;
    }
    maxFontHeight(scale) {
        let rv = 0;
        this.inlineBlocks.forEach((block) => {
            const blockHeight = block.text.maxFontHeight(scale);
            rv = blockHeight > rv ? blockHeight : rv;
        });
        return rv;
    }
    static blockFromScoreText(scoreText, context, pageMap, position, scroller) {
        var inlineText = SuiInlineText.fromScoreText(scoreText, context, pageMap, scroller);
        return { text: inlineText, position, activeText: true };
    }
    getLogicalBox() {
        return this._calculateBoundingClientRect();
    }
    _calculateBoundingClientRect() {
        let rv = _smo_data_common__WEBPACK_IMPORTED_MODULE_3__.SvgBox.default;
        this.inlineBlocks.forEach((block) => {
            if (!rv.x) {
                rv = block.text.getLogicalBox();
            }
            else {
                rv = _svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.unionRect(rv, block.text.getLogicalBox());
            }
        });
        rv.y = rv.y - rv.height;
        return rv;
    }
    static fromTextGroup(tg, context, pageMap, scroller) {
        const blocks = [];
        // Create an inline block for each ScoreText
        tg.textBlocks.forEach((stBlock) => {
            const st = stBlock.text;
            const newText = SuiTextBlock.blockFromScoreText(st, context, pageMap, stBlock.position, scroller);
            newText.activeText = stBlock.activeText;
            blocks.push(newText);
        });
        const rv = new SuiTextBlock({
            blocks, justification: tg.justification, spacing: tg.spacing, context, scroller,
            skipRender: false
        });
        rv._justify();
        return rv;
    }
    unrender() {
        this.inlineBlocks.forEach((block) => {
            if (block.text.element) {
                block.text.element.remove();
                block.text.element = null;
            }
        });
    }
    // ### _justify
    // justify the blocks according to the group justify policy and the
    // relative position of the blocks
    _justify() {
        let hIx = 0;
        let left = 0;
        let minx = 0;
        let maxx = 0;
        let lvl = 0;
        let maxwidth = 0;
        let runningWidth = 0;
        let runningHeight = 0;
        if (!this.inlineBlocks.length) {
            return;
        }
        minx = this.inlineBlocks[0].text.startX;
        // We justify relative to first block x/y.
        const initialX = this.inlineBlocks[0].text.startX;
        const initialY = this.inlineBlocks[0].text.startY;
        const vert = {};
        this.inlineBlocks.forEach((inlineBlock) => {
            const block = inlineBlock.text;
            const blockBox = block.getLogicalBox();
            // If this is a horizontal positioning, reset to first blokc position
            //
            if (hIx > 0) {
                block.startX = initialX;
                block.startY = initialY;
            }
            minx = block.startX < minx ? block.startX : minx;
            maxx = (block.startX + blockBox.width) > maxx ? block.startX + blockBox.width : maxx;
            lvl = inlineBlock.position === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.ABOVE ? lvl + 1 : lvl;
            lvl = inlineBlock.position === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.BELOW ? lvl - 1 : lvl;
            if (inlineBlock.position === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.RIGHT) {
                block.startX += runningWidth;
                if (hIx > 0) {
                    block.startX += this.spacing;
                }
            }
            if (inlineBlock.position === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.LEFT) {
                if (hIx > 0) {
                    block.startX = minx - blockBox.width;
                    minx = block.startX;
                    block.startX -= this.spacing;
                }
            }
            if (inlineBlock.position === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.BELOW) {
                block.startY += runningHeight;
                if (hIx > 0) {
                    block.startY += this.spacing;
                }
            }
            if (inlineBlock.position === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.relativePositions.ABOVE) {
                block.startY -= runningHeight;
                if (hIx > 0) {
                    block.startY -= this.spacing;
                }
            }
            if (!vert[lvl]) {
                vert[lvl] = {
                    blocks: [block], minx: block.startX, maxx: block.startX + blockBox.width,
                    width: blockBox.width
                };
                maxwidth = vert[lvl].width;
                vert[lvl].blocks = [block];
                vert[lvl].minx = block.startX;
                vert[lvl].maxx = block.startX + blockBox.width;
                maxwidth = vert[lvl].width = blockBox.width;
            }
            else {
                vert[lvl].blocks.push(block);
                vert[lvl].minx = vert[lvl].minx < block.startX ? vert[lvl].minx : block.startX;
                vert[lvl].maxx = vert[lvl].maxx > (block.startX + blockBox.width) ?
                    vert[lvl].maxx : (block.startX + blockBox.width);
                vert[lvl].width += blockBox.width;
                maxwidth = maxwidth > vert[lvl].width ? maxwidth : vert[lvl].width;
            }
            runningWidth += blockBox.width;
            runningHeight += blockBox.height;
            hIx += 1;
            block.updatedMetrics = false;
        });
        const levels = Object.keys(vert);
        // Horizontal justify the vertical blocks
        levels.forEach((level) => {
            const vobj = vert[level];
            if (this.justification === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.justifications.LEFT) {
                left = minx - vobj.minx;
            }
            else if (this.justification === _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoTextGroup.justifications.RIGHT) {
                left = maxx - vobj.maxx;
            }
            else {
                left = (maxwidth / 2) - (vobj.width / 2);
                left += minx - vobj.minx;
            }
            vobj.blocks.forEach((block) => {
                block.offsetStartX(left);
            });
        });
    }
}


/***/ }),

/***/ "./src/render/sui/tracker.ts":
/*!***********************************!*\
  !*** ./src/render/sui/tracker.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTracker: () => (/* binding */ SuiTracker)
/* harmony export */ });
/* harmony import */ var _mapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mapper */ "./src/render/sui/mapper.ts");
/* harmony import */ var _svgHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _audio_oscillator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../audio/oscillator */ "./src/render/audio/oscillator.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.






/**
 * SuiTracker
 A tracker maps the UI elements to the logical elements ,and allows the user to
 move through the score and make selections, for navigation and editing.
 */
class SuiTracker extends _mapper__WEBPACK_IMPORTED_MODULE_0__.SuiMapper {
    static get strokes() {
        return {
            suggestion: {
                strokeName: 'suggestion',
                stroke: '#fc9',
                strokeWidth: 3,
                strokeDasharray: '4,1',
                fill: 'none',
                opacity: 1.0
            },
            selection: {
                strokeName: 'selection',
                stroke: '#99d',
                strokeWidth: 3,
                strokeDasharray: 2,
                fill: 'none',
                opacity: 1.0
            },
            staffModifier: {
                strokeName: 'staffModifier',
                stroke: '#933',
                strokeWidth: 3,
                fill: 'none',
                strokeDasharray: 0,
                opacity: 1.0
            }, pitchSelection: {
                strokeName: 'pitchSelection',
                stroke: '#933',
                strokeWidth: 3,
                fill: 'none',
                strokeDasharray: 0,
                opacity: 1.0
            }
        };
    }
    constructor(renderer, scroller, pasteBuffer) {
        super(renderer, scroller, pasteBuffer);
        this.idleTimer = Date.now();
        this.musicCursorGlyph = null;
    }
    // ### renderElement
    // the element the score is rendered on
    get renderElement() {
        return this.renderer.renderElement;
    }
    get score() {
        return this.renderer.score;
    }
    getIdleTime() {
        return this.idleTimer;
    }
    getSelectedModifier() {
        if (this.modifierSelections.length) {
            return this.modifierSelections[0];
        }
        return null;
    }
    getSelectedModifiers() {
        return this.modifierSelections;
    }
    static serializeEvent(evKey) {
        if (!evKey) {
            return [];
        }
        const rv = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_3__.smoSerialize.serializedMerge(['type', 'shiftKey', 'ctrlKey', 'altKey', 'key', 'keyCode'], evKey, rv);
        return rv;
    }
    advanceModifierSelection(score, keyEv) {
        if (!keyEv) {
            return;
        }
        this.idleTimer = Date.now();
        const offset = keyEv.key === 'ArrowLeft' ? -1 : 1;
        this.modifierIndex = this.modifierIndex + offset;
        this.modifierIndex = (this.modifierIndex === -2 && this.localModifiers.length) ?
            this.localModifiers.length - 1 : this.modifierIndex;
        if (this.modifierIndex >= this.localModifiers.length || this.modifierIndex < 0) {
            this.modifierIndex = -1;
            this.modifierSelections = [];
            return;
        }
        const local = this.localModifiers[this.modifierIndex];
        const box = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(local.box);
        this.modifierSelections = [{ index: 0, box, modifier: local.modifier, selection: local.selection }];
        this._highlightModifier();
    }
    static stringifyBox(box) {
        return '{x:' + box.x + ',y:' + box.y + ',width:' + box.width + ',height:' + box.height + '}';
    }
    // ### _getOffsetSelection
    // Get the selector that is the offset of the first existing selection
    _getOffsetSelection(offset) {
        if (!this.score) {
            return _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.default;
        }
        let testSelection = this.getExtremeSelection(Math.sign(offset));
        const scopyTick = JSON.parse(JSON.stringify(testSelection.selector));
        const scopyMeasure = JSON.parse(JSON.stringify(testSelection.selector));
        scopyTick.tick += offset;
        scopyMeasure.measure += offset;
        const targetMeasure = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.measureSelection(this.score, testSelection.selector.staff, scopyMeasure.measure);
        if (targetMeasure && targetMeasure.measure && targetMeasure.measure.voices.length <= scopyMeasure.voice) {
            scopyMeasure.voice = 0;
        }
        if (targetMeasure && targetMeasure.measure) {
            scopyMeasure.tick = (offset < 0) ? targetMeasure.measure.voices[scopyMeasure.voice].notes.length - 1 : 0;
        }
        if (testSelection.measure.voices.length > scopyTick.voice &&
            testSelection.measure.voices[scopyTick.voice].notes.length > scopyTick.tick && scopyTick.tick >= 0) {
            if (testSelection.selector.voice !== testSelection.measure.getActiveVoice()) {
                scopyTick.voice = testSelection.measure.getActiveVoice();
                testSelection = this._getClosestTick(scopyTick);
                return testSelection.selector;
            }
            return scopyTick;
        }
        else if (targetMeasure &&
            scopyMeasure.measure < testSelection.staff.measures.length && scopyMeasure.measure >= 0) {
            return scopyMeasure;
        }
        return testSelection.selector;
    }
    getSelectedGraceNotes() {
        if (!this.modifierSelections.length) {
            return [];
        }
        const ff = this.modifierSelections.filter((mm) => { var _a, _b; return ((_b = (_a = mm.modifier) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b.type) === 'SmoGraceNote'; });
        return ff;
    }
    isGraceNoteSelected() {
        if (this.modifierSelections.length) {
            const ff = this.modifierSelections.findIndex((mm) => mm.modifier.attrs.type === 'SmoGraceNote');
            return ff >= 0;
        }
        return false;
    }
    _growGraceNoteSelections(offset) {
        var _a;
        this.idleTimer = Date.now();
        const far = this.modifierSelections.filter((mm) => mm.modifier.attrs.type === 'SmoGraceNote');
        if (!far.length) {
            return;
        }
        const ix = (offset < 0) ? 0 : far.length - 1;
        const sel = far[ix];
        const left = this.localModifiers.filter((mt) => {
            var _a, _b;
            return ((_b = (_a = mt.modifier) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b.type) === 'SmoGraceNote' && sel.selection && mt.selection &&
                _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(mt.selection.selector, sel.selection.selector);
        });
        if (ix + offset < 0 || ix + offset >= left.length) {
            return;
        }
        const leftSel = left[ix + offset];
        if (!leftSel) {
            console.warn('bad selector in _growGraceNoteSelections');
        }
        leftSel.box = (_a = leftSel.box) !== null && _a !== void 0 ? _a : _smo_data_common__WEBPACK_IMPORTED_MODULE_5__.SvgBox.default;
        this.modifierSelections.push(leftSel);
        this._highlightModifier();
    }
    get autoPlay() {
        return this.renderer.score ? this.renderer.score.preferences.autoPlay : false;
    }
    growSelectionRight() {
        this._growSelectionRight(false);
    }
    _growSelectionRight(skipPlay) {
        this.idleTimer = Date.now();
        if (this.isGraceNoteSelected()) {
            this._growGraceNoteSelections(1);
            return 0;
        }
        const nselect = this._getOffsetSelection(1);
        // already selected
        const artifact = this._getClosestTick(nselect);
        if (!artifact) {
            return 0;
        }
        if (this.selections.find((sel) => _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(sel.selector, artifact.selector))) {
            return 0;
        }
        if (!this.mapping && this.autoPlay && skipPlay === false && this.score) {
            _audio_oscillator__WEBPACK_IMPORTED_MODULE_4__.SuiOscillator.playSelectionNow(artifact, this.score, 1);
        }
        this.selections.push(artifact);
        this.deferHighlight();
        this._createLocalModifiersList();
        return artifact.note.tickCount;
    }
    moveHome(score, evKey) {
        var _a, _b;
        this.idleTimer = Date.now();
        const ls = this.selections[0].staff;
        if (evKey.ctrlKey) {
            const mm = ls.measures[0];
            const homeSel = this._getClosestTick({ staff: ls.staffId,
                measure: 0, voice: mm.getActiveVoice(), tick: 0, pitches: [] });
            if (evKey.shiftKey) {
                this._selectBetweenSelections(score, this.selections[0], homeSel);
            }
            else {
                this.selections = [homeSel];
                this.deferHighlight();
                this._createLocalModifiersList();
                if (homeSel.measure.svg.logicalBox) {
                    this.scroller.scrollVisibleBox(homeSel.measure.svg.logicalBox);
                }
            }
        }
        else {
            const system = this.selections[0].measure.svg.lineIndex;
            const lm = ls.measures.find((mm) => mm.svg.lineIndex === system && mm.measureNumber.systemIndex === 0);
            const mm = lm;
            const homeSel = this._getClosestTick({ staff: ls.staffId,
                measure: mm.measureNumber.measureIndex, voice: mm.getActiveVoice(),
                tick: 0, pitches: [] });
            if (evKey.shiftKey) {
                this._selectBetweenSelections(score, this.selections[0], homeSel);
            }
            else if ((_b = (_a = homeSel === null || homeSel === void 0 ? void 0 : homeSel.measure) === null || _a === void 0 ? void 0 : _a.svg) === null || _b === void 0 ? void 0 : _b.logicalBox) {
                this.selections = [homeSel];
                this.scroller.scrollVisibleBox(homeSel.measure.svg.logicalBox);
                this.deferHighlight();
                this._createLocalModifiersList();
            }
        }
    }
    moveEnd(score, evKey) {
        this.idleTimer = Date.now();
        const ls = this.selections[0].staff;
        if (evKey.ctrlKey) {
            const lm = ls.measures[ls.measures.length - 1];
            const voiceIx = lm.getActiveVoice();
            const voice = lm.voices[voiceIx];
            const endSel = this._getClosestTick({ staff: ls.staffId,
                measure: ls.measures.length - 1, voice: voiceIx, tick: voice.notes.length - 1, pitches: [] });
            if (evKey.shiftKey) {
                this._selectBetweenSelections(score, this.selections[0], endSel);
            }
            else {
                this.selections = [endSel];
                this.deferHighlight();
                this._createLocalModifiersList();
                if (endSel.measure.svg.logicalBox) {
                    this.scroller.scrollVisibleBox(endSel.measure.svg.logicalBox);
                }
            }
        }
        else {
            const system = this.selections[0].measure.svg.lineIndex;
            // find the largest measure index on this staff in this system
            const measures = ls.measures.filter((mm) => mm.svg.lineIndex === system);
            const lm = measures.reduce((a, b) => b.measureNumber.measureIndex > a.measureNumber.measureIndex ? b : a);
            const ticks = lm.voices[lm.getActiveVoice()].notes.length;
            const endSel = this._getClosestTick({ staff: ls.staffId,
                measure: lm.measureNumber.measureIndex, voice: lm.getActiveVoice(), tick: ticks - 1, pitches: [] });
            if (evKey.shiftKey) {
                this._selectBetweenSelections(score, this.selections[0], endSel);
            }
            else {
                this.selections = [endSel];
                this.deferHighlight();
                this._createLocalModifiersList();
                if (endSel.measure.svg.logicalBox) {
                    this.scroller.scrollVisibleBox(endSel.measure.svg.logicalBox);
                }
            }
        }
    }
    growSelectionRightMeasure() {
        let toSelect = 0;
        const rightmost = this.getExtremeSelection(1);
        const ticksLeft = rightmost.measure.voices[rightmost.measure.activeVoice]
            .notes.length - rightmost.selector.tick;
        if (ticksLeft === 0) {
            if (rightmost.selector.measure < rightmost.staff.measures.length) {
                const mix = rightmost.selector.measure + 1;
                rightmost.staff.measures[mix].setActiveVoice(rightmost.selector.voice);
                toSelect = rightmost.staff.measures[mix]
                    .voices[rightmost.staff.measures[mix].activeVoice].notes.length;
            }
        }
        else {
            toSelect = ticksLeft;
        }
        while (toSelect > 0) {
            this._growSelectionRight(true);
            toSelect -= 1;
        }
    }
    growSelectionLeft() {
        if (this.isGraceNoteSelected()) {
            this._growGraceNoteSelections(-1);
            return 0;
        }
        this.idleTimer = Date.now();
        const nselect = this._getOffsetSelection(-1);
        // already selected
        const artifact = this._getClosestTick(nselect);
        if (!artifact) {
            return 0;
        }
        if (this.selections.find((sel) => _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(sel.selector, artifact.selector))) {
            return 0;
        }
        artifact.measure.setActiveVoice(nselect.voice);
        this.selections.push(artifact);
        if (this.autoPlay && this.score) {
            _audio_oscillator__WEBPACK_IMPORTED_MODULE_4__.SuiOscillator.playSelectionNow(artifact, this.score, 1);
        }
        this.deferHighlight();
        this._createLocalModifiersList();
        return artifact.note.tickCount;
    }
    // if we are being moved right programmatically, avoid playing the selected note.
    moveSelectionRight(score, evKey, skipPlay) {
        if (this.selections.length === 0 || this.score === null) {
            return;
        }
        // const original = JSON.parse(JSON.stringify(this.getExtremeSelection(-1).selector));
        const nselect = this._getOffsetSelection(1);
        // skip any measures that are not displayed due to rest or repetition
        const mselect = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.measureSelection(this.score, nselect.staff, nselect.measure);
        if (mselect === null || mselect === void 0 ? void 0 : mselect.measure.svg.multimeasureLength) {
            nselect.measure += mselect === null || mselect === void 0 ? void 0 : mselect.measure.svg.multimeasureLength;
        }
        if (mselect) {
            mselect.measure.setActiveVoice(nselect.voice);
        }
        this._replaceSelection(nselect, skipPlay);
    }
    moveSelectionLeft() {
        if (this.selections.length === 0 || this.score === null) {
            return;
        }
        const nselect = this._getOffsetSelection(-1);
        // Skip multimeasure rests in parts
        const mselect = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.measureSelection(this.score, nselect.staff, nselect.measure);
        while (nselect.measure > 0 && mselect && (mselect.measure.svg.hideMultimeasure || mselect.measure.svg.multimeasureLength > 0)) {
            nselect.measure -= 1;
        }
        if (mselect) {
            mselect.measure.setActiveVoice(nselect.voice);
        }
        this._replaceSelection(nselect, false);
    }
    moveSelectionLeftMeasure() {
        this._moveSelectionMeasure(-1);
    }
    moveSelectionRightMeasure() {
        this._moveSelectionMeasure(1);
    }
    _moveSelectionMeasure(offset) {
        const selection = this.getExtremeSelection(Math.sign(offset));
        this.idleTimer = Date.now();
        const selector = JSON.parse(JSON.stringify(selection.selector));
        selector.measure += offset;
        selector.tick = 0;
        const selObj = this._getClosestTick(selector);
        if (selObj) {
            this.selections = [selObj];
        }
        this.deferHighlight();
        this._createLocalModifiersList();
    }
    _moveStaffOffset(offset) {
        if (this.selections.length === 0 || this.score === null) {
            return;
        }
        this.idleTimer = Date.now();
        const nselector = JSON.parse(JSON.stringify(this.selections[0].selector));
        nselector.staff = this.score.incrementActiveStaff(offset);
        this.selections = [this._getClosestTick(nselector)];
        this.deferHighlight();
        this._createLocalModifiersList();
    }
    removePitchSelection() {
        if (this.outlines['pitchSelection']) {
            if (this.outlines['pitchSelection'].element) {
                this.outlines['pitchSelection'].element.remove();
            }
            delete this.outlines['pitchSelection'];
        }
    }
    // ### _moveSelectionPitch
    // Suggest a specific pitch in a chord, so we can transpose just the one note vs. the whole chord.
    _moveSelectionPitch(index) {
        this.idleTimer = Date.now();
        if (!this.selections.length) {
            return;
        }
        const sel = this.selections[0];
        const note = sel.note;
        if (note.pitches.length < 2) {
            this.pitchIndex = -1;
            this.removePitchSelection();
            return;
        }
        this.pitchIndex = (this.pitchIndex + index) % note.pitches.length;
        sel.selector.pitches = [];
        sel.selector.pitches.push(this.pitchIndex);
        this._highlightPitchSelection(note, this.pitchIndex);
    }
    moveSelectionPitchUp() {
        this._moveSelectionPitch(1);
    }
    moveSelectionPitchDown() {
        if (!this.selections.length) {
            return;
        }
        this._moveSelectionPitch(this.selections[0].note.pitches.length - 1);
    }
    moveSelectionUp() {
        this._moveStaffOffset(-1);
    }
    moveSelectionDown() {
        this._moveStaffOffset(1);
    }
    containsArtifact() {
        return this.selections.length > 0;
    }
    _replaceSelection(nselector, skipPlay) {
        if (this.score === null) {
            return;
        }
        var artifact = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.noteSelection(this.score, nselector.staff, nselector.measure, nselector.voice, nselector.tick);
        if (!artifact) {
            artifact = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.noteSelection(this.score, nselector.staff, nselector.measure, 0, nselector.tick);
        }
        if (!artifact) {
            artifact = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.noteSelection(this.score, nselector.staff, nselector.measure, 0, 0);
        }
        if (!artifact) {
            // disappeared - default to start
            artifact = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.noteSelection(this.score, 0, 0, 0, 0);
        }
        if (!skipPlay && this.autoPlay && artifact) {
            _audio_oscillator__WEBPACK_IMPORTED_MODULE_4__.SuiOscillator.playSelectionNow(artifact, this.score, 1);
        }
        if (!artifact) {
            return;
        }
        artifact.measure.setActiveVoice(nselector.voice);
        // clear modifier selections
        this.clearModifierSelections();
        this.score.setActiveStaff(nselector.staff);
        const mapKey = Object.keys(this.measureNoteMap).find((k) => artifact && _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(this.measureNoteMap[k].selector, artifact.selector));
        if (!mapKey) {
            return;
        }
        const mapped = this.measureNoteMap[mapKey];
        // If this is a new selection, remove pitch-specific and replace with note-specific
        if (!nselector.pitches || nselector.pitches.length === 0) {
            this.pitchIndex = -1;
        }
        this.selections = [mapped];
        this.deferHighlight();
        this._createLocalModifiersList();
    }
    getFirstMeasureOfSelection() {
        if (this.selections.length) {
            return this.selections[0].measure;
        }
        return null;
    }
    // ## measureIterator
    // Description: iterate over the any measures that are part of the selection
    getSelectedMeasures() {
        const set = [];
        const rv = [];
        if (!this.score) {
            return [];
        }
        this.selections.forEach((sel) => {
            const measure = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.measureSelection(this.score, sel.selector.staff, sel.selector.measure);
            if (measure) {
                const ix = measure.selector.measure;
                if (set.indexOf(ix) === -1) {
                    set.push(ix);
                    rv.push(measure);
                }
            }
        });
        return rv;
    }
    _addSelection(selection) {
        const ar = this.selections.filter((sel) => _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.neq(sel.selector, selection.selector));
        if (this.autoPlay && this.score) {
            _audio_oscillator__WEBPACK_IMPORTED_MODULE_4__.SuiOscillator.playSelectionNow(selection, this.score, 1);
        }
        ar.push(selection);
        this.selections = ar;
    }
    _selectFromToInStaff(score, sel1, sel2) {
        const selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.innerSelections(score, sel1.selector, sel2.selector);
        /* .filter((ff) =>
          ff.selector.voice === sel1.measure.activeVoice
        ); */
        this.selections = [];
        // Get the actual selections from our map, since the client bounding boxes are already computed
        selections.forEach((sel) => {
            const key = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.getNoteKey(sel.selector);
            sel.measure.setActiveVoice(sel.selector.voice);
            // Skip measures that are not rendered because they are part of a multi-rest
            if (this.measureNoteMap && this.measureNoteMap[key]) {
                this.selections.push(this.measureNoteMap[key]);
            }
        });
        if (this.selections.length === 0) {
            this.selections = [sel1];
        }
        this.idleTimer = Date.now();
    }
    _selectBetweenSelections(score, s1, s2) {
        const min = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.gt(s1.selector, s2.selector) ? s2 : s1;
        const max = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.lt(min.selector, s2.selector) ? s2 : s1;
        this._selectFromToInStaff(score, min, max);
        this._createLocalModifiersList();
        this.highlightQueue.selectionCount = this.selections.length;
        this.deferHighlight();
    }
    selectSuggestion(score, ev) {
        if (!this.suggestion || !this.suggestion.measure || this.score === null) {
            return;
        }
        this.idleTimer = Date.now();
        if (this.modifierSuggestion) {
            this.modifierIndex = -1;
            this.modifierSelections = [this.modifierSuggestion];
            this.modifierSuggestion = null;
            this.createLocalModifiersFromModifierTabs(this.modifierSelections);
            // If we selected due to a mouse click, move the selection to the
            // selected modifier
            this._highlightModifier();
            return;
        }
        else if (ev.type === 'click') {
            this.clearModifierSelections(); // if we click on a non-modifier, clear the
            // modifier selections
        }
        if (ev.shiftKey) {
            const sel1 = this.getExtremeSelection(-1);
            if (sel1.selector.staff === this.suggestion.selector.staff) {
                this._selectBetweenSelections(score, sel1, this.suggestion);
                return;
            }
        }
        if (ev.ctrlKey) {
            this._addSelection(this.suggestion);
            this._createLocalModifiersList();
            this.deferHighlight();
            return;
        }
        if (this.autoPlay) {
            _audio_oscillator__WEBPACK_IMPORTED_MODULE_4__.SuiOscillator.playSelectionNow(this.suggestion, this.score, 1);
        }
        const preselected = this.selections[0] ?
            _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(this.suggestion.selector, this.selections[0].selector) && this.selections.length === 1 : false;
        if (this.selections.length === 0) {
            this.selections.push(this.suggestion);
        }
        const note = this.selections[0].note;
        if (preselected && note.pitches.length > 1) {
            this.pitchIndex = (this.pitchIndex + 1) % note.pitches.length;
            this.selections[0].selector.pitches = [this.pitchIndex];
        }
        else {
            const selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelection.noteFromSelector(this.score, this.suggestion.selector);
            if (selection) {
                selection.box = JSON.parse(JSON.stringify(this.suggestion.box));
                selection.scrollBox = JSON.parse(JSON.stringify(this.suggestion.scrollBox));
                this.selections = [selection];
            }
        }
        if (preselected && this.modifierSelections.length) {
            const mods = this.modifierSelections.filter((mm) => mm.selection && _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(mm.selection.selector, this.selections[0].selector));
            if (mods.length) {
                const modToAdd = mods[0];
                if (!modToAdd) {
                    console.warn('bad modifier selection in selectSuggestion 2');
                }
                this.modifierSelections[0] = modToAdd;
                this.modifierIndex = mods[0].index;
                this._highlightModifier();
                return;
            }
        }
        this.score.setActiveStaff(this.selections[0].selector.staff);
        this.deferHighlight();
        this._createLocalModifiersList();
    }
    _setModifierAsSuggestion(artifact) {
        if (!artifact.box) {
            return;
        }
        this.modifierSuggestion = artifact;
        this._drawRect(artifact.box, 'suggestion');
    }
    _setArtifactAsSuggestion(artifact) {
        let sameSel = null;
        let i = 0;
        for (i = 0; i < this.selections.length; ++i) {
            const ss = this.selections[i];
            if (ss && _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(ss.selector, artifact.selector)) {
                sameSel = ss;
                break;
            }
        }
        if (sameSel || !artifact.box) {
            return;
        }
        this.modifierSuggestion = null;
        this.suggestion = artifact;
        this._drawRect(artifact.box, 'suggestion');
    }
    _highlightModifier() {
        let box = null;
        if (!this.modifierSelections.length) {
            return;
        }
        this.modifierSelections.forEach((artifact) => {
            var _a;
            if (box === null) {
                box = (_a = artifact.modifier.logicalBox) !== null && _a !== void 0 ? _a : null;
            }
            else {
                box = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.unionRect(box, _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(artifact.modifier.logicalBox));
            }
        });
        if (box === null) {
            return;
        }
        this._drawRect(box, 'staffModifier');
    }
    _highlightPitchSelection(note, index) {
        const noteDiv = $(this.renderElement).find('#' + note.renderId);
        const heads = noteDiv.find('.vf-notehead');
        if (!heads.length) {
            return;
        }
        const headEl = heads[index];
        const pageContext = this.renderer.pageMap.getRendererFromModifier(note);
        $(pageContext.svg).find('.vf-pitchSelection').remove();
        const box = pageContext.offsetBbox(headEl);
        this._drawRect(box, 'pitchSelection');
    }
    _highlightActiveVoice(selection) {
        let i = 0;
        const selector = selection.selector;
        for (i = 1; i <= 4; ++i) {
            const cl = 'v' + i.toString() + '-active';
            $('body').removeClass(cl);
        }
        const c2 = 'v' + (selector.voice + 1).toString() + '-active';
        $('body').addClass(c2);
    }
    // The user has just switched voices, select the active voice
    selectActiveVoice() {
        const selection = this.selections[0];
        const selector = JSON.parse(JSON.stringify(selection.selector));
        selector.voice = selection.measure.activeVoice;
        this.selections = [this._getClosestTick(selector)];
        this.deferHighlight();
    }
    highlightSelection() {
        let i = 0;
        let prevSel = null;
        let curBox = _smo_data_common__WEBPACK_IMPORTED_MODULE_5__.SvgBox.default;
        this.idleTimer = Date.now();
        const grace = this.getSelectedGraceNotes();
        // If this is not a note with grace notes, logically unselect the grace notes
        if (grace && grace.length && grace[0].selection && this.selections.length) {
            if (!_smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.sameNote(grace[0].selection.selector, this.selections[0].selector)) {
                this.clearModifierSelections();
            }
            else {
                this._highlightModifier();
                return;
            }
        }
        // If there is a race condition with a change, avoid referencing null note
        if (!this.selections[0].note) {
            return;
        }
        const note = this.selections[0].note;
        if (this.pitchIndex >= 0 && this.selections.length === 1 &&
            this.pitchIndex < note.pitches.length) {
            this._highlightPitchSelection(note, this.pitchIndex);
            this._highlightActiveVoice(this.selections[0]);
            return;
        }
        this.removePitchSelection();
        this.pitchIndex = -1;
        if (this.selections.length === 1 && note.logicalBox) {
            this._drawRect(note.logicalBox, 'selection');
            this._highlightActiveVoice(this.selections[0]);
            return;
        }
        const sorted = this.selections.sort((a, b) => _smo_xform_selections__WEBPACK_IMPORTED_MODULE_2__.SmoSelector.gt(a.selector, b.selector) ? 1 : -1);
        prevSel = sorted[0];
        // rendered yet?
        if (!prevSel || !prevSel.box) {
            return;
        }
        curBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(prevSel.box);
        const boxes = [];
        for (i = 1; i < sorted.length; ++i) {
            const sel = sorted[i];
            if (!sel.box || !prevSel.box) {
                continue;
            }
            // const ydiff = Math.abs(prevSel.box.y - sel.box.y);
            if (sel.selector.staff === prevSel.selector.staff && sel.measure.svg.lineIndex === prevSel.measure.svg.lineIndex) {
                curBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.unionRect(curBox, sel.box);
            }
            else if (curBox) {
                boxes.push(curBox);
                curBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(sel.box);
            }
            this._highlightActiveVoice(sel);
            prevSel = sel;
        }
        boxes.push(curBox);
        if (this.modifierSelections.length) {
            boxes.push(this.modifierSelections[0].box);
        }
        this._drawRect(boxes, 'selection');
    }
    /**
     * Boxes are divided up into lines/systems already.  But we need
     * to put the correct box on the correct page.
     * @param boxes
     */
    drawSelectionRects(boxes) {
        const keys = Object.keys(this.selectionRects);
        // erase any old selections
        keys.forEach((key) => {
            const oon = this.selectionRects[parseInt(key)];
            oon.forEach((outline) => {
                if (outline.element) {
                    outline.element.remove();
                    outline.element = undefined;
                }
            });
        });
        this.selectionRects = {};
        // Create an OutlineInfo for each page
        const pages = [];
        const stroke = SuiTracker.strokes['selection'];
        boxes.forEach((box) => {
            let testBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(box);
            let context = this.renderer.pageMap.getRenderer(testBox);
            testBox.y -= context.box.y;
            if (!this.selectionRects[context.pageNumber]) {
                this.selectionRects[context.pageNumber] = [];
                pages.push(context.pageNumber);
            }
            this.selectionRects[context.pageNumber].push({
                context: context, box: testBox, classes: '',
                stroke, scroll: this.scroller.scrollState,
                timeOff: 0
            });
        });
        pages.forEach((pageNo) => {
            const outlineInfos = this.selectionRects[pageNo];
            outlineInfos.forEach((info) => {
                _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.outlineRect(info);
            });
        });
    }
    _drawRect(pBox, strokeName) {
        const stroke = SuiTracker.strokes[strokeName];
        const boxes = Array.isArray(pBox) ? pBox : [pBox];
        if (strokeName === 'selection') {
            this.drawSelectionRects(boxes);
            return;
        }
        boxes.forEach((box) => {
            let testBox = _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.smoBox(box);
            let context = this.renderer.pageMap.getRenderer(testBox);
            const timeOff = strokeName === 'suggestion' ? 1000 : 0;
            if (context) {
                testBox.y -= context.box.y;
                if (!this.outlines[strokeName]) {
                    this.outlines[strokeName] = {
                        context: context, box: testBox, classes: '',
                        stroke, scroll: this.scroller.scrollState,
                        timeOff
                    };
                }
                this.outlines[strokeName].box = testBox;
                this.outlines[strokeName].context = context;
                _svgHelpers__WEBPACK_IMPORTED_MODULE_1__.SvgHelpers.outlineRect(this.outlines[strokeName]);
            }
        });
    }
}


/***/ }),

/***/ "./src/render/vex/glyphDimensions.ts":
/*!*******************************************!*\
  !*** ./src/render/vex/glyphDimensions.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   vexGlyph: () => (/* binding */ vexGlyph)
/* harmony export */ });
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



const VF = _common_vex__WEBPACK_IMPORTED_MODULE_2__.VexFlow;
class vexGlyph {
    static width(smoGlyph) {
        return (0,_common_vex__WEBPACK_IMPORTED_MODULE_2__.getGlyphWidth)(smoGlyph);
    }
    static accidental(a) {
        return vexGlyph.accidentals[a];
    }
    static barWidth(b) {
        const str = _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoBarline.barlineString(b);
        const cc = vexGlyph.dimensions[str];
        return cc.width + cc.spacingRight;
    }
    static accidentalWidth(accidental) {
        return vexGlyph.width(vexGlyph.accidentals[accidental]);
    }
    static get accidentals() {
        return {
            'b': vexGlyph.dimensions.flat,
            '#': vexGlyph.dimensions.sharp,
            'bb': vexGlyph.dimensions.doubleFlat,
            '##': vexGlyph.dimensions.doubleSharp,
            'n': vexGlyph.dimensions.natural
        };
    }
    static repeatSymbolWidth() {
        return vexGlyph.width(vexGlyph.dimensions['repeatSymbol']);
    }
    static get tempo() {
        return vexGlyph.dimensions.tempo;
    }
    static keySignatureLength(key) {
        return _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getSharpsInKeySignature(key) * vexGlyph.width(vexGlyph.dimensions.sharp) +
            _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getFlatsInKeySignature(key) * vexGlyph.width(vexGlyph.dimensions.flat) +
            vexGlyph.dimensions.keySignature.spacingRight;
    }
    static get timeSignature() {
        return vexGlyph.dimensions.timeSignature;
    }
    static get dot() {
        return vexGlyph.dimensions.dot;
    }
    static get tupletBeam() {
        return vexGlyph.dimensions.tupletBeam;
    }
    static get stem() {
        return vexGlyph.dimensions.stem;
    }
    static get flag() {
        return vexGlyph.dimensions.flag;
    }
    static clef(c) {
        const key = c.toLowerCase() + 'Clef';
        if (!vexGlyph.dimensions[key]) {
            return vexGlyph.dimensions.tenorClef;
        }
        if (vexGlyph.dimensions[key].vexGlyph) {
            const width = vexGlyph.width(vexGlyph.dimensions[key]);
            return {
                width,
                height: 68.32,
                yTop: 3,
                yBottom: 3,
                spacingRight: 10,
                vexGlyph: 'gClef'
            };
        }
        return vexGlyph.dimensions[key];
    }
    static get dimensions() {
        return {
            tupletBeam: {
                width: 5,
                height: 6,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: null
            }, repeatSymbol: {
                width: 25,
                height: 6,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: 'repeat1Bar'
            },
            singleBar: {
                width: 1,
                height: 41,
                yTop: 0,
                yBottom: 0,
                spacingRight: 1,
                vexGlyph: null
            },
            endBar: {
                width: 5.22,
                height: 40.99,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: null
            },
            doubleBar: {
                width: 3.22,
                height: 40.99,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: null
            },
            endRepeat: {
                width: 6,
                height: 40.99,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: null
            },
            startRepeat: {
                width: 6,
                height: 40.99,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: null
            },
            noteHead: {
                width: 15.3,
                height: 10.48,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: 'noteheadBlack'
            },
            dot: {
                width: 15,
                height: 5,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: 'augmentationDot'
            }, // This isn't accurate, but I don't
            // want to add extra space just for clef.
            trebleClef: {
                width: 35,
                height: 68.32,
                yTop: 3,
                yBottom: 3,
                spacingRight: 5,
                vexGlyph: 'gClef'
            },
            bassClef: {
                width: 36,
                height: 31.88,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: 'fClef'
            },
            altoClef: {
                width: 31.5,
                yTop: 0,
                yBottom: 0,
                height: 85.5,
                spacingRight: 5,
                vexGlyph: 'cClef'
            },
            tenorClef: {
                width: 31.5,
                yTop: 10,
                yBottom: 0,
                height: 41,
                spacingRight: 5,
                vexGlyph: 'cClef'
            },
            timeSignature: {
                width: 22.36,
                height: 85,
                yTop: 0,
                yBottom: 0,
                spacingRight: 2,
                vexGlyph: 'timeSig4'
            },
            tempo: {
                width: 10,
                height: 37,
                yTop: 37,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: null
            },
            flat: {
                width: 15,
                height: 23.55,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: 'accidentalFlat'
            },
            keySignature: {
                width: 0,
                height: 85.5,
                yTop: 0,
                yBottom: 0,
                spacingRight: 5,
                vexGlyph: null
            },
            sharp: {
                width: 17,
                height: 62,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: 'accidentalSharp',
            },
            natural: {
                width: 15,
                height: 53.35,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: 'accidentalNatural',
            },
            doubleSharp: {
                height: 10.04,
                width: 21.63,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: 'accidentalDoubleSharp'
            },
            doubleFlat: {
                width: 13.79,
                height: 49.65,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: 'accidentalDoubleFlat'
            }, stem: {
                width: 1,
                height: 35,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: null
            }, flag: {
                width: 10,
                height: 35,
                yTop: 0,
                yBottom: 0,
                spacingRight: 0,
                vexGlyph: 'flag8thUp' // use for width measurements all flags
            }
        };
    }
}


/***/ }),

/***/ "./src/render/vex/vxMeasure.ts":
/*!*************************************!*\
  !*** ./src/render/vex/vxMeasure.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VxMeasure: () => (/* binding */ VxMeasure)
/* harmony export */ });
/* harmony import */ var _smo_data_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sui/layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles/font_metrics/ssp-serif-metrics */ "./src/styles/font_metrics/ssp-serif-metrics.js");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
// ## Description:
// This file calls the vexflow routines that actually render a
// measure of music.  If multiple measures are justified in a
// column, the rendering is deferred until all the measures have been
// preformatted.









const VF = _common_vex__WEBPACK_IMPORTED_MODULE_8__.VexFlow;
// const VF = eval('Vex.Flow');
/**
 * This is the interface for VexFlow library that actually does the engraving.
 * @category SuiRender
 */
class VxMeasure {
    constructor(context, selection, printing, softmax) {
        this.rendered = false;
        this.noteToVexMap = {};
        this.beamToVexMap = {};
        this.tupletToVexMap = {};
        this.multimeasureRest = null;
        this.vexNotes = [];
        this.vexBeamGroups = [];
        this.vexTuplets = [];
        this.tickmapObject = null;
        this.stave = null; // vex stave
        this.voiceNotes = []; // notes for current voice, as rendering
        this.voiceAr = [];
        this.formatter = null;
        this.allCues = false;
        this.modifiersToBox = [];
        this.collisionMap = {};
        this.dbgLeftX = 0;
        this.dbgWidth = 0;
        this.context = context;
        this.rendered = false;
        this.selection = selection;
        this.smoMeasure = this.selection.measure;
        this.printing = printing;
        this.allCues = selection.staff.partInfo.displayCues;
        this.tupletToVexMap = {};
        this.vexNotes = [];
        this.vexBeamGroups = [];
        this.vexBeamGroups = [];
        this.beamToVexMap = {};
        this.softmax = softmax;
    }
    static get fillStyle() {
        return '#000';
    }
    isWholeRest() {
        return (this.smoMeasure.voices.length === 1 &&
            this.smoMeasure.voices[0].notes.length === 1 &&
            this.smoMeasure.voices[0].notes[0].isRest());
    }
    // We add microtones to the notes, without regard really to how they interact
    _createMicrotones(smoNote, vexNote) {
        const tones = smoNote.getMicrotones();
        tones.forEach((tone) => {
            const acc = new VF.Accidental(tone.toVex);
            vexNote.addModifier(acc, tone.pitchIndex);
        });
    }
    createDots(smoNote, vexNote) {
        for (var i = 0; i < smoNote.dots; ++i) {
            for (var j = 0; j < smoNote.pitches.length; ++j) {
                if (!this.isWholeRest()) {
                    vexNote.addModifier(new VF.Dot(), j);
                }
            }
        }
    }
    /**
     * Create accidentals based on the active key and previous accidentals in this voice
     * @param smoNote
     * @param vexNote
     * @param tickIndex
     * @param voiceIx
     * @returns
     */
    _createAccidentals(smoNote, vexNote, tickIndex, voiceIx) {
        let i = 0;
        if (smoNote.noteType === '/') {
            return;
        }
        if (smoNote.noteType !== 'n') {
            this.createDots(smoNote, vexNote);
            return;
        }
        smoNote.accidentalsRendered = [];
        for (i = 0; i < smoNote.pitches.length && this.tickmapObject !== null; ++i) {
            const pitch = smoNote.pitches[i];
            const zz = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.accidentalDisplay(pitch, this.smoMeasure.keySignature, this.tickmapObject.tickmaps[voiceIx].durationMap[tickIndex], this.tickmapObject.accidentalArray);
            if (zz) {
                const acc = new VF.Accidental(zz.symbol);
                if (zz.courtesy) {
                    acc.setAsCautionary();
                }
                smoNote.accidentalsRendered.push(pitch.accidental);
                vexNote.addModifier(acc, i);
            }
            else {
                smoNote.accidentalsRendered.push('');
            }
        }
        this.createDots(smoNote, vexNote);
        this._createMicrotones(smoNote, vexNote);
        if (smoNote.arpeggio) {
            vexNote.addModifier(new VF.Stroke(smoNote.arpeggio.typeCode));
        }
    }
    _createJazzOrnaments(smoNote, vexNote) {
        const o = smoNote.getJazzOrnaments();
        o.forEach((ll) => {
            const mod = new VF.Ornament(ll.toVex());
            vexNote.addModifier(mod, 0);
        });
    }
    _createOrnaments(smoNote, vexNote) {
        const o = smoNote.getOrnaments();
        o.forEach((ll) => {
            const ornamentCode = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.getOrnamentGlyph)(ll.ornament);
            const mod = new VF.Ornament(ornamentCode);
            if (ll.offset === _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoOrnament.offsets.after) {
                mod.setDelayed(true);
            }
            vexNote.addModifier(mod, 0);
        });
    }
    _addLyricAnnotationToNote(vexNote, lyric) {
        let classString = 'lyric lyric-' + lyric.verse;
        let text = lyric.getText();
        if (lyric.skipRender) {
            return;
        }
        if (!text.length && lyric.isHyphenated()) {
            text = '-';
        }
        // no text, no hyphen, don't add it.
        if (!text.length) {
            return;
        }
        const vexL = new VF.Annotation(text); // .setReportWidth(lyric.adjustNoteWidth);
        vexL.setAttribute('id', lyric.attrs.id); //
        // If we adjusted this note for the lyric, adjust the lyric as well.
        vexL.setFont(lyric.fontInfo.family, lyric.fontInfo.size, lyric.fontInfo.weight);
        vexL.setVerticalJustification(VF.Annotation.VerticalJustify.BOTTOM);
        vexNote.addModifier(vexL);
        if (lyric.isHyphenated()) {
            classString += ' lyric-hyphen';
        }
        vexL.addClass(classString);
    }
    _addChordChangeToNote(vexNote, lyric) {
        const cs = new VF.ChordSymbol();
        cs.setAttribute('id', lyric.attrs.id);
        const blocks = lyric.getVexChordBlocks();
        blocks.forEach((block) => {
            var _a;
            if (block.glyph) {
                // Vex 5 broke this, does not distinguish between glyph and text
                // the reverse is for vex4 which expects the non-mangled identifier here,
                // e.g. 'diminished' and not 'csymDiminished'
                (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.addChordGlyph)(cs, block.glyph);
            }
            else {
                cs.addGlyphOrText((_a = block.text) !== null && _a !== void 0 ? _a : '', block);
            }
        });
        cs.setFont(lyric.fontInfo.family, lyric.fontInfo.size).setReportWidth(lyric.adjustNoteWidth);
        vexNote.addModifier(cs, 0);
        const classString = 'chord chord-' + lyric.verse;
        cs.addClass(classString);
    }
    _createLyric(smoNote, vexNote) {
        const lyrics = smoNote.getTrueLyrics();
        if (smoNote.noteType !== '/') {
            lyrics.forEach((bll) => {
                const ll = bll;
                this._addLyricAnnotationToNote(vexNote, ll);
            });
        }
        const chords = smoNote.getChords();
        chords.forEach((chord) => {
            this._addChordChangeToNote(vexNote, chord);
        });
    }
    _createGraceNotes(smoNote, vexNote) {
        let i = 0;
        const gar = smoNote.getGraceNotes();
        var toBeam = true;
        if (gar && gar.length) {
            const group = [];
            gar.forEach((g) => {
                const gr = new VF.GraceNote(g.toVexGraceNote());
                gr.setAttribute('id', g.attrs.id);
                for (i = 0; i < g.pitches.length; ++i) {
                    const pitch = g.pitches[i];
                    if (!pitch.accidental) {
                        console.warn('no accidental in grace note');
                    }
                    if (pitch.accidental && pitch.accidental !== 'n' || pitch.cautionary) {
                        const accidental = new VF.Accidental(pitch.accidental);
                        if (pitch.cautionary) {
                            accidental.setAsCautionary();
                        }
                        gr.addModifier(accidental, i);
                    }
                }
                if (g.tickCount() >= 4096) {
                    toBeam = false;
                }
                gr.addClass('grace-note'); // note: this doesn't work :(
                g.renderId = gr.getAttribute('id');
                group.push(gr);
            });
            const grace = new VF.GraceNoteGroup(group);
            if (toBeam) {
                grace.beamNotes();
            }
            vexNote.addModifier(grace, 0);
        }
    }
    createCollisionTickmap() {
        let i = 0;
        let j = 0;
        if (!this.tickmapObject) {
            return;
        }
        for (i = 0; i < this.smoMeasure.voices.length; ++i) {
            const tm = this.tickmapObject.tickmaps[i];
            for (j = 0; j < tm.durationMap.length; ++j) {
                if (typeof (this.collisionMap[tm.durationMap[j]]) === 'undefined') {
                    this.collisionMap[tm.durationMap[j]] = [];
                }
                this.collisionMap[tm.durationMap[j]].push(this.smoMeasure.voices[i].notes[j]);
            }
        }
    }
    isCollision(voiceIx, tickIx) {
        let i = 0;
        let j = 0;
        let k = 0;
        let staffLines = [];
        if (!this.tickmapObject) {
            return false;
        }
        const tick = this.tickmapObject.tickmaps[voiceIx].durationMap[tickIx];
        // Just one note, no collision
        if (this.collisionMap[tick].length < 2) {
            return false;
        }
        for (i = 0; i < this.collisionMap[tick].length; ++i) {
            const note = this.collisionMap[tick][i];
            for (j = 0; j < note.pitches.length; ++j) {
                const clef = (0,_smo_data_common__WEBPACK_IMPORTED_MODULE_7__.IsClef)(note.clef) ? note.clef : 'treble';
                const pitch = note.pitches[j];
                const curLine = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(clef, pitch);
                for (k = 0; k < staffLines.length; ++k) {
                    if (Math.abs(curLine - staffLines[k]) < 1) {
                        return true;
                    }
                }
                staffLines.push(curLine);
            }
        }
        return false;
    }
    /**
     * convert a smoNote into a vxNote so it can be rasterized
     * @param smoNote
     * @param tickIndex - used to calculate accidental
     * @param voiceIx
     * @returns
     */
    _createVexNote(smoNote, tickIndex, voiceIx) {
        let vexNote = null;
        let timestamp = new Date().valueOf();
        const closestTicks = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.closestVexDuration(smoNote.tickCount);
        const exactTicks = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.ticksToDuration[smoNote.tickCount];
        const noteHead = smoNote.isRest() ? 'r' : smoNote.noteHead;
        const keys = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchesToVexKeys(smoNote.pitches, 0, noteHead);
        const smoNoteParams = {
            isTuplet: smoNote.isTuplet, measureIndex: this.smoMeasure.measureNumber.measureIndex,
            clef: smoNote.clef,
            closestTicks, exactTicks, keys,
            noteType: smoNote.noteType
        };
        const { noteParams, duration } = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.getVexNoteParameters)(smoNoteParams);
        if (smoNote.noteType === '/') {
            // vexNote = new VF.GlyphNote('\uE504', { duration });
            vexNote = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.getSlashGlyph)();
            smoNote.renderId = 'vf-' + vexNote.getAttribute('id'); // where does 'vf' come from?
        }
        else {
            const smoVexStemParams = {
                voiceCount: this.smoMeasure.voices.length,
                voiceIx,
                isAuto: smoNote.flagState === _smo_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.auto,
                isUp: smoNote.flagState === _smo_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.up
            };
            (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.applyStemDirection)(smoVexStemParams, noteParams);
            _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.PREFORMATA, new Date().valueOf() - timestamp);
            timestamp = new Date().valueOf();
            vexNote = new VF.StaveNote(noteParams);
            if (voiceIx > 0 && this.isCollision(voiceIx, tickIndex)) {
                vexNote.setXShift(-10);
            }
            if (this.isWholeRest()) {
                noteParams.duration = 'wr';
                vexNote = new VF.StaveNote(noteParams);
                vexNote.setCenterAlignment(true);
            }
            _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.PREFORMATB, new Date().valueOf() - timestamp);
            timestamp = new Date().valueOf();
            if (smoNote.fillStyle && !this.printing) {
                vexNote.setStyle({ fillStyle: smoNote.fillStyle });
            }
            else if (voiceIx > 0 && !this.printing) {
                vexNote.setStyle({ fillStyle: "#115511" });
            }
            else if (smoNote.isHidden() && this.printing) {
                vexNote.setStyle({ fillStyle: "#ffffff00" });
            }
            smoNote.renderId = 'vf-' + vexNote.getAttribute('id'); // where does 'vf' come from?
        }
        this._createAccidentals(smoNote, vexNote, tickIndex, voiceIx);
        this._createLyric(smoNote, vexNote);
        this._createOrnaments(smoNote, vexNote);
        this._createJazzOrnaments(smoNote, vexNote);
        this._createGraceNotes(smoNote, vexNote);
        _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.PREFORMATC, new Date().valueOf() - timestamp);
        return vexNote;
    }
    _renderArticulations(vix) {
        const i = 0;
        this.smoMeasure.voices[vix].notes.forEach((smoNote) => {
            smoNote.articulations.forEach((art) => {
                if (smoNote.noteType === 'n') {
                    const vx = this.noteToVexMap[smoNote.attrs.id];
                    const position = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoArticulation.positionToVex[art.position];
                    const vexArt = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoArticulation.articulationToVex[art.articulation];
                    const vxArt = new VF.Articulation(vexArt).setPosition(position);
                    vx.addModifier(vxArt, i);
                }
            });
        });
    }
    _renderNoteGlyph(smoNote, textObj) {
        var x = this.noteToVexMap[smoNote.attrs.id].getAbsoluteX() + textObj.xOffset;
        // the -3 is copied from vexflow textDynamics
        var y = this.stave.getYForLine(textObj.yOffsetLine - 3) + textObj.yOffsetPixels;
        let maxh = 0;
        const minx = x;
        var group = this.context.getContext().openGroup();
        group.classList.add(textObj.attrs.id + '-' + smoNote.attrs.id);
        group.classList.add(textObj.attrs.id);
        // const duration = SmoMusic.closestVexDuration(smoNote.tickCount);
        for (var i = 0; i < textObj.text.length; i += 1) {
            const { width, height } = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.renderDynamics)(this.context.getContext(), VF.TextDynamics.GLYPHS[textObj.text[i]].code, textObj.fontSize, x, y);
            /* const { width , height } = renderDynamics(this.context.getContext(), VF.TextDynamics.GLYPHS[textObj.text[i]],
              textObj.fontSize, x, y); */
            x += width;
            maxh = Math.max(height, maxh);
        }
        textObj.logicalBox = _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__.SvgHelpers.boxPoints(minx, y + this.context.box.y, x - minx, maxh);
        textObj.element = group;
        this.modifiersToBox.push(textObj);
        this.context.getContext().closeGroup();
    }
    renderDynamics() {
        this.smoMeasure.voices.forEach((voice) => {
            voice.notes.forEach((smoNote) => {
                const mods = smoNote.textModifiers.filter((mod) => mod.attrs.type === 'SmoDynamicText');
                mods.forEach((btm) => {
                    const tm = btm;
                    this._renderNoteGlyph(smoNote, tm);
                });
            });
        });
    }
    createRepeatSymbol() {
        this.voiceNotes = [];
        // const vexNote = new VF.GlyphNote('\uE500', { duration: 'w' }, { line: 2 });
        const vexNote = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.getRepeatBar)();
        vexNote.setCenterAlignment(true);
        this.vexNotes.push(vexNote);
        this.voiceNotes.push(vexNote);
    }
    /**
     * create an a array of VF.StaveNote objects to render the active voice.
     * @param voiceIx
     */
    createVexNotes(voiceIx) {
        let i = 0;
        this.voiceNotes = [];
        const voice = this.smoMeasure.voices[voiceIx];
        for (i = 0; i < voice.notes.length; ++i) {
            const smoNote = voice.notes[i];
            const vexNote = this._createVexNote(smoNote, i, voiceIx);
            this.noteToVexMap[smoNote.attrs.id] = vexNote;
            this.vexNotes.push(vexNote);
            this.voiceNotes.push(vexNote);
            if (isNaN(smoNote.ticks.numerator) || isNaN(smoNote.ticks.denominator)
                || isNaN(smoNote.ticks.remainder)) {
                throw ('vxMeasure: NaN in ticks');
            }
        }
        if (!this.smoMeasure.repeatSymbol) {
            this._renderArticulations(voiceIx);
        }
    }
    /**
     * Group the notes for beaming and create Vex beam objects
     * @param vix - voice index
     * @returns
     */
    createVexBeamGroups(vix) {
        let keyNoteIx = -1;
        let i = 0;
        let j = 0;
        let stemDirection = VF.Stem.DOWN;
        for (i = 0; i < this.smoMeasure.beamGroups.length; ++i) {
            const bg = this.smoMeasure.beamGroups[i];
            if (bg.voice !== vix) {
                continue;
            }
            const vexNotes = [];
            keyNoteIx = bg.notes.findIndex((nn) => nn.noteType === 'n');
            // Fix stem bug: key off first non-rest note.
            keyNoteIx = (keyNoteIx >= 0) ? keyNoteIx : 0;
            for (j = 0; j < bg.notes.length; ++j) {
                const note = bg.notes[j];
                if (note.noteType === '/') {
                    continue;
                }
                const vexNote = this.noteToVexMap[note.attrs.id];
                // some type of redraw condition?
                if (!(vexNote instanceof VF.StaveNote || vexNote instanceof VF.GraceNote)) {
                    return;
                }
                if (keyNoteIx === j) {
                    stemDirection = note.flagState === _smo_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.auto ?
                        vexNote.getStemDirection() : note.toVexStemDirection();
                }
                vexNote.setStemDirection(stemDirection);
                vexNotes.push(vexNote);
            }
            const vexBeam = new VF.Beam(vexNotes);
            this.beamToVexMap[bg.attrs.id] = vexBeam;
            this.vexBeamGroups.push(vexBeam);
        }
    }
    /**
     * Create the VF tuplet objects based on the smo tuplet objects
     * @param vix
     */
    // 
    createVexTuplets(vix) {
        var j = 0;
        var i = 0;
        this.vexTuplets = [];
        this.tupletToVexMap = {};
        for (i = 0; i < this.smoMeasure.tuplets.length; ++i) {
            const tp = this.smoMeasure.tuplets[i];
            if (tp.voice !== vix) {
                continue;
            }
            const vexNotes = [];
            for (j = 0; j < tp.notes.length; ++j) {
                const smoNote = tp.notes[j];
                vexNotes.push(this.noteToVexMap[smoNote.attrs.id]);
            }
            const location = tp.getStemDirection(this.smoMeasure.clef) === _smo_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.up ?
                VF.Tuplet.LOCATION_TOP : VF.Tuplet.LOCATION_BOTTOM;
            const smoTupletParams = {
                vexNotes,
                numNotes: tp.numNotes,
                notesOccupied: tp.note_ticks_occupied,
                location
            };
            const vexTuplet = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.getVexTuplets)(smoTupletParams);
            this.tupletToVexMap[tp.attrs.id] = vexTuplet;
            this.vexTuplets.push(vexTuplet);
        }
    }
    /**
     * create the modifiers for the stave itself, bar lines etc.
     */
    createMeasureModifiers() {
        const sb = this.smoMeasure.getStartBarline();
        const eb = this.smoMeasure.getEndBarline();
        const sym = this.smoMeasure.getRepeatSymbol();
        if (!this.stave) {
            return;
        }
        // don't create a begin bar for any but the 1st measure.
        if (this.smoMeasure.measureNumber.systemIndex !== 0 && sb.barline === _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar
            && this.smoMeasure.format.padLeft === 0) {
            this.stave.setBegBarType(VF.Barline.type.NONE);
        }
        else {
            this.stave.setBegBarType(sb.toVexBarline());
        }
        if (this.smoMeasure.svg.multimeasureLength > 0 && !this.smoMeasure.svg.hideMultimeasure) {
            this.stave.setEndBarType(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.toVexBarline[this.smoMeasure.svg.multimeasureEndBarline]);
        }
        else if (eb.barline !== _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar) {
            this.stave.setEndBarType(eb.toVexBarline());
        }
        if (sym && sym.symbol !== _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoRepeatSymbol.symbols.None) {
            const rep = new VF.Repetition(sym.toVexSymbol(), sym.xOffset + this.smoMeasure.staffX, sym.yOffset);
            this.stave.getModifiers().push(rep);
        }
        const tms = this.smoMeasure.getMeasureText();
        // TODO: set font
        tms.forEach((tmb) => {
            var _a;
            const tm = tmb;
            const offset = tm.position === _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoMeasureText.positions.left ? this.smoMeasure.format.padLeft : 0;
            const staveText = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createStaveText)(tm.text, tm.toVexPosition(), {
                shiftX: tm.adjustX + offset, shiftY: tm.adjustY, justification: tm.toVexJustification()
            });
            (_a = this.stave) === null || _a === void 0 ? void 0 : _a.addModifier(staveText);
            // hack - we can't create staveText directly so this is the only way I could set the font
            const ar = this.stave.getModifiers();
            const vm = ar[ar.length - 1];
            vm.setFont(tm.fontInfo);
        });
        if (this.smoMeasure.svg.rowInSystem === 0) {
            const rmb = this.smoMeasure.getRehearsalMark();
            const rm = rmb;
            if (rm) {
                this.stave.setSection(rm.symbol, 0);
            }
        }
        const tempo = this.smoMeasure.getTempo();
        if (tempo && this.smoMeasure.svg.forceTempo) {
            this.stave.setTempo(tempo.toVexTempo(), -1 * tempo.yOffset);
            const vexTempo = this.stave.getModifiers().find((mod) => mod.getAttribute('type') === 'StaveTempo');
            if (vexTempo) {
                vexTempo.setFont({ family: _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_4__.SourceSerifProFont.fontFamily, size: 13, weight: 'bold' });
            }
        }
    }
    /**
     * Create all Vex notes and modifiers.  We defer the format and rendering so
     * we can align across multiple staves
     */
    preFormat() {
        var j = 0;
        if (this.smoMeasure.svg.element !== null) {
            this.smoMeasure.svg.element.remove();
            this.smoMeasure.svg.element = null;
        }
        if (this.smoMeasure.svg.hideEmptyMeasure) {
            return;
        }
        // Note: need to do this to get it into VEX KS format
        const staffX = this.smoMeasure.staffX + this.smoMeasure.format.padLeft;
        const staffY = this.smoMeasure.staffY - this.context.box.y;
        const key = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySignatureTranspose(this.smoMeasure.keySignature, 0);
        const canceledKey = _smo_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySignatureTranspose(this.smoMeasure.canceledKeySignature, 0);
        const smoVexStaveParams = {
            x: staffX,
            y: staffY,
            padLeft: this.smoMeasure.format.padLeft,
            id: this.smoMeasure.attrs.id,
            staffX: this.smoMeasure.staffX,
            staffY: this.smoMeasure.staffY,
            staffWidth: this.smoMeasure.staffWidth,
            forceClef: this.smoMeasure.svg.forceClef,
            clef: this.smoMeasure.clef,
            forceKey: this.smoMeasure.svg.forceKeySignature,
            key,
            canceledKey,
            startX: this.smoMeasure.svg.maxColumnStartX,
            adjX: this.smoMeasure.svg.adjX,
            context: this.context.getContext()
        };
        this.stave = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createStave)(smoVexStaveParams);
        if (this.smoMeasure.svg.forceTimeSignature) {
            const ts = this.smoMeasure.timeSignature;
            let tsString = ts.timeSignature;
            if (this.smoMeasure.timeSignature.useSymbol && ts.actualBeats === 4 && ts.beatDuration === 4) {
                tsString = 'C';
            }
            else if (this.smoMeasure.timeSignature.useSymbol && ts.actualBeats === 2 && ts.beatDuration === 4) {
                tsString = 'C|';
            }
            else if (this.smoMeasure.timeSignature.displayString.length) {
                tsString = this.smoMeasure.timeSignature.displayString;
            }
            this.stave.addTimeSignature(tsString);
        }
        // Connect it to the rendering context and draw!
        this.stave.setContext(this.context.getContext());
        this.createMeasureModifiers();
        this.tickmapObject = this.smoMeasure.createMeasureTickmaps();
        this.createCollisionTickmap();
        this.voiceAr = [];
        this.vexNotes = [];
        this.noteToVexMap = {};
        // If there are multiple voices, add them all to the formatter at the same time so they don't collide
        for (j = 0; j < this.smoMeasure.voices.length; ++j) {
            const smoVexVoiceParams = {
                actualBeats: this.smoMeasure.timeSignature.actualBeats,
                beatDuration: this.smoMeasure.timeSignature.beatDuration,
                notes: this.vexNotes
            };
            if (!this.smoMeasure.svg.multimeasureLength && !this.smoMeasure.repeatSymbol) {
                this.createVexNotes(j);
                smoVexVoiceParams.notes = this.voiceNotes;
                this.createVexTuplets(j);
                this.createVexBeamGroups(j);
                // Create a voice in 4/4 and add above notes
                const voice = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createVoice)(smoVexVoiceParams);
                this.voiceAr.push(voice);
            }
            if (this.smoMeasure.repeatSymbol) {
                this.createRepeatSymbol();
                // Create a voice in 4/4 and add above notes
                const voice = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createVoice)(smoVexVoiceParams);
                this.voiceAr.push(voice);
            }
        }
        // Need to format for x position, then set y position before drawing dynamics.
        this.formatter = new VF.Formatter({ softmaxFactor: this.softmax, globalSoftmax: false });
        this.formatter.joinVoices(this.voiceAr);
        /* this.voiceAr.forEach((voice) => {
          if (this.formatter) {
            this.formatter.joinVoices([voice]);
          }
        });*/
    }
    /**
     * Create the Vex formatter that calculates the X and Y positions of the notes.  A formatter
     * may actually span multiple staves for justified staves.  The notes are drawn in their
     * individual vxMeasure objects but formatting is done once for all justified staves
     * @param voices Voice objects from VexFlow
     * @returns
     */
    format(voices) {
        if (this.smoMeasure.svg.hideEmptyMeasure) {
            return;
        }
        if (this.smoMeasure.svg.multimeasureLength > 0) {
            this.multimeasureRest = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.getMultimeasureRest)(this.smoMeasure.svg.multimeasureLength);
            this.multimeasureRest.setContext(this.context.getContext());
            this.multimeasureRest.setStave(this.stave);
            return;
        }
        if (!this.formatter) {
            return;
        }
        const timestamp = new Date().valueOf();
        const staffWidth = this.smoMeasure.staffWidth -
            (this.smoMeasure.svg.maxColumnStartX + this.smoMeasure.svg.adjRight + this.smoMeasure.format.padLeft) - 10;
        this.dbgLeftX = this.smoMeasure.staffX + this.smoMeasure.format.padLeft + this.smoMeasure.svg.adjX;
        this.dbgWidth = staffWidth;
        this.formatter.format(voices, staffWidth);
        _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.setTimestamp(_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.codeRegions.FORMAT, new Date().valueOf() - timestamp);
    }
    /**
     * render is called after format.  Actually draw the things.
     */
    render() {
        if (this.smoMeasure.svg.hideEmptyMeasure) {
            return;
        }
        var group = this.context.getContext().openGroup();
        this.smoMeasure.svg.element = group;
        var mmClass = this.smoMeasure.getClassId();
        var j = 0;
        try {
            // bound each measure in its own SVG group for easy deletion and mapping to screen coordinate
            group.classList.add(this.smoMeasure.attrs.id);
            group.classList.add(mmClass);
            group.id = this.smoMeasure.attrs.id;
            this.stave.draw();
            this.smoMeasure.svg.element = group;
            for (j = 0; j < this.voiceAr.length; ++j) {
                this.voiceAr[j].draw(this.context.getContext(), this.stave);
            }
            this.vexBeamGroups.forEach((b) => {
                b.setContext(this.context.getContext()).draw();
            });
            this.vexTuplets.forEach((tuplet) => {
                tuplet.setContext(this.context.getContext()).draw();
            });
            if (this.multimeasureRest) {
                this.multimeasureRest.draw();
            }
            // this._updateLyricDomSelectors();
            this.renderDynamics();
            // this.smoMeasure.adjX = this.stave.start_x - (this.smoMeasure.staffX);
            this.context.getContext().closeGroup();
            // layoutDebug.setTimestamp(layoutDebug.codeRegions.RENDER, new Date().valueOf() - timestamp);
            this.rendered = true;
            if (_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.mask & _sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.values['adjust']) {
                _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__.SvgHelpers.debugBoxNoText(this.context.getContext().svg, _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__.SvgHelpers.boxPoints(this.dbgLeftX, this.smoMeasure.svg.staffY, this.dbgWidth, 40), 'render-x-dbg', 0);
            }
        }
        catch (exc) {
            console.warn('unable to render measure ' + this.smoMeasure.measureNumber.measureIndex);
            this.context.getContext().closeGroup();
        }
    }
}


/***/ }),

/***/ "./src/render/vex/vxSystem.ts":
/*!************************************!*\
  !*** ./src/render/vex/vxSystem.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VxSystem: () => (/* binding */ VxSystem)
/* harmony export */ });
/* harmony import */ var _vxMeasure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vxMeasure */ "./src/render/vex/vxMeasure.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.









const VF = _common_vex__WEBPACK_IMPORTED_MODULE_8__.VexFlow;
/**
 * Create a system of staves and draw music on it.  This calls the Vex measure
 * rendering methods, and also draws all the score and system level stuff like slurs,
 * text, aligns the lyrics.
 * */
class VxSystem {
    constructor(context, topY, lineIndex, score) {
        this.leftConnector = [null, null];
        this.vxMeasures = [];
        this.smoMeasures = [];
        this.minMeasureIndex = -1;
        this.maxMeasureIndex = 0;
        this.staves = [];
        this.box = _smo_data_common__WEBPACK_IMPORTED_MODULE_5__.SvgBox.default;
        this.ys = [];
        this.measures = [];
        this.modifiers = [];
        this.context = context;
        this.lineIndex = lineIndex;
        this.score = score;
        this.maxStaffIndex = -1;
        this.maxSystemIndex = -1;
        this.width = -1;
        this.staves = [];
        this.currentY = 0;
        this.topY = topY;
        this.clefWidth = 70;
        this.ys = [];
    }
    getVxMeasure(smoMeasure) {
        let i = 0;
        for (i = 0; i < this.vxMeasures.length; ++i) {
            const vm = this.vxMeasures[i];
            if (vm.smoMeasure.attrs.id === smoMeasure.attrs.id) {
                return vm;
            }
        }
        return null;
    }
    getVxNote(smoNote) {
        let i = 0;
        if (!smoNote) {
            return null;
        }
        for (i = 0; i < this.measures.length; ++i) {
            const mm = this.measures[i];
            if (mm.noteToVexMap[smoNote.attrs.id]) {
                return mm.noteToVexMap[smoNote.attrs.id];
            }
        }
        return null;
    }
    _updateChordOffsets(note) {
        var i = 0;
        for (i = 0; i < 3; ++i) {
            const chords = note.getLyricForVerse(i, _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLyric.parsers.chord);
            chords.forEach((bchord) => {
                const chord = bchord;
                const dom = this.context.svg.getElementById('vf-' + chord.attrs.id);
                if (dom) {
                    dom.setAttributeNS('', 'transform', 'translate(' + chord.translateX + ' ' + (-1 * chord.translateY) + ')');
                }
            });
        }
    }
    _lowestYLowestVerse(lyrics, vxMeasures) {
        // Move each verse down, according to the lowest lyric on that line/verse,
        // and the accumulation of the verses above it
        let lowestY = 0;
        for (var lowVerse = 0; lowVerse < 4; ++lowVerse) {
            let maxVerseHeight = 0;
            const verseLyrics = lyrics.filter((ll) => ll.verse === lowVerse);
            if (lowVerse === 0) {
                // first verse, go through list twice.  first find lowest points
                verseLyrics.forEach((lyric) => {
                    if (lyric.logicalBox) {
                        // 'lowest' Y on screen is Y with largest value...
                        lowestY = Math.max(lyric.logicalBox.y, lowestY);
                    }
                });
                // second offset all to that point
                verseLyrics.forEach((lyric) => {
                    if (lyric.logicalBox) {
                        const offset = Math.max(0, lowestY - lyric.logicalBox.y);
                        lyric.adjY = offset + lyric.translateY;
                    }
                });
            }
            else {
                // subsequent verses, first find the tallest lyric
                verseLyrics.forEach((lyric) => {
                    if (lyric.logicalBox) {
                        maxVerseHeight = Math.max(lyric.logicalBox.height, maxVerseHeight);
                    }
                });
                // adjust lowestY to be the verse height below the previous verse
                lowestY = lowestY + maxVerseHeight * 1.1; // 1.1 magic number?
                // and offset these lyrics
                verseLyrics.forEach((lyric) => {
                    if (lyric.logicalBox) {
                        const offset = Math.max(0, lowestY - lyric.logicalBox.y);
                        lyric.adjY = offset + lyric.translateY;
                    }
                });
            }
        }
    }
    // ### updateLyricOffsets
    // Adjust the y position for all lyrics in the line so they are even.
    // Also replace '-' with a longer dash do indicate 'until the next measure'
    updateLyricOffsets() {
        let i = 0;
        for (i = 0; i < this.score.staves.length; ++i) {
            const tmpI = i;
            const lyricsDash = [];
            const lyricHyphens = [];
            const lyricVerseMap = {};
            const lyrics = [];
            // is this necessary? They should all be from the current line
            const vxMeasures = this.vxMeasures.filter((vx) => vx.smoMeasure.measureNumber.staffId === tmpI);
            // All the lyrics on this line
            // The vertical bounds on each line
            vxMeasures.forEach((mm) => {
                var smoMeasure = mm.smoMeasure;
                // Get lyrics from any voice.
                smoMeasure.voices.forEach((voice) => {
                    voice.notes.forEach((note) => {
                        this._updateChordOffsets(note);
                        note.getTrueLyrics().forEach((ll) => {
                            const hasLyric = ll.getText().length > 0 || ll.isHyphenated();
                            if (hasLyric && ll.logicalBox && !lyricVerseMap[ll.verse]) {
                                lyricVerseMap[ll.verse] = [];
                            }
                            else if (hasLyric && !ll.logicalBox) {
                                console.warn(`unrendered lyric for note ${note.attrs.id} measure ${smoMeasure.measureNumber.staffId}-${smoMeasure.measureNumber.measureIndex}`);
                            }
                            if (hasLyric && ll.logicalBox) {
                                lyricVerseMap[ll.verse].push(ll);
                                lyrics.push(ll);
                            }
                        });
                    });
                });
            });
            // calculate y offset so the lyrics all line up
            this._lowestYLowestVerse(lyrics, vxMeasures);
            const vkey = Object.keys(lyricVerseMap).sort((a, b) => parseInt(a, 10) - parseInt(b, 10));
            vkey.forEach((sverse) => {
                const verse = parseInt(sverse, 10);
                let hyphenLyric = null;
                const lastVerse = lyricVerseMap[verse][lyricVerseMap[verse].length - 1].attrs.id;
                lyricVerseMap[verse].forEach((ll) => {
                    if (hyphenLyric !== null && hyphenLyric.logicalBox !== null && ll.logicalBox !== null) {
                        const x = ll.logicalBox.x - (ll.logicalBox.x -
                            (hyphenLyric.logicalBox.x + hyphenLyric.logicalBox.width)) / 2;
                        ll.hyphenX = x;
                        lyricHyphens.push(ll);
                    }
                    if (ll.isHyphenated() && ll.logicalBox !== null) {
                        if (ll.attrs.id === lastVerse) {
                            // Last word on the system, place the hyphen after the word
                            const fontSize = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__.SmoScoreText.fontPointSize(ll.fontInfo.size);
                            ll.hyphenX = ll.logicalBox.x + ll.logicalBox.width + fontSize / 2;
                            lyricHyphens.push(ll);
                        }
                        else if (ll.getText().length) {
                            // place the hyphen 1/2 between next word and this one.
                            hyphenLyric = ll;
                        }
                    }
                    else {
                        hyphenLyric = null;
                    }
                });
            });
            lyrics.forEach((lyric) => {
                const dom = this.context.svg.getElementById('vf-' + lyric.attrs.id);
                if (dom) {
                    dom.setAttributeNS('', 'transform', 'translate(' + lyric.adjX + ' ' + lyric.adjY + ')');
                    // Keep track of lyrics that are 'dash'
                    if (lyric.isDash()) {
                        lyricsDash.push(lyric);
                    }
                }
            });
            lyricHyphens.forEach((lyric) => {
                const parent = this.context.svg.getElementById('vf-' + lyric.attrs.id);
                if (parent && lyric.logicalBox !== null) {
                    const text = document.createElementNS(_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_2__.SvgHelpers.namespace, 'text');
                    text.textContent = '-';
                    const fontSize = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_7__.SmoScoreText.fontPointSize(lyric.fontInfo.size);
                    text.setAttributeNS('', 'x', (lyric.hyphenX - fontSize / 3).toString());
                    text.setAttributeNS('', 'y', (lyric.logicalBox.y + (lyric.logicalBox.height * 2) / 3).toString());
                    text.setAttributeNS('', 'fontSize', '' + fontSize + 'pt');
                    parent.appendChild(text);
                }
            });
            lyricsDash.forEach((lyric) => {
                const parent = this.context.svg.getElementById('vf-' + lyric.attrs.id);
                if (parent && lyric.logicalBox !== null) {
                    const line = document.createElementNS(_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_2__.SvgHelpers.namespace, 'line');
                    const ymax = Math.round(lyric.logicalBox.y + lyric.logicalBox.height / 2);
                    const offset = Math.round(lyric.logicalBox.width / 2);
                    line.setAttributeNS('', 'x1', (lyric.logicalBox.x - offset).toString());
                    line.setAttributeNS('', 'y1', ymax.toString());
                    line.setAttributeNS('', 'x2', (lyric.logicalBox.x + lyric.logicalBox.width + offset).toString());
                    line.setAttributeNS('', 'y2', ymax.toString());
                    line.setAttributeNS('', 'stroke-width', '1');
                    line.setAttributeNS('', 'fill', 'none');
                    line.setAttributeNS('', 'stroke', '#999999');
                    parent.appendChild(line);
                    const texts = parent.getElementsByTagName('text');
                    // hide hyphen and replace with dash
                    if (texts && texts.length) {
                        const text = texts[0];
                        text.setAttributeNS('', 'fill', '#fff');
                    }
                }
            });
        }
    }
    // ### renderModifier
    // render a line-type modifier that is associated with a staff (e.g. slur)
    renderModifier(scroller, modifier, vxStart, vxEnd, smoStart, smoEnd) {
        let xoffset = 0;
        const setSameIfNull = (a, b) => {
            if (typeof (a) === 'undefined' || a === null) {
                return b;
            }
            return a;
        };
        if (smoStart && smoStart.note && smoStart.note.noteType === '/') {
            return;
        }
        if (smoEnd && smoEnd.note && smoEnd.note.noteType === '/') {
            return;
        }
        // if it is split between lines, render one artifact for each line, with a common class for
        // both if it is removed.
        if (vxStart) {
            const toRemove = this.context.svg.getElementById('vf-' + modifier.attrs.id);
            if (toRemove) {
                toRemove.remove();
            }
        }
        const artifactId = modifier.attrs.id + '-' + this.lineIndex;
        const group = this.context.getContext().openGroup('slur', artifactId);
        group.classList.add(modifier.attrs.id);
        const measureMod = 'mod-' + smoStart.selector.staff + '-' + smoStart.selector.measure;
        const staffMod = 'mod-' + smoStart.selector.staff;
        group.classList.add(measureMod);
        group.classList.add(staffMod);
        if (modifier.ctor === 'SmoStaffHairpin') {
            const hp = modifier;
            if (!vxStart && !vxEnd) {
                this.context.getContext().closeGroup();
            }
            vxStart = setSameIfNull(vxStart, vxEnd);
            vxEnd = setSameIfNull(vxEnd, vxStart);
            const smoVexHairpinParams = {
                vxStart,
                vxEnd,
                hairpinType: hp.hairpinType,
                height: hp.height,
                yOffset: hp.yOffset,
                leftShiftPx: hp.xOffsetLeft,
                rightShiftPx: hp.xOffsetRight
            };
            const hairpin = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createHairpin)(smoVexHairpinParams);
            hairpin.setContext(this.context.getContext()).setPosition(hp.position).draw();
        }
        else if (modifier.ctor === 'SmoSlur') {
            const startNote = smoStart.note;
            const slur = modifier;
            let slurX = slur.xOffset;
            const svgPoint = JSON.parse(JSON.stringify(slur.controlPoints));
            const lyric = startNote.longestLyric();
            if (lyric && lyric.getText()) {
                // If there is a lyric, the bounding box of the start note is stretched to the right.
                // slide the slur left, and also make it a bit wider.
                const xtranslate = (-1 * lyric.getText().length * 6);
                xoffset += (xtranslate / 2) - _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoSlur.defaults.xOffset;
            }
            if (vxStart === null || vxEnd === null) {
                slurX = -5;
                svgPoint[0].y = 10;
                svgPoint[1].y = 10;
            }
            const smoVexSlurParams = {
                vxStart, vxEnd,
                thickness: slur.thickness,
                xShift: slur.xOffset,
                yShift: slur.yOffset,
                cps: svgPoint,
                invert: slur.invert,
                position: slur.position,
                positionEnd: slur.position_end
            };
            const curve = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createSlur)(smoVexSlurParams);
            curve.setContext(this.context.getContext()).draw();
        }
        else if (modifier.ctor === 'SmoTie') {
            const ctie = modifier;
            const startNote = smoStart.note;
            const endNote = smoEnd.note;
            ctie.checkLines(startNote, endNote);
            if (ctie.lines.length > 0) {
                const fromLines = ctie.lines.map((ll) => ll.from);
                const toLines = ctie.lines.map((ll) => ll.to);
                const smoVexTieParams = {
                    fromLines,
                    toLines,
                    firstNote: vxStart,
                    lastNote: vxEnd,
                    vexOptions: ctie.vexOptions
                };
                const tie = (0,_common_vex__WEBPACK_IMPORTED_MODULE_8__.createTie)(smoVexTieParams);
                tie.setContext(this.context.getContext()).draw();
            }
        }
        else if (modifier.ctor === 'SmoStaffTextBracket') {
            if (vxStart && !vxEnd) {
                vxEnd = vxStart;
            }
            else if (vxEnd && !vxStart) {
                vxStart = vxEnd;
            }
            if (vxStart && vxEnd) {
                const smoBracket = modifier;
                const bracket = new VF.TextBracket({
                    start: vxStart, stop: vxEnd, text: smoBracket.text, superscript: smoBracket.superscript, position: smoBracket.position
                });
                bracket.setLine(smoBracket.line).setContext(this.context.getContext()).draw();
            }
        }
        this.context.getContext().closeGroup();
        if (xoffset) {
            const slurBox = this.context.svg.getElementById('vf-' + artifactId);
            if (slurBox) {
                _sui_svgHelpers__WEBPACK_IMPORTED_MODULE_2__.SvgHelpers.translateElement(slurBox, xoffset, 0);
            }
        }
        modifier.element = group;
    }
    renderEndings(scroller) {
        let j = 0;
        let i = 0;
        if (this.staves.length < 1) {
            return;
        }
        const voltas = this.staves[0].getVoltaMap(this.minMeasureIndex, this.maxMeasureIndex);
        voltas.forEach((ending) => {
            ending.elements.forEach((element) => {
                element.remove();
            });
            ending.elements = [];
        });
        for (j = 0; j < this.smoMeasures.length; ++j) {
            let pushed = false;
            const smoMeasure = this.smoMeasures[j];
            // Only draw volta on top staff of system
            if (smoMeasure.svg.rowInSystem > 0) {
                continue;
            }
            const vxMeasure = this.getVxMeasure(smoMeasure);
            const voAr = [];
            for (i = 0; i < voltas.length && vxMeasure !== null; ++i) {
                const ending = voltas[i];
                const mix = smoMeasure.measureNumber.measureIndex;
                if ((ending.startBar <= mix) && (ending.endBar >= mix) && vxMeasure.stave !== null) {
                    const group = this.context.getContext().openGroup(null, ending.attrs.id);
                    group.classList.add(ending.attrs.id);
                    group.classList.add(ending.endingId);
                    ending.elements.push(group);
                    const vtype = ending.toVexVolta(smoMeasure.measureNumber.measureIndex);
                    const vxVolta = new VF.Volta(vtype, ending.number.toString(), smoMeasure.staffX + ending.xOffsetStart, ending.yOffset);
                    vxVolta.setContext(this.context.getContext()).draw(vxMeasure.stave, -1 * ending.xOffsetEnd);
                    this.context.getContext().closeGroup();
                    // ending.logicalBox = this.context.offsetBbox(group);
                    if (!pushed) {
                        voAr.push({ smoMeasure, ending });
                        pushed = true;
                    }
                    vxMeasure.stave.getModifiers().push(vxVolta);
                }
            }
            // Adjust real height of measure to match volta height
            for (i = 0; i < voAr.length; ++i) {
                const mm = voAr[i].smoMeasure;
                const ending = voAr[i].ending;
                if (ending.logicalBox !== null) {
                    const delta = mm.svg.logicalBox.y - ending.logicalBox.y;
                    if (delta > 0) {
                        mm.setBox(_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_2__.SvgHelpers.boxPoints(mm.svg.logicalBox.x, mm.svg.logicalBox.y - delta, mm.svg.logicalBox.width, mm.svg.logicalBox.height + delta), 'vxSystem adjust for volta');
                    }
                }
            }
        }
    }
    getMeasureByIndex(measureIndex, staffId) {
        let i = 0;
        for (i = 0; i < this.smoMeasures.length; ++i) {
            const mm = this.smoMeasures[i];
            if (measureIndex === mm.measureNumber.measureIndex && staffId === mm.measureNumber.staffId) {
                return mm;
            }
        }
        return null;
    }
    // ## renderMeasure
    // ## Description:
    // Create the graphical (VX) notes and render them on svg.  Also render the tuplets and beam
    // groups
    renderMeasure(smoMeasure, printing) {
        var _a, _b;
        if (smoMeasure.svg.hideMultimeasure) {
            return;
        }
        const measureIndex = smoMeasure.measureNumber.measureIndex;
        if (this.minMeasureIndex < 0 || this.minMeasureIndex > measureIndex) {
            this.minMeasureIndex = measureIndex;
        }
        if (this.maxMeasureIndex < measureIndex) {
            this.maxMeasureIndex = measureIndex;
        }
        let brackets = false;
        const staff = this.score.staves[smoMeasure.measureNumber.staffId];
        const staffId = staff.staffId;
        const systemIndex = smoMeasure.measureNumber.systemIndex;
        const selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.measureSelection(this.score, staff.staffId, smoMeasure.measureNumber.measureIndex);
        this.smoMeasures.push(smoMeasure);
        if (this.staves.length <= staffId) {
            this.staves.push(staff);
        }
        if (selection === null) {
            return;
        }
        let softmax = selection.measure.format.proportionality;
        if (softmax === _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoMeasureFormat.defaultProportionality) {
            softmax = (_b = (_a = this.score.layoutManager) === null || _a === void 0 ? void 0 : _a.getGlobalLayout().proportionality) !== null && _b !== void 0 ? _b : 0;
        }
        const vxMeasure = new _vxMeasure__WEBPACK_IMPORTED_MODULE_0__.VxMeasure(this.context, selection, printing, softmax);
        // create the vex notes, beam groups etc. for the measure
        vxMeasure.preFormat();
        this.vxMeasures.push(vxMeasure);
        const lastStaff = (staffId === this.score.staves.length - 1);
        const smoGroupMap = {};
        const adjXMap = {};
        const vxMeasures = this.vxMeasures.filter((mm) => !mm.smoMeasure.svg.hideEmptyMeasure);
        // If this is the last staff in the column, render the column with justification
        if (lastStaff) {
            vxMeasures.forEach((mm) => {
                if (typeof (adjXMap[mm.smoMeasure.measureNumber.systemIndex]) === 'undefined') {
                    adjXMap[mm.smoMeasure.measureNumber.systemIndex] = mm.smoMeasure.svg.adjX;
                }
                adjXMap[mm.smoMeasure.measureNumber.systemIndex] = Math.max(adjXMap[mm.smoMeasure.measureNumber.systemIndex], mm.smoMeasure.svg.adjX);
            });
            vxMeasures.forEach((vv) => {
                if (!vv.rendered && !vv.smoMeasure.svg.hideEmptyMeasure) {
                    vv.vexNotes.forEach((vnote) => {
                        vnote.setXShift(vnote.getXShift() + adjXMap[vv.smoMeasure.measureNumber.systemIndex] - vv.smoMeasure.svg.adjX);
                    });
                    const systemGroup = this.score.getSystemGroupForStaff(vv.selection);
                    const justifyGroup = (systemGroup && vv.smoMeasure.format.autoJustify) ? systemGroup.attrs.id : vv.selection.staff.attrs.id;
                    if (!smoGroupMap[justifyGroup]) {
                        smoGroupMap[justifyGroup] = { firstMeasure: vv, voices: [] };
                    }
                    smoGroupMap[justifyGroup].voices =
                        smoGroupMap[justifyGroup].voices.concat(vv.voiceAr);
                }
            });
        }
        const keys = Object.keys(smoGroupMap);
        keys.forEach((key) => {
            smoGroupMap[key].firstMeasure.format(smoGroupMap[key].voices);
        });
        if (lastStaff) {
            vxMeasures.forEach((vv) => {
                if (!vv.rendered) {
                    vv.render();
                }
            });
        }
        // Keep track of the y coordinate for the nth staff
        const renderedConnection = {};
        if (systemIndex === 0 && lastStaff) {
            if (staff.bracketMap[this.lineIndex]) {
                staff.bracketMap[this.lineIndex].forEach((element) => {
                    element.remove();
                });
            }
            staff.bracketMap[this.lineIndex] = [];
            const group = this.context.getContext().openGroup();
            group.classList.add('lineBracket-' + this.lineIndex);
            group.classList.add('lineBracket');
            staff.bracketMap[this.lineIndex].push(group);
            vxMeasures.forEach((vv) => {
                const systemGroup = this.score.getSystemGroupForStaff(vv.selection);
                if (systemGroup && !renderedConnection[systemGroup.attrs.id] &&
                    !vv.smoMeasure.svg.hideEmptyMeasure) {
                    renderedConnection[systemGroup.attrs.id] = 1;
                    const startSel = this.vxMeasures[systemGroup.startSelector.staff];
                    const endSel = this.vxMeasures[systemGroup.endSelector.staff];
                    if (startSel && startSel.rendered &&
                        endSel && endSel.rendered) {
                        const c1 = new VF.StaveConnector(startSel.stave, endSel.stave)
                            .setType(systemGroup.leftConnectorVx());
                        c1.setContext(this.context.getContext()).draw();
                        brackets = true;
                    }
                }
            });
            if (!brackets && vxMeasures.length > 1) {
                const c2 = new VF.StaveConnector(vxMeasures[0].stave, vxMeasures[vxMeasures.length - 1].stave);
                c2.setType(VF.StaveConnector.type.SINGLE_RIGHT);
                c2.setContext(this.context.getContext()).draw();
            }
            // draw outer brace on parts with multiple staves (e.g. keyboards)
            vxMeasures.forEach((vv) => {
                if (vv.selection.staff.partInfo.stavesAfter > 0) {
                    if (this.vxMeasures.length > vv.selection.selector.staff + 1) {
                        const endSel = this.vxMeasures[vv.selection.selector.staff + 1];
                        const startSel = vv;
                        if (startSel && startSel.rendered &&
                            endSel && endSel.rendered) {
                            const c1 = new VF.StaveConnector(startSel.stave, endSel.stave)
                                .setType(VF.StaveConnector.type.BRACE);
                            c1.setContext(this.context.getContext()).draw();
                        }
                    }
                }
                ;
            });
            this.context.getContext().closeGroup();
        }
        else if (lastStaff && smoMeasure.measureNumber.measureIndex + 1 < staff.measures.length) {
            if (staff.measures[smoMeasure.measureNumber.measureIndex + 1].measureNumber.systemIndex === 0) {
                const endMeasure = vxMeasure;
                const startMeasure = vxMeasures.find((vv) => vv.selection.selector.staff === 0 &&
                    vv.selection.selector.measure === vxMeasure.selection.selector.measure &&
                    vv.smoMeasure.svg.hideEmptyMeasure === false);
                if (endMeasure && endMeasure.stave && startMeasure && startMeasure.stave) {
                    const group = this.context.getContext().openGroup();
                    group.classList.add('endBracket-' + this.lineIndex);
                    group.classList.add('endBracket');
                    staff.bracketMap[this.lineIndex].push(group);
                    const c2 = new VF.StaveConnector(startMeasure.stave, endMeasure.stave)
                        .setType(VF.StaveConnector.type.SINGLE_RIGHT);
                    c2.setContext(this.context.getContext()).draw();
                    this.context.getContext().closeGroup();
                }
            }
        }
        // keep track of left-hand side for system connectors
        if (systemIndex === 0) {
            if (staffId === 0) {
                this.leftConnector[0] = vxMeasure.stave;
            }
            else if (staffId > this.maxStaffIndex) {
                this.maxStaffIndex = staffId;
                this.leftConnector[1] = vxMeasure.stave;
            }
        }
        else if (smoMeasure.measureNumber.systemIndex > this.maxSystemIndex) {
            this.maxSystemIndex = smoMeasure.measureNumber.systemIndex;
        }
        this.measures.push(vxMeasure);
    }
}


/***/ }),

/***/ "./src/smo/data/common.ts":
/*!********************************!*\
  !*** ./src/smo/data/common.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Clefs: () => (/* binding */ Clefs),
/* harmony export */   IsClef: () => (/* binding */ IsClef),
/* harmony export */   IsPitchLetter: () => (/* binding */ IsPitchLetter),
/* harmony export */   SvgBox: () => (/* binding */ SvgBox),
/* harmony export */   SvgPoint: () => (/* binding */ SvgPoint),
/* harmony export */   getId: () => (/* binding */ getId)
/* harmony export */ });
var nextId = 32768;
const getId = () => `smo` + (nextId++).toString();
function IsPitchLetter(letter) {
    return letter.length === 1 && letter[0] >= 'a' && letter[0] <= 'g';
}
/**
 * musical artifacts can contain temporary svg information for
 * mapping the UI.
 */
class SvgPoint {
    static get default() {
        return { x: 0, y: 0 };
    }
    constructor() {
        this.x = 0;
        this.y = 0;
    }
}
/**
 * musical artifacts can contain temporary svg information for
 * mapping the UI.
 */
class SvgBox {
    static get default() {
        return { x: 0, y: 0, width: -1, height: -1 };
    }
    constructor() {
        this.x = 0;
        this.y = 0;
        this.width = -1;
        this.height = -1;
    }
}
var Clefs = ['treble', 'bass', 'tenor', 'alto', 'soprano', 'percussion',
    'mezzo-soprano', 'baritone-c', 'baritone-f', 'subbass', 'french'];
function IsClef(clef) {
    return Clefs.findIndex((x) => clef === x) >= 0;
}


/***/ }),

/***/ "./src/smo/data/measure.ts":
/*!*********************************!*\
  !*** ./src/smo/data/measure.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoMeasure: () => (/* binding */ SmoMeasure),
/* harmony export */   SmoMeasureNumberParams: () => (/* binding */ SmoMeasureNumberParams),
/* harmony export */   SmoMeasureStringParams: () => (/* binding */ SmoMeasureStringParams)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _measureModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./note */ "./src/smo/data/note.ts");
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tuplet */ "./src/smo/data/tuplet.ts");
/* harmony import */ var _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../render/sui/layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _xform_tickMap__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../xform/tickMap */ "./src/smo/xform/tickMap.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Contains definition and supporting classes for {@link SmoMeasure}.
 * Most of the engraving is done at the measure level.  Measure contains multiple (at least 1)
 * voices, which in turn contain notes.  Each measure also contains formatting information.  This
 * is mostly serialized outside of measure (in score), since columns and often an entire region
 * share measure formatting.  Measures also contain modifiers like barlines.  Tuplets and beam groups
 * are contained at the measure level.
 * @module /smo/data/measure
 */











// @internal
const VF = _common_vex__WEBPACK_IMPORTED_MODULE_10__.VexFlow;
// @internal
const SmoMeasureNumberParams = ['transposeIndex', 'activeVoice', 'lines', 'repeatCount'];
// @internal
const SmoMeasureStringParams = ['keySignature'];
/**
 * Only arrays and measure numbers are serilialized with default values.
 * @param params - result of serialization
 * @returns
 */
function isSmoMeasureParamsSer(params) {
    var _a;
    if (!Array.isArray(params.voices) ||
        !Array.isArray(params.tuplets) || !Array.isArray(params.modifiers) ||
        typeof ((_a = params === null || params === void 0 ? void 0 : params.measureNumber) === null || _a === void 0 ? void 0 : _a.measureIndex) !== 'number') {
        return false;
    }
    return true;
}
/**
 * Data for a measure of music.  Many rules of musical engraving are
 * enforced at a measure level: the duration of notes, accidentals, etc.
 *
 * Measures contain {@link SmoNote}, {@link SmoTuplet}, and {@link SmoBeamGroup}
 * Measures are contained in {@link SmoSystemStaff}
 * @category SmoObject
 */
class SmoMeasure {
    static get timeSignatureDefault() {
        return new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.defaults);
    }
    /**
     * Default constructor parameters.  Defaults are always copied so the
     * caller can modify them to create a new measure.
     * @returns constructor params for a new measure
     */
    static get defaults() {
        const proto = JSON.parse(JSON.stringify(SmoMeasure._defaults));
        proto.format = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaults);
        proto.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults);
        proto.modifiers.push(new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline({
            position: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.start,
            barline: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines.singleBar
        }));
        proto.modifiers.push(new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline({
            position: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.end,
            barline: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines.singleBar
        }));
        return proto;
    }
    // @ignore
    static convertLegacyTimeSignature(ts) {
        const rv = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.defaults);
        rv.timeSignature = ts;
        return rv;
    }
    /**
     * Fill in components.  We assume the modifiers are already constructed,
     * e.g. by deserialize or the calling function.
     * @param params
     */
    constructor(params) {
        this.timeSignature = SmoMeasure.timeSignatureDefault;
        /**
         * Overrides display of actual time signature, in the case of
         * pick-up notes where the actual and displayed durations are different
         */
        this.keySignature = '';
        this.canceledKeySignature = '';
        this.tuplets = [];
        this.repeatSymbol = false;
        this.repeatCount = 0;
        /**
         * Adjust for non-concert pitch intstruments
         */
        this.transposeIndex = 0;
        this.modifiers = [];
        /**
         * Row, column, and custom numbering information about this measure.
         */
        this.measureNumber = {
            localIndex: 0,
            systemIndex: 0,
            measureIndex: 0,
            staffId: 0
        };
        this.clef = 'treble';
        this.voices = [];
        /**
         * the active voice in the editor, if there are multiple voices
         *  */
        this.activeVoice = 0;
        this.beamGroups = [];
        this.lines = 5;
        this.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults);
        this.svg = {
            staffWidth: 0,
            unjustifiedWidth: 0,
            staffX: 0,
            staffY: 0,
            logicalBox: {
                x: 0, y: 0, width: 0, height: 0
            },
            yTop: 0,
            adjX: 0,
            maxColumnStartX: 0,
            adjRight: 0,
            history: [],
            lineIndex: 0,
            pageIndex: 0,
            rowInSystem: 0,
            forceClef: false,
            forceKeySignature: false,
            forceTimeSignature: false,
            forceTempo: false,
            hideEmptyMeasure: false,
            hideMultimeasure: false,
            multimeasureLength: 0,
            multimeasureEndBarline: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines['singleBar'],
            element: null
        };
        const defaults = SmoMeasure.defaults;
        SmoMeasureNumberParams.forEach((param) => {
            if (typeof (params[param]) !== 'undefined') {
                this[param] = params[param];
            }
        });
        SmoMeasureStringParams.forEach((param) => {
            this[param] = params[param] ? params[param] : defaults[param];
        });
        this.clef = params.clef;
        this.repeatSymbol = params.repeatSymbol;
        this.measureNumber = JSON.parse(JSON.stringify(params.measureNumber));
        if (params.tempo) {
            this.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(params.tempo);
        }
        // Handle legacy time signature format
        if (params.timeSignature) {
            const tsAny = params.timeSignature;
            if (typeof (tsAny) === 'string') {
                this.timeSignature = SmoMeasure.convertLegacyTimeSignature(tsAny);
            }
            else {
                this.timeSignature = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.createFromPartial(tsAny);
            }
        }
        this.voices = params.voices ? params.voices : [];
        this.tuplets = params.tuplets ? params.tuplets : [];
        this.modifiers = params.modifiers ? params.modifiers : defaults.modifiers;
        this.setDefaultBarlines();
        this.keySignature = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySigWithOffset(this.keySignature, this.transposeIndex);
        if (!(params.format)) {
            this.format = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaults);
            this.format.measureIndex = this.measureNumber.measureIndex;
        }
        else {
            this.format = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat(params.format);
        }
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_8__.getId)().toString(),
            type: 'SmoMeasure'
        };
    }
    // @internal
    // used for serialization
    static get defaultAttributes() {
        return [
            'keySignature',
            'measureNumber',
            'activeVoice', 'clef', 'transposeIndex',
            'format', 'rightMargin', 'lines', 'repeatSymbol', 'repeatCount'
        ];
    }
    // @internal
    // used for serialization
    static get formattingOptions() {
        return ['customStretch', 'customProportion', 'autoJustify', 'systemBreak',
            'pageBreak', 'padLeft'];
    }
    // @internal
    // used for serialization
    static get columnMappedAttributes() {
        return ['timeSignature', 'keySignature', 'tempo'];
    }
    static get serializableAttributes() {
        const rv = [];
        SmoMeasure.defaultAttributes.forEach((attr) => {
            if (SmoMeasure.columnMappedAttributes.indexOf(attr) < 0) {
                rv.push(attr);
            }
        });
        return rv;
    }
    /**
    // Return true if the time signatures are the same, for display purposes (e.g. if a time sig change
    // is required)
    */
    static timeSigEqual(o1, o2) {
        return o1.timeSignature === o2.timeSignature && o1.useSymbol === o2.useSymbol;
    }
    /**
     * @internal
     * @returns column mapped parameters, serialized.  caller will
     * decide if the parameters need to be persisted
     */
    serializeColumnMapped() {
        //
        return {
            timeSignature: this.timeSignature.serialize(),
            keySignature: this.keySignature,
            tempo: this.tempo.serialize()
        };
    }
    /**
     * Convert this measure object to a JSON object, recursively serializing all the notes,
     * note modifiers, etc.
     */
    serialize() {
        const params = {};
        let ser = true;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoMeasure.defaults, SmoMeasure.serializableAttributes, this, params);
        // measure number can't be defaulted b/c tempos etc. can map to default measure
        params.measureNumber = JSON.parse(JSON.stringify(this.measureNumber));
        params.tuplets = [];
        params.voices = [];
        params.modifiers = [];
        this.tuplets.forEach((tuplet) => {
            params.tuplets.push(tuplet.serialize());
        });
        this.voices.forEach((voice) => {
            const obj = {
                notes: []
            };
            voice.notes.forEach((note) => {
                obj.notes.push(note.serialize());
            });
            params.voices.push(obj);
        });
        this.modifiers.forEach((modifier) => {
            ser = true;
            /* don't serialize default modifiers */
            if (modifier.ctor === 'SmoBarline' && modifier.position === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.start &&
                modifier.barline === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines.singleBar) {
                ser = false;
            }
            else if (modifier.ctor === 'SmoBarline' && modifier.position === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.end
                && modifier.barline === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines.singleBar) {
                ser = false;
            }
            else if (modifier.ctor === 'SmoTempoText') {
                // we don't save tempo text as a modifier anymore
                ser = false;
            }
            else if (modifier.ctor === 'SmoRepeatSymbol' && modifier.position === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoRepeatSymbol.positions.start
                && modifier.symbol === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoRepeatSymbol.symbols.None) {
                ser = false;
            }
            if (ser) {
                params.modifiers.push(modifier.serialize());
            }
        });
        // ['timeSignature', 'keySignature', 'tempo']
        if (!isSmoMeasureParamsSer(params)) {
            throw 'invalid measure';
        }
        return params;
    }
    /**
     * restore a serialized measure object.  Usually called as part of deserializing a score,
     * but can also be used to restore a measure due to an undo operation.  Recursively
     * deserialize all the notes and modifiers to construct a new measure.
     * @param jsonObj the serialized SmoMeasure
     * @returns
     */
    static deserialize(jsonObj) {
        var _a;
        let j = 0;
        let i = 0;
        const voices = [];
        const noteSum = [];
        for (j = 0; j < jsonObj.voices.length; ++j) {
            const voice = jsonObj.voices[j];
            const notes = [];
            voices.push({
                notes
            });
            for (i = 0; i < voice.notes.length; ++i) {
                const noteParams = voice.notes[i];
                const smoNote = _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.deserialize(noteParams);
                notes.push(smoNote);
                noteSum.push(smoNote);
            }
        }
        const tuplets = [];
        for (j = 0; j < jsonObj.tuplets.length; ++j) {
            const tupJson = _tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet.defaults;
            _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(_tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet.parameterArray, jsonObj.tuplets[j], tupJson);
            const noteAr = noteSum.filter((nn) => nn.isTuplet && nn.tuplet.id === tupJson.attrs.id);
            // Bug fix:  A tuplet with no notes may be been overwritten
            // in a copy/paste operation
            if (noteAr.length > 0) {
                tupJson.notes = noteAr;
                const tuplet = new _tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet(tupJson);
                tuplets.push(tuplet);
            }
        }
        const modifiers = [];
        jsonObj.modifiers.forEach((modParams) => {
            const modifier = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureModifierBase.deserialize(modParams);
            modifiers.push(modifier);
        });
        const params = SmoMeasure.defaults;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoMeasure.defaultAttributes, jsonObj, params);
        // explode column-mapped
        if (jsonObj.tempo) {
            params.tempo = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.deserialize(jsonObj.tempo);
        }
        else {
            params.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults);
        }
        // timeSignatureString is now part of timeSignature.  upconvert old scores
        let timeSignatureString = '';
        const jsonLegacy = jsonObj;
        if (typeof (jsonLegacy.timeSignatureString) === 'string' && jsonLegacy.timeSignatureString.length > 0) {
            timeSignatureString = jsonLegacy.timeSignatureString;
        }
        if (jsonObj.timeSignature) {
            if (timeSignatureString.length) {
                jsonObj.timeSignature.displayString = timeSignatureString;
            }
            params.timeSignature = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.deserialize(jsonObj.timeSignature);
        }
        else {
            const tparams = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.defaults;
            if (timeSignatureString.length) {
                tparams.displayString = timeSignatureString;
            }
            params.timeSignature = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature(tparams);
        }
        params.keySignature = (_a = jsonObj.keySignature) !== null && _a !== void 0 ? _a : 'C';
        params.voices = voices;
        params.tuplets = tuplets;
        params.modifiers = modifiers;
        const rv = new SmoMeasure(params);
        // Handle migration for measure-mapped parameters
        rv.modifiers.forEach((mod) => {
            if (mod.ctor === 'SmoTempoText') {
                rv.tempo = mod;
            }
        });
        if (!rv.tempo) {
            rv.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults);
        }
        return rv;
    }
    /**
     * When creating a new measure, the 'default' settings can vary depending on
     * what comes before/after the measure.  This determines the default pitch
     * for a clef (appears on 3rd line)
     */
    static get defaultPitchForClef() {
        return {
            'treble': {
                letter: 'b',
                accidental: 'n',
                octave: 4
            },
            'bass': {
                letter: 'd',
                accidental: 'n',
                octave: 3
            },
            'tenor': {
                letter: 'a',
                accidental: 'n',
                octave: 3
            },
            'alto': {
                letter: 'c',
                accidental: 'n',
                octave: 4
            },
            'soprano': {
                letter: 'b',
                accidental: 'n',
                octave: 4
            },
            'percussion': {
                letter: 'b',
                accidental: 'n',
                octave: 4
            },
            'mezzo-soprano': {
                letter: 'b',
                accidental: 'n',
                octave: 4
            },
            'baritone-c': {
                letter: 'b',
                accidental: 'n',
                octave: 3
            },
            'baritone-f': {
                letter: 'e',
                accidental: 'n',
                octave: 3
            },
            'subbass': {
                letter: 'd',
                accidental: '',
                octave: 2
            },
            'french': {
                letter: 'b',
                accidental: '',
                octave: 4
            } // no idea
        };
    }
    static set emptyMeasureNoteType(tt) {
        SmoMeasure._emptyMeasureNoteType = tt;
    }
    static get emptyMeasureNoteType() {
        return SmoMeasure._emptyMeasureNoteType;
    }
    static timeSignatureNotes(timeSignature, clef) {
        const pitch = SmoMeasure.defaultPitchForClef[clef];
        const maxTicks = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.timeSignatureToTicks(timeSignature.timeSignature);
        const noteTick = 8192 / (timeSignature.beatDuration / 2);
        let ticks = 0;
        const pnotes = [];
        while (ticks < maxTicks) {
            const nextNote = _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.defaults;
            nextNote.pitches = [JSON.parse(JSON.stringify(pitch))];
            nextNote.noteType = 'r';
            nextNote.clef = clef;
            nextNote.ticks.numerator = noteTick;
            pnotes.push(new _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote(nextNote));
            ticks += noteTick;
        }
        if (timeSignature.beatDuration === 8 && (timeSignature.actualBeats % 3 === 0 || timeSignature.actualBeats % 2 !== 0)) {
            let ix = 0;
            pnotes.forEach((pnote) => {
                if ((ix + 1) % 3 === 0) {
                    pnote.endBeam = true;
                }
                pnote.beamBeats = 2048 * 3;
                ix += 1;
            });
        }
        return pnotes;
    }
    /**
     * Get a measure full of default notes for a given timeSignature/clef.
     * returns 8th notes for triple-time meters, etc.
     * @param params
     * @returns
     */
    static getDefaultNotes(params) {
        return SmoMeasure.timeSignatureNotes(new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature(params.timeSignature), params.clef);
    }
    /**
     * When creating a new measure, the 'default' settings can vary depending on
     * what comes before/after the measure.  This determines the defaults from the
     * parameters that are passed in, which could be another measure in the score.
     * This version returns params with no notes, for callers that want to use their own notes.
     * If you want the default notes, see {@link getDefaultMeasureWithNotes}
     *
     * @param params
     * @returns
     */
    static getDefaultMeasure(params) {
        const obj = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoMeasure.defaultAttributes, SmoMeasure.defaults, obj);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoMeasure.defaultAttributes, params, obj);
        // Don't copy column-formatting options to new measure in new column
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoMeasure.formattingOptions, SmoMeasure.defaults, obj);
        obj.timeSignature = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature(params.timeSignature);
        // The measure expects to get concert KS in constructor and adjust for instrument.  So do the
        // opposite.
        obj.keySignature = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySigWithOffset(obj.keySignature, -1 * obj.transposeIndex);
        // Don't redisplay tempo for a new measure
        const rv = new SmoMeasure(obj);
        if (rv.tempo && rv.tempo.display) {
            rv.tempo.display = false;
        }
        return rv;
    }
    /**
     * When creating a new measure, the 'default' settings can vary depending on
     * what comes before/after the measure.  This determines the defaults from the
     * parameters that are passed in, which could be another measure in the score.
     *
     * @param params
     * @returns
     */
    static getDefaultMeasureWithNotes(params) {
        var measure = SmoMeasure.getDefaultMeasure(params);
        measure.voices.push({
            notes: SmoMeasure.getDefaultNotes(params)
        });
        // fix a bug.
        // new measures only have 1 voice, make sure active voice is 0
        measure.activeVoice = 0;
        return measure;
    }
    /**
     * used by xml export
     * @internal
     * @param val
     */
    getForceSystemBreak() {
        return this.format.systemBreak;
    }
    // @internal
    setDefaultBarlines() {
        if (!this.getStartBarline()) {
            this.modifiers.push(new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline({
                position: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.start,
                barline: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines.singleBar
            }));
        }
        if (!this.getEndBarline()) {
            this.modifiers.push(new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline({
                position: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.end,
                barline: _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.barlines.singleBar
            }));
        }
    }
    get containsSound() {
        let i = 0;
        for (i = 0; i < this.voices.length; ++i) {
            let j = 0;
            const voice = this.voices[i];
            for (j = 0; j < this.voices.length; ++j) {
                if (voice.notes[j].noteType === 'n') {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * The rendered width of the measure, or estimate of same
     */
    get staffWidth() {
        return this.svg.staffWidth;
    }
    /**
     * set the rendered width of the measure, or estimate of same
     */
    setWidth(width, description) {
        if (_render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__.layoutDebug.flagSet(_render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__.layoutDebug.values.measureHistory)) {
            this.svg.history.push('setWidth ' + this.staffWidth + '=> ' + width + ' ' + description);
        }
        if (isNaN(width)) {
            throw ('NAN in setWidth');
        }
        this.svg.staffWidth = width;
    }
    /**
     * Get rendered or estimated start x
     */
    get staffX() {
        return this.svg.staffX;
    }
    /**
     * Set rendered or estimated start x
     */
    setX(x, description) {
        if (isNaN(x)) {
            throw ('NAN in setX');
        }
        _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__.layoutDebug.measureHistory(this, 'staffX', x, description);
        this.svg.staffX = Math.round(x);
    }
    /**
     * A time signature has possibly changed.  add/remove notes to
     * match the new length
     */
    alignNotesWithTimeSignature() {
        const tsTicks = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.timeSignatureToTicks(this.timeSignature.timeSignature);
        if (tsTicks === this.getMaxTicksVoice()) {
            return;
        }
        const replaceNoteWithDuration = (target, ar, note) => {
            const fitNote = new _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote(_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.defaults);
            const duration = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.closestDurationTickLtEq(target);
            if (duration > 128) {
                fitNote.ticks = { numerator: duration, denominator: 1, remainder: 0 };
                fitNote.pitches = note.pitches;
                fitNote.noteType = note.noteType;
                fitNote.clef = note.clef;
                ar.push(fitNote);
            }
        };
        const voices = [];
        const tuplets = [];
        for (var i = 0; i < this.voices.length; ++i) {
            const voice = this.voices[i];
            const newNotes = [];
            let voiceTicks = 0;
            for (var j = 0; j < voice.notes.length; ++j) {
                const note = voice.notes[j];
                // if a tuplet, make sure the whole tuplet fits.
                if (note.isTuplet) {
                    const tuplet = this.getTupletForNote(note);
                    if (tuplet) {
                        // remaining notes of an approved tuplet, just add them
                        if (tuplet.startIndex !== j) {
                            newNotes.push(note);
                            continue;
                        }
                        else if (tuplet.tickCount + voiceTicks <= tsTicks) {
                            // first note of the tuplet, it fits, add it
                            voiceTicks += tuplet.tickCount;
                            newNotes.push(note);
                            tuplets.push(tuplet);
                        }
                        else {
                            // tuplet will not fit.  Make a note as close to remainder as possible and add it
                            replaceNoteWithDuration(tsTicks - voiceTicks, newNotes, note);
                            voiceTicks = tsTicks;
                            break;
                        }
                    }
                    else { // missing tuplet, now what?
                        console.warn('missing tuplet info');
                        replaceNoteWithDuration(tsTicks - voiceTicks, newNotes, note);
                        voiceTicks = tsTicks;
                    }
                }
                else {
                    if (note.tickCount + voiceTicks <= tsTicks) {
                        newNotes.push(note);
                        voiceTicks += note.tickCount;
                    }
                    else {
                        replaceNoteWithDuration(tsTicks - voiceTicks, newNotes, note);
                        voiceTicks = tsTicks;
                        break;
                    }
                }
            }
            if (tsTicks - voiceTicks > 128) {
                const np = _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.defaults;
                np.clef = this.clef;
                const nnote = new _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote(np);
                replaceNoteWithDuration(tsTicks - voiceTicks, newNotes, nnote);
            }
            voices.push({ notes: newNotes });
        }
        this.voices = voices;
        this.tuplets = tuplets;
    }
    /**
     * Get rendered or estimated start y
     */
    get staffY() {
        return this.svg.staffY;
    }
    /**
     * Set rendered or estimated start y
     */
    setY(y, description) {
        if (isNaN(y)) {
            throw ('NAN in setY');
        }
        _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__.layoutDebug.measureHistory(this, 'staffY', y, description);
        this.svg.staffY = Math.round(y);
    }
    /**
     * Return actual or estimated highest point in score
     */
    get yTop() {
        return this.svg.yTop;
    }
    /**
     * WHen setting an instrument, offset the pitches to match the instrument key
     * @param offset
     * @param newClef
     */
    transposeToOffset(offset, targetKey, newClef) {
        const diff = offset - this.transposeIndex;
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                const pitches = [...Array(note.pitches.length).keys()];
                // when the note is a rest, preserve the rest but match the new clef.
                if (newClef && note.noteType === 'r') {
                    const defp = JSON.parse(JSON.stringify(SmoMeasure.defaultPitchForClef[newClef]));
                    note.pitches = [defp];
                }
                else {
                    note.transpose(pitches, diff, this.keySignature, targetKey);
                    note.getGraceNotes().forEach((gn) => {
                        const gpitch = [...Array(gn.pitches.length).keys()];
                        const xpose = _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.transpose(gn, gpitch, diff, this.keySignature, targetKey);
                        gn.pitches = xpose.pitches;
                    });
                }
            });
        });
    }
    /**
     * Return actual or estimated highest point in score
     */
    setYTop(y, description) {
        _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__.layoutDebug.measureHistory(this, 'yTop', y, description);
        this.svg.yTop = y;
    }
    /**
     * Return actual or estimated bounding box
     */
    setBox(box, description) {
        _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_5__.layoutDebug.measureHistory(this, 'logicalBox', box, description);
        this.svg.logicalBox = _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__.SvgHelpers.smoBox(box);
    }
    /**
     * @returns the DOM identifier for this measure when rendered
     */
    getClassId() {
        return 'mm-' + this.measureNumber.staffId + '-' + this.measureNumber.measureIndex;
    }
    /**
     *
     * @param id
     * @returns
     */
    getRenderedNote(id) {
        let j = 0;
        let i = 0;
        for (j = 0; j < this.voices.length; ++j) {
            const voice = this.voices[j];
            for (i = 0; i < voice.notes.length; ++i) {
                const note = voice.notes[i];
                if (note.renderId === id) {
                    return {
                        smoNote: note,
                        voice: j,
                        tick: i
                    };
                }
            }
        }
        return null;
    }
    getNotes() {
        return this.voices[this.activeVoice].notes;
    }
    getActiveVoice() {
        return this.activeVoice;
    }
    setActiveVoice(vix) {
        if (vix >= 0 && vix < this.voices.length) {
            this.activeVoice = vix;
        }
    }
    tickmapForVoice(voiceIx) {
        return new _xform_tickMap__WEBPACK_IMPORTED_MODULE_7__.TickMap(this, voiceIx);
    }
    // ### createMeasureTickmaps
    // A tickmap is a map of notes to ticks for the measure.  It is speciifc per-voice
    // since each voice may have different numbers of ticks.  The accidental map is
    // overall since accidentals in one voice apply to accidentals in the other
    // voices.  So we return the tickmaps and the overall accidental map.
    createMeasureTickmaps() {
        let i = 0;
        const tickmapArray = [];
        const accidentalMap = {};
        for (i = 0; i < this.voices.length; ++i) {
            tickmapArray.push(this.tickmapForVoice(i));
        }
        for (i = 0; i < this.voices.length; ++i) {
            const tickmap = tickmapArray[i];
            const durationKeys = Object.keys((tickmap.durationAccidentalMap));
            durationKeys.forEach((durationKey) => {
                if (!accidentalMap[durationKey]) {
                    accidentalMap[durationKey] = tickmap.durationAccidentalMap[durationKey];
                }
                else {
                    const amap = accidentalMap[durationKey];
                    const tickable = tickmap.durationAccidentalMap[durationKey];
                    const letterKeys = Object.keys(tickable);
                    letterKeys.forEach((pitchKey) => {
                        if (!amap[pitchKey]) {
                            amap[pitchKey] = tickmap.durationAccidentalMap[durationKey][pitchKey];
                        }
                    });
                }
            });
        }
        // duration: duration, pitches: Record<PitchLetter,TickAccidental>
        const accidentalArray = [];
        Object.keys(accidentalMap).forEach((durationKey) => {
            accidentalArray.push({ duration: durationKey, pitches: accidentalMap[durationKey] });
        });
        return {
            tickmaps: tickmapArray,
            accidentalMap,
            accidentalArray
        };
    }
    // ### createRestNoteWithDuration
    // pad some duration of music with rests.
    static createRestNoteWithDuration(duration, clef) {
        const pitch = JSON.parse(JSON.stringify(SmoMeasure.defaultPitchForClef[clef]));
        const note = new _note__WEBPACK_IMPORTED_MODULE_3__.SmoNote(_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.defaults);
        note.pitches = [pitch];
        note.noteType = 'r';
        note.hidden = true;
        note.ticks = { numerator: duration, denominator: 1, remainder: 0 };
        return note;
    }
    /**
     * Count the number of ticks in each voice and return max
     * @returns
     */
    getMaxTicksVoice() {
        let i = 0;
        let max = 0;
        for (i = 0; i < this.voices.length; ++i) {
            const voiceTicks = this.getTicksFromVoice(i);
            max = Math.max(voiceTicks, max);
        }
        return max;
    }
    /**
     * Count the number of ticks in a specific voice
     * @param voiceIndex
     * @returns
     */
    getTicksFromVoice(voiceIndex) {
        let ticks = 0;
        this.voices[voiceIndex].notes.forEach((note) => {
            ticks += note.tickCount;
        });
        return ticks;
    }
    getClosestTickCountIndex(voiceIndex, tickCount) {
        let i = 0;
        let rv = 0;
        for (i = 0; i < this.voices[voiceIndex].notes.length; ++i) {
            const note = this.voices[voiceIndex].notes[i];
            if (note.tickCount + rv > tickCount) {
                return rv;
            }
            rv += note.tickCount;
        }
        return rv;
    }
    isPickup() {
        const ticks = this.getTicksFromVoice(0);
        const goal = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.timeSignatureToTicks(this.timeSignature.timeSignature);
        return (ticks < goal);
    }
    clearBeamGroups() {
        this.beamGroups = [];
    }
    // ### updateLyricFont
    // Update the lyric font, which is the same for all lyrics.
    setLyricFont(fontInfo) {
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                note.setLyricFont(fontInfo);
            });
        });
    }
    setLyricAdjustWidth(adjustNoteWidth) {
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                note.setLyricAdjustWidth(adjustNoteWidth);
            });
        });
    }
    setChordAdjustWidth(adjustNoteWidth) {
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                note.setChordAdjustWidth(adjustNoteWidth);
            });
        });
    }
    // ### updateLyricFont
    // Update the lyric font, which is the same for all lyrics.
    setChordFont(fontInfo) {
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                note.setChordFont(fontInfo);
            });
        });
    }
    // ### tuplet methods.
    //
    // #### tupletNotes
    tupletNotes(tuplet) {
        let j = 0;
        let i = 0;
        const tnotes = [];
        for (j = 0; j < this.voices.length; ++j) {
            const vnotes = this.voices[j].notes;
            for (i = 0; i < vnotes.length; ++i) {
                const note = vnotes[i];
                if (note.tuplet && note.tuplet.id === tuplet.attrs.id) {
                    tnotes.push(vnotes[i]);
                }
            }
        }
        return tnotes;
    }
    // #### tupletIndex
    // return the index of the given tuplet
    tupletIndex(tuplet) {
        let j = 0;
        let i = 0;
        for (j = 0; j < this.voices.length; ++j) {
            const notes = this.voices[j].notes;
            for (i = 0; i < notes.length; ++i) {
                const note = notes[i];
                if (note.tuplet && note.tuplet.id === tuplet.attrs.id) {
                    return i;
                }
            }
        }
        return -1;
    }
    // #### getTupletForNote
    // Finds the tuplet for a given note, or null if there isn't one.
    getTupletForNote(note) {
        let i = 0;
        if (!note) {
            return null;
        }
        if (!note.isTuplet) {
            return null;
        }
        for (i = 0; i < this.tuplets.length; ++i) {
            const tuplet = this.tuplets[i];
            if (note.tuplet !== null && tuplet.attrs.id === note.tuplet.id) {
                return tuplet;
            }
        }
        return null;
    }
    removeTupletForNote(note) {
        let i = 0;
        const tuplets = [];
        for (i = 0; i < this.tuplets.length; ++i) {
            const tuplet = this.tuplets[i];
            if (note.tuplet !== null && note.tuplet.id !== tuplet.attrs.id) {
                tuplets.push(tuplet);
            }
        }
        this.tuplets = tuplets;
    }
    setClef(clef) {
        const oldClef = this.clef;
        this.clef = clef;
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                note.clef = clef;
            });
        });
    }
    isRest() {
        let i = 0;
        for (i = 0; i < this.voices.length; ++i) {
            const voice = this.voices[i];
            for (var j = 0; j < voice.notes.length; ++j) {
                if (!voice.notes[j].isRest()) {
                    return false;
                }
            }
        }
        return true;
    }
    // ### populateVoice
    // Create a new voice in this measure, and populate it with the default note
    // for this measure/key/clef
    populateVoice(index) {
        if (index !== this.voices.length) {
            return;
        }
        this.voices.push({ notes: SmoMeasure.getDefaultNotes(this) });
        this.activeVoice = index;
    }
    _removeSingletonModifier(name) {
        const ar = this.modifiers.filter(obj => obj.attrs.type !== name);
        this.modifiers = ar;
    }
    addRehearsalMark(parameters) {
        this._removeSingletonModifier('SmoRehearsalMark');
        this.modifiers.push(new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoRehearsalMark(parameters));
    }
    removeRehearsalMark() {
        this._removeSingletonModifier('SmoRehearsalMark');
    }
    getRehearsalMark() {
        return this.modifiers.find(obj => obj.attrs.type === 'SmoRehearsalMark');
    }
    getModifiersByType(type) {
        return this.modifiers.filter((mm) => type === mm.attrs.type);
    }
    setTempo(params) {
        this.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(params);
    }
    /**
     * Set measure tempo to the default {@link SmoTempoText}
     */
    resetTempo() {
        this.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults);
    }
    getTempo() {
        if (typeof (this.tempo) === 'undefined') {
            this.tempo = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults);
        }
        return this.tempo;
    }
    /**
     * Measure text is deprecated, and may not be supported in the future.
     * Better to use SmoTextGroup and attach to the measure.
     * @param mod
     * @returns
     */
    addMeasureText(mod) {
        var exist = this.modifiers.filter((mm) => mm.attrs.id === mod.attrs.id);
        if (exist.length) {
            return;
        }
        this.modifiers.push(mod);
    }
    getMeasureText() {
        return this.modifiers.filter(obj => obj.ctor === 'SmoMeasureText');
    }
    removeMeasureText(id) {
        var ar = this.modifiers.filter(obj => obj.attrs.id !== id);
        this.modifiers = ar;
    }
    setRepeatSymbol(rs) {
        const ar = [];
        let toAdd = true;
        const exSymbol = this.getRepeatSymbol();
        if (exSymbol && exSymbol.symbol === rs.symbol) {
            toAdd = false;
        }
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor !== 'SmoRepeatSymbol') {
                ar.push(modifier);
            }
        });
        this.modifiers = ar;
        if (toAdd) {
            ar.push(rs);
        }
    }
    getRepeatSymbol() {
        const rv = this.modifiers.filter(obj => obj.ctor === 'SmoRepeatSymbol');
        if (rv.length > 0) {
            return rv[0];
        }
        return null;
    }
    clearRepeatSymbols() {
        const ar = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor !== 'SmoRepeatSymbol') {
                ar.push(modifier);
            }
        });
        this.modifiers = ar;
    }
    setBarline(barline) {
        var ar = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor === 'SmoBarline') {
                const o = modifier;
                if (o.position !== barline.position) {
                    ar.push(o);
                }
            }
            else {
                ar.push(modifier);
            }
        });
        this.modifiers = ar;
        ar.push(barline);
    }
    _getBarline(pos) {
        let rv = null;
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor === 'SmoBarline' && modifier.position === pos) {
                rv = modifier;
            }
        });
        if (rv === null) {
            return new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.defaults);
        }
        return rv;
    }
    getEndBarline() {
        return this._getBarline(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.end);
    }
    getStartBarline() {
        return this._getBarline(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoBarline.positions.start);
    }
    addNthEnding(ending) {
        const mods = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor !== 'SmoVolta' || modifier.startBar !== ending.startBar ||
                modifier.endBar !== ending.endBar) {
                mods.push(modifier);
            }
        });
        mods.push(ending);
        this.modifiers = mods;
    }
    removeNthEnding(ending) {
        const mods = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor === 'SmoVolta') {
                const volta = modifier;
                if (ending.startSelector === null || ending.endSelector === null || volta.startSelector === null || volta.endSelector === null) {
                    return;
                }
                if (!_xform_selections__WEBPACK_IMPORTED_MODULE_9__.SmoSelector.sameMeasure(ending.startSelector, volta.startSelector) || !_xform_selections__WEBPACK_IMPORTED_MODULE_9__.SmoSelector.sameMeasure(ending.endSelector, volta.endSelector)
                    && ending.number !== volta.number) {
                    mods.push(modifier);
                }
            }
            else {
                mods.push(modifier);
            }
        });
        this.modifiers = mods;
    }
    getNthEndings() {
        const rv = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor === 'SmoVolta') {
                rv.push(modifier);
            }
        });
        return rv;
    }
    getEndEndings() {
        const rv = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor === 'SmoVolta' && modifier.endBar === this.measureNumber.systemIndex
                && modifier.startBar !== this.measureNumber.systemIndex) {
                rv.push(modifier);
            }
        });
        return rv;
    }
    getMidEndings() {
        const rv = [];
        this.modifiers.forEach((modifier) => {
            if (modifier.ctor === 'SmoVolta' && modifier.endBar > this.measureNumber.systemIndex
                && modifier.startBar < this.measureNumber.systemIndex) {
                rv.push(modifier);
            }
        });
        return rv;
    }
    setKeySignature(sig) {
        this.keySignature = sig;
        this.voices.forEach((voice) => {
            voice.notes.forEach((note) => {
                note.keySignature = sig;
            });
        });
    }
    setMeasureNumber(num) {
        this.measureNumber = num;
    }
    getBeamGroupForNote(note) {
        let i = 0;
        let j = 0;
        for (i = 0; i < this.beamGroups.length; ++i) {
            const bg = this.beamGroups[i];
            for (j = 0; j < bg.notes.length; ++j) {
                if (bg.notes[j].attrs.id === note.attrs.id) {
                    return bg;
                }
            }
        }
        return null;
    }
}
SmoMeasure.defaultDupleDuration = 4096;
SmoMeasure.defaultTripleDuration = 2048 * 3;
// @internal
SmoMeasure._defaults = {
    timeSignature: SmoMeasure.timeSignatureDefault,
    keySignature: 'C',
    tuplets: [],
    transposeIndex: 0,
    modifiers: [],
    staffY: 40,
    // bars: [1, 1], // follows enumeration in VF.Barline
    measureNumber: {
        localIndex: 0,
        systemIndex: 0,
        measureIndex: 0,
        staffId: 0
    },
    clef: 'treble',
    lines: 5,
    voices: [],
    format: new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaults),
    activeVoice: 0,
    tempo: new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.defaults),
    repeatSymbol: false,
    repeatCount: 0
};
SmoMeasure._emptyMeasureNoteType = 'r';


/***/ }),

/***/ "./src/smo/data/measureModifiers.ts":
/*!******************************************!*\
  !*** ./src/smo/data/measureModifiers.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoBarline: () => (/* binding */ SmoBarline),
/* harmony export */   SmoMeasureFormat: () => (/* binding */ SmoMeasureFormat),
/* harmony export */   SmoMeasureFormatBooleanKeys: () => (/* binding */ SmoMeasureFormatBooleanKeys),
/* harmony export */   SmoMeasureFormatNumberKeys: () => (/* binding */ SmoMeasureFormatNumberKeys),
/* harmony export */   SmoMeasureModifierBase: () => (/* binding */ SmoMeasureModifierBase),
/* harmony export */   SmoMeasureText: () => (/* binding */ SmoMeasureText),
/* harmony export */   SmoRehearsalMark: () => (/* binding */ SmoRehearsalMark),
/* harmony export */   SmoRepeatSymbol: () => (/* binding */ SmoRepeatSymbol),
/* harmony export */   SmoTempoText: () => (/* binding */ SmoTempoText),
/* harmony export */   SmoVolta: () => (/* binding */ SmoVolta),
/* harmony export */   TimeSignature: () => (/* binding */ TimeSignature)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * @module /smo/data/measureModifiers
 * **/




const VF = _common_vex__WEBPACK_IMPORTED_MODULE_3__.VexFlow;
/**
 * Measure modifiers are attached to the measure itself.  Each instance has a
 * `serialize()` method and a `ctor` attribute for deserialization.
 * @category SmoModifier
 */
class SmoMeasureModifierBase {
    constructor(ctor) {
        this.logicalBox = null;
        this.ctor = ctor;
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
            type: ctor
        };
    }
    static deserialize(jsonObj) {
        const ctor = eval('globalThis.Smo.' + jsonObj.ctor);
        const rv = new ctor(jsonObj);
        return rv;
    }
}
const SmoMeasureFormatNumberKeys = ['customStretch', 'proportionality', 'padLeft', 'measureIndex'];
const SmoMeasureFormatBooleanKeys = ['autoJustify', 'skipMeasureCount', 'systemBreak', 'pageBreak', 'padAllInSystem', 'restBreak', 'forceRest'];
function isSmoMeasureParamsSer(params) {
    return typeof (params.ctor) === 'string';
}
/**
 * Measure format holds parameters about the automatic formatting of the measure itself, such as the witch and
 * how the durations are proportioned.  Note that measure formatting is also controlled by the justification
 * between voices and staves.  For instance, 2 measures in different staves will have to have the same width
 * @category SmoModifier
 */
class SmoMeasureFormat extends SmoMeasureModifierBase {
    static get attributes() {
        return ['customStretch', 'proportionality', 'autoJustify', 'systemBreak', 'pageBreak',
            'padLeft', 'measureIndex', 'padAllInSystem', 'skipMeasureCount', 'restBreak', 'forceRest'];
    }
    static get formatAttributes() {
        return ['customStretch', 'skipMeasureCount', 'proportionality', 'autoJustify', 'systemBreak', 'pageBreak', 'padLeft'];
    }
    static get defaultProportionality() {
        return 0;
    }
    static get legacyProportionality() {
        return 0;
    }
    static fromLegacyMeasure(measure) {
        const o = {};
        SmoMeasureFormat.formatAttributes.forEach((attr) => {
            if (typeof (measure[attr]) !== 'undefined') {
                o[attr] = measure[attr];
            }
            else {
                const rhs = SmoMeasureFormat.defaults[attr];
                o[attr] = rhs;
            }
            o.measureIndex = measure.measureNumber.measureIndex;
        });
        return new SmoMeasureFormat(o);
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            customStretch: 0,
            proportionality: SmoMeasureFormat.defaultProportionality,
            systemBreak: false,
            pageBreak: false,
            restBreak: false,
            forceRest: false,
            padLeft: 0,
            padAllInSystem: true,
            skipMeasureCount: false,
            autoJustify: true,
            measureIndex: 0,
        }));
    }
    eq(o) {
        let rv = true;
        SmoMeasureFormatBooleanKeys.forEach((attr) => {
            if (o[attr] !== this[attr]) {
                rv = false;
            }
        });
        SmoMeasureFormatNumberKeys.forEach((attr) => {
            if (o[attr] !== this[attr] && attr !== 'measureIndex') {
                rv = false;
            }
        });
        return rv;
    }
    get isDefault() {
        return this.eq(SmoMeasureFormat.defaults);
    }
    constructor(parameters) {
        super('SmoMeasureFormat');
        this.customStretch = SmoMeasureFormat.defaultProportionality;
        this.proportionality = 0;
        this.systemBreak = false;
        this.pageBreak = false;
        this.restBreak = false;
        this.skipMeasureCount = false;
        this.forceRest = false;
        this.padLeft = 0;
        this.padAllInSystem = true;
        this.autoJustify = true;
        this.measureIndex = 0;
        const def = SmoMeasureFormat.defaults;
        SmoMeasureFormatNumberKeys.forEach((param) => {
            this[param] = parameters[param] ? parameters[param] : def[param];
        });
        SmoMeasureFormatBooleanKeys.forEach((param) => {
            this[param] = parameters[param] ? parameters[param] : def[param];
        });
    }
    formatMeasure(mm) {
        mm.format = new SmoMeasureFormat(this);
        mm.format.measureIndex = mm.measureNumber.measureIndex;
    }
    serialize() {
        const params = { ctor: 'SmoMeasureFormat' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoMeasureFormat.defaults, SmoMeasureFormat.attributes, this, params);
        if (!isSmoMeasureParamsSer(params)) {
            throw ('bad type SmoMeasureFormatParamsSer');
        }
        return params;
    }
}
/**
 * Barline is just that, there is a start and end in each measure, which defaults to 'single'.
 * @category SmoModifier
 */
class SmoBarline extends SmoMeasureModifierBase {
    static get _barlineToString() {
        return ['singleBar', 'doubleBar', 'endBar', 'startRepeat', 'endRepeat', 'noBar'];
    }
    static barlineString(inst) {
        return SmoBarline._barlineToString[inst.barline];
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            position: SmoBarline.positions.end,
            barline: SmoBarline.barlines.singleBar
        }));
    }
    static get attributes() {
        return ['position', 'barline'];
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoBarline.defaults, SmoBarline.attributes, this, params);
        params.ctor = 'SmoBarline';
        return params;
    }
    constructor(parameters) {
        super('SmoBarline');
        this.barline = SmoBarline.barlines.singleBar;
        this.position = SmoBarline.positions.start;
        let ops = parameters;
        if (typeof (parameters) === 'undefined' || parameters === null) {
            ops = {};
        }
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoBarline.attributes, SmoBarline.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoBarline.attributes, ops, this);
    }
    static get toVexBarline() {
        return [VF.Barline.type.SINGLE, VF.Barline.type.DOUBLE, VF.Barline.type.END,
            VF.Barline.type.REPEAT_BEGIN, VF.Barline.type.REPEAT_END, VF.Barline.type.NONE];
    }
    static get toVexPosition() {
        return [VF.StaveModifierPosition.BEGIN, VF.StaveModifierPosition.END];
    }
    toVexBarline() {
        return SmoBarline.toVexBarline[this.barline];
    }
    toVexPosition() {
        return SmoBarline.toVexPosition[this.position];
    }
}
SmoBarline.positions = {
    start: 0,
    end: 1
};
SmoBarline.barlines = {
    singleBar: 0,
    doubleBar: 1,
    endBar: 2,
    startRepeat: 3,
    endRepeat: 4,
    noBar: 5
};
function isSmoRepeatSymbolParamsSer(params) {
    return typeof (params.ctor) === 'string' && params.ctor === 'SmoRepeatSymbol';
}
/**
 * Repeat symbols like DC, Fine etc.  Note: voltas are their own thing,
 * and repeats are types of barlines.
 * @category SmoModifier
 */
class SmoRepeatSymbol extends SmoMeasureModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            symbol: SmoRepeatSymbol.symbols.Coda,
            xOffset: 0,
            yOffset: 30,
            position: SmoRepeatSymbol.positions.end
        }));
    }
    static get toVexSymbol() {
        return [VF.Repetition.type.NONE, VF.Repetition.type.CODA_LEFT, VF.Repetition.type.SEGNO_LEFT, VF.Repetition.type.DC,
            VF.Repetition.type.DC_AL_CODA, VF.Repetition.type.DC_AL_FINE, VF.Repetition.type.DS,
            VF.Repetition.type.DS_AL_CODA, VF.Repetition.type.DS_AL_FINE, VF.Repetition.type.FINE];
    }
    static get attributes() {
        return ['symbol', 'xOffset', 'yOffset', 'position'];
    }
    toVexSymbol() {
        return SmoRepeatSymbol.toVexSymbol[this.symbol];
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoRepeatSymbol.defaults, SmoRepeatSymbol.attributes, this, params);
        params.ctor = 'SmoRepeatSymbol';
        if (!isSmoRepeatSymbolParamsSer(params)) {
            throw 'bad type SmoRepeatSymbolParamsSer';
        }
        return params;
    }
    constructor(parameters) {
        super('SmoRepeatSymbol');
        this.symbol = SmoRepeatSymbol.symbols.Coda;
        this.xOffset = 0;
        this.yOffset = 30;
        this.position = SmoRepeatSymbol.positions.end;
        if (!parameters.symbol) {
            parameters.symbol = SmoRepeatSymbol.symbols.Coda;
        }
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoRepeatSymbol.attributes, SmoRepeatSymbol.defaults, this);
        this.xOffset = SmoRepeatSymbol.defaultXOffset[parameters.symbol];
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoRepeatSymbol.attributes, parameters, this);
    }
}
SmoRepeatSymbol.symbols = {
    None: 0,
    Coda: 1,
    Segno: 2,
    Dc: 3,
    ToCoda: 1,
    DcAlCoda: 4,
    DcAlFine: 5,
    Ds: 6,
    DsAlCoda: 7,
    DsAlFine: 8,
    Fine: 9
};
SmoRepeatSymbol.defaultXOffset = [0, 0, 0, -20, -60, -60, -50, -60, -50, -40];
SmoRepeatSymbol.positions = {
    start: 0,
    end: 1
};
/**
 * Voltas (2nd endings) behave more like staff modifiers, but they are associated with the measure
 * since each measure has it's own rules for displaying part of the volta.
 * @category SmoModifier
 */
class SmoVolta extends SmoMeasureModifierBase {
    constructor(parameters) {
        super('SmoVolta');
        this.startBar = 1;
        this.endBar = 1;
        this.xOffsetStart = 0;
        this.xOffsetEnd = 0;
        this.yOffset = 20;
        this.number = 1;
        this.endingId = null;
        this.startSelector = null;
        this.endSelector = null;
        this.elements = [];
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoVolta.attributes, SmoVolta.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoVolta.attributes, parameters, this);
    }
    get id() {
        return this.attrs.id;
    }
    get type() {
        return this.attrs.type;
    }
    static get attributes() {
        return ['startBar', 'endBar', 'endingId', 'startSelector', 'endSelector', 'xOffsetStart', 'xOffsetEnd', 'yOffset', 'number'];
    }
    static get editableAttributes() {
        return ['xOffsetStart', 'xOffsetEnd', 'yOffset', 'number'];
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoVolta.defaults, SmoVolta.attributes, this, params);
        params.ctor = 'SmoVolta';
        return params;
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            startBar: 1,
            endBar: 1,
            xOffsetStart: 0,
            xOffsetEnd: 0,
            yOffset: 20,
            number: 1
        }));
    }
    toVexVolta(measureNumber) {
        if (this.startBar === measureNumber && this.startBar === this.endBar) {
            return VF.Volta.type.BEGIN_END;
        }
        if (this.startBar === measureNumber) {
            return VF.Volta.type.BEGIN;
        }
        if (this.endBar === measureNumber) {
            return VF.Volta.type.END;
        }
        if (this.startBar < measureNumber && this.endBar > measureNumber) {
            return VF.Volta.type.MID;
        }
        return VF.Volta.type.NONE;
    }
}
/**
 * Measure text is just that.  Now that score text can be associated with musical elements, this
 * class has falled into disrepair.  It may be used for part notations in the score later.
 * @category SmoModifier
 */
class SmoMeasureText extends SmoMeasureModifierBase {
    static get toVexPosition() {
        return [VF.Modifier.Position.ABOVE, VF.Modifier.Position.BELOW, VF.Modifier.Position.LEFT, VF.Modifier.Position.RIGHT];
    }
    static get toVexJustification() {
        return [VF.TextJustification.LEFT, VF.TextJustification.RIGHT, VF.TextJustification.CENTER];
    }
    toVexJustification() {
        return SmoMeasureText.toVexJustification[this.justification];
    }
    toVexPosition() {
        return SmoMeasureText.toVexPosition[parseInt(this.position, 10)];
    }
    static get attributes() {
        return ['position', 'fontInfo', 'text', 'adjustX', 'adjustY', 'justification'];
    }
    serialize() {
        var params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoMeasureText.defaults, SmoMeasureText.attributes, this, params);
        params.ctor = 'SmoMeasureText';
        return params; // trivial class, no 'is'
    }
    constructor(parameters) {
        super('SmoMeasureText');
        this.justification = SmoMeasureText.justifications.center;
        this.position = SmoMeasureText.positions.above;
        this.text = '';
        this.adjustX = 0;
        this.adjustY = 0;
        this.fontInfo = {
            size: 9,
            family: 'times',
            style: 'normal',
            weight: 'normal'
        };
        let pobj = parameters;
        if (pobj === null) {
            pobj = SmoMeasureText.defaults;
        }
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoMeasureText.attributes, SmoMeasureText.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoMeasureText.attributes, pobj, this);
        // right-justify left text and left-justify right text by default
        if (!pobj.justification) {
            // eslint-disable-next-line
            this.justification = (this.position === SmoMeasureText.positions.left) ? SmoMeasureText.justifications.right :
                (this.position === SmoMeasureText.positions.right ? SmoMeasureText.justifications.left : this.justification);
        }
    }
}
SmoMeasureText.positions = {
    above: 0, below: 1, left: 2, right: 3, none: 4
};
SmoMeasureText.justifications = {
    left: 0, right: 1, center: 2
};
SmoMeasureText._positionToString = ['above', 'below', 'left', 'right'];
SmoMeasureText.defaults = {
    position: SmoMeasureText.positions.above,
    fontInfo: {
        size: 9,
        family: 'times',
        style: 'normal',
        weight: 'normal'
    },
    text: 'Smo',
    adjustX: 0,
    adjustY: 0,
    justification: SmoMeasureText.justifications.center
};
/**
 * Rehearsal marks are some type of auto-incrementing markers on a measure index.
 * @category SmoModifier
 */
class SmoRehearsalMark extends SmoMeasureModifierBase {
    static get _positionToString() {
        return ['above', 'below', 'left', 'right'];
    }
    // TODO: positions don't work.
    static get defaults() {
        return JSON.parse(JSON.stringify({
            position: SmoRehearsalMark.positions.above,
            cardinality: SmoRehearsalMark.cardinalities.capitals,
            symbol: 'A',
            increment: true
        }));
    }
    static get attributes() {
        return ['cardinality', 'symbol', 'position', 'increment'];
    }
    getIncrement() {
        if (this.cardinality !== 'number') {
            const code = this.symbol.charCodeAt(0) + 1;
            const symbol = String.fromCharCode(code);
            return symbol;
        }
        else {
            return (parseInt(this.symbol, 10) + 1).toString();
        }
    }
    getInitial() {
        // eslint-disable-next-line
        return this.cardinality === SmoRehearsalMark.cardinalities.capitals ? 'A' :
            (this.cardinality === SmoRehearsalMark.cardinalities.lowerCase ? 'a' : '1');
    }
    serialize() {
        var params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoRehearsalMark.defaults, SmoRehearsalMark.attributes, this, params);
        params.ctor = 'SmoRehearsalMark';
        return params;
    }
    constructor(parameters) {
        super('SmoRehearsalMark');
        this.position = SmoRehearsalMark.positions.above;
        this.cardinality = SmoRehearsalMark.cardinalities.capitals;
        this.symbol = 'A';
        this.increment = true;
        let pobj = parameters;
        if (typeof (pobj) === 'undefined' || pobj === null) {
            pobj = SmoRehearsalMark.defaults;
        }
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoRehearsalMark.attributes, SmoRehearsalMark.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoRehearsalMark.attributes, pobj, this);
        if (!pobj.symbol) {
            this.symbol = this.getInitial();
        }
    }
}
SmoRehearsalMark.cardinalities = {
    capitals: 'capitals', lowerCase: 'lowerCase', numbers: 'numbers'
};
SmoRehearsalMark.positions = {
    above: 0, below: 1, left: 2, right: 3
};
/**
 * Information about both playback tempo and how the tempo is notated.
 * @category SmoModifier
 */
class SmoTempoText extends SmoMeasureModifierBase {
    static get tempoModes() {
        return {
            durationMode: 'duration',
            textMode: 'text',
            customMode: 'custom'
        };
    }
    static get tempoTexts() {
        return {
            larghissimo: 'Larghissimo',
            grave: 'Grave',
            lento: 'Lento',
            largo: 'Largo',
            larghetto: 'Larghetto',
            adagio: 'Adagio',
            adagietto: 'Adagietto',
            andante_moderato: 'Andante moderato',
            andante: 'Andante',
            andantino: 'Andantino',
            moderator: 'Moderato',
            allegretto: 'Allegretto',
            allegro: 'Allegro',
            vivace: 'Vivace',
            presto: 'Presto',
            prestissimo: 'Prestissimo'
        };
    }
    /**
     * create defaults for tempo initialization
     */
    static get defaults() {
        return JSON.parse(JSON.stringify({
            tempoMode: SmoTempoText.tempoModes.durationMode,
            bpm: 120,
            beatDuration: 4096,
            tempoText: SmoTempoText.tempoTexts.allegro,
            yOffset: 0,
            display: false,
            customText: ''
        }));
    }
    static get attributes() {
        return ['tempoMode', 'bpm', 'display', 'beatDuration', 'tempoText', 'yOffset', 'customText'];
    }
    _toVexTextTempo() {
        return { name: this.tempoText };
    }
    /**
     * Return equality wrt the tempo marking, e.g. 2 allegro in textMode will be equal but
     * an allegro and duration 120bpm will not.
     * @param t1
     * @param t2
     * @returns
     */
    static eq(t1, t2) {
        if (t1.tempoMode !== t2.tempoMode) {
            return false;
        }
        if (t1.tempoMode === SmoTempoText.tempoModes.durationMode) {
            return t1.bpm === t2.bpm && t1.beatDuration === t2.beatDuration;
        }
        if (t1.tempoMode === SmoTempoText.tempoModes.textMode) {
            return t1.tempoText === t2.tempoText;
        }
        else {
            return t1.bpm === t2.bpm && t1.beatDuration === t2.beatDuration &&
                t1.tempoText === t2.tempoText;
        }
    }
    static get bpmFromText() {
        const rv = {};
        rv[SmoTempoText.tempoTexts.larghissimo] = 24;
        rv[SmoTempoText.tempoTexts.grave] = 40;
        rv[SmoTempoText.tempoTexts.lento] = 45;
        rv[SmoTempoText.tempoTexts.largo] = 40;
        rv[SmoTempoText.tempoTexts.larghetto] = 60;
        rv[SmoTempoText.tempoTexts.adagio] = 72;
        rv[SmoTempoText.tempoTexts.adagietto] = 72;
        rv[SmoTempoText.tempoTexts.andante_moderato] = 72;
        rv[SmoTempoText.tempoTexts.andante] = 84;
        rv[SmoTempoText.tempoTexts.andantino] = 92;
        rv[SmoTempoText.tempoTexts.moderator] = 96;
        rv[SmoTempoText.tempoTexts.allegretto] = 96;
        rv[SmoTempoText.tempoTexts.allegro] = 120;
        rv[SmoTempoText.tempoTexts.vivace] = 144;
        rv[SmoTempoText.tempoTexts.presto] = 168;
        rv[SmoTempoText.tempoTexts.prestissimo] = 240;
        return rv;
    }
    _toVexDurationTempo() {
        var vd = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.ticksToDuration[this.beatDuration];
        var dots = (vd.match(/d/g) || []).length;
        vd = vd.replace(/d/g, '');
        const rv = { duration: vd, dots, bpm: this.bpm };
        if (this.customText.length) {
            rv.name = this.customText;
        }
        return rv;
    }
    toVexTempo() {
        if (this.tempoMode === SmoTempoText.tempoModes.durationMode ||
            this.tempoMode === SmoTempoText.tempoModes.customMode) {
            return this._toVexDurationTempo();
        }
        return this._toVexTextTempo();
    }
    serialize() {
        var params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoTempoText.defaults, SmoTempoText.attributes, this, params);
        params.ctor = 'SmoTempoText';
        return params;
    }
    constructor(parameters) {
        super('SmoTempoText');
        this.tempoMode = SmoTempoText.tempoModes.durationMode;
        this.bpm = 120;
        this.beatDuration = 4096;
        this.tempoText = 'Allegro';
        this.yOffset = 0;
        this.display = false;
        this.customText = '';
        let pobj = parameters;
        if (typeof (pobj) === 'undefined' || pobj === null) {
            pobj = {};
        }
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTempoText.attributes, SmoTempoText.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTempoText.attributes, pobj, this);
    }
}
/**
 * Time signatures contain duration information for a measure, and information
 * about the display of the time signature.
 * @category SmoModifier
 */
class TimeSignature extends SmoMeasureModifierBase {
    static get defaults() {
        return {
            actualBeats: 4,
            beatDuration: 4,
            useSymbol: false,
            display: true,
            displayString: ''
        };
    }
    static equal(ts1, ts2) {
        return (ts1.actualBeats === ts2.actualBeats && ts1.beatDuration === ts2.beatDuration);
    }
    static createFromPartial(value) {
        const params = TimeSignature.defaults;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(TimeSignature.parameters, value, params);
        return new TimeSignature(params);
    }
    get timeSignature() {
        return this.actualBeats.toString() + '/' + this.beatDuration.toString();
    }
    static get parameters() {
        return ['actualBeats', 'beatDuration', 'useSymbol', 'display', 'displayString'];
    }
    static get boolParameters() {
        return [];
    }
    set timeSignature(value) {
        const ar = value.split('/');
        this.actualBeats = parseInt(ar[0], 10);
        this.beatDuration = parseInt(ar[1], 10);
    }
    serialize() {
        const rv = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(TimeSignature.defaults, TimeSignature.parameters, this, rv);
        rv.ctor = 'TimeSignature';
        return rv;
    }
    constructor(params) {
        super('TimeSignature');
        // timeSignature: string = '4/4';
        this.actualBeats = 4;
        this.beatDuration = 4;
        this.useSymbol = false;
        this.display = true;
        this.displayString = '';
        this.actualBeats = params.actualBeats;
        this.beatDuration = params.beatDuration;
        this.useSymbol = params.useSymbol;
        this.display = params.display;
        this.displayString = params.displayString;
    }
}


/***/ }),

/***/ "./src/smo/data/music.ts":
/*!*******************************!*\
  !*** ./src/smo/data/music.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoAudioPitch: () => (/* binding */ SmoAudioPitch),
/* harmony export */   SmoMusic: () => (/* binding */ SmoMusic)
/* harmony export */ });
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note */ "./src/smo/data/note.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
/**
 * shared music theory and audio frequency routines, helper functions etc.
 * @module /smo/data/music
 */
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


const VF = _common_vex__WEBPACK_IMPORTED_MODULE_1__.VexFlow;
/**
 * calculate the pitch frequency, just temperment a=440, etc.
 * @category SmoUtilities
 */
class SmoAudioPitch {
    // ### _frequencies
    // Compute the equal-temperment frequencies of the notes.
    static _computeFrequencies() {
        const map = {};
        let lix = 0;
        const octaves = [1, 2, 3, 4, 5, 6, 7];
        const letters = ['cn', 'c#', 'dn', 'd#', 'en', 'fn', 'f#', 'gn', 'g#', 'an', 'a#', 'bn'];
        const just = Math.pow(2, (1.0 / 12));
        const baseFrequency = (440 / 16) * Math.pow(just, 3);
        octaves.forEach((octave) => {
            const base = baseFrequency * Math.pow(2, octave - 1);
            lix = 0;
            letters.forEach((letter) => {
                const freq = base * Math.pow(just, lix);
                var enharmonics = SmoMusic.getEnharmonics(letter);
                enharmonics.forEach((en) => {
                    // Adjust for B4 higher than C4
                    const adjOctave = (letter[0] === 'b' && en[0] === 'c') ?
                        octave + 1 : octave;
                    map[en + adjOctave.toString()] = freq;
                });
                lix += 1;
            });
        });
        return map;
    }
    static get pitchFrequencyMap() {
        if (!SmoAudioPitch.frequencies) {
            SmoAudioPitch.frequencies = SmoAudioPitch._computeFrequencies();
        }
        return SmoAudioPitch.frequencies;
    }
    static _rawPitchToFrequency(smoPitch, offset) {
        const npitch = SmoMusic.smoIntToPitch(SmoMusic.smoPitchToInt(smoPitch) + offset);
        const vx = npitch.letter.toLowerCase() + npitch.accidental + npitch.octave.toString();
        return SmoAudioPitch.pitchFrequencyMap[vx];
    }
    /**
     *
     * @param smoPitch - pitch from the SMO object
     * @param offset - transpose 1/2 steps, 0 means no transpose
     * @param tone - optional transpose microtone
     * @returns
     */
    static smoPitchToFrequency(smoPitch, offset, tone) {
        let pitchInt = 0;
        let rv = SmoAudioPitch._rawPitchToFrequency(smoPitch, offset);
        if (tone) {
            const coeff = tone.toPitchCoeff;
            pitchInt = SmoMusic.smoPitchToInt(smoPitch);
            pitchInt += (coeff > 0) ? 1 : -1;
            const otherSmo = SmoMusic.smoIntToPitch(pitchInt);
            const otherPitch = SmoAudioPitch._rawPitchToFrequency(otherSmo, offset);
            rv += Math.abs(rv - otherPitch) * coeff;
        }
        return rv;
    }
}
SmoAudioPitch.frequencies = null;
;
;
/**
 * Helper functions that build on the VX music theory routines, and other
 * utilities I wish were in VF.Music but aren't
 * ## Note on pitch and duration format
 * We use some VEX music theory routines and frequently need to convert
 * formats from SMO format.  We also use the same 'ticks' abstraction for
 * durations.
 *
 * `Smo` uses pitch JSON:
 * ```javascript
 *     {note:'c',accidental:'#',octave:4}
 * ```
 *
 * `Vex` usually uses a canonical string:
 *
 *     `'c#/4'`
 *
 * Depending on the operation, the octave might be omitted
 *
 * `Smo` uses a JSON for duration always:
 * ```javascript
 *     {numerator:4096,denominator:1,remainder:0}
 * ```
 * `Vex` uses a letter duration (`'4'` or `'q'`for 1/4 note) and `'d'` for dot.
 *
 * I try to indicate whether I am using vex or smo notation in the function name.
 * Duration methods start around line 1100
 * @category SmoUtilities
 */
class SmoMusic {
    /**
     * Ported from vex, used to convert pitches to numerical values
     * */
    static get noteValues() {
        return {
            c: { root_index: 0, int_val: 0 },
            cn: { root_index: 0, int_val: 0 },
            'c#': { root_index: 0, int_val: 1 },
            'c##': { root_index: 0, int_val: 2 },
            cb: { root_index: 0, int_val: 11 },
            cbb: { root_index: 0, int_val: 10 },
            d: { root_index: 1, int_val: 2 },
            dn: { root_index: 1, int_val: 2 },
            'd#': { root_index: 1, int_val: 3 },
            'd##': { root_index: 1, int_val: 4 },
            db: { root_index: 1, int_val: 1 },
            dbb: { root_index: 1, int_val: 0 },
            e: { root_index: 2, int_val: 4 },
            en: { root_index: 2, int_val: 4 },
            'e#': { root_index: 2, int_val: 5 },
            'e##': { root_index: 2, int_val: 6 },
            eb: { root_index: 2, int_val: 3 },
            ebb: { root_index: 2, int_val: 2 },
            f: { root_index: 3, int_val: 5 },
            fn: { root_index: 3, int_val: 5 },
            'f#': { root_index: 3, int_val: 6 },
            'f##': { root_index: 3, int_val: 7 },
            fb: { root_index: 3, int_val: 4 },
            fbb: { root_index: 3, int_val: 3 },
            g: { root_index: 4, int_val: 7 },
            gn: { root_index: 4, int_val: 7 },
            'g#': { root_index: 4, int_val: 8 },
            'g##': { root_index: 4, int_val: 9 },
            gb: { root_index: 4, int_val: 6 },
            gbb: { root_index: 4, int_val: 5 },
            a: { root_index: 5, int_val: 9 },
            an: { root_index: 5, int_val: 9 },
            'a#': { root_index: 5, int_val: 10 },
            'a##': { root_index: 5, int_val: 11 },
            ab: { root_index: 5, int_val: 8 },
            abb: { root_index: 5, int_val: 7 },
            b: { root_index: 6, int_val: 11 },
            bn: { root_index: 6, int_val: 11 },
            'b#': { root_index: 6, int_val: 0 },
            'b##': { root_index: 6, int_val: 1 },
            bb: { root_index: 6, int_val: 10 },
            bbb: { root_index: 6, int_val: 9 },
        };
    }
    static accidentalDisplay(pitch, keySignature, duration, accArray) {
        var _a, _b;
        const keyAccidental = SmoMusic.getAccidentalForKeySignature(pitch, keySignature);
        const pitchOctave = pitch.letter + '-' + pitch.octave;
        const accidentals = accArray.filter((ar) => ar.duration < duration && ar.pitches[pitchOctave]);
        const acLen = accidentals.length;
        const declared = acLen > 0 ?
            accidentals[acLen - 1].pitches[pitchOctave].pitch.accidental : keyAccidental;
        if ((declared !== pitch.accidental
            || pitch.cautionary)) {
            const rv = {
                symbol: pitch.accidental,
                courtesy: (_a = pitch.cautionary) !== null && _a !== void 0 ? _a : false,
                forced: (_b = pitch.forced) !== null && _b !== void 0 ? _b : false
            };
            return rv;
        }
        return null;
    }
    /**
     * return Vex canonical note enharmonic - e.g. Bb to A#
     * */
    static vexToCannonical(vexKey) {
        vexKey = SmoMusic.stripVexOctave(vexKey);
        return (0,_common_vex__WEBPACK_IMPORTED_MODULE_1__.vexCanonicalNotes)()[SmoMusic.noteValues[vexKey].int_val];
    }
    /**
    * A note array (sans octave) in key-signature order
    */
    static get circleOfFifths() {
        return [{
                letter: 'c',
                accidental: 'n'
            }, {
                letter: 'g',
                accidental: 'n'
            }, {
                letter: 'd',
                accidental: 'n'
            }, {
                letter: 'a',
                accidental: 'n'
            }, {
                letter: 'e',
                accidental: 'n'
            }, {
                letter: 'b',
                accidental: 'n'
            }, {
                letter: 'f',
                accidental: '#'
            }, {
                letter: 'c',
                accidental: '#'
            }, {
                letter: 'a',
                accidental: 'b'
            }, {
                letter: 'e',
                accidental: 'b'
            }, {
                letter: 'b',
                accidental: 'b'
            }, {
                letter: 'f',
                accidental: 'n'
            }
        ];
    }
    /**
     * gives the index into circle-of-fifths array for a pitch, considering enharmonics.
     * */
    static circleOfFifthsIndex(smoPitch) {
        const en1 = SmoMusic.vexToSmoKey(SmoMusic.getEnharmonic(SmoMusic.pitchToVexKey(smoPitch)));
        const en2 = SmoMusic.vexToSmoKey(SmoMusic.getEnharmonic(SmoMusic.getEnharmonic(SmoMusic.pitchToVexKey(smoPitch))));
        const ix = SmoMusic.circleOfFifths.findIndex((el) => (el.letter === smoPitch.letter && el.accidental === smoPitch.accidental) ||
            (el.letter === en1.letter && el.accidental === en1.accidental) ||
            (el.letter === en2.letter && el.accidental === en2.accidental));
        return ix;
    }
    /**
     * Get pitch to the right in circle of fifths
     * */
    static addSharp(smoPitch) {
        const rv = SmoMusic.circleOfFifths[(SmoMusic.circleOfFifthsIndex(smoPitch) + 1) % SmoMusic.circleOfFifths.length];
        return { letter: rv.letter, accidental: rv.accidental, octave: smoPitch.octave };
    }
    /**
     * Get pitch to the left in circle of fifths
     */
    static addFlat(smoPitch) {
        const rv = SmoMusic.circleOfFifths[((SmoMusic.circleOfFifths.length - 1) + SmoMusic.circleOfFifthsIndex(smoPitch)) % SmoMusic.circleOfFifths.length];
        return { letter: rv.letter, accidental: rv.accidental, octave: smoPitch.octave };
    }
    /**
     * Add @param {number} - sharps
     */
    static addSharps(smoPitch, distance) {
        let i = 0;
        let rv = {};
        if (distance === 0) {
            return JSON.parse(JSON.stringify(smoPitch));
        }
        rv = SmoMusic.addSharp(smoPitch);
        for (i = 1; i < distance; ++i) {
            rv = SmoMusic.addSharp(rv);
        }
        const octaveAdj = SmoMusic.letterPitchIndex[smoPitch.letter] > SmoMusic.letterPitchIndex[rv.letter] ? 1 : 0;
        rv.octave += octaveAdj;
        return rv;
    }
    /**
     * Add *distance* sharps/flats to given key
     */
    static addFlats(smoPitch, distance) {
        let i = 0;
        let rv = {};
        if (distance === 0) {
            return JSON.parse(JSON.stringify(smoPitch));
        }
        rv = SmoMusic.addFlat(smoPitch);
        for (i = 1; i < distance; ++i) {
            rv = SmoMusic.addFlat(rv);
        }
        const octaveAdj = SmoMusic.letterPitchIndex[smoPitch.letter] > SmoMusic.letterPitchIndex[rv.letter] ? 1 : 0;
        rv.octave += octaveAdj;
        return rv;
    }
    /**
     * Convert array of smo pitches to vex keys, with adjustment for transpose and notehead
     * @param pitchAr
     * @param keyOffset
     * @param noteHead
     * @returns {string[]} - array of vex keyx
     */
    static smoPitchesToVexKeys(pitchAr, keyOffset, noteHead) {
        const noopFunc = keyOffset > 0 ? 'addSharps' : 'addFlats';
        const rv = [];
        pitchAr.forEach((pitch) => {
            rv.push(SmoMusic.pitchToVexKey(SmoMusic[noopFunc](pitch, keyOffset), noteHead));
        });
        return rv;
    }
    static get scaleIntervals() {
        return {
            up: [2, 2, 1, 2, 2, 2, 1],
            down: [1, 2, 2, 2, 1, 2, 2]
        };
    }
    /**
     * return true if the pitches match, except for octave.
     * `{ letter: 'a', accidental: '#'}, { letter: 'a', accidental: '#'}` returns true
     * `{ letter: 'a', accidental: '#'}, { letter: 'b', accidental: 'b'}` returns false
     * */
    static smoScalePitchMatch(p1, p2) {
        const pp1 = JSON.parse(JSON.stringify(p1));
        const pp2 = JSON.parse(JSON.stringify(p2));
        pp1.octave = 0;
        pp2.octave = 0;
        return SmoMusic.smoPitchToInt(pp1) === SmoMusic.smoPitchToInt(pp2);
    }
    /**
     * Return the number of ledger lines based on the pitch and clef
     * @param clef
     * @param pitch
     * @returns number where 0 is the top staff line
     */
    static pitchToLedgerLine(clef, pitch) {
        // return the distance from the top ledger line, as 0.5 per line/space
        return (0,_common_vex__WEBPACK_IMPORTED_MODULE_1__.pitchToLedgerLine)(SmoMusic.pitchToVexKey(pitch, clef), clef);
    }
    /**
     * Return the number of ledger lines based on the pitch and clef
     * @param clef
     * @param pitch
     * @returns number where 0 is the top staff line
     */
    static pitchToStaffLine(clef, pitch) {
        // return the distance from the top ledger line, as 0.5 per line/space
        return VF.keyProperties(SmoMusic.pitchToVexKey(pitch, clef)).line;
    }
    /**
     * return flag state (up === 1 or down === 2) based on pitch and clef if auto
     * */
    static flagStateFromNote(clef, note) {
        let fs = note.flagState;
        if (fs === _note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.auto) {
            fs = SmoMusic.pitchToStaffLine(clef, note.pitches[0])
                >= 3 ? _note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.down : _note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.up;
        }
        return fs;
    }
    /**
     * The purpose of this table is to keep consistent enharmonic spelling when transposing
     * instruments in different keys.  It is not theoritically complete, e.g.
     * there is no reason to distinguish between #5 used as a leading tone for vi- or
     * as an augmented chord, the spelling is the same.  It does not show a preference
     * for notes that don't have an obvious purpose in the key, e.g. it does not try to compute the
     * equivalent to 'e#' in the key of 'c'.  The computation of the 'intended key area' is
     * beyond the scope of a music program to interpret.
     */
    static get enharmonicRoles() {
        const tbl = { 'c': [
                { letter: 'c', accidental: 'n', role: 'tonic' },
                { letter: 'c', accidental: '#', role: '7/2' },
                { letter: 'd', accidental: 'b', role: 'b9' },
                { letter: 'd', accidental: 'n', role: '2' },
                { letter: 'd', accidental: '#', role: '7/3' },
                { letter: 'e', accidental: 'b', role: 'b3' },
                { letter: 'e', accidental: 'n', role: '3' },
                { letter: 'f', accidental: 'n', role: '4' },
                { letter: 'f', accidental: '#', role: '#11' },
                { letter: 'g', accidental: 'b', role: 'b5' },
                { letter: 'g', accidental: 'n', role: '5' },
                { letter: 'g', accidental: '#', role: '7/6' },
                { letter: 'a', accidental: 'b', role: 'b6' },
                { letter: 'a', accidental: 'n', role: '6' },
                { letter: 'a', accidental: '#', role: '7/7' },
                { letter: 'b', accidental: 'b', role: 'b7' },
                { letter: 'b', accidental: 'n', role: '7' }
            ], 'c#': [
                { letter: 'c', accidental: '#', role: 'tonic' },
                { letter: 'c', accidental: '##', role: '7/2' },
                { letter: 'd', accidental: 'n', role: 'b9' },
                { letter: 'd', accidental: '#', role: '2' },
                { letter: 'd', accidental: '##', role: '#2' },
                { letter: 'f', accidental: 'b', role: 'b3' },
                { letter: 'e', accidental: '#', role: '3' },
                { letter: 'f', accidental: '#', role: '4' },
                { letter: 'f', accidental: '##', role: '#11' },
                { letter: 'g', accidental: 'n', role: 'b5' },
                { letter: 'g', accidental: '#', role: '5' },
                { letter: 'g', accidental: '##', role: '7/6' },
                { letter: 'a', accidental: 'n', role: 'b6' },
                { letter: 'a', accidental: '#', role: '6' },
                { letter: 'a', accidental: '##', role: '7/7' },
                { letter: 'b', accidental: 'n', role: 'b7' },
                { letter: 'b', accidental: '#', role: '7' }
            ], 'db': [
                { letter: 'd', accidental: 'b', role: 'tonic' },
                { letter: 'd', accidental: 'n', role: '7/2' },
                { letter: 'e', accidental: 'bb', role: 'b9' },
                { letter: 'e', accidental: 'b', role: '2' },
                { letter: 'e', accidental: 'n', role: '7/3' },
                { letter: 'f', accidental: 'b', role: 'b3' },
                { letter: 'f', accidental: 'n', role: '3' },
                { letter: 'g', accidental: 'b', role: '4' },
                { letter: 'g', accidental: 'n', role: '#11' },
                { letter: 'a', accidental: 'bb', role: 'b5' },
                { letter: 'a', accidental: 'b', role: '5' },
                { letter: 'a', accidental: 'n', role: '7/6' },
                { letter: 'b', accidental: 'bb', role: 'b6' },
                { letter: 'b', accidental: 'b', role: '6' },
                { letter: 'b', accidental: 'n', role: '7/7' },
                { letter: 'c', accidental: 'b', role: 'b7' },
                { letter: 'b', accidental: '#', role: '7' }
            ], 'd': [
                { letter: 'd', accidental: 'n', role: 'tonic' },
                { letter: 'd', accidental: '#', role: '7/2' },
                { letter: 'e', accidental: 'b', role: 'b9' },
                { letter: 'e', accidental: 'n', role: '2' },
                { letter: 'e', accidental: '#', role: '7/3' },
                { letter: 'f', accidental: 'n', role: 'b3' },
                { letter: 'f', accidental: '#', role: '3' },
                { letter: 'g', accidental: 'n', role: '4' },
                { letter: 'g', accidental: '#', role: '#11' },
                { letter: 'a', accidental: 'b', role: 'b5' },
                { letter: 'a', accidental: 'n', role: '5' },
                { letter: 'a', accidental: '#', role: '7/6' },
                { letter: 'b', accidental: 'b', role: 'b6' },
                { letter: 'b', accidental: 'n', role: '6' },
                { letter: 'b', accidental: '#', role: '7/7' },
                { letter: 'c', accidental: 'n', role: 'b7' },
                { letter: 'c', accidental: '#', role: '7' }
            ], 'eb': [
                { letter: 'e', accidental: 'b', role: 'tonic' },
                { letter: 'e', accidental: 'n', role: '7/2' },
                { letter: 'f', accidental: 'b', role: 'b9' },
                { letter: 'f', accidental: 'n', role: '2' },
                { letter: 'f', accidental: '#', role: '7/3' },
                { letter: 'g', accidental: 'b', role: 'b3' },
                { letter: 'g', accidental: 'n', role: '3' },
                { letter: 'a', accidental: 'b', role: '4' },
                { letter: 'a', accidental: 'n', role: '#11' },
                { letter: 'b', accidental: 'bb', role: 'b5' },
                { letter: 'b', accidental: 'b', role: '5' },
                { letter: 'b', accidental: 'n', role: '7/6' },
                { letter: 'c', accidental: 'b', role: '6' },
                { letter: 'c', accidental: 'n', role: '6' },
                { letter: 'c', accidental: '#', role: '7/7' },
                { letter: 'd', accidental: 'b', role: 'b7' },
                { letter: 'd', accidental: 'n', role: '7' }
            ], 'e': [
                { letter: 'e', accidental: 'n', role: 'tonic' },
                { letter: 'e', accidental: '#', role: '7/2' },
                { letter: 'f', accidental: 'n', role: 'b9' },
                { letter: 'f', accidental: '#', role: '2' },
                { letter: 'f', accidental: '##', role: '7/3' },
                { letter: 'g', accidental: 'n', role: 'b3' },
                { letter: 'g', accidental: '#', role: '3' },
                { letter: 'a', accidental: 'n', role: '4' },
                { letter: 'a', accidental: '#', role: '#11' },
                { letter: 'b', accidental: 'b', role: 'b5' },
                { letter: 'b', accidental: 'n', role: '5' },
                { letter: 'b', accidental: '#', role: '7/6' },
                { letter: 'c', accidental: 'n', role: 'b6' },
                { letter: 'c', accidental: '#', role: '6' },
                { letter: 'c', accidental: '##', role: '7/7' },
                { letter: 'd', accidental: 'n', role: 'b7' },
                { letter: 'd', accidental: '#', role: '7' }
            ], 'f': [
                { letter: 'f', accidental: 'n', role: 'tonic' },
                { letter: 'f', accidental: '#', role: '7/2' },
                { letter: 'g', accidental: 'b', role: 'b9' },
                { letter: 'g', accidental: 'n', role: '2' },
                { letter: 'g', accidental: '#', role: '7/3' },
                { letter: 'a', accidental: 'b', role: 'b3' },
                { letter: 'a', accidental: 'n', role: '3' },
                { letter: 'b', accidental: 'b', role: '4' },
                { letter: 'b', accidental: 'n', role: '#11' },
                { letter: 'c', accidental: 'b', role: 'b5' },
                { letter: 'c', accidental: 'n', role: '5' },
                { letter: 'c', accidental: '#', role: '7/6' },
                { letter: 'd', accidental: 'b', role: 'b6' },
                { letter: 'd', accidental: 'n', role: '6' },
                { letter: 'd', accidental: '#', role: '7/7' },
                { letter: 'e', accidental: 'b', role: 'b7' },
                { letter: 'e', accidental: 'n', role: '7' }
            ], 'f#': [
                { letter: 'f', accidental: '#', role: 'tonic' },
                { letter: 'f', accidental: '##', role: '7/2' },
                { letter: 'g', accidental: 'n', role: 'b9' },
                { letter: 'g', accidental: '#', role: '2' },
                { letter: 'g', accidental: '##', role: '#2' },
                { letter: 'a', accidental: 'n', role: 'b3' },
                { letter: 'a', accidental: '#', role: '3' },
                { letter: 'b', accidental: 'n', role: '4' },
                { letter: 'b', accidental: '#', role: '#11' },
                { letter: 'c', accidental: 'n', role: 'b5' },
                { letter: 'c', accidental: '#', role: '5' },
                { letter: 'c', accidental: '##', role: '7/6' },
                { letter: 'd', accidental: 'n', role: 'b6' },
                { letter: 'd', accidental: '#', role: '6' },
                { letter: 'd', accidental: '##', role: '7/7' },
                { letter: 'e', accidental: 'n', role: 'b7' },
                { letter: 'e', accidental: '#', role: '7' }
            ], 'gb': [
                { letter: 'g', accidental: 'b', role: 'tonic' },
                { letter: 'g', accidental: 'n', role: '7/2' },
                { letter: 'a', accidental: 'bb', role: 'b9' },
                { letter: 'a', accidental: 'b', role: '2' },
                { letter: 'a', accidental: 'n', role: '7/3' },
                { letter: 'a', accidental: 'bb', role: 'b3' },
                { letter: 'b', accidental: 'b', role: '3' },
                { letter: 'c', accidental: 'b', role: '4' },
                { letter: 'c', accidental: 'n', role: '#11' },
                { letter: 'd', accidental: 'bb', role: 'b5' },
                { letter: 'd', accidental: 'b', role: '5' },
                { letter: 'd', accidental: 'n', role: '7/6' },
                { letter: 'e', accidental: 'bb', role: 'b6' },
                { letter: 'e', accidental: 'b', role: '6' },
                { letter: 'e', accidental: 'n', role: '7/7' },
                { letter: 'f', accidental: 'b', role: 'b7' },
                { letter: 'f', accidental: 'n', role: '7' }
            ], 'g': [
                { letter: 'g', accidental: 'n', role: 'tonic' },
                { letter: 'g', accidental: '#', role: '7/2' },
                { letter: 'g', accidental: 'b', role: 'b9' },
                { letter: 'a', accidental: 'n', role: '2' },
                { letter: 'a', accidental: '#', role: '7/3' },
                { letter: 'b', accidental: 'b', role: 'b3' },
                { letter: 'b', accidental: 'n', role: '3' },
                { letter: 'c', accidental: 'n', role: '4' },
                { letter: 'c', accidental: '#', role: '#11' },
                { letter: 'd', accidental: 'b', role: 'b5' },
                { letter: 'd', accidental: 'n', role: '5' },
                { letter: 'd', accidental: '#', role: '7/6' },
                { letter: 'e', accidental: 'b', role: 'b6' },
                { letter: 'e', accidental: 'n', role: '6' },
                { letter: 'e', accidental: '#', role: '7/7' },
                { letter: 'f', accidental: 'n', role: 'b7' },
                { letter: 'f', accidental: '#', role: '7' }
            ], 'ab': [
                { letter: 'a', accidental: 'b', role: 'tonic' },
                { letter: 'a', accidental: 'n', role: '7/2' },
                { letter: 'b', accidental: 'bb', role: 'b9' },
                { letter: 'b', accidental: 'b', role: '2' },
                { letter: 'b', accidental: 'n', role: '7/3' },
                { letter: 'b', accidental: 'bb', role: 'b3' },
                { letter: 'c', accidental: 'n', role: '3' },
                { letter: 'd', accidental: 'b', role: '4' },
                { letter: 'd', accidental: 'n', role: '#11' },
                { letter: 'e', accidental: 'bb', role: 'b5' },
                { letter: 'e', accidental: 'b', role: '5' },
                { letter: 'e', accidental: 'n', role: '7/6' },
                { letter: 'f', accidental: 'b', role: 'b6' },
                { letter: 'f', accidental: 'n', role: '6' },
                { letter: 'f', accidental: '#', role: '7/7' },
                { letter: 'g', accidental: 'b', role: 'b7' },
                { letter: 'g', accidental: 'n', role: '7' }
            ], 'a': [
                { letter: 'a', accidental: 'n', role: 'tonic' },
                { letter: 'a', accidental: '#', role: '7/2' },
                { letter: 'b', accidental: 'b', role: 'b9' },
                { letter: 'b', accidental: 'n', role: '2' },
                { letter: 'b', accidental: '#', role: '7/3' },
                { letter: 'c', accidental: 'n', role: 'b3' },
                { letter: 'c', accidental: '#', role: '3' },
                { letter: 'd', accidental: 'n', role: '4' },
                { letter: 'd', accidental: '#', role: '#11' },
                { letter: 'e', accidental: 'b', role: 'b5' },
                { letter: 'e', accidental: 'n', role: '5' },
                { letter: 'e', accidental: '#', role: '7/6' },
                { letter: 'f', accidental: 'n', role: 'b6' },
                { letter: 'f', accidental: '#', role: '6' },
                { letter: 'f', accidental: '##', role: '7/7' },
                { letter: 'g', accidental: 'n', role: 'b7' },
                { letter: 'g', accidental: '#', role: '7' }
            ], 'bb': [
                { letter: 'b', accidental: 'b', role: 'tonic' },
                { letter: 'b', accidental: 'n', role: '7/2' },
                { letter: 'c', accidental: 'b', role: 'b9' },
                { letter: 'c', accidental: 'n', role: '2' },
                { letter: 'c', accidental: '#', role: '7/3' },
                { letter: 'd', accidental: 'b', role: 'b3' },
                { letter: 'd', accidental: 'n', role: '3' },
                { letter: 'e', accidental: 'b', role: '4' },
                { letter: 'e', accidental: 'n', role: '#11' },
                { letter: 'f', accidental: 'b', role: 'b5' },
                { letter: 'f', accidental: 'n', role: '5' },
                { letter: 'f', accidental: '#', role: '7/6' },
                { letter: 'g', accidental: 'b', role: 'b6' },
                { letter: 'g', accidental: 'n', role: '6' },
                { letter: 'g', accidental: '#', role: '7/7' },
                { letter: 'a', accidental: 'b', role: 'b7' },
                { letter: 'a', accidental: 'n', role: '7' }
            ], 'b': [
                { letter: 'b', accidental: 'n', role: 'tonic' },
                { letter: 'b', accidental: '#', role: '7/2' },
                { letter: 'c', accidental: 'n', role: 'b9' },
                { letter: 'c', accidental: '#', role: '2' },
                { letter: 'c', accidental: '##', role: '7/3' },
                { letter: 'd', accidental: 'n', role: 'b3' },
                { letter: 'd', accidental: '#', role: '3' },
                { letter: 'e', accidental: 'n', role: '4' },
                { letter: 'e', accidental: '#', role: '#11' },
                { letter: 'f', accidental: 'n', role: 'b5' },
                { letter: 'f', accidental: '#', role: '5' },
                { letter: 'f', accidental: '##', role: '7/6' },
                { letter: 'g', accidental: 'n', role: 'b6' },
                { letter: 'g', accidental: '#', role: '6' },
                { letter: 'g', accidental: '##', role: '7/7' },
                { letter: 'a', accidental: 'n', role: 'b7' },
                { letter: 'a', accidental: '#', role: '7' }
            ] };
        return tbl;
    }
    /**
     * Find the harmonic role for the given pitch
     * @param smoPitch
     * @param keySignature
     * @returns
     */
    static findRoleOfPitch(smoPitch, keySignature) {
        const keyRoles = SmoMusic.enharmonicRoles[keySignature];
        if (!keyRoles) {
            return '';
        }
        const keyRole = keyRoles.find((x) => x.letter === smoPitch.letter.toLocaleLowerCase() && x.accidental === smoPitch.accidental.toLowerCase());
        if (!keyRole) {
            return '';
        }
        return keyRole.role;
    }
    /**
     * Given a harmonic role, find the pitch that matches it.  If there is no one, just
     * return the raw transposition
     * @param role
     * @param keySignature
     * @param transposedPitch
     * @returns
     */
    static findPitchForRole(role, keySignature, transposedPitch) {
        const keyRoles = SmoMusic.enharmonicRoles[keySignature];
        if (!keyRoles) {
            return JSON.parse(JSON.stringify(transposedPitch));
        }
        const keyRole = keyRoles.find((x) => x.role === role);
        if (!keyRole) {
            return JSON.parse(JSON.stringify(transposedPitch));
        }
        let octave = transposedPitch.octave;
        if ((transposedPitch.letter === 'a' || transposedPitch.letter === 'b') && keyRole.letter === 'c') {
            octave += 1;
        }
        return { letter: keyRole.letter, accidental: keyRole.accidental, octave };
    }
    static rawTranspose(pitch, offset) {
        return SmoMusic.smoIntToPitch(SmoMusic.smoPitchToInt(pitch) + offset);
    }
    static transposePitchForKey(pitch, originalKey, destinationKey, offset) {
        const transposedPitch = SmoMusic.getEnharmonicInKey(SmoMusic.rawTranspose(pitch, offset), destinationKey);
        const role = SmoMusic.findRoleOfPitch(pitch, originalKey);
        if (role.length) {
            return SmoMusic.findPitchForRole(role, destinationKey, transposedPitch);
        }
        return transposedPitch;
    }
    /**
     * convert from SMO to VEX format so we can use the VexFlow tables and methods
     * example:
     *   `{letter,octave,accidental}` object to vexKey string `'f#'`
     * */
    static _pitchToVexKey(smoPitch) {
        // Convert to vex keys, where f# is a string like 'f#'.
        let vexKey = smoPitch.letter.toLowerCase();
        if (smoPitch.accidental.length === 0) {
            vexKey = vexKey + 'n';
        }
        else {
            vexKey = vexKey + smoPitch.accidental;
        }
        if (smoPitch.octave) {
            vexKey = vexKey + '/' + smoPitch.octave;
        }
        return vexKey;
    }
    /**
     * convert smo pitch to easy score (vex) format.  Mostly used
     * for debugging and generating Vex test cases
     * @param smoPitch
     * @returns - a string that can be converted to a VEX routine, with some difficulty
     */
    static pitchToEasyScore(smoPitch) {
        let vexKey = smoPitch.letter.toLowerCase();
        vexKey = vexKey + smoPitch.accidental;
        return vexKey + smoPitch.octave;
    }
    /**
     * convert a pitch to a format expected by the MIDI writer
     * @param smoPitch pitch to convert
     * @returns pitch in MIDI string format.
     */
    static smoPitchToMidiString(smoPitch) {
        const midiPitch = SmoMusic.smoIntToPitch(SmoMusic.smoPitchToInt(smoPitch));
        let rv = midiPitch.letter.toUpperCase();
        if (midiPitch.accidental !== 'n') {
            rv += midiPitch.accidental;
        }
        rv += midiPitch.octave;
        return rv;
    }
    static smoPitchesToMidiStrings(smoPitches) {
        const rv = [];
        smoPitches.forEach((pitch) => {
            rv.push(SmoMusic.smoPitchToMidiString(pitch));
        });
        return rv;
    }
    /**
     * filled in from the midi routines borrowed from
     * // https://github.com/grimmdude/MidiWriterJS
     * @param midiPitch pitch from MIDIwrite
     * @returns SMO pitch
     */
    static midiPitchToSmoPitch(midiPitch) {
        const smoPitch = {};
        smoPitch.letter = midiPitch[0].toLowerCase();
        if (isNaN(parseInt(midiPitch[1], 10))) {
            smoPitch.accidental = midiPitch[1];
            smoPitch.octave = parseInt(midiPitch[2], 10);
        }
        else {
            smoPitch.accidental = 'n';
            smoPitch.octave = parseInt(midiPitch[1], 10);
        }
        return smoPitch;
    }
    static midiPitchToMidiNumber(midiPitch) {
        return SmoMusic.smoPitchToInt(SmoMusic.midiPitchToSmoPitch(midiPitch)) + 12;
    }
    static pitchToVexKey(smoPitch, head = null) {
        if (!head) {
            return SmoMusic._pitchToVexKey(smoPitch);
        }
        return SmoMusic._pitchToVexKey(smoPitch) + '/' + head;
    }
    /**
     *  Turns vex pitch string into smo pitch, e.g.
     * `cn/4 => {'c','n',4}`
     * @param vexPitch
     * @returns SmoPitch
     * */
    static vexToSmoPitch(vexPitch) {
        let octave = 0;
        const po = vexPitch.split('/');
        const rv = SmoMusic.vexToSmoKey(po[0]);
        if (po.length > 1) {
            octave = parseInt(po[1], 10);
            octave = isNaN(octave) ? 4 : octave;
        }
        else {
            octave = 4;
        }
        rv.octave = octave;
        return rv;
    }
    /**
     * Convert to smo pitch, without octave
     * ``['f#'] => [{letter:'f',accidental:'#'}]``
     * */
    static vexToSmoKey(vexPitch) {
        const accidental = vexPitch.length < 2 ? 'n' : vexPitch.substring(1, vexPitch.length);
        const pp = vexPitch.split('/')[0];
        return {
            letter: pp[0].toLowerCase(),
            accidental
        };
    }
    // {letter:'f',accidental:'#'} => [f#/
    static smoPitchesToVex(pitchAr) {
        var rv = [];
        pitchAr.forEach((p) => {
            rv.push(SmoMusic.pitchToVexKey(p));
        });
        return rv;
    }
    /**
     * @param vexKey - pitch in vex format
     * @returns pitch in vex format, sans octave
     */
    static stripVexOctave(vexKey) {
        if (vexKey.indexOf('/') > 0) {
            vexKey = vexKey.substring(0, vexKey.indexOf('/'));
        }
        return vexKey;
    }
    /**
     * compare pitches for frequency match
     */
    static pitchArraysMatch(ar1, ar2) {
        let matches = 0;
        const ir1 = SmoMusic.smoPitchesToIntArray(ar1);
        const ir2 = SmoMusic.smoPitchesToIntArray(ar2);
        if (ir1.length !== ir2.length) {
            return false;
        }
        ir1.forEach((num) => {
            if (ir2.indexOf(num) >= 0) {
                matches += 1;
            }
        });
        return matches === ir1.length;
    }
    /**
     * convert pitches to integer pitch representations
     * by calling smoPitchToInt
     * @param pitches Smo pitches
     * @returns
     */
    static smoPitchesToIntArray(pitches) {
        const rv = [];
        pitches.forEach((pitch) => {
            rv.push(SmoMusic.smoPitchToInt(pitch));
        });
        return rv.sort();
    }
    /**
     * convert a pitch to an integer value, used for transpositions, intervals, etc.
     * @param pitch
     * @returns
     */
    static smoPitchToInt(pitch) {
        if (typeof (pitch.octave) === 'undefined') {
            pitch.octave = 0;
        }
        const intVal = SmoMusic.noteValues[SmoMusic.stripVexOctave(SmoMusic.pitchToVexKey(pitch))].int_val;
        const octave = (pitch.letter === 'c' && pitch.accidental === 'b' && pitch.octave > 0) ?
            pitch.octave - 1 : pitch.octave;
        return octave * 12 + intVal;
    }
    /**
     * Convert a number to a SMO pitch
     * @param intValue - number of 1/2 steps from `c0`
     * @returns
     */
    static smoIntToPitch(intValue) {
        let octave = 0;
        let accidental = '';
        let noteKey = null;
        const letterInt = intValue >= 0 ? intValue % 12 :
            12 - (Math.abs(intValue) % 12);
        noteKey = (Object.keys(SmoMusic.noteValues).find((key) => SmoMusic.noteValues[key].int_val === letterInt && key.length === 1));
        if (!noteKey) {
            noteKey = (Object.keys(SmoMusic.noteValues).find((key) => SmoMusic.noteValues[key].int_val === letterInt && key.length === 2));
        }
        octave = Math.floor(intValue / 12);
        octave = octave >= 0 ? octave : 0;
        accidental = noteKey.substring(1, noteKey.length);
        // eslint-disable-next-line
        accidental = accidental ? accidental : 'n';
        return {
            letter: noteKey[0],
            accidental,
            octave
        };
    }
    static pitchKeyToPitch(pk) {
        return { letter: pk.letter, accidental: pk.accidental, octave: 1 };
    }
    /**
     * Consider instrument transpose when setting key -
     * e.g. Eb for Bb instruments is F. Note:  return value is not
     * a valid VEX key signature.  Use vexKeySignatureTranspose for that.
     */
    static vexKeySigWithOffset(vexKey, offset) {
        const pk = SmoMusic.vexToSmoKey(vexKey);
        const pi = SmoMusic.smoPitchToInt(SmoMusic.pitchKeyToPitch(pk)) + offset;
        let newKey = SmoMusic.toValidKeySignature(SmoMusic.pitchToVexKey(SmoMusic.smoIntToPitch(pi)));
        // handle equivalent ks
        if (newKey === 'c#' && vexKey.indexOf('b') >= 0) {
            newKey = 'db';
        }
        return newKey;
    }
    /**
     * return a map of enharmonics for choosing or cycling.  notes are in vexKey form.
     */
    static get enharmonics() {
        let i = 0;
        const rv = {};
        const keys = Object.keys(SmoMusic.noteValues);
        for (i = 0; i < keys.length; ++i) {
            const key = keys[i];
            const int_val = SmoMusic.noteValues[key].int_val;
            if (typeof (rv[int_val.toString()]) === 'undefined') {
                rv[int_val.toString()] = [];
            }
            // only consider natural note 1 time.  It is in the list twice for some reason.
            if (key.indexOf('n') === -1) {
                rv[int_val.toString()].push(key);
            }
        }
        return rv;
    }
    /**
     * Get enharmonic equivalent of given notes for cycle/choose
     * @param vexKey
     * @returns
     */
    static getEnharmonics(vexKey) {
        const proto = SmoMusic.stripVexOctave(vexKey);
        const rv = [];
        let ne = SmoMusic.getEnharmonic(vexKey);
        rv.push(proto);
        while (ne[0] !== proto[0]) {
            rv.push(ne);
            ne = SmoMusic.getEnharmonic(ne);
        }
        return rv;
    }
    /**
     * return the next note from the cycle in `getEnharmonics`
     */
    static getEnharmonic(vexKey) {
        vexKey = SmoMusic.stripVexOctave(vexKey);
        const intVal = SmoMusic.noteValues[vexKey.toLowerCase()].int_val;
        const ar = SmoMusic.enharmonics[intVal.toString()];
        const len = ar.length;
        // 'n' for natural in key but not in value
        vexKey = vexKey.length > 1 && vexKey[1] === 'n' ? vexKey[0] : vexKey;
        const ix = ar.indexOf(vexKey);
        vexKey = ar[(ix + 1) % len];
        return vexKey;
    }
    /**
     * Return a pitch a diatonic step away from SmoPitch in vexKey
     * @param smoPitch
     * @param vexKey
     * @param direction
     * @returns
     */
    static closestTonic(smoPitch, vexKey, direction) {
        direction = Math.sign(direction) < 0 ? -1 : 1;
        const tonic = SmoMusic.vexToSmoKey(vexKey);
        const rv = SmoMusic.pitchKeyToPitch(tonic);
        rv.octave = smoPitch.octave;
        const iix = SmoMusic.smoPitchToInt(smoPitch);
        const smint = SmoMusic.smoPitchToInt(rv);
        if (Math.sign(smint - iix) !== direction) {
            rv.octave += direction;
        }
        return rv;
    }
    // ### toValidKeySignature
    // When transposing, make sure key signature is valid, e.g. g# should be
    // Ab
    static toValidKeySignature(vexKey) {
        let strlen = 0;
        const map = { 'a#': 'bb', 'g#': 'ab', 'cb': 'b', 'd#': 'eb' };
        strlen = (vexKey.length > 2 ? 2 : vexKey.length);
        // Vex doesn't like 'n' in key signatures.
        if (strlen === 2 && vexKey[1].toLowerCase() === 'n') {
            strlen = 1;
        }
        const rv = vexKey.substr(0, strlen);
        if (map[rv.toLowerCase()]) {
            return map[rv.toLowerCase()];
        }
        return rv;
    }
    /**
     * When transposing, get the enharmonic that most closely fits the key
     * `getEnharmonicInKey` returns an alternate to the given pitch, or the same pitch.
     * `getKeyFriendlyEnharmonic` return a pitch for a given key, given the letter name only
     * @param smoPitch
     * @param keySignature
     * @returns
     */
    static getEnharmonicInKey(smoPitch, keySignature) {
        let match = false;
        let rv = '';
        if (typeof (smoPitch.octave) === 'undefined') {
            smoPitch.octave = 1;
        }
        const sharpKey = keySignature.indexOf('#') >= 0;
        const flatKey = keySignature.indexOf('b') >= 0;
        const ar = SmoMusic.getEnharmonics(SmoMusic.pitchToVexKey(smoPitch));
        rv = SmoMusic.stripVexOctave(SmoMusic.pitchToVexKey(smoPitch));
        const scaleMap = new VF.Music().createScaleMap(keySignature);
        ar.forEach((vexKey) => {
            if (vexKey.length === 1) {
                vexKey += 'n';
            }
            if (vexKey === scaleMap[vexKey[0]]) {
                rv = vexKey;
                match = true;
            }
            else if (!match) {
                // In the absence of a match of a key tone, we bias towards more
                // 'common', like Bb is more common than A#, esp. as a chord.  This maybe
                // just be my horn player bias towards flat keys
                if (vexKey === 'a#' && !sharpKey) {
                    rv = 'bb';
                }
                else if (vexKey === 'g#' && !sharpKey) {
                    rv = 'ab';
                }
                else if (vexKey === 'c#' && !sharpKey) {
                    rv = 'db';
                }
                else if (vexKey === 'd#' && !sharpKey) {
                    rv = 'eb';
                }
                else if (vexKey === 'f#' && flatKey) {
                    rv = 'gb';
                }
            }
        });
        const smoRv = SmoMusic.pitchKeyToPitch(SmoMusic.vexToSmoKey(rv));
        smoRv.octave = smoPitch.octave;
        const rvi = SmoMusic.smoPitchToInt(smoRv);
        const ori = SmoMusic.smoPitchToInt(smoPitch);
        // handle the case of c0 < b0, pitch-wise
        smoRv.octave += Math.sign(ori - rvi);
        return smoRv;
    }
    /**
     * fix the enharmonic to match the key, if possible
     * @example
     * `getKeyFriendlyEnharmonic('b','eb');  => returns 'bb'
     * return vex string
     * `getEnharmonicInKey` returns an alternate to the given pitch, or the same pitch.
     * `getKeyFriendlyEnharmonic` return a pitch for a given key, given the letter name only
     */
    static getKeyFriendlyEnharmonic(letter, keySignature) {
        let rv = letter;
        let i = 0;
        const muse = new VF.Music();
        const scale = Object.values(muse.createScaleMap(keySignature));
        let prop = SmoMusic.getEnharmonic(letter.toLowerCase());
        while (prop.toLowerCase() !== letter.toLowerCase()) {
            for (i = 0; i < scale.length; ++i) {
                const skey = scale[i];
                if ((skey[0] === prop && skey[1] === 'n') ||
                    (skey.toLowerCase() === prop.toLowerCase())) {
                    rv = skey;
                    break;
                }
            }
            prop = (prop[1] === 'n' ? prop[0] : prop);
            prop = SmoMusic.getEnharmonic(prop);
        }
        return rv;
    }
    /**
    // given a letter pitch (a,b,c etc.), and a key signature, return the actual note
    // that you get without accidentals
    //   `SmoMusic.getKeySignatureKey('F','G'); // returns f#`
     * @param letter
     * @param keySignature
     * @returns
     */
    static getKeySignatureKey(letter, keySignature) {
        const km = new VF.KeyManager(keySignature);
        return km.scaleMap[letter];
    }
    static getAccidentalForKeySignature(smoPitch, keySignature) {
        const vexKey = SmoMusic.getKeySignatureKey(smoPitch.letter, keySignature);
        return vexKey.length === 1 ? 'n' : vexKey.substr(1, vexKey.length - 1);
    }
    // ### isPitchInKeySignature
    // Return true if the pitch is not an accidental in the give key, e.g.
    // f# in 'g' or c in 'Bb'
    static isPitchInKeySignature(smoPitch, keySignature) {
        const vexKey = SmoMusic.getKeySignatureKey(smoPitch.letter, keySignature);
        return (vexKey.length === 1 && smoPitch.accidental === 'n' ||
            (vexKey[1] === smoPitch.accidental));
    }
    // ### getIntervalInKey
    // give a pitch and a key signature, return another pitch at the given
    // diatonic interval.  Similar to getKeyOffset but diatonic.
    static getIntervalInKey(pitch, keySignature, interval) {
        let scaleIx = 0;
        let diatonicIx = 0;
        if (interval === 0) {
            return JSON.parse(JSON.stringify(pitch));
        }
        const delta = interval > 0 ? 1 : -1;
        const inv = -1 * delta;
        const tonic = SmoMusic.closestTonic(pitch, keySignature, inv);
        const intervals = delta > 0 ? SmoMusic.scaleIntervals.up : SmoMusic.scaleIntervals.down;
        const pitchInt = SmoMusic.smoPitchToInt(pitch);
        let nkey = tonic;
        let nkeyInt = SmoMusic.smoPitchToInt(nkey);
        while (Math.sign(nkeyInt - pitchInt) !== delta && Math.sign(nkeyInt - pitchInt) !== 0) {
            nkey = SmoMusic.smoIntToPitch(SmoMusic.smoPitchToInt(nkey) + delta * intervals[scaleIx]);
            scaleIx = (scaleIx + 1) % 7;
            nkeyInt = SmoMusic.smoPitchToInt(nkey);
        }
        while (diatonicIx !== interval) {
            nkey = SmoMusic.smoIntToPitch(SmoMusic.smoPitchToInt(nkey) + delta * intervals[scaleIx]);
            scaleIx = (scaleIx + 1) % 7;
            diatonicIx += delta;
        }
        return SmoMusic.getEnharmonicInKey(nkey, keySignature);
    }
    static getLetterNotePitch(prevPitch, letter, key) {
        const pitch = JSON.parse(JSON.stringify(prevPitch));
        pitch.letter = letter;
        // Make the key 'a' make 'Ab' in the key of Eb, for instance
        const vexKsKey = SmoMusic.getKeySignatureKey(letter, key);
        if (vexKsKey.length > 1) {
            pitch.accidental = vexKsKey[1];
        }
        else {
            pitch.accidental = 'n';
        }
        // make the octave of the new note as close to previous (or next) note as possible.
        const upv = ['bc', 'ac', 'bd', 'da', 'be', 'gc'];
        const downv = ['cb', 'ca', 'db', 'da', 'eb', 'cg'];
        const delta = prevPitch.letter + pitch.letter;
        if (upv.indexOf(delta) >= 0) {
            pitch.octave += 1;
        }
        if (downv.indexOf(delta) >= 0) {
            pitch.octave -= 1;
        }
        return pitch;
    }
    /**
   * Convenience function to create SmoNote[] from letters, with the correct accidental
   * for the key signature, given duration, etc
   * @param startPitch - the pitch used to calculate the octave of the new note
   * @param clef
   * @param keySignature
   * @param duration - vex duration
   * @param letters - string of PitchLetter
   * @returns
   */
    static notesFromLetters(startPitch, clef, keySignature, duration, letters) {
        const rv = [];
        let curPitch = startPitch;
        const ticks = SmoMusic.durationToTicks(duration);
        letters.split('').forEach((letter) => {
            curPitch = SmoMusic.getLetterNotePitch(curPitch, letter, keySignature);
            const defs = _note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.defaults;
            defs.ticks = { numerator: ticks, denominator: 1, remainder: 0 };
            defs.pitches = [curPitch];
            defs.clef = clef;
            rv.push(new _note__WEBPACK_IMPORTED_MODULE_0__.SmoNote(defs));
        });
        return rv;
    }
    /**
     * return the key signature, transposed a number of 1/2 steps in Vex key format
     * @param key start key
     * @param transposeIndex number of 1/2 steps
     * @returns {string} - vex key
     */
    static vexKeySignatureTranspose(key, transposeIndex) {
        let rv = key;
        if (key.length < 1) {
            return key;
        }
        rv = this.vexKeySigWithOffset(key, transposeIndex);
        if (rv.length === 1) {
            return rv[0].toUpperCase();
        }
        return rv[0].toUpperCase() + rv.substring(1);
        /* const pitch: Pitch = SmoMusic.pitchKeyToPitch(SmoMusic.vexToSmoKey(key));
        key = SmoMusic.smoPitchesToVexKeys([pitch], transposeIndex, null)[0];
        key = SmoMusic.stripVexOctave(key);
        key = key[0].toUpperCase() + key.substring(1, key.length);
        if (key.length > 1 && key[1] === 'n') {
          key = key[0];
        }
        return key;  */
    }
    static get frequencyMap() {
        return SmoAudioPitch.pitchFrequencyMap;
    }
    // ### get letterPitchIndex
    // Used to adjust octave when transposing.
    // Pitches are measured from c, so that b0 is higher than c0, c1 is 1 note higher etc.
    static get letterPitchIndex() {
        return {
            'c': 0,
            'd': 1,
            'e': 2,
            'f': 3,
            'g': 4,
            'a': 5,
            'b': 6
        };
    }
    /**
     * Indicate if a change from letter note 'one' to 'two' needs us to adjust the
     * octave due to the `SmoMusic.letterPitchIndex` (b0 is higher than c0)
     * */
    static letterChangedOctave(one, two) {
        const p1 = SmoMusic.letterPitchIndex[one];
        const p2 = SmoMusic.letterPitchIndex[two];
        if (p1 < p2 && p2 - p1 > 2) {
            return -1;
        }
        if (p1 > p2 && p1 - p2 > 2) {
            return 1;
        }
        return 0;
    }
    /**
     * Transpose a `Pitch` `offset` 1/2 steps
     * @param pitch
     * @param offset
     * @returns
     */
    static getKeyOffset(pitch, offset) {
        const canon = (0,_common_vex__WEBPACK_IMPORTED_MODULE_1__.vexCanonicalNotes)();
        // Convert to vex keys, where f# is a string like 'f#'.
        let vexKey = SmoMusic.pitchToVexKey(pitch);
        vexKey = SmoMusic.vexToCannonical(vexKey);
        const rootIndex = canon.indexOf(vexKey);
        let octave = pitch.octave;
        if (Math.abs(offset) >= 12) {
            const octaveOffset = Math.sign(offset) * Math.floor(Math.abs(offset) / 12);
            octave += octaveOffset;
            offset = offset - (12 * octaveOffset);
            if (offset < 0) {
                offset = 12 + offset;
            }
        }
        if (rootIndex + offset >= canon.length) {
            octave += 1;
        }
        if (rootIndex + offset < 0) {
            octave -= 1;
        }
        const rv = JSON.parse(JSON.stringify(pitch));
        const index = (rootIndex + canon.length + offset) % canon.length;
        vexKey = canon[index];
        if (vexKey.length > 1) {
            rv.accidental = vexKey.substring(1);
            vexKey = vexKey[0];
        }
        else {
            rv.accidental = '';
        }
        rv.letter = vexKey;
        rv.octave = octave;
        return rv;
    }
    // ### keySignatureLength
    // return the number of sharp/flat in a key signature for sizing guess.
    static get keySignatureLength() {
        return {
            'C': 0,
            'B': 5,
            'A': 3,
            'F#': 6,
            'Bb': 2,
            'Ab': 4,
            'Gg': 6,
            'G': 1,
            'F': 1,
            'Eb': 3,
            'Db': 5,
            'Cb': 7,
            'C#': 7,
            'E': 4,
            'D': 2
        };
    }
    static getSharpsInKeySignature(key) {
        const sharpKeys = ['G', 'D', 'A', 'E', 'B', 'F#', 'C#'];
        if (sharpKeys.indexOf(key.toUpperCase()) < 0) {
            return 0;
        }
        return SmoMusic.keySignatureLength[key.toUpperCase()];
    }
    static getFlatsInKeySignature(key) {
        const flatKeys = ['F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb'];
        let caseKey = key[0].toUpperCase();
        if (key.length > 0) {
            caseKey += key.substr(1, key.length);
        }
        if (flatKeys.indexOf(caseKey) < 0) {
            return 0;
        }
        return SmoMusic.keySignatureLength[caseKey];
    }
    static midiKeyToVexKey(midiKey) {
        const sharpKeys = ['G', 'D', 'A', 'E', 'B', 'F#', 'C#'];
        const flatKeys = ['F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb'];
        if (midiKey === 0) {
            return 'C';
        }
        const flat = midiKey < 0;
        let ix = Math.abs(midiKey) - 1;
        if (ix > 6) {
            return 'C';
        }
        if (flat) {
            return flatKeys[ix];
        }
        else {
            return sharpKeys[ix];
        }
    }
    static timeSignatureToTicks(timeSignature) {
        const nd = timeSignature.split('/');
        const num = parseInt(nd[0], 10);
        const den = parseInt(nd[1], 10);
        const base = 2048 * (8 / den);
        return base * num;
    }
    static smoTicksToVexDots(ticks) {
        const vd = SmoMusic.ticksToDuration[ticks];
        if (!vd) {
            return 0;
        }
        const dots = (vd.match(/d/g) || []).length;
        return dots;
    }
    static midiTicksForQuantizeTo(ticks) {
        const oneDot = ticks * 2;
        const twoDots = ticks * 4;
        const threeDots = ticks * 8;
        const dCount = (str) => {
            const re = /d/g;
            return ((str || '').match(re) || []).length;
        };
        return Object.keys(SmoMusic.ticksToDuration).filter((key) => {
            const keyInt = parseInt(key, 10);
            if (keyInt < ticks) {
                return false;
            }
            const dots = dCount(SmoMusic.ticksToDuration[key]);
            if (dots > 0 && keyInt < oneDot) {
                return false;
            }
            if (dots > 1 && keyInt < twoDots) {
                return false;
            }
            if (dots > 2 && keyInt < threeDots) {
                return false;
            }
            if (dots > 3) {
                return false;
            }
            return true;
        })
            .map((key) => parseInt(key, 10));
        // return Object.keys(SmoMusic.ticksToDuration).map((key) => parseInt(key, 10));    
    }
    static get midiTicksForQuantizeMap() {
        return {
            512: SmoMusic.midiTicksForQuantizeTo(1024),
            1024: SmoMusic.midiTicksForQuantizeTo(1024),
            2048: SmoMusic.midiTicksForQuantizeTo(2048)
        };
    }
    static midiTicksForQuantize(ticks) {
        return SmoMusic.midiTicksForQuantizeMap[ticks];
    }
    static binarySearch(target, ix, partition, input) {
        const test = input[ix];
        const cost = Math.abs(target - test);
        if (cost < 1) {
            return ({ cost, result: test, newIx: ix, oldIx: ix, partition: 0, input });
        }
        partition = Math.round(partition / 2) + 1;
        const step = Math.round(partition / 2);
        if (input[ix] > target) {
            return ({ cost, result: input[ix], newIx: ix - step, partition, input });
        }
        else {
            return ({ cost, result: input[ix], newIx: ix + step, partition, input });
        }
    }
    static midiTickSearch(target, quantize) {
        const tickSet = SmoMusic.midiTicksForQuantize(quantize);
        let partition = Math.round(tickSet.length / 2);
        let ix = partition;
        let best = { cost: Math.abs(tickSet[ix] - target), result: tickSet[ix], ix };
        let result = SmoMusic.binarySearch(target, ix, partition, tickSet);
        while (best.cost > 1) {
            if (best.cost > result.cost) {
                best.cost = result.cost;
                best.result = result.result;
                best.ix = ix;
            }
            ix = result.newIx;
            if (result.partition <= 3) {
                break;
            }
            result = SmoMusic.binarySearch(target, result.newIx, result.partition, tickSet);
        }
        if (result.cost > 1 && result.partition > 0) {
            let i = 0;
            const ix = best.ix;
            const step = best.result > target ? -1 : 1;
            for (i = 0; i < (result.partition + 2) && (i * step) + ix < tickSet.length && (i * step) + ix >= 0; ++i) {
                const newIx = (i * step) + ix;
                const cost = Math.abs(target - tickSet[newIx]);
                if (best.cost > cost) {
                    best.cost = cost;
                    best.ix = (i * step) + ix;
                    best.result = tickSet[(i * step) + ix];
                }
            }
        }
        return { cost: best.cost, result: best.result };
    }
    // ## closestVexDuration
    // ## Description:
    // return the closest vex duration >= to the actual number of ticks. Used in beaming
    // triplets which have fewer ticks then their stem would normally indicate.
    static closestVexDuration(ticks) {
        let stemTicks = VF.RESOLUTION;
        // The stem value is the type on the non-tuplet note, e.g. 1/8 note
        // for a triplet.
        while (ticks <= stemTicks) {
            stemTicks = stemTicks / 2;
        }
        stemTicks = stemTicks * 2;
        return SmoMusic.ticksToDuration[stemTicks];
    }
    // ### closestDurationTickLtEq
    // Price is right style, closest tick value without going over.  Used to pad
    // rests when reading musicXML.
    static closestDurationTickLtEq(ticks) {
        const sorted = Object.keys(SmoMusic.ticksToDuration)
            .map((key) => parseInt(key, 10))
            .filter((key) => key <= ticks);
        return sorted[sorted.length - 1];
    }
    /**
     * Return array of valid note-lengths from an odd number of ticks,
     * so we can come as close as possible to representing the ticks with notes
     * @param ticks
     * @returns
     */
    static splitIntoValidDurations(ticks) {
        const rv = [];
        let closest = 0;
        while (ticks > 128) {
            closest = SmoMusic.closestDurationTickLtEq(ticks);
            ticks -= closest;
            rv.push(closest);
        }
        return rv;
    }
    // ### vexStemType
    // return the vex stem type (no dots)
    static vexStemType(ticks) {
        const str = SmoMusic.ticksToDuration[SmoMusic.splitIntoValidDurations(ticks)[0]];
        if (str.indexOf('d') >= 0) {
            return str.substr(0, str.indexOf('d'));
        }
        return str;
    }
    // ### Description:
    // Get ticks for this note with an added dot.  Return
    // identity if that is not a supported value.
    static getNextDottedLevel(ticks) {
        const ttd = SmoMusic.ticksToDuration;
        const vals = Object.values(ttd);
        const ix = vals.indexOf(ttd[ticks]);
        if (ix >= 0 && ix < vals.length && vals[ix][0] === vals[ix + 1][0]) {
            return SmoMusic.durationToTicks(vals[ix + 1]);
        }
        return ticks;
    }
    // ### Description:
    // Get ticks for this note with one fewer dot.  Return
    // identity if that is not a supported value.
    static getPreviousDottedLevel(ticks) {
        const ttd = SmoMusic.ticksToDuration;
        const vals = Object.values(ttd);
        const ix = vals.indexOf(ttd[ticks]);
        if (ix > 0 && vals[ix][0] === vals[ix - 1][0]) {
            return SmoMusic.durationToTicks(vals[ix - 1]);
        }
        return ticks;
    }
    // ### ticksToDuration
    // Frequently we double/halve a note duration, and we want to find the vex tick duration that goes with that.
    static get ticksToDuration() {
        let i = 0;
        const durations = ['1/2', '1', '2', '4', '8', '16', '32', '64', '128', '256'];
        const _ticksToDurationsF = () => {
            for (i = 0; i < durations.length - 1; ++i) {
                let j = 0;
                let dots = '';
                let ticks = 0;
                // We support up to 4 'dots'
                for (j = 0; j <= 4 && j + i < durations.length; ++j) {
                    ticks += VF.durationToTicks(durations[i + j]);
                    SmoMusic._ticksToDuration[ticks.toString()] = durations[i] + dots;
                    dots += 'd';
                }
            }
        };
        if (Object.keys(SmoMusic._ticksToDuration).length < 1) {
            _ticksToDurationsF();
        }
        return SmoMusic._ticksToDuration;
    }
    // ### durationToTicks
    // Uses VF.durationToTicks, but handles dots.
    static durationToTicks(duration) {
        let split = 0;
        let i = 0;
        let vfDuration = 0;
        let dots = duration.indexOf('d');
        if (dots < 0) {
            return VF.durationToTicks(duration);
        }
        else {
            vfDuration = VF.durationToTicks(duration.substring(0, dots));
            dots = duration.length - dots; // number of dots
            split = vfDuration / 2;
            for (i = 0; i < dots; ++i) {
                vfDuration += split;
                split = split / 2;
            }
            return vfDuration;
        }
    }
    /**
     * break the duration up into an array of durations, to split a long
     * note up between bars when pasting.
     * @param duration
     * @returns
     */
    static gcdMap(duration) {
        let k = 0;
        const keys = Object.keys(SmoMusic.ticksToDuration).map((x) => parseInt(x, 10));
        const dar = [];
        const gcd = (td) => {
            let rv = keys[0];
            for (k = 1; k < keys.length; ++k) {
                if (td % keys[k] === 0) {
                    rv = keys[k];
                }
            }
            return rv;
        };
        while (duration > 0 && !SmoMusic.ticksToDuration[duration]) {
            const div = gcd(duration);
            duration = duration - div;
            dar.push(div);
        }
        if (duration > 0) {
            dar.push(duration);
        }
        return dar.sort((a, b) => a > b ? -1 : 1);
    }
}
/**
 * an array of clefs and the xml information they map to
 */
SmoMusic.clefSigns = {
    'treble': { sign: 'G', line: 2 },
    'bass': { sign: 'F', line: 4 },
    'tenor': { sign: 'C', line: 4 },
    'alto': { sign: 'C', line: 3 },
    'soprano': { sign: 'C', line: 1 },
    'percussion': { sign: 'percussion' },
    'mezzo-soprano': { sign: 'C', line: 2 },
    'baritone-c': { sign: 'C', line: 5 },
    'baritone-f': { sign: 'F', line: 3 },
    'subbass': { sign: 'F', line: 3, octave: -1 },
    'french': { sign: 'G', line: 1 },
    'vocal-tenor': { sign: 'G', line: 2, octave: -1 }
};
SmoMusic._ticksToDuration = {};


/***/ }),

/***/ "./src/smo/data/note.ts":
/*!******************************!*\
  !*** ./src/smo/data/note.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoteBooleanParams: () => (/* binding */ NoteBooleanParams),
/* harmony export */   NoteNumberParams: () => (/* binding */ NoteNumberParams),
/* harmony export */   NoteStringParams: () => (/* binding */ NoteStringParams),
/* harmony export */   SmoNote: () => (/* binding */ SmoNote)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _noteModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to support {@link SmoNote}.  Notes have pitches and a duration, and other
 * modifiers that can affect display or playback.
 * @module /smo/data/note
 */





const VF = _common_vex__WEBPACK_IMPORTED_MODULE_4__.VexFlow;
// @internal
const NoteStringParams = ['noteHead', 'clef'];
// @internal
const NoteNumberParams = ['beamBeats', 'flagState'];
// @internal
const NoteBooleanParams = ['hidden', 'endBeam', 'isCue'];
function isSmoNoteParamsSer(params) {
    if (params.ctor && params.ctor === 'SmoNote') {
        return true;
    }
    return false;
}
/**
 * SmoNote contains the pitch and duration of a note or chord.
 * It can also contain arrays of modifiers like lyrics, articulations etc.
 * Also information about the beaming, flag etc.
 * @category SmoObject
 * */
class SmoNote {
    constructor(params) {
        this.flagState = SmoNote.flagStates.auto;
        this.textModifiers = [];
        this.articulations = [];
        this.ornaments = [];
        this.pitches = [];
        this.noteHead = '';
        this.clef = 'treble';
        this.clefNote = null;
        this.graceNotes = [];
        this.noteType = 'n';
        this.fillStyle = '';
        this.hidden = false;
        this.tuplet = null;
        this.tones = [];
        this.endBeam = false;
        this.ticks = { numerator: 4096, denominator: 1, remainder: 0 };
        this.beamBeats = 4096;
        this.beam_group = null;
        this.renderId = null;
        this.keySignature = 'c';
        this.logicalBox = null;
        this.isCue = false;
        this.accidentalsRendered = []; // set by renderer if accidental is to display
        const defs = SmoNote.defaults;
        NoteStringParams.forEach((param) => {
            this[param] = params[param] ? params[param] : defs[param];
        });
        this.noteType = params.noteType ? params.noteType : defs.noteType;
        NoteNumberParams.forEach((param) => {
            this[param] = params[param] ? params[param] : defs[param];
        });
        NoteBooleanParams.forEach((param) => {
            this[param] = params[param] ? params[param] : defs[param];
        });
        this.clefNote = params.clefNote;
        const ticks = params.ticks ? params.ticks : defs.ticks;
        const pitches = params.pitches ? params.pitches : defs.pitches;
        this.ticks = JSON.parse(JSON.stringify(ticks));
        this.pitches = JSON.parse(JSON.stringify(pitches));
        this.clef = params.clef ? params.clef : defs.clef;
        this.fillStyle = params.fillStyle ? params.fillStyle : '';
        if (params.tuplet) {
            this.tuplet = params.tuplet;
        }
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_3__.getId)().toString(),
            type: 'SmoNote'
        }; // else inherit
    }
    static get flagStates() {
        return { auto: 0, up: 1, down: 2 };
    }
    /**
     * used in serialization
     * @internal
     */
    static get parameterArray() {
        return ['ticks', 'pitches', 'noteType', 'tuplet', 'clef', 'isCue',
            'endBeam', 'beamBeats', 'flagState', 'noteHead', 'fillStyle', 'hidden', 'arpeggio', 'clefNote'];
    }
    /**
     * Default constructor parameters.  We always return a copy so the caller can modify it
     */
    static get defaults() {
        return JSON.parse(JSON.stringify({
            noteType: 'n',
            noteHead: 'n',
            clef: 'treble',
            textModifiers: [],
            articulations: [],
            graceNotes: [],
            ornaments: [],
            tones: [],
            endBeam: false,
            fillStyle: '',
            hidden: false,
            beamBeats: 4096,
            isCue: false,
            flagState: SmoNote.flagStates.auto,
            ticks: {
                numerator: 4096,
                denominator: 1,
                remainder: 0
            },
            pitches: [{
                    letter: 'b',
                    octave: 4,
                    accidental: 'n'
                }],
        }));
    }
    /**
     * Up, down auto (tri-state)
     */
    toggleFlagState() {
        this.flagState = (this.flagState + 1) % 3;
    }
    // @internal
    toVexStemDirection() {
        return (this.flagState === SmoNote.flagStates.up ? VF.Stem.UP : VF.Stem.DOWN);
    }
    get dots() {
        if (this.isTuplet) {
            return 0;
        }
        const vexDuration = _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.ticksToDuration[this.tickCount];
        if (!vexDuration) {
            return 0;
        }
        return vexDuration.split('d').length - 1;
    }
    _addModifier(dynamic, toAdd) {
        var tms = [];
        this.textModifiers.forEach((tm) => {
            if (tm.attrs.type !== dynamic.attrs.type) {
                tms.push(tm);
            }
        });
        if (toAdd) {
            tms.push(dynamic);
        }
        this.textModifiers = tms;
    }
    _addArticulation(articulation, toAdd) {
        var tms = [];
        this.articulations.forEach((tm) => {
            if (tm.articulation !== articulation.articulation) {
                tms.push(tm);
            }
        });
        if (toAdd) {
            tms.push(articulation);
        }
        this.articulations = tms;
    }
    /**
     * Add a new dynamic to thisnote
     * @param dynamic
     */
    addDynamic(dynamic) {
        this._addModifier(dynamic, true);
    }
    /**
     * Remove the dynamic from this note.
     * @param dynamic
     */
    removeDynamic(dynamic) {
        this._addModifier(dynamic, false);
    }
    /**
     * Get all note modifiers of a type, either a lyric or a dynamic
     * @param type ctor
     * @returns
     */
    getModifiers(type) {
        var ms = this.textModifiers.filter((mod) => mod.attrs.type === type);
        return ms;
    }
    setArpeggio(arp) {
        this.arpeggio = arp;
    }
    /**
     *
     * @returns the longest lyric, used for formatting
     */
    longestLyric() {
        const tms = this.textModifiers.filter((mod) => mod.attrs.type === 'SmoLyric' && mod.parser === _noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLyric.parsers.lyric);
        if (!tms.length) {
            return null;
        }
        return tms.reduce((m1, m2) => m1.getText().length > m2.getText().length ? m1 : m2);
    }
    /** Add a lyric to this note, replacing another in the same verse */
    addLyric(lyric) {
        const tms = this.textModifiers.filter((mod) => mod.attrs.type !== 'SmoLyric' || mod.parser !== lyric.parser ||
            mod.verse !== lyric.verse);
        tms.push(lyric);
        this.textModifiers = tms;
    }
    /**
     * @returns array of lyrics that are lyrics
     */
    getTrueLyrics() {
        const ms = this.textModifiers.filter((mod) => mod.attrs.type === 'SmoLyric' && mod.parser === _noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLyric.parsers.lyric);
        ms.sort((a, b) => a.verse - b.verse);
        return ms;
    }
    /**
     *
     * @returns array of SmoLyric whose parsers are chord
     */
    getChords() {
        const ms = this.textModifiers.filter((mod) => mod.attrs.type === 'SmoLyric' && mod.parser === _noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLyric.parsers.chord);
        return ms;
    }
    /**
     *
     * @param lyric lyric to remove, find the best match if there are multiples
     */
    removeLyric(lyric) {
        const tms = this.textModifiers.filter((mod) => mod.attrs.type !== 'SmoLyric' || mod.verse !== lyric.verse || mod.parser !== lyric.parser);
        this.textModifiers = tms;
    }
    /**
     *
     * @param verse
     * @param parser
     * @returns
     */
    getLyricForVerse(verse, parser) {
        return this.textModifiers.filter((mod) => mod.attrs.type === 'SmoLyric' && mod.parser === parser && mod.verse === verse);
    }
    /**
     *
     * @param fontInfo
     */
    setLyricFont(fontInfo) {
        const lyrics = this.getTrueLyrics();
        lyrics.forEach((lyric) => {
            lyric.fontInfo = JSON.parse(JSON.stringify(fontInfo));
        });
    }
    /**
     * @param adjustNoteWidth if true, vex will consider the lyric width when formatting the measure
     */
    setLyricAdjustWidth(adjustNoteWidth) {
        const lyrics = this.getTrueLyrics();
        lyrics.forEach((lyric) => {
            lyric.adjustNoteWidth = adjustNoteWidth;
        });
    }
    setChordAdjustWidth(adjustNoteWidth) {
        const chords = this.getChords();
        chords.forEach((chord) => {
            chord.adjustNoteWidth = adjustNoteWidth;
        });
    }
    setChordFont(fontInfo) {
        const chords = this.getChords();
        chords.forEach((chord) => {
            chord.fontInfo = JSON.parse(JSON.stringify(fontInfo));
        });
    }
    getOrnaments() {
        return this.ornaments.filter((oo) => oo.isJazz() === false);
    }
    getJazzOrnaments() {
        return this.ornaments.filter((oo) => oo.isJazz());
    }
    /**
     * Toggle the ornament up/down/off
     * @param ornament
     */
    toggleOrnament(ornament) {
        const aix = this.ornaments.filter((a) => a.attrs.type === 'SmoOrnament' && a.ornament === ornament.ornament);
        if (!aix.length) {
            this.ornaments.push(ornament);
        }
        else {
            this.ornaments = [];
        }
    }
    /**
     * Toggle the ornament up/down/off
     * @param articulation
     */
    toggleArticulation(articulation) {
        var aix = this.articulations.findIndex((a) => a.articulation === articulation.articulation);
        if (aix >= 0) {
            const cur = this.articulations[aix];
            if (cur.position === _noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.positions.above) {
                cur.position = _noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.positions.below;
                return;
            }
            else {
                this._addArticulation(articulation, false);
                return;
            }
        }
        this._addArticulation(articulation, true);
    }
    /**
     * Sort pitches in pitch order, Vex likes to receive pitches in order
     * @param note
     */
    static sortPitches(note) {
        const canon = (0,_common_vex__WEBPACK_IMPORTED_MODULE_4__.vexCanonicalNotes)();
        const keyIndex = ((pitch) => canon.indexOf(pitch.letter) + pitch.octave * 12);
        note.pitches.sort((a, b) => keyIndex(a) - keyIndex(b));
    }
    setNoteHead(noteHead) {
        if (this.noteHead === noteHead) {
            this.noteHead = '';
        }
        else {
            this.noteHead = noteHead;
        }
    }
    /**
     *
     * @param graceNote
     * @param offset the index from the first grace note
     */
    addGraceNote(graceNote, offset) {
        if (typeof (offset) === 'undefined') {
            offset = 0;
        }
        graceNote.clef = this.clef;
        this.graceNotes.push(graceNote);
    }
    removeGraceNote(offset) {
        if (offset >= this.graceNotes.length) {
            return;
        }
        this.graceNotes.splice(offset, 1);
    }
    getGraceNotes() {
        return this.graceNotes;
    }
    /**
     * Add another pitch to this note at `offset` 1/2 steps
     * @param note
     * @param offset
     */
    static addPitchOffset(note, offset) {
        if (note.pitches.length === 0) {
            return;
        }
        note.noteType = 'n';
        const pitch = note.pitches[0];
        note.pitches.push(_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.getKeyOffset(pitch, offset));
        SmoNote.sortPitches(note);
    }
    /**
     * Add another pitch to this note at `offset` 1/2 steps
     * @param offset
     * @returns
     */
    addPitchOffset(offset) {
        if (this.pitches.length === 0) {
            return;
        }
        this.noteType = 'n';
        const pitch = this.pitches[0];
        this.pitches.push(_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.getKeyOffset(pitch, offset));
        SmoNote.sortPitches(this);
    }
    toggleRest() {
        this.noteType = (this.noteType === 'r' ? 'n' : 'r');
    }
    toggleSlash() {
        this.noteType = (this.noteType === '/' ? 'n' : '/');
    }
    makeSlash() {
        this.noteType = '/';
    }
    makeRest() {
        this.noteType = 'r';
    }
    isRest() {
        return this.noteType === 'r';
    }
    isSlash() {
        return this.noteType === '/';
    }
    isHidden() {
        return this.hidden;
    }
    makeNote() {
        this.noteType = 'n';
        // clear fill style if we were hiding rests
        this.fillStyle = '';
        this.hidden = false;
    }
    /**
     * set note opacity on/off
     * @param val
     */
    makeHidden(val) {
        this.hidden = val;
        this.fillStyle = val ? '#aaaaaa7f' : '';
    }
    /**
     * Return true if this note is part of a tuplet
     */
    get isTuplet() {
        return this.tuplet !== null && typeof (this.tuplet.id) !== 'undefined';
    }
    addMicrotone(tone) {
        const ar = this.tones.filter((tn) => tn.pitchIndex !== tone.pitchIndex);
        ar.push(tone);
        this.tones = ar;
    }
    removeMicrotone(tone) {
        const ar = this.tones.filter((tn) => tn.pitchIndex !== tone.pitchIndex
            && tn.pitchIndex <= this.pitches.length // also remove tones for removed pitches
            && tone.tone !== tn.tone);
        this.tones = ar;
    }
    getMicrotone(toneIndex) {
        return this.tones.find((tn) => tn.pitchIndex === toneIndex);
    }
    getMicrotones() {
        return this.tones;
    }
    /**
     * cycle through the list of enharmonics for this note.
     * @param pitch
     * @returns
     */
    static toggleEnharmonic(pitch) {
        const lastLetter = pitch.letter;
        let vexPitch = _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.stripVexOctave(_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.pitchToVexKey(pitch));
        vexPitch = _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.getEnharmonic(vexPitch);
        pitch.letter = vexPitch[0];
        pitch.accidental = vexPitch.length > 1 ?
            vexPitch.substring(1, vexPitch.length) : 'n';
        pitch.octave += _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.letterChangedOctave(lastLetter, pitch.letter);
        return pitch;
    }
    /**
     * transpose a note or grace note to a key-friendly enharmonic
     * @param pitchArray
     * @param offset
     * @param originalKey - keySignature from original note
     * @param destinationKey - keySignature we are transposing into
     * @returns
     */
    transpose(pitchArray, offset, originalKey, destinationKey) {
        return SmoNote.transpose(this, pitchArray, offset, originalKey, destinationKey);
    }
    /**
     * used to add chord and pitch by piano widget
     * @param pitch
     */
    toggleAddPitch(pitch) {
        const pitches = [];
        let exists = false;
        this.pitches.forEach((o) => {
            if (o.letter !== pitch.letter ||
                o.octave !== pitch.octave ||
                o.accidental !== pitch.accidental) {
                pitches.push(o);
            }
            else {
                exists = true;
            }
        });
        this.pitches = pitches;
        if (!exists) {
            this.pitches.push(JSON.parse(JSON.stringify(pitch)));
            this.noteType = 'n';
        }
        SmoNote.sortPitches(this);
    }
    /**
     * @param note note to transpose
     * @param pitchArray an array of indices (not pitches) that indicate which pitches get altered if a chord
     * @param offset in 1/2 step
     * @param originalKey original key for enharmonic-friendly key
     * @param destinationKey destination key signature
     * @returns
     */
    static transpose(note, pitchArray, offset, originalKey, destinationKey) {
        let index = 0;
        let j = 0;
        if (offset === 0 && originalKey === destinationKey) {
            return note;
        }
        // If no specific pitch, use all the pitches
        if (pitchArray.length === 0) {
            pitchArray = Array.from(note.pitches.keys());
        }
        for (j = 0; j < pitchArray.length; ++j) {
            index = pitchArray[j];
            if (index + 1 > note.pitches.length) {
                SmoNote.addPitchOffset(note, offset);
            }
            else {
                const original = JSON.parse(JSON.stringify(note.pitches[index]));
                const pitch = _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.transposePitchForKey(original, originalKey, destinationKey, offset);
                note.pitches[index] = pitch;
            }
        }
        SmoNote.sortPitches(note);
        return note;
    }
    get tickCount() {
        return this.ticks.numerator / this.ticks.denominator + this.ticks.remainder;
    }
    /**
     * Copy the note, give it unique id
     * @param note
     * @returns
     */
    static clone(note) {
        var rv = SmoNote.deserialize(note.serialize());
        // make sure id is unique
        rv.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_3__.getId)().toString(),
            type: 'SmoNote'
        };
        return rv;
    }
    /**
     * @param note
     * @param ticks
     * @returns A note identical to `note` but with different duration
     */
    static cloneWithDuration(note, ticks) {
        if (typeof (ticks) === 'number') {
            ticks = { numerator: ticks, denominator: 1, remainder: 0 };
        }
        const rv = SmoNote.clone(note);
        rv.ticks = ticks;
        return rv;
    }
    static serializeModifier(modifiers) {
        const rv = [];
        modifiers.forEach((modifier) => {
            rv.push(modifier.serialize());
        });
        return rv;
    }
    _serializeModifiers(params) {
        params.textModifiers = SmoNote.serializeModifier(this.textModifiers);
        params.graceNotes = SmoNote.serializeModifier(this.graceNotes);
        params.articulations = SmoNote.serializeModifier(this.articulations);
        params.ornaments = SmoNote.serializeModifier(this.ornaments);
        params.tones = SmoNote.serializeModifier(this.tones);
        if (this.arpeggio) {
            params.arpeggio = this.arpeggio.serialize();
        }
    }
    /**
     * @returns a JSON object that can be used to create this note
     */
    serialize() {
        var params = { ctor: 'SmoNote' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoNote.defaults, SmoNote.parameterArray, this, params);
        if (params.ticks) {
            params.ticks = JSON.parse(JSON.stringify(params.ticks));
        }
        this._serializeModifiers(params);
        if (!isSmoNoteParamsSer(params)) {
            throw 'bad note ' + JSON.stringify(params);
        }
        return params;
    }
    /**
     * restore note modifiers and create a SmoNote object
     * @param jsonObj
     * @returns
     */
    static deserialize(jsonObj) {
        var note = new SmoNote(jsonObj);
        if (jsonObj.textModifiers) {
            jsonObj.textModifiers.forEach((mod) => {
                note.textModifiers.push(_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(mod));
            });
        }
        if (jsonObj.graceNotes) {
            jsonObj.graceNotes.forEach((mod) => {
                note.graceNotes.push(_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(mod));
            });
        }
        if (jsonObj.ornaments) {
            jsonObj.ornaments.forEach((mod) => {
                note.ornaments.push(_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(mod));
            });
        }
        if (jsonObj.articulations) {
            jsonObj.articulations.forEach((mod) => {
                note.articulations.push(_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(mod));
            });
        }
        if (jsonObj.tones) {
            jsonObj.tones.forEach((mod) => {
                note.tones.push(_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(mod));
            });
        }
        // Due to a bug, text modifiers were serialized into noteModifiers array
        if (jsonObj.noteModifiers) {
            jsonObj.noteModifiers.forEach((mod) => {
                note.textModifiers.push(_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(mod));
            });
        }
        if (jsonObj.arpeggio) {
            note.arpeggio = _noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoNoteModifierBase.deserialize(jsonObj.arpeggio);
        }
        return note;
    }
}


/***/ }),

/***/ "./src/smo/data/noteModifiers.ts":
/*!***************************************!*\
  !*** ./src/smo/data/noteModifiers.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoArpeggio: () => (/* binding */ SmoArpeggio),
/* harmony export */   SmoArpeggioTypes: () => (/* binding */ SmoArpeggioTypes),
/* harmony export */   SmoArticulation: () => (/* binding */ SmoArticulation),
/* harmony export */   SmoDynamicText: () => (/* binding */ SmoDynamicText),
/* harmony export */   SmoGraceNote: () => (/* binding */ SmoGraceNote),
/* harmony export */   SmoLyric: () => (/* binding */ SmoLyric),
/* harmony export */   SmoMicrotone: () => (/* binding */ SmoMicrotone),
/* harmony export */   SmoNoteModifierBase: () => (/* binding */ SmoNoteModifierBase),
/* harmony export */   SmoOrnament: () => (/* binding */ SmoOrnament),
/* harmony export */   isArpeggioType: () => (/* binding */ isArpeggioType)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * A note modifier is anything that is mapped to the note, but not part of the
 * pitch itself.  This includes grace notes, and note-text like lyrics.
 * @module /smo/data/noteModifiers
 */




const VF = _common_vex__WEBPACK_IMPORTED_MODULE_3__.VexFlow;
// const Smo = eval('globalThis.Smo');
/**
 * A note modifier is anything that is mapped to the note, but not part of the
 * pitch itself.  This includes grace notes, and note-text like lyrics.
 * All note modifiers have a serialize method and a 'ctor' parameter or deserialization
 * @category SmoModifier
 */
class SmoNoteModifierBase {
    constructor(ctor) {
        this.logicalBox = null;
        this.element = null;
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_0__.getId)().toString(),
            type: ctor
        };
        this.ctor = ctor;
    }
    static deserialize(jsonObj) {
        const ctor = eval('globalThis.Smo.' + jsonObj.ctor);
        // Handle backwards-compatibility thing
        if (jsonObj.ctor === 'SmoMicrotone' && typeof (jsonObj.pitch) === 'number') {
            jsonObj.pitchIndex = jsonObj.pitch;
        }
        if (jsonObj.ctor === 'SmoLyric') {
            if (typeof (jsonObj._text) === 'string') {
                jsonObj.text = jsonObj._text;
            }
        }
        if (typeof (ctor) === 'undefined') {
            console.log('ouch bad ctor for ' + jsonObj.ctor);
        }
        const rv = new ctor(jsonObj);
        return rv;
    }
}
function isGraceNoteParamsSer(params) {
    if (typeof (params.ctor) !== 'string' || params.ctor !== 'SmoGraceNote') {
        return false;
    }
    return true;
}
/**
 * A grace notes has many of the things an 'actual' note can have, but it doesn't take up
 * time against the time signature
 * @category SmoModifier
 */
class SmoGraceNote extends SmoNoteModifierBase {
    static get flagStates() {
        return { auto: 0, up: 1, down: 2 };
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            flagState: SmoGraceNote.flagStates.auto,
            noteType: 'n',
            beamBeats: 4096,
            endBeam: false,
            clef: 'treble',
            slash: false,
            ticks: {
                numerator: 4096,
                denominator: 1,
                remainder: 0
            },
            pitches: [{
                    letter: 'b',
                    octave: 4,
                    accidental: ''
                }]
        }));
    }
    // TODO: Matches SmoNote - move to SmoMusic?
    static get parameterArray() {
        const rv = [];
        // eslint-disable-next-line
        for (const key in SmoGraceNote.defaults) {
            rv.push(key);
        }
        return rv;
    }
    tickCount() {
        return this.ticks.numerator / this.ticks.denominator + this.ticks.remainder;
    }
    toVexGraceNote() {
        const p = _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.smoPitchesToVex(this.pitches);
        const rv = { duration: _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.closestVexDuration(this.tickCount()), keys: p, slash: this.slash };
        return rv;
    }
    serialize() {
        const params = { ctor: 'SmoGraceNote' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMergeNonDefault(SmoGraceNote.defaults, SmoGraceNote.parameterArray, this, params);
        if (!isGraceNoteParamsSer(params)) {
            throw 'bad grace note ' + JSON.stringify(params);
        }
        return params;
    }
    constructor(parameters) {
        super('SmoGraceNote');
        this.ticks = SmoGraceNote.defaults.ticks;
        this.pitches = [];
        this.slash = false;
        this.clef = 'treble';
        this.noteType = 'n';
        this.renderId = null;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoGraceNote.parameterArray, SmoGraceNote.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoGraceNote.parameterArray, parameters, this);
    }
}
const SmoArpeggioTypes = ['directionless', 'rasquedo_up', 'rasquedo_down',
    'roll_up', 'roll_down', 'brush_up', 'brush_down', 'none'];
function isSmoArpeggionParamsSer(params) {
    if (typeof (params.ctor) !== 'string' || params.ctor !== 'SmoArpeggio') {
        return false;
    }
    return true;
}
function isArpeggioType(tp) {
    return SmoArpeggioTypes.indexOf(tp) >= 0;
}
/**
 * A 'splatter' symbol next to a chord.
 */
class SmoArpeggio extends SmoNoteModifierBase {
    static get types() {
        if (typeof (SmoArpeggio._types['directionless']) === 'undefined') {
            SmoArpeggio._types['directionless'] = 7;
            SmoArpeggio._types['rasquedo_up'] = 6;
            SmoArpeggio._types['rasquedo_down'] = 5;
            SmoArpeggio._types['roll_up'] = 4;
            SmoArpeggio._types['roll_down'] = 3;
            SmoArpeggio._types['brush_up'] = 2;
            SmoArpeggio._types['brush_down'] = 1;
            SmoArpeggio._types['none'] = 0;
        }
        return SmoArpeggio._types;
    }
    constructor(params) {
        super('SmoArpeggio');
        this.typeCode = SmoArpeggio.types[params.type];
    }
    get typeString() {
        const str = SmoArpeggioTypes.find((x) => SmoArpeggio.types[x] === this.typeCode);
        const type = str ? str : 'none';
        return type;
    }
    serialize() {
        const rv = { ctor: 'SmoArpeggio' };
        const str = SmoArpeggioTypes.find((x) => SmoArpeggio.types[x] === this.typeCode);
        rv.type = str ? str : 'none';
        if (!isSmoArpeggionParamsSer(rv)) {
            throw 'bad arpeggio ' + JSON.stringify(rv);
        }
        return rv;
    }
}
SmoArpeggio._types = {};
function isSmoMicrotoneParamsSer(params) {
    if (typeof (params.ctor) !== 'string' || params.ctor !== 'SmoMicrotone') {
        return false;
    }
    return true;
}
/**
 * Microtones are treated similarly to ornaments.  There are not
 * rules for persisting throughout a measure, cancel etc.
 * @category SmoModifier
*/
class SmoMicrotone extends SmoNoteModifierBase {
    get toPitchCoeff() {
        return SmoMicrotone.pitchCoeff[this.tone];
    }
    get toVex() {
        return SmoMicrotone.smoToVex[this.tone];
    }
    static get parameterArray() {
        const rv = [];
        // eslint-disable-next-line
        for (const key in SmoMicrotone.defaults) {
            rv.push(key);
        }
        return rv;
    }
    serialize() {
        const params = { ctor: 'SmoMicrotone' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMergeNonDefault(SmoMicrotone.defaults, SmoMicrotone.parameterArray, this, params);
        if (!isSmoMicrotoneParamsSer(params)) {
            throw 'bad microtone ' + JSON.stringify(params);
        }
        return params;
    }
    constructor(parameters) {
        super(parameters.ctor);
        this.pitchIndex = 0;
        this.pitchIndex = parameters.pitch;
        this.tone = parameters.tone;
    }
}
// This is how VexFlow notates them
SmoMicrotone.smoToVex = {
    flat75sz: 'db',
    flat25sz: 'd',
    flat25ar: 'bs',
    flat125ar: 'afhf',
    sharp75: '++',
    sharp125: 'ashs',
    sharp25: '+',
    sori: 'o',
    koron: 'k'
};
// The audio frequency offsets
SmoMicrotone.pitchCoeff = {
    flat75sz: -1.5,
    flat25sz: -0.5,
    flat25ar: -0.5,
    flat125ar: -2.5,
    sharp75: 1.5,
    sharp125: 2.5,
    sharp25: 0.5,
    sori: 0.5,
    koron: -0.5
};
SmoMicrotone.defaults = {
    ctor: 'SmoMicrotone',
    tone: 'flat25sz',
    pitch: 0
};
function isSmoOrnamentParamsSer(params) {
    if (typeof (params.ctor) !== 'string' || params.ctor !== 'SmoOrnament') {
        return false;
    }
    return true;
}
/**
 * Ornaments map to vex ornaments.  articulations vs. ornaments
 * is kind of arbitrary
 * @category SmoModifier
 */
class SmoOrnament extends SmoNoteModifierBase {
    static get jazzOrnaments() {
        return ['SCOOP', 'FALL_SHORT', 'FALL_LONG', 'DOIT', 'LIFT', 'FLIP', 'SMEAR'];
    }
    toVex() {
        return SmoOrnament.ornaments[this.ornament.toLowerCase()];
    }
    isJazz() {
        return SmoOrnament.jazzOrnaments.indexOf(this.ornament) >= 0;
    }
    static get parameterArray() {
        const rv = [];
        // eslint-disable-next-line
        for (const key in SmoOrnament.defaults) {
            rv.push(key);
        }
        return rv;
    }
    static get positions() {
        return {
            above: 'above',
            below: 'below'
        };
    }
    static get offsets() {
        return {
            on: 'on',
            after: 'after'
        };
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            ctor: 'SmoOrnament',
            ornament: SmoOrnament.ornaments.mordent,
            position: SmoOrnament.positions.above,
            offset: SmoOrnament.offsets.on
        }));
    }
    serialize() {
        var params = { ctor: 'SmoOrnament' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMergeNonDefault(SmoOrnament.defaults, SmoOrnament.parameterArray, this, params);
        if (!isSmoOrnamentParamsSer(params)) {
            throw 'bad ornament ' + JSON.stringify(params);
        }
        return params;
    }
    constructor(parameters) {
        super('SmoOrnament');
        this.position = SmoOrnament.positions.above;
        this.offset = 'on';
        this.ornament = SmoOrnament.ornaments.mordent;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoOrnament.parameterArray, SmoOrnament.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoOrnament.parameterArray, parameters, this);
        // this.selector = parameters.selector;
    }
}
SmoOrnament.ornaments = {
    mordent: 'mordent',
    mordentInverted: 'mordent_inverted',
    turn: 'turn',
    turnInverted: 'turn_inverted',
    trill: 'tr',
    upprall: 'upprall',
    prallup: 'prallup',
    pralldown: 'pralldown',
    upmordent: 'upmordent',
    downmordent: 'downmordent',
    lineprall: 'lineprall',
    prallprall: 'prallprall',
    scoop: 'scoop',
    fall_short: 'fall',
    dropLong: 'fallLong',
    doit: 'doit',
    doitLong: 'doitLong',
    flip: 'flip',
    smear: 'smear'
};
SmoOrnament.xmlOrnaments = {
    mordent: 'mordent',
    mordent_inverted: 'inverted-mordent',
    turn: 'turn',
    turn_inverted: 'inverted-turn',
    upmordent: 'mordent',
    downmordent: 'mordent',
    lineprall: 'schleifer',
    prallprall: 'schleifer',
    prallup: 'schleifer',
    tr: 'trill-mark'
};
// jazz ornaments in vex are articulations in music xml
SmoOrnament.xmlJazz = {
    doit: 'doit',
    scoop: 'scoop',
    dropLong: 'falloff',
    drop: 'plop'
};
function isSmoArticulationParametersSer(params) {
    if (typeof (params.ctor) !== 'string' || params.ctor !== 'SmoArticulation') {
        return false;
    }
    return true;
}
/**
 * Articulations map to notes, can be placed above/below
 * @category SmoModifier
 */
class SmoArticulation extends SmoNoteModifierBase {
    static get articulations() {
        return {
            accent: 'accent',
            staccato: 'staccato',
            marcato: 'marcato',
            tenuto: 'tenuto',
            upStroke: 'upStroke',
            downStroke: 'downStroke',
            pizzicato: 'pizzicato',
            fermata: 'fermata'
        };
    }
    static get positions() {
        return {
            above: 'above',
            below: 'below'
        };
    }
    static get articulationToVex() {
        return {
            accent: 'a>',
            staccato: 'a.',
            marcato: 'a^',
            tenuto: 'a-',
            upStroke: 'a|',
            downStroke: 'am',
            pizzicato: 'ao',
            fermata: 'a@a'
        };
    }
    static get vexToArticulation() {
        return {
            'a>': 'accent',
            'a.': 'staccato',
            'a^': 'marcato',
            'a-': 'tenuto',
            'a|': 'upStroke',
            'am': 'downStroke',
            'ao': 'pizzicato',
            'a@a': 'fermata'
        };
    }
    static get parameterArray() {
        const rv = [];
        // eslint-disable-next-line
        for (const key in SmoArticulation.defaults) {
            rv.push(key);
        }
        return rv;
    }
    static get positionToVex() {
        return {
            'above': 3,
            'below': 4
        };
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            ctor: 'SmoArticulation',
            position: SmoArticulation.positions.above,
            articulation: SmoArticulation.articulations.accent
        }));
    }
    serialize() {
        var params = { ctor: 'SmoArticulation' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMergeNonDefault(SmoArticulation.defaults, SmoArticulation.parameterArray, this, params);
        if (!isSmoArticulationParametersSer(params)) {
            throw 'bad articulation ' + JSON.stringify(params);
        }
        return params;
    }
    constructor(parameters) {
        super('SmoArticulation');
        this.position = SmoOrnament.positions.above;
        this.offset = 0;
        this.articulation = SmoArticulation.articulations.accent;
        this.adjX = 0;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoArticulation.parameterArray, SmoArticulation.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoArticulation.parameterArray, parameters, this);
        // this.selector = parameters.selector;
    }
}
SmoArticulation.xmlArticulations = {
    accent: 'accent',
    staccato: 'staccato',
    tenuto: 'tenuto',
    marcato: 'strong-accent'
};
function isSmoLyricPersist(params) {
    if (typeof (params.ctor) !== 'string' || params.ctor !== 'SmoLyric') {
        return false;
    }
    return true;
}
/**
 * SmoLyric covers both chords and lyrics.  The parser tells you which
 * one you get.
 * @category SmoModifier
 */
class SmoLyric extends SmoNoteModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            ctor: 'SmoLyric',
            text: '\xa0',
            endChar: '',
            verse: 0,
            fontInfo: {
                size: 12,
                family: 'times',
                style: 'normal',
                weight: 'normal'
            },
            fill: 'black',
            classes: 'score-text',
            translateX: 0,
            translateY: 0,
            adjustNoteWidthLyric: true,
            adjustNoteWidthChord: false,
            parser: SmoLyric.parsers.lyric
        }));
    }
    static get symbolPosition() {
        return {
            SUPERSCRIPT: 1,
            SUBSCRIPT: 2,
            NORMAL: 3
        };
    }
    static toVexPosition(chordPos) {
        if (chordPos === SmoLyric.symbolPosition.NORMAL) {
            return VF.ChordSymbol.symbolModifiers.NONE;
        }
        else if (chordPos === SmoLyric.symbolPosition.SUPERSCRIPT) {
            return VF.ChordSymbol.symbolModifiers.SUPERSCRIPT;
        }
        return VF.ChordSymbol.symbolModifiers.SUBSCRIPT;
    }
    static get persistArray() {
        const rv = [];
        // eslint-disable-next-line
        for (const key in SmoLyric.defaults) {
            rv.push(key);
        }
        return rv;
    }
    static get parameterArray() {
        const rv = SmoLyric.persistArray;
        rv.push('selector', 'text');
        return rv;
    }
    serialize() {
        var params = { ctor: 'SmoLyric' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMergeNonDefault(SmoLyric.defaults, SmoLyric.persistArray, this, params);
        if (!isSmoLyricPersist(params)) {
            throw 'bad lyric ' + JSON.stringify('params');
        }
        return params;
    }
    // For lyrics, we default to adjust note width on lyric size.  For chords, this is almost never what
    // you want, so it is off by default.
    get adjustNoteWidth() {
        return (this.parser === SmoLyric.parsers.lyric) ? this.adjustNoteWidthLyric : this.adjustNoteWidthChord;
    }
    set adjustNoteWidth(val) {
        if (this.parser === SmoLyric.parsers.lyric) {
            this.adjustNoteWidthLyric = val;
        }
        else {
            this.adjustNoteWidthChord = val;
        }
    }
    // ### getClassSelector
    // returns a selector used to find this text block within a note.
    getClassSelector() {
        var parser = (this.parser === SmoLyric.parsers.lyric ? 'lyric' : 'chord');
        return 'g.' + parser + '-' + this.verse;
    }
    setText(text) {
        // For chords, trim all whitespace
        if (this.parser !== SmoLyric.parsers.lyric) {
            if (text.trim().length) {
                text.replace(/\s/g, '');
            }
        }
        this.text = text;
    }
    isHyphenated() {
        const text = this.text.trim();
        return this.parser === SmoLyric.parsers.lyric &&
            text.length &&
            text[text.length - 1] === '-';
    }
    getText() {
        const text = this.text.trim();
        if (this.isHyphenated()) {
            return _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.tryParseUnicode(text.substr(0, text.length - 1)).trim();
        }
        return _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.tryParseUnicode(text);
    }
    isDash() {
        return this.getText().length === 0 && this.isHyphenated();
    }
    static _chordGlyphFromCode(code) {
        return (0,_common_vex__WEBPACK_IMPORTED_MODULE_3__.getChordSymbolGlyphFromCode)(code);
    }
    static _tokenizeChordString(str) {
        // var str = this._text;
        const reg = /^([A-Z|a-z|0-9|]+)/g;
        let mmm = str.match(reg);
        let tokeType = '';
        let toke = '';
        const tokens = [];
        while (str.length) {
            if (!mmm) {
                tokeType = str[0];
                tokens.push(tokeType);
                str = str.slice(1, str.length);
            }
            else {
                toke = mmm[0].substr(0, mmm[0].length);
                str = str.slice(toke.length, str.length);
                tokens.push(toke);
                tokeType = '';
                toke = '';
            }
            mmm = str.match(reg);
        }
        return tokens;
    }
    getVexChordBlocks() {
        let mod = VF.ChordSymbol.symbolModifiers.NONE;
        let isGlyph = false;
        const tokens = SmoLyric._tokenizeChordString(this.text);
        const blocks = [];
        tokens.forEach((token) => {
            if (token === '^') {
                mod = (mod === VF.ChordSymbol.symbolModifiers.SUPERSCRIPT) ?
                    VF.ChordSymbol.symbolModifiers.NONE : VF.ChordSymbol.symbolModifiers.SUPERSCRIPT;
            }
            else if (token === '%') {
                mod = (mod === VF.ChordSymbol.symbolModifiers.SUBSCRIPT) ?
                    VF.ChordSymbol.symbolModifiers.NONE : VF.ChordSymbol.symbolModifiers.SUBSCRIPT;
            }
            else if (token === '@') {
                isGlyph = !isGlyph;
            }
            else if (token.length) {
                if (isGlyph) {
                    const glyph = SmoLyric._chordGlyphFromCode(token);
                    blocks.push({
                        glyph, symbolModifier: mod
                    });
                }
                else {
                    blocks.push({
                        text: token, symbolModifier: mod
                    });
                }
            }
        });
        return blocks;
    }
    constructor(parameters) {
        super('SmoLyric');
        this.ctor = 'SmoLyric';
        this.text = '';
        this.fontInfo = {
            size: 12,
            family: 'Merriweather',
            style: 'normal',
            weight: 'normal'
        };
        this.parser = SmoLyric.parsers.lyric;
        this.selector = null; // used by UI
        this.adjustNoteWidthLyric = true;
        this.adjustNoteWidthChord = false;
        this.verse = 0;
        this.skipRender = false;
        this.fill = '';
        this.translateX = 0;
        this.translateY = 0;
        this.classes = '';
        this.adjX = 0;
        this.adjY = 0;
        this.hyphenX = 0;
        this.deleted = false;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoLyric.parameterArray, SmoLyric.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMerge(SmoLyric.parameterArray, parameters, this);
        // backwards-compatibility for lyric text
        if (parameters.text) {
            this.text = parameters.text;
        }
        // calculated adjustments for alignment purposes
        this.adjY = 0;
        this.adjX = 0;
        // this.verse = parseInt(this.verse, 10);
        if (!this.attrs) {
            this.attrs = {
                id: (0,_common__WEBPACK_IMPORTED_MODULE_0__.getId)().toString(),
                type: 'SmoLyric'
            };
        }
    }
}
SmoLyric.parsers = {
    lyric: 0, anaylysis: 1, chord: 2
};
/**
 * Dynamic text tells you how loud not to play.
 * @category SmoModifier
 */
class SmoDynamicText extends SmoNoteModifierBase {
    static get dynamics() {
        // matches VF.modifier
        return {
            PP: 'pp',
            P: 'p',
            MP: 'mp',
            MF: 'mf',
            F: 'f',
            FF: 'ff',
            SFZ: 'sfz'
        };
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            ctor: 'SmoDynamicText',
            xOffset: 0,
            fontSize: _common_vex__WEBPACK_IMPORTED_MODULE_3__.defaultNoteScale,
            yOffsetLine: 11,
            yOffsetPixels: 0,
            text: SmoDynamicText.dynamics.MP,
        }));
    }
    static get persistArray() {
        const rv = [];
        // eslint-disable-next-line
        for (const key in SmoDynamicText.defaults) {
            rv.push(key);
        }
        return rv;
    }
    static get parameterArray() {
        const rv = SmoDynamicText.persistArray;
        rv.push('selector');
        return rv;
    }
    serialize() {
        var params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.serializedMergeNonDefault(SmoDynamicText.defaults, SmoDynamicText.persistArray, this, params);
        return params;
    }
    constructor(parameters) {
        super('SmoDynamicText');
        this.text = '';
        this.yOffsetLine = 11;
        this.yOffsetPixels = 0;
        this.xOffset = 0;
        this.fontSize = _common_vex__WEBPACK_IMPORTED_MODULE_3__.defaultNoteScale;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.vexMerge(this, SmoDynamicText.defaults);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.filteredMerge(SmoDynamicText.parameterArray, parameters, this);
        this.selector = parameters.selector;
        if (!this.attrs) {
            this.attrs = {
                id: (0,_common__WEBPACK_IMPORTED_MODULE_0__.getId)().toString(),
                type: 'SmoDynamicText'
            };
        }
    }
}


/***/ }),

/***/ "./src/smo/data/partInfo.ts":
/*!**********************************!*\
  !*** ./src/smo/data/partInfo.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoPartAttributesBasic: () => (/* binding */ SmoPartAttributesBasic),
/* harmony export */   SmoPartInfo: () => (/* binding */ SmoPartInfo),
/* harmony export */   SmoPartInfoBooleanTypes: () => (/* binding */ SmoPartInfoBooleanTypes),
/* harmony export */   SmoPartInfoNumTypes: () => (/* binding */ SmoPartInfoNumTypes),
/* harmony export */   SmoPartInfoStringTypes: () => (/* binding */ SmoPartInfoStringTypes)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _measureModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _scoreModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _staffModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./staffModifiers */ "./src/smo/data/staffModifiers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to support partsInfo class, for part extraction.
 * Parts is parts.
 * @module /smo/data/partInfo
 */




const SmoPartInfoStringTypes = ['partName', 'partAbbreviation'];
const SmoPartInfoNumTypes = ['stavesAfter', 'stavesBefore'];
const SmoPartInfoBooleanTypes = ['preserveTextGroups', 'cueInScore', 'expandMultimeasureRests'];
const SmoPartAttributesBasic = ['partName', 'partAbbreviation', 'stavesAfter', 'stavesBefore', 'preserveTextGroups', 'cueInScore', 'expandMultimeasureRests'];
function isSmoPartInfoParamsSer(params) {
    if (params.ctor && params.ctor === 'SmoPartInfo') {
        return true;
    }
    return false;
}
/**
 * Part info contains information that group 1 or 2 adjacent staves.
 * Parts can have formatting that is indepenedent of the score
 * @category SmoModifier
 */
class SmoPartInfo extends _staffModifiers__WEBPACK_IMPORTED_MODULE_3__.StaffModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            partName: 'Staff ',
            partAbbreviation: '',
            globalLayout: _scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoLayoutManager.defaultLayout,
            textGroups: [],
            preserveTextGroups: false,
            pageLayoutMap: {},
            stavesAfter: 0,
            stavesBefore: 0,
            cueInScore: false,
            midiDevice: null,
            midiInstrument: null,
            expandMultimeasureRests: false
        }));
    }
    constructor(params) {
        super('SmoPartInfo');
        this.partName = '';
        this.partAbbreviation = '';
        this.measureFormatting = {};
        this.textGroups = [];
        this.stavesAfter = 0;
        this.stavesBefore = 0;
        this.preserveTextGroups = false;
        this.cueInScore = false;
        this.displayCues = false;
        this.expandMultimeasureRests = false;
        if (!params.layoutManager) {
            this.layoutManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoLayoutManager(_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoLayoutManager.defaults);
        }
        else {
            this.layoutManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoLayoutManager(params.layoutManager);
        }
        if (typeof (params.measureFormatting) !== 'undefined') {
            const formatKeys = Object.keys(params.measureFormatting);
            formatKeys.forEach((key) => {
                const numKey = parseInt(key, 10);
                this.measureFormatting[numKey] = new _measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureFormat(params.measureFormatting[numKey]);
            });
        }
        if (params.textGroups) {
            this.textGroups = params.textGroups;
        }
        SmoPartInfoStringTypes.forEach((st) => {
            this[st] = params[st];
        });
        SmoPartInfoNumTypes.forEach((st) => {
            this[st] = params[st];
        });
        SmoPartInfoBooleanTypes.forEach((st) => {
            var _a;
            this[st] = (_a = params[st]) !== null && _a !== void 0 ? _a : false;
        });
        this.midiDevice = params.midiDevice;
        if (params.midiInstrument) {
            this.midiInstrument = JSON.parse(JSON.stringify(params.midiInstrument));
        }
        else {
            this.midiInstrument = null;
        }
    }
    static deserialize(jsonObj) {
        const params = SmoPartInfo.defaults;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoPartAttributesBasic, jsonObj, params);
        params.midiInstrument = jsonObj.midiInstrument;
        params.midiDevice = jsonObj.midiDevice;
        params.measureFormatting = {};
        if (jsonObj.measureFormatting) {
            const mfkeys = Object.keys(jsonObj.measureFormatting);
            mfkeys.forEach((mfkey) => {
                const mfnum = parseInt(mfkey, 10);
                params.measureFormatting[mfnum] = _measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureModifierBase.deserialize(jsonObj.measureFormatting[mfnum]);
            });
        }
        return new SmoPartInfo(params);
    }
    serialize() {
        const rv = { ctor: 'SmoPartInfo' };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoPartInfo.defaults, SmoPartAttributesBasic, this, rv);
        rv.layoutManager = this.layoutManager.serialize();
        rv.textGroups = [];
        this.textGroups.forEach((tg) => {
            rv.textGroups.push(tg.serialize());
        });
        rv.measureFormatting = {};
        if (this.midiInstrument) {
            rv.midiInstrument = JSON.parse(JSON.stringify(this.midiInstrument));
        }
        if (this.midiDevice) {
            rv.midiDevice = this.midiDevice;
        }
        Object.keys(this.measureFormatting).forEach((key) => {
            const numKey = parseInt(key, 10);
            rv.measureFormatting[numKey] = this.measureFormatting[numKey];
        });
        if (!isSmoPartInfoParamsSer(rv)) {
            throw 'bad part info ' + JSON.stringify(rv);
        }
        return rv;
    }
    updateTextGroup(textGroup, toAdd) {
        const tgid = typeof (textGroup) === 'string' ? textGroup :
            textGroup.attrs.id;
        const ar = this.textGroups.filter((tg) => tg.attrs.id !== tgid);
        this.textGroups = ar;
        if (toAdd) {
            this.textGroups.push(textGroup);
        }
    }
}


/***/ }),

/***/ "./src/smo/data/score.ts":
/*!*******************************!*\
  !*** ./src/smo/data/score.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoScore: () => (/* binding */ SmoScore),
/* harmony export */   SmoScoreInfo: () => (/* binding */ SmoScoreInfo),
/* harmony export */   SmoScorePreferenceBools: () => (/* binding */ SmoScorePreferenceBools),
/* harmony export */   SmoScorePreferenceNumbers: () => (/* binding */ SmoScorePreferenceNumbers),
/* harmony export */   SmoScorePreferences: () => (/* binding */ SmoScorePreferences),
/* harmony export */   engravingFontTypes: () => (/* binding */ engravingFontTypes),
/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),
/* harmony export */   isEngravingFont: () => (/* binding */ isEngravingFont)
/* harmony export */ });
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _measureModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _scoreText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _systemStaff__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to support {@link SmoScore}
 * @module /smo/data/score
 */







/**
 * Arrary of engraving fonts available in Smoosic
 */
const engravingFontTypes = ['Bravura', 'Gonville', 'Petaluma', 'Leland'];
function isEngravingFont(et) {
    return engravingFontTypes.indexOf(et) >= 0;
}
/**
 * Information about the score itself, like composer etc.
 * @category SmoModifier
 */
class SmoScoreInfo {
    constructor() {
        this.name = 'Smoosical'; // deprecated
        this.title = 'Smoosical';
        this.subTitle = '(Op. 1)';
        this.composer = 'Me';
        this.copyright = '';
        this.version = 1;
    }
}
const SmoScorePreferenceBools = ['autoPlay', 'autoAdvance', 'showPiano', 'hideEmptyLines', 'transposingScore'];
const SmoScorePreferenceNumbers = ['defaultDupleDuration', 'defaultTripleDuration'];
/**
 * Some default SMO behavior
 * @param autoPlay play a new note or chord
 * @param autoAdvance Sibelius-like behavior of advancing cursor when a letter note is placed
 * @param defaultDupleDuration in ticks, even metered measures
 * @param defaultTripleDuration in ticks, 6/8 etc.
 * @param showPiano show the piano widget in the score
 * @param hideEmptyLines Hide empty lines in full score
 * @param transposingScore Whether to show the score parts in concert key
 * @category SmoModifier
 */
class SmoScorePreferences {
    static get defaults() {
        return {
            autoPlay: true,
            autoAdvance: true,
            defaultDupleDuration: 4096,
            defaultTripleDuration: 6144,
            showPiano: true,
            hideEmptyLines: false,
            transposingScore: false
        };
    }
    constructor(params) {
        this.autoPlay = true;
        this.autoAdvance = true;
        this.defaultDupleDuration = 4096;
        this.defaultTripleDuration = 6144;
        this.showPiano = true;
        this.hideEmptyLines = false;
        this.transposingScore = false;
        if (params) {
            SmoScorePreferenceBools.forEach((bb) => {
                this[bb] = params[bb];
            });
            SmoScorePreferenceNumbers.forEach((nn) => {
                this[nn] = params[nn];
            });
        }
    }
}
// dont' deserialize trivial text blocks saved by mistake
function isEmptyTextBlock(params) {
    if (Array.isArray(params === null || params === void 0 ? void 0 : params.textBlocks) || Array.isArray(params === null || params === void 0 ? void 0 : params.blocks)) {
        return false;
    }
    return true;
}
/**
 * Score is a container of staves, and metadata about the score.  Serializing the score serializes the
 * child object.  It is the highest-level object in Smoosic.
 */
class SmoScore {
    constructor(params) {
        /**
         * Map of instruments to staves, used in serialization.
         *
         * @type {any[]}
         * @memberof SmoScore
         */
        this.instrumentMap = [];
        /**
         * Default fonts in this score, for each type of text (lyrics, etc)
         *
         * @type {FontPurpose[]}
         * @memberof SmoScore
         */
        this.fonts = [];
        /**
         * General info about the score, used for export and library
         *
         * @type {SmoScoreInfo}
         * @memberof SmoScore
         */
        this.scoreInfo = new SmoScoreInfo();
        /**
         * Default behavior for this score.  Indicates some global behavior like whether to advance the cursor.
         *
         * @type {SmoScorePreferences}
         * @memberof SmoScore
         */
        this.preferences = new SmoScorePreferences(SmoScorePreferences.defaults);
        /**
         * The staves that make up the music of the score
         *
         * @type {SmoSystemStaff[]}
         * @memberof SmoScore
         */
        this.staves = [];
        /**
         * The active staff, used for some types of selections.  Not serialized.
         *
         * @type {number}
         * @memberof SmoScore
         */
        this.activeStaff = 0;
        /**
         * Text associated with the score, but not a specific musical element (e.g. lyrics are contains by notes)
         *
         * @type {SmoTextGroup[]}
         * @memberof SmoScore
         */
        this.textGroups = [];
        /**
         * A logical grouping of staves for justification
         *
         * @type {SmoSystemGroup[]}
         * @memberof SmoScore
         */
        this.systemGroups = [];
        /**
         * Preserve a map of measures to their actual measure numbers
         *
         * @type {Record<number, number>}
         * @memberof SmoScore
         */
        this.renumberingMap = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.vexMerge(this, SmoScore.defaults);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.vexMerge(this, params);
        if (!this.layoutManager) {
            this.layoutManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLayoutManager(_scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLayoutManager.defaults);
        }
        if (!this.formattingManager) {
            this.formattingManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoFormattingManager(_scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoFormattingManager.defaults);
        }
        if (this.staves.length) {
            this.numberStaves();
        }
        if (typeof (this.preferences.showPiano) === 'undefined') {
            this.preferences.showPiano = true;
        }
        this.audioSettings = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPlayerSettings(params.audioSettings);
        this.updateMeasureFormats();
    }
    static get engravingFonts() {
        return { Bravura: 'Bravura', Gonville: 'Gonville', Petaluma: 'Petaluma' };
    }
    static get fontPurposes() {
        return { ENGRAVING: 1, SCORE: 2, CHORDS: 3, LYRICS: 4 };
    }
    static get defaults() {
        return {
            // legacy layout structure.  Now we use pages.
            fonts: [
                { name: 'engraving', purpose: SmoScore.fontPurposes.ENGRAVING, family: 'Bravura', size: 1, custom: false },
                { name: 'score', purpose: SmoScore.fontPurposes.SCORE, family: 'Merriweather', size: 14, custom: false },
                { name: 'chords', purpose: SmoScore.fontPurposes.CHORDS, family: 'Roboto Slab', size: 14, custom: false },
                { name: 'lyrics', purpose: SmoScore.fontPurposes.LYRICS, family: 'Merriweather', size: 12, custom: false }
            ],
            scoreInfo: {
                name: 'Smoosical', // deprecated
                title: 'Smoosical',
                subTitle: '(Op. 1)',
                composer: 'Me',
                copyright: '',
                version: 1,
            },
            audioSettings: new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPlayerSettings(_scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPlayerSettings.defaults),
            preferences: {
                autoPlay: true,
                autoAdvance: true,
                defaultDupleDuration: 4096,
                defaultTripleDuration: 6144,
                showPiano: true,
                hideEmptyLines: false,
                transposingScore: false
            },
            staves: [],
            activeStaff: 0,
            textGroups: [],
            systemGroups: []
        };
    }
    static get pageSizes() {
        return ['letter', 'tabloid', 'A4', 'A4Landscape', 'custom'];
    }
    static get pageDimensions() {
        return {
            'letter': { width: 8 * 96 + 48, height: 11 * 96 },
            'letterLandscape': { width: 11 * 96, height: 8 * 96 + 48 },
            'tabloid': { width: 1632, height: 1056 },
            'A4': { width: 794, height: 1122 },
            'A4Landscape': { width: 1122, height: 794 },
            'custom': { width: 1, height: 1 }
        };
    }
    static pageSizeFromDimensions(width, height) {
        var _a;
        const rv = (_a = SmoScore.pageSizes.find((sz) => SmoScore.pageDimensions[sz].width === width && SmoScore.pageDimensions[sz].height === height)) !== null && _a !== void 0 ? _a : null;
        return rv;
    }
    static get defaultAttributes() {
        return ['startIndex', 'renumberingMap', 'renumberIndex', 'fonts',
            'preferences', 'scoreInfo'];
    }
    static get preferences() {
        return ['preferences', 'fonts', 'scoreInfo', 'audioSettings'];
    }
    /**
     * serialize the keySignature, tempo and time signature, which are mapped
     * to a column at a measure index
     * @returns
     */
    serializeColumnMapped() {
        const keySignature = {};
        const tempo = {};
        const timeSignature = {};
        const renumberingMap = {};
        let previous = null;
        this.staves[0].measures.forEach((measure) => {
            const current = measure.serializeColumnMapped();
            const ix = measure.measureNumber.measureIndex;
            const currentInstrument = this.staves[0].getStaffInstrument(ix);
            current.keySignature = _music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySigWithOffset(current.keySignature, -1 * currentInstrument.keyOffset);
            if (ix === 0) {
                keySignature[0] = current.keySignature;
                tempo[0] = current.tempo;
                timeSignature[0] = current.timeSignature;
                renumberingMap[0] = 0;
                previous = current;
            }
            else {
                if (typeof (this.renumberingMap[measure.measureNumber.measureIndex]) === 'number') {
                    renumberingMap[measure.measureNumber.measureIndex] = this.renumberingMap[measure.measureNumber.measureIndex];
                }
                if (current.keySignature !== previous.keySignature) {
                    previous.keySignature = current.keySignature;
                    keySignature[ix] = current.keySignature;
                }
                if (!(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.equal(current.timeSignature, previous.timeSignature))) {
                    previous.timeSignature = current.timeSignature;
                    timeSignature[ix] = current.timeSignature;
                }
                if (!(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTempoText.eq(current.tempo, previous.tempo))) {
                    previous.tempo = current.tempo;
                    tempo[ix] = current.tempo;
                }
            }
        });
        return { keySignature, tempo, timeSignature, renumberingMap };
    }
    /**
     * Column-mapped attributes stay the same in each measure until
     * changed, like key-signatures.  We don't store each measure value to
     * make the files smaller
     * @param scoreObj - the json blob that contains the score data
     * @returns
     */
    static deserializeColumnMapped(scoreObj) {
        let curValue;
        let mapIx = 0;
        if (!scoreObj.columnAttributeMap) {
            return;
        }
        const attrs = Object.keys(scoreObj.columnAttributeMap);
        scoreObj.staves.forEach((staff) => {
            const attrIxMap = {};
            attrs.forEach((attr) => {
                attrIxMap[attr] = 0;
            });
            staff.measures.forEach((measure) => {
                attrs.forEach((attr) => {
                    mapIx = attrIxMap[attr];
                    const curHash = scoreObj.columnAttributeMap[attr];
                    const attrKeys = Object.keys(curHash);
                    curValue = curHash[attrKeys[mapIx.toString()]];
                    attrKeys.sort((a, b) => parseInt(a, 10) > parseInt(b, 10) ? 1 : -1);
                    if (attrKeys.length > mapIx + 1) {
                        if (measure.measureNumber.measureIndex >= attrKeys[mapIx + 1]) {
                            mapIx += 1;
                            curValue = curHash[attrKeys[mapIx.toString()]];
                        }
                    }
                    // legacy timeSignature format was just a string 2/4, 3/8 etc.
                    if (attr === 'timeSignature') {
                        const ts = new _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature(_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.defaults);
                        if (typeof (curValue) === 'string') {
                            ts.timeSignature = curValue;
                            measure[attr] = ts;
                        }
                        else {
                            measure[attr] = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.createFromPartial(curValue);
                        }
                    }
                    else {
                        measure[attr] = curValue;
                    }
                    attrIxMap[attr] = mapIx;
                });
            });
        });
    }
    /**
     * Serialize the entire score.
     * @returns JSON object
     */
    serialize(skipStaves) {
        const params = {};
        let obj = {
            score: params,
            layoutManager: {},
            audioSettings: {},
            measureFormats: {},
            staves: [],
            textGroups: [],
            systemGroups: []
        };
        if (this.layoutManager) {
            obj.layoutManager = this.layoutManager.serialize();
        }
        obj.renumberingMap = JSON.stringify(this.renumberingMap);
        if (this.formattingManager) {
            obj.measureFormats = this.formattingManager.serialize();
        }
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.serializedMerge(SmoScore.defaultAttributes, this, params);
        obj.audioSettings = this.audioSettings.serialize();
        if (!skipStaves) {
            this.staves.forEach((staff) => {
                obj.staves.push(staff.serialize());
            });
        }
        else {
            obj.staves = [];
        }
        // Score text is not part of text group, so don't save separately.
        this.textGroups.forEach((tg) => {
            if (tg.isTextVisible()) {
                obj.textGroups.push(tg.serialize());
            }
        });
        this.systemGroups.forEach((gg) => {
            obj.systemGroups.push(gg.serialize());
        });
        obj.columnAttributeMap = this.serializeColumnMapped();
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.jsonTokens(obj);
        obj = _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.detokenize(obj, _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.tokenValues);
        obj.dictionary = _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.tokenMap;
        return obj;
    }
    updateScorePreferences(pref) {
        this.preferences = pref;
        _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.defaultDupleDuration = pref.defaultDupleDuration;
        _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.defaultTripleDuration = pref.defaultTripleDuration;
    }
    get engravingFont() {
        const efont = this.fonts.find((x) => x.purpose === SmoScore.fontPurposes.ENGRAVING);
        if (efont) {
            const val = engravingFontTypes.find((x) => x === efont.family);
            if (val) {
                return val;
            }
        }
        return 'Bravura';
    }
    set engravingFont(value) {
        const efont = this.fonts.find((x) => x.purpose === SmoScore.fontPurposes.ENGRAVING);
        if (efont && isEngravingFont(value)) {
            efont.family = value;
        }
    }
    static upConvertGlobalLayout(jsonObj) {
        // upconvert global layout, which used to be directly on layoutManager
        if (typeof (jsonObj.layoutManager.globalLayout) === 'undefined') {
            jsonObj.layoutManager.globalLayout = {
                svgScale: jsonObj.layoutManager.svgScale,
                zoomScale: jsonObj.layoutManager.zoomScale,
                pageWidth: jsonObj.layoutManager.pageWidth,
                pageHeight: jsonObj.layoutManager.pageHeight,
                noteSpacing: jsonObj.layoutManager.noteSpacing
            };
            if (!jsonObj.layoutManager.globalLayout.noteSpacing) {
                jsonObj.layoutManager.globalLayout.noteSpacing = 1.0;
            }
        }
    }
    /**
     * Convert legacy score layout to layoutManager object parameters
     * @param jsonObj
     */
    static upConvertLayout(jsonObj) {
        let i = 0;
        jsonObj.layoutManager = {};
        _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLayoutManager.attributes.forEach((attr) => {
            jsonObj.layoutManager[attr] = jsonObj.score.layout[attr];
        });
        jsonObj.layoutManager.pageLayouts = [];
        for (i = 0; i < jsonObj.score.layout.pages; ++i) {
            const pageSetting = JSON.parse(JSON.stringify(_scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoPageLayout.defaults));
            _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoPageLayout.attributes.forEach((attr) => {
                if (typeof (jsonObj.score.layout[attr]) !== 'undefined') {
                    pageSetting[attr] = jsonObj.score.layout[attr];
                }
            });
            jsonObj.layoutManager.pageLayouts.push(pageSetting);
        }
        SmoScore.upConvertGlobalLayout(jsonObj);
    }
    /**
     * Hack: for the case of a score containing only a single part, use the text from the
     * part.
     * @param jsonObj
     * @returns
     */
    static fixTextGroupSinglePart(jsonObj) {
        if (jsonObj.staves.length !== 1) {
            return;
        }
        if (!jsonObj.staves[0].partInfo) {
            return;
        }
        if (!jsonObj.staves[0].partInfo.textGroups || jsonObj.staves[0].partInfo.textGroups.length < 1) {
            return;
        }
        jsonObj.textGroups = JSON.parse(JSON.stringify(jsonObj.staves[0].partInfo.textGroups));
    }
    /**
     * Deserialize an entire score
     * @param jsonString
     * @returns SmoScore
     */
    static deserialize(jsonString) {
        var _a, _b;
        let jsonObj = JSON.parse(jsonString);
        let upconvertFormat = false;
        let formattingManager = null;
        if (jsonObj.dictionary) {
            jsonObj = _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.detokenize(jsonObj, jsonObj.dictionary);
        }
        SmoScore.fixTextGroupSinglePart(jsonObj);
        upconvertFormat = typeof (jsonObj.measureFormats) === 'undefined';
        const params = {};
        const staves = [];
        jsonObj.textGroups = jsonObj.textGroups ? jsonObj.textGroups : [];
        // Explode the sparse arrays of attributes into the measures
        SmoScore.deserializeColumnMapped(jsonObj);
        // meaning of customProportion has changed, backwards-compatiblity
        if (typeof (jsonObj.score.preferences) !== 'undefined' && typeof (jsonObj.score.preferences.customProportion) === 'number') {
            _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaults.proportionality = jsonObj.score.preferences.customProportion;
            if (_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaults.proportionality === _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.legacyProportionality) {
                _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaults.proportionality = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.defaultProportionality;
            }
        }
        // up-convert legacy layout data
        if (jsonObj.score.layout) {
            SmoScore.upConvertLayout(jsonObj);
        }
        if (jsonObj.layoutManager && !jsonObj.layoutManager.globalLayout) {
            SmoScore.upConvertGlobalLayout(jsonObj);
        }
        const layoutManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoLayoutManager(jsonObj.layoutManager);
        if (!upconvertFormat) {
            formattingManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoFormattingManager({ measureFormats: jsonObj.measureFormats });
        }
        // params.layout = JSON.parse(JSON.stringify(SmoScore.defaults.layout));
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.serializedMerge(SmoScore.defaultAttributes, jsonObj.score, params);
        if (!params.preferences) {
            params.preferences = SmoScore.defaults.preferences;
        }
        if (!jsonObj.audioSettings) {
            params.audioSettings = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPlayerSettings(_scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPlayerSettings.defaults);
        }
        else {
            params.audioSettings = _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoScoreModifierBase.deserialize(jsonObj.audioSettings);
        }
        params.preferences.transposingScore = (_a = params.preferences.transposingScore) !== null && _a !== void 0 ? _a : false;
        params.preferences.hideEmptyLines = (_b = params.preferences.hideEmptyLines) !== null && _b !== void 0 ? _b : false;
        if (jsonObj.columnAttributeMap && jsonObj.columnAttributeMap.renumberingMap) {
            params.renumberingMap = jsonObj.columnAttributeMap.renumberingMap;
        }
        else {
            params.renumberingMap = {};
            params.renumberingMap[0] = 0;
        }
        jsonObj.staves.forEach((staffObj, staffIx) => {
            staffObj.staffId = staffIx;
            staffObj.renumberingMap = params.renumberingMap;
            const staff = _systemStaff__WEBPACK_IMPORTED_MODULE_5__.SmoSystemStaff.deserialize(staffObj);
            staves.push(staff);
        });
        const textGroups = [];
        jsonObj.textGroups.forEach((tg) => {
            if (!isEmptyTextBlock(tg)) {
                textGroups.push(_scoreText__WEBPACK_IMPORTED_MODULE_4__.SmoTextGroup.deserializePreserveId(tg));
            }
        });
        const systemGroups = [];
        if (jsonObj.systemGroups) {
            jsonObj.systemGroups.forEach((tt) => {
                var st = _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoScoreModifierBase.deserialize(tt);
                st.autoLayout = false; // since this has been layed out, presumably, before save
                systemGroups.push(st);
            });
        }
        params.staves = staves;
        if (upconvertFormat) {
            formattingManager = SmoScore.measureFormatFromLegacyScore(params, jsonObj);
        }
        params.formattingManager = formattingManager;
        params.layoutManager = layoutManager;
        const score = new SmoScore(params);
        score.textGroups = textGroups;
        score.systemGroups = systemGroups;
        score.scoreInfo.version += 1;
        return score;
    }
    /**
    * Convert measure formatting from legacy scores, that had the formatting
    * per measure, to the new way that has a separate formatting object.
    * **/
    static measureFormatFromLegacyScore(score, jsonObj) {
        let current = null;
        let previous = null;
        const measureFormats = [];
        score.staves[0].measures.forEach((measure) => {
            if (current === null) {
                current = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.fromLegacyMeasure(jsonObj.staves[0].measures[measure.measureNumber.measureIndex]);
                measureFormats[measure.measureNumber.measureIndex] = current;
            }
            else {
                previous = current;
                current = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureFormat.fromLegacyMeasure(jsonObj.staves[0].measures[measure.measureNumber.measureIndex]);
                if (!current.eq(previous)) {
                    measureFormats[measure.measureNumber.measureIndex] = current;
                }
            }
        });
        return new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoFormattingManager({ measureFormats });
    }
    /**
     * Return a default score with no notes or staves
     * @param scoreDefaults
     * @param measureDefaults
     * @returns
     */
    static getDefaultScore(scoreDefaults, measureDefaults) {
        measureDefaults = measureDefaults !== null ? measureDefaults : _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.defaults;
        const score = new SmoScore(scoreDefaults);
        score.formattingManager = new _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoFormattingManager(_scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoFormattingManager.defaults);
        score.addStaff(_systemStaff__WEBPACK_IMPORTED_MODULE_5__.SmoSystemStaff.defaults);
        const measure = _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.getDefaultMeasure(measureDefaults);
        score.addMeasure(0);
        measure.voices.push({
            notes: _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.getDefaultNotes(measureDefaults)
        });
        return score;
    }
    /**
     * Return an 'empty' score, with one measure of rests
     * @param scoreDefaults
     * @returns
     */
    static getEmptyScore(scoreDefaults) {
        const score = new SmoScore(scoreDefaults);
        score.addStaff(_systemStaff__WEBPACK_IMPORTED_MODULE_5__.SmoSystemStaff.defaults);
        return score;
    }
    /**
     * We have deleted a measure, update the renumber index to
     * shuffle back.
     * @param indexToDelete
     */
    updateRenumberForAddDelete(indexToDelete, toAdd) {
        if (!toAdd && indexToDelete === 0) {
            return;
        }
        const maxIndex = this.staves[0].measures.length - 1;
        const increment = toAdd ? 1 : -1;
        for (var i = indexToDelete; i < maxIndex; ++i) {
            if (typeof (this.renumberingMap[i]) === 'number') {
                this.renumberingMap[i] = this.renumberingMap[i] + increment;
            }
        }
        if (typeof (this.renumberingMap[maxIndex]) === 'number' && !toAdd) {
            delete this.renumberingMap[maxIndex];
        }
    }
    updateRenumberingMap(measureIndex, localIndex) {
        if (measureIndex === 0) {
            this.renumberingMap[0] = localIndex;
        }
        else if (typeof (this.renumberingMap[measureIndex]) === 'number') {
            if (measureIndex === localIndex) {
                delete this.renumberingMap[measureIndex];
            }
            else {
                this.renumberingMap[measureIndex] = localIndex;
            }
        }
        else {
            this.renumberingMap[measureIndex] = localIndex;
        }
        this.staves.forEach((staff) => {
            staff.renumberingMap = this.renumberingMap;
        });
        this.numberStaves();
    }
    /**
     * Iteratively number the staves, like when adding a measure
     */
    numberStaves() {
        let i = 0;
        for (i = 0; i < this.staves.length; ++i) {
            const stave = this.staves[i];
            stave.staffId = i;
            stave.numberMeasures();
        }
    }
    /**
     * determine if the measure at this index could be a multi-measure rest
     * @param measureIndex - the measure index we are considering to add
     * @param start - the measure index would be the start of the rest
     * @returns
     */
    isMultimeasureRest(measureIndex, start, forceRest) {
        let i = 0;
        for (i = 0; i < this.staves.length; ++i) {
            if (!forceRest && !this.staves[i].isRest(measureIndex)) {
                return false;
            }
            if (this.staves[i].getVoltasForMeasure(measureIndex).length > 0) {
                return false;
            }
            if (this.staves[i].isRepeatSymbol(measureIndex)) {
                return false;
            }
            if (!start && measureIndex > 0 && this.staves[i].isRepeat(measureIndex - 1)) {
                return false;
            }
            if (this.staves[i].isRehearsal(measureIndex)) {
                return false;
            }
            // instrument change other than the initial measure
            if (this.staves[i].measureInstrumentMap[measureIndex] && i > 0) {
                return false;
            }
        }
        if (measureIndex > 0) {
            const measure = this.staves[0].measures[measureIndex];
            const prev = this.staves[0].measures[measureIndex - 1];
            if (!start && !_measureModifiers__WEBPACK_IMPORTED_MODULE_2__.TimeSignature.equal(measure.timeSignature, prev.timeSignature)) {
                return false;
            }
            if (!start && measure.keySignature !== prev.keySignature) {
                return false;
            }
        }
        return true;
    }
    /**
     * Restore measure formats stored when a score is serialized
     */
    updateMeasureFormats() {
        this.staves.forEach((staff) => {
            staff.measures.forEach((measure) => {
                this.formattingManager.updateFormat(measure);
            });
        });
    }
    /**
     * Add a measure to the score with the supplied parameters at the supplied index.
     * The defaults per staff may be different depending on the clef, key of the staff.
    */
    addDefaultMeasureWithNotes(measureIndex, parameters) {
        this.updateRenumberForAddDelete(measureIndex, true);
        this.staves.forEach((staff) => {
            const defaultMeasure = _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.getDefaultMeasureWithNotes(parameters);
            staff.addMeasure(measureIndex, defaultMeasure);
        });
    }
    getLocalMeasureIndex(measureIndex) {
        let maxKey = -1;
        const keys = Object.keys(this.updateRenumberForAddDelete);
        keys.forEach((key) => {
            const numKey = parseInt(key, 10);
            if (numKey <= measureIndex && numKey > maxKey) {
                maxKey = numKey;
            }
        });
        if (maxKey < 0) {
            return measureIndex;
        }
        return this.renumberingMap[maxKey] + (measureIndex - maxKey);
    }
    /**
     * delete the measure at the supplied index in all the staves
    */
    deleteMeasure(measureIndex) {
        this.staves.forEach((staff) => {
            staff.deleteMeasure(measureIndex);
        });
        // adjust offset if text was attached to any missing measures after the deleted one.
        this.textGroups.forEach((tg) => {
            if (tg.attachToSelector && tg.selector.measure >= measureIndex && tg.selector.measure > 0) {
                tg.selector.measure -= 1;
            }
        });
        this.updateRenumberForAddDelete(measureIndex, false);
    }
    /**
     * get a measure 'compatible' with the measure at the given index, in terms
     * of key, time signature etc.
     * @param measureIndex
     * @param staffIndex
     * @returns
     */
    getPrototypeMeasure(measureIndex, staffIndex) {
        const staff = this.staves[staffIndex];
        let protomeasure = {};
        // Since this staff may already have instrument settings, use the
        // immediately preceeding or post-ceding measure if it exists.
        if (measureIndex < staff.measures.length) {
            protomeasure = staff.measures[measureIndex];
        }
        else if (staff.measures.length) {
            protomeasure = staff.measures[staff.measures.length - 1];
        }
        else {
            protomeasure = _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.defaults;
        }
        return _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.getDefaultMeasureWithNotes(protomeasure);
    }
    /**
     * Give a measure prototype, create a new measure and add it to each staff, with the
     * correct settings for current time signature/clef.
     * @param measureIndex
     */
    addMeasure(measureIndex) {
        let i = 0;
        for (i = 0; i < this.staves.length; ++i) {
            const staff = this.staves[i];
            const nmeasure = this.getPrototypeMeasure(measureIndex, i);
            if (nmeasure.voices.length <= nmeasure.getActiveVoice()) {
                nmeasure.setActiveVoice(0);
            }
            staff.addMeasure(measureIndex, nmeasure);
        }
        // Update offsets for score modifiers that have a selector
        this.textGroups.forEach((tg) => {
            if (typeof (tg.selector) === 'undefined') {
                return;
            }
            if (tg.attachToSelector && tg.selector.measure >= measureIndex && tg.selector.measure < this.staves[0].measures.length) {
                tg.selector.measure += 1;
            }
        });
        this.updateRenumberForAddDelete(measureIndex, true);
        this.numberStaves();
    }
    /**
     * Replace the measure at the given location.  Probably due to an undo operation or paste.
     * @param selector
     * @param measure
     */
    replaceMeasure(selector, measure) {
        var staff = this.staves[selector.staff];
        staff.measures[selector.measure] = measure;
    }
    getSystemGroupForStaff(selection) {
        const staffId = selection.staff.staffId;
        const measureIndex = selection.measure.measureNumber.measureIndex;
        const exist = this.systemGroups.find((sg) => sg.startSelector.staff <= staffId &&
            sg.endSelector.staff >= staffId &&
            (sg.mapType === _scoreModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoSystemGroup.mapTypes.allMeasures ||
                (sg.startSelector.measure <= measureIndex &&
                    sg.endSelector.measure >= measureIndex)));
        return exist;
    }
    getStavesForGroup(group) {
        return this.staves.filter((staff) => staff.staffId >= group.startSelector.staff &&
            staff.staffId <= group.endSelector.staff);
    }
    // ### addOrReplaceSystemGroup
    // Add a new staff grouping, or replace it if it overlaps and is different, or
    // remove it if it is identical (toggle)
    addOrReplaceSystemGroup(newGroup) {
        // Replace this group for any groups that overlap it.
        this.systemGroups = this.systemGroups.filter((sg) => !sg.overlaps(newGroup));
        this.systemGroups.push(newGroup);
    }
    isPartExposed() {
        if (this.staves.length > 2) {
            return false;
        }
        const staff = this.staves[0];
        const staveCount = staff.partInfo.stavesAfter + staff.partInfo.stavesBefore + 1;
        return staveCount === this.staves.length
            && staff.partInfo.stavesBefore === 0;
    }
    /**
     * Probably due to an undo operation, replace the staff at the given index.
     * @param index
     * @param staff
     */
    replaceStaff(index, staff) {
        const staves = [];
        let i = 0;
        for (i = 0; i < this.staves.length; ++i) {
            if (i !== index) {
                staves.push(this.staves[i]);
            }
            else {
                staves.push(staff);
            }
        }
        this.staves = staves;
    }
    /**
     *
     * @param measureIndex
     * @param key
     */
    addKeySignature(measureIndex, key) {
        this.staves.forEach((staff) => {
            // Consider transpose for key of instrument
            const netOffset = staff.measures[measureIndex].transposeIndex;
            const newKey = _music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySigWithOffset(key, netOffset);
            staff.addKeySignature(measureIndex, newKey);
        });
    }
    /**
     * If the part is a transposing part, remove the transposition from the notes/staff.  This logic
     * assumes the measures previously had transposeIndex set up by the instrument map.
     */
    setTransposing() {
        this.staves.forEach((staff) => {
            staff.measures.forEach((mm) => {
                if (mm.transposeIndex !== 0) {
                    const concert = _music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySigWithOffset(mm.keySignature, -1 * mm.transposeIndex);
                    mm.transposeToOffset(0, concert);
                    mm.transposeIndex = 0;
                    mm.keySignature = concert;
                }
            });
        });
    }
    /**
     * If the score is switching from transposing to non-transposing, update the index
     * and pitches.  This logic assumes we are changing from transposing to non-transposing.
     */
    setNonTransposing() {
        this.staves.forEach((staff) => {
            staff.measures.forEach((mm) => {
                const inst = staff.getStaffInstrument(mm.measureNumber.measureIndex);
                if (inst.keyOffset !== 0) {
                    const concert = _music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySigWithOffset(mm.keySignature, inst.keyOffset);
                    mm.transposeToOffset(inst.keyOffset, concert);
                    mm.transposeIndex = inst.keyOffset;
                    mm.keySignature = concert;
                }
            });
        });
    }
    // ### addInstrument
    // add a new staff (instrument) to the score
    addStaff(parameters) {
        let i = 0;
        if (this.staves.length === 0) {
            const staff = new _systemStaff__WEBPACK_IMPORTED_MODULE_5__.SmoSystemStaff(parameters);
            this.staves.push(staff);
            this.activeStaff = 0;
            // For part views, we renumber the staves even if there is only one staff.
            if (staff.measures.length) {
                this.numberStaves();
            }
            return staff;
        }
        if (!parameters) {
            parameters = _systemStaff__WEBPACK_IMPORTED_MODULE_5__.SmoSystemStaff.defaults;
        }
        const proto = this.staves[0];
        const measures = [];
        for (i = 0; i < proto.measures.length; ++i) {
            const measure = proto.measures[i];
            const jsonObj = measure.serialize();
            // Need to do this since score serialization doesn't include TS in each measure
            jsonObj.timeSignature = measure.timeSignature.serialize();
            jsonObj.tempo = measure.tempo.serialize();
            let newMeasure = _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.deserialize(jsonObj);
            newMeasure.measureNumber = measure.measureNumber;
            newMeasure.clef = parameters.measureInstrumentMap[0].clef;
            newMeasure.modifiers = [];
            newMeasure.transposeIndex = 0;
            // Consider key change if the proto measure is non-concert pitch
            newMeasure.keySignature =
                _music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySigWithOffset(newMeasure.keySignature, newMeasure.transposeIndex - measure.transposeIndex);
            newMeasure.voices = [{ notes: _measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.getDefaultNotes(newMeasure) }];
            measure.modifiers.forEach((modifier) => {
                const nmod = _measureModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoMeasureModifierBase.deserialize(modifier);
                newMeasure.modifiers.push(nmod);
            });
            measures.push(newMeasure);
        }
        parameters.measures = measures;
        const staff = new _systemStaff__WEBPACK_IMPORTED_MODULE_5__.SmoSystemStaff(parameters);
        this.staves.push(staff);
        this.activeStaff = this.staves.length - 1;
        this.numberStaves();
        return staff;
    }
    // ### removeStaff
    // Remove stave at the given index
    removeStaff(index) {
        const staves = [];
        let ix = 0;
        this.staves.forEach((staff) => {
            if (ix !== index) {
                staves.push(staff);
            }
            ix += 1;
        });
        this.staves = staves;
        this.numberStaves();
    }
    getStaffInstrument(selector) {
        const staff = this.staves[selector.staff];
        return staff.getStaffInstrument(selector.measure);
    }
    swapStaves(index1, index2) {
        if (this.staves.length < index1 || this.staves.length < index2) {
            return;
        }
        const tmpStaff = this.staves[index1];
        this.staves[index1] = this.staves[index2];
        this.staves[index2] = tmpStaff;
        this.staves.forEach((staff) => {
            staff.mapStaffFromTo(index1, index2);
            staff.mapStaffFromTo(index2, index1);
        });
        this.numberStaves();
    }
    updateTextGroup(textGroup, toAdd) {
        const tgid = typeof (textGroup) === 'string' ? textGroup :
            textGroup.attrs.id;
        const ar = this.textGroups.filter((tg) => tg.attrs.id !== tgid);
        this.textGroups = ar;
        if (toAdd) {
            this.textGroups.push(textGroup);
        }
    }
    addTextGroup(textGroup) {
        this.updateTextGroup(textGroup, true);
    }
    getTextGroups() {
        return this.textGroups;
    }
    scaleTextGroups(scale) {
        this.textGroups.forEach((tg) => {
            tg.scaleText(scale);
        });
    }
    removeTextGroup(textGroup) {
        this.updateTextGroup(textGroup, false);
    }
    setLyricAdjustWidth(adjustNoteWidth) {
        this.staves.forEach((staff) => {
            staff.setLyricAdjustWidth(adjustNoteWidth);
        });
    }
    setChordAdjustWidth(adjustNoteWidth) {
        this.staves.forEach((staff) => {
            staff.setChordAdjustWidth(adjustNoteWidth);
        });
    }
    // ### setLyricFont
    // set the font for lyrics, which are the same for all lyrics in the score
    setLyricFont(fontInfo) {
        var _a;
        this.staves.forEach((staff) => {
            staff.setLyricFont(fontInfo);
        });
        const fontInst = this.fonts.find((fn) => fn.purpose === SmoScore.fontPurposes.LYRICS);
        if (typeof (fontInst) === 'undefined') {
            return;
        }
        fontInst.family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : '';
        fontInst.size = parseInt(_scoreText__WEBPACK_IMPORTED_MODULE_4__.SmoScoreText.fontPointSize(fontInfo.size).toString());
        fontInst.custom = true;
    }
    setChordFont(fontInfo) {
        this.staves.forEach((staff) => {
            staff.setChordFont(fontInfo);
        });
    }
    get measures() {
        if (this.staves.length === 0) {
            return [];
        }
        return this.staves[this.activeStaff].measures;
    }
    incrementActiveStaff(offset) {
        if (offset < 0) {
            offset = offset + this.staves.length;
        }
        const nextStaff = (this.activeStaff + offset) % this.staves.length;
        if (nextStaff >= 0 && nextStaff < this.staves.length) {
            this.activeStaff = nextStaff;
        }
        return this.activeStaff;
    }
    setActiveStaff(index) {
        this.activeStaff = index <= this.staves.length ? index : this.activeStaff;
    }
}


/***/ }),

/***/ "./src/smo/data/scoreModifiers.ts":
/*!****************************************!*\
  !*** ./src/smo/data/scoreModifiers.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlobalLayoutAttributesArray: () => (/* binding */ GlobalLayoutAttributesArray),
/* harmony export */   IsOscillatorType: () => (/* binding */ IsOscillatorType),
/* harmony export */   SmoAudioPlayerSettings: () => (/* binding */ SmoAudioPlayerSettings),
/* harmony export */   SmoFormattingManager: () => (/* binding */ SmoFormattingManager),
/* harmony export */   SmoLayoutManager: () => (/* binding */ SmoLayoutManager),
/* harmony export */   SmoPageLayout: () => (/* binding */ SmoPageLayout),
/* harmony export */   SmoScoreModifierBase: () => (/* binding */ SmoScoreModifierBase),
/* harmony export */   SmoSystemGroup: () => (/* binding */ SmoSystemGroup)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _measureModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * A score modifier is anything that isn't mapped specifically to a musical object.
 * This includes score text, layout information
 * @module /smo/data/scoreModifier
 */





const VF = _common_vex__WEBPACK_IMPORTED_MODULE_4__.VexFlow;
/**
 * Base class for all {@link SmoScore} modifiers.
 * It is used to de/serialize the objects.
 * @param ctor constructor for derived class
 * @param logicalBox bounding box in SVG coordinates, if rendered
 * @param attrs object identification
 * @category SmoModifier
 */
class SmoScoreModifierBase {
    constructor(ctor) {
        this.logicalBox = null;
        this.ctor = ctor;
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
            type: ctor
        };
    }
    static deserialize(jsonObj) {
        const ctor = eval('globalThis.Smo.' + jsonObj.ctor);
        const rv = new ctor(jsonObj);
        return rv;
    }
}
/**
 * A score can have different views - one for the score itself and one for each
 * part, and each part can have its own formatting and text.
 * *Note*: I may move this to part info module.
 * @param measureFormats map of index to {@link SmoMeasureFormat} objects
 * @param partIndex the associated part, or -1 for the score
 * @category SmoModifier
 */
class SmoFormattingManager extends SmoScoreModifierBase {
    static get forScore() {
        return -1;
    }
    static get defaults() {
        return {
            measureFormats: [new _measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureFormat(_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureFormat.defaults)],
            partIndex: -1
        };
    }
    constructor(params) {
        super('SmoFormattingManager');
        this.partIndex = -1;
        if (typeof (params) === 'undefined') {
            params = {};
        }
        this.measureFormats = {};
        this.partIndex = SmoFormattingManager.forScore;
        if (typeof (params.partIndex) !== 'undefined') {
            this.partIndex = params.partIndex;
        }
        if (typeof (params.measureFormats) !== 'undefined' && params.measureFormats.length) {
            params.measureFormats.forEach((format) => {
                // 0 is default value, so fix case of first measure
                if (typeof (format.measureIndex) !== 'number') {
                    format.measureIndex = 0;
                }
                this.measureFormats[format.measureIndex] = new _measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureFormat(format);
            });
        }
    }
    /**
     * Update the measure format for the measure at the given index
     * @param format
     */
    updateMeasureFormat(format) {
        this.measureFormats[format.measureIndex] = format;
    }
    /**
     * Update the measure format based on the format of a given measure
     * @param measure
     */
    updateFormat(measure) {
        if (this.measureFormats[measure.measureNumber.measureIndex]) {
            measure.format = this.measureFormats[measure.measureNumber.measureIndex];
        }
        else {
            measure.format = new _measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureFormat(_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMeasureFormat.defaults);
        }
    }
    serialize() {
        const rv = [];
        const keys = Object.keys(this.measureFormats);
        keys.forEach((key) => {
            if (!this.measureFormats[key].isDefault) {
                rv.push(this.measureFormats[key].serialize());
            }
        });
        return rv;
    }
}
/**
 * web audio API defines this
 * @param otype
 * @returns
 */
function IsOscillatorType(otype) {
    return ['sine', 'square', 'sawtooth', 'triangle', 'custom'].findIndex((x) => x === otype) >= 0;
}
/**
 * Audio playback parameters.  Just fun stuff.
 * @category SmoModifier
 */
class SmoAudioPlayerSettings extends SmoScoreModifierBase {
    static get defaults() {
        return ({
            playerType: 'sampler',
            waveform: 'sine',
            reverbEnable: true,
            reverbDelay: 0.5,
            reverbDecay: 2
        });
    }
    static get attributes() {
        return ['playerType', 'waveform', 'reverbEnable', 'reverbDelay', 'reverbDecay'];
    }
    constructor(params) {
        super('SmoAudioPlayerSettings');
        this.playerType = 'sampler';
        this.waveform = 'sine';
        this.reverbEnable = true;
        this.reverbDelay = 0.2;
        this.reverbDecay = 0.5;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoAudioPlayerSettings.attributes, SmoAudioPlayerSettings.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoAudioPlayerSettings.attributes, params, this);
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoAudioPlayerSettings.defaults, SmoAudioPlayerSettings.attributes, this, params);
        params.ctor = 'SmoAudioPlayerSettings';
        return params;
    }
}
/**
 * Define margins and other layout information associated with a specific page, and may
 * be different on different pages.
 * @category SmoModifier
 */
class SmoPageLayout extends SmoScoreModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            leftMargin: 30,
            rightMargin: 30,
            topMargin: 144,
            bottomMargin: 72,
            interGap: 30,
            intraGap: 10
        }));
    }
    static get attributes() {
        return ['leftMargin', 'rightMargin', 'topMargin', 'bottomMargin', 'interGap', 'intraGap'];
    }
    constructor(params) {
        super('SmoPageLayout');
        this.leftMargin = 30;
        this.rightMargin = 30;
        this.topMargin = 40;
        this.bottomMargin = 40;
        this.interGap = 30;
        this.intraGap = 10;
        this.leftMargin = params.leftMargin;
        this.rightMargin = params.rightMargin;
        this.topMargin = params.topMargin;
        this.bottomMargin = params.bottomMargin;
        this.interGap = params.interGap;
        this.intraGap = params.intraGap;
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoPageLayout.defaults, SmoPageLayout.attributes, this, params);
        params.ctor = 'SmoPageLayout';
        return params;
    }
}
const GlobalLayoutAttributesArray = ['pageWidth', 'pageHeight', 'noteSpacing', 'svgScale', 'zoomScale', 'proportionality', 'maxMeasureSystem'];
function isSmoLayoutManagerParamsSer(params) {
    if (!params.ctor || params.ctor !== 'SmoLayoutManager') {
        return false;
    }
    return true;
}
/**
 * Storage and utilities for layout information in the score.  Each
 * manager has one set of page height/width, since svg element
 * must have single length/width and viewbox.
 * Each page can have different margins.
 * @category SmoModifier
 */
class SmoLayoutManager extends SmoScoreModifierBase {
    static get defaultLayout() {
        return {
            svgScale: 0.55,
            zoomScale: 2.0,
            noteSpacing: 1.0,
            pageWidth: 8 * 96 + 48,
            pageHeight: 11 * 96,
            proportionality: 5,
            maxMeasureSystem: 0
        };
    }
    static get defaults() {
        return {
            globalLayout: JSON.parse(JSON.stringify(SmoLayoutManager.defaultLayout)),
            pageLayouts: []
        };
    }
    static get attributes() {
        return ['pageWidth', 'pageHeight', 'noteSpacing', 'svgScale', 'zoomScale', 'maxMeasureSystem'];
    }
    // Attributes that are scaled by svgScale
    /* static get scalableAttributes(): Global {
      return ['pageWidth', 'pageHeight'];
    }*/
    static get scaledPageAttributes() {
        return ['leftMargin', 'rightMargin', 'topMargin', 'bottomMargin', 'interGap', 'intraGap'];
    }
    static get scaledGlobalAttributes() {
        return ['pageWidth', 'pageHeight'];
    }
    static areLayoutsEqual(g1, g2) {
        let rv = true;
        GlobalLayoutAttributesArray.forEach((attr) => {
            if (g1[attr] !== g2[attr]) {
                rv = false;
            }
        });
        return rv;
    }
    static isZoomChange(g1, g2) {
        let rv = true;
        GlobalLayoutAttributesArray.forEach((attr) => {
            if (g1[attr] !== g2[attr] && attr !== 'zoomScale') {
                rv = false;
            }
        });
        return rv;
    }
    /**
     * Adjust zoom width so the score takes up the whole score area
     */
    zoomToWidth(screenWidth) {
        const curWidth = this.globalLayout.pageWidth * this.globalLayout.svgScale;
        this.globalLayout.zoomScale = ((screenWidth - 350) / curWidth) * this.globalLayout.svgScale; // magic 350 for left controls....TODO standardize this
    }
    static getScaledPageLayout(globalLayout, pageLayout, pages) {
        const rv = {};
        SmoLayoutManager.scaledPageAttributes.forEach((attr) => {
            rv[attr] = pageLayout[attr] / globalLayout.svgScale;
        });
        SmoLayoutManager.scaledGlobalAttributes.forEach((attr) => {
            rv[attr] = globalLayout[attr] / globalLayout.svgScale;
        });
        // Note spacing is relative, so * it and not divide
        rv.noteSpacing = globalLayout.noteSpacing * globalLayout.svgScale;
        rv.svgScale = globalLayout.svgScale;
        rv.zoomScale = globalLayout.zoomScale;
        rv.maxMeasureSystem = globalLayout.maxMeasureSystem;
        return rv;
    }
    constructor(params) {
        super('SmoLayoutManager');
        this.pageLayouts = [];
        if (typeof (params.globalLayout.maxMeasureSystem) === 'undefined') {
            params.globalLayout.maxMeasureSystem = SmoLayoutManager.defaultLayout.maxMeasureSystem;
        }
        this.globalLayout = JSON.parse(JSON.stringify(params.globalLayout));
        if (params.pageLayouts.length) {
            params.pageLayouts.forEach((plp) => {
                const pageParams = SmoPageLayout.defaults;
                SmoPageLayout.attributes.forEach((attr) => {
                    if (typeof (plp[attr]) !== 'undefined') {
                        pageParams[attr] = plp[attr];
                    }
                });
                this.pageLayouts.push(new SmoPageLayout(pageParams));
            });
        }
        else {
            this.pageLayouts.push(new SmoPageLayout(SmoPageLayout.defaults));
        }
    }
    trimPages(pageCount) {
        if (pageCount < this.pageLayouts.length - 1) {
            this.pageLayouts = this.pageLayouts.slice(0, pageCount + 1);
        }
    }
    getZoomScale() {
        return this.globalLayout.zoomScale;
    }
    serialize() {
        const rv = { ctor: 'SmoLayoutManager' };
        rv.pageLayouts = [];
        this.pageLayouts.forEach((pl) => {
            rv.pageLayouts.push(pl.serialize());
        });
        rv.globalLayout = JSON.parse(JSON.stringify(this.globalLayout));
        if (!isSmoLayoutManagerParamsSer(rv)) {
            throw 'bad layout manager ' + JSON.stringify(rv);
        }
        return rv;
    }
    updateGlobalLayout(params) {
        SmoLayoutManager.attributes.forEach((attr) => {
            if (typeof (params[attr]) !== 'undefined') {
                this.globalLayout[attr] = params[attr];
            }
        });
    }
    // ### addToPageLayouts
    // Make sure the next page has a layout.  If not, copy settings from
    // previous page.
    addToPageLayouts(pageNum) {
        const lastLayout = this.pageLayouts[this.pageLayouts.length - 1];
        if (this.pageLayouts.length <= pageNum) {
            this.pageLayouts.push(new SmoPageLayout(lastLayout));
        }
    }
    getGlobalLayout() {
        return JSON.parse(JSON.stringify(this.globalLayout));
    }
    // Return a deep copy of the page parameters, adjusted for the global scale.
    getScaledPageLayout(pageIndex) {
        return SmoLayoutManager.getScaledPageLayout(this.globalLayout, this.pageLayouts[pageIndex], this.pageLayouts.length);
    }
    getPageLayout(pageIndex) {
        return new SmoPageLayout(this.pageLayouts[pageIndex]);
    }
    getPageLayouts() {
        const rv = [];
        this.pageLayouts.forEach((pl) => {
            rv.push(new SmoPageLayout(pl));
        });
        return rv;
    }
    updatePage(pageLayout, pageIndex) {
        if (this.pageLayouts.length > pageIndex) {
            this.pageLayouts[pageIndex] = new SmoPageLayout(pageLayout);
        }
    }
}
/**
 * System group is the grouping of staves into a system.
 * @category SmoModifier
 *  */
class SmoSystemGroup extends SmoScoreModifierBase {
    static get connectorTypes() {
        return { brace: 0, bracket: 1, single: 2, double: 3 };
    }
    static get mapTypes() {
        return { allMeasures: 0, range: 1 };
    }
    static get attributes() {
        return ['leftConnector', 'rightConnector', 'text', 'shortText', 'justify',
            'startSelector', 'endSelector', 'mapType'];
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            leftConnector: SmoSystemGroup.connectorTypes.single,
            rightConnector: SmoSystemGroup.connectorTypes.single,
            mapType: SmoSystemGroup.mapTypes.allMeasures,
            text: '',
            shortText: '',
            justify: true,
            startSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default,
            endSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default
        }));
    }
    static isSystemGroup(modifier) {
        return modifier.ctor === 'SmoSystemGroup';
    }
    constructor(params) {
        super('SmoSystemGroup');
        this.leftConnector = SmoSystemGroup.connectorTypes.single;
        this.rightConnector = SmoSystemGroup.connectorTypes.single;
        this.mapType = SmoSystemGroup.mapTypes.allMeasures;
        this.text = '';
        this.shortText = '';
        this.justify = true;
        this.startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default;
        this.endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelector.default;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoSystemGroup.attributes, SmoSystemGroup.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoSystemGroup.attributes, params, this);
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
            type: 'SmoSystemGroup'
        };
    }
    stavesOverlap(group) {
        return (this.startSelector.staff >= group.startSelector.staff && this.startSelector.staff <= group.endSelector.staff) ||
            (this.endSelector.staff >= group.startSelector.staff && this.endSelector.staff <= group.endSelector.staff);
    }
    measuresOverlap(group) {
        return this.stavesOverlap(group) &&
            ((this.startSelector.measure >= group.startSelector.measure && this.endSelector.measure <= group.startSelector.measure) ||
                (this.endSelector.measure >= group.startSelector.measure && this.endSelector.measure <= group.endSelector.measure));
    }
    overlaps(group) {
        return (this.stavesOverlap(group) && this.mapType === SmoSystemGroup.mapTypes.allMeasures) ||
            (this.measuresOverlap(group) && this.mapType === SmoSystemGroup.mapTypes.range);
    }
    leftConnectorVx() {
        switch (this.leftConnector) {
            case SmoSystemGroup.connectorTypes.single:
                return VF.StaveConnector.type.SINGLE_LEFT;
            case SmoSystemGroup.connectorTypes.double:
                return VF.StaveConnector.type.DOUBLE_LEFT;
            case SmoSystemGroup.connectorTypes.brace:
                return VF.StaveConnector.type.BRACE;
            case SmoSystemGroup.connectorTypes.bracket:
            default:
                return VF.StaveConnector.type.BRACKET;
        }
    }
    rightConnectorVx() {
        switch (this.rightConnector) {
            case SmoSystemGroup.connectorTypes.single:
                return VF.StaveConnector.type.SINGLE_RIGHT;
            case SmoSystemGroup.connectorTypes.double:
            default:
                return VF.StaveConnector.type.DOUBLE_RIGHT;
        }
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoSystemGroup.defaults, SmoSystemGroup.attributes, this, params);
        params.ctor = 'SmoSystemGroup';
        return params;
    }
}


/***/ }),

/***/ "./src/smo/data/scoreText.ts":
/*!***********************************!*\
  !*** ./src/smo/data/scoreText.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoScoreText: () => (/* binding */ SmoScoreText),
/* harmony export */   SmoTextGroup: () => (/* binding */ SmoTextGroup)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _scoreModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
/* harmony import */ var _common_textformatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/textformatter */ "./src/common/textformatter.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Score Text is anything that isn't mapped specifically to a musical object.
 * This includes score text, headers, footers.  Score text is a single block of text.
 * TextGroup is 1 or more ScoreText blocks arranged in some way.
 * @module /smo/data/scoreModifier
 */




const VF = _common_vex__WEBPACK_IMPORTED_MODULE_2__.VexFlow;
function isSmoScoreTextSer(params) {
    if (!((params === null || params === void 0 ? void 0 : params.ctor) === 'SmoScoreText')) {
        return false;
    }
    return true;
}
/**
 * Identify some text in the score, not associated with any musical element, like page
 * decorations, titles etc.
 * Note: score text is always contained in a text group.  So this isn't directly accessed
 * by score, but we keep the collection in score for backwards-compatibility
 * @category SmoModifier
 * @internal
 */
class SmoScoreText extends _scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoScoreModifierBase {
    // convert EM to a number, or leave as a number etc.
    static fontPointSize(size) {
        let rv = 12;
        const szz = size !== null && size !== void 0 ? size : 14;
        if (typeof (szz) === 'number') {
            return szz;
        }
        const ptString = szz.substring(0, szz.length - 2);
        rv = parseFloat(ptString);
        if (szz.indexOf('em') > 0) {
            rv *= 14;
        }
        else if (szz.indexOf('px') > 0) {
            rv *= (96.0 / 72.0);
        }
        return rv;
    }
    /**
     * Convert a numeric or string weight into either 'bold' or 'normal'
     * @param fontWeight
     * @returns
     */
    static weightString(fontWeight) {
        let rv = 'normal';
        if (fontWeight) {
            const numForm = parseInt(fontWeight.toString(), 10);
            if (isNaN(numForm)) {
                rv = fontWeight.toString();
            }
            else if (numForm > 500) {
                rv = 'bold';
            }
        }
        return rv;
    }
    static familyString(fam) {
        if (!fam) {
            return SmoScoreText.fontFamilies.sansSerif;
        }
        return fam;
    }
    static get fontFamilies() {
        return {
            serif: 'Merriweather', sansSerif: 'Roboto,sans-serif', monospace: 'monospace', cursive: 'cursive',
            times: 'Merriweather', arial: 'Arial'
        };
    }
    static get parameters() {
        return ['x', 'y', 'width', 'height', 'text', 'fontInfo', 'fill', 'classes'];
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            x: 15,
            y: 15,
            width: 0,
            height: 0,
            text: 'Smoosic',
            fontInfo: {
                size: 14,
                family: SmoScoreText.fontFamilies.serif,
                style: 'normal',
                weight: 'normal'
            },
            fill: 'black',
            classes: 'score-text',
        }));
    }
    static deserialize(jsonObj) {
        const params = SmoScoreText.defaults;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoScoreText.parameters, jsonObj, params);
        if (typeof (params.fontInfo.size === 'string')) {
            params.fontInfo.size = SmoScoreText.fontPointSize(params.fontInfo.size);
        }
        return new SmoScoreText(params);
    }
    getText() {
        return this.text;
    }
    estimateWidth() {
        let i = 0;
        let rv = 0;
        const textFont = _common_textformatter__WEBPACK_IMPORTED_MODULE_3__.TextFormatter.create({
            family: this.fontInfo.family,
            size: this.fontInfo.size,
            weight: this.fontInfo.weight,
            style: this.fontInfo.style
        });
        textFont.setFontSize(SmoScoreText.fontPointSize(this.fontInfo.size));
        for (i = 0; i < this.text.length; ++i) {
            rv += textFont.getWidthForTextInPx(this.text[i]);
        }
        return rv;
    }
    tryParseUnicode() {
        this.text = _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.tryParseUnicode(this.text);
    }
    offsetX(offset) {
        this.x += offset;
    }
    offsetY(offset) {
        this.y += offset;
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoScoreText.defaults, SmoScoreText.attributes, this, params);
        params.ctor = 'SmoScoreText';
        if (!isSmoScoreTextSer(params)) {
            throw ('bad score text ');
        }
        return params;
    }
    static get attributes() {
        return ['x', 'y', 'text', 'pagination', 'position', 'fontInfo', 'classes',
            'boxModel', 'justification', 'fill', 'width', 'height', 'scaleX', 'scaleY',
            'translateX', 'translateY', 'autoLayout'];
    }
    constructor(parameters) {
        super('SmoScoreText');
        this.x = 15;
        this.y = 15;
        this.width = 0;
        this.height = 0;
        this.text = 'Smoosic';
        this.fontInfo = {
            size: 14,
            family: SmoScoreText.fontFamilies.serif,
            style: 'normal',
            weight: 'normal'
        };
        this.fill = 'black';
        this.rotate = 0;
        this.classes = 'score-text';
        this.boxModel = 'none';
        this.scaleX = 1.0;
        this.scaleY = 1.0;
        this.translateX = 0;
        this.translateY = 0;
        this.pagination = 'once';
        this.position = 'custom';
        this.autoLayout = false; // set to true if one of the pre-canned positions are used.
        let rx = '';
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoScoreText.attributes, SmoScoreText.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoScoreText.attributes, parameters, this);
        if (!this.classes) {
            this.classes = '';
        }
        if (this.classes.indexOf(this.attrs.id) < 0) {
            this.classes += ' ' + this.attrs.id;
        }
        const weight = parameters.fontInfo ? parameters.fontInfo.weight : 'normal';
        this.fontInfo.weight = SmoScoreText.weightString(weight !== null && weight !== void 0 ? weight : 'normal');
        if (this.text) {
            rx = _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.tryParseUnicode(this.text);
            this.text = rx;
        }
    }
}
function isSmoTextGroupParamsSer(params) {
    var _a;
    if (!((params === null || params === void 0 ? void 0 : params.ctor) === 'SmoTextGroup')) {
        return false;
    }
    if (!(typeof ((_a = params.attrs) === null || _a === void 0 ? void 0 : _a.id) === 'string')) {
        return false;
    }
    return true;
}
function isTextBlockSer(params) {
    if (!params.text) {
        return false;
    }
    if (!params.text) {
        return false;
    }
    if (!(typeof (params.position) === 'number')) {
        return false;
    }
    return true;
}
/**
 * A grouping of text that can be used as a block for
 * justification, alignment etc.
 * @category SmoModifier
 */
class SmoTextGroup extends _scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoScoreModifierBase {
    static get justifications() {
        return {
            LEFT: 1,
            RIGHT: 2,
            CENTER: 3
        };
    }
    static get paginations() {
        return { EVERY: 1, EVENT: 2, ODD: 3, ONCE: 4, SUBSEQUENT: 5 };
    }
    // The position of block n relative to block n-1.  Each block
    // has it's own position.  Justification is inter-block.
    static get relativePositions() {
        return { ABOVE: 1, BELOW: 2, LEFT: 3, RIGHT: 4 };
    }
    static get purposes() {
        return {
            NONE: 1, TITLE: 2, SUBTITLE: 3, COMPOSER: 4, COPYRIGHT: 5
        };
    }
    static get attributes() {
        return ['textBlocks', 'justification', 'relativePosition', 'spacing', 'pagination',
            'attachToSelector', 'selector', 'musicXOffset', 'musicYOffset'];
    }
    static get nonTextAttributes() {
        return ['justification', 'relativePosition', 'spacing', 'pagination',
            'attachToSelector', 'selector', 'musicXOffset', 'musicYOffset'];
    }
    static isTextGroup(modifier) {
        return modifier.ctor === 'SmoTextGroup';
    }
    static get purposeToFont() {
        const rv = {};
        rv[SmoTextGroup.purposes.TITLE] = {
            fontFamily: 'Merriweather',
            fontSize: 18,
            xPlacement: 0.5,
            yOffset: 4
        };
        rv[SmoTextGroup.purposes.SUBTITLE] = {
            fontFamily: 'Merriweather',
            fontSize: 16,
            xPlacement: 0.5,
            yOffset: 20,
        };
        rv[SmoTextGroup.purposes.COMPOSER] = {
            fontFamily: 'Merriweather',
            fontSize: 12,
            xPlacement: 0.8,
            yOffset: 10
        };
        rv[SmoTextGroup.purposes.COPYRIGHT] = {
            fontFamily: 'Merriweather',
            fontSize: 12,
            xPlacement: 0.5,
            yOffset: -12
        };
        return rv;
    }
    // ### createTextForLayout
    // Create a specific score text type (title etc.) based on the supplied
    // score layout
    static createTextForLayout(purpose, text, layout) {
        let x = 0;
        const textAttr = SmoTextGroup.purposeToFont[purpose];
        const pageWidth = layout.pageWidth;
        const pageHeight = layout.pageHeight;
        const bottomMargin = layout.bottomMargin;
        const topMargin = layout.topMargin;
        x = textAttr.xPlacement > 0 ? pageWidth * textAttr.xPlacement
            : pageWidth - (pageWidth * textAttr.xPlacement);
        const y = textAttr.yOffset > 0 ?
            topMargin + textAttr.yOffset :
            pageHeight + textAttr.yOffset - bottomMargin;
        const defaults = SmoScoreText.defaults;
        const st = new SmoScoreText({
            text, x, y, width: defaults.width, height: defaults.height,
            fontInfo: { family: textAttr.fontFamily, size: textAttr.fontSize, weight: 'normal' }
        });
        const width = st.estimateWidth();
        x -= width / 2;
        const params = SmoTextGroup.defaults;
        params.textBlocks = [{ text: st, position: SmoTextGroup.relativePositions.RIGHT, activeText: false }];
        params.purpose = purpose;
        const tg = new SmoTextGroup(params);
        return tg;
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            textBlocks: [],
            justification: SmoTextGroup.justifications.LEFT,
            relativePosition: SmoTextGroup.relativePositions.RIGHT,
            pagination: SmoTextGroup.paginations.ONCE,
            purpose: SmoTextGroup.purposes.NONE,
            spacing: 0,
            attachToSelector: false,
            selector: null,
            musicXOffset: 0,
            musicYOffset: 0
        }));
    }
    static deserialize(jObj) {
        const textBlocks = [];
        const params = {};
        const jObjLegacy = jObj;
        // handle parameter name change
        if (jObjLegacy.blocks) {
            jObj.textBlocks = jObjLegacy.blocks;
        }
        // Create new scoreText object for the text blocks
        jObj.textBlocks.forEach((st) => {
            const tx = SmoScoreText.deserialize(st.text);
            textBlocks.push({ text: tx, position: st.position, activeText: false });
        });
        // fill in the textBlock configuration
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTextGroup.nonTextAttributes, jObj, params);
        params.textBlocks = textBlocks;
        return new SmoTextGroup(params);
    }
    static deserializePreserveId(jObj) {
        const rv = SmoTextGroup.deserialize(jObj);
        if (jObj.attrs.id) {
            rv.attrs.id = jObj.attrs.id;
        }
        return rv;
    }
    // ### getPagedTextGroups
    // If this text is repeated on page, create duplicates for each page, and
    // resolve page numbers;
    static getPagedTextGroups(tg, pages, pageHeight) {
        const rv = [];
        let i = 0;
        if (tg.pagination === SmoTextGroup.paginations.ONCE) {
            rv.push(tg);
            return rv;
        }
        for (i = 0; i < pages; ++i) {
            const ix = i;
            const nblocks = [];
            // deep copy the blocks so the page offsets don't bleed into
            // original.
            tg.textBlocks.forEach((block) => {
                const nscoreText = new SmoScoreText(block.text);
                nblocks.push({
                    text: nscoreText, position: block.position
                });
            });
            const params = {};
            _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTextGroup.nonTextAttributes, tg, params);
            params.textBlocks = nblocks;
            const ngroup = new SmoTextGroup(params);
            ngroup.textBlocks.forEach((block) => {
                const xx = block.text;
                xx.classes = 'score-text ' + xx.attrs.id;
                xx.text = xx.text.replace('###', (ix + 1).toString()); /// page number
                xx.text = xx.text.replace('@@@', pages.toString()); /// page number
                xx.y += pageHeight * ix;
            });
            if (tg.logicalBox) {
                ngroup.logicalBox = JSON.parse(JSON.stringify(tg.logicalBox));
                ngroup.logicalBox.y += pageHeight * i;
            }
            rv.push(ngroup);
        }
        return rv;
    }
    serialize() {
        const params = {
            textBlocks: []
        };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoTextGroup.defaults, SmoTextGroup.nonTextAttributes, this, params);
        this.textBlocks.forEach((blk) => {
            const blockSer = {
                position: blk.position
            };
            blockSer.text = blk.text.serialize();
            if (!isTextBlockSer(blockSer)) {
                throw ('bad text block ' + JSON.stringify(blockSer));
            }
            params.textBlocks.push(blockSer);
        });
        params.ctor = 'SmoTextGroup';
        params.attrs = JSON.parse(JSON.stringify(this.attrs));
        if (!isSmoTextGroupParamsSer(params)) {
            throw ('bad text group ' + JSON.stringify(params));
        }
        return params;
    }
    /* _isScoreText(st: ) {
      return st.ctor && st.ctor === 'SmoScoreText';
    } */
    constructor(params) {
        super('SmoTextGroup');
        this.justification = SmoTextGroup.justifications.LEFT;
        this.relativePosition = SmoTextGroup.relativePositions.RIGHT;
        this.pagination = SmoTextGroup.paginations.ONCE;
        this.purpose = SmoTextGroup.purposes.NONE;
        this.spacing = 0;
        this.attachToSelector = false;
        this.musicXOffset = 0;
        this.musicYOffset = 0;
        this.elements = [];
        this.textBlocks = [];
        this.edited = false; // indicates not edited this session
        this.skipRender = false; // don't render if it is being edited  
        if (typeof (params) === 'undefined') {
            params = {};
        }
        this.textBlocks = [];
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTextGroup.nonTextAttributes, SmoTextGroup.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTextGroup.nonTextAttributes, params, this);
        if (params.textBlocks) {
            params.textBlocks.forEach((block) => {
                this.textBlocks.push(block);
            });
        }
    }
    scaleText(scale) {
        this.musicXOffset *= scale;
        this.musicYOffset *= scale;
        this.textBlocks.forEach((block) => {
            block.text.x *= scale;
            block.text.y *= scale;
        });
    }
    // ### tryParseUnicode
    // Try to parse unicode strings.
    tryParseUnicode() {
        this.textBlocks.forEach((tb) => {
            tb.text.tryParseUnicode();
        });
    }
    estimateWidth() {
        let rv = 0;
        this.textBlocks.forEach((tb) => {
            rv += tb.text.estimateWidth();
        });
        return rv;
    }
    // avoid saving text that can't be deleted
    isTextVisible() {
        let rv = true;
        if (this.attachToSelector) {
            return true;
        }
        this.textBlocks.forEach((block) => {
            if (block.text.x < 0 || block.text.y < 0) {
                rv = false;
            }
        });
        return rv;
    }
    // ### setActiveBlock
    // let the UI know which block is being edited.  Parameter null means reset all
    setActiveBlock(scoreText) {
        this.textBlocks.forEach((block) => {
            if (scoreText != null && block.text.attrs.id === scoreText.attrs.id) {
                block.activeText = true;
            }
            else {
                block.activeText = false;
            }
        });
    }
    // For editing, keep track of the active text block.
    getActiveBlock() {
        const rv = this.textBlocks.find((block) => block.activeText === true);
        if (typeof (rv) !== 'undefined') {
            return rv.text;
        }
        return this.textBlocks[0].text;
    }
    setRelativePosition(position) {
        this.textBlocks.forEach((block) => {
            block.position = position;
        });
        this.relativePosition = position;
    }
    firstBlock() {
        return this.textBlocks[0].text;
    }
    indexOf(scoreText) {
        return this.textBlocks.findIndex((block) => block.text.attrs.id === scoreText.attrs.id);
    }
    addScoreText(scoreText, position = SmoTextGroup.relativePositions.LEFT) {
        this.textBlocks.push({ text: scoreText, position, activeText: false });
    }
    ul() {
        const rv = { x: 0, y: 0 };
        this.textBlocks.forEach((block) => {
            rv.x = block.text.x > rv.x ? block.text.x : rv.x;
            rv.y = block.text.y > rv.y ? block.text.y : rv.y;
        });
        return rv;
    }
    removeBlock(scoreText) {
        const bbid = (typeof (scoreText) === 'string') ? scoreText : scoreText.attrs.id;
        const ix = this.textBlocks.findIndex((bb) => bb.text.attrs.id === bbid);
        this.textBlocks.splice(ix, 1);
    }
    offsetX(offset) {
        if (this.attachToSelector) {
            this.musicXOffset += offset;
        }
        this.textBlocks.forEach((block) => {
            block.text.offsetX(offset);
        });
    }
    offsetY(offset) {
        if (this.attachToSelector) {
            this.musicYOffset += offset;
        }
        this.textBlocks.forEach((block) => {
            block.text.offsetY(offset);
        });
    }
}


/***/ }),

/***/ "./src/smo/data/staffModifiers.ts":
/*!****************************************!*\
  !*** ./src/smo/data/staffModifiers.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SlurNumberParams: () => (/* binding */ SlurNumberParams),
/* harmony export */   SmoInstrument: () => (/* binding */ SmoInstrument),
/* harmony export */   SmoInstrumentNumParams: () => (/* binding */ SmoInstrumentNumParams),
/* harmony export */   SmoInstrumentStringParams: () => (/* binding */ SmoInstrumentStringParams),
/* harmony export */   SmoOscillatorInfoAllTypes: () => (/* binding */ SmoOscillatorInfoAllTypes),
/* harmony export */   SmoSlur: () => (/* binding */ SmoSlur),
/* harmony export */   SmoStaffHairpin: () => (/* binding */ SmoStaffHairpin),
/* harmony export */   SmoStaffTextBracket: () => (/* binding */ SmoStaffTextBracket),
/* harmony export */   SmoTextBracketNumberTypes: () => (/* binding */ SmoTextBracketNumberTypes),
/* harmony export */   SmoTextBracketStringTypes: () => (/* binding */ SmoTextBracketStringTypes),
/* harmony export */   SmoTie: () => (/* binding */ SmoTie),
/* harmony export */   StaffModifierBase: () => (/* binding */ StaffModifierBase)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to modify a staff or system.  Some staff modifiers can span multiple
 * staves, so it can be a little arbitrary what is a score vs. staff modifier.  But
 * generally, a staff modifier is anything that has a beginning and end {@link SmoSelector}
 * @module /smo/data/staffModifiers
 */




const VF = _common_vex__WEBPACK_IMPORTED_MODULE_3__.VexFlow;
/**
 * Base class that mostly standardizes the interface and deals with serialization.
 * @param ctor constructor for derived class
 * @param logicalBox bounding box in SVG coordinates, if rendered
 * @param attrs object identification
 * @param startSelector where the modifier starts
 * @param endSelector where it ends
 * @category SmoModifier
 * */
class StaffModifierBase {
    constructor(ctor) {
        this.associatedStaff = 0;
        this.startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        this.endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        this.logicalBox = null;
        this.element = null;
        this.ctor = ctor;
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
            type: ctor
        };
    }
    static deserialize(params) {
        const ctor = eval('globalThis.Smo.' + params.ctor);
        const fixInstrument = params;
        if (fixInstrument.subFamily) {
            fixInstrument.instrument = fixInstrument.subFamily;
        }
        const rv = new ctor(params);
        return rv;
    }
}
const SmoOscillatorInfoAllTypes = ['minDuration', 'maxDuration', 'dynamic', 'nativeFrequency', 'realOvertones', 'imaginaryOvertones', 'sample', 'family',
    'waveform', 'sustain', 'options', 'instrument'];
function isSmoInstrumentParamsSer(params) {
    return (params === null || params === void 0 ? void 0 : params.ctor) === 'SmoInstrument';
}
const SmoInstrumentNumParams = ['keyOffset', 'midichannel', 'midiport', 'midiInstrument'];
const SmoInstrumentStringParams = ['instrumentName', 'abbreviation', 'family', 'instrument'];
/**
 * Define an instrument.  An instrument is associated with a part, but a part can have instrument changes
 * and thus contain multiple instruments at different points in the score.
 * Not all of these parameters are fully utilized yet, and there are plans to greatly expand what
 * an SmoInstrument is.  Note I may move this to PartInfo module.
 * @category SmoModifier
 */
class SmoInstrument extends StaffModifierBase {
    static get attributes() {
        return ['startSelector', 'endSelector', 'keyOffset', 'midichannel', 'midiport', 'instrumentName', 'abbreviation', 'instrument', 'family'];
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            clef: 'treble',
            keyOffset: 0,
            instrumentName: '',
            abbreviation: '',
            family: 'keyboard',
            instrument: 'piano',
            midichannel: 0,
            midiInstrument: 1,
            midiport: 0,
            startSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default,
            endSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default
        }));
    }
    static get defaultOscillatorParam() {
        return JSON.parse(JSON.stringify({
            waveform: 'sample',
            sustain: 'percussive',
            realOvertones: [],
            imaginaryOvertones: [],
            sample: null,
            family: 'none',
            instrument: 'none',
            nativeFrequency: 440,
            dynamic: 100,
            options: [],
            minDuration: 0,
            maxDuration: 0
        }));
    }
    constructor(params) {
        super('SmoInstrument');
        this.instrumentName = '';
        this.abbreviation = '';
        this.keyOffset = 0;
        this.clef = 'treble';
        this.midiInstrument = 1;
        let name = '';
        if (typeof (params.instrument) === 'undefined') {
            name = params.instrumentName;
        }
        else {
            name = params.instrument;
        }
        this.instrumentName = name;
        this.family = params.family;
        this.instrument = params.instrument;
        this.keyOffset = params.keyOffset;
        this.clef = params.clef;
        this.midiport = params.midiport;
        this.midichannel = params.midichannel;
        this.startSelector = params.startSelector;
        this.endSelector = params.endSelector;
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoInstrument.defaults, SmoInstrument.attributes, this, params);
        params.ctor = 'SmoInstrument';
        if (!isSmoInstrumentParamsSer(params)) {
            throw ('bad instrument ' + JSON.stringify(params));
        }
        return params;
    }
    eq(other) {
        let rv = true;
        SmoInstrumentNumParams.forEach((param) => {
            if (other[param] !== this[param]) {
                rv = false;
            }
        });
        SmoInstrumentStringParams.forEach((param) => {
            if (other[param] !== this[param]) {
                rv = false;
            }
        });
        return rv;
    }
}
function isSmoStaffHairpinParamsSer(params) {
    if (!params.ctor || !(params.ctor === 'SmoStaffHairpin')) {
        return false;
    }
    return true;
}
/**
 * Also called crescendo etc.
 * @category SmoModifier
 */
class SmoStaffHairpin extends StaffModifierBase {
    static get editableAttributes() {
        return ['xOffsetLeft', 'xOffsetRight', 'yOffset', 'height'];
    }
    static get defaults() {
        return JSON.parse(JSON.stringify({
            xOffsetLeft: -2,
            xOffsetRight: 0,
            yOffset: -50,
            height: 10,
            position: SmoStaffHairpin.positions.BELOW,
            hairpinType: SmoStaffHairpin.types.CRESCENDO,
            startSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default,
            endSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default
        }));
    }
    static get positions() {
        // matches VF.modifier
        return {
            LEFT: 1,
            RIGHT: 2,
            ABOVE: 3,
            BELOW: 4,
        };
    }
    static get types() {
        return {
            CRESCENDO: 1,
            DECRESCENDO: 2
        };
    }
    static get attributes() {
        return ['position', 'startSelector', 'endSelector', 'xOffsetLeft',
            'xOffsetRight', 'yOffset', 'hairpinType', 'height'];
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoStaffHairpin.defaults, SmoStaffHairpin.attributes, this, params);
        params.ctor = 'SmoStaffHairpin';
        if (!isSmoStaffHairpinParamsSer(params)) {
            throw 'bad hairpin ' + JSON.stringify(params);
        }
        return params;
    }
    constructor(params) {
        super('SmoStaffHairpin');
        this.xOffsetLeft = -2;
        this.xOffsetRight = 0;
        this.yOffset = -50;
        this.height = 10;
        this.position = SmoStaffHairpin.positions.BELOW;
        this.hairpinType = SmoStaffHairpin.types.CRESCENDO;
        this.startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        this.endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.vexMerge(this, SmoStaffHairpin.defaults);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.filteredMerge(SmoStaffHairpin.attributes, params, this);
        // If start/end selector on same note, make sure the hairpin extends
        if (_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.eq(this.startSelector, this.endSelector)) {
            if (this.xOffsetRight === SmoStaffHairpin.defaults.xOffsetRight
                && this.xOffsetLeft === SmoStaffHairpin.defaults.xOffsetLeft) {
                this.xOffsetLeft = -10;
                this.xOffsetRight = 10;
            }
        }
        if (!this.attrs) {
            this.attrs = {
                id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
                type: 'SmoStaffHairpin'
            };
        }
    }
}
function isSmoStaffTextBracketParamsSer(params) {
    if (params.ctor && params.ctor === 'SmoStaffTextBracket') {
        return false;
    }
    return true;
}
const SmoTextBracketStringTypes = ['text', 'superscript'];
const SmoTextBracketNumberTypes = ['line', 'position'];
/**
 * Text like 8va, rit. that is bracketed on a system
 * @category SmoModifier
 */
class SmoStaffTextBracket extends StaffModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            line: 1,
            position: SmoStaffTextBracket.positions.BOTTOM,
            text: '',
            superscript: '',
            startSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default,
            endSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default
        }));
    }
    static get positions() {
        // matches VF.modifier
        return {
            TOP: 1,
            BOTTOM: -1
        };
    }
    static get attributes() {
        return ['startSelector', 'endSelector', 'line', 'position', 'text', 'superscript'];
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoStaffTextBracket.defaults, SmoStaffTextBracket.attributes, this, params);
        params.ctor = 'SmoStaffTextBracket';
        if (!isSmoStaffTextBracketParamsSer(params)) {
            throw (' bad text bracket ' + JSON.stringify(params));
        }
        return params;
    }
    constructor(params) {
        super('SmoStaffTextBracket');
        this.position = SmoStaffTextBracket.positions.BOTTOM;
        this.text = '';
        this.superscript = '';
        this.line = 1;
        this.startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        this.endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoStaffTextBracket.attributes, SmoStaffTextBracket.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoStaffTextBracket.attributes, params, this);
        this.startSelector = JSON.parse(JSON.stringify(params.startSelector));
        this.endSelector = JSON.parse(JSON.stringify(params.endSelector));
        if (!this.attrs) {
            this.attrs = {
                id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
                type: 'SmoStaffTextBracket'
            };
        }
    }
}
SmoStaffTextBracket.RITARD = 'ritard';
SmoStaffTextBracket.ACCEL = 'accelerando';
SmoStaffTextBracket.CRESCENDO = 'crescendo';
SmoStaffTextBracket.DIMENUENDO = 'diminuendo';
SmoStaffTextBracket.OCTAVEUP = '8va';
SmoStaffTextBracket.OCTAVEDOWN = '8vb';
SmoStaffTextBracket.OCTAVEUP2 = '15va';
SmoStaffTextBracket.OCTAVE2DOWN = '15vb';
const SlurNumberParams = ['spacing', 'thickness', 'xOffset', 'yOffset', 'position',
    'position_end', 'cp1x', 'cp1y', 'cp2x', 'cp2y'];
function isSmoSlurParamsSer(params) {
    if (params && params.ctor && params.ctor === 'SmoSlur') {
        return true;
    }
    return false;
}
/**
 * Defines a slur
 * @category SmoModifier
 */
class SmoSlur extends StaffModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            spacing: 2,
            thickness: 2,
            xOffset: 5,
            yOffset: 0,
            position: SmoSlur.positions.TOP,
            position_end: SmoSlur.positions.TOP,
            orientation: SmoSlur.orientations.AUTO,
            invert: false,
            cp1x: 0,
            cp1y: 15,
            cp2x: 0,
            cp2y: 15,
            startSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default,
            endSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default
        }));
    }
    // matches VF curve
    static get positions() {
        return {
            HEAD: 1,
            TOP: 2,
            ABOVE: 3,
            BELOW: 4,
            AUTO: 5
        };
    }
    static get orientations() {
        return {
            AUTO: 0,
            UP: 1,
            DOWN: 2
        };
    }
    static get parameterArray() {
        return ['startSelector', 'endSelector', 'spacing', 'xOffset', 'yOffset', 'position', 'position_end', 'invert',
            'orientation', 'cp1x', 'cp1y', 'cp2x', 'cp2y', 'thickness', 'pitchesStart', 'pitchesEnd'];
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoSlur.defaults, SmoSlur.parameterArray, this, params);
        params.ctor = 'SmoSlur';
        if (!isSmoSlurParamsSer(params)) {
            throw ('bad slur ' + JSON.stringify(params));
        }
        return params;
    }
    get controlPoints() {
        const ar = [{
                x: this.cp1x,
                y: this.cp1y
            }, {
                x: this.cp2x,
                y: this.cp2y
            }];
        return ar;
    }
    constructor(params) {
        super('SmoSlur');
        this.spacing = 2;
        this.thickness = 2;
        this.xOffset = -5;
        this.yOffset = 10;
        this.position = SmoSlur.positions.TOP;
        this.position_end = SmoSlur.positions.TOP;
        this.orientation = SmoSlur.orientations.AUTO;
        this.invert = false;
        this.cp1x = 0;
        this.cp1y = 15;
        this.cp2x = 0;
        this.cp2y = 15;
        this.startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        this.endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoSlur.parameterArray, SmoSlur.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoSlur.parameterArray, params, this);
        this.startSelector = params.startSelector;
        this.endSelector = params.endSelector;
        // Fix some earlier serialization error.    
        if (!this.attrs) {
            this.attrs = {
                id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
                type: 'SmoSlur'
            };
        }
    }
}
function isSmoTieParamsSer(params) {
    if (params.ctor && params.ctor === 'SmoTie') {
        return true;
    }
    return false;
}
/**
 * Like slur, but multiple pitches.
 * @category SmoModifier
 */
class SmoTie extends StaffModifierBase {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            invert: false,
            cp1: 8,
            cp2: 12,
            y_shift: 7,
            first_x_shift: 0,
            last_x_shift: 0,
            lines: [],
            startSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default,
            endSelector: _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default
        }));
    }
    static get parameterArray() {
        return ['startSelector', 'endSelector', 'invert', 'lines', 'y_shift', 'tie_spacing', 'cp1', 'cp2', 'first_x_shift', 'last_x_shift'];
    }
    static get vexParameters() {
        return ['cp1', 'cp2', 'first_x_shift', 'last_x_shift', 'y_shift'];
    }
    static isTie(modifier) {
        return modifier.ctor === 'SmoTie';
    }
    static createLines(fromNote, toNote) {
        const maxPitches = Math.max(fromNote.pitches.length, toNote.pitches.length);
        let i = 0;
        const lines = [];
        // By default, just tie all the pitches to all the other pitches in order
        for (i = 0; i < maxPitches; ++i) {
            const from = i < fromNote.pitches.length ? i : fromNote.pitches.length - 1;
            const to = i < toNote.pitches.length ? i : toNote.pitches.length - 1;
            lines.push({ from, to });
        }
        return lines;
    }
    get vexOptions() {
        const rv = {};
        rv.direction = this.invert ? VF.Stem.DOWN : VF.Stem.UP;
        SmoTie.vexParameters.forEach((p) => {
            rv[p] = this[p];
        });
        return rv;
    }
    serialize() {
        const params = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoTie.defaults, SmoTie.parameterArray, this, params);
        params.ctor = 'SmoTie';
        if (!isSmoTieParamsSer(params)) {
            throw 'bad tie ' + JSON.stringify(params);
        }
        return params;
    }
    // ### checkLines
    // If the note chords have changed, the lines may no longer be valid so update them
    checkLines(fromNote, toNote) {
        const maxTo = this.lines.map((ll) => ll.to).reduce((a, b) => a > b ? a : b);
        const maxFrom = this.lines.map((ll) => ll.from).reduce((a, b) => a > b ? a : b);
        if (maxTo < toNote.pitches.length && maxFrom < fromNote.pitches.length) {
            return;
        }
        this.lines = SmoTie.createLines(fromNote, toNote);
    }
    constructor(params) {
        super('SmoTie');
        this.invert = false;
        this.cp1 = 8;
        this.cp2 = 12;
        this.first_x_shift = 0;
        this.last_x_shift = 0;
        this.y_shift = 7;
        this.tie_spacing = 0;
        this.lines = [];
        this.startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        this.endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTie.parameterArray, SmoTie.defaults, this);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTie.parameterArray, params, this);
        if (!this.attrs) {
            this.attrs = {
                id: (0,_common__WEBPACK_IMPORTED_MODULE_2__.getId)().toString(),
                type: 'SmoTie'
            };
        }
    }
}


/***/ }),

/***/ "./src/smo/data/systemStaff.ts":
/*!*************************************!*\
  !*** ./src/smo/data/systemStaff.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoSystemStaff: () => (/* binding */ SmoSystemStaff)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _measureModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _staffModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _partInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./partInfo */ "./src/smo/data/partInfo.ts");
/* harmony import */ var _scoreText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _xform_beamers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../xform/beamers */ "./src/smo/xform/beamers.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to support a {@link SmoSystemStaff}, which is a container for measures and
 * staff modifiers.
 * @module /smo/data/systemStaff
 * **/











const VF = _common_vex__WEBPACK_IMPORTED_MODULE_10__.VexFlow;
function isSmoSystemStaffParamsSer(params) {
    if (!(typeof (params.ctor) === 'string' && params.ctor === 'SmoSystemStaff')) {
        return false;
    }
    if (!(Array.isArray(params.measures))) {
        return false;
    }
    return true;
}
/**
 * A staff is a line of music that can span multiple measures.
 * A system is a line of music for each staff in the score.  So a staff
 * spans multiple systems.
 * A staff modifier connects 2 points in the staff.
 * @category SmoObject
 * */
class SmoSystemStaff {
    /**
     * Gets the instrument assigned to a given measure
     * @param measureInstrumentMap
     * @param measureIndex
     * @returns
     */
    static getStaffInstrument(measureInstrumentMap, measureIndex) {
        const keyar = Object.keys(measureInstrumentMap);
        let fit = 0;
        keyar.forEach((key) => {
            const numkey = parseInt(key, 10);
            if (numkey <= measureIndex && numkey > fit) {
                fit = numkey;
            }
        });
        return measureInstrumentMap[fit];
    }
    static getStaffInstrumentArray(measureInstrumentMap) {
        const rv = [];
        const keyar = Object.keys(measureInstrumentMap);
        keyar.forEach((key) => {
            const measureIndex = parseInt(key, 10);
            rv.push({ measureIndex, instrument: measureInstrumentMap[measureIndex] });
        });
        return rv;
    }
    // ### defaults
    // default values for all instances
    static get defaults() {
        return JSON.parse(JSON.stringify({
            staffId: 0,
            renumberingMap: {},
            keySignatureMap: {},
            measureInstrumentMap: {},
            textBrackets: [],
            measures: [],
            modifiers: []
        }));
    }
    setMappedStaffId(value) {
        this._mappedStaffId = value;
    }
    getMappedStaffId() {
        return this._mappedStaffId;
    }
    constructor(params) {
        var _a;
        this.staffId = 0;
        this.renumberingMap = {};
        this.keySignatureMap = {};
        this.measureInstrumentMap = {};
        this.measures = [];
        this.modifiers = [];
        this.textBrackets = [];
        this.bracketMap = {};
        this.attrs = {
            id: '',
            type: 'SmoSystemStaff'
        };
        this.ctor = 'SmoSystemStaff';
        this._mappedStaffId = 0;
        this.staffId = params.staffId;
        this.measures = params.measures;
        this.modifiers = params.modifiers;
        this.textBrackets = (_a = params.textBrackets) !== null && _a !== void 0 ? _a : [];
        this.renumberingMap = params.renumberingMap;
        if (Object.keys(params.measureInstrumentMap).length === 0) {
            const instrument = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument(_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument.defaults);
            instrument.startSelector.staff = instrument.endSelector.staff = this.staffId;
            instrument.endSelector.measure = this.measures.length - 1;
            this.measureInstrumentMap[0] = instrument;
        }
        else {
            const keys = Object.keys(params.measureInstrumentMap);
            keys.forEach((p, ix) => {
                const pnum = parseInt(p, 10);
                const instrument = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument(params.measureInstrumentMap[pnum]);
                instrument.startSelector.staff = instrument.endSelector.staff = this.staffId;
                // Make sure transposition goes to the end stave of the song.
                if (ix === keys.length - 1) {
                    instrument.endSelector.measure = this.measures.length - 1;
                }
                this.measureInstrumentMap[pnum] = instrument;
            });
        }
        if (this.measures.length) {
            this.numberMeasures();
        }
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_0__.getId)().toString(),
            type: 'SmoSystemStaff'
        };
        if (params.partInfo) {
            this.partInfo = params.partInfo;
        }
        else {
            const staveNo = this.staffId + 1;
            const partDefs = _partInfo__WEBPACK_IMPORTED_MODULE_5__.SmoPartInfo.defaults;
            partDefs.partName = 'Staff ' + staveNo;
            partDefs.partAbbreviation = staveNo.toString() + '.';
            this.partInfo = new _partInfo__WEBPACK_IMPORTED_MODULE_5__.SmoPartInfo(partDefs);
        }
    }
    // ### defaultParameters
    // the parameters that get saved with the score.
    static get defaultParameters() {
        return [
            'renumberingMap', 'keySignatureMap', 'instrumentInfo'
        ];
    }
    get renderableModifiers() {
        const rv = this.modifiers.concat(this.textBrackets);
        return rv;
    }
    // ### serialize
    // JSONify self.
    serialize() {
        const params = {
            ctor: 'SmoSystemStaff'
        };
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_9__.smoSerialize.serializedMerge(SmoSystemStaff.defaultParameters, this, params);
        params.measures = [];
        params.measureInstrumentMap = {};
        const ikeys = Object.keys(this.measureInstrumentMap);
        ikeys.forEach((ikey) => {
            params.measureInstrumentMap[parseInt(ikey, 10)] = this.measureInstrumentMap[parseInt(ikey, 10)].serialize();
        });
        this.measures.forEach((measure) => {
            params.measures.push(measure.serialize());
        });
        params.modifiers = [];
        this.modifiers.forEach((modifier) => {
            params.modifiers.push(modifier.serialize());
        });
        this.textBrackets.forEach((bracket) => {
            params.modifiers.push(bracket.serialize());
        });
        params.partInfo = this.partInfo.serialize();
        if (!isSmoSystemStaffParamsSer(params)) {
            throw ('bad staff ' + JSON.stringify(params));
        }
        return params;
    }
    // ### deserialize
    // parse formerly serialized staff.
    static deserialize(jsonObj) {
        var _a, _b, _c;
        const params = SmoSystemStaff.defaults;
        params.staffId = (_a = jsonObj.staffId) !== null && _a !== void 0 ? _a : 0;
        params.measures = [];
        params.modifiers = [];
        params.textBrackets = [];
        params.renumberingMap = (_b = jsonObj.renumberingMap) !== null && _b !== void 0 ? _b : {};
        if (jsonObj.partInfo) {
            // Deserialize the text groups first
            const tgs = [];
            jsonObj.partInfo.textGroups.forEach((tgSer) => {
                tgs.push(_scoreText__WEBPACK_IMPORTED_MODULE_6__.SmoTextGroup.deserializePreserveId(tgSer));
            });
            jsonObj.partInfo.textGroups = tgs;
            params.partInfo = _partInfo__WEBPACK_IMPORTED_MODULE_5__.SmoPartInfo.deserialize(jsonObj.partInfo);
        }
        // Up-convert legacy instrument info, which was split between different objects
        if (!jsonObj.measureInstrumentMap) {
            const jsonLegacy = jsonObj;
            if (jsonLegacy.instrumentInfo) {
                const defs = _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument.defaults;
                defs.keyOffset = jsonLegacy.instrumentInfo.keyOffset;
                defs.clef = jsonLegacy.instrumentInfo.clef;
                defs.instrumentName = jsonLegacy.instrumentInfo.instrumentName;
                const ii = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument(defs);
                params.measureInstrumentMap = { 0: ii };
            }
            else {
                const ii = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument(_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument.defaults);
                params.measureInstrumentMap = { 0: ii };
            }
            params.measureInstrumentMap[0].startSelector.staff = params.staffId;
            params.measureInstrumentMap[0].endSelector.staff = params.staffId;
            params.measureInstrumentMap[0].endSelector.measure = jsonObj.measures.length - 1;
            params.measureInstrumentMap[0].keyOffset = (_c = jsonObj.measures[0].transposeIndex) !== null && _c !== void 0 ? _c : 0;
        }
        else {
            const ikeys = Object.keys(jsonObj.measureInstrumentMap);
            ikeys.forEach((ikey) => {
                const ix = parseInt(ikey, 10);
                const inst = jsonObj.measureInstrumentMap[ix];
                const defs = _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument.defaults;
                _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrumentStringParams.forEach((str) => {
                    if (typeof (inst[str]) === 'string') {
                        defs[str] = inst[str];
                    }
                });
                _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrumentNumParams.forEach((str) => {
                    if (typeof (inst[str]) === 'number') {
                        defs[str] = inst[str];
                    }
                });
                if (typeof (inst.startSelector) !== 'undefined') {
                    defs.startSelector = inst.startSelector;
                }
                if (typeof (inst.endSelector) !== 'undefined') {
                    defs.endSelector = inst.endSelector;
                }
                params.measureInstrumentMap[ix] = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument(defs);
            });
        }
        const instrumentAr = SmoSystemStaff.getStaffInstrumentArray(params.measureInstrumentMap);
        let curInstrumentIndex = 0;
        jsonObj.measures.forEach((measureObj) => {
            const measure = _measure__WEBPACK_IMPORTED_MODULE_2__.SmoMeasure.deserialize(measureObj);
            if (instrumentAr.length > (curInstrumentIndex + 1) && measure.measureNumber.measureIndex >=
                instrumentAr[curInstrumentIndex + 1].measureIndex) {
                curInstrumentIndex += 1;
            }
            measure.transposeIndex = instrumentAr[curInstrumentIndex].instrument.keyOffset;
            params.measures.push(measure);
        });
        if (jsonObj.modifiers) {
            jsonObj.modifiers.forEach((modParams) => {
                const mod = _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.StaffModifierBase.deserialize(modParams);
                mod.associatedStaff = jsonObj.staffId;
                if (mod.ctor === 'SmoStaffTextBracket') {
                    params.textBrackets.push(mod);
                }
                else {
                    params.modifiers.push(mod);
                }
            });
        }
        const rv = new SmoSystemStaff(params);
        return rv;
    }
    /**
     * We have created a score with staff mappings.  Update the selectors in staff modifiers so that
     * 'from' in the staff slot is 'to'
     */
    mapStaffFromTo(from, to) {
        if (from === to) {
            return;
        }
        this.modifiers.forEach((mod) => {
            if (mod.startSelector.staff === from) {
                mod.startSelector.staff = to;
            }
            if (mod.endSelector.staff === from) {
                mod.endSelector.staff = to;
            }
            mod.associatedStaff = to; // this.staffId will remap to 'to' value
        });
    }
    updateMeasureFormatsForPart() {
        this.measures.forEach((measure, mix) => {
            if (this.partInfo.measureFormatting[mix]) {
                measure.format = new _measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoMeasureFormat(this.partInfo.measureFormatting[mix]);
            }
            else {
                measure.format = new _measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoMeasureFormat(_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoMeasureFormat.defaults);
            }
        });
    }
    /**
     * Get the active instrument at the given measure
     * @param measureIndex
     * @returns
     */
    getStaffInstrument(measureIndex) {
        return SmoSystemStaff.getStaffInstrument(this.measureInstrumentMap, measureIndex);
    }
    getInstrumentList() {
        const rv = [];
        const keys = Object.keys(this.measureInstrumentMap);
        keys.forEach((key) => {
            rv.push(this.getStaffInstrument(parseInt(key)));
        });
        return rv;
    }
    updateInstrumentOffsets() {
        const ar = SmoSystemStaff.getStaffInstrumentArray(this.measureInstrumentMap);
        ar.forEach((entry) => {
            let i = entry.instrument.startSelector.measure;
            for (i; i <= entry.instrument.endSelector.measure && i < this.measures.length; ++i) {
                const measure = this.measures[i];
                const concertKey = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySigWithOffset(measure.keySignature, -1 * measure.transposeIndex);
                const targetKey = _music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexKeySigWithOffset(concertKey, entry.instrument.keyOffset);
                measure.transposeToOffset(entry.instrument.keyOffset, targetKey, entry.instrument.clef);
                measure.transposeIndex = entry.instrument.keyOffset;
                measure.keySignature = targetKey;
                measure.setClef(entry.instrument.clef);
            }
        });
    }
    isRest(index) {
        return this.measures[index].isRest();
    }
    isRepeat(index) {
        const specialBar = !(this.measures[index].getEndBarline().barline === _measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar &&
            (this.measures[index].getStartBarline().barline === _measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar ||
                this.measures[index].getStartBarline().barline === _measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.noBar));
        return specialBar || this.measures[index].repeatSymbol;
    }
    isRepeatSymbol(index) {
        return this.measures[index].repeatSymbol;
    }
    isRehearsal(index) {
        return !(typeof (this.measures[index].getRehearsalMark()) === 'undefined');
    }
    // ### addStaffModifier
    // add a staff modifier, or replace a modifier of same type
    // with same endpoints.
    addStaffModifier(modifier) {
        this.removeStaffModifier(modifier);
        this.modifiers.push(modifier);
        modifier.associatedStaff = this.staffId;
    }
    // ### removeStaffModifier
    // Remove a modifier of given type and location
    removeStaffModifier(modifier) {
        const mods = [];
        const tbs = [];
        this.renderableModifiers.forEach((mod) => {
            if (mod.attrs.type !== modifier.attrs.type ||
                _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.neq(mod.startSelector, modifier.startSelector) ||
                _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.neq(mod.endSelector, modifier.endSelector)) {
                if (mod.ctor === 'SmoStaffTextBracket') {
                    tbs.push(mod);
                }
                else {
                    mods.push(mod);
                }
            }
        });
        this.textBrackets = tbs;
        this.modifiers = mods;
    }
    // ### getVoltaMap
    getVoltaMap(startIndex, endIndex) {
        const rv = [];
        this.measures.forEach((measure) => {
            measure.getNthEndings().forEach((ending) => {
                if (ending.startBar >= startIndex && ending.endBar <= endIndex) {
                    rv.push(ending);
                }
            });
        });
        return rv;
    }
    getVoltasForMeasure(ix) {
        const rv = [];
        this.measures.forEach((measure) => {
            measure.getNthEndings().forEach((ending) => {
                var _a, _b;
                if (((_a = ending.startSelector) === null || _a === void 0 ? void 0 : _a.measure) === ix || ((_b = ending.endSelector) === null || _b === void 0 ? void 0 : _b.measure) === ix) {
                    rv.push(ending);
                }
            });
        });
        return rv;
    }
    // ### getModifiersAt
    // get any modifiers at the selected location
    getModifiersAt(selector) {
        const rv = [];
        this.modifiers.forEach((mod) => {
            if (_xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.sameNote(mod.startSelector, selector)) {
                rv.push(mod);
            }
        });
        return rv;
    }
    getModifier(modData) {
        return this.getModifiers().find((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.eq(mod.startSelector, modData.startSelector) && mod.attrs.type === modData.attrs.type);
    }
    setLyricFont(fontInfo) {
        this.measures.forEach((measure) => {
            measure.setLyricFont(fontInfo);
        });
    }
    setLyricAdjustWidth(adjustNoteWidth) {
        this.measures.forEach((measure) => {
            measure.setLyricAdjustWidth(adjustNoteWidth);
        });
    }
    setChordFont(fontInfo) {
        this.measures.forEach((measure) => {
            measure.setChordFont(fontInfo);
        });
    }
    setChordAdjustWidth(adjustNoteWidth) {
        this.measures.forEach((measure) => {
            measure.setChordAdjustWidth(adjustNoteWidth);
        });
    }
    addTextBracket(bracketParams) {
        const nb = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoStaffTextBracket(bracketParams);
        const brackets = this.textBrackets.filter((tb) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.lteq(tb.startSelector, nb.startSelector)
            || _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.gteq(tb.endSelector, nb.startSelector) || tb.position !== nb.position);
        brackets.push(new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoStaffTextBracket(bracketParams));
        this.textBrackets = brackets;
    }
    removeTextBracket(bracketParams) {
        const nb = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoStaffTextBracket(bracketParams);
        const brackets = this.textBrackets.filter((tb) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.lteq(tb.startSelector, nb.startSelector)
            || _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.gteq(tb.endSelector, nb.startSelector) || tb.position !== nb.position);
        this.textBrackets = brackets;
    }
    getTextBracketsStartingAt(selector) {
        return this.textBrackets.filter((tb) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.eq(tb.startSelector, selector));
    }
    // ### getSlursStartingAt
    // like it says.  Used by audio player to slur notes
    getSlursStartingAt(selector) {
        return this.modifiers.filter((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.sameNote(mod.startSelector, selector) && mod.attrs.type === 'SmoSlur');
    }
    // ### getSlursEndingAt
    // like it says.
    getSlursEndingAt(selector) {
        return this.modifiers.filter((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.sameNote(mod.endSelector, selector));
    }
    getTiesStartingAt(selector) {
        return this.modifiers.filter((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.sameNote(mod.startSelector, selector) && mod.attrs.type === 'SmoTie');
    }
    getTiesEndingAt(selector) {
        return this.modifiers.filter((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_7__.SmoSelector.sameNote(mod.endSelector, selector) && mod.attrs.type === 'SmoTie');
    }
    // ### accesor getModifiers
    getModifiers() {
        return this.modifiers;
    }
    // ### applyBeams
    // group all the measures' notes into beam groups.
    applyBeams() {
        for (let i = 0; i < this.measures.length; ++i) {
            const measure = this.measures[i];
            _xform_beamers__WEBPACK_IMPORTED_MODULE_8__.SmoBeamer.applyBeams(measure);
        }
    }
    // ### addRehearsalMark
    // for all measures in the system, and also bump the
    // auto-indexing
    addRehearsalMark(index, parameters) {
        let i = 0;
        let symbol = '';
        var mark = new _measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoRehearsalMark(parameters);
        if (!mark.increment) {
            this.measures[index].addRehearsalMark(mark);
            return;
        }
        symbol = mark.symbol;
        for (i = 0; i < this.measures.length; ++i) {
            const mm = this.measures[i];
            if (i < index) {
                const rm = mm.getRehearsalMark();
                if (rm && rm.cardinality === mark.cardinality && rm.increment) {
                    symbol = rm.getIncrement();
                    mark.symbol = symbol;
                }
            }
            if (i === index) {
                mm.addRehearsalMark(mark);
                symbol = mark.getIncrement();
            }
            if (i > index) {
                const rm = mm.getRehearsalMark();
                if (rm && rm.cardinality === mark.cardinality && rm.increment) {
                    rm.symbol = symbol;
                    symbol = rm.getIncrement();
                }
            }
        }
    }
    removeTempo(index) {
        this.measures[index].resetTempo();
    }
    addTempo(tempo, index) {
        this.measures[index].setTempo(tempo);
    }
    // ### removeRehearsalMark
    // for all measures in the system, and also decrement the
    // auto-indexing
    removeRehearsalMark(index) {
        let ix = 0;
        let symbol = null;
        let card = null;
        this.measures.forEach((measure) => {
            if (ix === index) {
                const mark = measure.getRehearsalMark();
                if (mark) {
                    symbol = mark.symbol;
                    card = mark.cardinality;
                }
                measure.removeRehearsalMark();
            }
            if (ix > index && symbol && card) {
                const mark = measure.getRehearsalMark();
                if (mark && mark.increment) {
                    mark.symbol = symbol;
                    symbol = mark.getIncrement();
                }
            }
            ix += 1;
        });
    }
    // ### deleteMeasure
    // delete the measure, and any staff modifiers that start/end there.
    deleteMeasure(index) {
        if (this.measures.length < 2) {
            return; // don't delete last measure.
        }
        const nm = [];
        this.measures.forEach((measure) => {
            if (measure.measureNumber.measureIndex !== index) {
                nm.push(measure);
            }
        });
        const sm = [];
        this.modifiers.forEach((mod) => {
            // Bug: if we are deleting a measure before the selector, change the measure number.
            if (mod.startSelector.measure !== index && mod.endSelector.measure !== index) {
                if (index < mod.startSelector.measure) {
                    mod.startSelector.measure -= 1;
                }
                if (index < mod.endSelector.measure) {
                    mod.endSelector.measure -= 1;
                }
                sm.push(mod);
            }
        });
        const instMap = {};
        SmoSystemStaff.getStaffInstrumentArray(this.measureInstrumentMap).forEach((mm) => {
            if (mm.instrument.startSelector.measure > index || mm.instrument.startSelector.measure > this.measures.length - 1) {
                mm.instrument.startSelector.measure -= 1;
            }
            if (mm.instrument.endSelector.measure > index || mm.instrument.endSelector.measure > this.measures.length - 1) {
                mm.instrument.endSelector.measure -= 1;
            }
            instMap[mm.instrument.startSelector.measure] = new _staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoInstrument(mm.instrument);
        });
        this.measures = nm;
        this.modifiers = sm;
        this.numberMeasures();
    }
    // ### addKeySignature
    // Add key signature to the given measure and update map so we know
    // when it changes, cancels etc.
    addKeySignature(measureIndex, key) {
        this.keySignatureMap[measureIndex] = key;
        const target = this.measures[measureIndex];
        target.keySignature = key;
    }
    _updateKeySignatures() {
        let i = 0;
        const currentSig = this.measures[0].keySignature;
        for (i = 0; i < this.measures.length; ++i) {
            const measure = this.measures[i];
            const nextSig = this.keySignatureMap[i] ? this.keySignatureMap[i] : currentSig;
            measure.setKeySignature(nextSig);
        }
    }
    // ### numberMeasures
    // After anything that might change the measure numbers, update them iteratively
    numberMeasures() {
        let i = 0;
        let localIndex = 0;
        for (i = 0; i < this.measures.length; ++i) {
            const measure = this.measures[i];
            if (typeof (this.renumberingMap[i]) === 'number') {
                localIndex = this.renumberingMap[i];
            }
            else {
                localIndex += 1;
            }
            // If this is the first full measure, call it '1'
            const numberObj = {
                localIndex,
                measureIndex: i,
                systemIndex: i,
                staffId: this.staffId
            };
            measure.setMeasureNumber(numberObj);
        }
    }
    addDefaultMeasure(index, params) {
        const measure = _measure__WEBPACK_IMPORTED_MODULE_2__.SmoMeasure.getDefaultMeasure(params);
        this.addMeasure(index, measure);
    }
    // ## addMeasure
    // ## Description:
    // Add the measure at the specified index, splicing the array as required.
    addMeasure(index, measure) {
        if (index === 0 && this.measures.length) {
            measure.setMeasureNumber(this.measures[0].measureNumber);
        }
        if (index >= this.measures.length) {
            this.measures.push(measure);
        }
        else {
            this.measures.splice(index, 0, measure);
        }
        const modifiers = this.modifiers.filter((mod) => mod.startSelector.measure >= index);
        modifiers.forEach((mod) => {
            if (mod.startSelector.measure < this.measures.length) {
                mod.startSelector.measure += 1;
            }
            if (mod.endSelector.measure < this.measures.length) {
                mod.endSelector.measure += 1;
            }
        });
        this.numberMeasures();
    }
}


/***/ }),

/***/ "./src/smo/data/tuplet.ts":
/*!********************************!*\
  !*** ./src/smo/data/tuplet.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoTuplet: () => (/* binding */ SmoTuplet)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ "./src/smo/data/note.ts");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./music */ "./src/smo/data/music.ts");
/* harmony import */ var _noteModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common */ "./src/smo/data/common.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to support {@link SmoTuplet}
 * @module /smo/data/tuplet
 */





/**
 * tuplets must be serialized with their id attribute, enforce this
 * @param params a possible-valid SmoTupletParamsSer
 * @returns
 */
function isSmoTupletParamsSer(params) {
    if (!params.ctor || !(params.ctor === 'SmoTuplet')) {
        return false;
    }
    if (!params.attrs || !(typeof (params.attrs.id) === 'string')) {
        return false;
    }
    return true;
}
/**
 * A tuplet is a container for notes within a measure
 * @category SmoObject
 */
class SmoTuplet {
    static get defaults() {
        return JSON.parse(JSON.stringify({
            notes: [],
            numNotes: 3,
            stemTicks: 2048,
            totalTicks: 4096, // how many ticks this tuple takes up
            durationMap: [1.0, 1.0, 1.0],
            bracketed: true,
            voice: 0,
            ratioed: false,
            startIndex: 0
        }));
    }
    get clonedParams() {
        const paramAr = ['stemTicks', 'ticks', 'totalTicks', 'durationMap', 'numNotes'];
        const rv = {};
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(paramAr, this, rv);
        return rv;
    }
    static get parameterArray() {
        return ['stemTicks', 'ticks', 'totalTicks',
            'durationMap', 'attrs', 'ratioed', 'bracketed', 'voice', 'startIndex', 'numNotes'];
    }
    serialize() {
        const params = {
            notes: []
        };
        this.notes.forEach((nn) => {
            params.notes.push(nn.serialize());
        });
        params.ctor = 'SmoTuplet';
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMergeNonDefault(SmoTuplet.defaults, SmoTuplet.parameterArray, this, params);
        if (!isSmoTupletParamsSer(params)) {
            throw 'bad tuplet ' + JSON.stringify(params);
        }
        return params;
    }
    static calculateStemTicks(totalTicks, numNotes) {
        const stemValue = totalTicks / numNotes;
        let stemTicks = SmoTuplet.longestTuplet;
        // The stem value is the type on the non-tuplet note, e.g. 1/8 note
        // for a triplet.
        while (stemValue < stemTicks) {
            stemTicks = stemTicks / 2;
        }
        return stemTicks * 2;
    }
    constructor(params) {
        this.numNotes = 3;
        this.stemTicks = 2048;
        this.totalTicks = 4096;
        this.durationMap = [1.0, 1.0, 1.0];
        this.bracketed = true;
        this.voice = 0;
        this.ratioed = false;
        this.startIndex = 0;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.vexMerge(this, SmoTuplet.defaults);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.serializedMerge(SmoTuplet.parameterArray, params, this);
        this.notes = params.notes;
        this.attrs = {
            id: (0,_common__WEBPACK_IMPORTED_MODULE_4__.getId)().toString(),
            type: 'SmoTuplet'
        };
        this._adjustTicks();
    }
    static get longestTuplet() {
        return 8192;
    }
    static cloneTuplet(tuplet) {
        let i = 0;
        const noteAr = tuplet.notes;
        const durationMap = JSON.parse(JSON.stringify(tuplet.durationMap)); // deep copy array
        // Add any remainders for oddlets
        const totalTicks = noteAr.map((nn) => nn.ticks.numerator + nn.ticks.remainder)
            .reduce((acc, nn) => acc + nn);
        const numNotes = tuplet.numNotes;
        const stemTicks = SmoTuplet.calculateStemTicks(totalTicks, numNotes);
        const tupletNotes = [];
        noteAr.forEach((note) => {
            const textModifiers = note.textModifiers;
            // Note preserver remainder
            note = _note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.cloneWithDuration(note, {
                numerator: stemTicks * tuplet.durationMap[i],
                denominator: 1,
                remainder: note.ticks.remainder
            });
            // Don't clone modifiers, except for first one.
            if (i === 0) {
                const ntmAr = [];
                textModifiers.forEach((tm) => {
                    const ntm = _noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoNoteModifierBase.deserialize(tm);
                    ntmAr.push(ntm);
                });
                note.textModifiers = ntmAr;
            }
            i += 1;
            tupletNotes.push(note);
        });
        const rv = new SmoTuplet({
            numNotes: tuplet.numNotes,
            voice: tuplet.voice,
            notes: tupletNotes,
            stemTicks,
            totalTicks,
            ratioed: false,
            bracketed: true,
            startIndex: tuplet.startIndex,
            durationMap
        });
        return rv;
    }
    _adjustTicks() {
        let i = 0;
        const sum = this.durationSum;
        for (i = 0; i < this.notes.length; ++i) {
            const note = this.notes[i];
            // TODO:  notes_occupied needs to consider vex duration
            note.ticks.denominator = 1;
            note.ticks.numerator = Math.floor((this.totalTicks * this.durationMap[i]) / sum);
            note.tuplet = this.attrs;
        }
        // put all the remainder in the first note of the tuplet
        const noteTicks = this.notes.map((nn) => nn.tickCount)
            .reduce((acc, dd) => acc + dd);
        // bug fix:  if this is a clones tuplet, remainder is already set
        this.notes[0].ticks.remainder =
            this.notes[0].ticks.remainder + this.totalTicks - noteTicks;
    }
    getIndexOfNote(note) {
        let rv = -1;
        let i = 0;
        if (!note) {
            return -1;
        }
        for (i = 0; i < this.notes.length; ++i) {
            const tn = this.notes[i];
            if (note.attrs.id === tn.attrs.id) {
                rv = i;
            }
        }
        return rv;
    }
    split(combineIndex) {
        let i = 0;
        const multiplier = 0.5;
        const nnotes = [];
        const nmap = [];
        for (i = 0; i < this.notes.length; ++i) {
            const note = this.notes[i];
            if (i === combineIndex) {
                nmap.push(this.durationMap[i] * multiplier);
                nmap.push(this.durationMap[i] * multiplier);
                note.ticks.numerator *= multiplier;
                const onote = _note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.clone(note);
                // remainder is for the whole tuplet, so don't duplicate that.
                onote.ticks.remainder = 0;
                nnotes.push(note);
                nnotes.push(onote);
            }
            else {
                nmap.push(this.durationMap[i]);
                nnotes.push(note);
            }
        }
        this.notes = nnotes;
        this.durationMap = nmap;
    }
    combine(startIndex, endIndex) {
        let i = 0;
        let base = 0.0;
        let acc = 0.0;
        // can't combine in this way, too many notes
        if (this.notes.length <= endIndex || startIndex >= endIndex) {
            return this;
        }
        for (i = startIndex; i <= endIndex; ++i) {
            acc += this.durationMap[i];
            if (i === startIndex) {
                base = this.durationMap[i];
            }
            else if (this.durationMap[i] !== base) {
                // Can't combine non-equal tuplet notes
                return this;
            }
        }
        // how much each combined value will be multiplied by
        const multiplier = acc / base;
        const nmap = [];
        const nnotes = [];
        // adjust the duration map
        for (i = 0; i < this.notes.length; ++i) {
            const note = this.notes[i];
            // notes that don't change are unchanged
            if (i < startIndex || i > endIndex) {
                nmap.push(this.durationMap[i]);
                nnotes.push(note);
            }
            // changed note with combined duration
            if (i === startIndex) {
                note.ticks.numerator = note.ticks.numerator * multiplier;
                nmap.push(acc);
                nnotes.push(note);
            }
            // other notes after startIndex are removed from the map.
        }
        this.notes = nnotes;
        this.durationMap = nmap;
        return this;
    }
    // ### getStemDirection
    // Return the stem direction, so we can bracket the correct place
    getStemDirection(clef) {
        const note = this.notes.find((nn) => nn.noteType === 'n');
        if (!note) {
            return _note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.down;
        }
        if (note.flagState !== _note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.auto) {
            return note.flagState;
        }
        return _music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.pitchToLedgerLine(clef, note.pitches[0])
            >= 2 ? _note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.up : _note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.down;
    }
    get durationSum() {
        let acc = 0;
        let i = 0;
        for (i = 0; i < this.durationMap.length; ++i) {
            acc += this.durationMap[i];
        }
        return Math.round(acc);
    }
    get num_notes() {
        return this.durationSum;
    }
    get notes_occupied() {
        return Math.floor(this.totalTicks / this.stemTicks);
    }
    get note_ticks_occupied() {
        return this.totalTicks / this.stemTicks;
    }
    get tickCount() {
        let rv = 0;
        let i = 0;
        for (i = 0; i < this.notes.length; ++i) {
            const note = this.notes[i];
            rv += (note.ticks.numerator / note.ticks.denominator) + note.ticks.remainder;
        }
        return rv;
    }
}


/***/ }),

/***/ "./src/smo/midi/midiToSmo.ts":
/*!***********************************!*\
  !*** ./src/smo/midi/midiToSmo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MidiToSmo: () => (/* binding */ MidiToSmo)
/* harmony export */ });
/* harmony import */ var _data_measure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_score__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_systemStaff__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _data_tuplet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/tuplet */ "./src/smo/data/tuplet.ts");








function getValueForTick(arg, tick) {
    const keys = Object.keys(arg);
    let maxKey = 0;
    let rv = arg[0];
    keys.forEach((key) => {
        const keyInt = parseInt(key, 10);
        if (keyInt <= tick && keyInt > maxKey && arg[keyInt]) {
            rv = arg[maxKey];
            maxKey = keyInt;
        }
    });
    return rv;
}
/**
 * Converts a JSON midi file to a {@link SmoScore}
 * @category SmoToMidi
 */
class MidiToSmo {
    static get quantizeTicksDefault() {
        return 1024;
    }
    /**
     * Since midi has very little metadata, we don't know the original clef.
     * so just use the one (treble or bass) that uses the fewest ledger lines
     * @internal
     * @param notes notes in measure
     * @returns
     */
    static guessClefForNotes(measure) {
        let trebleMax = 0;
        let bassMax = 0;
        measure.voices[0].notes.forEach((note) => {
            note.pitches.forEach((pitch) => {
                const tl = Math.abs(_data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.pitchToLedgerLine('treble', pitch));
                const bl = Math.abs(_data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.pitchToLedgerLine('bass', pitch));
                trebleMax = Math.max(trebleMax, tl);
                bassMax = Math.max(bassMax, bl);
            });
        });
        const clef = trebleMax <= bassMax ? 'treble' : 'bass';
        measure.clef = clef;
        // For rests, make sure the rest is centered in the clef
        measure.voices[0].notes.forEach((note) => {
            if (note.noteType === 'r') {
                note.pitches = [_data_measure__WEBPACK_IMPORTED_MODULE_0__.SmoMeasure.defaultPitchForClef[clef]];
            }
            note.clef = clef;
        });
        return clef;
    }
    /**
     * Create an object to convert MIDI to a {@link SmoScore}
     * @param midi the output of midi parser
     * @param quantizeDuration ticks to quantize (1024 == 16th note)
     */
    constructor(midi, quantizeDuration) {
        this.timeSignatureMap = {};
        this.tempoMap = {};
        this.keySignatureMap = {};
        this.tieMap = {};
        this.timeDivision = 480;
        this.trackIndex = 0;
        this.eventIndex = 0; // index into current track
        this.maxMeasure = 0;
        this.quantizeTicks = MidiToSmo.quantizeTicksDefault;
        this.eot = false;
        this.midiOnNotes = {};
        this.midi = midi;
        // console.log(JSON.stringify(midi, null, ''));
        this.timeSignatureMap[0] = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature.defaults);
        this.tempoMap[0] = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText.defaults);
        this.keySignatureMap[0] = 'c';
        this.timeDivision = midi.header.ticksPerBeat;
        this.quantizeTicks = quantizeDuration;
    }
    /**
     * @internal
     * @param ticks
     * @returns
     */
    getTempo(ticks) {
        if (this.tempoMap[ticks]) {
            return this.tempoMap[ticks];
        }
        return getValueForTick(this.tempoMap, ticks);
    }
    /**
     * @internal
     * @param ticks
     * @returns
     */
    getTimeSignature(ticks) {
        if (this.timeSignatureMap[ticks]) {
            return this.timeSignatureMap[ticks];
        }
        return getValueForTick(this.timeSignatureMap, ticks);
    }
    /**
     * @internal
     * @param ticks
     * @returns
     */
    getKeySignature(ticks) {
        if (this.keySignatureMap[ticks]) {
            return this.keySignatureMap[ticks];
        }
        return getValueForTick(this.keySignatureMap, ticks);
    }
    /**
     * Get metadata from the map for this point in the score
     * @param ticks current point in track
     * @returns
     */
    getMetadata(ticks) {
        return { tempo: this.getTempo(ticks), timeSignature: this.getTimeSignature(ticks), keySignature: this.getKeySignature(ticks) };
    }
    /**
     * We process 3 types of metadata at present:  time signature, tempo and keysignature.
     * @param trackEvent
     * @param ticks
     */
    handleMetadata(trackEvent, ticks) {
        if (trackEvent.meta) {
            const mtype = trackEvent.type;
            if (mtype === 'timeSignature') {
                /**
                 * whenever we get a time signature event, recompute ticks per measure
                 */
                const numerator = trackEvent.numerator;
                const denominator = trackEvent.denominator;
                const tsDef = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature.defaults;
                tsDef.actualBeats = numerator;
                tsDef.beatDuration = denominator;
                const ts = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(tsDef);
                this.timeSignatureMap[ticks] = ts;
            }
            else if (mtype === 'setTempo') {
                const bpm = 60 / (trackEvent.microsecondsPerBeat / 1000000);
                const tempoDef = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText.defaults;
                tempoDef.bpm = bpm;
                this.tempoMap[ticks] = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText(tempoDef);
            }
            else if (mtype === 'keySignature') {
                const mdata = trackEvent.key;
                if (mdata === 0) {
                    this.keySignatureMap[ticks] = 'C';
                }
                else {
                    // there seem to be different ways to encode this...
                    let signed = mdata / 256;
                    if (signed > 7) {
                        signed = -1 * (256 - signed);
                    }
                    if (Math.abs(mdata) < 256) {
                        signed = mdata;
                    }
                    this.keySignatureMap[ticks] = _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.midiKeyToVexKey(signed);
                }
            }
        }
    }
    /**
     * Convert from Midi PPQ to Smoosic (and vex) ticks
     * @internal
     */
    getSmoTicks(midiTicks) {
        return 4096 * midiTicks / this.timeDivision;
    }
    /**
     * @internal
     */
    createNewEvent(metadata) {
        return {
            pitches: [], durationTicks: 0, tupletInfo: null, isRest: false, timeSignature: new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(metadata.timeSignature),
            tempo: new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText(metadata.tempo), keySignature: metadata.keySignature, measure: 0, tick: 0, isTied: false
        };
    }
    /**
     * @internal
     */
    static copyEvent(o) {
        const pitches = JSON.parse(JSON.stringify(o.pitches));
        const timeSignature = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(o.timeSignature);
        const tempo = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText(o.tempo);
        return ({
            pitches, durationTicks: o.durationTicks, tupletInfo: o.tupletInfo, isRest: o.isRest, timeSignature, tempo, keySignature: o.keySignature,
            measure: o.measure, tick: o.tick, isTied: o.isTied
        });
    }
    /**
     * @internal
     */
    addToTieMap(measureIndex) {
        const staffIx = this.trackIndex;
        if (typeof (this.tieMap[staffIx]) === 'undefined') {
            this.tieMap[staffIx] = [];
        }
        this.tieMap[staffIx].push(measureIndex);
    }
    /**
     * Step 3 in the 3-step process.  Quantize the note durations and convert the midi
     * event into SmoNotes.
     * @param events
     * @returns
     */
    createNotesFromEvents(events) {
        let measureIndex = 0;
        const measures = [];
        let measure = null;
        let deficit = 0;
        // If the midi event is smaller than the smallest note..
        const smallest = 1 * (this.quantizeTicks / 4);
        events.forEach((ev) => {
            if (measure === null || ev.measure > measureIndex) {
                const measureDefs = _data_measure__WEBPACK_IMPORTED_MODULE_0__.SmoMeasure.defaults;
                measureDefs.keySignature = ev.keySignature;
                measureDefs.timeSignature = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(ev.timeSignature);
                measureDefs.tempo = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoTempoText(ev.tempo);
                measure = new _data_measure__WEBPACK_IMPORTED_MODULE_0__.SmoMeasure(measureDefs);
                measure.voices.push({ notes: [] });
                measureIndex = ev.measure;
                measures.push(measure);
            }
            if (Math.abs(ev.durationTicks - deficit) < smallest && !(ev.tupletInfo !== null)) {
                deficit = deficit - ev.durationTicks;
            }
            else {
                const best = _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.midiTickSearch(ev.durationTicks - deficit, this.quantizeTicks);
                deficit += best.result - ev.durationTicks;
                ev.durationTicks = best.result;
                const defs = _data_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.defaults;
                defs.ticks.numerator = ev.durationTicks;
                defs.pitches = JSON.parse(JSON.stringify(ev.pitches));
                defs.noteType = ev.isRest ? 'r' : 'n';
                const note = new _data_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote(defs);
                _data_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.sortPitches(note);
                measure.voices[0].notes.push(note);
                if (ev.tupletInfo !== null && ev.tupletInfo.isLast === true) {
                    const voiceLen = measure.voices[0].notes.length;
                    const tupletNotes = [note, measure.voices[0].notes[voiceLen - 2], measure.voices[0].notes[voiceLen - 3]];
                    const defs = _data_tuplet__WEBPACK_IMPORTED_MODULE_7__.SmoTuplet.defaults;
                    defs.notes = tupletNotes;
                    defs.stemTicks = ev.tupletInfo.stemTicks;
                    defs.numNotes = ev.tupletInfo.numNotes;
                    defs.totalTicks = ev.tupletInfo.totalTicks;
                    defs.startIndex = voiceLen - 3;
                    measure.tuplets.push(new _data_tuplet__WEBPACK_IMPORTED_MODULE_7__.SmoTuplet(defs));
                }
                if (ev.isTied) {
                    this.addToTieMap(measureIndex);
                }
            }
        });
        measures.forEach((measure) => {
            measure.clef = MidiToSmo.guessClefForNotes(measure);
        });
        return measures;
    }
    /**
     * @param ticks
     * @returns the length in ticks of a triplet, if this looks like a triplet.  Otherwise 0
     */
    tripletType(ticks) {
        const tripletBeat = Math.round(4096 / 3);
        const tripletHalf = Math.round((4096 * 2) / 3);
        const tripletEighth = Math.round((4096 / 2) / 3);
        const beatTrip = tripletBeat / ticks;
        const eigthTrip = tripletEighth / ticks;
        const halfTrip = tripletHalf / ticks;
        if (Math.abs(1 - beatTrip) < 0.05) {
            return 4096;
        }
        if (Math.abs(1 - eigthTrip) < 0.05) {
            return 2048;
        }
        if (Math.abs(1 - halfTrip) < 0.05) {
            return 4096 * 2;
        }
        return 0;
    }
    /**
     * step 2 in the 3 step process.  Divide the music up into measures based on
     * tick duration.  If there are events overlapping measures, create extra events in the
     * new measure (hence the expand) and shorten the original event
     * @param events
     * @returns
     */
    expandMidiEvents(events) {
        const rv = [];
        if (events.length === 0) {
            return rv;
        }
        let i = 0;
        let ticksSoFar = 0;
        let measure = 0;
        let tick = 0;
        let tripletCount = 0;
        let tripletValue = 0;
        for (i = 0; i < events.length; ++i) {
            const ev = events[i];
            // If it's too small, continue.  Don't record the event but do count the ticks
            if (ev.durationTicks < 128) {
                ticksSoFar += ev.durationTicks;
                continue;
            }
            const ticksPerMeasure = _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.timeSignatureToTicks(ev.timeSignature.timeSignature);
            const nevent = MidiToSmo.copyEvent(ev);
            if (ticksSoFar + ev.durationTicks > ticksPerMeasure) {
                nevent.durationTicks = ticksPerMeasure - ticksSoFar;
                if (nevent.durationTicks > 0) {
                    rv.push(nevent);
                    nevent.tick = tick;
                }
                tick = 0;
                tripletCount = 0;
                tripletValue = 0;
                measure += 1;
                ticksSoFar = 0;
                this.maxMeasure = Math.max(this.maxMeasure, measure);
                let overflow = ev.durationTicks - nevent.durationTicks;
                while (overflow > ticksPerMeasure) {
                    const ovfEvent = MidiToSmo.copyEvent(nevent);
                    ovfEvent.tick = tick;
                    ovfEvent.measure = measure;
                    tick += 1;
                    measure += 1;
                    ovfEvent.durationTicks = ticksPerMeasure;
                    rv.push(ovfEvent);
                    overflow -= ticksPerMeasure;
                }
                if (overflow > 0) {
                    const ovfEvent = MidiToSmo.copyEvent(nevent);
                    ovfEvent.isTied = true;
                    ovfEvent.durationTicks = overflow;
                    ovfEvent.measure = measure;
                    ovfEvent.tick = tick;
                    ticksSoFar += ovfEvent.durationTicks;
                    tick += 1;
                    rv.push(ovfEvent);
                    overflow = 0;
                }
            }
            else {
                ticksSoFar += ev.durationTicks;
                // Try to infer the presence of triplets.  If it looks like a triplet, mark it and we will
                // create the tuplet when we create the measure.
                const possibleTriplet = this.tripletType(nevent.durationTicks);
                if (possibleTriplet > 0 && (tripletValue === 0 || possibleTriplet === tripletValue)) {
                    tripletCount += 1;
                    tripletValue = possibleTriplet;
                    if (tripletCount === 3) {
                        nevent.tupletInfo = {
                            numNotes: 3,
                            stemTicks: possibleTriplet / 2,
                            totalTicks: possibleTriplet,
                            isLast: true
                        };
                        rv[rv.length - 1].tupletInfo = {
                            numNotes: 3,
                            stemTicks: possibleTriplet / 2,
                            totalTicks: possibleTriplet,
                            isLast: false
                        };
                        rv[rv.length - 2].tupletInfo = {
                            numNotes: 3,
                            stemTicks: possibleTriplet / 2,
                            totalTicks: possibleTriplet,
                            isLast: false
                        };
                        tripletCount = 0;
                        tripletValue = 0;
                    }
                }
                else {
                    tripletCount = 0;
                    tripletValue = 0;
                }
                rv.push(nevent);
            }
        }
        return rv;
    }
    /**
     * Store midi on events.  If the midi on or off matches an existing
     * stored event based on channel and note, return it so it can be processed
     * @param ev raw event
     * @param evIndex index of processed events
     * @returns
     */
    pushPopMidiEvent(ev, evIndex) {
        let rv = null;
        if (!ev.noteNumber || typeof (ev.channel) === 'undefined') {
            return null;
        }
        if (this.midiOnNotes[ev.noteNumber]) {
            const ix = this.midiOnNotes[ev.noteNumber].findIndex((x) => x.channel === ev.channel);
            if (ix >= 0) {
                rv = JSON.parse(JSON.stringify(this.midiOnNotes[ev.noteNumber][ix]));
                this.midiOnNotes[ev.noteNumber].splice(ix);
            }
        }
        if (!this.midiOnNotes[ev.noteNumber]) {
            this.midiOnNotes[ev.noteNumber] = [];
        }
        if (ev.type === 'noteOn' && ev.velocity && ev.velocity > 0) {
            this.midiOnNotes[ev.noteNumber].push({
                note: ev.noteNumber,
                channel: ev.channel,
                smoIndex: evIndex
            });
        }
        return rv;
    }
    /**
     * Step 1 in the 3-step process.  Collapse midi events into
     * a single EventSmoData for each distinct tick that contains
     * the metadata state, a duration, and note information.
     * @param trackEvents
     * @returns
     */
    collapseMidiEvents(trackEvents) {
        const isEot = (ev) => {
            if (!ev) {
                return true;
            }
            if (typeof (ev.type) === 'undefined') {
                return true;
            }
            return ev.type === 'endOfTrack';
        };
        if (this.eventIndex >= trackEvents.length) {
            this.eot = true;
            return [];
        }
        const rv = [];
        let cur = trackEvents[0];
        let metadata = this.getMetadata(0);
        let curSmo = this.createNewEvent(metadata);
        let untrackedTicks = 0;
        let ticks = 0;
        while (this.eventIndex < trackEvents.length && !(this.eot)) {
            if (isEot(cur)) {
                this.eot = true;
                break;
            }
            if (cur.deltaTime > 0) {
                curSmo.durationTicks = this.getSmoTicks(cur.deltaTime);
                ticks += curSmo.durationTicks;
                // We only need to track note on/off events.  Other events update the global
                // map, we need to keep track of the duration changes though.
                if (cur.type === 'noteOn' || cur.type === 'noteOff') {
                    if (curSmo.pitches.length === 0) {
                        curSmo.isRest = true;
                    }
                    curSmo.durationTicks += untrackedTicks;
                    untrackedTicks = 0;
                    rv.push(curSmo);
                }
                else {
                    untrackedTicks += curSmo.durationTicks;
                }
                curSmo = this.createNewEvent(metadata);
            }
            curSmo.timeSignature = metadata.timeSignature;
            curSmo.tempo = metadata.tempo;
            curSmo.keySignature = metadata.keySignature;
            if (cur.type === 'noteOn' || cur.type === 'noteOff') {
                const mm = this.pushPopMidiEvent(cur, rv.length);
                if (mm) {
                    const npitch = _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.getEnharmonicInKey(_data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.smoIntToPitch(mm.note - 12), metadata.keySignature);
                    if (mm.smoIndex < rv.length) {
                        rv[mm.smoIndex].pitches.push(npitch);
                        rv[mm.smoIndex].isRest = false;
                    }
                    else {
                        console.warn('bad index in event mm.smoIndex');
                    }
                }
            }
            else if (cur.meta) {
                this.handleMetadata(cur, ticks);
            }
            metadata = this.getMetadata(ticks);
            this.eventIndex += 1;
            cur = trackEvents[this.eventIndex];
            if (isEot(cur)) {
                this.eot = true;
                break;
            }
        }
        return rv;
    }
    getTrackData(midi) {
        if (midi.header.format !== 0) {
            return midi.tracks;
        }
        const trackData = [];
        const trackHash = {};
        const trackEvents = midi.tracks[0];
        trackEvents.forEach((ev) => {
            var _a;
            const channel = (_a = ev.channel) !== null && _a !== void 0 ? _a : 0;
            if (!trackHash[channel]) {
                trackHash[channel] = [];
            }
            trackHash[channel].push(ev);
        });
        const trackKeys = Object.keys(trackHash);
        trackKeys.forEach((trackKey) => {
            trackData.push(trackHash[trackKey]);
        });
        return trackData;
    }
    /**
     * Convert the midi to a score as best we can.  The conversion is made via a 3-step
     * process.
     * 1. consolidate all the MIDI events into individual note on/off events with a duration
     * 2. adjust the durations so the fit in with Smoosic measure lengths.
     * 3. Create the {@link SmoNote} objects from the events.
     * @returns
     */
    convert() {
        let staves = [];
        // go through the tracks.  If this is midi format 1, split tracks into their own channels
        const tracks = this.getTrackData(this.midi);
        tracks.forEach((trackEvents, trackIx) => {
            this.eventIndex = 0; // index into current track
            this.trackIndex = trackIx;
            this.eot = false;
            this.tieMap[trackIx] = [];
            const collapsed = this.collapseMidiEvents(trackEvents);
            const expanded = this.expandMidiEvents(collapsed);
            if (expanded.length > 0) {
                const staffDef = _data_systemStaff__WEBPACK_IMPORTED_MODULE_6__.SmoSystemStaff.defaults;
                staffDef.staffId = trackIx;
                staffDef.measures = this.createNotesFromEvents(expanded);
                const staff = new _data_systemStaff__WEBPACK_IMPORTED_MODULE_6__.SmoSystemStaff(staffDef);
                // For notes that are tied across measures, add the tie
                this.tieMap[trackIx].forEach((mm) => {
                    const startMeasure = staffDef.measures[mm - 1];
                    const endMeasure = staffDef.measures[mm];
                    const endIx = startMeasure.voices[0].notes.length - 1;
                    const startNote = startMeasure.voices[0].notes[endIx];
                    const endNote = endMeasure.voices[0].notes[0];
                    if (startNote.noteType === 'n' &&
                        endNote.noteType === 'n' && _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.pitchArraysMatch(startNote.pitches, endNote.pitches)) {
                        const tieDefs = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoTie.defaults;
                        tieDefs.startSelector = {
                            staff: trackIx, measure: mm - 1, voice: 0, tick: endIx,
                            pitches: []
                        };
                        tieDefs.endSelector = {
                            staff: trackIx, measure: mm, voice: 0, tick: 0,
                            pitches: []
                        };
                        tieDefs.lines.push({ from: 0, to: 0 });
                        const tie = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoTie(tieDefs);
                        staff.modifiers.push(tie);
                    }
                });
                staves.push(staff);
            }
        });
        if (staves.length === 0) {
            return _data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore.getEmptyScore(_data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore.defaults);
        }
        let longestStave = staves[0];
        staves.forEach((staff) => {
            if (staff.measures.length > longestStave.measures.length) {
                longestStave = staff;
            }
        });
        staves.forEach((staff) => {
            let i = 0;
            for (i = staff.measures.length; i < longestStave.measures.length; ++i) {
                const measure = _data_measure__WEBPACK_IMPORTED_MODULE_0__.SmoMeasure.getDefaultMeasure(longestStave.measures[i]);
                measure.voices.push({ notes: _data_measure__WEBPACK_IMPORTED_MODULE_0__.SmoMeasure.getDefaultNotes(longestStave.measures[i]) });
                staff.measures.push(measure);
            }
        });
        const scoreDefs = _data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore.defaults;
        scoreDefs.staves = staves;
        const rv = new _data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore(scoreDefs);
        const layoutDefaults = rv.layoutManager;
        // if no scale given in score, default to something small.
        layoutDefaults.globalLayout.svgScale = 0.65;
        layoutDefaults.globalLayout.zoomScale = 1.5;
        return rv;
    }
}


/***/ }),

/***/ "./src/smo/midi/smoToMidi.ts":
/*!***********************************!*\
  !*** ./src/smo/midi/smoToMidi.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoToMidi: () => (/* binding */ SmoToMidi)
/* harmony export */ });
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _xform_audioTrack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../xform/audioTrack */ "./src/smo/xform/audioTrack.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Support for converting Smo object model to MIDI
 * @module /smo/midi/smoToMidi
 */



/**
 * Convert a {@link SmoScore} object to MIDI
 * @category SmoToMidi
 */
class SmoToMidi {
    /**
     * @param score
     * @returns Midi byte array that can be sent to a file upload widget
     */
    static convert(score) {
        const beatTime = 128; // midi ticks per beat
        const converter = new _xform_audioTrack__WEBPACK_IMPORTED_MODULE_2__.SmoAudioScore(score, beatTime);
        const audioScore = converter.convert();
        const smoTracks = audioScore.tracks;
        let currentKey = 'C';
        const trackHash = {};
        smoTracks.forEach((smoTrack, trackIx) => {
            let j = 0;
            if (typeof (trackHash[trackIx]) === 'undefined') {
                trackHash[trackIx] = {
                    track: new MidiWriter.Track(),
                    lastMeasure: 0
                };
            }
            const track = trackHash[trackIx].track;
            // eslint-disable-next-line
            audioScore.repeatMap.forEach((measureMap) => {
                for (j = measureMap.startMeasure; j <= measureMap.endMeasure; ++j) {
                    // eslint-disable-next-line
                    const notes = smoTrack.notes.filter((nn) => nn.selector.measure === j);
                    notes.forEach((noteData) => {
                        const selectorKey = _xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.getMeasureKey(noteData.selector);
                        if (smoTrack.tempoMap[selectorKey]) {
                            track.setTempo(smoTrack.tempoMap[selectorKey]);
                        }
                        if (smoTrack.timeSignatureMap[selectorKey]) {
                            const ts = smoTrack.timeSignatureMap[selectorKey];
                            track.setTimeSignature(ts.numerator, ts.denominator);
                        }
                        if (smoTrack.keyMap[j]) {
                            const ksString = smoTrack.keyMap[j];
                            const ks = -1 * _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.getFlatsInKeySignature(ksString) + _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.getSharpsInKeySignature(ksString);
                            track.setKeySignature(ks, 0);
                        }
                        if (noteData.noteType === 'r') {
                            if (!noteData.padding) {
                                const rest = new MidiWriter.NoteOffEvent({
                                    channel: trackIx + 1,
                                    pitch: 'C4',
                                    duration: 't' + noteData.duration
                                });
                                track.addEvent(rest);
                            }
                        }
                        else {
                            const pitchArray = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.smoPitchesToMidiStrings(noteData.pitches);
                            const velocity = Math.round(127 * noteData.volume);
                            const midiNote = new MidiWriter.NoteEvent({
                                channel: trackIx + 1,
                                pitch: pitchArray,
                                duration: 't' + noteData.duration,
                                velocity
                            });
                            track.addEvent(midiNote);
                        }
                    });
                }
            });
        });
        const tracks = Object.keys(trackHash).map((key) => trackHash[key].track);
        const writer = new MidiWriter.Writer(tracks);
        return writer.buildFile();
    }
}


/***/ }),

/***/ "./src/smo/mxml/smoToXml.ts":
/*!**********************************!*\
  !*** ./src/smo/mxml/smoToXml.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoToXml: () => (/* binding */ SmoToXml)
/* harmony export */ });
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_score__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./xmlHelpers */ "./src/smo/mxml/xmlHelpers.ts");
/* harmony import */ var _xmlToSmo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./xmlToSmo */ "./src/smo/mxml/xmlToSmo.ts");
/* harmony import */ var _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _render_audio_samples__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../render/audio/samples */ "./src/render/audio/samples.ts");












/**
 * Convert {@link SmoScore} object into a music XML serialization
 *
 * usage: `xdoc: XmlDocument = SmoToXml.convert(score)`
 * @category SmoToXml
 */
class SmoToXml {
    static get beamStates() {
        return {
            none: 1, start: 2, continue: 3, stop: 4
        };
    }
    static get defaultState() {
        return JSON.parse(JSON.stringify({
            divisions: 0,
            measureNumber: 0,
            measureIndex: 0,
            transposeOffset: 0,
            tickCount: 0,
            voiceIndex: 0,
            keySignature: 'C',
            voiceTickIndex: 0,
            slurs: [],
            ties: [],
            partStaves: [],
            lyricState: {},
            measureTicks: 0,
            beamState: 0,
            beamTicks: 4096
        }));
    }
    /**
     * see usage
     * @param score
     * @returns
     */
    static convert(score) {
        let staffGroupIx = 0;
        let staffIx = 0;
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const dom = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createRootElement();
        const root = dom.children[0];
        const work = nn(root, 'work', null, '');
        nn(work, 'work-title', score.scoreInfo, 'title');
        const identification = nn(root, 'identification', null, '');
        const creator = nn(identification, 'creator', score.scoreInfo, 'composer');
        _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(creator, { type: 'composer' });
        const encoding = nn(identification, 'encoding', null, '');
        nn(encoding, 'software', { software: 'Some pre-release version of Smoosic' }, 'software');
        const today = new Date();
        const dd = (n) => n < 10 ? '0' + n.toString() : n.toString();
        const dateString = today.getFullYear() + '-' + dd(today.getMonth() + 1) + '-' + dd(today.getDate());
        nn(encoding, 'encoding-date', dateString, 'date');
        const defaults = nn(root, 'defaults', null, '');
        const scaling = nn(defaults, 'scaling', null, '');
        const svgScale = score.layoutManager.getGlobalLayout().svgScale;
        // music in vexflow is rendered at a font size of 38
        const mm = _xmlToSmo__WEBPACK_IMPORTED_MODULE_8__.XmlToSmo.mmPerPixel * 42 * svgScale;
        nn(scaling, 'millimeters', { mm }, 'mm');
        nn(scaling, 'tenths', { tenths: 40 }, 'tenths');
        const pageLayout = nn(defaults, 'page-layout', null, '');
        const musicFont = nn(defaults, 'music-font', null, '');
        const engrave = score.fonts.find((fn) => fn.purpose === _data_score__WEBPACK_IMPORTED_MODULE_2__.SmoScore.fontPurposes.ENGRAVING);
        _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(musicFont, 'font-size', 38 * svgScale);
        if (engrave) {
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(musicFont, 'font-family', engrave.family);
        }
        const tenthConversion = (25.2 / 96) * (40 / mm);
        const pageDims = {
            'page-height': score.layoutManager.globalLayout.pageHeight * tenthConversion,
            'page-width': score.layoutManager.globalLayout.pageWidth * tenthConversion
        };
        Object.keys(pageDims).forEach((dim) => {
            nn(pageLayout, dim, pageDims, dim);
        });
        const margins = { 'left-margin': score.layoutManager.pageLayouts[0].leftMargin * tenthConversion,
            'right-margin': score.layoutManager.pageLayouts[0].rightMargin * tenthConversion,
            'top-margin': score.layoutManager.pageLayouts[0].topMargin * tenthConversion,
            'bottom-margin': score.layoutManager.pageLayouts[0].bottomMargin * tenthConversion };
        const pageMargins = nn(pageLayout, 'page-margins', null, '');
        Object.keys(margins).forEach((margin) => {
            nn(pageMargins, margin, margins, margin);
        });
        const partList = nn(root, 'part-list', null, '');
        score.staves.forEach((staff) => {
            score.systemGroups.forEach((sg) => {
                if (sg.startSelector.staff === staff.staffId && sg.startSelector.staff < sg.endSelector.staff) {
                    const partGroup = nn(partList, 'part-group', null, '');
                    _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(partGroup, { number: staffGroupIx, type: 'start' });
                    const groupSymbol = nn(partGroup, 'group-symbol', null, '');
                    let symbolText = 'line';
                    if (sg.leftConnector === _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoSystemGroup.connectorTypes['brace']) {
                        symbolText = 'brace';
                    }
                    else if (sg.leftConnector === _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoSystemGroup.connectorTypes['bracket']) {
                        symbolText = 'bracket';
                    }
                    else if (sg.leftConnector === _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_9__.SmoSystemGroup.connectorTypes['double']) {
                        symbolText = 'square';
                    }
                    groupSymbol.textContent = symbolText;
                }
                else if (sg.endSelector.staff === staff.staffId && sg.startSelector.staff < sg.endSelector.staff) {
                    const partGroup = nn(partList, 'part-group', null, '');
                    _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(partGroup, { number: staffGroupIx, type: 'stop' });
                }
            });
            if (!staff.partInfo.stavesBefore) {
                const id = 'P' + staff.staffId;
                const scorePart = nn(partList, 'score-part', null, '');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(scorePart, { id });
                nn(scorePart, 'part-name', { name: staff.measureInstrumentMap[0].instrumentName }, 'name');
                nn(scorePart, 'part-abbreviation', { name: staff.measureInstrumentMap[0].abbreviation }, 'name');
                const staffInsts = staff.getInstrumentList();
                staffInsts.forEach((inst, ix) => {
                    const scoreInstrument = nn(scorePart, 'score-instrument', null, '');
                    _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(scoreInstrument, { id: `${id}-${ix}` });
                    const iname = nn(scoreInstrument, 'instrument-name', null, '');
                    iname.textContent = inst.instrumentName;
                    const iinst = nn(scoreInstrument, 'instrument-sound', null, '');
                    // Hack: family is in the sample library, breaks dependency direction
                    const family = _render_audio_samples__WEBPACK_IMPORTED_MODULE_10__.SuiSampleMedia.getFamilyForInstrument(inst.instrument);
                    iinst.textContent = `${family}.${inst.instrument}`;
                });
            }
        });
        const smoState = SmoToXml.defaultState;
        for (staffIx = 0; staffIx < score.staves.length; ++staffIx) {
            smoState.partStaves = [];
            // If this is the second staff in a part, we've already output the music with the
            // first stave
            if (score.staves[staffIx].partInfo.stavesBefore > 0) {
                continue;
            }
            smoState.partStaves.push(score.staves[staffIx]);
            if (smoState.partStaves[0].partInfo.stavesAfter > 0 && staffIx < score.staves.length + 1) {
                smoState.partStaves.push(score.staves[staffIx + 1]);
            }
            const part = nn(root, 'part', null, '');
            const id = 'P' + smoState.partStaves[0].staffId;
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(part, { id });
            smoState.measureNumber = 1;
            smoState.tickCount = 0;
            smoState.transposeOffset = 0;
            smoState.slurs = [];
            smoState.ties = [];
            smoState.tieds = [];
            smoState.lyricState = {};
            for (smoState.measureIndex = 0; smoState.measureIndex < smoState.partStaves[0].measures.length; ++smoState.measureIndex) {
                const measureElement = nn(part, 'measure', null, '');
                for (smoState.staffPartIx = 0; smoState.staffPartIx < smoState.partStaves.length; ++smoState.staffPartIx) {
                    smoState.measureTicks = 0;
                    // each staff in a part goes in the same measure element.  If this is a subsequent part, we've already 
                    SmoToXml.measure(measureElement, smoState);
                }
                smoState.measureNumber += 1;
            }
        }
        return SmoToXml.prettifyXml(dom);
    }
    /**
     * MuseScore doesn't like minified xml, so we pretty-print it.
     * @param xmlDoc
     * @returns
     */
    static prettifyXml(xmlDoc) {
        var xsltDoc = new DOMParser().parseFromString([
            // describes how we want to modify the XML - indent everything
            '<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">',
            '  <xsl:strip-space elements="*"/>',
            '  <xsl:template match="para[content-style][not(text())]">', // change to just text() to strip space in text nodes
            '    <xsl:value-of select="normalize-space(.)"/>',
            '  </xsl:template>',
            '  <xsl:template match="node()|@*">',
            '    <xsl:copy><xsl:apply-templates select="node()|@*"/></xsl:copy>',
            '  </xsl:template>',
            '  <xsl:output indent="yes"/>',
            '</xsl:stylesheet>',
        ].join('\n'), 'application/xml');
        var xsltProcessor = new XSLTProcessor();
        xsltProcessor.importStylesheet(xsltDoc);
        var resultDoc = xsltProcessor.transformToDocument(xmlDoc);
        return resultDoc;
    }
    ;
    /**
     * /score-partwise/part/measure
     * @param measureElement
     * @param smoState
     * @returns
     */
    static measure(measureElement, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const measure = smoState.partStaves[smoState.staffPartIx].measures[smoState.measureIndex];
        if (smoState.measureNumber === 1 && measure.isPickup()) {
            smoState.measureNumber = 0;
        }
        if (measure.getForceSystemBreak()) {
            const printElement = nn(measureElement, 'print', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(printElement, { 'new-system': 'yes' });
        }
        _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(measureElement, { number: smoState.measureNumber });
        SmoToXml.attributes(measureElement, measure, smoState);
        smoState.voiceIndex = 1;
        smoState.beamState = SmoToXml.beamStates.none;
        smoState.beamTicks = 0;
        SmoToXml.barline(measureElement, smoState, true);
        measure.voices.forEach((voice) => {
            smoState.voiceTickIndex = 0;
            smoState.voice = voice;
            voice.notes.forEach((note) => {
                smoState.note = note;
                // Start wedge before note starts
                SmoToXml.direction(measureElement, smoState, true);
                SmoToXml.note(measureElement, measure, note, smoState);
                // End wedge on next tick
                SmoToXml.direction(measureElement, smoState, false);
            });
            // If this is the end of a voice, back up the time to align the voices
            if (measure.voices.length > smoState.voiceIndex) {
                smoState.voiceIndex += 1;
                const backupElement = nn(measureElement, 'backup', null, '');
                nn(backupElement, 'duration', { duration: smoState.measureTicks }, 'duration');
            }
            else {
                if (smoState.partStaves.length > 1 && smoState.staffPartIx + 1 < smoState.partStaves.length) {
                    // If this is the end of a measure, and this is the first part in the staff, back it up for the second staff
                    const backupElement = nn(measureElement, 'backup', null, '');
                    nn(backupElement, 'duration', { duration: smoState.measureTicks }, 'duration');
                    smoState.tickCount += smoState.measureTicks;
                }
                else if (smoState.partStaves.length === 1) {
                    smoState.tickCount += smoState.measureTicks;
                }
            }
            smoState.measureTicks = 0;
        });
        SmoToXml.barline(measureElement, smoState, false);
    }
    /**
     * /score-partwise/part/measure/barline
     * @param measureElement
     * @param smoState
     * @param start
     */
    static barline(measureElement, smoState, start) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        let barlineElement = null;
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        if (start) {
            if (measure.getStartBarline().barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.startRepeat) {
                barlineElement = nn(measureElement, 'barline', null, '');
                const repeatElement = nn(barlineElement, 'repeat', null, '');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(repeatElement, { direction: 'forward' });
            }
        }
        const voltas = staff.getVoltasForMeasure(measure.measureNumber.measureIndex);
        const numArray = [];
        voltas.forEach((volta) => {
            var _a, _b;
            if ((start && ((_a = volta === null || volta === void 0 ? void 0 : volta.startSelector) === null || _a === void 0 ? void 0 : _a.measure) === measure.measureNumber.measureIndex) ||
                (!start && ((_b = volta === null || volta === void 0 ? void 0 : volta.endSelector) === null || _b === void 0 ? void 0 : _b.measure) === measure.measureNumber.measureIndex)) {
                numArray.push(volta.number);
            }
        });
        if (!start && measure.getEndBarline().barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.endBar) {
            barlineElement = barlineElement !== null && barlineElement !== void 0 ? barlineElement : nn(measureElement, 'barline', null, '');
            nn(barlineElement, 'bar-style', { style: 'light-heavy' }, 'style');
        }
        else if (!start && measure.getEndBarline().barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.doubleBar) {
            barlineElement = barlineElement !== null && barlineElement !== void 0 ? barlineElement : nn(measureElement, 'barline', null, '');
            nn(barlineElement, 'bar-style', { style: 'light-light' }, 'style');
        }
        if (numArray.length) {
            barlineElement = barlineElement !== null && barlineElement !== void 0 ? barlineElement : nn(measureElement, 'barline', null, '');
            const numstr = numArray.join(',');
            const endElement = nn(barlineElement, 'ending', null, '');
            const endString = start ? 'start' : 'stop';
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(endElement, { type: endString, number: numstr });
        }
        if (!start && measure.getEndBarline().barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.endRepeat) {
            barlineElement = barlineElement !== null && barlineElement !== void 0 ? barlineElement : nn(measureElement, 'barline', null, '');
            const repeatElement = nn(barlineElement, 'repeat', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(repeatElement, { direction: 'backward' });
        }
    }
    /**
     * /score-partwise/part/measure/note/tie
     * @param notationsElement
     * @param smoState
     */
    static tied(notationsElement, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        const getNumberForTie = ((ties) => {
            let rv = 1;
            const hash = {};
            ties.forEach((ss) => {
                hash[ss.number] = true;
            });
            while (rv < 100) {
                if (typeof (hash[rv]) === 'undefined') {
                    break;
                }
                rv += 1;
            }
            return rv;
        });
        const selector = {
            staff: staff.staffId,
            measure: measure.measureNumber.measureIndex,
            voice: smoState.voiceIndex - 1,
            tick: smoState.voiceTickIndex,
            pitches: []
        };
        const starts = staff.getTiesStartingAt(selector);
        const ends = staff.getTiesEndingAt(selector);
        const remove = [];
        const newTies = [];
        ends.forEach((tie) => {
            const match = smoState.tieds.find((ss) => _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.eq(ss.startSelector, tie.startSelector) &&
                _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.eq(ss.endSelector, tie.endSelector));
            if (match) {
                remove.push(match);
                const tieElement = nn(notationsElement, 'tied', null, '');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(tieElement, { type: 'stop' });
            }
        });
        smoState.tieds.forEach((tie) => {
            if (remove.findIndex((rr) => rr.number === tie.number) < 0) {
                newTies.push(tie);
            }
        });
        smoState.tieds = newTies;
        starts.forEach((tie) => {
            const number = getNumberForTie(smoState.ties);
            smoState.tieds.push({
                startSelector: tie.startSelector,
                endSelector: tie.endSelector,
                number
            });
            const tieElement = nn(notationsElement, 'tied', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(tieElement, { type: 'start' });
        });
    }
    /**
     * /score-partwise/part/measure/note/tie
     * @param noteElement
     * @param smoState
     */
    static tie(noteElement, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        const getNumberForTie = ((ties) => {
            let rv = 1;
            const hash = {};
            ties.forEach((ss) => {
                hash[ss.number] = true;
            });
            while (rv < 100) {
                if (typeof (hash[rv]) === 'undefined') {
                    break;
                }
                rv += 1;
            }
            return rv;
        });
        const selector = {
            staff: staff.staffId,
            measure: measure.measureNumber.measureIndex,
            voice: smoState.voiceIndex - 1,
            tick: smoState.voiceTickIndex,
            pitches: []
        };
        const starts = staff.getTiesStartingAt(selector);
        const ends = staff.getTiesEndingAt(selector);
        const remove = [];
        const newTies = [];
        ends.forEach((tie) => {
            const match = smoState.ties.find((ss) => _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.eq(ss.startSelector, tie.startSelector) &&
                _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.eq(ss.endSelector, tie.endSelector));
            if (match) {
                remove.push(match);
                const tieElement = nn(noteElement, 'tie', null, '');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(tieElement, { type: 'stop' });
            }
        });
        smoState.ties.forEach((tie) => {
            if (remove.findIndex((rr) => rr.number === tie.number) < 0) {
                newTies.push(tie);
            }
        });
        smoState.ties = newTies;
        starts.forEach((tie) => {
            const number = getNumberForTie(smoState.ties);
            smoState.ties.push({
                startSelector: tie.startSelector,
                endSelector: tie.endSelector,
                number
            });
            const tieElement = nn(noteElement, 'tie', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(tieElement, { type: 'start' });
        });
    }
    /**
   * /score-partwise/part/measure/note/notations/slur
   * @param notationsElement
   * @param smoState
   */
    static slur(notationsElement, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        const getNumberForSlur = ((slurs) => {
            let rv = 1;
            const hash = {};
            slurs.forEach((ss) => {
                hash[ss.number] = true;
            });
            while (rv < 100) {
                if (typeof (hash[rv]) === 'undefined') {
                    break;
                }
                rv += 1;
            }
            return rv;
        });
        const selector = {
            staff: staff.staffId,
            measure: measure.measureNumber.measureIndex,
            voice: smoState.voiceIndex - 1,
            tick: smoState.voiceTickIndex,
            pitches: []
        };
        const starts = staff.getSlursStartingAt(selector);
        const ends = staff.getSlursEndingAt(selector);
        const remove = [];
        const newSlurs = [];
        ends.forEach((slur) => {
            const match = smoState.slurs.find((ss) => _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.eq(ss.startSelector, slur.startSelector) &&
                _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.eq(ss.endSelector, slur.endSelector));
            if (match) {
                remove.push(match);
                const slurElement = nn(notationsElement, 'slur', null, '');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(slurElement, { number: match.number, type: 'stop' });
            }
        });
        smoState.slurs.forEach((slur) => {
            if (remove.findIndex((rr) => rr.number === slur.number) < 0) {
                newSlurs.push(slur);
            }
        });
        smoState.slurs = newSlurs;
        starts.forEach((slur) => {
            const number = getNumberForSlur(smoState.slurs);
            smoState.slurs.push({
                startSelector: slur.startSelector,
                endSelector: slur.endSelector,
                number
            });
            const slurElement = nn(notationsElement, 'slur', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(slurElement, { number: number, type: 'start' });
        });
    }
    /**
     * /score-partwise/measure/note/time-modification
     * /score-partwise/measure/note/tuplet
     * @param noteElement
     * @param notationsElement
     * @param smoState
     * @returns
     */
    static tupletTime(noteElement, tuplet, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const obj = {
            actualNotes: tuplet.numNotes, normalNotes: tuplet.notes_occupied
        };
        const timeModification = nn(noteElement, 'time-modification', null, '');
        nn(timeModification, 'actual-notes', obj, 'actualNotes');
        nn(timeModification, 'normal-notes', obj, 'normalNotes');
    }
    static tupletNotation(notationsElement, tuplet, note) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        if (tuplet.getIndexOfNote(note) === 0) {
            const tupletElement = nn(notationsElement, 'tuplet', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(tupletElement, {
                number: 1, type: 'start'
            });
        }
        else if (tuplet.getIndexOfNote(note) === tuplet.notes.length - 1) {
            const tupletElement = nn(notationsElement, 'tuplet', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(tupletElement, {
                number: 1, type: 'stop'
            });
        }
    }
    /**
     * /score-partwise/measure/note/pitch
     * @param pitch
     * @param noteElement
     */
    static pitch(pitch, noteElement) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const accidentalOffset = ['bb', 'b', 'n', '#', '##'];
        const alter = accidentalOffset.indexOf(pitch.accidental) - 2;
        const pitchElement = nn(noteElement, 'pitch', null, '');
        nn(pitchElement, 'step', { letter: pitch.letter.toUpperCase() }, 'letter');
        nn(pitchElement, 'alter', { alter }, 'alter');
        nn(pitchElement, 'octave', pitch, 'octave');
    }
    /**
     * /score-partwise/measure/beam
     * @param noteElement
     * @param smoState
     * @returns
     */
    static beamNote(noteElement, smoState) {
        if (!smoState.note) {
            return;
        }
        if (!smoState.voice) {
            return;
        }
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const note = smoState.note;
        const nextNote = (smoState.voiceTickIndex + 1) >= smoState.voice.notes.length ?
            null : smoState.voice.notes[smoState.voiceTickIndex + 1];
        const exceedTicks = smoState.beamTicks + note.tickCount >= note.beamBeats;
        // don't start a beam on a rest
        if (note.isRest() && smoState.beamState === SmoToXml.beamStates.none) {
            return;
        }
        let toBeam = SmoToXml.beamStates.none;
        if (note.tickCount <= 2048 && !exceedTicks) {
            // Explicit end beam, or no more notes to beam, so stop beam
            if (note.endBeam || nextNote === null) {
                if (smoState.beamState !== SmoToXml.beamStates.none) {
                    toBeam = SmoToXml.beamStates.stop;
                }
            }
            else {
                // else if the next note is beamable, start or continue the beam
                if (nextNote.tickCount <= 2048) {
                    toBeam = smoState.beamState === SmoToXml.beamStates.continue ?
                        SmoToXml.beamStates.continue : SmoToXml.beamStates.start;
                }
            }
        }
        if (toBeam === SmoToXml.beamStates.start || toBeam === SmoToXml.beamStates.continue) {
            smoState.beamTicks += smoState.note.tickCount;
        }
        else {
            smoState.beamTicks = 0;
        }
        // slur is start/stop, beam is begin, end, gf
        if (toBeam === SmoToXml.beamStates.start) {
            const beamElement = nn(noteElement, 'beam', { type: 'begin' }, 'type');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(beamElement, { number: 1 });
            smoState.beamState = SmoToXml.beamStates.continue;
        }
        else if (toBeam === SmoToXml.beamStates.continue) {
            const beamElement = nn(noteElement, 'beam', { type: 'continue' }, 'type');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(beamElement, { number: 1 });
        }
        else if ((toBeam === SmoToXml.beamStates.stop) ||
            (toBeam === SmoToXml.beamStates.none && smoState.beamState !== SmoToXml.beamStates.none)) {
            const beamElement = nn(noteElement, 'beam', { type: 'end' }, 'type');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(beamElement, { number: 1 });
            smoState.beamState = SmoToXml.beamStates.none;
        }
    }
    /**
     * /score-partwise/measure/direction/direction-type
     * @param measureElement
     * @param smoState
     * @param beforeNote
     */
    static direction(measureElement, smoState, beforeNote) {
        let addDirection = false;
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const directionElement = measureElement.ownerDocument.createElement('direction');
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        const directionChildren = [];
        const tempo = measure.getTempo();
        let displayTempo = false;
        if (smoState.tempo) {
            if (tempo.display && measure.measureNumber.measureIndex === 0 && smoState.measureTicks === 0) {
                displayTempo = true;
            }
            else if (tempo.display && !_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.eq(smoState.tempo, tempo)) {
                displayTempo = true;
            }
        }
        else {
            displayTempo = true;
        }
        smoState.tempo = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText(tempo);
        if (beforeNote === true && smoState.staffPartIx === 0 && smoState.measureTicks === 0 && smoState.partStaves[0].staffId === 0) {
            const mark = measure.getRehearsalMark();
            if (mark) {
                const rmtype = nn(directionElement, 'direction-type', null, '');
                const xmark = mark;
                const rElement = nn(rmtype, 'rehearsal', { mark: xmark.symbol }, 'mark');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(rElement, 'enclosure', 'square');
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(directionElement, 'placement', 'above');
                addDirection = true;
            }
        }
        if (beforeNote === true && displayTempo) {
            addDirection = true;
            const tempoBpm = Math.round(tempo.bpm * tempo.beatDuration / 4096);
            const tempoElement = nn(directionElement, 'direction-type', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(directionElement, 'placement', 'above');
            let tempoText = tempo.tempoText;
            if (tempo.tempoMode === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.tempoModes.customMode) {
                tempoText = tempo.customText;
            }
            if (tempo.tempoMode === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.tempoModes.textMode) {
                nn(tempoElement, 'words', { words: tempoText }, 'words');
            }
            else if (tempo.tempoMode === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.tempoModes.customMode || tempo.tempoMode === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.tempoModes.durationMode) {
                const metronomeElement = nn(tempoElement, 'metronome', null, '');
                let durationType = 'quarter';
                let dotType = false;
                if (tempo.bpm >= 8192) {
                    durationType = 'half';
                }
                else if (tempo.bpm < 4096) {
                    durationType = 'eighth';
                }
                if (tempo.bpm === 6144 || tempo.bpm === 12288 || tempo.bpm === 3072) {
                    dotType = true;
                }
                nn(metronomeElement, 'beat-unit', { beatUnit: durationType }, 'beatUnit');
                if (dotType) {
                    nn(metronomeElement, 'beat-unit-dot', null, '');
                }
                nn(metronomeElement, 'per-minute', { tempo }, 'bpm');
            }
            // Sound is supposed to come last under 'direction' element
            const soundElement = measureElement.ownerDocument.createElement('sound');
            soundElement.setAttribute('tempo', tempoBpm.toString());
            directionChildren.push(soundElement);
        }
        const selector = {
            staff: staff.staffId,
            measure: measure.measureNumber.measureIndex,
            voice: smoState.voiceIndex - 1,
            tick: smoState.voiceTickIndex,
            pitches: []
        };
        if (!beforeNote) {
            selector.tick -= 1;
        }
        const startWedge = staff.modifiers.find((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.sameNote(mod.startSelector, selector) &&
            (mod.attrs.type === 'SmoStaffHairpin'));
        const endWedge = staff.modifiers.find((mod) => _xform_selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.sameNote(mod.endSelector, selector) &&
            (mod.attrs.type === 'SmoStaffHairpin'));
        if (endWedge && !beforeNote) {
            const wedgeDirection = nn(measureElement, 'direction', null, '');
            const dtype = nn(wedgeDirection, 'direction-type', null, '');
            const wedgeElement = nn(dtype, 'wedge', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(wedgeElement, { type: 'stop', spread: '20' });
        }
        if (startWedge && beforeNote) {
            const wedgeDirection = nn(measureElement, 'direction', null, '');
            const dtype = nn(wedgeDirection, 'direction-type', null, '');
            const wedgeElement = nn(dtype, 'wedge', null, '');
            const wedgeType = startWedge.hairpinType === _data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoStaffHairpin.types.CRESCENDO ?
                'crescendo' : 'diminuendo';
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttributes(wedgeElement, { type: wedgeType });
        }
        if (addDirection) {
            measureElement.appendChild(directionElement);
            directionChildren.forEach((el) => {
                directionElement.appendChild(el);
            });
        }
    }
    /**
     * /score-partwise/measure/note/lyric
     * @param noteElement
     * @param smoState
     */
    static lyric(noteElement, smoState) {
        const smoNote = smoState.note;
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const lyrics = smoNote.getTrueLyrics();
        lyrics.forEach((lyric) => {
            let syllabic = 'single';
            if (lyric.isHyphenated() === false && lyric.isDash() === false) {
                if (smoState.lyricState[lyric.verse] === 'begin') {
                    syllabic = 'end';
                } // else stays single
            }
            else {
                if (lyric.isHyphenated()) {
                    syllabic = smoState.lyricState[lyric.verse] === 'begin' ?
                        'middle' : 'begin';
                }
                else if (lyric.isDash()) {
                    syllabic = 'middle';
                }
            }
            smoState.lyricState[lyric.verse] = syllabic;
            const lyricElement = nn(noteElement, 'lyric', null, '');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(lyricElement, 'number', lyric.verse + 1);
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(lyricElement, 'placement', 'below');
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(lyricElement, 'default-y', -80 - 10 * lyric.verse);
            nn(lyricElement, 'syllabic', syllabic, '');
            nn(lyricElement, 'text', lyric.getText(), '');
        });
    }
    /**
     * /score-partwise/measure/note
     * @param measureElement
     * @param smoState
     */
    static note(measureElement, measure, note, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        let i = 0;
        for (i = 0; i < note.pitches.length; ++i) {
            let j = 0;
            const noteElement = nn(measureElement, 'note', null, '');
            const isChord = i > 0;
            if (isChord) {
                nn(noteElement, 'chord', null, '');
            }
            else {
            }
            if (note.isRest()) {
                const restElement = nn(noteElement, 'rest', null, '');
                const step = { letter: note.pitches[i].letter.toUpperCase() };
                nn(restElement, 'display-step', step, 'letter');
                nn(restElement, 'display-octave', Object.assign({}, note.pitches[i]), 'octave');
            }
            else {
                SmoToXml.pitch(note.pitches[i], noteElement);
            }
            const duration = note.tickCount;
            smoState.measureTicks += duration;
            const tuplet = measure.getTupletForNote(note);
            nn(noteElement, 'duration', { duration }, 'duration');
            SmoToXml.tie(noteElement, smoState);
            nn(noteElement, 'voice', { voice: smoState.voiceIndex }, 'voice');
            let typeTickCount = note.tickCount;
            if (tuplet) {
                typeTickCount = tuplet.stemTicks;
            }
            nn(noteElement, 'type', { type: _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.closestStemType(typeTickCount) }, 'type');
            const dots = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoTicksToVexDots(note.tickCount);
            for (j = 0; j < dots; ++j) {
                nn(noteElement, 'dot', null, '');
            }
            // time modification (tuplet) comes before notations which have tuplet beaming rules
            // also before stem
            if (tuplet) {
                SmoToXml.tupletTime(noteElement, tuplet, smoState);
            }
            if (note.flagState === _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.up) {
                nn(noteElement, 'stem', { direction: 'up' }, 'direction');
            }
            if (note.flagState === _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.flagStates.down) {
                nn(noteElement, 'stem', { direction: 'down' }, 'direction');
            }
            // stupid musicxml requires beam to be last.
            const notationsElement = noteElement.ownerDocument.createElement('notations');
            // If a multi-part staff, we need to include 'staff' element
            if (smoState.partStaves.length > 1) {
                nn(noteElement, 'staff', { staffIx: smoState.staffPartIx + 1 }, 'staffIx');
            }
            if (!isChord) {
                SmoToXml.beamNote(noteElement, smoState);
            }
            if (!isChord) {
                SmoToXml.slur(notationsElement, smoState);
            }
            SmoToXml.tied(notationsElement, smoState);
            if (tuplet) {
                SmoToXml.tupletNotation(notationsElement, tuplet, note);
            }
            const ornaments = note.getOrnaments();
            if (ornaments.length) {
                const ornamentsElement = noteElement.ownerDocument.createElement('ornaments');
                ornamentsElement.textContent = '\n';
                ornaments.forEach((ornament) => {
                    if (_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoOrnament.xmlOrnaments[ornament.ornament]) {
                        const sub = nn(ornamentsElement, _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoOrnament.xmlOrnaments[ornament.ornament], null, '');
                        _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(sub, 'placement', 'above');
                    }
                });
                if (ornamentsElement.children.length) {
                    notationsElement.appendChild(ornamentsElement);
                }
            }
            const jazzOrnaments = note.getJazzOrnaments();
            const articulations = note.articulations;
            if (jazzOrnaments.length || articulations.length) {
                const articulationsElement = noteElement.ownerDocument.createElement('articulations');
                jazzOrnaments.forEach((ornament) => {
                    if (_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoOrnament.xmlJazz[ornament.ornament]) {
                        nn(articulationsElement, _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoOrnament.xmlJazz[ornament.ornament], null, '');
                    }
                });
                articulations.forEach((articulation) => {
                    if (_data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoArticulation.xmlArticulations[articulation.articulation]) {
                        nn(articulationsElement, _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoArticulation.xmlArticulations[articulation.articulation], null, '');
                    }
                });
                if (articulationsElement.children.length) {
                    notationsElement.append(articulationsElement);
                }
            }
            if (notationsElement.children.length) {
                noteElement.appendChild(notationsElement);
            }
            // stupid musicxml requires beam to be laster.
            if (!isChord) {
                SmoToXml.lyric(noteElement, smoState);
            }
        }
        smoState.voiceTickIndex += 1;
    }
    /**
     * /score-partwise/measure/attributes/key
     * @param attributesElement
     * @param smoState
     * @returns
     */
    static key(attributesElement, measure, smoState) {
        let fifths = 0;
        if (smoState.keySignature && measure.keySignature === smoState.keySignature) {
            return; // no key change
        }
        const flats = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getFlatsInKeySignature(measure.keySignature);
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        if (flats > 0) {
            fifths = -1 * flats;
        }
        else {
            fifths = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getSharpsInKeySignature(measure.keySignature);
        }
        const keyElement = nn(attributesElement, 'key', null, '');
        nn(keyElement, 'fifths', { fifths }, 'fifths');
        nn(keyElement, 'mode', { mode: 'major' }, 'major');
        smoState.keySignature = measure.keySignature;
    }
    /**
     * /score-partwise/part/measure/attributes/time
     * @param attributesElement
     * @param smoState
     * @returns
     */
    static time(attributesElement, smoState) {
        var _a;
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        const currentTs = (_a = smoState.timeSignature) !== null && _a !== void 0 ? _a : null;
        if (currentTs !== null && _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.TimeSignature.equal(currentTs, measure.timeSignature)) {
            return;
        }
        smoState.timeSignature = measure.timeSignature;
        const time = { beats: measure.timeSignature.actualBeats, beatType: measure.timeSignature.beatDuration };
        const timeElement = nn(attributesElement, 'time', null, '');
        nn(timeElement, 'beats', time, 'beats');
        nn(timeElement, 'beat-type', time, 'beatType');
        smoState.timeSignature = measure.timeSignature;
    }
    /**
     * /score-partwise/part/measure/attributes/clef
     * @param attributesElement
     * @param smoState
     * @returns
     */
    static clef(attributesElement, smoState) {
        smoState.partStaves.forEach((staff, staffIx) => {
            const measure = staff.measures[smoState.measureIndex];
            let prevMeasure = null;
            let clefChange = null;
            if (smoState.measureIndex > 0) {
                prevMeasure = staff.measures[smoState.measureIndex - 1];
            }
            if (prevMeasure && prevMeasure.clef !== measure.clef) {
                clefChange = measure.clef;
            }
            // both clefs are defined in the first measure one time.
            if (smoState.measureIndex === 0 && smoState.staffPartIx === 0) {
                clefChange = measure.clef;
            }
            if (clefChange) {
                const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
                const xmlClef = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.clefSigns[clefChange];
                const clefElement = nn(attributesElement, 'clef', null, '');
                nn(clefElement, 'sign', xmlClef.sign, 'sign');
                if (typeof (xmlClef.line) !== 'undefined') {
                    nn(clefElement, 'line', xmlClef, 'line');
                }
                if (typeof (xmlClef.octave) !== 'undefined') {
                    nn(clefElement, 'clef-octave-change', xmlClef, 'octave');
                }
                _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createAttribute(clefElement, 'number', (staffIx + 1).toString());
            }
        });
    }
    /**
     * /score-partwise/part/measure/attributes
     * @param measureElement
     * @param smoState
     */
    static attributes(measureElement, measure, smoState) {
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        const attributesElement = measureElement.ownerDocument.createElement('attributes');
        if (smoState.divisions < 1) {
            nn(attributesElement, 'divisions', { divisions: 4096 }, 'divisions');
            smoState.divisions = 4096;
        }
        SmoToXml.key(attributesElement, measure, smoState);
        SmoToXml.time(attributesElement, smoState);
        // only call out number of staves in a part at the beginning of the part
        if (smoState.measureIndex === 0 && smoState.staffPartIx === 0) {
            SmoToXml.staves(attributesElement, smoState);
        }
        SmoToXml.clef(attributesElement, smoState);
        SmoToXml.transpose(attributesElement, smoState);
        if (attributesElement.children.length > 0) {
            // don't add an empty attributes element
            measureElement.appendChild(attributesElement);
        }
    }
    static staves(attributesElement, smoState) {
        const staff = smoState.partStaves[smoState.staffPartIx];
        const staffCount = staff.partInfo.stavesAfter > 0 ? 2 : 1;
        const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
        nn(attributesElement, 'staves', { staffCount: staffCount.toString() }, 'staffCount');
    }
    /**
     * /score-partwise/part/measure/attributes/transpose
     * @param attributesElement
     * @param smoState
     * @returns
     */
    static transpose(attributesElement, smoState) {
        const staff = smoState.partStaves[smoState.staffPartIx];
        const measure = staff.measures[smoState.measureIndex];
        if (measure.transposeIndex !== smoState.transposeOffset) {
            smoState.transposeOffset = measure.transposeIndex;
            const nn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_7__.XmlHelpers.createTextElementChild;
            const xposeElement = nn(attributesElement, 'transpose', null, '');
            const offset = (measure.transposeIndex * -1).toString();
            ;
            nn(xposeElement, 'chromatic', { offset: offset }, 'offset');
        }
    }
}


/***/ }),

/***/ "./src/smo/mxml/xmlHelpers.ts":
/*!************************************!*\
  !*** ./src/smo/mxml/xmlHelpers.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XmlHelpers: () => (/* binding */ XmlHelpers)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.






const VF = _common_vex__WEBPACK_IMPORTED_MODULE_5__.VexFlow;
/**
 * Utilities for parsing and serialzing musicXML.
 * @category SmoToXml
 * */
class XmlHelpers {
    /**
     * mxml note 'types', really s/b stem types.
     * For grace notes, we use the note type and not duration
     * to get the flag
     */
    static get noteTypesToSmoMap() {
        return {
            'breve': 8192 * 4,
            'whole': 8192 * 2,
            'half': 8192,
            'quarter': 4096,
            'eighth': 2048,
            '16th': 1024,
            '32nd': 512,
            '64th': 256,
            '128th': 128
        };
    }
    static get ticksToNoteTypeMap() {
        return XmlHelpers._ticksToNoteTypeMap;
    }
    // ### closestStemType
    // smo infers the stem type from the duration, but other applications don't
    static closestStemType(ticks) {
        const nticks = VF.durationToTicks(_data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.vexStemType(ticks));
        return XmlHelpers.ticksToNoteTypeMap[nticks];
    }
    static get beamStates() {
        return {
            BEGIN: 1,
            END: 2,
            AUTO: 3
        };
    }
    static get ornamentXmlToSmoMap() {
        return {
            staccato: { ctor: 'SmoArticulation', params: { articulation: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.staccato } },
            tenuto: { ctor: 'SmoArticulation', params: { articulation: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.tenuto } },
            marcato: { ctor: 'SmoArticulation', params: { articulation: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.marcato } },
            accent: { ctor: 'SmoArticulation', params: { articulation: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.accent } },
            doit: { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.doitLong } },
            falloff: { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.fall } },
            scoop: { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.scoop } },
            'delayed-turn': { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.turn, offset: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.offsets.after } },
            turn: { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.turn, offset: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.offsets.on } },
            'inverted-turn': { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.turnInverted } },
            mordent: { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.mordent } },
            'inverted-mordent': { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.mordentInverted } },
            shake: { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.mordentInverted } },
            'trill-mark': { ctor: 'SmoOrnament', params: { ornament: _data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.trill } },
        };
    }
    // ### createRootElement
    // Create score-partwise document with prelude
    // https://bugzilla.mozilla.org/show_bug.cgi?id=318086
    static createRootElement() {
        const doc = document.implementation.createDocument('', '', null);
        const rootElem = doc.createElement('score-partwise');
        const piElement = doc.createProcessingInstruction('xml', 'version="1.0" encoding="UTF-8"');
        rootElem.setAttribute('version', '3.1');
        doc.appendChild(rootElem);
        doc.insertBefore(piElement, rootElem);
        return doc;
    }
    // Parse an element whose child has a number in the textContent
    static getNumberFromElement(parent, path, defaults) {
        let rv = (typeof (defaults) === 'undefined' || defaults === null)
            ? 0 : defaults;
        const tval = XmlHelpers.getTextFromElement(parent, path, defaults);
        if (!tval) {
            return rv;
        }
        if (typeof (tval) === 'number') {
            return tval;
        }
        if (tval.indexOf('.')) {
            const tf = parseFloat(tval);
            rv = isNaN(tf) ? rv : tf;
        }
        else {
            const ff = parseInt(tval, 10);
            rv = isNaN(ff) ? rv : ff;
        }
        return rv;
    }
    // Parse an element whose child has a textContent
    static getTextFromElement(parent, path, defaults) {
        const rv = (typeof (defaults) === 'undefined' || defaults === null)
            ? 0 : defaults;
        const el = [...parent.getElementsByTagName(path)];
        if (!el.length) {
            return rv.toString();
        }
        return el[0].textContent;
    }
    static getNumberFromAttribute(node, attribute, defaults) {
        const str = XmlHelpers.getTextFromAttribute(node, attribute, defaults.toString());
        const rv = parseInt(str, 10);
        if (isNaN(rv)) {
            return defaults;
        }
        return rv;
    }
    static getTextFromAttribute(node, attribute, defaults) {
        const rv = node.getAttribute(attribute);
        if (rv) {
            return rv;
        }
        return defaults;
    }
    // ### getChildrenFromPath
    // Like xpath, given ['foo', 'bar'] and parent element
    // 'moo' return any element /moo/foo/bar as an array of elements
    static getChildrenFromPath(parent, pathAr) {
        let i = 0;
        let node = parent;
        const rv = [];
        for (i = 0; i < pathAr.length; ++i) {
            const tag = pathAr[i];
            const nodes = [...node.getElementsByTagName(tag)];
            if (nodes.length === 0) {
                return [];
            }
            if (i < pathAr.length - 1) {
                node = nodes[0];
            }
            else {
                nodes.forEach((nn) => {
                    rv.push(nn);
                });
            }
        }
        return rv;
    }
    static getStemType(noteElement) {
        const tt = XmlHelpers.getTextFromElement(noteElement, 'stem', '');
        if (tt === 'up') {
            return _data_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.flagStates.up;
        }
        else if (tt === 'down') {
            return _data_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.flagStates.down;
        }
        return _data_note__WEBPACK_IMPORTED_MODULE_3__.SmoNote.flagStates.auto;
    }
    static getEnding(barlineNode) {
        const endingNodes = [...barlineNode.getElementsByTagName('ending')];
        if (!endingNodes.length) {
            return null;
        }
        const attrs = XmlHelpers.nodeAttributes(endingNodes[0]);
        if (attrs.number && attrs.type) {
            return {
                numbers: attrs.number.split(',').map((x) => parseInt(x, 10)),
                type: attrs.type
            };
        }
        return null;
    }
    static getBarline(barlineNode) {
        const rptNode = [...barlineNode.getElementsByTagName('repeat')];
        if (rptNode.length) {
            const repeatattr = XmlHelpers.nodeAttributes(rptNode[0]);
            return repeatattr.direction === 'forward' ? _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.startRepeat : _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.endRepeat;
        }
        const styleText = XmlHelpers.getTextFromElement(barlineNode, 'bar-style', '');
        if (styleText.length) {
            const double = styleText.indexOf('-') >= 0;
            const heavy = styleText.indexOf('heavy') >= 0;
            const light = styleText.indexOf('light') >= 0;
            if (double && heavy && light) {
                return _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.endBar;
            }
            if (double) {
                return _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.doubleBar;
            }
        }
        return _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.singleBar;
    }
    // ### assignDefaults
    // Map SMO layout data from xml layout data (default node)
    static assignDefaults(node, defObj, parameters) {
        parameters.forEach((param) => {
            if (!isNaN(parseInt(defObj[param.smo], 10))) {
                const smoParam = param.smo;
                const xmlParam = param.xml;
                defObj[smoParam] = XmlHelpers.getNumberFromElement(node, xmlParam, defObj[smoParam]);
            }
        });
    }
    // ### nodeAttributes
    // turn the attributes of an element into a JS hash
    static nodeAttributes(node) {
        const rv = {};
        node.getAttributeNames().forEach((attr) => {
            const aval = node.getAttribute(attr);
            if (aval) {
                rv[attr] = aval;
            }
        });
        return rv;
    }
    // Some measures have staff ID, some don't.
    // convert xml 1 index to array 0 index
    static getStaffId(node) {
        const staff = [...node.getElementsByTagName('staff')];
        if (staff.length && staff[0].textContent) {
            return parseInt(staff[0].textContent, 10) - 1;
        }
        return 0;
    }
    static noteBeamState(noteNode) {
        const beamNodes = [...noteNode.getElementsByTagName('beam')];
        if (!beamNodes.length) {
            return XmlHelpers.beamStates.AUTO;
        }
        const beamText = beamNodes[0].textContent;
        if (beamText === 'begin') {
            return XmlHelpers.beamStates.BEGIN;
        }
        else if (beamText === 'end') {
            return XmlHelpers.beamStates.END;
        }
        return XmlHelpers.beamStates.AUTO;
    }
    // same with notes and voices.  same convert
    static getVoiceId(node) {
        const voice = [...node.getElementsByTagName('voice')];
        if (voice.length && voice[0].textContent) {
            return parseInt(voice[0].textContent, 10) - 1;
        }
        return 0;
    }
    static smoPitchFromNote(noteNode, defaultPitch) {
        const accidentals = ['bb', 'b', 'n', '#', '##'];
        const letter = XmlHelpers.getTextFromElement(noteNode, 'step', defaultPitch.letter).toLowerCase();
        const octave = XmlHelpers.getNumberFromElement(noteNode, 'octave', defaultPitch.octave);
        const xaccidental = XmlHelpers.getNumberFromElement(noteNode, 'alter', 0);
        return { letter, accidental: accidentals[xaccidental + 2], octave };
    }
    static isGrace(noteNode) {
        const path = XmlHelpers.getChildrenFromPath(noteNode, ['grace']);
        return (path === null || path === void 0 ? void 0 : path.length) > 0;
    }
    static isSystemBreak(measureNode) {
        const printNodes = measureNode.getElementsByTagName('print');
        if (printNodes.length) {
            const attrs = XmlHelpers.nodeAttributes(printNodes[0]);
            if (typeof (attrs['new-system']) !== 'undefined') {
                return attrs['new-system'] === 'yes';
            }
        }
        return false;
    }
    // ### durationFromType
    // Get the SMO tick duration of a note, based on the XML type element (quarter, etc)
    static durationFromType(noteNode, def) {
        const typeNodes = [...noteNode.getElementsByTagName('type')];
        if (typeNodes.length) {
            const txt = typeNodes[0].textContent;
            if (txt && XmlHelpers.noteTypesToSmoMap[txt]) {
                return XmlHelpers.noteTypesToSmoMap[txt];
            }
        }
        return def;
    }
    // ### durationFromNode
    // the true duration value, used to handle forward/backward
    static durationFromNode(noteNode, def) {
        const durationNodes = [...noteNode.getElementsByTagName('duration')];
        if (durationNodes.length && durationNodes[0].textContent) {
            const duration = parseInt(durationNodes[0].textContent, 10);
            return duration;
        }
        return def;
    }
    static ticksFromDuration(noteNode, divisions, def) {
        const rv = { tickCount: def, duration: def / divisions, alteration: { noteCount: 1, noteDuration: 1 } };
        const durationNodes = [...noteNode.getElementsByTagName('duration')];
        const timeAlteration = XmlHelpers.getTimeAlteration(noteNode);
        // different ways to declare note duration - from type is the graphical
        // type, SMO uses ticks for everything
        if (durationNodes.length && durationNodes[0].textContent) {
            rv.duration = parseInt(durationNodes[0].textContent, 10);
            rv.tickCount = 4096 * (rv.duration / divisions);
        }
        else {
            rv.tickCount = XmlHelpers.durationFromType(noteNode, def);
            rv.duration = (divisions / 4096) * rv.tickCount;
        }
        // If this is a tuplet, we adjust the note duration back to the graphical type
        // and SMO will create the tuplet after.  We keep track of tuplet data though for beaming
        if (timeAlteration) {
            rv.tickCount = (rv.tickCount * timeAlteration.noteCount) / timeAlteration.noteDuration;
            rv.alteration = timeAlteration;
        }
        return rv;
    }
    static getTieData(noteNode, selector, pitchIndex) {
        const rv = [];
        let number = 0;
        const nNodes = [...noteNode.getElementsByTagName('notations')];
        nNodes.forEach((nNode) => {
            const slurNodes = [...nNode.getElementsByTagName('tied')];
            slurNodes.forEach((slurNode) => {
                const orientation = XmlHelpers.getTextFromAttribute(slurNode, 'orientation', 'auto');
                const type = slurNode.getAttribute('type');
                number = XmlHelpers.getNumberFromAttribute(slurNode, 'number', 1);
                rv.push({ number, type, orientation, selector, pitchIndex });
            });
        });
        return rv;
    }
    static getSlurData(noteNode, selector) {
        const rv = [];
        const nNodes = [...noteNode.getElementsByTagName('notations')];
        nNodes.forEach((nNode) => {
            const slurNodes = [...nNode.getElementsByTagName('slur')];
            slurNodes.forEach((slurNode) => {
                const number = parseInt(slurNode.getAttribute('number'), 10);
                const type = slurNode.getAttribute('type');
                const orientation = XmlHelpers.getTextFromAttribute(slurNode, 'orienation', 'auto');
                const placement = XmlHelpers.getTextFromAttribute(slurNode, 'placement', 'auto');
                const controlX = XmlHelpers.getNumberFromAttribute(slurNode, 'bezier-x', 0);
                // Y coordinates are reversed from music XML to SVG, hence the -1
                const controlY = XmlHelpers.getNumberFromAttribute(slurNode, 'bezier-y', 15) * -1;
                const slurInfo = { number, type, orientation, placement, controlX, controlY, selector, invert: false, yOffset: 0 };
                rv.push(slurInfo);
            });
        });
        return rv;
    }
    static getCrescendoData(directionElement) {
        let rv = {};
        const nNodes = XmlHelpers.getChildrenFromPath(directionElement, ['direction-type', 'wedge']);
        nNodes.forEach((nNode) => {
            rv = { type: nNode.getAttribute('type') };
        });
        return rv;
    }
    static getTupletData(noteNode) {
        const rv = [];
        const nNodes = [...noteNode.getElementsByTagName('notations')];
        nNodes.forEach((nNode) => {
            const slurNodes = [...nNode.getElementsByTagName('tuplet')];
            slurNodes.forEach((slurNode) => {
                const number = parseInt(slurNode.getAttribute('number'), 10);
                const type = slurNode.getAttribute('type');
                rv.push({ number, type });
            });
        });
        return rv;
    }
    static articulationsAndOrnaments(noteNode) {
        const rv = [];
        const nNodes = [...noteNode.getElementsByTagName('notations')];
        nNodes.forEach((nNode) => {
            ['articulations', 'ornaments'].forEach((typ) => {
                const articulations = [...nNode.getElementsByTagName(typ)];
                articulations.forEach((articulation) => {
                    Object.keys(XmlHelpers.ornamentXmlToSmoMap).forEach((key) => {
                        if (articulation.getElementsByTagName(key).length) {
                            const ctor = eval('globalThis.Smo.' + XmlHelpers.ornamentXmlToSmoMap[key].ctor);
                            rv.push(new ctor(XmlHelpers.ornamentXmlToSmoMap[key].params));
                        }
                    });
                });
            });
        });
        return rv;
    }
    static lyrics(noteNode) {
        const rv = [];
        const nNodes = [...noteNode.getElementsByTagName('lyric')];
        nNodes.forEach((nNode) => {
            let verse = nNode.getAttribute('number');
            const text = XmlHelpers.getTextFromElement(nNode, 'text', '_');
            const name = nNode.getAttribute('name');
            const syllabic = XmlHelpers.getTextFromElement(nNode, 'syllabic', 'end');
            // Per xml spec, verse can be specified by a string (name), as in 'chorus'
            if (!verse) {
                verse = name;
            }
            const obj = { _text: text, verse, syllabic };
            rv.push(obj);
        });
        return rv;
    }
    static getTimeAlteration(noteNode) {
        const timeNodes = XmlHelpers.getChildrenFromPath(noteNode, ['time-modification']);
        if (timeNodes.length) {
            return {
                noteCount: XmlHelpers.getNumberFromElement(timeNodes[0], 'actual-notes', 1),
                noteDuration: XmlHelpers.getNumberFromElement(timeNodes[0], 'normal-notes', 1)
            };
        }
        return null;
    }
    // ### createTextElementChild
    // In:  ../parent
    // Out: ../parent/elementName/obj[field]
    // returns elementName element.  If obj is null, just creates and returns child
    // if obj is a string, it uses it as the text value
    static createTextElementChild(parentElement, elementName, obj, field) {
        const el = parentElement.ownerDocument.createElement(elementName);
        if (obj) {
            if (typeof (obj) === 'string') {
                el.textContent = obj;
            }
            else {
                el.textContent = obj[field];
            }
        }
        parentElement.appendChild(el);
        return el;
    }
    static createAttributes(element, obj) {
        Object.keys(obj).forEach((key) => {
            const attr = element.ownerDocument.createAttribute(key);
            attr.value = obj[key];
            element.setAttributeNode(attr);
        });
    }
    static createAttribute(element, name, value) {
        const obj = {};
        obj[name] = value;
        XmlHelpers.createAttributes(element, obj);
    }
}
XmlHelpers._ticksToNoteTypeMap = _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.reverseMap(XmlHelpers.noteTypesToSmoMap);


/***/ }),

/***/ "./src/smo/mxml/xmlState.ts":
/*!**********************************!*\
  !*** ./src/smo/mxml/xmlState.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XmlState: () => (/* binding */ XmlState)
/* harmony export */ });
/* harmony import */ var _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xmlHelpers */ "./src/smo/mxml/xmlHelpers.ts");
/* harmony import */ var _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _data_tuplet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/tuplet */ "./src/smo/data/tuplet.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _xform_selections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../xform/selections */ "./src/smo/xform/selections.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.









/**
 * Keep state of musical objects while parsing music xml
 * @category SmoToXml
 * */
class XmlState {
    constructor() {
        this.clefInfo = [];
        this.systems = [];
        this.staffGroups = [];
        this.smoStaves = [];
        this.slurs = {};
        this.wedges = {};
        this.hairpins = [];
        this.instrument = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoInstrument.defaults;
        this.instrumentMap = {};
        this.globalCursor = 0;
        this.staffVoiceHash = {};
        this.endingMap = {};
        this.startRepeatMap = {};
        this.endRepeatMap = {};
        this.startBarline = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar;
        this.endBarline = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar;
        this.measureIndex = -1;
        this.completedSlurs = [];
        this.completedTies = [];
        this.verseMap = {};
        this.measureNumber = 0;
        this.formattingManager = new _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoFormattingManager(_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoFormattingManager.defaults);
        this.tuplets = {};
        this.tickCursor = 0;
        this.tempo = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.defaults);
        this.staffArray = [];
        this.staffIndex = 0;
        this.graceNotes = [];
        this.currentDuration = 0;
        this.beamGroups = {};
        this.dynamics = [];
        this.previousNote = new _data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote(_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.defaults);
        this.completedTuplets = [];
        this.newTitle = false;
        this.divisions = 4096;
        this.keySignature = 'c';
        this.timeSignature = '4/4';
        this.voiceIndex = 0;
        this.pixelsPerTenth = 0.4;
        this.musicFontSize = 16;
        this.partId = '';
        this.rehearsalMark = '';
        this.rehearsalMarks = {};
        this.parts = {};
        this.openPartGroup = null;
    }
    static get defaults() {
        return {
            divisions: 4096, tempo: new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoTempoText.defaults), timeSignature: '4/4', keySignature: 'C',
            clefInfo: [], staffGroups: [], smoStaves: []
        };
    }
    // Initialize things that persist throughout a staff
    // likc hairpins and slurs
    initializeForPart() {
        this.slurs = {};
        this.wedges = {};
        this.hairpins = [];
        this.globalCursor = 0;
        this.staffVoiceHash = {};
        this.measureIndex = -1;
        this.completedSlurs = [];
        this.verseMap = {};
        this.instrument.keyOffset = 0;
        this.instrumentMap = {};
        this.partId = '';
        this.clefInfo = [];
        this.formattingManager = new _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoFormattingManager(_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoFormattingManager.defaults);
    }
    // ### initializeForMeasure
    // reset state for a new measure:  beam groups, tuplets
    // etc. that don't cross measure boundaries
    initializeForMeasure(measureElement) {
        const oldMeasure = this.measureNumber;
        this.measureNumber =
            parseInt(measureElement.getAttribute('number'), 10) - 1;
        if (isNaN(this.measureNumber)) {
            this.measureNumber = oldMeasure + 1;
        }
        this.tuplets = {};
        this.tickCursor = 0;
        this.tempo = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoMeasureModifierBase.deserialize(this.tempo.serialize());
        this.tempo.display = false;
        this.staffArray = [];
        this.graceNotes = [];
        this.currentDuration = 0;
        this.beamGroups = {};
        this.completedTuplets = [];
        this.dynamics = [];
        this.startBarline = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar;
        this.endBarline = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.singleBar;
        this.previousNote = new _data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote(_data_note__WEBPACK_IMPORTED_MODULE_4__.SmoNote.defaults);
        this.measureIndex += 1;
        this.rehearsalMark = '';
    }
    // ### initializeStaff
    // voices are not sequential, seem to have artitrary numbers and
    // persist per part, so we treat them as a hash.
    // staff IDs persist per part but are sequential.
    initializeStaff(staffIndex, voiceIndex) {
        // If no clef is specified, default to treble
        if (typeof (this.staffArray[staffIndex]) === 'undefined') {
            this.staffArray.push({ clefInfo: { clef: 'treble', staffId: this.staffIndex }, measure: null, voices: {} });
        }
        if (typeof (this.staffArray[staffIndex].voices[voiceIndex]) === 'undefined') {
            this.staffArray[staffIndex].voices[voiceIndex] = { notes: [], ticksUsed: 0 };
            // keep track of 0-indexed voice for slurs and other modifiers
            if (!this.staffVoiceHash[staffIndex]) {
                this.staffVoiceHash[staffIndex] = [];
            }
            if (this.staffVoiceHash[staffIndex].indexOf(voiceIndex) < 0) {
                this.staffVoiceHash[staffIndex].push(voiceIndex);
            }
            // The smo 0-indexed voice index, used in selectors
            this.beamGroups[voiceIndex] = null;
        }
    }
    // ### updateStaffGroups
    // once everything is parsed, figure out how to group the staves
    updateStaffGroups() {
        this.systems = [];
        this.staffGroups.forEach((staffGroup) => {
            const len = this.smoStaves[staffGroup.start].measures.length;
            const startSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default;
            startSelector.staff = staffGroup.start;
            startSelector.measure = 0;
            const endSelector = _xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default;
            endSelector.staff = staffGroup.start + (staffGroup.length - 1);
            endSelector.measure = len;
            const grpParams = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoSystemGroup.defaults;
            grpParams.startSelector = startSelector;
            grpParams.endSelector = endSelector;
            grpParams.leftConnector = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoSystemGroup.connectorTypes.brace;
            this.systems.push(new _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoSystemGroup(grpParams));
        });
    }
    addLyric(note, lyricData) {
        if (typeof (this.verseMap[lyricData.verse]) === 'undefined') {
            const keys = Object.keys(this.verseMap);
            this.verseMap[lyricData.verse] = keys.length;
        }
        lyricData.verse = this.verseMap[lyricData.verse];
        const params = _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoLyric.defaults;
        params.text = lyricData._text;
        params.verse = lyricData.verse;
        if (lyricData.syllabic === 'begin' || lyricData.syllabic === 'middle') {
            params.text += '-';
        }
        const lyric = new _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoLyric(params);
        note.addLyric(lyric);
    }
    /**
     * process a wedge aka hairpin dynamic
     * @param wedgeInfo
     */
    processWedge(wedgeInfo) {
        if (wedgeInfo.type) {
            // If we already know about this wedge, it must have been
            // started, so complete it
            if (this.wedges.type) {
                this.hairpins.push({
                    type: this.wedges.type,
                    start: this.wedges.start,
                    end: this.tickCursor + this.globalCursor
                });
                this.wedges = {};
            }
            else {
                this.wedges.type = wedgeInfo.type;
                this.wedges.start = this.tickCursor + this.globalCursor;
            }
        }
    }
    // ### backtrackHairpins
    // For the measure just parsed, find the correct tick for the
    // beginning and end of hairpins, if a hairpin stop directive
    // was received.  These are not associated with a staff or voice, so
    // we use the first one in the measure element for both
    backtrackHairpins(smoStaff, staffId) {
        this.hairpins.forEach((hairpin) => {
            let hpMeasureIndex = this.measureIndex;
            let hpMeasure = smoStaff.measures[hpMeasureIndex];
            let startTick = hpMeasure.voices[0].notes.length - 1;
            let hpTickCount = this.globalCursor; // All ticks read so far
            const endSelector = {
                staff: staffId - 1, measure: hpMeasureIndex, voice: 0,
                tick: -1, pitches: []
            };
            while (hpMeasureIndex >= 0 && hpTickCount > hairpin.start) {
                if (endSelector.tick < 0 && hpTickCount <= hairpin.end) {
                    endSelector.tick = startTick;
                }
                hpTickCount -= hpMeasure.voices[0].notes[startTick].ticks.numerator;
                if (hpTickCount > hairpin.start) {
                    startTick -= 1;
                    if (startTick < 0) {
                        hpMeasureIndex -= 1;
                        hpMeasure = smoStaff.measures[hpMeasureIndex];
                        startTick = hpMeasure.voices[0].notes.length - 1;
                    }
                }
            }
            const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoStaffHairpin.defaults;
            params.startSelector = {
                staff: staffId - 1, measure: hpMeasureIndex, voice: 0, tick: startTick, pitches: []
            };
            params.endSelector = endSelector;
            params.hairpinType = hairpin.type === 'crescendo' ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoStaffHairpin.types.CRESCENDO : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoStaffHairpin.types.DECRESCENDO;
            const smoHp = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoStaffHairpin(params);
            smoStaff.modifiers.push(smoHp);
        });
        this.hairpins = [];
    }
    // ### updateDynamics
    // Based on note just parsed, put the dynamics on the closest
    // note, based on the offset of dynamic
    updateDynamics() {
        const smoNote = this.previousNote;
        const tickCursor = this.tickCursor;
        const newArray = [];
        this.dynamics.forEach((dynamic) => {
            if (tickCursor >= dynamic.offset) {
                const modParams = _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoDynamicText.defaults;
                modParams.text = dynamic.dynamic;
                // TODO: change the smonote name of this interface
                smoNote.addDynamic(new _data_noteModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoDynamicText(modParams));
            }
            else {
                newArray.push(dynamic);
            }
        });
        this.dynamics = newArray;
    }
    // For the given voice, beam the notes according to the
    // note beam length
    backtrackBeamGroup(voice, beamGroup) {
        let i = 0;
        for (i = 0; i < beamGroup.notes; ++i) {
            const note = voice.notes[voice.notes.length - (i + 1)];
            if (!note) {
                console.warn('no note for beam group');
                return;
            }
            note.endBeam = i === 0;
            note.beamBeats = beamGroup.ticks;
        }
    }
    // ### updateBeamState
    // Keep track of beam instructions found while parsing note element
    // includes time alteration from tuplets
    updateBeamState(beamState, alteration, voice, voiceIndex) {
        const note = voice.notes[voice.notes.length - 1];
        if (beamState === _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.beamStates.BEGIN) {
            this.beamGroups[voiceIndex] = {
                ticks: (note.tickCount * alteration.noteCount) / alteration.noteDuration,
                notes: 1
            };
        }
        else if (this.beamGroups[voiceIndex]) {
            this.beamGroups[voiceIndex].ticks += note.tickCount;
            this.beamGroups[voiceIndex].notes += 1;
            if (beamState === _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.beamStates.END) {
                this.backtrackBeamGroup(voice, this.beamGroups[voiceIndex]);
                this.beamGroups[voiceIndex] = null;
            }
        }
    }
    updateTieStates(tieInfos) {
        tieInfos.forEach((tieInfo) => {
            // tieInfo = { number, type, orientation, selector, pitchIndex }
            if (tieInfo.type === 'start') {
                this.completedTies.push(tieInfo);
            }
        });
    }
    updateEndings(barlineNode) {
        const findStartEnding = (endingNumber, ix) => {
            const endingIx = Object.keys(this.endingMap).map((xx) => parseInt(xx, 10));
            let gt = -1;
            let rv = null;
            endingIx.forEach((ee) => {
                if (ee > gt && ee <= ix) {
                    const endings = this.endingMap[ee];
                    const txt = endings.find((xx) => xx.number === endingNumber);
                    if (txt) {
                        gt = ee;
                        rv = txt;
                    }
                    if (endings.findIndex((xx) => xx.number === endingNumber) >= 0) {
                        gt = ee;
                    }
                }
            });
            if (gt >= 0) {
                return rv;
            }
            else {
                return null;
            }
        };
        const ending = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getEnding(barlineNode);
        if (ending) {
            if (ending.type === 'start') {
                const numbers = ending.numbers;
                numbers.forEach((nn) => {
                    const endings = this.endingMap[this.measureIndex];
                    if (!endings) {
                        this.endingMap[this.measureIndex] = [];
                    }
                    const inst = this.endingMap[this.measureIndex].find((ee) => ee.number === nn);
                    if (!inst) {
                        this.endingMap[this.measureIndex].push({
                            start: this.measureIndex,
                            end: -1,
                            number: nn
                        });
                    }
                });
            }
            else {
                ending.numbers.forEach((nn) => {
                    const inst = findStartEnding(nn, this.measureIndex);
                    if (!inst) {
                        console.warn('bad ending ' + nn + ' at ' + this.measureIndex);
                    }
                    else {
                        inst.end = this.measureIndex;
                    }
                });
            }
        }
        const barline = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getBarline(barlineNode);
        if (barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoBarline.barlines.startRepeat) {
            this.startBarline = barline;
        }
        else {
            this.endBarline = barline;
        }
    }
    /**
     * While parsing a measure,
     * on a slur element, either complete a started
     * slur or start a new one.
     * @param slurInfos
     */
    updateSlurStates(slurInfos) {
        const clef = this.staffArray[this.staffIndex].clefInfo.clef;
        const note = this.previousNote;
        const getForcedSlurDirection = (smoParams, xmlStart, xmlEnd) => {
            // If the slur direction is specified, otherwise use autor.
            if (xmlStart.placement === 'above' || (xmlEnd === null || xmlEnd === void 0 ? void 0 : xmlEnd.placement) === 'above') {
                smoParams.position_end = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.positions.ABOVE;
                smoParams.position = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.positions.ABOVE;
                if (xmlStart.orientation === 'over') {
                    smoParams.orientation = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.orientations.DOWN;
                }
                else if (xmlStart.orientation === 'under') {
                    smoParams.orientation = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.orientations.UP;
                }
            }
            else if (xmlStart.placement === 'below' || (xmlEnd === null || xmlEnd === void 0 ? void 0 : xmlEnd.placement) === 'below') {
                smoParams.position_end = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.positions.BELOW;
                smoParams.position = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.positions.BELOW;
                if (xmlStart.orientation === 'over') {
                    smoParams.orientation = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.orientations.DOWN;
                }
                else if (xmlStart.orientation === 'under') {
                    smoParams.orientation = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.orientations.UP;
                }
            }
        };
        slurInfos.forEach((slurInfo) => {
            // slurInfo = { number, type, selector }
            if (slurInfo.type === 'start') {
                const slurParams = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.defaults;
                // if start and stop come out of order
                if (this.slurs[slurInfo.number] && this.slurs[slurInfo.number].type === 'stop') {
                    slurParams.endSelector = JSON.parse(JSON.stringify(this.slurs[slurInfo.number].selector));
                    slurParams.startSelector = slurInfo.selector;
                    slurParams.cp1x = slurInfo.controlX;
                    slurParams.cp1y = slurInfo.controlY;
                    const slurType = this.slurs[slurInfo.number];
                    getForcedSlurDirection(slurParams, slurInfo, slurType);
                    this.completedSlurs.push(slurParams);
                    this.slurs[slurInfo.number] = null;
                }
                else {
                    // We no longer try to pick the slur direction until the score is complete.
                    this.slurs[slurInfo.number] = JSON.parse(JSON.stringify(slurInfo));
                }
            }
            else if (slurInfo.type === 'stop') {
                if (this.slurs[slurInfo.number] && this.slurs[slurInfo.number].type === 'start') {
                    const slurData = this.slurs[slurInfo.number];
                    const slurParams = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur.defaults;
                    slurParams.startSelector = JSON.parse(JSON.stringify(this.slurs[slurInfo.number].selector));
                    slurParams.endSelector = slurInfo.selector;
                    slurParams.cp2x = slurInfo.controlX;
                    slurParams.cp2y = slurInfo.controlY;
                    slurParams.yOffset = slurData.yOffset;
                    const slurType = this.slurs[slurInfo.number];
                    getForcedSlurDirection(slurParams, slurInfo, slurType);
                    // console.log('complete slur ' + slurInfo.number + JSON.stringify(slurParams, null, ' '));
                    this.completedSlurs.push(slurParams);
                    this.slurs[slurInfo.number] = null;
                }
                else {
                    this.slurs[slurInfo.number] = JSON.parse(JSON.stringify(slurInfo));
                }
            }
        });
    }
    assignRehearsalMarks() {
        Object.keys(this.rehearsalMarks).forEach((rm) => {
            const measureIx = parseInt(rm, 10);
            this.smoStaves.forEach((staff) => {
                const mark = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoRehearsalMark(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoRehearsalMark.defaults);
                staff.addRehearsalMark(measureIx, mark);
            });
        });
    }
    /**
     * After reading in a measure, update any completed slurs and make them
     * into SmoSlur and add them to the SmoSystemGroup objects.
     * staffIndexOffset is the offset from the xml staffId and the score staff Id
     * (i.e. the staves that have already been parsed in other parts)
     */
    completeSlurs() {
        this.completedSlurs.forEach((slur) => {
            const smoSlur = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSlur(slur);
            this.smoStaves[slur.startSelector.staff].addStaffModifier(smoSlur);
        });
    }
    /**
     * Go through saved start ties, try to find the endpoint of the tie.  Ties in music xml
     * are a little ambiguous, we assume we are tying to the same pitch
     * @param score
     */
    completeTies(score) {
        this.completedTies.forEach((tieInfo) => {
            const startSelection = _xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.noteFromSelector(score, tieInfo.selector);
            if (startSelection && startSelection.note) {
                const startNote = startSelection.note;
                const endSelection = _xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.nextNoteSelectionFromSelector(score, startSelection.selector);
                const endNote = endSelection === null || endSelection === void 0 ? void 0 : endSelection.note;
                const pitches = [];
                if (endSelection && endNote) {
                    startNote.pitches.forEach((spitch, ix) => {
                        endNote.pitches.forEach((epitch, jx) => {
                            if (_data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.smoPitchToInt(spitch) === _data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.smoPitchToInt(epitch)) {
                                pitches.push({ from: ix, to: jx });
                            }
                        });
                    });
                }
                if (pitches.length && endSelection) {
                    const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTie.defaults;
                    params.startSelector = startSelection.selector;
                    params.endSelector = endSelection.selector;
                    params.lines = pitches;
                    const smoTie = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoTie(params);
                    score.staves[smoTie.startSelector.staff].addStaffModifier(smoTie);
                }
            }
        });
    }
    // ### backtrackTuplets
    // If we received a tuplet end, go back through the voice
    // and construct the SmoTuplet.
    backtrackTuplets(voice, tupletNumber, staffId, voiceId) {
        const tupletState = this.tuplets[tupletNumber];
        let i = tupletState.start.tick;
        const notes = [];
        const durationMap = [];
        while (i < voice.notes.length) {
            const note = voice.notes[i];
            notes.push(note);
            if (i === tupletState.start.tick) {
                durationMap.push(1.0);
            }
            else {
                const prev = voice.notes[i - 1];
                durationMap.push(note.ticks.numerator / prev.ticks.numerator);
            }
            i += 1;
        }
        const tp = _data_tuplet__WEBPACK_IMPORTED_MODULE_6__.SmoTuplet.defaults;
        tp.notes = notes;
        tp.durationMap = durationMap;
        tp.voice = voiceId;
        const tuplet = new _data_tuplet__WEBPACK_IMPORTED_MODULE_6__.SmoTuplet(tp);
        // Store the tuplet with the staff ID and voice so we
        // can add it to the right measure when it's created.
        this.completedTuplets.push({ tuplet, staffId, voiceId });
    }
    // ### updateTupletStates
    // react to a tuplet start or stop directive
    updateTupletStates(tupletInfos, voice, staffIndex, voiceIndex) {
        const tick = voice.notes.length - 1;
        tupletInfos.forEach((tupletInfo) => {
            if (tupletInfo.type === 'start') {
                this.tuplets[tupletInfo.number] = {
                    start: { staff: staffIndex, measure: this.measureNumber, voice: voiceIndex, tick, pitches: [] },
                    end: _xform_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default
                };
            }
            else if (tupletInfo.type === 'stop') {
                this.tuplets[tupletInfo.number].end = {
                    staff: staffIndex, measure: this.measureNumber, voice: voiceIndex, tick, pitches: []
                };
                this.backtrackTuplets(voice, tupletInfo.number, staffIndex, voiceIndex);
            }
        });
    }
    addTupletsToMeasure(smoMeasure, staffId, voiceId) {
        const completed = [];
        this.completedTuplets.forEach((tuplet) => {
            if (tuplet.voiceId === voiceId && tuplet.staffId === staffId) {
                smoMeasure.tuplets.push(tuplet.tuplet);
            }
            else {
                completed.push(tuplet);
            }
        });
        this.completedTuplets = completed;
    }
    getSystems() {
        const rv = [];
        this.systems.forEach((system) => {
            const params = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoSystemGroup.defaults;
            params.startSelector = system.startSelector;
            params.endSelector = system.endSelector;
            params.leftConnector = system.leftConnector;
            rv.push(new _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoSystemGroup(params));
        });
        return rv;
    }
}


/***/ }),

/***/ "./src/smo/mxml/xmlToSmo.ts":
/*!**********************************!*\
  !*** ./src/smo/mxml/xmlToSmo.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XmlToSmo: () => (/* binding */ XmlToSmo)
/* harmony export */ });
/* harmony import */ var _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xmlHelpers */ "./src/smo/mxml/xmlHelpers.ts");
/* harmony import */ var _xmlState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xmlState */ "./src/smo/mxml/xmlState.ts");
/* harmony import */ var _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _data_scoreText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _data_score__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _data_measure__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _data_systemStaff__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _xform_operations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../xform/operations */ "./src/smo/xform/operations.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_partInfo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../data/partInfo */ "./src/smo/data/partInfo.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Logic to convert music XML (finale) to Smo internal format
 * @module XmlToSmo
 */














/**
 * A class that takes a music XML file and outputs a {@link SmoScore}
 * @category SmoToXml
 */
class XmlToSmo {
    static get mmPerPixel() {
        return 0.264583;
    }
    /**
     * Vex renders everything as if the font size were 39
     */
    static get vexFontSize() {
        return 39;
    }
    static get customProportionDefault() {
        var _a, _b;
        return (_b = (_a = _data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore.defaults.layoutManager) === null || _a === void 0 ? void 0 : _a.getGlobalLayout().proportionality) !== null && _b !== void 0 ? _b : 0;
    }
    static get pageLayoutMap() {
        return [
            { xml: 'page-height', smo: 'pageHeight' },
            { xml: 'page-width', smo: 'pageWidth' }
        ];
    }
    static get pageMarginMap() {
        return [
            { xml: 'left-margin', smo: 'leftMargin' },
            { xml: 'right-margin', smo: 'rightMargin' },
            { xml: 'top-margin', smo: 'topMargin' },
            { xml: 'bottom-margin', smo: 'bottomMargin' }
        ];
    }
    static get scoreInfoFields() {
        return ['title', 'subTitle', 'composer', 'copyright'];
    }
    /**
     * Convert music XML file from parsed xml to a {@link SmoScore}
     * @param xmlDoc
     * @returns
     */
    static convert(xmlDoc) {
        try {
            const scoreRoots = [...xmlDoc.getElementsByTagName('score-partwise')];
            if (!scoreRoots.length) {
                // no score node
                return _data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore.getDefaultScore(_data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore.defaults, _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.defaults);
            }
            const scoreRoot = scoreRoots[0];
            const rv = new _data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore(_data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore.defaults);
            rv.staves = [];
            const layoutDefaults = rv.layoutManager;
            // if no scale given in score, default to something small.
            layoutDefaults.globalLayout.svgScale = 0.5;
            layoutDefaults.globalLayout.zoomScale = 1.0;
            const xmlState = new _xmlState__WEBPACK_IMPORTED_MODULE_1__.XmlState();
            xmlState.newTitle = false;
            rv.scoreInfo.name = 'Imported Smoosic';
            XmlToSmo.scoreInfoFields.forEach((field) => {
                rv.scoreInfo[field] = '';
            });
            const childNodes = [...scoreRoot.children];
            childNodes.forEach((scoreElement) => {
                if (scoreElement.tagName === 'work') {
                    const scoreNameNode = [...scoreElement.getElementsByTagName('work-title')];
                    if (scoreNameNode.length && scoreNameNode[0].textContent) {
                        rv.scoreInfo.title = scoreNameNode[0].textContent;
                        rv.scoreInfo.name = rv.scoreInfo.title;
                        xmlState.newTitle = true;
                    }
                }
                else if (scoreElement.tagName === 'identification') {
                    const creators = [...scoreElement.getElementsByTagName('creator')];
                    creators.forEach((creator) => {
                        if (creator.getAttribute('type') === 'composer' && creator.textContent) {
                            rv.scoreInfo.composer = creator.textContent;
                        }
                    });
                }
                else if (scoreElement.tagName === 'movement-title') {
                    if (xmlState.newTitle && scoreElement.textContent) {
                        rv.scoreInfo.subTitle = scoreElement.textContent;
                    }
                    else if (scoreElement.textContent) {
                        rv.scoreInfo.title = scoreElement.textContent;
                        rv.scoreInfo.name = rv.scoreInfo.title;
                        xmlState.newTitle = true;
                    }
                }
                else if (scoreElement.tagName === 'defaults') {
                    XmlToSmo.defaults(scoreElement, rv, layoutDefaults, xmlState);
                }
                else if (scoreElement.tagName === 'part') {
                    xmlState.initializeForPart();
                    XmlToSmo.part(scoreElement, xmlState);
                }
                else if (scoreElement.tagName === 'part-list') {
                    XmlToSmo.partList(scoreElement, rv, xmlState);
                }
            });
            // The entire score is parsed and xmlState now contains the staves.
            rv.formattingManager = xmlState.formattingManager;
            rv.staves = xmlState.smoStaves;
            xmlState.updateStaffGroups();
            rv.systemGroups = xmlState.getSystems();
            // Fix tempo to be column mapped
            rv.staves[0].measures.forEach((measure) => {
                const tempoStaff = rv.staves.find((ss) => ss.measures[measure.measureNumber.measureIndex].tempo.display === true);
                if (tempoStaff) {
                    const tempo = tempoStaff.measures[measure.measureNumber.measureIndex].tempo;
                    rv.staves.forEach((ss) => {
                        ss.measures[measure.measureNumber.measureIndex].tempo =
                            _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoMeasureModifierBase.deserialize(tempo);
                    });
                }
            });
            const lm = rv.layoutManager;
            if (rv.scoreInfo.title) {
                rv.addTextGroup(_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup.createTextForLayout(_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup.purposes.TITLE, rv.scoreInfo.title, lm.getScaledPageLayout(0)));
            }
            if (rv.scoreInfo.subTitle) {
                rv.addTextGroup(_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup.createTextForLayout(_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup.purposes.SUBTITLE, rv.scoreInfo.subTitle, lm.getScaledPageLayout(0)));
            }
            if (rv.scoreInfo.composer) {
                rv.addTextGroup(_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup.createTextForLayout(_data_scoreText__WEBPACK_IMPORTED_MODULE_3__.SmoTextGroup.purposes.COMPOSER, rv.scoreInfo.composer, lm.getScaledPageLayout(0)));
            }
            XmlToSmo.setSlurDefaults(rv);
            xmlState.completeTies(rv);
            rv.preferences.showPiano = false;
            XmlToSmo.setVoltas(rv, xmlState);
            rv.staves.forEach((staff) => {
            });
            return rv;
        }
        catch (exc) {
            console.warn(exc);
            return _data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore.getDefaultScore(_data_score__WEBPACK_IMPORTED_MODULE_5__.SmoScore.defaults, _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.defaults);
        }
    }
    /**
     * when building the slurs, we don't always know which direction the beams will go or what other
     * voices there will be.
     * @param score
     */
    static setSlurDefaults(score) {
        score.staves.forEach((staff) => {
            const slurs = staff.modifiers.filter((mm) => mm.ctor === 'SmoSlur');
            slurs.forEach((ss) => {
                const slur = ss;
                let slurPosition = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_12__.SmoSlur.positions.AUTO;
                if (slur.position === slur.position_end) {
                    slurPosition = slur.position;
                }
                const slurParams = _xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.getDefaultSlurDirection(score, ss.startSelector, ss.endSelector, slurPosition, slur.orientation);
                slur.position = slurParams.position;
                slur.position_end = slurParams.position_end;
                slur.invert = slurParams.invert;
                slur.yOffset = slurParams.yOffset;
                slur.cp1y = slurParams.cp1y;
                slur.cp2y = slurParams.cp2y;
                slur.xOffset = slurParams.xOffset;
            });
        });
    }
    /**
     * After parsing the XML, resolve the voltas we've saved
     * @param score
     * @param state
     */
    static setVoltas(score, state) {
        const endingMeasures = Object.keys(state.endingMap).map((k) => parseInt(k, 10));
        endingMeasures.forEach((em) => {
            const endings = state.endingMap[em];
            endings.forEach((ending) => {
                const defs = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoVolta.defaults;
                defs.number = ending.number;
                defs.startBar = ending.start;
                defs.endBar = ending.end >= 0 ? ending.end : ending.start;
                const volta = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoVolta(defs);
                _xform_operations__WEBPACK_IMPORTED_MODULE_11__.SmoOperation.addEnding(score, volta);
            });
        });
    }
    static partList(partList, score, state) {
        const children = partList.children;
        let partIndex = 0;
        var i = 0;
        for (i = 0; i < children.length; ++i) {
            const child = children[i];
            if (child.tagName === 'score-part') {
                const partElement = child;
                const partData = new _data_partInfo__WEBPACK_IMPORTED_MODULE_13__.SmoPartInfo(_data_partInfo__WEBPACK_IMPORTED_MODULE_13__.SmoPartInfo.defaults);
                partData.partName = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromElement(partElement, 'part-name', 'part ' + i);
                const partId = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromAttribute(partElement, 'id', i.toString());
                if (state.openPartGroup) {
                    state.openPartGroup.parts.push(partIndex);
                }
                partIndex += 1;
                state.parts[partId] = partData;
                partData.partAbbreviation = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromElement(partElement, 'part-abbreviation', 'p.');
                partData.midiDevice = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromElement(partElement, 'part-abbreviation', null);
                // it seems like musicxml doesn't allow for different music font size in parts vs. score
                // partData.layoutManager.globalLayout.svgScale = 0.55;
                partData.layoutManager.globalLayout.svgScale = state.musicFontSize / XmlToSmo.vexFontSize;
                const midiElements = partElement.getElementsByTagName('midi-instrument');
                if (midiElements.length) {
                    const midiElement = midiElements[0];
                    partData.midiInstrument = {
                        channel: _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(midiElement, 'midi-channel', 1),
                        program: _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(midiElement, 'midi-program', 1),
                        volume: _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(midiElement, 'volume', 80),
                        pan: _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(midiElement, 'pan', 0)
                    };
                }
            }
            else if (child.tagName === 'part-group') {
                const groupElement = child;
                if (state.openPartGroup) {
                    const staffGroup = state.openPartGroup.group;
                    state.openPartGroup.parts.forEach((part) => {
                        if (staffGroup.startSelector.staff === 0 || staffGroup.startSelector.staff > part) {
                            staffGroup.startSelector.staff = part;
                        }
                        if (staffGroup.endSelector.staff < part) {
                            staffGroup.endSelector.staff = part;
                        }
                    });
                    score.systemGroups.push(staffGroup);
                    state.openPartGroup = null;
                }
                else {
                    const staffGroup = new _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSystemGroup(_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSystemGroup.defaults);
                    const groupNum = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromAttribute(groupElement, 'number', 1);
                    const xmlSymbol = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromElement(groupElement, 'group-symbol', 'single');
                    if (xmlSymbol === 'single') {
                        staffGroup.leftConnector = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSystemGroup.connectorTypes['single'];
                    }
                    else if (xmlSymbol === 'brace') {
                        staffGroup.leftConnector = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSystemGroup.connectorTypes['brace'];
                    }
                    if (xmlSymbol === 'bracket') {
                        staffGroup.leftConnector = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSystemGroup.connectorTypes['bracket'];
                    }
                    if (xmlSymbol === 'square') {
                        staffGroup.leftConnector = _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoSystemGroup.connectorTypes['double'];
                    }
                    state.openPartGroup = {
                        partNum: groupNum,
                        parts: [],
                        group: staffGroup
                    };
                }
            }
        }
    }
    /**
     * page-layout element occurs in a couple of places
     * @param defaultsElement
     * @param layoutDefaults
     * @param xmlState
     */
    static pageSizeFromLayout(defaultsElement, layoutDefaults, xmlState) {
        const pageLayoutNode = defaultsElement.getElementsByTagName('page-layout');
        if (pageLayoutNode.length) {
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.assignDefaults(pageLayoutNode[0], layoutDefaults.globalLayout, XmlToSmo.pageLayoutMap);
            layoutDefaults.globalLayout.pageHeight *= xmlState.pixelsPerTenth;
            layoutDefaults.globalLayout.pageWidth *= xmlState.pixelsPerTenth;
        }
        const pageMarginNode = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(defaultsElement, ['page-layout', 'page-margins']);
        if (pageMarginNode.length) {
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.assignDefaults(pageMarginNode[0], layoutDefaults.pageLayouts[0], XmlToSmo.pageMarginMap);
            _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoPageLayout.attributes.forEach((attr) => {
                layoutDefaults.pageLayouts[0][attr] *= xmlState.pixelsPerTenth;
            });
        }
    }
    /**
     * /score-partwise/defaults
     * @param defaultsElement
     * @param score
     * @param layoutDefaults
     */
    static defaults(defaultsElement, score, layoutDefaults, xmlState) {
        // Default scale for mxml
        let scale = 1 / 7;
        const currentScale = layoutDefaults.getGlobalLayout().svgScale;
        const scaleNode = defaultsElement.getElementsByTagName('scaling');
        if (scaleNode.length) {
            const mm = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(scaleNode[0], 'millimeters', 1);
            const tn = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(scaleNode[0], 'tenths', 7);
            if (tn > 0 && mm > 0) {
                scale = mm / tn;
            }
        }
        const fontNode = defaultsElement.getElementsByTagName('music-font');
        // All musicxml sizes are given in 'tenths'.  Smoosic and vex use pixels. so find the ratio and 
        // normalize all values.
        xmlState.pixelsPerTenth = scale / XmlToSmo.mmPerPixel;
        if (fontNode.length) {
            const fontString = fontNode[0].getAttribute('font-size');
            if (fontString) {
                xmlState.musicFontSize = parseInt(fontString, 10);
            }
            const fontFamily = fontNode[0].getAttribute('font-family');
            if (fontFamily && (0,_data_score__WEBPACK_IMPORTED_MODULE_5__.isEngravingFont)(fontFamily)) {
                score.engravingFont = fontFamily;
            }
        }
        XmlToSmo.pageSizeFromLayout(defaultsElement, layoutDefaults, xmlState);
        // svgScale is the ratio of music font size to the default Vex font size (39).
        layoutDefaults.globalLayout.svgScale = xmlState.musicFontSize / XmlToSmo.vexFontSize;
        score.scaleTextGroups(currentScale / layoutDefaults.globalLayout.svgScale);
    }
    /**
     * /score-partwise/part
     * @param partElement
     * @param xmlState
     */
    static part(partElement, xmlState) {
        let staffId = xmlState.smoStaves.length;
        const partId = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromAttribute(partElement, 'id', '');
        console.log('part ' + partId);
        xmlState.initializeForPart();
        xmlState.partId = partId;
        const stavesForPart = [];
        const measureElements = [...partElement.getElementsByTagName('measure')];
        measureElements.forEach((measureElement) => {
            // Parse the measure element, populate staffArray of xmlState with the
            // measure data
            XmlToSmo.measure(measureElement, xmlState);
            const newStaves = xmlState.staffArray;
            if (newStaves.length > 1 && stavesForPart.length <= newStaves[0].clefInfo.staffId) {
                xmlState.staffGroups.push({ start: staffId, length: newStaves.length });
            }
            xmlState.globalCursor += newStaves[0].measure.getMaxTicksVoice();
            newStaves.forEach((staffMeasure) => {
                if (stavesForPart.length <= staffMeasure.clefInfo.staffId) {
                    const params = _data_systemStaff__WEBPACK_IMPORTED_MODULE_9__.SmoSystemStaff.defaults;
                    params.staffId = staffId;
                    params.measureInstrumentMap = xmlState.instrumentMap;
                    const newStaff = new _data_systemStaff__WEBPACK_IMPORTED_MODULE_9__.SmoSystemStaff(params);
                    if (xmlState.parts[partId]) {
                        console.log('putting part ' + partId + ' in staff ' + newStaff.staffId);
                        newStaff.partInfo = new _data_partInfo__WEBPACK_IMPORTED_MODULE_13__.SmoPartInfo(xmlState.parts[partId]);
                    }
                    console.log('createing stave ' + newStaff.staffId);
                    stavesForPart.push(newStaff);
                    staffId += 1;
                }
                const smoStaff = stavesForPart[staffMeasure.clefInfo.staffId];
                smoStaff.measures.push(staffMeasure.measure);
            });
            const oldStaffId = staffId - stavesForPart.length;
            xmlState.backtrackHairpins(stavesForPart[0], oldStaffId + 1);
        });
        if (stavesForPart.length > 1) {
            stavesForPart[0].partInfo.stavesAfter = 1;
            stavesForPart[0].partInfo.stavesBefore = 0;
            console.log('part has stave after ' + stavesForPart[0].staffId);
            stavesForPart[1].partInfo.stavesAfter = 0;
            stavesForPart[1].partInfo.stavesBefore = 1;
            console.log('part has stave before ' + stavesForPart[1].staffId);
        }
        xmlState.smoStaves = xmlState.smoStaves.concat(stavesForPart);
        xmlState.completeSlurs();
        xmlState.assignRehearsalMarks();
    }
    /**
     * /score-partwise/measure/direction/sound:tempo
     * @param element
     * @returns
     */
    static tempo(element) {
        let tempoText = '';
        let customText = tempoText;
        const rv = [];
        const soundNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(element, ['sound']);
        soundNodes.forEach((sound) => {
            let tempoMode = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.tempoModes.durationMode;
            tempoText = sound.getAttribute('tempo');
            if (tempoText) {
                const bpm = parseInt(tempoText, 10);
                const wordNode = [...element.getElementsByTagName('words')];
                tempoText = wordNode.length ? wordNode[0].textContent :
                    tempoText.toString();
                if (isNaN(parseInt(tempoText, 10))) {
                    if (_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.tempoTexts[tempoText.toLowerCase()]) {
                        tempoMode = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.tempoModes.textMode;
                    }
                    else {
                        tempoMode = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.tempoModes.customMode;
                        customText = tempoText;
                    }
                }
                const params = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.defaults;
                params.tempoMode = tempoMode;
                params.bpm = bpm;
                params.tempoText = tempoText;
                params.customText = customText;
                params.display = true;
                const tempo = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText(params);
                const staffId = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getStaffId(element);
                rv.push({ staffId, tempo });
            }
        });
        return rv;
    }
    /**
     * /score-partwise/measure/direction/dynamics
     * @param element
     * @returns
     */
    static dynamics(directionElement, xmlState) {
        let offset = 1;
        const dynamicNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(directionElement, ['direction-type', 'dynamics']);
        const rehearsalNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(directionElement, ['direction-type', 'rehearsal']);
        const offsetNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(directionElement, ['offset']);
        if (offsetNodes.length) {
            offset = parseInt(offsetNodes[0].textContent, 10);
        }
        if (rehearsalNodes.length) {
            const rm = rehearsalNodes[0].textContent;
            if (rm) {
                xmlState.rehearsalMark = rm;
            }
        }
        dynamicNodes.forEach((dynamic) => {
            xmlState.dynamics.push({
                dynamic: dynamic.children[0].tagName,
                offset: (offset / xmlState.divisions) * 4096
            });
        });
    }
    // ### attributes
    // /score-partwise/part/measure/attributes
    static attributes(measureElement, xmlState) {
        let smoKey = {};
        const attributesNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(measureElement, ['attributes']);
        if (!attributesNodes.length) {
            return;
        }
        const attributesNode = attributesNodes[0];
        xmlState.divisions =
            _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(attributesNode, 'divisions', xmlState.divisions);
        const keyNode = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(attributesNode, ['key']);
        // MusicXML expresses keys in 'fifths' from C.
        if (keyNode.length) {
            const fifths = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(keyNode[0], 'fifths', 0);
            if (fifths < 0) {
                smoKey = _data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.circleOfFifths[_data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.circleOfFifths.length + fifths];
            }
            else {
                smoKey = _data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.circleOfFifths[fifths];
            }
            xmlState.keySignature = smoKey.letter.toUpperCase();
            if (smoKey.accidental !== 'n') {
                xmlState.keySignature += smoKey.accidental;
            }
        }
        const transposeNode = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(attributesNode, ['transpose']);
        if (transposeNode.length) {
            const offset = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(transposeNode[0], 'chromatic', 0);
            if (offset !== xmlState.instrument.keyOffset) {
                xmlState.instrument.keyOffset = -1 * offset;
                if (xmlState.instrumentMap[xmlState.measureIndex]) {
                    xmlState.instrumentMap[xmlState.measureIndex].keyOffset = xmlState.instrument.keyOffset;
                }
                else {
                    const params = xmlState.instrument;
                    xmlState.instrumentMap[xmlState.measureIndex] = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_12__.SmoInstrument(params);
                }
            }
        }
        const currentTime = xmlState.timeSignature.split('/');
        const timeNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(attributesNode, ['time']);
        if (timeNodes.length) {
            const timeNode = timeNodes[0];
            const num = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(timeNode, 'beats', parseInt(currentTime[0], 10));
            const den = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(timeNode, 'beat-type', parseInt(currentTime[1], 10));
            xmlState.timeSignature = '' + num + '/' + den;
        }
        const clefNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(attributesNode, ['clef']);
        if (clefNodes.length) {
            // We expect the number of clefs to equal the number of staves in each measure
            clefNodes.forEach((clefNode) => {
                let clefNum = 0;
                let clef = 'treble';
                const clefAttrs = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.nodeAttributes(clefNode);
                if (typeof (clefAttrs.number) !== 'undefined') {
                    // staff numbers index from 1 in mxml
                    clefNum = parseInt(clefAttrs.number, 10) - 1;
                }
                const clefType = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTextFromElement(clefNode, 'sign', 'G');
                const clefLine = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getNumberFromElement(clefNode, 'line', 2);
                // mxml supports a zillion clefs, just implement the basics.
                if (clefType === 'F') {
                    clef = 'bass';
                }
                else if (clefType === 'C') {
                    if (clefLine === 4) {
                        clef = 'alto';
                    }
                    else if (clefLine === 3) {
                        clef = 'tenor';
                    }
                    else if (clefLine === 1) {
                        clef = 'soprano';
                    }
                }
                else if (clefType === 'percussion') {
                    clef = 'percussion';
                }
                if (xmlState.clefInfo.length <= clefNum) {
                    xmlState.clefInfo.push({ clef, staffId: clefNum });
                }
                else {
                    xmlState.clefInfo[clefNum].clef = clef;
                }
            });
        }
    }
    // ### wedge (hairpin)
    // /score-partwise/part/measure/direction/direction-type/wedge
    static wedge(directionElement, xmlState) {
        let crescInfo = null;
        const wedgeNodes = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(directionElement, ['direction-type', 'wedge']);
        wedgeNodes.forEach((wedgeNode) => {
            crescInfo = { type: wedgeNode.getAttribute('type') };
        });
        // If this is a start hairpin, start it.  If an end hairpin, add it to the
        // hairpin array with the type and start/stop ticks
        if (crescInfo !== null) {
            xmlState.processWedge(crescInfo);
        }
    }
    // ### direction
    // /score-partwise/part/measure/direction
    static direction(directionElement, xmlState) {
        const tempo = XmlToSmo.tempo(directionElement);
        // Only display tempo if changes.
        if (tempo.length) {
            // TODO: staff ID is with tempo, but tempo is per column in SMO
            if (!_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.eq(xmlState.tempo, tempo[0].tempo)) {
                xmlState.tempo = tempo[0].tempo;
                xmlState.tempo.display = true;
            }
        }
        // parse dynamic node and add to xmlState
        XmlToSmo.dynamics(directionElement, xmlState);
        // parse wedge (hairpin)
        XmlToSmo.wedge(directionElement, xmlState);
    }
    // ### note
    // /score-partwise/part/measure/note
    static note(noteElement, xmlState) {
        let grIx = 0;
        const staffIndex = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getStaffId(noteElement);
        xmlState.staffIndex = staffIndex;
        // We assume the clef information from attributes comes before the notes
        // xmlState.staffArray[staffIndex] = { clefInfo: { clef }, voices[voiceIndex]: notes[] }
        if (xmlState.staffArray.length <= staffIndex) {
            // mxml has measures for all staves in a part interleaved.  In SMO they are
            // each in a separate stave object.  Base the staves we expect based on
            // the number of clefs in the xml state object
            xmlState.clefInfo.forEach((clefInfo) => {
                xmlState.staffArray.push({ clefInfo, measure: null, voices: {} });
            });
        }
        const chordNode = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(noteElement, ['chord']);
        if (chordNode.length === 0) {
            xmlState.currentDuration += _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.durationFromNode(noteElement, 0);
        }
        // voices are not sequential, seem to have artitrary numbers and
        // persist per part (same with staff IDs).  Update XML state if these are new
        // staves
        const voiceIndex = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getVoiceId(noteElement);
        xmlState.voiceIndex = voiceIndex;
        xmlState.initializeStaff(staffIndex, voiceIndex);
        const voice = xmlState.staffArray[staffIndex].voices[voiceIndex];
        // Calculate the tick and staff index for selectors
        const tickIndex = chordNode.length < 1 ? voice.notes.length : voice.notes.length - 1;
        const smoVoiceIndex = xmlState.staffVoiceHash[staffIndex].indexOf(voiceIndex);
        const pitchIndex = chordNode.length ? xmlState.previousNote.pitches.length : 0;
        const smoStaffIndex = xmlState.smoStaves.length + staffIndex;
        const selector = {
            staff: smoStaffIndex, measure: xmlState.measureIndex, voice: smoVoiceIndex,
            tick: tickIndex, pitches: []
        };
        const divisions = xmlState.divisions;
        const printText = noteElement.getAttribute('print-object');
        const hideNote = typeof (printText) === 'string' && printText === 'no';
        const isGrace = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.isGrace(noteElement);
        const restNode = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getChildrenFromPath(noteElement, ['rest']);
        const noteType = restNode.length ? 'r' : 'n';
        const durationData = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.ticksFromDuration(noteElement, divisions, 4096);
        const tickCount = durationData.tickCount;
        if (chordNode.length === 0) {
            xmlState.staffArray[staffIndex].voices[voiceIndex].ticksUsed += tickCount;
        }
        xmlState.tickCursor = (xmlState.currentDuration / divisions) * 4096;
        const beamState = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.noteBeamState(noteElement);
        const slurInfos = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getSlurData(noteElement, selector);
        const tieInfos = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTieData(noteElement, selector, pitchIndex);
        const tupletInfos = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getTupletData(noteElement);
        const ornaments = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.articulationsAndOrnaments(noteElement);
        const lyrics = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.lyrics(noteElement);
        const flagState = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.getStemType(noteElement);
        const clefString = xmlState.staffArray[staffIndex].clefInfo.clef;
        const pitch = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.smoPitchFromNote(noteElement, _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.defaultPitchForClef[clefString]);
        if (isGrace === false) {
            if (chordNode.length) {
                // If this is a note in a chord, just add the pitch to previous note.
                xmlState.previousNote.pitches.push(pitch);
                xmlState.updateTieStates(tieInfos);
            }
            else {
                // Create a new note
                const noteData = _data_note__WEBPACK_IMPORTED_MODULE_10__.SmoNote.defaults;
                noteData.noteType = noteType;
                noteData.pitches = [pitch];
                // If this is a non-grace note, add any grace notes to the note since SMO
                // treats them as note modifiers
                noteData.ticks = { numerator: tickCount, denominator: 1, remainder: 0 };
                noteData.flagState = flagState;
                noteData.clef = clefString;
                xmlState.previousNote = new _data_note__WEBPACK_IMPORTED_MODULE_10__.SmoNote(noteData);
                if (hideNote) {
                    xmlState.previousNote.makeHidden(true);
                }
                xmlState.updateDynamics();
                ornaments.forEach((ornament) => {
                    if (ornament.ctor === 'SmoOrnament') {
                        xmlState.previousNote.toggleOrnament(ornament);
                    }
                    else if (ornament.ctor === 'SmoArticulation') {
                        xmlState.previousNote.toggleArticulation(ornament);
                    }
                });
                lyrics.forEach((lyric) => {
                    xmlState.addLyric(xmlState.previousNote, lyric);
                });
                for (grIx = 0; grIx < xmlState.graceNotes.length; ++grIx) {
                    xmlState.previousNote.addGraceNote(xmlState.graceNotes[grIx], grIx);
                }
                xmlState.graceNotes = []; // clear the grace note array
                // If this note starts later than the cursor due to forward, pad with rests
                if (xmlState.tickCursor > xmlState.staffArray[staffIndex].voices[voiceIndex].ticksUsed) {
                    const pads = _data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.splitIntoValidDurations(xmlState.tickCursor - xmlState.staffArray[staffIndex].voices[voiceIndex].ticksUsed);
                    console.log(`padding ${pads.length} before ${xmlState.staffIndex}-${xmlState.measureIndex}-${xmlState.voiceIndex}-${tickIndex}`);
                    pads.forEach((pad) => {
                        const clefString = xmlState.staffArray[staffIndex].clefInfo.clef;
                        const padNote = _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.createRestNoteWithDuration(pad, clefString);
                        padNote.makeHidden(true);
                        voice.notes.push(padNote);
                    });
                    // slurs and ties use selector, so this affects them, also
                    selector.tick += pads.length;
                    // then reset the cursor since we are now in sync
                    xmlState.staffArray[staffIndex].voices[voiceIndex].ticksUsed = xmlState.tickCursor;
                }
                /* slurInfos.forEach((slurInfo) => {
                  console.log(`xml slur: ${slurInfo.selector.staff}-${slurInfo.selector.measure}-${slurInfo.selector.voice}-${slurInfo.selector.tick} ${slurInfo.type} ${slurInfo.number}`);
                  console.log(`  ${slurInfo.placement}`);
                });*/
                /* tieInfos.forEach((tieInfo) => {
                  console.log(`xml tie: ${tieInfo.selector.staff}-${tieInfo.selector.measure}-${tieInfo.selector.voice}-${tieInfo.selector.tick} ${tieInfo.type} `);
                  console.log(`  pitch ${tieInfo.pitchIndex} orient ${tieInfo.orientation} num ${tieInfo.number}`);
                });*/
                xmlState.updateSlurStates(slurInfos);
                xmlState.updateTieStates(tieInfos);
                voice.notes.push(xmlState.previousNote);
                xmlState.updateBeamState(beamState, durationData.alteration, voice, voiceIndex);
                xmlState.updateTupletStates(tupletInfos, voice, staffIndex, voiceIndex);
            }
        }
        else {
            if (chordNode.length) {
                xmlState.graceNotes[xmlState.graceNotes.length - 1].pitches.push(pitch);
            }
            else {
                // grace note durations don't seem to have explicit duration, so
                // get it from note type
                xmlState.updateSlurStates(slurInfos);
                xmlState.updateTieStates(tieInfos);
                xmlState.graceNotes.push(new _data_noteModifiers__WEBPACK_IMPORTED_MODULE_8__.SmoGraceNote({
                    pitches: [pitch],
                    ticks: { numerator: tickCount, denominator: 1, remainder: 0 }
                }));
            }
        }
    }
    static print(printElement, xmlState) {
        if (xmlState.parts[xmlState.partId]) {
            XmlToSmo.pageSizeFromLayout(printElement, xmlState.parts[xmlState.partId].layoutManager, xmlState);
        }
    }
    /**
     * /score-partwise/part/measure
     * A measure in music xml might represent several measures in SMO at the same
     * column in the score
     * @param measureElement
     * @param xmlState
     */
    static measure(measureElement, xmlState) {
        xmlState.initializeForMeasure(measureElement);
        const elements = [...measureElement.children];
        let hasNotes = false;
        elements.forEach((element) => {
            if (element.tagName === 'backup') {
                xmlState.currentDuration -= _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.durationFromNode(element, 0);
            }
            if (element.tagName === 'forward') {
                xmlState.currentDuration += _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.durationFromNode(element, 0);
            }
            if (element.tagName === 'attributes') {
                // update the running state of the XML with new information from this measure
                // if an XML attributes element is present
                XmlToSmo.attributes(measureElement, xmlState);
            }
            else if (element.tagName === 'direction') {
                XmlToSmo.direction(element, xmlState);
            }
            else if (element.tagName === 'note') {
                XmlToSmo.note(element, xmlState);
                hasNotes = true;
            }
            else if (element.tagName === 'barline') {
                xmlState.updateEndings(element);
            }
            else if (element.tagName === 'print') {
                XmlToSmo.print(element, xmlState);
            }
        });
        // If a measure has no notes, just make one with the defaults
        if (hasNotes === false && xmlState.staffArray.length < 1 && xmlState.clefInfo.length >= 1) {
            xmlState.clefInfo.forEach((clefInfo) => {
                xmlState.staffArray.push({ clefInfo, measure: null, voices: {} });
            });
        }
        if (xmlState.rehearsalMark.length) {
            xmlState.rehearsalMarks[xmlState.measureIndex] = xmlState.rehearsalMark;
        }
        xmlState.staffArray.forEach((staffData) => {
            const clef = staffData.clefInfo.clef;
            const params = _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.defaults;
            params.transposeIndex = xmlState.instrument.keyOffset;
            params.clef = clef;
            const smoMeasure = _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.getDefaultMeasure(params);
            smoMeasure.format = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoMeasureFormat(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoMeasureFormat.defaults);
            smoMeasure.format.measureIndex = xmlState.measureNumber;
            smoMeasure.format.systemBreak = _xmlHelpers__WEBPACK_IMPORTED_MODULE_0__.XmlHelpers.isSystemBreak(measureElement);
            smoMeasure.tempo = xmlState.tempo;
            smoMeasure.format.proportionality = XmlToSmo.customProportionDefault;
            xmlState.formattingManager.updateMeasureFormat(smoMeasure.format);
            smoMeasure.keySignature = xmlState.keySignature;
            smoMeasure.timeSignature = _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.convertLegacyTimeSignature(xmlState.timeSignature);
            smoMeasure.measureNumber.localIndex = xmlState.measureNumber;
            smoMeasure.measureNumber.measureIndex = xmlState.measureIndex;
            smoMeasure.measureNumber.staffId = staffData.clefInfo.staffId + xmlState.smoStaves.length;
            const startBarDefs = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.defaults;
            startBarDefs.position = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.positions.start;
            startBarDefs.barline = xmlState.startBarline;
            const endBarDefs = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.defaults;
            endBarDefs.position = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.positions.end;
            endBarDefs.barline = xmlState.endBarline;
            smoMeasure.setBarline(new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline(startBarDefs));
            smoMeasure.setBarline(new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline(endBarDefs));
            // voices not in array, put them in an array
            Object.keys(staffData.voices).forEach((voiceKey) => {
                const voice = staffData.voices[voiceKey];
                xmlState.addTupletsToMeasure(smoMeasure, staffData.clefInfo.staffId, parseInt(voiceKey, 10));
                voice.notes.forEach((note) => {
                    if (!note.clef) {
                        note.clef = smoMeasure.clef;
                    }
                });
                smoMeasure.voices.push(voice);
            });
            if (smoMeasure.voices.length === 0) {
                smoMeasure.voices.push({ notes: _data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.getDefaultNotes(smoMeasure) });
            }
            staffData.measure = smoMeasure;
        });
        // Pad incomplete measures/voices with rests
        const maxTicks = xmlState.staffArray.map((staffData) => staffData.measure.getMaxTicksVoice())
            .reduce((a, b) => a > b ? a : b);
        xmlState.staffArray.forEach((staffData) => {
            let i = 0;
            let j = 0;
            const measure = staffData.measure;
            for (i = 0; i < measure.voices.length; ++i) {
                const curTicks = measure.getTicksFromVoice(i);
                if (curTicks < maxTicks) {
                    const tickAr = _data_music__WEBPACK_IMPORTED_MODULE_7__.SmoMusic.splitIntoValidDurations(maxTicks - curTicks);
                    for (j = 0; j < tickAr.length; ++j) {
                        measure.voices[i].notes.push(_data_measure__WEBPACK_IMPORTED_MODULE_6__.SmoMeasure.createRestNoteWithDuration(tickAr[j], measure.clef));
                    }
                }
            }
        });
    }
}


/***/ }),

/***/ "./src/smo/xform/audioTrack.ts":
/*!*************************************!*\
  !*** ./src/smo/xform/audioTrack.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoAudioScore: () => (/* binding */ SmoAudioScore)
/* harmony export */ });
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.






/**
 * Convert a score into a JSON structure that can be rendered to audio.
 * the return value looks like this:
 * ` { tracks, repeats, repeatMap} `
 * repeatMap is just an array of tuples with start/end measures.
 *  each track contains:
 *  ` { lastMeasure, notes, tempoMap, timeSignatureMap, hairpins, volume, tiedNotes } `
 * where each note might contain:
 * `{ pitches, noteType, duration, selector, volume }`
 * _Note_:  pitches are smo pitches, durations are adjusted for beatTime
 * (beatTime === 4096 uses Smo/Vex ticks, 128 is midi tick default)
 * volume is normalized 0-1
 * @category SmoTransform
 */
class SmoAudioScore {
    // ### dynamicVolumeMap
    // normalized dynamic
    static get dynamicVolumeMap() {
        // matches SmoDynamicText.dynamics
        return {
            pp: 0.3,
            p: 0.4,
            mp: 0.5,
            mf: 0.6,
            f: 0.7,
            ff: 0.8
        };
    }
    static get emptyTrack() {
        return {
            lastMeasure: 0,
            notes: [],
            tempoMap: {},
            timeSignatureMap: {},
            hairpins: [],
            measureNoteMap: {},
            keyMap: {},
            volume: 0,
            tiedNotes: [],
            repeats: []
        };
    }
    constructor(score, beatTime) {
        this.volume = 0;
        this.timeDiv = 4096 / beatTime;
        this.score = score;
        this.beatTime = beatTime;
    }
    // ### volumeFromNote
    // Return a normalized volume from the dynamic setting of the note
    // or supplied default if none exists
    static volumeFromNote(smoNote, def) {
        if (typeof (def) === 'undefined' || def === 0) {
            def = SmoAudioScore.dynamicVolumeMap[_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.PP];
        }
        const dynamic = smoNote.getModifiers('SmoDynamicText');
        if (dynamic.length < 1) {
            return def;
        }
        if (dynamic[0].text === _data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.SFZ) {
            return SmoAudioScore.dynamicVolumeMap[_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.F];
        }
        if (typeof (SmoAudioScore.dynamicVolumeMap[dynamic[0].text]) === 'undefined') {
            return def;
        }
        return SmoAudioScore.dynamicVolumeMap[dynamic[0].text];
    }
    getVoltas(repeat, measureIndex) {
        let v1 = measureIndex;
        let endings = null;
        let currentEnding = -1;
        const rv = [];
        const staff = this.score.staves[0];
        while (v1 > repeat.startRepeat) {
            endings = staff.measures[v1].getNthEndings();
            if (endings.length && endings[0].endSelector) {
                currentEnding = endings[0].number;
                rv.push({ measureIndex: v1, ending: currentEnding });
                v1 = endings[0].endSelector.measure + 1;
                break;
            }
            v1--;
        }
        if (currentEnding < 0 || !(staff === null || staff === void 0 ? void 0 : staff.measures)) {
            return rv;
        }
        while ((endings === null || endings === void 0 ? void 0 : endings.length) && v1 < staff.measures.length) {
            endings = staff.measures[v1].getNthEndings();
            if (!endings.length) {
                break;
            }
            currentEnding = endings[0].number;
            rv.push({ measureIndex: v1, ending: currentEnding });
            v1 = endings[0].endSelector.measure + 1;
        }
        rv.sort((a, b) => a.ending - b.ending);
        return rv;
    }
    // ### ticksFromSelection
    // return the count of ticks between the selectors, adjusted for
    // beatTime
    ticksFromSelection(startSelector, endSelector) {
        const selection = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.selectionFromSelector(this.score, startSelector);
        const note = selection === null || selection === void 0 ? void 0 : selection.note;
        let ticks = note.tickCount;
        let nextSelection = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.nextNoteSelectionFromSelector(this.score, startSelector);
        while (nextSelection && nextSelection.note && !_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.gt(nextSelection.selector, endSelector)) {
            ticks += nextSelection.note.tickCount;
            nextSelection = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.nextNoteSelectionFromSelector(this.score, nextSelection.selector);
        }
        return ticks / this.timeDiv;
    }
    // ### getHairpinInfo
    // Get any hairpin starting at this selection, and calculate its
    // effect on the overall volume
    getHairpinInfo(track, selection) {
        const staff = selection.staff;
        const selector = selection.selector;
        const cp = (x) => JSON.parse(JSON.stringify(x));
        const hps = staff.getModifiersAt(selector)
            .filter((hairpin) => hairpin.ctor === 'SmoStaffHairpin' &&
            _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.eq(hairpin.startSelector, selector));
        const rv = [];
        // clear out old hairpins.
        // usually there will only be a single hairpin per voice, except
        // in the case of overlapping.
        track.hairpins.forEach((hairpin) => {
            if (_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.gteq(selection.selector, hairpin.startSelector) &&
                _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.lteq(selection.selector, hairpin.endSelector)) {
                rv.push(hairpin);
            }
        });
        track.hairpins = rv;
        hps.forEach((hairpin) => {
            const ch = hairpin;
            let endDynamic = 0;
            const trackHairpin = {
                hairpinType: ch.hairpinType,
                startSelector: cp(hairpin.startSelector),
                endSelector: cp(hairpin.endSelector),
                delta: 0,
                ticks: 0
            };
            // For a hairpin, try to calculate the volume difference from start to end,
            // as a function of ticks
            const endSelection = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.selectionFromSelector(this.score, hairpin.endSelector);
            if (endSelection !== null && typeof (endSelection.note) !== 'undefined') {
                const endNote = endSelection.note;
                const curNote = selection.note;
                endDynamic = SmoAudioScore.volumeFromNote(endNote);
                const startDynamic = SmoAudioScore.volumeFromNote(curNote, track.volume);
                if (startDynamic === endDynamic) {
                    const nextSelection = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.nextNoteSelectionFromSelector(this.score, hairpin.endSelector);
                    if (nextSelection) {
                        const nextNote = nextSelection.note;
                        endDynamic = SmoAudioScore.volumeFromNote(nextNote);
                    }
                }
                if (startDynamic === endDynamic) {
                    const offset = hairpin.hairpinType === _data_staffModifiers__WEBPACK_IMPORTED_MODULE_2__.SmoStaffHairpin.types.CRESCENDO ? 0.1 : -0.1;
                    endDynamic = Math.max(endDynamic + offset, 0.1);
                    endDynamic = Math.min(endDynamic, 1.0);
                }
                trackHairpin.delta = endDynamic - startDynamic;
                trackHairpin.ticks = this.ticksFromSelection(hairpin.startSelector, hairpin.endSelector);
                track.hairpins.push(trackHairpin);
            }
        });
    }
    // ### computeVolume
    // come up with a current normalized volume based on dynamics
    // that appear in the music
    computeVolume(track, selection) {
        const note = selection.note;
        if (track.volume === 0) {
            track.volume = SmoAudioScore.volumeFromNote(note, SmoAudioScore.dynamicVolumeMap.p);
            return;
        }
        if (track.hairpins.length) {
            const hp = track.hairpins[0];
            const coff = (note.tickCount / this.timeDiv) / hp.ticks;
            track.volume += hp.delta * coff;
        }
        else {
            track.volume = SmoAudioScore.volumeFromNote(note, track.volume);
        }
    }
    getSlurInfo(track, selection) {
        const tn = [];
        const cp = (x) => JSON.parse(JSON.stringify(x));
        track.tiedNotes.forEach((tie) => {
            if (_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.gteq(selection.selector, tie.startSelector) && _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.lteq(selection.selector, tie.endSelector)) {
                tn.push(tie);
            }
        });
        track.tiedNotes = tn;
        const tieStart = selection.staff.getTiesStartingAt(selection.selector);
        tieStart.forEach((tie) => {
            tn.push({
                startSelector: cp(tie.startSelector),
                endSelector: cp(tie.endSelector)
            });
        });
    }
    isTiedPitch(track, selection, noteIx) {
        if (noteIx < 1) {
            return false;
        }
        if (!track.tiedNotes.length) {
            return false;
        }
        if (track.notes[noteIx - 1].noteType !== 'n') {
            return false;
        }
        // Don't do this for first note of nth endings, because it will mess up
        // other endings.
        if (selection.selector.tick === 0) {
            const endings = selection.measure.getNthEndings();
            if (endings.length) {
                return false;
            }
        }
        // the first note should be played, not tied
        if (_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.eq(track.tiedNotes[0].startSelector, selection.selector)) {
            return false;
        }
        return _data_music__WEBPACK_IMPORTED_MODULE_3__.SmoMusic.pitchArraysMatch(track.notes[noteIx - 1].pitches, selection.note.pitches);
    }
    static updateMeasureIndexMap(note, measureIndexMap) {
        if (note.noteType !== 'n') {
            return;
        }
        const selector = note.selector;
        if (typeof (measureIndexMap[selector.measure]) === 'undefined') {
            measureIndexMap[selector.measure] = {};
        }
        const measureIndex = measureIndexMap[selector.measure];
        if (typeof (measureIndex[selector.tick]) === 'undefined') {
            measureIndex[selector.tick] = [];
        }
        if (note.noteType === 'n') {
            measureIndex[selector.tick].push(note);
        }
    }
    updateMeasureNoteMap(track, measureIndex, note) {
        if (!track.measureNoteMap[measureIndex]) {
            track.measureNoteMap[measureIndex] = [];
        }
        track.measureNoteMap[measureIndex].push(note);
    }
    createTrackNote(track, selection, duration, runningDuration, measureIndexMap) {
        const noteIx = track.notes.length;
        if (this.isTiedPitch(track, selection, noteIx)) {
            track.notes[noteIx - 1].duration += duration;
            const restPad = this.createTrackRest(track, duration, runningDuration, selection.selector, measureIndexMap);
            // Indicate this rest is just padding for a previous tied note.  Midi and audio render this
            // differently
            restPad.padding = true;
            track.notes.push(restPad);
            return;
        }
        const tpitches = [];
        const frequencies = [];
        const xpose = selection.measure.transposeIndex;
        const smoNote = selection.note;
        smoNote.pitches.forEach((pitch, pitchIx) => {
            var _a;
            tpitches.push(_data_music__WEBPACK_IMPORTED_MODULE_3__.SmoMusic.smoIntToPitch(_data_music__WEBPACK_IMPORTED_MODULE_3__.SmoMusic.smoPitchToInt(pitch) - xpose));
            const mtone = (_a = smoNote.getMicrotone(pitchIx)) !== null && _a !== void 0 ? _a : null;
            frequencies.push(_data_music__WEBPACK_IMPORTED_MODULE_3__.SmoAudioPitch.smoPitchToFrequency(pitch, -1 * xpose, mtone));
        });
        const pitchArray = JSON.parse(JSON.stringify(tpitches));
        const note = {
            pitches: pitchArray,
            noteType: 'n',
            duration,
            offset: runningDuration,
            selector: selection.selector,
            volume: track.volume,
            frequencies
        };
        this.updateMeasureNoteMap(track, selection.selector.measure, note);
        track.notes.push(note);
        SmoAudioScore.updateMeasureIndexMap(note, measureIndexMap);
    }
    createTrackRest(track, duration, runningDuration, selector, measureIndexMap) {
        const rest = {
            duration,
            offset: runningDuration,
            noteType: 'r',
            selector,
            volume: 0,
            pitches: [],
            frequencies: []
        };
        SmoAudioScore.updateMeasureIndexMap(rest, measureIndexMap);
        this.updateMeasureNoteMap(track, selector.measure, rest);
        return rest;
    }
    createRepeatMap(repeats) {
        let startm = 0;
        let j = 0;
        const staff = this.score.staves[0];
        const repeatMap = [];
        const endm = staff.measures.length - 1;
        repeats.forEach((repeat) => {
            // Include the current start to start of repeat, unless there is no start repeat
            if (repeat.startRepeat > 0) {
                repeatMap.push({ startMeasure: startm, endMeasure: repeat.startRepeat - 1 });
            }
            // Include first time through
            if (repeat.endRepeat) {
                repeatMap.push({ startMeasure: repeat.startRepeat, endMeasure: repeat.endRepeat });
            }
            startm = repeat.startRepeat;
            // nth time through, go to the start of volta 0, then to the start of volta n
            if (repeat.endRepeat && repeat.voltas.length < 1) {
                repeatMap.push({ startMeasure: repeat.startRepeat, endMeasure: repeat.endRepeat });
                startm = repeat.endRepeat + 1;
            }
            for (j = 1; j < repeat.voltas.length; ++j) {
                const volta = repeat.voltas[j];
                repeatMap.push({ startMeasure: repeat.startRepeat, endMeasure: repeat.voltas[0].measureIndex - 1 });
                // If there are more endings, repeat to first volta
                if (j + 1 < repeat.voltas.length) {
                    repeatMap.push({ startMeasure: volta.measureIndex, endMeasure: repeat.voltas[j + 1].measureIndex - 1 });
                }
                else {
                    startm = volta.measureIndex;
                }
            }
        });
        if (startm <= endm) {
            repeatMap.push({ startMeasure: startm, endMeasure: endm });
        }
        return repeatMap;
    }
    normalizeVolume(measureIndexMap) {
        let i = 0;
        let j = 0;
        let runningSum = -1;
        const measureKeys = Object.keys(measureIndexMap);
        for (i = 0; i < measureKeys.length; ++i) {
            const measureNotes = measureIndexMap[i];
            if (typeof (measureNotes) === 'undefined') {
                continue;
            }
            const tickKeys = Object.keys(measureNotes);
            for (j = 0; j < tickKeys.length; ++j) {
                let volumeSum = 0;
                let normalize = 1.0;
                const tickNotes = measureNotes[parseInt(tickKeys[j], 10)];
                if (typeof (tickNotes) === 'undefined') {
                    continue;
                }
                volumeSum = tickNotes.map((nn) => nn.volume).reduce((a, b) => a + b);
                if (volumeSum > 1.0) {
                    normalize = 1.0 / volumeSum;
                    volumeSum = 1.0;
                }
                if (runningSum < 0) {
                    runningSum = volumeSum;
                }
                const diff = Math.abs(runningSum - volumeSum);
                if (diff > 0.6) {
                    const avg = (volumeSum * 3 + runningSum) / 4;
                    normalize = normalize * avg;
                }
                runningSum = volumeSum * normalize;
                tickNotes.forEach((nn) => {
                    nn.volume *= normalize;
                });
                runningSum = volumeSum;
            }
        }
    }
    convert() {
        let measureIx = 0;
        const trackHash = {};
        const measureBeats = [];
        const measureIndexMap = {};
        const repeats = [];
        let startRepeat = 0;
        const tempoMap = [];
        this.score.staves.forEach((staff, staffIx) => {
            let runningKey = staff.measures[0].keySignature;
            this.volume = 0;
            for (measureIx = 0; measureIx < staff.measures.length; ++measureIx) {
                const measure = staff.measures[measureIx];
                measure.voices.forEach((voice, voiceIx) => {
                    let duration = 0;
                    const trackKey = (this.score.staves.length * voiceIx) + staffIx;
                    if (typeof (trackHash[trackKey]) === 'undefined') {
                        trackHash[trackKey] = SmoAudioScore.emptyTrack;
                    }
                    const measureSelector = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.default;
                    measureSelector.staff = staffIx;
                    measureSelector.measure = measureIx;
                    const track = trackHash[trackKey];
                    if (!measure.tempo) {
                        measure.tempo = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText(_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTempoText.defaults);
                    }
                    const tempo = measure.tempo.bpm * (measure.tempo.beatDuration / 4096);
                    // staff 0/voice 0, set track values for the measure
                    if (voiceIx === 0) {
                        if (staffIx === 0) {
                            track.keyMap[0] = runningKey;
                            measureBeats.push(measure.getMaxTicksVoice() / this.timeDiv);
                            const startBar = measure.getStartBarline();
                            const endBar = measure.getEndBarline();
                            if (startBar.barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.startRepeat) {
                                startRepeat = measureIx;
                            }
                            if (endBar.barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoBarline.barlines.endRepeat) {
                                const repeat = { startRepeat, endRepeat: measureIx, voltas: [] };
                                repeat.voltas = this.getVoltas(repeat, measureIx);
                                repeats.push(repeat);
                            }
                            tempoMap.push(tempo);
                        }
                        const selectorKey = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelector.getMeasureKey(measureSelector);
                        track.tempoMap[selectorKey] = Math.round(tempo);
                        if (measure.keySignature !== runningKey) {
                            runningKey = measure.keySignature;
                            track.keyMap[measureIx] = runningKey;
                        }
                        track.timeSignatureMap[selectorKey] = {
                            numerator: measure.timeSignature.actualBeats,
                            denominator: measure.timeSignature.beatDuration
                        };
                    }
                    // If this voice is not in every measure, fill in the space
                    // in its own channel.
                    while (track.lastMeasure < measureIx) {
                        track.notes.push(this.createTrackRest(track, measureBeats[track.lastMeasure], 0, { staff: staffIx, measure: track.lastMeasure, voice: voiceIx, tick: 0, pitches: [] }, measureIndexMap));
                        track.lastMeasure += 1;
                    }
                    let tupletTicks = 0;
                    let runningDuration = 0;
                    voice.notes.forEach((note, noteIx) => {
                        const selector = {
                            staff: staffIx, measure: measureIx, voice: voiceIx, tick: noteIx, pitches: []
                        };
                        const selection = _selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.selectionFromSelector(this.score, selector);
                        // update staff features of slur/tie/cresc.
                        this.getSlurInfo(track, selection);
                        this.getHairpinInfo(track, selection);
                        const tuplet = measure.getTupletForNote(note);
                        if (tuplet && tuplet.getIndexOfNote(note) === 0) {
                            tupletTicks = tuplet.tickCount / this.timeDiv;
                        }
                        if (tupletTicks) {
                            // tuplet likely won't fit evenly in ticks, so
                            // use remainder in last tuplet note.
                            if (tuplet && tuplet.getIndexOfNote(note) === tuplet.notes.length - 1) {
                                duration = tupletTicks;
                                tupletTicks = 0;
                            }
                            else {
                                duration = note.tickCount / this.timeDiv;
                                tupletTicks -= duration;
                            }
                        }
                        else {
                            duration = note.tickCount / this.timeDiv;
                        }
                        if (note.isRest() || note.isSlash()) {
                            track.notes.push(this.createTrackRest(track, duration, runningDuration, selector, measureIndexMap));
                        }
                        else {
                            this.computeVolume(track, selection);
                            this.createTrackNote(track, selection, duration, runningDuration, measureIndexMap);
                        }
                        runningDuration += duration;
                    });
                    track.lastMeasure += 1;
                });
            }
        });
        // For voices that don't fill out the full piece, fill them in with rests
        const tracks = Object.keys(trackHash).map((key) => trackHash[key]);
        const maxMeasure = tracks[0].lastMeasure;
        tracks.forEach((track) => {
            while (track.lastMeasure < maxMeasure) {
                const staff = track.notes[0].selector.staff;
                const voice = track.notes[0].selector.voice;
                const rest = this.createTrackRest(track, measureBeats[track.lastMeasure], 0, { staff, measure: track.lastMeasure, voice, tick: 0, pitches: [] }, measureIndexMap);
                track.notes.push(rest);
                track.lastMeasure += 1;
            }
        });
        const repeatMap = this.createRepeatMap(repeats);
        this.normalizeVolume(measureIndexMap);
        return { tracks, repeats, repeatMap, measureBeats, tempoMap };
    }
}


/***/ }),

/***/ "./src/smo/xform/beamers.ts":
/*!**********************************!*\
  !*** ./src/smo/xform/beamers.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoBeamer: () => (/* binding */ SmoBeamer)
/* harmony export */ });
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




const VF = _common_vex__WEBPACK_IMPORTED_MODULE_3__.VexFlow;
/**
 * Contain a group of {@link SmoNote} used for beaming.
 * @internal
 */
class SmoBeamGroup {
    constructor(params) {
        this.voice = 0;
        let i = 0;
        this.voice = params.voice;
        this.notes = params.notes;
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_2__.smoSerialize.vexMerge(this, params);
        this.attrs = {
            id: (0,_data_common__WEBPACK_IMPORTED_MODULE_1__.getId)().toString(),
            type: 'SmoBeamGroup'
        };
        for (i = 0; i < this.notes.length; ++i) {
            const note = this.notes[i];
            if (note.tickCount < 4096) {
                note.beam_group = this.attrs;
            }
        }
    }
}
/**
 * Apply the beam policy set up in node and measure to group the notes into beam groups
 * @category SmoTransform
 */
class SmoBeamer {
    static applyBeams(measure) {
        let i = 0;
        let j = 0;
        for (i = 0; i < measure.voices.length; ++i) {
            const beamer = new SmoBeamer(measure, i);
            const tickmap = measure.tickmapForVoice(i);
            for (j = 0; j < tickmap.durationMap.length; ++j) {
                beamer.beamNote(tickmap, j, measure.voices[i].notes[j]);
            }
        }
    }
    constructor(measure, voice) {
        this.measure = measure;
        this._removeVoiceBeam(measure, voice);
        this.duration = 0;
        this.meterNumbers = [measure.timeSignature.actualBeats, measure.timeSignature.beatDuration];
        // beam on 1/4 notes in most meter, triple time dotted quarter
        this.beamBeats = 2 * 2048;
        if (this.meterNumbers[0] % 3 === 0) {
            this.beamBeats = 3 * 2048;
        }
        this.skipNext = 0;
        this.currentGroup = [];
    }
    get beamGroups() {
        return this.measure.beamGroups;
    }
    _removeVoiceBeam(measure, voice) {
        const beamGroups = [];
        measure.beamGroups.forEach((gr) => {
            if (gr.voice !== voice) {
                beamGroups.push(gr);
            }
        });
        measure.beamGroups = beamGroups;
    }
    _completeGroup(voice) {
        const nrCount = this.currentGroup.filter((nn) => nn.isRest() === false);
        // don't beam groups of 1
        if (nrCount.length > 1) {
            this.measure.beamGroups.push(new SmoBeamGroup({
                notes: this.currentGroup,
                voice
            }));
        }
    }
    _advanceGroup() {
        this.currentGroup = [];
        this.duration = 0;
    }
    // ### _isRemainingTicksBeamable
    // look ahead, and see if we need to beam the tuplet now or if we
    // can combine current beam with future notes.
    _isRemainingTicksBeamable(tickmap, index) {
        let acc = 0;
        let i = 0;
        if (this.duration >= this.beamBeats) {
            return false;
        }
        acc = this.duration;
        for (i = index + 1; i < tickmap.deltaMap.length; ++i) {
            acc += tickmap.deltaMap[i];
            if (acc === this.beamBeats) {
                return true;
            }
            if (acc > this.beamBeats) {
                return false;
            }
        }
        return false;
    }
    beamNote(tickmap, index, note) {
        this.beamBeats = note.beamBeats;
        this.duration += tickmap.deltaMap[index];
        if (note.noteType === '/') {
            this._completeGroup(tickmap.voice);
            this._advanceGroup();
            return;
        }
        // beam tuplets
        if (note.isTuplet) {
            const tuplet = this.measure.getTupletForNote(note);
            // The underlying notes must have been deleted.
            if (!tuplet) {
                return;
            }
            const ult = tuplet.notes[tuplet.notes.length - 1];
            const first = tuplet.notes[0];
            if (first.endBeam) {
                this._advanceGroup();
                return;
            }
            // is this beamable length-wise
            const vexDuration = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.closestVexDuration(note.tickCount);
            const stemTicks = VF.durationToTicks(vexDuration);
            if (note.noteType === 'n' && stemTicks < 4096) {
                this.currentGroup.push(note);
            }
            // Ultimate note in tuplet
            if (ult.attrs.id === note.attrs.id && !this._isRemainingTicksBeamable(tickmap, index)) {
                this._completeGroup(tickmap.voice);
                this._advanceGroup();
            }
            return;
        }
        // don't beam > 1/4 note in 4/4 time.  Don't beam rests.
        if (tickmap.deltaMap[index] >= 4096 || (note.isRest() && this.currentGroup.length === 0)) {
            this._completeGroup(tickmap.voice);
            this._advanceGroup();
            return;
        }
        this.currentGroup.push(note);
        if (note.endBeam) {
            this._completeGroup(tickmap.voice);
            this._advanceGroup();
        }
        if (this.duration === this.beamBeats) {
            this._completeGroup(tickmap.voice);
            this._advanceGroup();
            return;
        }
        // If this does not align on a beat, don't beam it
        if (this.duration > this.beamBeats) {
            this._advanceGroup();
        }
    }
}


/***/ }),

/***/ "./src/smo/xform/copypaste.ts":
/*!************************************!*\
  !*** ./src/smo/xform/copypaste.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PasteBuffer: () => (/* binding */ PasteBuffer)
/* harmony export */ });
/* harmony import */ var _selections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_tuplet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/tuplet */ "./src/smo/data/tuplet.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _data_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/common */ "./src/smo/data/common.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.








/**
 * PasteBuffer holds copied music, and handles the action of pasting the music to
 * a different point in the score.  It does this by serializing the measure(s) from the source
 * and then creating handling the overlap with existing music when deserializaing it.
 * @category SmoTransform
 */
class PasteBuffer {
    constructor() {
        this.score = null;
        this.tupletNoteMap = {};
        this.modifiers = [];
        this.modifiersToPlace = [];
        this.destination = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.default;
        this.staffSelectors = [];
        this.notes = [];
        this.noteIndex = 0;
        this.measures = [];
        this.measureIndex = -1;
        this.remainder = 0;
        this.replacementMeasures = [];
    }
    setScore(score) {
        this.score = score;
    }
    setSelections(score, selections) {
        this.notes = [];
        this.noteIndex = 0;
        this.score = score;
        if (selections.length < 1) {
            return;
        }
        this.tupletNoteMap = {};
        const first = selections[0];
        const last = selections[selections.length - 1];
        if (!first.note || !last.note) {
            return;
        }
        const startTuplet = first.measure.getTupletForNote(first.note);
        if (startTuplet) {
            if (startTuplet.getIndexOfNote(first.note) !== 0) {
                return; // can't paste from the middle of a tuplet
            }
        }
        const endTuplet = last.measure.getTupletForNote(last.note);
        if (endTuplet) {
            if (endTuplet.getIndexOfNote(last.note) !== endTuplet.notes.length - 1) {
                return; // can't paste part of a tuplet.
            }
        }
        this._populateSelectArray(selections);
    }
    // ### _populateSelectArray
    // copy the selected notes into the paste buffer with their original locations.
    _populateSelectArray(selections) {
        let selector = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.default;
        this.modifiers = [];
        selections.forEach((selection) => {
            var _a, _b;
            selector = JSON.parse(JSON.stringify(selection.selector));
            const mod = selection.staff.getModifiersAt(selector);
            if (mod.length) {
                mod.forEach((modifier) => {
                    const cp = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_3__.StaffModifierBase.deserialize(modifier.serialize());
                    cp.attrs.id = (0,_data_common__WEBPACK_IMPORTED_MODULE_7__.getId)().toString();
                    this.modifiers.push(cp);
                });
            }
            const isTuplet = (_b = (_a = selection === null || selection === void 0 ? void 0 : selection.note) === null || _a === void 0 ? void 0 : _a.isTuplet) !== null && _b !== void 0 ? _b : false;
            // We store copy in concert pitch.  The originalKey is the original key of the copy.
            // the destKey is the originalKey in concert pitch.
            const originalKey = selection.measure.keySignature;
            const keyOffset = -1 * selection.measure.transposeIndex;
            const destKey = _data_music__WEBPACK_IMPORTED_MODULE_5__.SmoMusic.vexKeySignatureTranspose(originalKey, keyOffset).toLocaleLowerCase();
            if (isTuplet) {
                const tuplet = selection.measure.getTupletForNote(selection.note);
                const index = tuplet.getIndexOfNote(selection.note);
                if (index === 0) {
                    const ntuplet = _data_tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet.cloneTuplet(tuplet);
                    this.tupletNoteMap[ntuplet.attrs.id] = ntuplet;
                    ntuplet.notes.forEach((nnote) => {
                        const xposeNote = _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.transpose(_data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.clone(nnote), [], -1 * selection.measure.transposeIndex, selection.measure.keySignature, destKey);
                        this.notes.push({ selector, note: xposeNote, originalKey: destKey });
                        selector = JSON.parse(JSON.stringify(selector));
                        selector.tick += 1;
                    });
                }
            }
            else if (selection.note) {
                const note = _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.transpose(_data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.clone(selection.note), [], keyOffset, selection.measure.keySignature, destKey);
                this.notes.push({ selector, note, originalKey: destKey });
            }
        });
        this.notes.sort((a, b) => _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.gt(a.selector, b.selector) ? 1 : -1);
    }
    clearSelections() {
        this.notes = [];
    }
    _findModifier(selector) {
        const rv = this.modifiers.filter((mod) => _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.eq(selector, mod.startSelector));
        return (rv && rv.length) ? rv[0] : null;
    }
    _findPlacedModifier(selector) {
        const rv = this.modifiers.filter((mod) => _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelector.eq(selector, mod.endSelector));
        return (typeof (rv) !== 'undefined' && rv.length) ? rv[0] : null;
    }
    // ### _populateMeasureArray
    // Before pasting, populate an array of existing measures from the paste destination
    // so we know how to place the notes.
    _populateMeasureArray() {
        if (!this.score || !this.destination) {
            return;
        }
        let measureSelection = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.measureSelection(this.score, this.destination.staff, this.destination.measure);
        if (!measureSelection) {
            return;
        }
        const measure = measureSelection.measure;
        while (measure.voices.length <= this.destination.voice) {
            measure.populateVoice(measure.voices.length);
        }
        const tickmap = measure.tickmapForVoice(this.destination.voice);
        let currentDuration = tickmap.durationMap[this.destination.tick];
        this.measures = [];
        this.staffSelectors = [];
        this.measures.push(measure);
        this.notes.forEach((selection) => {
            if (currentDuration + selection.note.tickCount > tickmap.totalDuration && measureSelection !== null) {
                // If this note will overlap the measure boundary, the note will be split in 2 with the
                // remainder going to the next measure.  If they line up exactly, the remainder is 0.
                const remainder = (currentDuration + selection.note.tickCount) - tickmap.totalDuration;
                currentDuration = remainder;
                measureSelection = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.measureSelection(this.score, measureSelection.selector.staff, measureSelection.selector.measure + 1);
                // If the paste buffer overlaps the end of the score, we can't paste (TODO:  add a measure in this case)
                if (measureSelection != null) {
                    this.measures.push(measureSelection.measure);
                }
            }
            else if (measureSelection != null) {
                currentDuration += selection.note.tickCount;
            }
        });
    }
    // ### _populatePre
    // When we paste, we replace entire measures.  Populate the first measure up until the start of pasting.
    _populatePre(voiceIndex, measure, startTick, tickmap) {
        const voice = {
            notes: []
        };
        let i = 0;
        let j = 0;
        let ticksToFill = tickmap.durationMap[startTick];
        // TODO: bug here, need to handle tuplets in pre-part, create new tuplet
        for (i = 0; i < measure.voices[voiceIndex].notes.length; ++i) {
            const note = measure.voices[voiceIndex].notes[i];
            // If this is a tuplet, clone all the notes at once.
            if (note.isTuplet && ticksToFill >= note.tickCount) {
                const tuplet = measure.getTupletForNote(note);
                if (!tuplet) {
                    continue; // we remove the tuplet after first iteration
                }
                const ntuplet = _data_tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet.cloneTuplet(tuplet);
                voice.notes = voice.notes.concat(ntuplet.notes);
                measure.removeTupletForNote(note);
                measure.tuplets.push(ntuplet);
                ticksToFill -= tuplet.tickCount;
            }
            else if (ticksToFill >= note.tickCount) {
                ticksToFill -= note.tickCount;
                voice.notes.push(_data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.clone(note));
            }
            else {
                const duration = note.tickCount - ticksToFill;
                const durMap = _data_music__WEBPACK_IMPORTED_MODULE_5__.SmoMusic.gcdMap(duration);
                for (j = 0; j < durMap.length; ++j) {
                    const dd = durMap[j];
                    _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.cloneWithDuration(note, {
                        numerator: dd,
                        denominator: 1,
                        remainder: 0
                    });
                }
                ticksToFill = 0;
            }
            if (ticksToFill < 1) {
                break;
            }
        }
        return voice;
    }
    // ### _populateVoice
    // ### Description:
    // Create a new voice for a new measure in the paste destination
    _populateVoice(voiceIndex) {
        this._populateMeasureArray();
        const measures = this.measures;
        let measure = measures[0];
        let tickmap = measure.tickmapForVoice(this.destination.voice);
        let voice = this._populatePre(voiceIndex, measure, this.destination.tick, tickmap);
        let startSelector = JSON.parse(JSON.stringify(this.destination));
        this.measureIndex = 0;
        const measureVoices = [];
        measureVoices.push(voice);
        while (this.measureIndex < measures.length) {
            measure = measures[this.measureIndex];
            while (measure.voices.length <= this.destination.voice) {
                const nvoice = { notes: _data_measure__WEBPACK_IMPORTED_MODULE_2__.SmoMeasure.getDefaultNotes(measure) };
                measure.voices.push(nvoice);
            }
            tickmap = measure.tickmapForVoice(this.destination.voice);
            this._populateNew(voice, measure, tickmap, startSelector);
            if (this.noteIndex < this.notes.length && this.measureIndex < measures.length) {
                voice = {
                    notes: []
                };
                measureVoices.push(voice);
                startSelector = {
                    staff: startSelector.staff,
                    measure: startSelector.measure,
                    voice: voiceIndex,
                    tick: 0
                };
                this.measureIndex += 1;
                startSelector.measure += 1;
            }
            else {
                break;
            }
        }
        this._populatePost(voice, voiceIndex, measure, tickmap);
        return measureVoices;
    }
    static _countTicks(voice) {
        let voiceTicks = 0;
        voice.notes.forEach((note) => {
            voiceTicks += note.tickCount;
        });
        return voiceTicks;
    }
    /**
     * If the source contains a staff modifier that ends on the source selection, copy the modifier
     * @param srcSelector
     * @param destSelector
     * @param staff
     * @returns
     */
    _populateModifier(srcSelector, destSelector, staff) {
        const mod = this._findPlacedModifier(srcSelector);
        if (mod && this.score) {
            // Don't copy modifiers that cross staff boundaries outside the source staff b/c it's not clear what
            // the dest staff should be
            if (mod.startSelector.staff !== mod.endSelector.staff && srcSelector.staff !== destSelector.staff) {
                return;
            }
            const repl = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_3__.StaffModifierBase.deserialize(mod.serialize());
            repl.endSelector = JSON.parse(JSON.stringify(destSelector));
            const tickOffset = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.countTicks(this.score, mod.startSelector, mod.endSelector);
            this.modifiersToPlace.push({
                modifier: repl,
                ticksToStart: tickOffset
            });
        }
    }
    /**
     * Figure out if the tuplet overlaps an existing tuplet in the target measure
     * @param t1
     * @param measure
     * @returns
     */
    static tupletOverlapIndex(t1, measure) {
        for (var i = 0; i < measure.tuplets.length; ++i) {
            const tt = measure.tuplets[i];
            // TODO: what about other kinds of overlap?
            if (tt.startIndex === t1.startIndex) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Start copying the paste buffer into the destination by copying the notes and working out
     * the measure overlap
     *
     * @param voice
     * @param measure
     * @param tickmap
     * @param startSelector
     * @returns
     */
    _populateNew(voice, measure, tickmap, startSelector) {
        let currentDuration = tickmap.durationMap[startSelector.tick];
        let i = 0;
        let j = 0;
        let tupletsPushed = 0;
        const totalDuration = tickmap.totalDuration;
        while (currentDuration < totalDuration && this.noteIndex < this.notes.length) {
            if (!this.score) {
                return;
            }
            const selection = this.notes[this.noteIndex];
            const note = selection.note;
            if (note.noteType === 'n') {
                const pitchAr = [];
                note.pitches.forEach((pitch, ix) => {
                    pitchAr.push(ix);
                });
                _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.transpose(note, pitchAr, measure.transposeIndex, selection.originalKey, measure.keySignature);
            }
            this._populateModifier(selection.selector, startSelector, this.score.staves[selection.selector.staff]);
            if (note.isTuplet) {
                const tuplet = this.tupletNoteMap[note.tuplet.id];
                const ntuplet = _data_tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet.cloneTuplet(tuplet);
                ntuplet.startIndex = voice.notes.length;
                this.noteIndex += ntuplet.notes.length;
                startSelector.tick += ntuplet.notes.length;
                currentDuration += tuplet.tickCount;
                for (i = 0; i < ntuplet.notes.length; ++i) {
                    const tn = ntuplet.notes[i];
                    tn.clef = measure.clef;
                    voice.notes.push(tn);
                }
                const tix = PasteBuffer.tupletOverlapIndex(ntuplet, measure);
                // If this is overlapping an existing tuplet in the target measure, replace it
                if (tix >= 0) {
                    measure.tuplets[tix] = ntuplet;
                }
                else {
                    measure.tuplets.push(ntuplet);
                }
            }
            else if (currentDuration + note.tickCount <= totalDuration && this.remainder === 0) {
                // The whole note fits in the measure, paste it.
                const nnote = _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.clone(note);
                nnote.clef = measure.clef;
                voice.notes.push(nnote);
                currentDuration += note.tickCount;
                this.noteIndex += 1;
                startSelector.tick += 1;
            }
            else if (this.remainder > 0) {
                // This is a note that spilled over the last measure
                const nnote = _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.cloneWithDuration(note, {
                    numerator: this.remainder,
                    denominator: 1,
                    remainder: 0
                });
                nnote.clef = measure.clef;
                voice.notes.push(nnote);
                currentDuration += this.remainder;
                this.remainder = 0;
            }
            else {
                // The note won't fit, so we split it in 2 and paste the remainder in the next measure.
                // TODO:  tie the last note to this one.
                const partial = totalDuration - currentDuration;
                const dar = _data_music__WEBPACK_IMPORTED_MODULE_5__.SmoMusic.gcdMap(partial);
                for (j = 0; j < dar.length; ++j) {
                    const ddd = dar[j];
                    const vnote = _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.cloneWithDuration(note, {
                        numerator: ddd,
                        denominator: 1,
                        remainder: 0
                    });
                    voice.notes.push(vnote);
                }
                currentDuration += partial;
                // Set the remaining length of the current note, this will be added to the
                // next measure with the previous note's pitches
                this.remainder = note.tickCount - partial;
            }
        }
    }
    // ### _populatePost
    // When we paste, we replace entire measures.  Populate the last measure from the end of paste to the
    // end of the measure with notes in the existing measure.
    _populatePost(voice, voiceIndex, measure, tickmap) {
        let startTicks = PasteBuffer._countTicks(voice);
        let existingIndex = 0;
        const totalDuration = tickmap.totalDuration;
        while (startTicks < totalDuration) {
            // Find the point in the music where the paste area runs out, or as close as we can get.
            existingIndex = tickmap.durationMap.indexOf(startTicks);
            existingIndex = (existingIndex < 0) ? measure.voices[voiceIndex].notes.length - 1 : existingIndex;
            const note = measure.voices[voiceIndex].notes[existingIndex];
            if (note.isTuplet) {
                const tuplet = measure.getTupletForNote(note);
                const ntuplet = _data_tuplet__WEBPACK_IMPORTED_MODULE_4__.SmoTuplet.cloneTuplet(tuplet);
                startTicks += tuplet.tickCount;
                voice.notes = voice.notes.concat(ntuplet.notes);
                measure.tuplets.push(ntuplet);
                measure.removeTupletForNote(note);
            }
            else {
                const ticksLeft = totalDuration - startTicks;
                if (ticksLeft >= note.tickCount) {
                    startTicks += note.tickCount;
                    voice.notes.push(_data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.clone(note));
                }
                else {
                    const remainder = totalDuration - startTicks;
                    voice.notes.push(_data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.cloneWithDuration(note, {
                        numerator: remainder,
                        denominator: 1,
                        remainder: 0
                    }));
                    startTicks = totalDuration;
                }
            }
        }
    }
    _pasteVoiceSer(ser, vobj, voiceIx) {
        const voices = [];
        let ix = 0;
        ser.voices.forEach((vc) => {
            if (ix !== voiceIx) {
                voices.push(vc);
            }
            else {
                voices.push(vobj);
            }
            ix += 1;
        });
        // If we are pasting into a measure that doesn't contain this voice, add the voice
        if (ser.voices.length <= voiceIx) {
            voices.push(vobj);
        }
        ser.voices = voices;
    }
    pasteSelections(selector) {
        let i = 0;
        if (this.notes.length < 1) {
            return;
        }
        const maxCutVoice = this.notes.map((n) => n.selector.voice).reduce((a, b) => a > b ? a : b);
        const minCutVoice = this.notes.map((n) => n.selector.voice).reduce((a, b) => a > b ? a : b);
        const backupNotes = [];
        this.notes.forEach((bb) => {
            const note = (_data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.deserialize(bb.note.serialize()));
            const selector = JSON.parse(JSON.stringify(bb.selector));
            backupNotes.push({ note, selector, originalKey: bb.originalKey });
        });
        this.destination = selector;
        if (minCutVoice === maxCutVoice && minCutVoice > this.destination.voice) {
            this.destination.voice = minCutVoice;
        }
        this.modifiersToPlace = [];
        if (this.notes.length < 1) {
            return;
        }
        if (!this.score) {
            return;
        }
        this.noteIndex = 0;
        this.measureIndex = -1;
        this.remainder = 0;
        const voices = this._populateVoice(this.destination.voice);
        const measureSel = JSON.parse(JSON.stringify(this.destination));
        const selectors = [];
        for (i = 0; i < this.measures.length && i < voices.length; ++i) {
            const measure = this.measures[i];
            const nvoice = voices[i];
            const ser = measure.serialize();
            // Make sure the key is concert pitch, it is what measure constructor expects
            ser.transposeIndex = measure.transposeIndex; // default values are undefined, make sure the transpose is valid
            ser.keySignature = _data_music__WEBPACK_IMPORTED_MODULE_5__.SmoMusic.vexKeySigWithOffset(measure.keySignature, -1 * measure.transposeIndex);
            ser.timeSignature = measure.timeSignature.serialize();
            ser.tempo = measure.tempo.serialize();
            const vobj = {
                notes: []
            };
            nvoice.notes.forEach((note) => {
                vobj.notes.push(note.serialize());
            });
            // TODO: figure out how to do this with multiple voices
            this._pasteVoiceSer(ser, vobj, this.destination.voice);
            const nmeasure = _data_measure__WEBPACK_IMPORTED_MODULE_2__.SmoMeasure.deserialize(ser);
            // If this is the non-display buffer, don't try to reset the display rectangles.
            // Q: Is this even required since we are going to re-render?
            // A: yes, because until we do, the replaced measure needs the formatting info
            if (measure.svg.logicalBox && measure.svg.logicalBox.width > 0) {
                nmeasure.setBox(_render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_6__.SvgHelpers.smoBox(measure.svg.logicalBox), 'copypaste');
                nmeasure.setX(measure.svg.logicalBox.x, 'copyPaste');
                nmeasure.setWidth(measure.svg.logicalBox.width, 'copypaste');
                nmeasure.setY(measure.svg.logicalBox.y, 'copypaste');
                nmeasure.svg.element = measure.svg.element;
            }
            ['forceClef', 'forceKeySignature', 'forceTimeSignature', 'forceTempo'].forEach((flag) => {
                nmeasure[flag] = measure.svg[flag];
            });
            this.score.replaceMeasure(measureSel, nmeasure);
            measureSel.measure += 1;
            selectors.push({ staff: selector.staff, measure: nmeasure.measureNumber.measureIndex, voice: 0, tick: 0, pitches: [] });
        }
        this.replacementMeasures = [];
        selectors.forEach((selector) => {
            const nsel = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.measureSelection(this.score, selector.staff, selector.measure);
            if (nsel) {
                this.replacementMeasures.push(nsel);
            }
        });
        this.modifiersToPlace.forEach((mod) => {
            let selection = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.selectionFromSelector(this.score, mod.modifier.endSelector);
            while (selection && mod.ticksToStart !== 0) {
                if (mod.ticksToStart < 0) {
                    selection = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.nextNoteSelectionFromSelector(this.score, selection.selector);
                }
                else {
                    selection = _selections__WEBPACK_IMPORTED_MODULE_0__.SmoSelection.lastNoteSelectionFromSelector(this.score, selection.selector);
                }
                mod.ticksToStart -= 1 * Math.sign(mod.ticksToStart);
            }
            if (selection) {
                mod.modifier.startSelector = JSON.parse(JSON.stringify(selection.selector));
                selection.staff.addStaffModifier(mod.modifier);
            }
        });
        this.notes = backupNotes;
    }
}


/***/ }),

/***/ "./src/smo/xform/operations.ts":
/*!*************************************!*\
  !*** ./src/smo/xform/operations.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoOperation: () => (/* binding */ SmoOperation)
/* harmony export */ });
/* harmony import */ var _data_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/common */ "./src/smo/data/common.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_systemStaff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _selections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _tickDuration__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tickDuration */ "./src/smo/xform/tickDuration.ts");
/* harmony import */ var _beamers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./beamers */ "./src/smo/xform/beamers.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.












const VF = _common_vex__WEBPACK_IMPORTED_MODULE_11__.VexFlow;
/**
 * SmoOperation is a collection of static methods that operate on/change/transform the music.  Most methods
 * take the score, a selection or selection array, and the parameters of the operation.
 * @category SmoUtilities
 */
class SmoOperation {
    static setMeasureFormat(score, selection, value) {
        if (!score.formattingManager) {
            return;
        }
        score.staves.forEach((staff) => {
            value.formatMeasure(staff.measures[selection.selector.measure]);
        });
        score.formattingManager.updateMeasureFormat(value);
    }
    static addKeySignature(score, selection, keySignature) {
        score.addKeySignature(selection.selector.measure, keySignature);
    }
    static addConnectorDown(score, selections, parameters) {
        const msel = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.getMeasureList(selections);
        const len = msel.length - 1;
        if (score.staves.length <= msel[len].selector.staff) {
            return;
        }
        const existing = score.getSystemGroupForStaff(msel[0]);
        if (existing && existing.endSelector.staff < selections[len].selector.staff) {
            existing.endSelector.staff = msel[len].selector.staff + 1;
        }
        else {
            parameters.startSelector = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default;
            parameters.startSelector.staff = msel[0].selector.staff;
            parameters.startSelector.measure = msel[0].selector.measure;
            parameters.endSelector = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default;
            parameters.endSelector.staff = msel[len].selector.staff + 1;
            parameters.endSelector.measure = msel[len].selector.measure;
            score.addOrReplaceSystemGroup(new _data_scoreModifiers__WEBPACK_IMPORTED_MODULE_7__.SmoSystemGroup(parameters));
        }
    }
    static toggleBeamGroup(noteSelection) {
        if (!noteSelection.note) {
            return;
        }
        noteSelection.note.endBeam = !(noteSelection.note.endBeam);
    }
    static setActiveVoice(score, voiceIx) {
        score.staves.forEach((staff) => {
            staff.measures.forEach((measure) => {
                measure.setActiveVoice(voiceIx);
            });
        });
    }
    static addRemoveMicrotone(ignore, selections, tone) {
        selections.forEach((sel) => {
            const note = sel.note;
            if (note) {
                const oldTone = note.getMicrotone(tone.pitchIndex);
                if (oldTone) {
                    note.removeMicrotone(oldTone);
                }
                else {
                    note.addMicrotone(tone);
                }
            }
        });
    }
    static moveStaffUpDown(score, selection, index) {
        const index1 = selection.selector.staff;
        const index2 = selection.selector.staff + index;
        if (index2 < score.staves.length && index2 >= 0) {
            score.swapStaves(index1, index2);
        }
    }
    static depopulateVoice(selection, voiceIx) {
        let ix = 0;
        const voices = [];
        const measure = selection.measure;
        measure.voices.forEach((voice) => {
            if (measure.voices.length < 2 || ix !== voiceIx) {
                voices.push(voice);
            }
            ix += 1;
        });
        measure.voices = voices;
        if (measure.getActiveVoice() >= measure.voices.length) {
            measure.setActiveVoice(0);
        }
    }
    static populateVoice(selection, voiceIx) {
        selection.measure.populateVoice(voiceIx);
    }
    static setTimeSignature(score, selections, timeSignature) {
        const selectors = [];
        let i = 0;
        // change the time signature for each stave in the score
        selections.forEach((selection) => {
            for (i = 0; i < score.staves.length; ++i) {
                const measureSel = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.measureSelector(i, selection.selector.measure);
                selectors.push(measureSel);
            }
        });
        selectors.forEach((selector) => {
            const rowSelection = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.measureSelection(score, selector.staff, selector.measure);
            rowSelection.measure.timeSignature = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__.TimeSignature(timeSignature);
            rowSelection.measure.alignNotesWithTimeSignature();
        });
    }
    static batchSelectionOperation(score, selections, operation) {
        var measureTicks = [];
        selections.forEach((selection) => {
            const tm = selection.measure.tickmapForVoice(selection.selector.voice);
            const tickOffset = tm.durationMap[selection.selector.tick];
            const selector = JSON.parse(JSON.stringify(selection.selector));
            measureTicks.push({
                selector,
                tickOffset
            });
        });
        measureTicks.forEach((measureTick) => {
            const selection = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.measureSelection(score, measureTick.selector.staff, measureTick.selector.measure);
            const tickmap = selection.measure.tickmapForVoice(measureTick.selector.voice);
            const ix = tickmap.durationMap.indexOf(measureTick.tickOffset);
            if (ix >= 0) {
                const nsel = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.noteSelection(score, measureTick.selector.staff, measureTick.selector.measure, measureTick.selector.voice, ix);
                SmoOperation[operation](nsel);
            }
        });
    }
    // ## doubleDuration
    // ## Description
    // double the duration of a note in a measure, at the expense of the following
    // note, if possible.  Works on tuplets also.
    static doubleDuration(selection) {
        const note = selection.note;
        const measure = selection.measure;
        const tuplet = measure.getTupletForNote(note);
        if (!tuplet) {
            _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoDuration.doubleDurationNonTuplet(selection);
        }
        else {
            _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoDuration.doubleDurationTuplet(selection);
        }
        return true;
    }
    // ## halveDuration
    // ## Description
    // Replace the note with 2 notes of 1/2 duration, if possible
    // Works on tuplets also.
    static halveDuration(selection) {
        const note = selection.note;
        let divisor = 2;
        const measure = selection.measure;
        const tuplet = measure.getTupletForNote(note);
        if (measure.timeSignature.actualBeats % 3 === 0 && note.tickCount === 6144) {
            // special behavior, if this is dotted 1/4 in 6/8, split to 3
            divisor = 3;
        }
        if (!tuplet) {
            const nticks = note.tickCount / divisor;
            if (!_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.ticksToDuration[nticks]) {
                return;
            }
            _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoContractNoteActor.apply({
                startIndex: selection.selector.tick,
                measure: selection.measure,
                voice: selection.selector.voice,
                newTicks: nticks
            });
            _beamers__WEBPACK_IMPORTED_MODULE_10__.SmoBeamer.applyBeams(measure);
        }
        else {
            const startIndex = measure.tupletIndex(tuplet) + tuplet.getIndexOfNote(note);
            _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoContractTupletActor.apply({
                changeIndex: startIndex,
                measure,
                voice: selection.selector.voice
            });
        }
    }
    // ## makeTuplet
    // ## Description
    // Makes a non-tuplet into a tuplet of equal value.
    static makeTuplet(selection, numNotes) {
        const note = selection.note;
        const measure = selection.measure;
        if (measure.getTupletForNote(note)) {
            return;
        }
        const nticks = note.tickCount;
        _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoMakeTupletActor.apply({
            index: selection.selector.tick,
            totalTicks: nticks,
            numNotes,
            measure: selection.measure,
            voice: selection.selector.voice
        });
    }
    static addStaffModifier(selection, modifier) {
        selection.staff.addStaffModifier(modifier);
    }
    static toggleRest(selection) {
        var _a;
        (_a = selection.note) === null || _a === void 0 ? void 0 : _a.toggleRest();
    }
    static toggleSlash(selection) {
        var _a;
        (_a = selection.note) === null || _a === void 0 ? void 0 : _a.toggleSlash();
    }
    static makeRest(selection) {
        var _a;
        (_a = selection.note) === null || _a === void 0 ? void 0 : _a.makeRest();
    }
    static makeNote(selection) {
        var _a;
        (_a = selection.note) === null || _a === void 0 ? void 0 : _a.makeNote();
    }
    static setNoteHead(selections, noteHead) {
        selections.forEach((selection) => {
            var _a;
            (_a = selection.note) === null || _a === void 0 ? void 0 : _a.setNoteHead(noteHead);
        });
    }
    static addGraceNote(selection, g, offset) {
        var _a;
        (_a = selection.note) === null || _a === void 0 ? void 0 : _a.addGraceNote(g, offset);
    }
    static removeGraceNote(selection, offset) {
        var _a;
        (_a = selection.note) === null || _a === void 0 ? void 0 : _a.removeGraceNote(offset);
    }
    static doubleGraceNoteDuration(selection, modifiers) {
        if (!Array.isArray(modifiers)) {
            modifiers = [modifiers];
        }
        modifiers.forEach((mm) => {
            mm.ticks.numerator = mm.ticks.numerator * 2;
        });
    }
    static halveGraceNoteDuration(selection, modifiers) {
        if (!Array.isArray(modifiers)) {
            modifiers = [modifiers];
        }
        modifiers.forEach((mm) => {
            mm.ticks.numerator = mm.ticks.numerator / 2;
        });
    }
    static toggleGraceNoteCourtesy(selection, modifiers) {
        if (!Array.isArray(modifiers)) {
            modifiers = [modifiers];
        }
        modifiers.forEach((mm) => {
            mm.pitches.forEach((pitch) => {
                // eslint-disable-next-line
                pitch.cautionary = pitch.cautionary ? false : true;
            });
        });
    }
    static toggleGraceNoteEnharmonic(selection, modifiers) {
        if (!Array.isArray(modifiers)) {
            modifiers = [modifiers];
        }
        modifiers.forEach((mm) => {
            mm.pitches.forEach((pitch) => {
                _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.toggleEnharmonic(pitch);
            });
        });
    }
    static transposeGraceNotes(selection, modifiers, offset) {
        if (!Array.isArray(modifiers)) {
            modifiers = [modifiers];
        }
        modifiers.forEach((mm) => {
            const par = [];
            if (!mm) {
                console.warn('bad modifier grace note');
                return;
            }
            mm.pitches.forEach((pitch) => {
                par.push(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoIntToPitch(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchToInt(pitch) + offset));
            });
            mm.pitches = par;
        });
    }
    static slashGraceNotes(selections) {
        if (!Array.isArray(selections)) {
            selections = [selections];
        }
        // TODO: modifiers on artifacts should be typed
        selections.forEach((mm) => {
            if (mm.modifier && mm.modifier.ctor === 'SmoGraceNote') {
                mm.modifier.slash = !mm.modifier.slash;
            }
        });
    }
    // ## unmakeTuplet
    // ## Description
    // Makes a tuplet into a single with the duration of the whole tuplet
    static unmakeTuplet(selection) {
        const note = selection.note;
        const measure = selection.measure;
        if (!measure.getTupletForNote(note)) {
            return;
        }
        const tuplet = measure.getTupletForNote(note);
        if (tuplet === null) {
            return;
        }
        const startIndex = measure.tupletIndex(tuplet);
        const endIndex = tuplet.notes.length + startIndex - 1;
        _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoUnmakeTupletActor.apply({
            startIndex,
            endIndex,
            measure,
            voice: selection.selector.voice
        });
    }
    // ## dotDuration
    // ## Description
    // Add a dot to a note, if possible, and make the note ahead of it shorter
    // to compensate.
    static dotDuration(selection) {
        const note = selection.note;
        const measure = selection.measure;
        const nticks = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getNextDottedLevel(note.tickCount);
        if (nticks === note.tickCount) {
            return;
        }
        // Don't dot if the thing on the right of the . is too small
        const dotCount = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoTicksToVexDots(nticks);
        const multiplier = Math.pow(2, dotCount);
        const baseDot = VF.durationToTicks(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.closestVexDuration(nticks)) / (multiplier * 2);
        if (baseDot <= 128) {
            return;
        }
        // If this is the ultimate note in the measure, we can't increase the length
        if (selection.selector.tick + 1 === selection.measure.voices[selection.selector.voice].notes.length) {
            return;
        }
        if (selection.measure.voices[selection.selector.voice].notes[selection.selector.tick + 1].tickCount > note.tickCount) {
            console.log('too long');
            return;
        }
        // is dot too short?
        if (!_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.ticksToDuration[selection.measure.voices[selection.selector.voice].notes[selection.selector.tick + 1].tickCount / 2]) {
            return;
        }
        _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoStretchNoteActor.apply({
            startIndex: selection.selector.tick,
            measure,
            voice: selection.selector.voice,
            newTicks: nticks
        });
    }
    // ## undotDuration
    // ## Description
    // Add the value of the last dot to the note, increasing length and
    // reducing the number of dots.
    static undotDuration(selection) {
        const note = selection.note;
        const measure = selection.measure;
        const nticks = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getPreviousDottedLevel(note.tickCount);
        if (nticks === note.tickCount) {
            return;
        }
        _tickDuration__WEBPACK_IMPORTED_MODULE_9__.SmoContractNoteActor.apply({
            startIndex: selection.selector.tick,
            measure,
            voice: selection.selector.voice,
            newTicks: nticks
        });
    }
    // ## transpose
    // ## Description
    // Transpose the selected note, trying to find a key-signature friendly value
    static transpose(selection, offset) {
        let trans;
        let transInt = 0;
        let i = 0;
        if (typeof (selection.selector.pitches) === 'undefined') {
            selection.selector.pitches = [];
        }
        const measure = selection.measure;
        const note = selection.note;
        if (measure && note) {
            const pitchar = [];
            note.pitches.forEach((opitch, pitchIx) => {
                // Only translate selected pitches
                const shouldXpose = selection.selector.pitches.length === 0 ||
                    selection.selector.pitches.indexOf(pitchIx) >= 0;
                // Translate the pitch, ignoring enharmonic
                trans = shouldXpose ? _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getKeyOffset(opitch, offset)
                    : JSON.parse(JSON.stringify(opitch));
                if (shouldXpose) {
                    trans = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getEnharmonicInKey(trans, measure.keySignature);
                    if (!trans.accidental) {
                        trans.accidental = 'n';
                    }
                    transInt = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchToInt(trans);
                    // Look through the earlier notes in the measure and try
                    // to find an equivalent note, and convert it if it exists.
                    measure.voices.forEach((voice) => {
                        for (i = 0; i < selection.selector.tick
                            && i < voice.notes.length; ++i) {
                            const prevNote = voice.notes[i];
                            // eslint-disable-next-line
                            prevNote.pitches.forEach((prevPitch) => {
                                const prevInt = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchToInt(prevPitch);
                                if (prevInt === transInt) {
                                    trans = JSON.parse(JSON.stringify(prevPitch));
                                }
                            });
                        }
                    });
                }
                pitchar.push(trans);
            });
            note.pitches = pitchar;
            return true;
        }
        return false;
    }
    // ## setPitch
    // ## Description:
    // pitches can be either an array, a single pitch, or a letter.  In the latter case,
    // the letter value appropriate for the key signature is used, e.g. c in A major becomes
    // c#
    static setPitch(selection, pitches) {
        let i = 0;
        const measure = selection.measure;
        const note = selection.note;
        if (typeof (note) === 'undefined') {
            console.warn('set Pitch on invalid note');
            return;
        }
        note.makeNote();
        // TODO allow hint for octave
        const octave = note.pitches[0].octave;
        note.pitches = [];
        if (!Array.isArray(pitches)) {
            pitches = [pitches];
        }
        const earlierAccidental = (pitch) => {
            selection.measure.voices.forEach((voice) => {
                for (i = 0; i < selection.selector.tick
                    && i < voice.notes.length; ++i) {
                    const prevNote = voice.notes[i];
                    if (prevNote === null || prevNote.pitches === null) {
                        console.log('this will die null');
                    }
                    prevNote.pitches.forEach((prevPitch) => {
                        if (prevNote.noteType === 'n' && prevPitch.letter === pitch.letter) {
                            pitch.accidental = prevPitch.accidental;
                        }
                    });
                }
            });
        };
        pitches.forEach((pitch) => {
            if (typeof (pitch) === 'string') {
                const letter = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getKeySignatureKey(pitch[0], measure.keySignature);
                pitch = {
                    letter: letter[0],
                    accidental: letter.length > 1 ? letter.substring(1) : '',
                    octave
                };
            }
            earlierAccidental(pitch);
            note.pitches.push(pitch);
        });
    }
    static toggleCourtesyAccidental(selection) {
        let toBe = false;
        const note = selection.note;
        if (!selection.selector.pitches || selection.selector.pitches.length === 0) {
            const ps = [];
            note.pitches.forEach((pitch) => {
                const p = JSON.parse(JSON.stringify(pitch));
                ps.push(p);
                p.cautionary = !(pitch.cautionary);
            });
            note.pitches = ps;
        }
        else {
            toBe = !(note.pitches[selection.selector.pitches[0]].cautionary);
        }
        SmoOperation.courtesyAccidental(selection, toBe);
    }
    static courtesyAccidental(pitchSelection, toBe) {
        pitchSelection.selector.pitches.forEach((pitchIx) => {
            pitchSelection.note.pitches[pitchIx].cautionary = toBe;
        });
    }
    static toggleEnharmonic(pitchSelection) {
        if (pitchSelection.selector.pitches.length === 0) {
            pitchSelection.selector.pitches.push(0);
        }
        const pitch = pitchSelection.note.pitches[pitchSelection.selector.pitches[0]];
        _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.toggleEnharmonic(pitch);
    }
    static addDynamic(selection, dynamic) {
        selection.note.addDynamic(dynamic);
    }
    static removeDynamic(selection, dynamic) {
        selection.note.removeDynamic(dynamic);
    }
    static beamSelections(score, selections) {
        const start = selections[0].selector;
        let cur = selections[0].selector;
        const beamGroup = [];
        let ticks = 0;
        selections.forEach((selection) => {
            const note = selection.note;
            if (_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.sameNote(start, selection.selector) ||
                (_selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.sameMeasure(selection.selector, cur) &&
                    cur.tick === selection.selector.tick - 1)) {
                ticks += note.tickCount;
                cur = selection.selector;
                beamGroup.push(note);
            }
        });
        if (beamGroup.length) {
            beamGroup.forEach((note) => {
                note.beamBeats = ticks;
                note.endBeam = false;
            });
            beamGroup[beamGroup.length - 1].endBeam = true;
            // Make sure the last note of the previous beam is the end of this beam group.
            if (selections[0].selector.tick > 0) {
                const ps = JSON.parse(JSON.stringify(selections[0].selector));
                ps.tick -= 1;
                const previous = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.noteFromSelector(score, ps);
                if ((previous === null || previous === void 0 ? void 0 : previous.note) && previous.note.tickCount < 4096) {
                    previous.note.endBeam = true;
                }
            }
        }
    }
    static toggleBeamDirection(selections) {
        const note0 = selections[0].note;
        note0.toggleFlagState();
        selections.forEach((selection) => {
            const note = selection.note;
            note.flagState = note0.flagState;
        });
    }
    static toggleOrnament(selection, ornament) {
        selection.note.toggleOrnament(ornament);
    }
    static toggleArticulation(selection, articulation) {
        selection.note.toggleArticulation(articulation);
    }
    static addEnding(score, parameters) {
        let m = 0;
        let s = 0;
        const startMeasure = parameters.startBar;
        const endMeasure = parameters.endBar;
        // Ending ID ties all the instances of an ending across staves
        parameters.endingId = (0,_data_common__WEBPACK_IMPORTED_MODULE_0__.getId)().toString();
        score.staves.forEach((staff) => {
            m = 0;
            staff.measures.forEach((measure) => {
                if (m === startMeasure) {
                    const pp = JSON.parse(JSON.stringify(parameters));
                    pp.startSelector = {
                        staff: s,
                        measure: startMeasure
                    };
                    pp.endSelector = {
                        staff: s,
                        measure: endMeasure
                    };
                    const ending = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoVolta(pp);
                    measure.addNthEnding(ending);
                }
                m += 1;
            });
            s += 1;
        });
    }
    static removeEnding(score, ending) {
        let i = 0;
        score.staves.forEach((staff) => {
            // bug
            // Due to deleted measures, volta might not match up so look through all measures.
            for (i = 0; i < staff.measures.length; ++i) {
                staff.measures[i].removeNthEnding(ending);
            }
        });
    }
    static addTextGroup(score, textGroup) {
        score.addTextGroup(textGroup);
    }
    static removeTextGroup(score, textGroup) {
        score.removeTextGroup(textGroup);
    }
    static addMeasureText(score, selection, measureText) {
        const current = selection.measure.getMeasureText();
        // TODO: should we allow multiples per position
        current.forEach((mod) => {
            selection.measure.removeMeasureText(mod.attrs.id);
        });
        selection.measure.addMeasureText(measureText);
    }
    static removeMeasureText(score, selection, mt) {
        selection.measure.removeMeasureText(mt.attrs.id);
    }
    static removeRehearsalMark(score, selection) {
        score.staves.forEach((staff) => {
            staff.removeRehearsalMark(selection.selector.measure);
        });
    }
    static addRehearsalMark(score, selection, rehearsalMark) {
        score.staves.forEach((staff) => {
            const mt = new _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoRehearsalMark(rehearsalMark.serialize());
            staff.addRehearsalMark(selection.selector.measure, mt);
        });
    }
    static addTempo(score, selection, tempo) {
        score.staves.forEach((staff) => {
            staff.addTempo(tempo, selection.selector.measure);
        });
    }
    static setMeasureBarline(score, selection, barline) {
        const mm = selection.selector.measure;
        let ix = 0;
        score.staves.forEach(() => {
            const s2 = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.measureSelection(score, ix, mm);
            s2 === null || s2 === void 0 ? void 0 : s2.measure.setBarline(barline);
            ix += 1;
        });
    }
    static setRepeatSymbol(score, selection, sym) {
        let ix = 0;
        const mm = selection.selector.measure;
        score.staves.forEach(() => {
            const s2 = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.measureSelection(score, ix, mm);
            s2 === null || s2 === void 0 ? void 0 : s2.measure.setRepeatSymbol(sym);
            ix += 1;
        });
    }
    // ## interval
    // Add a pitch at the specified interval to the chord in the selection.
    static interval(selection, interval) {
        const measure = selection.measure;
        const note = selection.note;
        let pitch = {};
        // TODO: figure out which pitch is selected
        pitch = note.pitches[0];
        if (interval > 0) {
            pitch = note.pitches[note.pitches.length - 1];
        }
        pitch = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getIntervalInKey(pitch, measure.keySignature, interval);
        if (pitch) {
            note.pitches.push(pitch);
            note.pitches.sort((x, y) => _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchToInt(x) - _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchToInt(y));
            return true;
        }
        return false;
    }
    static addOrReplaceBracket(modifier, fromSelection, toSelection) {
        fromSelection.staff.addTextBracket(modifier);
    }
    static ritard(fromSelection, toSelection) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.defaults;
        params.startSelector = JSON.parse(JSON.stringify(fromSelection.selector));
        params.endSelector = JSON.parse(JSON.stringify(toSelection.selector));
        params.text = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.RITARD;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket(params);
        fromSelection.staff.addTextBracket(modifier);
        return modifier;
    }
    static accelerando(fromSelection, toSelection) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.defaults;
        params.startSelector = JSON.parse(JSON.stringify(fromSelection.selector));
        params.endSelector = JSON.parse(JSON.stringify(toSelection.selector));
        params.text = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.ACCEL;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket(params);
        fromSelection.staff.addTextBracket(modifier);
        return modifier;
    }
    static crescendoBracket(fromSelection, toSelection) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.defaults;
        params.startSelector = JSON.parse(JSON.stringify(fromSelection.selector));
        params.endSelector = JSON.parse(JSON.stringify(toSelection.selector));
        params.text = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.CRESCENDO;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket(params);
        fromSelection.staff.addTextBracket(modifier);
        return modifier;
    }
    static dimenuendo(fromSelection, toSelection) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.defaults;
        params.startSelector = JSON.parse(JSON.stringify(fromSelection.selector));
        params.endSelector = JSON.parse(JSON.stringify(toSelection.selector));
        params.text = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket.CRESCENDO;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffTextBracket(params);
        fromSelection.staff.addTextBracket(modifier);
        return modifier;
    }
    static crescendo(fromSelection, toSelection) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin.defaults;
        params.startSelector = JSON.parse(JSON.stringify(fromSelection.selector));
        params.endSelector = JSON.parse(JSON.stringify(toSelection.selector));
        params.hairpinType = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin.types.CRESCENDO;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin(params);
        fromSelection.staff.addStaffModifier(modifier);
        return modifier;
    }
    static decrescendo(fromSelection, toSelection) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin.defaults;
        params.startSelector = JSON.parse(JSON.stringify(fromSelection.selector));
        params.endSelector = JSON.parse(JSON.stringify(toSelection.selector));
        params.hairpinType = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin.types.DECRESCENDO;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoStaffHairpin(params);
        fromSelection.staff.addStaffModifier(modifier);
        return modifier;
    }
    static tie(fromSelection, toSelection) {
        // By default, just tie all the pitches to all the other pitches in order
        const lines = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoTie.createLines(fromSelection.note, toSelection.note);
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoTie.defaults;
        params.startSelector = fromSelection.selector;
        params.endSelector = toSelection.selector;
        params.lines = lines;
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoTie(params);
        fromSelection.staff.addStaffModifier(modifier);
        return modifier;
    }
    static getSlurDefaultParameters(selections) {
        const lastIndex = selections.length - 1;
        const note1 = selections[0].note;
        const note2 = selections[lastIndex].note;
        const inners = [];
        let minLine = -1;
        let maxLine = 0;
        if (selections.length > 2) {
            for (var i = 1; i < selections.length - 1; ++i) {
                inners.push(selections[i]);
            }
        }
        if (note1 === null || note2 === null) {
            throw ('no note in slur selections');
        }
        const sameBeam = (note1.beam_group && note2.beam_group && note1.beam_group.id === note2.beam_group.id);
        const lineDifference = Math.abs(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(note1.clef, note1.pitches[0]) -
            _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(note2.clef, note2.pitches[0]));
    }
    /**
     * Heuristically determine how a slur should be formatted based on the notes.  Determine control points,
     * offset, and alignment
     *
     * ## Note: Vexflow slurs consider `top` to mean the furthest point from the note head, which could be the top
     * or the bottom of the note.  It also considers yoffset to be negative if inverted is set.  Head means close to the
     * note head.
     * @param score
     * @param fromSelection
     * @param toSelection
     * @returns
     */
    static getDefaultSlurDirection(score, fromSelector, toSelector, forcePosition, forceOrientation) {
        const params = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.defaults;
        const sels = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.order(fromSelector, toSelector);
        params.startSelector = JSON.parse(JSON.stringify(sels[0]));
        params.endSelector = JSON.parse(JSON.stringify(sels[1]));
        const fromSelection = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.noteFromSelector(score, fromSelector);
        if (!fromSelection) {
            return params;
        }
        // Get all selections within the slur
        const selections = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.innerSelections(score, sels[0], sels[1]).filter((ff) => ff.selector.voice === fromSelection.selector.voice);
        const dirs = {};
        const beamGroups = {};
        let startDir = _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up;
        let mixed = false;
        let endDir = _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up;
        let firstGap = 0;
        let lastGap = 0;
        if (selections.length < 1) {
            return new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur(params);
        }
        selections.forEach((selection, selectionIx) => {
            const note = selection.note;
            if (note.beam_group) {
                beamGroups[note.beam_group.id] = true;
            }
            else {
                beamGroups[note.attrs.id] = true;
            }
            // Find the gap between the first and second note, and also between last 2.  If they are far apart,
            // increase the control points so the slurs don't run into the notes
            if (selectionIx === 1) {
                const lastNote = selections[0].note;
                firstGap = Math.abs(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(note.clef, note.pitches[0]) -
                    _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(lastNote.clef, lastNote.pitches[0]));
            }
            if (selectionIx === selections.length - 2 && selections.length > 2) {
                const nextNote = selections[selectionIx + 1].note;
                lastGap = Math.abs(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(note.clef, note.pitches[0]) -
                    _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchToStaffLine(nextNote.clef, nextNote.pitches[0]));
            }
            const fstate = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.flagStateFromNote(note.clef, note);
            // Keep track of the number of stem directions, so we can determine if the flags are mixed direction
            // the rules are a little different for mixed - we always try to put the slur on (the real) top of the staff.
            dirs[fstate] = true;
            if (selectionIx === 0) {
                startDir = fstate;
            }
            if (selectionIx === selections.length - 1) {
                endDir = fstate;
            }
        });
        params.invert = false;
        mixed = Object.keys(dirs).length > 1;
        // If the notes are beamed together, we assume the beams point in the same direction
        if (Object.keys(beamGroups).length < 2) {
            mixed = false;
        }
        if (forcePosition === _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.ABOVE) {
            params.position = startDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.TOP : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
            params.position_end = endDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.TOP : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
            if (startDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up && forceOrientation !== _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.orientations.DOWN) {
                params.invert = true;
            }
        }
        else if (forcePosition === _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.BELOW) {
            params.position = startDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.TOP;
            params.position_end = endDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.TOP;
            if (startDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.down && forceOrientation !== _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.orientations.UP) {
                params.invert = true;
            }
        }
        else {
            if (mixed) {
                // special case: slur 2 notes, note heads close, connect the note heads
                // to keep a flat arc
                if (selections.length === 2 && firstGap < 3) {
                    params.position = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
                    params.position_end = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
                    params.xOffset = 5;
                }
                else {
                    params.position = startDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.TOP : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
                    params.position_end = endDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up ? _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.TOP : _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
                    if (firstGap >= 3 || lastGap >= 3) {
                        params.cp1y = 45;
                        params.cp2y = 45;
                    }
                }
                params.invert = endDir === _data_note__WEBPACK_IMPORTED_MODULE_2__.SmoNote.flagStates.up;
            }
            if (!mixed) {
                params.position = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
                params.position_end = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.HEAD;
                if (firstGap >= 2 || lastGap >= 2) {
                    params.cp1y = 45;
                    params.cp2y = 45;
                    params.yOffset += 10;
                }
                else {
                    params.yOffset += 10;
                }
            }
        }
        if (selections.length === 2) {
            params.xOffset = 0;
        }
        return params;
    }
    static slur(score, fromSelection, toSelection) {
        const params = SmoOperation.getDefaultSlurDirection(score, fromSelection.selector, toSelection.selector, _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.positions.AUTO, _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur.orientations.AUTO);
        const modifier = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoSlur(params);
        fromSelection.staff.addStaffModifier(modifier);
        return modifier;
    }
    static addStaff(score, parameters) {
        return score.addStaff(parameters);
    }
    static removeStaff(score, index) {
        score.removeStaff(index);
    }
    static transposeChords(smoNote, offset, key) {
        const chords = smoNote.getModifiers('SmoLyric');
        chords.forEach((ll) => {
            const lyric = ll;
            if (lyric.parser === _data_noteModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoLyric.parsers.chord) {
                const tx = lyric.getText();
                // Look for something that looks like a key name
                if (tx.length >= 1 && (tx[0].toUpperCase() >= 'A'
                    && tx[0].toUpperCase() <= 'G')) {
                    // toffset is 2 if the key has b or # in it
                    let toffset = 1;
                    let newText = tx[0];
                    if (tx.length > 0 && tx[1] === 'b' || tx[1] === '#') {
                        newText += tx[1];
                        toffset = 2;
                    }
                    // Transpose the key, as if it were a key signature (octave has no meaning)
                    let nkey = _data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoIntToPitch(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.smoPitchToInt(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.pitchKeyToPitch(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.vexToSmoKey(newText))) + offset);
                    nkey = JSON.parse(JSON.stringify(_data_music__WEBPACK_IMPORTED_MODULE_1__.SmoMusic.getEnharmonicInKey(nkey, key)));
                    newText = nkey.letter.toUpperCase();
                    // new key may have different length, e.g. Bb to B natural
                    if (nkey.accidental !== 'n') {
                        newText += nkey.accidental;
                    }
                    newText += tx.substr(toffset, tx.length - toffset);
                    lyric.setText(newText);
                }
            }
        });
    }
    /**
     * Compute new map based on current instrument selections, adjusting existing instruments as required
     * @param instrument
     * @param selections
     */
    static changeInstrument(instrument, selections) {
        const measureSel = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelection.getMeasureList(selections);
        const measureIndex = measureSel[0].selector.measure;
        const measureEnd = measureIndex + (measureSel.length - 1);
        instrument.startSelector = JSON.parse(JSON.stringify(measureSel[0].selector));
        instrument.endSelector = JSON.parse(JSON.stringify(measureSel[measureSel.length - 1].selector));
        const instMap = {};
        const staffArray = _data_systemStaff__WEBPACK_IMPORTED_MODULE_3__.SmoSystemStaff.getStaffInstrumentArray(measureSel[0].staff.measureInstrumentMap);
        instMap[measureIndex] = instrument;
        staffArray.forEach((ar) => {
            if (ar.instrument.endSelector.measure < measureIndex || ar.instrument.startSelector.measure > measureEnd) {
                // No overlap, juse use the original instrument
                instMap[ar.instrument.startSelector.measure] = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoInstrument(ar.instrument);
            }
            else if (ar.instrument.startSelector.measure < measureIndex) {
                // overlap on left
                const split1 = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoInstrument(ar.instrument);
                split1.startSelector.measure = ar.instrument.startSelector.measure;
                instMap[split1.startSelector.measure] = split1;
                split1.endSelector.measure = measureIndex - 1;
                if (ar.instrument.endSelector.measure > measureEnd) {
                    // overlap on left and right
                    const split2 = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoInstrument(ar.instrument);
                    split2.startSelector.measure = measureEnd + 1;
                    split2.endSelector.measure = ar.instrument.endSelector.measure;
                    instMap[split2.startSelector.measure] = split2;
                }
                instMap[ar.instrument.startSelector.measure] = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoInstrument(ar.instrument);
            }
            else if (ar.instrument.endSelector.measure > measureEnd) {
                // overlap on right only
                const split1 = new _data_staffModifiers__WEBPACK_IMPORTED_MODULE_6__.SmoInstrument(ar.instrument);
                split1.startSelector.measure = measureEnd + 1;
                instMap[split1.startSelector.measure] = split1;
            }
        });
        selections[0].staff.measureInstrumentMap = instMap;
        selections[0].staff.updateInstrumentOffsets();
    }
    static computeMultipartRest(score) {
        let i = 0;
        let j = 0;
        const measureRanges = {};
        const measureCount = score.staves[0].measures.length;
        if (score.staves[0].partInfo.expandMultimeasureRests === true) {
            return;
        }
        while (i < measureCount) {
            let forceRest = score.staves[0].measures[i].format.forceRest;
            if (score.isMultimeasureRest(i, true, forceRest)) {
                for (j = i + 1; j < measureCount; ++j) {
                    const restBreak = score.staves[0].measures[j].format.restBreak;
                    forceRest = score.staves[0].measures[j].format.forceRest;
                    if (!score.isMultimeasureRest(j, false, forceRest) || restBreak) {
                        break;
                    }
                }
                if (j - i >= 2) {
                    measureRanges[i] = j;
                }
                i = j;
            }
            else {
                const startMeasure = i;
                score.staves.forEach((staff) => {
                    staff.measures[startMeasure].svg.hideMultimeasure = false;
                });
                i += 1;
            }
        }
        const multiKeys = Object.keys(measureRanges).map((x) => parseInt(x, 10));
        multiKeys.forEach((key) => {
            const endMeasure = measureRanges[key];
            score.staves.forEach((staff) => {
                const mmLength = endMeasure - key;
                const svg = staff.measures[key].svg;
                svg.multimeasureLength = mmLength;
                if (svg.multimeasureLength > 1) {
                    svg.multimeasureEndBarline = staff.measures[endMeasure - 1].getEndBarline().barline;
                }
                staff.measures[key].svg.hideMultimeasure = false;
                for (i = key + 1; i < endMeasure; ++i) {
                    staff.measures[i].svg.hideMultimeasure = true;
                }
            });
        });
    }
}


/***/ }),

/***/ "./src/smo/xform/selections.ts":
/*!*************************************!*\
  !*** ./src/smo/xform/selections.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoSelection: () => (/* binding */ SmoSelection),
/* harmony export */   SmoSelector: () => (/* binding */ SmoSelector)
/* harmony export */ });
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");

/**
 * There are 2 parts to a selection: the actual musical bits that are selected, and the
 * indices that define what was selected.  This is the latter.  The actual object does not
 * have any methods so there is no constructor.
 * @category SmoTransform
 * */
class SmoSelector {
    constructor() {
        this.staff = 0;
        this.measure = 0;
        this.voice = 0;
        this.tick = -1;
        this.pitches = [];
    }
    static get default() {
        return {
            staff: 0,
            measure: 0,
            voice: 0,
            tick: -1,
            pitches: []
        };
    }
    static measureSelector(staff, measure) {
        return { staff, measure, voice: 0, tick: 0, pitches: [] };
    }
    // TODO:  tick in selector s/b tickIndex
    static sameNote(sel1, sel2) {
        return (sel1.staff === sel2.staff && sel1.measure === sel2.measure && sel1.voice === sel2.voice
            && sel1.tick === sel2.tick);
    }
    static sameMeasure(sel1, sel2) {
        return (sel1.staff === sel2.staff && sel1.measure === sel2.measure);
    }
    static sameStaff(sel1, sel2) {
        return sel1.staff === sel2.staff;
    }
    /**
     * Return gt, not considering the voice (e.g. gt in time)
     * @param sel1
     * @param sel2
     */
    static gtInTime(sel1, sel2) {
        return (sel1.measure > sel2.measure) ||
            (sel1.measure === sel2.measure && sel1.tick > sel2.tick);
    }
    // ## return true if sel1 > sel2.
    static gt(sel1, sel2) {
        // Note: voice is not considered b/c it's more of a vertical component
        // Note further: sometimes we need to consider voice
        return (sel1.staff > sel2.staff) ||
            (sel1.staff === sel2.staff && sel1.measure > sel2.measure) ||
            (sel1.staff === sel2.staff && sel1.measure === sel2.measure && sel1.voice > sel2.voice) ||
            (sel1.staff === sel2.staff && sel1.measure === sel2.measure && sel1.voice === sel2.voice && sel1.tick > sel2.tick);
    }
    static eq(sel1, sel2) {
        return (sel1.staff === sel2.staff && sel1.voice === sel2.voice && sel1.measure === sel2.measure && sel1.tick === sel2.tick);
    }
    static neq(sel1, sel2) {
        return !(SmoSelector.eq(sel1, sel2));
    }
    static lt(sel1, sel2) {
        return SmoSelector.gt(sel2, sel1);
    }
    static gteq(sel1, sel2) {
        return SmoSelector.gt(sel1, sel2) || SmoSelector.eq(sel1, sel2);
    }
    static lteq(sel1, sel2) {
        return SmoSelector.lt(sel1, sel2) || SmoSelector.eq(sel1, sel2);
    }
    // Return 2 selectors in score order, rv[0] is first in time.
    static order(a, b) {
        if (SmoSelector.gtInTime(a, b)) {
            return [b, a];
        }
        return [a, b];
    }
    // ### getNoteKey
    // Get a key useful for a hash map of notes.
    static getNoteKey(selector) {
        return '' + selector.staff + '-' + selector.measure + '-' + selector.voice + '-' + selector.tick;
    }
    static getMeasureKey(selector) {
        return '' + selector.staff + '-' + selector.measure;
    }
    // return true if testSel is contained in the selStart to selEnd range.
    static contains(testSel, selStart, selEnd) {
        const geStart = selStart.measure < testSel.measure ||
            (selStart.measure === testSel.measure && selStart.tick <= testSel.tick);
        const leEnd = selEnd.measure > testSel.measure ||
            (selEnd.measure === testSel.measure && testSel.tick <= selEnd.tick);
        return geStart && leEnd;
    }
    // create a hashmap key for a single note, used to organize modifiers
    static selectorNoteKey(selector) {
        return 'staff-' + selector.staff + '-measure-' + selector.measure + '-voice-' + selector.voice + '-tick-' + selector.tick;
    }
}
/**
 * A selection is a {@link SmoSelector} and a set of references to musical elements, like measure etc.
 * The staff and measure are always a part of the selection, and possible a voice and note,
 * and one or more pitches.  Selections can also be made from the UI by clicking on an element
 * or navigating to an element with the keyboard.
 * @category SmoTransform
 * */
class SmoSelection {
    // ### measureSelection
    // A selection that does not contain a specific note
    static measureSelection(score, staffIndex, measureIndex) {
        staffIndex = staffIndex !== null ? staffIndex : score.activeStaff;
        const selector = {
            staff: staffIndex,
            measure: measureIndex,
            voice: 0,
            tick: 0,
            pitches: []
        };
        if (score.staves.length <= staffIndex) {
            return null;
        }
        const staff = score.staves[staffIndex];
        if (staff.measures.length <= measureIndex) {
            return null;
        }
        const measure = staff.measures[measureIndex];
        return new SmoSelection({
            selector,
            _staff: staff,
            _measure: measure,
            type: 'measure'
        });
    }
    static measuresInColumn(score, staffIndex) {
        let i = 0;
        const rv = [];
        for (i = 0; i < score.staves.length; ++i) {
            const sel = SmoSelection.measureSelection(score, i, staffIndex);
            if (sel) {
                rv.push(sel);
            }
        }
        return rv;
    }
    // ### noteSelection
    // a selection that specifies a note in the score
    static noteSelection(score, staffIndex, measureIndex, voiceIndex, tickIndex) {
        staffIndex = staffIndex != null ? staffIndex : score.activeStaff;
        measureIndex = typeof (measureIndex) !== 'undefined' ? measureIndex : 0;
        voiceIndex = typeof (voiceIndex) !== 'undefined' ? voiceIndex : 0;
        const staff = score.staves[staffIndex];
        if (!staff) {
            return null;
        }
        const measure = staff.measures[measureIndex];
        if (!measure) {
            return null;
        }
        if (measure.voices.length <= voiceIndex) {
            return null;
        }
        if (measure.voices[voiceIndex].notes.length <= tickIndex) {
            return null;
        }
        const note = measure.voices[voiceIndex].notes[tickIndex];
        const selector = {
            staff: staffIndex,
            measure: measureIndex,
            voice: voiceIndex,
            tick: tickIndex,
            pitches: []
        };
        return new SmoSelection({
            selector,
            _staff: staff,
            _measure: measure,
            _note: note,
            _pitches: [],
            type: 'note'
        });
    }
    // ### noteFromSelector
    // return a selection based on the passed-in selector
    static noteFromSelector(score, selector) {
        return SmoSelection.noteSelection(score, selector.staff, selector.measure, selector.voice, selector.tick);
    }
    // ### selectionsToEnd
    // Select all the measures from startMeasure to the end of the score in the given staff.
    static selectionsToEnd(score, staff, startMeasure) {
        let i = 0;
        const rv = [];
        for (i = startMeasure; i < score.staves[staff].measures.length; ++i) {
            const selection = SmoSelection.measureSelection(score, staff, i);
            if (selection) {
                rv.push(selection);
            }
        }
        return rv;
    }
    // ### renderedNoteSelection
    // return the appropriate type of selection from the selector, based on the selector.
    static selectionFromSelector(score, selector) {
        if (typeof (selector.pitches) !== 'undefined' && selector.pitches.length) {
            return SmoSelection.pitchSelection(score, selector.staff, selector.measure, selector.voice, selector.tick, selector.pitches);
        }
        if (typeof (selector.tick) === 'number') {
            return SmoSelection.noteFromSelector(score, selector);
        }
        return SmoSelection.measureSelection(score, selector.staff, selector.measure);
    }
    static pitchSelection(score, staffIndex, measureIndex, voiceIndex, tickIndex, pitches) {
        staffIndex = staffIndex !== null ? staffIndex : score.activeStaff;
        measureIndex = typeof (measureIndex) !== 'undefined' ? measureIndex : 0;
        voiceIndex = typeof (voiceIndex) !== 'undefined' ? voiceIndex : 0;
        const staff = score.staves[staffIndex];
        const measure = staff.measures[measureIndex];
        const note = measure.voices[voiceIndex].notes[tickIndex];
        pitches = typeof (pitches) !== 'undefined' ? pitches : [];
        const pa = [];
        pitches.forEach((ix) => {
            pa.push(JSON.parse(JSON.stringify(note.pitches[ix])));
        });
        const selector = {
            staff: staffIndex,
            measure: measureIndex,
            voice: voiceIndex,
            tick: tickIndex,
            pitches
        };
        return new SmoSelection({
            selector,
            _staff: staff,
            _measure: measure,
            _note: note,
            _pitches: pa,
            type: 'pitches'
        });
    }
    /**
     * Return the selection that is tickCount ticks after the current selection.
     * @param score
     * @param selection
     * @param tickCount
     * @returns
     */
    static advanceTicks(score, selection, tickCount) {
        let rv = null;
        if (!selection.note) {
            return rv;
        }
        const staff = selection.staff;
        rv = SmoSelection.noteFromSelector(score, selection.selector);
        while (rv !== null && rv.note !== null && tickCount > 0) {
            const prevSelector = JSON.parse(JSON.stringify(rv.selector));
            const measureTicks = rv.measure.getMaxTicksVoice();
            const tickIx = rv.selector.tick;
            const voiceId = rv.measure.voices.length > rv.selector.voice ? rv.selector.voice : 0;
            // If the destination is more than a measure away, increment measure
            if (tickIx === 0 && tickCount >= measureTicks) {
                tickCount -= measureTicks;
                if (staff.measures.length > rv.selector.measure + 1) {
                    rv.selector.measure += 1;
                    rv.selector.tick = 0;
                    rv = SmoSelection.selectionFromSelector(score, rv.selector);
                }
            }
            else if (selection.measure.voices[voiceId].notes.length > tickIx + 1) {
                // else count the tick and advance to next tick
                tickCount -= rv.note.tickCount;
                rv.selector.tick += 1;
                rv = SmoSelection.selectionFromSelector(score, rv.selector);
            }
            else if (staff.measures.length > rv.selector.measure + 1) {
                // else advance to next measure and start counting ticks there
                tickCount -= rv.note.tickCount;
                rv.selector.measure += 1;
                rv.selector.tick = 0;
                rv = SmoSelection.selectionFromSelector(score, rv.selector);
            }
            if (rv !== null && SmoSelector.eq(prevSelector, rv.selector)) {
                // No progress, start and end the same
                break;
            }
        }
        return rv;
    }
    /**
     * Count the number of tick indices between selector 1 and selector 2;
     * @param score
     * @param sel1
     * @param sel2
     * @returns
     */
    static countTicks(score, sel1, sel2) {
        if (SmoSelector.eq(sel1, sel2)) {
            return 0;
        }
        const backwards = SmoSelector.gt(sel1, sel2);
        let ticks = 0;
        const startSelection = SmoSelection.selectionFromSelector(score, sel1);
        let endSelection = SmoSelection.selectionFromSelector(score, sel2);
        while (endSelection !== null && startSelection !== null) {
            if (SmoSelector.eq(startSelection.selector, endSelection.selector)) {
                break;
            }
            if (backwards) {
                endSelection = SmoSelection.nextNoteSelectionFromSelector(score, endSelection.selector);
                ticks -= 1;
            }
            else {
                endSelection = SmoSelection.lastNoteSelectionFromSelector(score, endSelection.selector);
                ticks += 1;
            }
        }
        return ticks;
    }
    // ## nextNoteSelection
    // ## Description:
    // Return the next note in this measure, or the first note of the next measure, if it exists.
    static nextNoteSelection(score, staffIndex, measureIndex, voiceIndex, tickIndex) {
        const nextTick = tickIndex + 1;
        const nextMeasure = measureIndex + 1;
        const staff = score.staves[staffIndex];
        const measure = staff.measures[measureIndex];
        if (measure.voices[voiceIndex].notes.length > nextTick) {
            return SmoSelection.noteSelection(score, staffIndex, measureIndex, voiceIndex, nextTick);
        }
        if (staff.measures.length > nextMeasure) {
            return SmoSelection.noteSelection(score, staffIndex, nextMeasure, voiceIndex, 0);
        }
        return null;
    }
    /**
     *
     * @param score
     * @param selector
     * @returns
     */
    static innerSelections(score, startSelector, endSelector) {
        const sels = SmoSelector.order(startSelector, endSelector);
        let start = JSON.parse(JSON.stringify(sels[0]));
        const rv = [];
        let cur = SmoSelection.selectionFromSelector(score, start);
        if (cur) {
            rv.push(cur);
        }
        while (cur && SmoSelector.lt(start, sels[1])) {
            cur = SmoSelection.nextNoteSelection(score, start.staff, start.measure, start.voice, start.tick);
            if (cur) {
                start = JSON.parse(JSON.stringify(cur.selector));
                rv.push(cur);
            }
        }
        return rv;
    }
    static nextNoteSelectionFromSelector(score, selector) {
        return SmoSelection.nextNoteSelection(score, selector.staff, selector.measure, selector.voice, selector.tick);
    }
    static lastNoteSelectionFromSelector(score, selector) {
        return SmoSelection.lastNoteSelection(score, selector.staff, selector.measure, selector.voice, selector.tick);
    }
    static lastNoteSelection(score, staffIndex, measureIndex, voiceIndex, tickIndex) {
        const lastTick = tickIndex - 1;
        const lastMeasure = measureIndex - 1;
        const staff = score.staves[staffIndex];
        let measure = staff.measures[measureIndex];
        if (tickIndex > 0) {
            return SmoSelection.noteSelection(score, staffIndex, measureIndex, voiceIndex, lastTick);
        }
        if (lastMeasure >= 0) {
            measure = staff.measures[lastMeasure];
            if (voiceIndex >= measure.voices.length) {
                return null;
            }
            const noteIndex = measure.voices[voiceIndex].notes.length - 1;
            return SmoSelection.noteSelection(score, staffIndex, lastMeasure, voiceIndex, noteIndex);
        }
        if (measureIndex === 0 && voiceIndex === 0 && tickIndex === 0) {
            return null;
        }
        return SmoSelection.noteSelection(score, staffIndex, 0, 0, 0);
    }
    // ### getMeasureList
    // Gets the list of measures in an array from the selections
    static getMeasureList(selections) {
        let i = 0;
        let cur = {};
        const rv = [];
        if (!selections.length) {
            return rv;
        }
        cur = selections[0].selector.measure;
        for (i = 0; i < selections.length; ++i) {
            const sel = selections[i];
            if (i === 0 || (sel.selector.measure !== cur)) {
                const _staff = sel._staff;
                const _measure = sel._measure;
                rv.push(new SmoSelection({
                    selector: {
                        staff: sel.selector.staff,
                        measure: sel.selector.measure,
                        voice: 0,
                        tick: 0,
                        pitches: []
                    },
                    _staff,
                    _measure
                }));
            }
            cur = sel.selector.measure;
        }
        return rv;
    }
    static getMeasuresBetween(score, fromSelector, toSelector) {
        let i = 0;
        const rv = [];
        if (fromSelector.staff !== toSelector.staff) {
            return rv;
        }
        for (i = fromSelector.measure; i <= toSelector.measure; ++i) {
            const sel = SmoSelection.measureSelection(score, fromSelector.staff, i);
            if (sel) {
                rv.push(sel);
            }
        }
        return rv;
    }
    // ### selectionsSameMeasure
    // Return true if the selections are all in the same measure.  Used to determine what
    // type of undo we need.
    static selectionsSameMeasure(selections) {
        let i = 0;
        if (selections.length < 2) {
            return true;
        }
        const sel1 = selections[0].selector;
        for (i = 1; i < selections.length; ++i) {
            if (!SmoSelector.sameMeasure(sel1, selections[i].selector)) {
                return false;
            }
        }
        return true;
    }
    static selectionsSameStaff(selections) {
        let i = 0;
        if (selections.length < 2) {
            return true;
        }
        const sel1 = selections[0].selector;
        for (i = 1; i < selections.length; ++i) {
            if (!SmoSelector.sameStaff(sel1, selections[i].selector)) {
                return false;
            }
        }
        return true;
    }
    constructor(params) {
        this.selector = {
            staff: 0,
            measure: 0,
            voice: 0,
            tick: -1,
            pitches: []
        };
        this._pitches = [];
        this.box = null;
        this.scrollBox = null;
        this.selector = {
            staff: 0,
            measure: 0,
            voice: 0,
            tick: 0,
            pitches: []
        };
        this._staff = params._staff;
        this._measure = params._measure;
        this._note = null;
        this._pitches = [];
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_0__.smoSerialize.vexMerge(this, params);
    }
    get staff() {
        return this._staff;
    }
    get measure() {
        return this._measure;
    }
    get note() {
        return this._note;
    }
    get pitches() {
        return this.selector.pitches;
    }
}


/***/ }),

/***/ "./src/smo/xform/tickDuration.ts":
/*!***************************************!*\
  !*** ./src/smo/xform/tickDuration.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoContractNoteActor: () => (/* binding */ SmoContractNoteActor),
/* harmony export */   SmoContractTupletActor: () => (/* binding */ SmoContractTupletActor),
/* harmony export */   SmoDuration: () => (/* binding */ SmoDuration),
/* harmony export */   SmoMakeTupletActor: () => (/* binding */ SmoMakeTupletActor),
/* harmony export */   SmoStretchNoteActor: () => (/* binding */ SmoStretchNoteActor),
/* harmony export */   SmoTickIterator: () => (/* binding */ SmoTickIterator),
/* harmony export */   SmoUnmakeTupletActor: () => (/* binding */ SmoUnmakeTupletActor),
/* harmony export */   TickIteratorBase: () => (/* binding */ TickIteratorBase)
/* harmony export */ });
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_tuplet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/tuplet */ "./src/smo/data/tuplet.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



/**
 * Abstract class for classes that modifiy duration.
 * @param note the note we're iterating over
 * @param tickmap the tickmap for the measure
 * @param index the index into the tickmap
 * @returns the note or notes that replace this one.  Null if this note is no longer in the measure
 */
class TickIteratorBase {
    // es
    iterateOverTick(note, tickmap, index) {
        return null;
    }
}
/**
 * SmoDuration: change the duration of a note, maybe at the expense of some
 * other note.
 * @category SmoTransform
 */
class SmoDuration {
    /**
     * doubleDurationNonTuplet
     * double the duration of the selection, consuming the next note or
     * possibly split it in half and consume that.  Simple operation so
     * do it inline
     * @param selection
     * @returns
     */
    static doubleDurationNonTuplet(selection) {
        const note = selection === null || selection === void 0 ? void 0 : selection.note;
        const measure = selection.measure;
        if (note === null) {
            return;
        }
        const selector = selection.selector;
        const voices = measure === null || measure === void 0 ? void 0 : measure.voices;
        const voice = voices[selector.voice];
        const notes = voice === null || voice === void 0 ? void 0 : voice.notes;
        let i = 0;
        const nticks = { numerator: note.tickCount * 2, denominator: 1, remainder: 0 };
        const replNote = _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.cloneWithDuration(note, nticks);
        let ticksUsed = note.tickCount;
        const newNotes = [];
        for (i = 0; i < selector.tick; ++i) {
            newNotes.push(notes[i]);
        }
        for (i = selector.tick + 1; i < notes.length; ++i) {
            const nnote = notes[i];
            ticksUsed += nnote.tickCount;
            if (ticksUsed >= nticks.numerator) {
                break;
            }
        }
        const remainder = ticksUsed - nticks.numerator;
        if (remainder < 0) {
            return;
        }
        newNotes.push(replNote);
        if (remainder > 0) {
            const lmap = _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.gcdMap(remainder);
            lmap.forEach((duration) => {
                newNotes.push(_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.cloneWithDuration(note, duration));
            });
        }
        for (i = i + 1; i < notes.length; ++i) {
            newNotes.push(notes[i]);
        }
        // If any tuplets got removed while extending the notes,
        voice.notes = newNotes;
        const measureTuplets = [];
        const allTuplets = measure === null || measure === void 0 ? void 0 : measure.tuplets;
        allTuplets === null || allTuplets === void 0 ? void 0 : allTuplets.forEach((tuplet) => {
            const testNotes = measure === null || measure === void 0 ? void 0 : measure.tupletNotes(tuplet);
            if ((testNotes === null || testNotes === void 0 ? void 0 : testNotes.length) === tuplet.notes.length) {
                measureTuplets.push(tuplet);
            }
        });
        measure.tuplets = measureTuplets;
    }
    /**
     * double duration, tuplet form.  Increase the first selection and consume the
     * following note.  Also a simple operation
     * @param selection
     * @returns
     */
    static doubleDurationTuplet(selection) {
        let i = 0;
        const measure = selection.measure;
        const note = selection === null || selection === void 0 ? void 0 : selection.note;
        if (note === null) {
            return;
        }
        const notes = measure.voices[selection.selector.voice].notes;
        const tuplet = measure.getTupletForNote(note);
        if (tuplet === null) {
            return;
        }
        const startIndex = selection.selector.tick - tuplet.startIndex;
        const startLength = tuplet.notes.length;
        tuplet.combine(startIndex, startIndex + 1);
        if (tuplet.notes.length >= startLength) {
            return;
        }
        const newNotes = [];
        for (i = 0; i < tuplet.startIndex; ++i) {
            newNotes.push(notes[i]);
        }
        tuplet.notes.forEach((note) => {
            newNotes.push(note);
        });
        for (i = i + tuplet.notes.length + 1; i < notes.length; ++i) {
            newNotes.push(notes[i]);
        }
        measure.voices[selection.selector.voice].notes = newNotes;
    }
}
/**
 * SmoTickIterator
 * this is a local helper class that follows a pattern of iterating of the notes.  Most of the
 * duration changers iterate over a selection, and return:
 * - A note, if the duration changes
 * - An array of notes, if the notes split
 * - null if the note stays the same
 * - empty array, remove the note from the group
 * @category SmoTransform
 */
class SmoTickIterator {
    constructor(measure, actor, voiceIndex) {
        this.notes = [];
        this.newNotes = [];
        this.voice = 0;
        this.notes = measure.voices[voiceIndex].notes;
        this.measure = measure;
        this.voice = typeof (voiceIndex) === 'number' ? voiceIndex : 0;
        this.newNotes = [];
        // eslint-disable-next-line
        this.actor = actor;
        this.keySignature = 'C';
    }
    static nullActor(note) {
        return note;
    }
    /**
     *
     * @param measure {SmoMeasure}
     * @param actor {}
     * @param voiceIndex
     */
    static iterateOverTicks(measure, actor, voiceIndex) {
        measure.clearBeamGroups();
        const transformer = new SmoTickIterator(measure, actor, voiceIndex);
        transformer.run();
        measure.voices[voiceIndex].notes = transformer.notes;
    }
    // ### transformNote
    // call the actors for each note, and put the result in the note array.
    // The note from the original array is copied and sent to each actor.
    //
    // Because the resulting array can have a different number of notes than the existing
    // array, the actors communicate with the transformer in the following, jquery-ish
    // but somewhat unintuitive way:
    //
    // 1. if the actor returns null, the next actor is called and the results of that actor are used
    // 2. if all the actors return null, the copy is used.
    // 3. if a note object is returned, that is used for the current tick and no more actors are called.
    // 4. if an array of notes is returned, it is concatenated to the existing note array and no more actors are called.
    //     Note that *return note;* and *return [note];* produce the same result.
    // 5. if an empty array [] is returned, that copy is not added to the result.  The note is effectively deleted.
    iterateOverTick(tickmap, index, note) {
        const actor = this.actor;
        const newNote = actor.iterateOverTick(note, tickmap, index);
        if (newNote === null) {
            this.newNotes.push(note); // no change
            return note;
        }
        if (Array.isArray(newNote)) {
            if (newNote.length === 0) {
                return null;
            }
            this.newNotes = this.newNotes.concat(newNote);
            return null;
        }
        this.newNotes.push(newNote);
        return null;
    }
    run() {
        let i = 0;
        const tickmap = this.measure.tickmapForVoice(this.voice);
        for (i = 0; i < tickmap.durationMap.length; ++i) {
            this.iterateOverTick(tickmap, i, this.measure.voices[this.voice].notes[i]);
        }
        this.notes = this.newNotes;
        return this.newNotes;
    }
}
/**
 * Contract the duration of a note, filling in the space with another note
 * or rest.
 * @category SmoTransform
 * */
class SmoContractNoteActor extends TickIteratorBase {
    constructor(params) {
        super();
        this.startIndex = params.startIndex;
        this.measure = params.measure;
        this.voice = params.voice;
        this.tickmap = this.measure.tickmapForVoice(this.voice);
        this.newTicks = params.newTicks;
    }
    static apply(params) {
        const actor = new SmoContractNoteActor(params);
        SmoTickIterator.iterateOverTicks(actor.measure, actor, actor.voice);
    }
    iterateOverTick(note, tickmap, index) {
        let i = 0;
        if (index === this.startIndex) {
            const notes = [];
            const noteCount = Math.floor(note.ticks.numerator / this.newTicks);
            let remainder = note.ticks.numerator;
            /**
             *  Replace 1 note with noteCOunt notes of newTIcks duration
             *      old map:
             *     d  .  d  .  .
             *     new map:
             *     d  d  d  .  .
             */
            for (i = 0; i < noteCount; ++i) {
                // first note, retain modifiers so clone.  Otherwise just
                // retain pitches
                if (i === 0) {
                    const nn = _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.clone(note);
                    nn.ticks = { numerator: this.newTicks, denominator: 1, remainder: 0 };
                    notes.push(nn);
                }
                else {
                    const nnote = new _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote(_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.defaults);
                    nnote.clef = note.clef;
                    nnote.pitches = JSON.parse(JSON.stringify(note.pitches));
                    nnote.ticks = { numerator: this.newTicks, denominator: 1, remainder: 0 };
                    nnote.beamBeats = note.beamBeats;
                    notes.push(nnote);
                }
                remainder = remainder - this.newTicks;
            }
            // make sure remnainder is not too short
            if (remainder > 0) {
                if (remainder < 128) {
                    return null;
                }
                const nnote = new _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote(_data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.defaults);
                nnote.clef = note.clef;
                nnote.pitches = JSON.parse(JSON.stringify(note.pitches));
                nnote.ticks = { numerator: remainder, denominator: 1, remainder: 0 };
                nnote.beamBeats = note.beamBeats;
                notes.push(nnote);
            }
            return notes;
        }
        return null;
    }
}
/**
 * Shrink the duration of a note in a tuplet by creating additional notes
 * @category SmoTransform
 */
class SmoContractTupletActor extends TickIteratorBase {
    constructor(params) {
        super();
        this.oldLength = 0;
        this.tupletIndex = 0;
        this.splitIndex = 0;
        this.changeIndex = params.changeIndex;
        this.measure = params.measure;
        this.voice = params.voice;
        this.tuplet = this.measure.getTupletForNote(this.measure.voices[this.voice].notes[this.changeIndex]);
        if (this.tuplet === null) {
            return;
        }
        this.oldLength = this.tuplet.notes.length;
        this.tupletIndex = this.measure.tupletIndex(this.tuplet);
        this.splitIndex = this.changeIndex - this.tupletIndex;
        this.tuplet.split(this.splitIndex);
    }
    static apply(params) {
        const actor = new SmoContractTupletActor(params);
        SmoTickIterator.iterateOverTicks(actor.measure, actor, actor.voice);
    }
    iterateOverTick(note, tickmap, index) {
        if (this.tuplet === null) {
            return null;
        }
        if (index < this.tupletIndex) {
            return note;
        }
        if (index >= this.tupletIndex + this.oldLength) {
            return note;
        }
        if (index === this.changeIndex) {
            return this.tuplet.notes;
        }
        return [];
    }
}
/**
 * Convert a tuplet into a single note that takes up the whole duration
 * @category SmoTransform
 */
class SmoUnmakeTupletActor extends TickIteratorBase {
    constructor(parameters) {
        super();
        this.startIndex = 0;
        this.endIndex = 0;
        this.startIndex = parameters.startIndex;
        this.endIndex = parameters.endIndex;
        this.measure = parameters.measure;
        this.voice = parameters.voice;
    }
    static apply(params) {
        const actor = new SmoUnmakeTupletActor(params);
        SmoTickIterator.iterateOverTicks(actor.measure, actor, actor.voice);
    }
    iterateOverTick(note, tickmap, index) {
        if (index < this.startIndex || index > this.endIndex) {
            return null;
        }
        if (index === this.startIndex) {
            const tuplet = this.measure.getTupletForNote(note);
            if (tuplet === null) {
                return [];
            }
            const ticks = tuplet.totalTicks;
            const nn = _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.cloneWithDuration(note, { numerator: ticks, denominator: 1, remainder: 0 });
            nn.tuplet = {};
            this.measure.removeTupletForNote(note);
            return [nn];
        }
        return [];
    }
}
/**
 * Turn a tuplet into a non-tuplet of the same length
 * @category SmoTransform
 *
 * */
class SmoMakeTupletActor extends TickIteratorBase {
    constructor(params) {
        let i = 0;
        super();
        this.measure = params.measure;
        this.numNotes = params.numNotes;
        this.durationMap = [];
        this.totalTicks = params.totalTicks;
        this.voice = params.voice;
        this.index = params.index;
        for (i = 0; i < this.numNotes; ++i) {
            this.durationMap.push(1.0);
        }
        this.stemTicks = _data_tuplet__WEBPACK_IMPORTED_MODULE_1__.SmoTuplet.calculateStemTicks(this.totalTicks, this.numNotes);
        this.rangeToSkip = this._rangeToSkip();
        this.tuplet = [];
    }
    static apply(params) {
        const actor = new SmoMakeTupletActor(params);
        SmoTickIterator.iterateOverTicks(actor.measure, actor, actor.voice);
    }
    _rangeToSkip() {
        let i = 0;
        if (this.measure === null) {
            return [];
        }
        const ticks = this.measure.tickmapForVoice(this.voice);
        let accum = 0;
        const rv = [];
        rv.push(this.index);
        for (i = 0; i < ticks.deltaMap.length; ++i) {
            if (i >= this.index) {
                accum += ticks.deltaMap[i];
            }
            if (accum >= this.totalTicks) {
                rv.push(i);
                break;
            }
        }
        return rv;
    }
    iterateOverTick(note, tickmap, index) {
        let i = 0;
        // if our tuplet replaces this note, make sure we make it go away.
        if (index > this.index && index <= this.rangeToSkip[1]) {
            return [];
        }
        if (this.measure === null) {
            return [];
        }
        if (index !== this.index) {
            return null;
        }
        for (i = 0; i < this.numNotes; ++i) {
            note = _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.cloneWithDuration(note, { numerator: this.stemTicks, denominator: 1, remainder: 0 });
            // Don't clone modifiers, except for first one.
            note.textModifiers = i === 0 ? note.textModifiers : [];
            this.tuplet.push(note);
        }
        const tuplet = new _data_tuplet__WEBPACK_IMPORTED_MODULE_1__.SmoTuplet({
            notes: this.tuplet,
            stemTicks: this.stemTicks,
            totalTicks: this.totalTicks,
            ratioed: false,
            bracketed: true,
            startIndex: index,
            durationMap: this.durationMap,
            voice: tickmap.voice,
            numNotes: this.numNotes
        });
        this.measure.tuplets.push(tuplet);
        return this.tuplet;
    }
}
/**
 * increase the length of a note, removing future notes in the measure as required
 * @category SmoTransform
 */
class SmoStretchNoteActor extends TickIteratorBase {
    constructor(params) {
        let mapIx = 0;
        let i = 0;
        super();
        this.startIndex = params.startIndex;
        this.measure = params.measure;
        this.voice = params.voice;
        this.tickmap = this.measure.tickmapForVoice(this.voice);
        this.newTicks = params.newTicks;
        this.startTick = this.tickmap.durationMap[this.startIndex];
        const currentTicks = this.tickmap.deltaMap[this.startIndex];
        const endTick = this.tickmap.durationMap[this.startIndex] + this.newTicks;
        this.divisor = -1;
        this.durationMap = [];
        this.skipFromStart = this.startIndex + 1;
        this.skipFromEnd = this.startIndex + 1;
        this.durationMap.push(this.newTicks);
        mapIx = this.tickmap.durationMap.indexOf(endTick);
        const remaining = this.tickmap.deltaMap.slice(this.startIndex, this.tickmap.durationMap.length).reduce((accum, x) => x + accum);
        if (remaining === this.newTicks) {
            mapIx = this.tickmap.deltaMap.length;
        }
        // If there is no tickable at the end point, try to split the next note
        /**
         *      old map:
         *     d  . d  .
         *     split map:
         *     d  .  d  d
         *     new map:
         *     d .   .  d
         */
        if (mapIx < 0) {
            const ndelta = this.tickmap.deltaMap[this.startIndex + 1];
            const needed = this.newTicks - currentTicks;
            const exp = ndelta / needed;
            // Next tick does not divide evenly into this, or next tick is shorter than this
            if (Math.round(ndelta / exp) - ndelta / exp !== 0 || ndelta < 256) {
                this.durationMap = [];
            }
            else if (ndelta / exp + this.startTick + this.newTicks <= this.tickmap.totalDuration) {
                this.durationMap.push(ndelta - (ndelta / exp));
            }
            else {
                // there is no way to do this...
                this.durationMap = [];
            }
        }
        else {
            // If this note now takes up the space of other notes, remove those notes
            for (i = this.startIndex + 1; i < mapIx; ++i) {
                this.durationMap.push(0);
            }
        }
    }
    static apply(params) {
        const actor = new SmoStretchNoteActor(params);
        SmoTickIterator.iterateOverTicks(actor.measure, actor, actor.voice);
    }
    iterateOverTick(note, tickmap, index) {
        if (this.durationMap.length === 0) {
            return null;
        }
        if (index >= this.startIndex && index < this.startIndex + this.durationMap.length) {
            const mapIndex = index - this.startIndex;
            const ticks = this.durationMap[mapIndex];
            if (ticks === 0) {
                return [];
            }
            note = _data_note__WEBPACK_IMPORTED_MODULE_0__.SmoNote.cloneWithDuration(note, { numerator: ticks, denominator: 1, remainder: 0 });
            return [note];
        }
        return null;
    }
}


/***/ }),

/***/ "./src/smo/xform/tickMap.ts":
/*!**********************************!*\
  !*** ./src/smo/xform/tickMap.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TickMap: () => (/* binding */ TickMap)
/* harmony export */ });
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


/**
 * create a map note durations at each index into the voice, including the accidentals at each duration.
 * return format:
 * ```
   tickmap = {
          totalDuration: 16384,
          durationMap:[2048,4096,..],  // A running total per tick
            deltaMap:[2048,2048...], a map of deltas
 ```
 * @category SmoTransform
 */
class TickMap {
    constructor(measure, voiceIndex) {
        this.notes = [];
        this.index = 0;
        this.startIndex = 0;
        this.endIndex = 0;
        // duration is the accumulated duraition over all the notes
        this.totalDuration = 0;
        // delta is the tick contribution of this note
        this.delta = 0;
        // the absolute tick start location of notes[x]
        this.durationMap = [];
        // the relative duration if each tick slot
        this.deltaMap = [];
        // An array of active accidentals for each tick index
        this.accidentalMap = [];
        // a map of active accidentals, indexed by duration index
        this.durationAccidentalMap = {};
        this.keySignature = measure.keySignature;
        this.voice = voiceIndex;
        if (measure.voices.length <= this.voice) {
            console.warn('tickmap for invalid voice');
            return;
        }
        this.notes = measure.voices[this.voice].notes;
        this.endIndex = this.notes.length;
        this.createMap();
    }
    // ### _getAccidentalsForKey
    // Update `map` with the correct accidental based on the key signature.
    _getAccidentalsForKey(map) {
        const music = new _common_vex__WEBPACK_IMPORTED_MODULE_1__.VexFlow.Music();
        const keys = music.createScaleMap(this.keySignature);
        const keyKeys = Object.keys(keys);
        keyKeys.forEach((keyKey) => {
            const vexKey = keys[keyKey];
            if (vexKey.length > 1 && (vexKey[1] === 'b' || vexKey[1] === '#')) {
                const pitch = {
                    letter: vexKey[0],
                    accidental: vexKey[1],
                    octave: 4
                };
                map[vexKey[0]] = {
                    duration: 0,
                    pitch
                };
            }
        });
    }
    // ### updateAccidentalMap
    // Keep a running tally of the accidentals for this voice
    // based on the key and previous accidentals.
    updateAccidentalMap(note) {
        let i = 0;
        let sigObj = {};
        const newObj = {};
        if (this.index === 0) {
            this._getAccidentalsForKey(newObj);
            sigObj = newObj;
        }
        else {
            sigObj = this.accidentalMap[this.index - 1];
        }
        for (i = 0; i < note.pitches.length; ++i) {
            if (note.noteType !== 'n') {
                continue;
            }
            const pitch = note.pitches[i];
            const pitchOctave = pitch.letter.toLowerCase() + '-' + pitch.octave;
            const sigLetter = pitchOctave + pitch.accidental;
            const sigKey = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.getKeySignatureKey(pitch.letter, this.keySignature);
            if (sigObj && sigObj[pitchOctave]) {
                const curObj = sigObj[pitchOctave];
                const currentVal = curObj.pitch.letter.toLowerCase() + '-' + curObj.pitch.octave + curObj.pitch.accidental;
                if (sigLetter !== currentVal) {
                    newObj[pitchOctave] = { pitch, duration: this.duration };
                }
            }
            else {
                if (sigLetter !== sigKey) {
                    newObj[pitchOctave] = { pitch, duration: this.duration };
                }
            }
        }
        this.accidentalMap.push(newObj);
        // Mark the accidental with the start of this note.
        this.durationAccidentalMap[this.durationMap[this.index]] = newObj;
    }
    // ### getActiveAccidental
    // return the active accidental for the given note
    getActiveAccidental(pitch, iteratorIndex, keySignature) {
        let defaultAccidental = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.getKeySignatureKey(pitch.letter, keySignature);
        let i = 0;
        let j = 0;
        defaultAccidental = defaultAccidental.length > 1 ? defaultAccidental[1] : 'n';
        if (iteratorIndex === 0) {
            return defaultAccidental;
        }
        // Back up the accidental map until we have a match, or until we run out
        for (i = iteratorIndex; i > 0; --i) {
            const map = this.accidentalMap[i - 1];
            const mapKeys = Object.keys(map);
            for (j = 0; j < mapKeys.length; ++j) {
                const mapKey = mapKeys[j];
                // The letter name + accidental in the map
                const mapPitch = map[mapKey].pitch;
                const mapAcc = mapPitch.accidental ? mapPitch.accidental : 'n';
                // if the letters match and the accidental...
                if (mapPitch.letter.toLowerCase() === pitch.letter) {
                    return mapAcc;
                }
            }
        }
        return defaultAccidental;
    }
    get duration() {
        return this.totalDuration;
    }
    createMap() {
        for (this.index = this.startIndex; this.index < this.endIndex; ++this.index) {
            const note = this.notes[this.index];
            // save the starting point, tickwise
            this.durationMap.push(this.totalDuration);
            // the number of ticks for this note
            this.delta = (note.ticks.numerator / note.ticks.denominator) + note.ticks.remainder;
            this.deltaMap.push(this.delta);
            // update the tick count for the whole array/measure
            this.totalDuration += this.delta;
            this.updateAccidentalMap(note);
        }
    }
}


/***/ }),

/***/ "./src/smo/xform/toVex.ts":
/*!********************************!*\
  !*** ./src/smo/xform/toVex.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoToVex: () => (/* binding */ SmoToVex),
/* harmony export */   createBeamGroups: () => (/* binding */ createBeamGroups),
/* harmony export */   createColumn: () => (/* binding */ createColumn),
/* harmony export */   createMeasure: () => (/* binding */ createMeasure),
/* harmony export */   createMeasureModifiers: () => (/* binding */ createMeasureModifiers),
/* harmony export */   createStaveNote: () => (/* binding */ createStaveNote),
/* harmony export */   createTuplets: () => (/* binding */ createTuplets),
/* harmony export */   fontStacks: () => (/* binding */ fontStacks),
/* harmony export */   getVoiceId: () => (/* binding */ getVoiceId),
/* harmony export */   lastNoteInSystem: () => (/* binding */ lastNoteInSystem),
/* harmony export */   renderModifier: () => (/* binding */ renderModifier),
/* harmony export */   renderModifiers: () => (/* binding */ renderModifiers),
/* harmony export */   renderVoltas: () => (/* binding */ renderVoltas),
/* harmony export */   smoNoteToGraceNotes: () => (/* binding */ smoNoteToGraceNotes),
/* harmony export */   smoNoteToStaveNote: () => (/* binding */ smoNoteToStaveNote),
/* harmony export */   smoNoteToVexKeys: () => (/* binding */ smoNoteToVexKeys)
/* harmony export */ });
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _data_note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _data_score__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/vex */ "./src/common/vex.ts");
/* harmony import */ var _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _selections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _data_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/common */ "./src/smo/data/common.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.








const VF = _common_vex__WEBPACK_IMPORTED_MODULE_4__.VexFlow;
const fontStacks = {
    Bravura: ['"Bravura"', '"Gonville"', '"Custom"'],
    Gonville: ['"Gonville"', '"Bravura"', '"Custom"'],
    Petaluma: ['"Petaluma"', '"Bravura"', '"Gonville"', '"Custom"'],
    Leland: ['"Leland"', '"Bravura"', '"Gonville"', '"Custom"']
};
function smoNoteToVexKeys(smoNote) {
    const noteHead = smoNote.isRest() ? 'r' : smoNote.noteHead;
    const keys = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.smoPitchesToVexKeys(smoNote.pitches, 0, noteHead);
    return keys;
}
function smoNoteToGraceNotes(smoNote, strs) {
    const gar = smoNote.getGraceNotes();
    var toBeam = true;
    if (gar && gar.length) {
        const grGroup = [];
        gar.forEach((g) => {
            const grid = g.attrs.id;
            const args = JSON.stringify(g.toVexGraceNote());
            strs.push(`const ${grid} = new VF.GraceNote(JSON.parse('${args}'))`);
            strs.push(`${grid}.setAttribute('id', '${grid}');`);
            for (var i = 0; i < g.pitches.length; ++i) {
                const pitch = g.pitches[i];
                if (!pitch.accidental) {
                    console.warn('no accidental in grace note');
                }
                if (pitch.accidental && pitch.accidental !== 'n' || pitch.cautionary) {
                    const acid = 'acc' + i.toString() + grid;
                    strs.push(`const ${acid} = new VF.Accidental('${pitch.accidental}');`);
                    if (pitch.cautionary) {
                        strs.push(`${acid}.setAsCautionary();`);
                    }
                    strs.push(`${grid}.addModifier(${acid}, ${i})`);
                }
            }
            if (g.tickCount() >= 4096) {
                toBeam = false;
            }
            grGroup.push(grid);
        });
        const ggid = 'ggrp' + smoNote.attrs.id;
        const grString = '[' + grGroup.join(',') + ']';
        strs.push(`const ${ggid} = new VF.GraceNoteGroup(${grString});`);
        if (toBeam) {
            strs.push(`${ggid}.beamNotes();`);
        }
        strs.push(`${smoNote.attrs.id}.addModifier(${ggid}, 0);`);
    }
}
function smoNoteToStaveNote(smoNote) {
    const duration = smoNote.isTuplet ?
        _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.closestVexDuration(smoNote.tickCount) :
        _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.ticksToDuration[smoNote.tickCount];
    const sn = {
        clef: smoNote.clef,
        duration,
        dots: smoNote.dots,
        type: smoNote.noteType
    };
    if (smoNote.flagState !== _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.auto) {
        sn.stem_direction = smoNote.flagState === _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.up ? 1 : -1;
        sn.auto_stem = false;
    }
    else {
        sn.auto_stem = true;
    }
    sn.keys = smoNoteToVexKeys(smoNote);
    return sn;
}
const getVoiceId = (smoMeasure, voiceIx) => {
    return smoMeasure.attrs.id + 'v' + voiceIx.toString();
};
function lastNoteInSystem(smoScore, selection) {
    let rv = selection;
    let next = null;
    next = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelection.nextNoteSelection(smoScore, selection.selector.staff, selection.selector.measure, selection.selector.voice, selection.selector.tick);
    while (next) {
        if (next.measure.svg.rowInSystem !== selection.measure.svg.rowInSystem) {
            return rv;
            break;
        }
        rv = next;
        next = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelection.nextNoteSelection(smoScore, next.selector.staff, next.selector.measure, next.selector.voice, next.selector.tick);
    }
    return rv;
}
function createMeasureModifiers(smoMeasure, strs) {
    const sb = smoMeasure.getStartBarline();
    const eb = smoMeasure.getEndBarline();
    const sym = smoMeasure.getRepeatSymbol();
    const vxStave = 'stave' + smoMeasure.attrs.id;
    if (smoMeasure.measureNumber.systemIndex !== 0 && sb.barline === _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoBarline.barlines.singleBar
        && smoMeasure.format.padLeft === 0) {
        strs.push(`${vxStave}.setBegBarType(VF.Barline.type.NONE);`);
    }
    else {
        strs.push(`${vxStave}.setBegBarType(${sb.toVexBarline()});`);
    }
    if (smoMeasure.svg.multimeasureLength > 0 && !smoMeasure.svg.hideMultimeasure) {
        const bl = _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoBarline.toVexBarline[smoMeasure.svg.multimeasureEndBarline];
        strs.push(`${vxStave}.setEndBarType(${bl});`);
    }
    else if (eb.barline !== _data_measureModifiers__WEBPACK_IMPORTED_MODULE_5__.SmoBarline.barlines.singleBar) {
        const bl = eb.toVexBarline();
        strs.push(`${vxStave}.setEndBarType(${bl});`);
    }
    if (smoMeasure.svg.rowInSystem === 0) {
        const rmb = smoMeasure.getRehearsalMark();
        const rm = rmb;
        if (rm) {
            strs.push(`${vxStave}.setSection('${rm.symbol}', 0);`);
        }
    }
    const tempo = smoMeasure.getTempo();
    if (tempo && smoMeasure.svg.forceTempo) {
        const vexTempo = tempo.toVexTempo();
        const tempoString = JSON.stringify(vexTempo);
        strs.push(`${vxStave}.setTempo(JSON.parse('${tempoString}'), -1 * ${tempo.yOffset});`);
    }
}
function renderVoltas(smoScore, startMeasure, endMeasure, strs) {
    const voltas = smoScore.staves[0].getVoltaMap(startMeasure, endMeasure);
    for (var i = 0; i < voltas.length; ++i) {
        const ending = voltas[i];
        for (var j = ending.startBar; j <= ending.endBar; ++j) {
            const smoMeasure = smoScore.staves[0].measures[j];
            const vtype = ending.toVexVolta(smoMeasure.measureNumber.measureIndex);
            const vx = smoMeasure.staffX + ending.xOffsetStart;
            const vxStave = 'stave' + smoMeasure.attrs.id;
            const endingName = ending.attrs.id + smoMeasure.attrs.id;
            strs.push(`const ${endingName} = new VF.Volta(${vtype}, '${ending.number.toString()}', ${vx}, ${ending.yOffset});`);
            strs.push(`${endingName}.setContext(context).draw(${vxStave}, -1 * ${ending.xOffsetEnd});`);
        }
    }
}
function renderModifier(modifier, startNote, endNote, strs) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const modifierName = (0,_data_common__WEBPACK_IMPORTED_MODULE_7__.getId)();
    const startKey = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.getNoteKey(modifier.startSelector);
    const endKey = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelector.getNoteKey(modifier.endSelector);
    strs.push(`// modifier from ${startKey} to ${endKey}`);
    if (modifier.ctor === 'SmoStaffHairpin' && startNote && endNote) {
        const hp = modifier;
        const vxStart = startNote.attrs.id;
        const vxEnd = startNote.attrs.id;
        const hpParams = { first_note: vxStart, last_note: vxEnd };
        strs.push(`const ${modifierName} = new VF.StaveHairpin({ first_note: ${vxStart}, last_note: ${vxEnd},
       firstNote: ${vxStart}, lastNote: ${vxEnd} });`);
        strs.push(`${modifierName}.setRenderOptions({ height: ${hp.height}, y_shift: ${hp.yOffset}, left_shift_px: ${hp.xOffsetLeft},right_shift_px: ${hp.xOffsetRight} });`);
        strs.push(`${modifierName}.setContext(context).setPosition(${hp.position}).draw();`);
    }
    else if (modifier.ctor === 'SmoSlur') {
        const slur = modifier;
        const vxStart = (_b = (_a = startNote === null || startNote === void 0 ? void 0 : startNote.attrs) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : 'null';
        const vxEnd = (_d = (_c = endNote === null || endNote === void 0 ? void 0 : endNote.attrs) === null || _c === void 0 ? void 0 : _c.id) !== null && _d !== void 0 ? _d : 'null';
        const svgPoint = JSON.parse(JSON.stringify(slur.controlPoints));
        let slurX = 0;
        if (startNote === null || endNote === null) {
            slurX = -5;
            svgPoint[0].y = 10;
            svgPoint[1].y = 10;
        }
        if (modifier.startSelector.staff === modifier.endSelector.staff) {
            const hpParams = {
                thickness: slur.thickness,
                xShift: slurX,
                yShift: slur.yOffset,
                cps: svgPoint,
                invert: slur.invert,
                position: slur.position,
                positionEnd: slur.position_end
            };
            const paramStrings = JSON.stringify(hpParams);
            strs.push(`const ${modifierName} = new VF.Curve(${vxStart}, ${vxEnd}, JSON.parse('${paramStrings}'));`);
            strs.push(`${modifierName}.setContext(context).draw();`);
        }
    }
    else if (modifier.ctor === 'SmoTie') {
        const ctie = modifier;
        const vxStart = (_f = (_e = startNote === null || startNote === void 0 ? void 0 : startNote.attrs) === null || _e === void 0 ? void 0 : _e.id) !== null && _f !== void 0 ? _f : 'null';
        const vxEnd = (_h = (_g = endNote === null || endNote === void 0 ? void 0 : endNote.attrs) === null || _g === void 0 ? void 0 : _g.id) !== null && _h !== void 0 ? _h : 'null';
        // TODO: handle case of overlap
        if (modifier.startSelector.staff === modifier.endSelector.staff) {
            if (ctie.lines.length > 0) {
                // Hack: if a chord changed, the ties may no longer be valid.  We should check
                // this when it changes.
                const fromLines = ctie.lines.map((ll) => ll.from);
                const toLines = ctie.lines.map((ll) => ll.to);
                strs.push(`const ${modifierName} = new VF.StaveTie({ first_note: ${vxStart}, last_note: ${vxEnd}, 
          firstNote: ${vxStart}, lastNote: ${vxEnd}, first_indices: [${fromLines}], last_indices: [${toLines}]});`);
                strs.push(`${modifierName}.setContext(context).draw();`);
            }
        }
    }
    else if (modifier.ctor === 'SmoStaffTextBracket' && startNote && endNote) {
        const ctext = modifier;
        const vxStart = startNote.attrs.id;
        const vxEnd = endNote.attrs.id;
        if (vxStart && vxEnd) {
            strs.push(`const ${modifierName} = new VF.TextBracket({ start: ${vxStart}, stop: ${vxEnd}, text: '${ctext.text}', position: ${ctext.position} });`);
            strs.push(`${modifierName}.setLine(${ctext.line}).setContext(context).draw();`);
        }
    }
}
function renderModifiers(smoScore, staff, startMeasure, endMeasure, strs) {
    const modifiers = staff.renderableModifiers.filter((mm) => mm.startSelector.measure >= startMeasure && mm.endSelector.measure <= endMeasure);
    modifiers.forEach((modifier) => {
        const startNote = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelection.noteSelection(smoScore, modifier.startSelector.staff, modifier.startSelector.measure, modifier.startSelector.voice, modifier.startSelector.tick);
        const endNote = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelection.noteSelection(smoScore, modifier.endSelector.staff, modifier.endSelector.measure, modifier.endSelector.voice, modifier.endSelector.tick);
        // TODO: handle case of multiple line slur/tie
        if (startNote && startNote.note && endNote && endNote.note) {
            if (endNote.measure.svg.lineIndex !== startNote.measure.svg.lineIndex) {
                const endFirst = lastNoteInSystem(smoScore, startNote);
                if (endFirst && endFirst.note) {
                    const startLast = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelection.noteSelection(smoScore, endNote.selector.staff, endNote.selector.measure, 0, 0);
                    if (startLast && startLast.note) {
                        renderModifier(modifier, startNote.note, null, strs);
                        renderModifier(modifier, null, endNote.note, strs);
                    }
                }
            }
            else {
                renderModifier(modifier, startNote.note, endNote.note, strs);
            }
        }
    });
}
function createStaveNote(renderInfo, key, row, strs) {
    const { smoNote, voiceIx, noteIx, tickmapObject, lyricAdj } = Object.assign({}, renderInfo);
    const id = smoNote.attrs.id;
    const ctorInfo = smoNoteToStaveNote(smoNote);
    const ctorString = JSON.stringify(ctorInfo);
    if (smoNote.noteType === '/') {
        strs.push(`const ${id} = new VF.GlyphNote(new VF.Glyph('repeatBarSlash', 40), { duration: '${ctorInfo.duration}' });`);
    }
    else {
        strs.push(`const ${id} = new VF.StaveNote(JSON.parse('${ctorString}'))`);
    }
    smoNoteToGraceNotes(smoNote, strs);
    strs.push(`${id}.setAttribute('id', '${id}');`);
    if (smoNote.fillStyle) {
        strs.push(`${id}.setStyle({ fillStyle: '${smoNote.fillStyle}' });`);
    }
    else if (voiceIx > 0) {
        strs.push(`${id}.setStyle({ fillStyle: "#115511" });`);
    }
    else if (smoNote.isHidden()) {
        strs.push(`${id}.setStyle({ fillStyle: "#ffffff00" });`);
    }
    if (smoNote.noteType === 'n') {
        smoNote.pitches.forEach((pitch, ix) => {
            const zz = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.accidentalDisplay(pitch, key, tickmapObject.tickmaps[voiceIx].durationMap[noteIx], tickmapObject.accidentalArray);
            if (zz) {
                const aname = id + ix.toString() + 'acc';
                strs.push(`const ${aname} = new VF.Accidental('${zz.symbol}');`);
                if (zz.courtesy) {
                    strs.push(`${aname}.setAsCautionary();`);
                }
                strs.push(`${id}.addModifier(${aname}, ${ix});`);
            }
        });
    }
    for (var i = 0; i < smoNote.dots; ++i) {
        for (var j = 0; j < smoNote.pitches.length; ++j) {
            strs.push(`${id}.addModifier(new VF.Dot(), ${j});`);
        }
    }
    smoNote.articulations.forEach((aa) => {
        const position = _data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.positionToVex[aa.position];
        const vexArt = _data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoArticulation.articulationToVex[aa.articulation];
        const sn = (0,_data_common__WEBPACK_IMPORTED_MODULE_7__.getId)();
        strs.push(`const  ${sn} = new VF.Articulation('${vexArt}').setPosition(${position});`);
        strs.push(`${id}.addModifier(${sn}, 0);`);
    });
    smoNote.getJazzOrnaments().forEach((ll) => {
        const vexCode = ll.toVex();
        strs.push(`const ${ll.attrs.id} = new VF.Ornament('${vexCode}');`);
        strs.push(`${id}.addModifier(${ll.attrs.id}, 0);`);
    });
    smoNote.getOrnaments().forEach((ll) => {
        const vexCode = _common_vex__WEBPACK_IMPORTED_MODULE_4__.vexOrnaments[ll.ornament];
        strs.push(`const ${ll.attrs.id} = new VF.Ornament('${vexCode}');`);
        if (ll.offset === _data_noteModifiers__WEBPACK_IMPORTED_MODULE_3__.SmoOrnament.offsets.after) {
            strs.push(`${ll.attrs.id}.setDelayed(true);`);
        }
        strs.push(`${id}.addModifier(${ll.attrs.id}, 0);`);
    });
    const lyrics = smoNote.getTrueLyrics();
    if (smoNote.noteType !== '/') {
        lyrics.forEach((bll) => {
            var _a;
            const ll = bll;
            let classString = 'lyric lyric-' + ll.verse;
            let text = ll.getText();
            if (!ll.skipRender) {
                if (!text.length && ll.isHyphenated()) {
                    text = '-';
                }
                // no text, no hyphen, don't add it.
                if (text.length) {
                    const sn = ll.attrs.id;
                    text = text.replace("'", "\\'");
                    strs.push(`const ${sn} = new VF.Annotation('${text}');`);
                    strs.push(`${sn}.setAttribute('id', '${sn}');`);
                    const weight = (_a = ll.fontInfo.weight) !== null && _a !== void 0 ? _a : 'normal';
                    strs.push(`${sn}.setFont('${ll.fontInfo.family}', ${ll.fontInfo.size}, '${weight}');`);
                    strs.push(`${sn}.setVerticalJustification(VF.Annotation.VerticalJustify.BOTTOM);`);
                    strs.push(`${id}.addModifier(${sn});`);
                    if (ll.adjY > 0) {
                        const adjy = Math.round(ll.adjY);
                        lyricAdj.push(`context.svg.getElementById('vf-${sn}').setAttributeNS('', 'transform', 'translate(0 ${adjy})');`);
                    }
                    if (ll.isHyphenated()) {
                        classString += ' lyric-hyphen';
                    }
                    strs.push(`${sn}.addClass('${classString}');`);
                }
            }
        });
    }
    const chords = smoNote.getChords();
    chords.forEach((chord) => {
        strs.push(`const ${chord.attrs.id} = new VF.ChordSymbol();`);
        strs.push(`${chord.attrs.id}.setAttribute('id', '${chord.attrs.id}');`);
        const vblocks = chord.getVexChordBlocks();
        vblocks.forEach((vblock) => {
            var _a;
            const glyphParams = JSON.stringify(vblock);
            if (vblock.glyph) {
                strs.push(`${chord.attrs.id}.addGlyphOrText('${vblock.glyph}', JSON.parse('${glyphParams}'));`);
            }
            else {
                const btext = (_a = vblock.text) !== null && _a !== void 0 ? _a : '';
                if (btext.trim().length) {
                    strs.push(`${chord.attrs.id}.addGlyphOrText('${btext}', JSON.parse('${glyphParams}'));`);
                }
            }
        });
        strs.push(`${chord.attrs.id}.setFont('${chord.fontInfo.family}', ${chord.fontInfo.size}).setReportWidth(${chord.adjustNoteWidth});`);
        strs.push(`${id}.addModifier(${chord.attrs.id}, 0);`);
    });
    return id;
}
function createColumn(groups, strs) {
    const groupKeys = Object.keys(groups);
    groupKeys.forEach((groupKey) => {
        const music = groups[groupKey];
        // Need to create beam groups before formatting
        strs.push(`// create beam groups and tuplets for format grp ${groupKey} before formatting`);
        music.measures.forEach((smoMeasure) => {
            createBeamGroups(smoMeasure, strs);
            createTuplets(smoMeasure, strs);
        });
        strs.push(' ');
        strs.push(`// formatting measures in staff group ${groupKey}`);
        const joinVoiceStr = '[' + music.voiceStrings.join(',') + ']';
        const widthMeasure = music.measures[0];
        const staffWidth = Math.round(widthMeasure.staffWidth -
            (widthMeasure.svg.adjX + widthMeasure.svg.adjRight + widthMeasure.format.padLeft) - 10);
        strs.push(`${music.formatter}.format(${joinVoiceStr}, ${staffWidth});`);
        music.measures.forEach((smoMeasure) => {
            createMeasure(smoMeasure, music.heightOffset, strs);
        });
    });
}
function createBeamGroups(smoMeasure, strs) {
    smoMeasure.voices.forEach((voice, voiceIx) => {
        const bgs = smoMeasure.beamGroups.filter((bb) => bb.voice === voiceIx);
        for (var i = 0; i < bgs.length; ++i) {
            const bg = bgs[i];
            let keyNoteIx = bg.notes.findIndex((nn) => nn.noteType === 'n');
            keyNoteIx = (keyNoteIx >= 0) ? keyNoteIx : 0;
            const sdName = 'dir' + bg.attrs.id;
            strs.push(`const ${sdName} = ${bg.notes[keyNoteIx].attrs.id}.getStemDirection();`);
            const nar = [];
            for (var j = 0; j < bg.notes.length; ++j) {
                const note = bg.notes[j];
                const vexNote = `${note.attrs.id}`;
                if (note.noteType !== '/') {
                    nar.push(vexNote);
                }
                if (note.noteType !== 'n') {
                    continue;
                }
                strs.push(`${vexNote}.setStemDirection(${sdName});`);
            }
            const narString = '[' + nar.join(',') + ']';
            strs.push(`const ${bg.attrs.id} = new VF.Beam(${narString});`);
        }
    });
}
function createTuplets(smoMeasure, strs) {
    smoMeasure.voices.forEach((voice, voiceIx) => {
        const tps = smoMeasure.tuplets.filter((tp) => tp.voice === voiceIx);
        for (var i = 0; i < tps.length; ++i) {
            const tp = tps[i];
            const nar = [];
            for (var j = 0; j < tp.notes.length; ++j) {
                const note = tp.notes[j];
                const vexNote = `${note.attrs.id}`;
                nar.push(vexNote);
            }
            const direction = tp.getStemDirection(smoMeasure.clef) === _data_note__WEBPACK_IMPORTED_MODULE_1__.SmoNote.flagStates.up ?
                VF.Tuplet.LOCATION_TOP : VF.Tuplet.LOCATION_BOTTOM;
            const tpParams = {
                num_notes: tp.num_notes,
                notes_occupied: tp.notes_occupied,
                ratioed: false,
                bracketed: true,
                location: direction
            };
            const tpParamString = JSON.stringify(tpParams);
            const narString = '[' + nar.join(',') + ']';
            strs.push(`const ${tp.attrs.id} = new VF.Tuplet(${narString}, JSON.parse('${tpParamString}'));`);
        }
    });
}
function createMeasure(smoMeasure, heightOffset, strs) {
    const ssid = 'stave' + smoMeasure.attrs.id;
    const staffY = smoMeasure.svg.staffY + heightOffset;
    const staffWidth = Math.round(smoMeasure.svg.staffWidth);
    strs.push(`const ${ssid} = new VF.Stave(${smoMeasure.svg.staffX}, ${staffY}, ${staffWidth});`);
    strs.push(`${ssid}.setAttribute('id', '${ssid}');`);
    createMeasureModifiers(smoMeasure, strs);
    if (smoMeasure.svg.forceClef) {
        strs.push(`${ssid}.addClef('${smoMeasure.clef}');`);
    }
    if (smoMeasure.svg.forceTimeSignature) {
        const ts = smoMeasure.timeSignature;
        let tsString = ts.timeSignature;
        if (smoMeasure.timeSignature.useSymbol && ts.actualBeats === 4 && ts.beatDuration === 4) {
            tsString = 'C';
        }
        else if (smoMeasure.timeSignature.useSymbol && ts.actualBeats === 2 && ts.beatDuration === 4) {
            tsString = 'C|';
        }
        else if (smoMeasure.timeSignature.displayString.length) {
            tsString = smoMeasure.timeSignature.displayString;
        }
        strs.push(`${ssid}.addTimeSignature('${tsString}');`);
    }
    if (smoMeasure.svg.forceKeySignature) {
        const key = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySignatureTranspose(smoMeasure.keySignature, 0);
        const ksid = 'key' + smoMeasure.attrs.id;
        strs.push(`const ${ksid} = new VF.KeySignature('${key}');`);
        if (smoMeasure.canceledKeySignature) {
            const canceledKey = _data_music__WEBPACK_IMPORTED_MODULE_0__.SmoMusic.vexKeySignatureTranspose(smoMeasure.canceledKeySignature, 0);
            strs.push(`${ksid}.cancelKey('${canceledKey}');`);
        }
        strs.push(`${ksid}.addToStave(${ssid});`);
    }
    strs.push(`${ssid}.setContext(context);`);
    strs.push(`${ssid}.draw();`);
    smoMeasure.voices.forEach((voice, voiceIx) => {
        const vs = getVoiceId(smoMeasure, voiceIx);
        strs.push(`${vs}.draw(context, ${ssid});`);
    });
    smoMeasure.beamGroups.forEach((bg) => {
        strs.push(`${bg.attrs.id}.setContext(context);`);
        strs.push(`${bg.attrs.id}.draw();`);
    });
    smoMeasure.tuplets.forEach((tp) => {
        strs.push(`${tp.attrs.id}.setContext(context).draw();`);
    });
}
// ## SmoToVex
// Simple serialize class that produced VEX note and voice objects
// for vex EasyScore (for easier bug reports and test cases)
class SmoToVex {
    static convert(smoScore, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        let div = 'boo';
        let page = 0;
        options = options !== null && options !== void 0 ? options : {};
        if (typeof (options['div']) === 'string') {
            div = options.div;
        }
        if (typeof (options['page']) === 'number') {
            page = options.page;
        }
        let startMeasure = -1;
        let endMeasure = -1;
        const strs = [];
        const pageHeight = (_b = (_a = smoScore.layoutManager) === null || _a === void 0 ? void 0 : _a.getGlobalLayout().pageHeight) !== null && _b !== void 0 ? _b : 1056;
        const pageWidth = (_d = (_c = smoScore.layoutManager) === null || _c === void 0 ? void 0 : _c.getGlobalLayout().pageWidth) !== null && _d !== void 0 ? _d : 816;
        const pageLength = smoScore.staves[0].measures[smoScore.staves[0].measures.length - 1].svg.pageIndex + 1;
        let scoreName = smoScore.scoreInfo.title + ' p ' + (page + 1).toString() + '/' + pageLength.toString();
        const scoreSub = ((_e = smoScore.scoreInfo.subTitle) === null || _e === void 0 ? void 0 : _e.length) ? `(${smoScore.scoreInfo.subTitle})` : '';
        scoreName = `${scoreName} ${scoreSub} by ${smoScore.scoreInfo.composer}`;
        strs.push(`// @@ ${scoreName}`);
        strs.push('function main() {');
        strs.push('// create the div and svg element for the music');
        strs.push(`const div = document.getElementById('${div}');`);
        strs.push('const VF = Vex.Flow;');
        strs.push(`const renderer = new VF.Renderer(div, VF.Renderer.Backends.SVG);`);
        const zoomScale = ((_g = (_f = smoScore.layoutManager) === null || _f === void 0 ? void 0 : _f.getZoomScale()) !== null && _g !== void 0 ? _g : 1.0);
        const svgScale = ((_j = (_h = smoScore.layoutManager) === null || _h === void 0 ? void 0 : _h.getGlobalLayout().svgScale) !== null && _j !== void 0 ? _j : 1.0);
        const width = zoomScale * pageWidth;
        const height = zoomScale * pageHeight;
        const scale = svgScale * zoomScale;
        const heightOffset = -1 * (height * page) / scale;
        const vbWidth = Math.round(width / scale);
        const vbHeight = Math.round(height / scale);
        strs.push('const context = renderer.getContext();');
        strs.push('const svg = context.svg');
        strs.push(`svg.setAttributeNS('', 'width', '${width}');`);
        strs.push(`svg.setAttributeNS('', 'height', '${height}');`);
        strs.push(`svg.setAttributeNS('', 'viewBox', '0 0 ${vbWidth} ${vbHeight}');`);
        strs.push('//');
        strs.push('// create the musical objects');
        const font = smoScore.fonts.find((x) => x.purpose === _data_score__WEBPACK_IMPORTED_MODULE_2__.SmoScore.fontPurposes.ENGRAVING);
        if (font) {
            const fs = fontStacks[font.family].join(',');
            strs.push(`VF.setMusicFont(${fs});`);
        }
        const measureCount = smoScore.staves[0].measures.length;
        const lyricAdj = [];
        for (var k = 0; k < measureCount; ++k) {
            const groupMap = {};
            if (smoScore.staves[0].measures[k].svg.pageIndex < page) {
                continue;
            }
            if (smoScore.staves[0].measures[k].svg.pageIndex > page) {
                break;
            }
            startMeasure = startMeasure < 0 ? k : startMeasure;
            endMeasure = Math.max(k, endMeasure);
            smoScore.staves.forEach((smoStaff, staffIx) => {
                const smoMeasure = smoStaff.measures[k];
                const selection = _selections__WEBPACK_IMPORTED_MODULE_6__.SmoSelection.measureSelection(smoScore, smoStaff.staffId, smoMeasure.measureNumber.measureIndex);
                if (!selection) {
                    throw ('ouch no selection');
                }
                const systemGroup = smoScore.getSystemGroupForStaff(selection);
                const justifyGroup = (systemGroup && smoMeasure.format.autoJustify) ? systemGroup.attrs.id : selection.staff.attrs.id;
                const tickmapObject = smoMeasure.createMeasureTickmaps();
                const measureIx = smoMeasure.measureNumber.measureIndex;
                const voiceStrings = [];
                const fmtid = 'fmt' + smoMeasure.attrs.id + measureIx.toString();
                strs.push(`const ${fmtid} = new VF.Formatter();`);
                if (!groupMap[justifyGroup]) {
                    groupMap[justifyGroup] = {
                        formatter: fmtid,
                        measures: [],
                        heightOffset,
                        voiceStrings: [],
                        systemGroup
                    };
                }
                groupMap[justifyGroup].measures.push(smoMeasure);
                strs.push('//');
                strs.push(`// voices and notes for stave ${smoStaff.staffId} ${smoMeasure.measureNumber.measureIndex}`);
                smoMeasure.voices.forEach((smoVoice, voiceIx) => {
                    const vn = getVoiceId(smoMeasure, voiceIx);
                    groupMap[justifyGroup].voiceStrings.push(vn);
                    const vc = vn + 'ar';
                    const ts = JSON.stringify({
                        numBeats: smoMeasure.timeSignature.actualBeats,
                        beatValue: smoMeasure.timeSignature.beatDuration
                    });
                    strs.push(`const ${vn} = new VF.Voice(JSON.parse('${ts}')).setMode(VF.Voice.Mode.SOFT);`);
                    strs.push(`const ${vc} = [];`);
                    smoVoice.notes.forEach((smoNote, noteIx) => {
                        const renderInfo = { smoNote, voiceIx, noteIx, tickmapObject, lyricAdj };
                        const noteId = createStaveNote(renderInfo, smoMeasure.keySignature, smoMeasure.svg.rowInSystem, strs);
                        strs.push(`${vc}.push(${noteId});`);
                    });
                    strs.push(`${vn}.addTickables(${vc})`);
                    voiceStrings.push(vn);
                    strs.push(`${fmtid}.joinVoices([${vn}]);`);
                });
                if (smoMeasure.svg.rowInSystem === smoScore.staves.length - 1) {
                    createColumn(groupMap, strs);
                    const mapKeys = Object.keys(groupMap);
                    mapKeys.forEach((mapKey) => {
                        const tmpGroup = groupMap[mapKey];
                        if (tmpGroup.systemGroup) {
                            const systemIndex = smoMeasure.measureNumber.systemIndex;
                            const startMeasure = 'stave' + smoScore.staves[tmpGroup.systemGroup.startSelector.staff].measures[k].attrs.id;
                            const endMeasure = 'stave' + smoScore.staves[tmpGroup.systemGroup.endSelector.staff].measures[k].attrs.id;
                            const leftConnector = tmpGroup.systemGroup.leftConnectorVx();
                            const rightConnector = tmpGroup.systemGroup.rightConnectorVx();
                            const jgname = justifyGroup + startMeasure + staffIx.toString();
                            if (systemIndex === 0 && smoScore.staves.length > 1) {
                                strs.push(`const left${jgname} = new VF.StaveConnector(${startMeasure}, ${endMeasure}).setType(${leftConnector});`);
                                strs.push(`left${jgname}.setContext(context).draw();`);
                            }
                            let endStave = false;
                            if (smoMeasure.measureNumber.systemIndex !== 0) {
                                if (smoMeasure.measureNumber.systemIndex === smoScore.staves[0].measures.length - 1) {
                                    endStave = true;
                                }
                                else if (smoScore.staves[0].measures.length > k + 1 &&
                                    smoScore.staves[0].measures[k + 1].measureNumber.systemIndex === 0) {
                                    endStave = true;
                                }
                            }
                            if (endStave) {
                                strs.push(`const right${jgname} = new VF.StaveConnector(${startMeasure}, ${endMeasure}).setType(${rightConnector});`);
                                strs.push(`right${jgname}.setContext(context).draw();`);
                            }
                        }
                    });
                }
            });
        }
        smoScore.staves.forEach((staff) => {
            renderModifiers(smoScore, staff, startMeasure, endMeasure, strs);
        });
        renderVoltas(smoScore, startMeasure, endMeasure, strs);
        if (lyricAdj.length) {
            strs.push('// ');
            strs.push('// Align lyrics on different measures, once they are rendered.');
        }
        const render = strs.concat(lyricAdj);
        render.push('}');
        return render.join(`\n`);
        // console.log(render.join(`\n`));
    }
}


/***/ }),

/***/ "./src/smo/xform/undo.ts":
/*!*******************************!*\
  !*** ./src/smo/xform/undo.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoUndoable: () => (/* binding */ SmoUndoable),
/* harmony export */   UndoBuffer: () => (/* binding */ UndoBuffer),
/* harmony export */   copyUndo: () => (/* binding */ copyUndo)
/* harmony export */ });
/* harmony import */ var _data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _data_systemStaff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _data_music__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operations */ "./src/smo/xform/operations.ts");
/* harmony import */ var _data_score__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _data_measure__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
/* harmony import */ var _data_scoreText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _selections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./selections */ "./src/smo/xform/selections.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.









function copyUndo(entry) {
    const obj = {
        title: entry.title,
        type: entry.type,
        selector: entry.selector,
        subtype: entry.subtype,
        grouped: entry.grouped,
        firstInGroup: entry.firstInGroup,
        json: undefined
    };
    if (entry.json) {
        obj.json = JSON.parse(JSON.stringify(entry.json));
    }
    return obj;
}
/**
 * manage a set of undo or redo operations on a score.  The objects passed into
 * undo must implement serialize()/deserialize()
 *
 * ## Buffer format:
 * A buffer is one of 7 things:
 * * A single measure,
 * * A single staff
 *  * the whole score
 *  * a score modifier (text)
 *  * score attributes (layout, etc)
 *  * column - all the measures at one index
 *  * rectangle - a rectangle of measures
 * @category SmoTransform
 * */
class UndoBuffer {
    static get bufferMax() {
        return 100;
    }
    static get bufferTypes() {
        return {
            FIRST: 1,
            MEASURE: 1, STAFF: 2, SCORE: 3, SCORE_MODIFIER: 4, COLUMN: 5, RECTANGLE: 6,
            SCORE_ATTRIBUTES: 7, STAFF_MODIFIER: 8, LAST: 8
        };
    }
    static get bufferSubtypes() {
        return {
            NONE: 0, ADD: 1, REMOVE: 2, UPDATE: 3
        };
    }
    static get bufferTypeLabel() {
        return ['INVALID', 'MEASURE', 'STAFF', 'SCORE', 'SCORE_MODIFIER', 'COLUMN', 'RECTANGLE',
            'SCORE_ATTRIBUTES', 'STAFF_MODIFIER'];
    }
    // ### serializeMeasure
    // serialize a measure, preserving the column-mapped bits which aren't serialized on a full score save.
    static serializeMeasure(measure) {
        const json = measure.serialize();
        const columnMapped = measure.serializeColumnMapped();
        Object.keys(columnMapped).forEach((key) => {
            json[key] = columnMapped[key];
        });
        return json;
    }
    constructor() {
        this.buffer = [];
        this.reconcile = -1;
        this.buffer = [];
        this.opCount = 0;
        this._grouping = false;
    }
    get grouping() {
        return this._grouping;
    }
    // Allows a set of operations to be bunched into a single group
    set grouping(val) {
        if (this._grouping === true && val === false) {
            const buf = this.peek();
            // If we have been grouping, indicate that the last buffer is the
            // fist part of a group
            if (buf) {
                buf.firstInGroup = true;
            }
        }
        this._grouping = val;
    }
    reset() {
        this.buffer = [];
    }
    // ### addBuffer
    // Description:
    // Add the current state of the score required to undo the next operation we
    // are about to perform.  For instance, if we are adding a crescendo, we back up the
    // staff the crescendo will go on.
    addBuffer(title, type, selector, obj, subtype) {
        let i = 0;
        let j = 0;
        if (typeof (type) !== 'number' || type < UndoBuffer.bufferTypes.FIRST || type > UndoBuffer.bufferTypes.LAST) {
            throw 'Undo failure: illegal buffer type ' + type;
        }
        const undoObj = {
            title,
            type,
            selector,
            subtype,
            grouped: this._grouping,
            firstInGroup: false
        };
        if (type === UndoBuffer.bufferTypes.RECTANGLE) {
            // RECTANGLE obj is {score, topLeft, bottomRight}
            // where the last 2 are selectors
            const measures = [];
            for (i = obj.topLeft.staff; i <= obj.bottomRight.staff; ++i) {
                for (j = obj.topLeft.measure; j <= obj.bottomRight.measure; ++j) {
                    measures.push(UndoBuffer.serializeMeasure(obj.score.staves[i].measures[j]));
                }
            }
            undoObj.json = { topLeft: JSON.parse(JSON.stringify(obj.topLeft)),
                bottomRight: JSON.parse(JSON.stringify(obj.bottomRight)),
                measures };
        }
        else if (type === UndoBuffer.bufferTypes.SCORE_ATTRIBUTES) {
            undoObj.json = {};
            _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.serializedMerge(_data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore.preferences, obj, undoObj.json);
        }
        else if (type === UndoBuffer.bufferTypes.COLUMN) {
            // COLUMN obj is { score, measureIndex }
            const ix = obj.measureIndex;
            const measures = [];
            obj.score.staves.forEach((staff) => {
                measures.push(UndoBuffer.serializeMeasure(staff.measures[ix]));
            });
            undoObj.json = { measureIndex: ix, measures };
        }
        else if (type === UndoBuffer.bufferTypes.MEASURE) {
            // If this is a measure, preserve the column-mapped attributes
            undoObj.json = UndoBuffer.serializeMeasure(obj);
        }
        else if (type === UndoBuffer.bufferTypes.SCORE_MODIFIER ||
            type === UndoBuffer.bufferTypes.STAFF_MODIFIER) {
            // score modifier, already serialized
            undoObj.json = obj;
        }
        else {
            // staff or score or staffModifier
            undoObj.json = obj.serialize();
        }
        if (this.buffer.length >= UndoBuffer.bufferMax) {
            this.buffer.splice(0, 1);
        }
        this.opCount += 1;
        this.buffer.push(undoObj);
    }
    // ### _pop
    // ### Description:
    // Internal method to pop the top buffer off the stack.
    _pop() {
        if (this.buffer.length < 1) {
            return null;
        }
        const buf = this.buffer.pop();
        return buf;
    }
    // ## Before undoing, peek at the top action in the q
    // so it can be re-rendered
    peek() {
        if (this.buffer.length < 1) {
            return null;
        }
        return this.buffer[this.buffer.length - 1];
    }
    peekIndex(index) {
        if (this.buffer.length - index < 1) {
            return null;
        }
        return this.buffer[this.buffer.length - (1 + index)];
    }
    // ## undo
    // ## Description:
    // Undo the operation at the top of the undo stack.  This is done by replacing
    // the music as it existed before the change was made.
    undo(score, staffMap, pop) {
        var _a;
        let i = 0;
        let j = 0;
        let mix = 0;
        let buf = null;
        let peekIndex = 0;
        if (pop) {
            buf = this._pop();
        }
        else {
            buf = this.peekIndex(peekIndex);
            if (buf) {
                buf = copyUndo(buf);
            }
        }
        if (!buf) {
            return score;
        }
        const grouping = buf.firstInGroup;
        while (buf) {
            if (buf.type === UndoBuffer.bufferTypes.RECTANGLE) {
                for (i = buf.json.topLeft.staff; i <= buf.json.bottomRight.staff; ++i) {
                    for (j = buf.json.topLeft.measure; j <= buf.json.bottomRight.measure; ++j) {
                        const measure = _data_measure__WEBPACK_IMPORTED_MODULE_5__.SmoMeasure.deserialize(buf.json.measures[mix]);
                        mix += 1;
                        const selector = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default;
                        if (typeof (staffMap[i]) === 'number') {
                            selector.staff = staffMap[i];
                            measure.measureNumber.staffId = staffMap[i];
                            selector.measure = j;
                            score.replaceMeasure(selector, measure);
                        }
                    }
                }
            }
            else if (buf.type === UndoBuffer.bufferTypes.STAFF_MODIFIER) {
                const modifier = _data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.StaffModifierBase.deserialize(buf.json);
                if (typeof (staffMap[modifier.startSelector.staff]) === 'number') {
                    const staff = score.staves[staffMap[modifier.startSelector.staff]];
                    const existing = staff.getModifier(modifier);
                    if (existing) {
                        staff.removeStaffModifier(existing);
                    }
                    // If we undo an add, we just remove it.
                    if (buf.subtype !== UndoBuffer.bufferSubtypes.ADD) {
                        if (modifier.ctor === 'SmoStaffTextBracket') {
                            staff.addTextBracket(modifier);
                        }
                        else {
                            staff.addStaffModifier(modifier);
                        }
                    }
                }
            }
            else if (buf.type === UndoBuffer.bufferTypes.SCORE_ATTRIBUTES) {
                _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_6__.smoSerialize.serializedMerge(_data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore.preferences, buf.json, score);
            }
            else if (buf.type === UndoBuffer.bufferTypes.COLUMN) {
                for (i = 0; i < score.staves.length; ++i) {
                    const measure = _data_measure__WEBPACK_IMPORTED_MODULE_5__.SmoMeasure.deserialize(buf.json.measures[i]);
                    const selector = _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default;
                    if (typeof (staffMap[i]) === 'number') {
                        selector.staff = staffMap[i];
                        measure.measureNumber.staffId = staffMap[i];
                        selector.measure = buf.json.measureIndex;
                        score.replaceMeasure(selector, measure);
                    }
                }
            }
            else if (buf.type === UndoBuffer.bufferTypes.MEASURE) {
                // measure expects key signature to be in concert key.
                if (typeof (staffMap[buf.selector.staff]) === 'number') {
                    buf.selector.staff = staffMap[buf.selector.staff];
                    const xpose = (_a = buf.json.transposeIndex) !== null && _a !== void 0 ? _a : 0;
                    const concertKey = _data_music__WEBPACK_IMPORTED_MODULE_2__.SmoMusic.vexKeySigWithOffset(buf.json.keySignature, -1 * xpose);
                    buf.json.keySignature = concertKey;
                    const measure = _data_measure__WEBPACK_IMPORTED_MODULE_5__.SmoMeasure.deserialize(buf.json);
                    measure.measureNumber.staffId = buf.selector.staff;
                    score.replaceMeasure(buf.selector, measure);
                }
            }
            else if (buf.type === UndoBuffer.bufferTypes.SCORE) {
                // Score expects string, as deserialized score is how saving is done.
                score = _data_score__WEBPACK_IMPORTED_MODULE_4__.SmoScore.deserialize(JSON.stringify(buf.json));
            }
            else if (buf.type === UndoBuffer.bufferTypes.SCORE_MODIFIER) {
                // Currently only one type like this: SmoTextGroup
                if (buf.json && buf.json.ctor === 'SmoTextGroup') {
                    const obj = _data_scoreText__WEBPACK_IMPORTED_MODULE_7__.SmoTextGroup.deserializePreserveId(buf.json);
                    obj.attrs.id = buf.json.attrs.id;
                    // undo of add is remove, undo of remove is add.  Undo of update is remove and add older version
                    if (buf.subtype === UndoBuffer.bufferSubtypes.UPDATE || buf.subtype === UndoBuffer.bufferSubtypes.ADD) {
                        score.removeTextGroup(obj);
                    }
                    if (buf.subtype === UndoBuffer.bufferSubtypes.UPDATE || buf.subtype === UndoBuffer.bufferSubtypes.REMOVE) {
                        score.addTextGroup(obj);
                    }
                }
            }
            else {
                if (typeof (staffMap[buf.selector.staff]) === 'number') {
                    buf.selector.staff = staffMap[buf.selector.staff];
                    const staff = _data_systemStaff__WEBPACK_IMPORTED_MODULE_1__.SmoSystemStaff.deserialize(buf.json);
                    score.replaceStaff(buf.selector.staff, staff);
                }
            }
            const peekBuf = this.peekIndex(peekIndex + 1);
            // If buf is grouped and not the first in the group, also undo the next buffer
            if (grouping && peekBuf !== null && peekBuf.grouped && buf.firstInGroup === false) {
                // For the backup/full score, we actually pop the buffer.  For the visible score, we 
                // just use copies of the buffer.
                if (pop) {
                    buf = this._pop();
                }
                else {
                    peekIndex += 1;
                    buf = this.peekIndex(peekIndex);
                    if (buf) {
                        buf = copyUndo(buf);
                    }
                }
            }
            else {
                buf = null;
            }
        }
        return score;
    }
}
UndoBuffer.groupCount = 0;
// ## SmoUndoable
// Convenience functions to save the score state before operations so we can undo the operation.
// Each undo-able knows which set of parameters the undo operation requires (measure, staff, score).
class SmoUndoable {
    // ### undoScoreObject
    // Called when a score object is being modified.  There is no need to update the score as it contains a
    // reference to the object
    static changeTextGroup(score, undoBuffer, object, subtype) {
        undoBuffer.addBuffer('modify text', UndoBuffer.bufferTypes.SCORE_MODIFIER, _selections__WEBPACK_IMPORTED_MODULE_8__.SmoSelector.default, object, subtype);
        if (subtype === UndoBuffer.bufferSubtypes.REMOVE) {
            _operations__WEBPACK_IMPORTED_MODULE_3__.SmoOperation.removeTextGroup(score, object);
        }
        else if (subtype === UndoBuffer.bufferSubtypes.ADD) {
            _operations__WEBPACK_IMPORTED_MODULE_3__.SmoOperation.addTextGroup(score, object);
        }
        // Update operation, there is nothing to do since the text is already
        // part of the score
    }
}


/***/ }),

/***/ "./src/styles/font_metrics/Commissioner-Medium-Metrics.js":
/*!****************************************************************!*\
  !*** ./src/styles/font_metrics/Commissioner-Medium-Metrics.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Commissioner_MediumFont: () => (/* binding */ Commissioner_MediumFont)
/* harmony export */ });
const Commissioner_MediumFont = {
    smufl: false,
    name: "CommissionerMedium",
    spacing: 50,
    fontFamily: "Commisioner",
    description: "Commisioner, a sans-serif font similar to Arial",
    serifs: true,
    monospaced: false,
    superscriptOffset: 0.66,
    subscriptOffset: 0.66,
    maxSizeGlyph: 'H',
    "glyphs": {
        "0": {
            "xMin": 102,
            "xMax": 1212,
            "yMin": -23,
            "yMax": 1400,
            "ha": 1423,
            "leftSideBearing": 102,
            "advanceWidth": 1314
        },
        "1": {
            "xMin": 56,
            "xMax": 676,
            "yMin": 0,
            "yMax": 1380,
            "ha": 1380,
            "leftSideBearing": 56,
            "advanceWidth": 874
        },
        "2": {
            "xMin": 86,
            "xMax": 1020,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 86,
            "advanceWidth": 1120
        },
        "3": {
            "xMin": 84,
            "xMax": 1056,
            "yMin": -23,
            "yMax": 1401,
            "ha": 1424,
            "leftSideBearing": 84,
            "advanceWidth": 1150
        },
        "4": {
            "xMin": 56,
            "xMax": 1157,
            "yMin": 0,
            "yMax": 1373,
            "ha": 1373,
            "leftSideBearing": 56,
            "advanceWidth": 1209
        },
        "5": {
            "xMin": 84,
            "xMax": 1061,
            "yMin": -23,
            "yMax": 1373,
            "ha": 1396,
            "leftSideBearing": 84,
            "advanceWidth": 1155
        },
        "6": {
            "xMin": 102,
            "xMax": 1127,
            "yMin": -23,
            "yMax": 1400,
            "ha": 1423,
            "leftSideBearing": 102,
            "advanceWidth": 1221
        },
        "7": {
            "xMin": 50,
            "xMax": 998,
            "yMin": 0,
            "yMax": 1373,
            "ha": 1373,
            "leftSideBearing": 50,
            "advanceWidth": 1072
        },
        "8": {
            "xMin": 94,
            "xMax": 1128,
            "yMin": -23,
            "yMax": 1401,
            "ha": 1424,
            "leftSideBearing": 94,
            "advanceWidth": 1222
        },
        "9": {
            "xMin": 94,
            "xMax": 1119,
            "yMin": -23,
            "yMax": 1400,
            "ha": 1423,
            "leftSideBearing": 94,
            "advanceWidth": 1221
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 382
        },
        "!": {
            "xMin": 94,
            "xMax": 398,
            "yMin": -24,
            "yMax": 1472,
            "ha": 1496,
            "leftSideBearing": 94,
            "advanceWidth": 493
        },
        "\"": {
            "xMin": 78,
            "xMax": 674,
            "yMin": 846,
            "yMax": 1489,
            "ha": 643,
            "leftSideBearing": 78,
            "advanceWidth": 790
        },
        "#": {
            "xMin": 32,
            "xMax": 1344,
            "yMin": 0,
            "yMax": 1322,
            "ha": 1322,
            "leftSideBearing": 32,
            "advanceWidth": 1376
        },
        "$": {
            "xMin": 99,
            "xMax": 1060,
            "yMin": -274,
            "yMax": 1606,
            "ha": 1880,
            "leftSideBearing": 99,
            "advanceWidth": 1133
        },
        "%": {
            "xMin": 64,
            "xMax": 1732,
            "yMin": -24,
            "yMax": 1453,
            "ha": 1477,
            "leftSideBearing": 64,
            "advanceWidth": 1804
        },
        "&": {
            "xMin": 89,
            "xMax": 1465,
            "yMin": -21,
            "yMax": 1453,
            "ha": 1474,
            "leftSideBearing": 89,
            "advanceWidth": 1490
        },
        "'": {
            "xMin": 78,
            "xMax": 305,
            "yMin": 846,
            "yMax": 1489,
            "ha": 643,
            "leftSideBearing": 78,
            "advanceWidth": 421
        },
        "(": {
            "xMin": 108,
            "xMax": 718,
            "yMin": -250,
            "yMax": 1545,
            "ha": 1795,
            "leftSideBearing": 108,
            "advanceWidth": 790
        },
        ")": {
            "xMin": 72,
            "xMax": 682,
            "yMin": -250,
            "yMax": 1545,
            "ha": 1795,
            "leftSideBearing": 72,
            "advanceWidth": 790
        },
        "*": {
            "xMin": 52,
            "xMax": 908,
            "yMin": 578,
            "yMax": 1492,
            "ha": 914,
            "leftSideBearing": 52,
            "advanceWidth": 960
        },
        "+": {
            "xMin": 116,
            "xMax": 1068,
            "yMin": 113,
            "yMax": 1089,
            "ha": 976,
            "leftSideBearing": 116,
            "advanceWidth": 1184
        },
        ",": {
            "xMin": 49,
            "xMax": 379,
            "yMin": -314,
            "yMax": 279,
            "ha": 593,
            "leftSideBearing": 49,
            "advanceWidth": 474
        },
        "-": {
            "xMin": 116,
            "xMax": 732,
            "yMin": 503,
            "yMax": 691,
            "ha": 188,
            "leftSideBearing": 116,
            "advanceWidth": 848
        },
        ".": {
            "xMin": 94,
            "xMax": 398,
            "yMin": -24,
            "yMax": 272,
            "ha": 296,
            "leftSideBearing": 94,
            "advanceWidth": 493
        },
        "/": {
            "xMin": 49,
            "xMax": 848,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 49,
            "advanceWidth": 897
        },
        ":": {
            "xMin": 94,
            "xMax": 398,
            "yMin": -24,
            "yMax": 1019,
            "ha": 1043,
            "leftSideBearing": 94,
            "advanceWidth": 493
        },
        ";": {
            "xMin": 67,
            "xMax": 398,
            "yMin": -314,
            "yMax": 1019,
            "ha": 1333,
            "leftSideBearing": 67,
            "advanceWidth": 493
        },
        "<": {
            "xMin": 116,
            "xMax": 1028,
            "yMin": 132,
            "yMax": 1068,
            "ha": 936,
            "leftSideBearing": 116,
            "advanceWidth": 1144
        },
        "=": {
            "xMin": 124,
            "xMax": 1020,
            "yMin": 277,
            "yMax": 925,
            "ha": 648,
            "leftSideBearing": 124,
            "advanceWidth": 1144
        },
        ">": {
            "xMin": 116,
            "xMax": 1028,
            "yMin": 132,
            "yMax": 1068,
            "ha": 936,
            "leftSideBearing": 116,
            "advanceWidth": 1144
        },
        "?": {
            "xMin": 76,
            "xMax": 782,
            "yMin": -24,
            "yMax": 1498,
            "ha": 1522,
            "leftSideBearing": 76,
            "advanceWidth": 872
        },
        "@": {
            "xMin": 91.72000000000001,
            "xMax": 1680.1678341637535,
            "yMin": -272,
            "yMax": 1366,
            "ha": 1638,
            "leftSideBearing": 91,
            "advanceWidth": 1772
        },
        "A": {
            "xMin": 53,
            "xMax": 1350,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 53,
            "advanceWidth": 1401
        },
        "B": {
            "xMin": 168,
            "xMax": 1227,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 168,
            "advanceWidth": 1303
        },
        "C": {
            "xMin": 91,
            "xMax": 1272,
            "yMin": -24,
            "yMax": 1453,
            "ha": 1477,
            "leftSideBearing": 91,
            "advanceWidth": 1369
        },
        "D": {
            "xMin": 169,
            "xMax": 1380,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 169,
            "advanceWidth": 1471
        },
        "E": {
            "xMin": 168,
            "xMax": 1081,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 168,
            "advanceWidth": 1189
        },
        "F": {
            "xMin": 169,
            "xMax": 1061,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 169,
            "advanceWidth": 1150
        },
        "G": {
            "xMin": 91,
            "xMax": 1333,
            "yMin": -23,
            "yMax": 1453,
            "ha": 1476,
            "leftSideBearing": 91,
            "advanceWidth": 1463
        },
        "H": {
            "xMin": 169,
            "xMax": 1331,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 169,
            "advanceWidth": 1500
        },
        "I": {
            "xMin": 173,
            "xMax": 412,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 173,
            "advanceWidth": 585
        },
        "J": {
            "xMin": 21,
            "xMax": 430,
            "yMin": -314,
            "yMax": 1426,
            "ha": 1740,
            "leftSideBearing": 21,
            "advanceWidth": 603
        },
        "K": {
            "xMin": 169,
            "xMax": 1310,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 169,
            "advanceWidth": 1362
        },
        "L": {
            "xMin": 169,
            "xMax": 1086,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 169,
            "advanceWidth": 1150
        },
        "M": {
            "xMin": 122,
            "xMax": 1798,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 122,
            "advanceWidth": 1920
        },
        "N": {
            "xMin": 169,
            "xMax": 1336,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 169,
            "advanceWidth": 1505
        },
        "O": {
            "xMin": 91,
            "xMax": 1540,
            "yMin": -24,
            "yMax": 1453,
            "ha": 1477,
            "leftSideBearing": 91,
            "advanceWidth": 1632
        },
        "P": {
            "xMin": 168,
            "xMax": 1194,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 168,
            "advanceWidth": 1271
        },
        "Q": {
            "xMin": 91,
            "xMax": 1540,
            "yMin": -341,
            "yMax": 1453,
            "ha": 1794,
            "leftSideBearing": 91,
            "advanceWidth": 1632
        },
        "R": {
            "xMin": 168,
            "xMax": 1304,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 168,
            "advanceWidth": 1356
        },
        "S": {
            "xMin": 99,
            "xMax": 1110,
            "yMin": -23,
            "yMax": 1453,
            "ha": 1476,
            "leftSideBearing": 99,
            "advanceWidth": 1183
        },
        "T": {
            "xMin": 58,
            "xMax": 1227,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 58,
            "advanceWidth": 1285
        },
        "U": {
            "xMin": 152,
            "xMax": 1306,
            "yMin": -24,
            "yMax": 1426,
            "ha": 1450,
            "leftSideBearing": 152,
            "advanceWidth": 1459
        },
        "V": {
            "xMin": 51,
            "xMax": 1338,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 51,
            "advanceWidth": 1390
        },
        "W": {
            "xMin": 50,
            "xMax": 2010,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 50,
            "advanceWidth": 2060
        },
        "X": {
            "xMin": 64,
            "xMax": 1316,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 64,
            "advanceWidth": 1380
        },
        "Y": {
            "xMin": 50,
            "xMax": 1278,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 50,
            "advanceWidth": 1325
        },
        "Z": {
            "xMin": 90,
            "xMax": 1258,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 90,
            "advanceWidth": 1354
        },
        "[": {
            "xMin": 177,
            "xMax": 733,
            "yMin": -238,
            "yMax": 1538,
            "ha": 1776,
            "leftSideBearing": 177,
            "advanceWidth": 770
        },
        "\\": {
            "xMin": 49,
            "xMax": 848,
            "yMin": 0,
            "yMax": 1426,
            "ha": 1426,
            "leftSideBearing": 49,
            "advanceWidth": 897
        },
        "]": {
            "xMin": 37,
            "xMax": 593,
            "yMin": -238,
            "yMax": 1538,
            "ha": 1776,
            "leftSideBearing": 37,
            "advanceWidth": 770
        },
        "^": {
            "xMin": 112,
            "xMax": 1122,
            "yMin": 744,
            "yMax": 1373,
            "ha": 629,
            "leftSideBearing": 112,
            "advanceWidth": 1234
        },
        "_": {
            "xMin": -20,
            "xMax": 844,
            "yMin": -272,
            "yMax": -96,
            "ha": 176,
            "leftSideBearing": -20,
            "advanceWidth": 824
        },
        "`": {
            "xMin": 272,
            "xMax": 765,
            "yMin": 1146,
            "yMax": 1556,
            "ha": 410,
            "leftSideBearing": 272,
            "advanceWidth": 1200
        },
        "a": {
            "xMin": 94,
            "xMax": 922,
            "yMin": -21,
            "yMax": 1018,
            "ha": 1039,
            "leftSideBearing": 94,
            "advanceWidth": 1053
        },
        "b": {
            "xMin": 154,
            "xMax": 1093,
            "yMin": -24,
            "yMax": 1487,
            "ha": 1511,
            "leftSideBearing": 154,
            "advanceWidth": 1184
        },
        "c": {
            "xMin": 89,
            "xMax": 900,
            "yMin": -20,
            "yMax": 1018,
            "ha": 1038,
            "leftSideBearing": 89,
            "advanceWidth": 982
        },
        "d": {
            "xMin": 90,
            "xMax": 1030,
            "yMin": -24,
            "yMax": 1487,
            "ha": 1511,
            "leftSideBearing": 90,
            "advanceWidth": 1161
        },
        "e": {
            "xMin": 89,
            "xMax": 972,
            "yMin": -23,
            "yMax": 1018,
            "ha": 1041,
            "leftSideBearing": 89,
            "advanceWidth": 1054
        },
        "f": {
            "xMin": 44,
            "xMax": 794,
            "yMin": 0,
            "yMax": 1492,
            "ha": 1492,
            "leftSideBearing": 44,
            "advanceWidth": 801
        },
        "g": {
            "xMin": 85,
            "xMax": 1050,
            "yMin": -407,
            "yMax": 1018,
            "ha": 1425,
            "leftSideBearing": 85,
            "advanceWidth": 1089
        },
        "h": {
            "xMin": 154,
            "xMax": 1018,
            "yMin": 0,
            "yMax": 1487,
            "ha": 1487,
            "leftSideBearing": 154,
            "advanceWidth": 1150
        },
        "i": {
            "xMin": 119,
            "xMax": 408,
            "yMin": 0,
            "yMax": 1472,
            "ha": 1472,
            "leftSideBearing": 119,
            "advanceWidth": 530
        },
        "j": {
            "xMin": 0,
            "xMax": 409,
            "yMin": -391,
            "yMax": 1472,
            "ha": 1863,
            "leftSideBearing": 0,
            "advanceWidth": 526
        },
        "k": {
            "xMin": 154,
            "xMax": 1075,
            "yMin": 0,
            "yMax": 1487,
            "ha": 1487,
            "leftSideBearing": 154,
            "advanceWidth": 1108
        },
        "l": {
            "xMin": 154,
            "xMax": 368,
            "yMin": 0,
            "yMax": 1487,
            "ha": 1487,
            "leftSideBearing": 154,
            "advanceWidth": 522
        },
        "m": {
            "xMin": 154,
            "xMax": 1613,
            "yMin": 0,
            "yMax": 1019,
            "ha": 1019,
            "leftSideBearing": 154,
            "advanceWidth": 1745
        },
        "n": {
            "xMin": 154,
            "xMax": 1018,
            "yMin": 0,
            "yMax": 1019,
            "ha": 1019,
            "leftSideBearing": 154,
            "advanceWidth": 1150
        },
        "o": {
            "xMin": 89,
            "xMax": 1106,
            "yMin": -24,
            "yMax": 1019,
            "ha": 1043,
            "leftSideBearing": 89,
            "advanceWidth": 1195
        },
        "p": {
            "xMin": 154,
            "xMax": 1093,
            "yMin": -391,
            "yMax": 1019,
            "ha": 1410,
            "leftSideBearing": 154,
            "advanceWidth": 1184
        },
        "q": {
            "xMin": 90,
            "xMax": 1030,
            "yMin": -391,
            "yMax": 1019,
            "ha": 1410,
            "leftSideBearing": 90,
            "advanceWidth": 1172
        },
        "r": {
            "xMin": 154,
            "xMax": 766,
            "yMin": 0,
            "yMax": 1019,
            "ha": 1019,
            "leftSideBearing": 154,
            "advanceWidth": 808
        },
        "s": {
            "xMin": 104,
            "xMax": 839,
            "yMin": -23,
            "yMax": 1018,
            "ha": 1041,
            "leftSideBearing": 104,
            "advanceWidth": 918
        },
        "t": {
            "xMin": 44,
            "xMax": 774,
            "yMin": -24,
            "yMax": 1359,
            "ha": 1383,
            "leftSideBearing": 44,
            "advanceWidth": 829
        },
        "u": {
            "xMin": 132,
            "xMax": 990,
            "yMin": -24,
            "yMax": 1002,
            "ha": 1026,
            "leftSideBearing": 132,
            "advanceWidth": 1126
        },
        "v": {
            "xMin": 42,
            "xMax": 1006,
            "yMin": 0,
            "yMax": 1002,
            "ha": 1002,
            "leftSideBearing": 42,
            "advanceWidth": 1048
        },
        "w": {
            "xMin": 42,
            "xMax": 1581,
            "yMin": 0,
            "yMax": 1002,
            "ha": 1002,
            "leftSideBearing": 42,
            "advanceWidth": 1623
        },
        "x": {
            "xMin": 51,
            "xMax": 1043,
            "yMin": 0,
            "yMax": 1002,
            "ha": 1002,
            "leftSideBearing": 51,
            "advanceWidth": 1090
        },
        "y": {
            "xMin": 42,
            "xMax": 1016,
            "yMin": -391,
            "yMax": 1002,
            "ha": 1393,
            "leftSideBearing": 42,
            "advanceWidth": 1058
        },
        "z": {
            "xMin": 72,
            "xMax": 940,
            "yMin": 0,
            "yMax": 994,
            "ha": 994,
            "leftSideBearing": 72,
            "advanceWidth": 1007
        },
        "{": {
            "xMin": 28,
            "xMax": 802,
            "yMin": -238,
            "yMax": 1538,
            "ha": 1776,
            "leftSideBearing": 28,
            "advanceWidth": 838
        },
        "|": {
            "xMin": 177,
            "xMax": 365,
            "yMin": -316,
            "yMax": 1564,
            "ha": 1880,
            "leftSideBearing": 177,
            "advanceWidth": 542
        },
        "}": {
            "xMin": 36,
            "xMax": 810,
            "yMin": -238,
            "yMax": 1538,
            "ha": 1776,
            "leftSideBearing": 36,
            "advanceWidth": 838
        },
        "~": {
            "xMin": 116,
            "xMax": 1028,
            "yMin": 431,
            "yMax": 774,
            "ha": 343,
            "leftSideBearing": 116,
            "advanceWidth": 1144
        }
    },
    "resolution": 2000,
    "generatedOn": "2020-10-16T17:54:48.712Z"
};


/***/ }),

/***/ "./src/styles/font_metrics/ConcertOne-Regular.js":
/*!*******************************************************!*\
  !*** ./src/styles/font_metrics/ConcertOne-Regular.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Concert_OneFont: () => (/* binding */ Concert_OneFont)
/* harmony export */ });
const Concert_OneFont = {
    smufl: false,
    name: "ConcertOne",
    spacing: 50,
    fontFamily: "ConcertOne",
    description: "Concert One, a sans-serif rounded title font",
    serifs: true,
    monospaced: false,
    superscriptOffset: 0.66,
    subscriptOffset: 0.66,
    maxSizeGlyph: 'H',
    "glyphs": {
        "0": {
            "xMin": 102,
            "xMax": 1016,
            "yMin": -8,
            "yMax": 1408,
            "ha": 1416,
            "leftSideBearing": 102,
            "advanceWidth": 1118
        },
        "1": {
            "xMin": 58,
            "xMax": 664,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 58,
            "advanceWidth": 786
        },
        "2": {
            "xMin": 100,
            "xMax": 1022,
            "yMin": 0,
            "yMax": 1408,
            "ha": 1408,
            "leftSideBearing": 100,
            "advanceWidth": 1060
        },
        "3": {
            "xMin": 54,
            "xMax": 946,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 54,
            "advanceWidth": 1026
        },
        "4": {
            "xMin": 74,
            "xMax": 906,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 74,
            "advanceWidth": 1002
        },
        "5": {
            "xMin": 76,
            "xMax": 968,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 76,
            "advanceWidth": 1026
        },
        "6": {
            "xMin": 122,
            "xMax": 948,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 122,
            "advanceWidth": 992
        },
        "7": {
            "xMin": 48,
            "xMax": 966,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 48,
            "advanceWidth": 1012
        },
        "8": {
            "xMin": 90,
            "xMax": 930,
            "yMin": -8,
            "yMax": 1408,
            "ha": 1416,
            "leftSideBearing": 90,
            "advanceWidth": 1020
        },
        "9": {
            "xMin": 46,
            "xMax": 870,
            "yMin": 0,
            "yMax": 1408,
            "ha": 1408,
            "leftSideBearing": 46,
            "advanceWidth": 992
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 798
        },
        "!": {
            "xMin": 226,
            "xMax": 556,
            "yMin": -2,
            "yMax": 1398,
            "ha": 1400,
            "leftSideBearing": 226,
            "advanceWidth": 808
        },
        "\"": {
            "xMin": 110,
            "xMax": 766,
            "yMin": 904,
            "yMax": 1404,
            "ha": 500,
            "leftSideBearing": 110,
            "advanceWidth": 898
        },
        "#": {
            "xMin": 118,
            "xMax": 1170,
            "yMin": 160,
            "yMax": 1222,
            "ha": 1062,
            "leftSideBearing": 118,
            "advanceWidth": 1268
        },
        "$": {
            "xMin": 142,
            "xMax": 904,
            "yMin": 6,
            "yMax": 1384,
            "ha": 1378,
            "leftSideBearing": 142,
            "advanceWidth": 1052
        },
        "%": {
            "xMin": 98,
            "xMax": 1384,
            "yMin": -6,
            "yMax": 1400,
            "ha": 1406,
            "leftSideBearing": 98,
            "advanceWidth": 1484
        },
        "&": {
            "xMin": 104,
            "xMax": 1178,
            "yMin": -2,
            "yMax": 1408,
            "ha": 1410,
            "leftSideBearing": 104,
            "advanceWidth": 1296
        },
        "'": {
            "xMin": 130,
            "xMax": 374,
            "yMin": 904,
            "yMax": 1404,
            "ha": 500,
            "leftSideBearing": 130,
            "advanceWidth": 522
        },
        "(": {
            "xMin": 240,
            "xMax": 814,
            "yMin": -158,
            "yMax": 1562,
            "ha": 1720,
            "leftSideBearing": 240,
            "advanceWidth": 888
        },
        ")": {
            "xMin": 74,
            "xMax": 648,
            "yMin": -158,
            "yMax": 1562,
            "ha": 1720,
            "leftSideBearing": 74,
            "advanceWidth": 888
        },
        "*": {
            "xMin": 110,
            "xMax": 1084,
            "yMin": 164,
            "yMax": 1260,
            "ha": 1096,
            "leftSideBearing": 110,
            "advanceWidth": 1194
        },
        "+": {
            "xMin": 190,
            "xMax": 920,
            "yMin": 356,
            "yMax": 1086,
            "ha": 730,
            "leftSideBearing": 190,
            "advanceWidth": 1102
        },
        ",": {
            "xMin": 134,
            "xMax": 464,
            "yMin": -164,
            "yMax": 330,
            "ha": 494,
            "leftSideBearing": 134,
            "advanceWidth": 598
        },
        "-": {
            "xMin": 108,
            "xMax": 838,
            "yMin": 480,
            "yMax": 724,
            "ha": 244,
            "leftSideBearing": 108,
            "advanceWidth": 966
        },
        ".": {
            "xMin": 134,
            "xMax": 464,
            "yMin": 0,
            "yMax": 330,
            "ha": 330,
            "leftSideBearing": 134,
            "advanceWidth": 598
        },
        "/": {
            "xMin": 70,
            "xMax": 826,
            "yMin": -26,
            "yMax": 1408,
            "ha": 1434,
            "leftSideBearing": 70,
            "advanceWidth": 906
        },
        ":": {
            "xMin": 122,
            "xMax": 454,
            "yMin": 0,
            "yMax": 854,
            "ha": 854,
            "leftSideBearing": 122,
            "advanceWidth": 572
        },
        ";": {
            "xMin": 120,
            "xMax": 452,
            "yMin": -166,
            "yMax": 852,
            "ha": 1018,
            "leftSideBearing": 120,
            "advanceWidth": 596
        },
        "<": {
            "xMin": 162,
            "xMax": 768,
            "yMin": 126,
            "yMax": 1074,
            "ha": 948,
            "leftSideBearing": 162,
            "advanceWidth": 930
        },
        "=": {
            "xMin": 180,
            "xMax": 914,
            "yMin": 290,
            "yMax": 926,
            "ha": 636,
            "leftSideBearing": 180,
            "advanceWidth": 1102
        },
        ">": {
            "xMin": 162,
            "xMax": 768,
            "yMin": 126,
            "yMax": 1074,
            "ha": 948,
            "leftSideBearing": 162,
            "advanceWidth": 930
        },
        "?": {
            "xMin": 104,
            "xMax": 1012,
            "yMin": 0,
            "yMax": 1420,
            "ha": 1420,
            "leftSideBearing": 104,
            "advanceWidth": 1122
        },
        "@": {
            "xMin": 132,
            "xMax": 1306,
            "yMin": -96,
            "yMax": 1078,
            "ha": 1174,
            "leftSideBearing": 132,
            "advanceWidth": 1494
        },
        "A": {
            "xMin": 74,
            "xMax": 1030,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 74,
            "advanceWidth": 1104
        },
        "B": {
            "xMin": 120,
            "xMax": 1042,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 120,
            "advanceWidth": 1104
        },
        "C": {
            "xMin": 90,
            "xMax": 1046,
            "yMin": -6,
            "yMax": 1408,
            "ha": 1414,
            "leftSideBearing": 90,
            "advanceWidth": 1110
        },
        "D": {
            "xMin": 134,
            "xMax": 1008,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 134,
            "advanceWidth": 1094
        },
        "E": {
            "xMin": 140,
            "xMax": 912,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 140,
            "advanceWidth": 986
        },
        "F": {
            "xMin": 140,
            "xMax": 912,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 140,
            "advanceWidth": 938
        },
        "G": {
            "xMin": 106,
            "xMax": 1072,
            "yMin": -8,
            "yMax": 1408,
            "ha": 1416,
            "leftSideBearing": 106,
            "advanceWidth": 1156
        },
        "H": {
            "xMin": 146,
            "xMax": 1028,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 146,
            "advanceWidth": 1166
        },
        "I": {
            "xMin": 168,
            "xMax": 500,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 168,
            "advanceWidth": 666
        },
        "J": {
            "xMin": 46,
            "xMax": 980,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 46,
            "advanceWidth": 1126
        },
        "K": {
            "xMin": 140,
            "xMax": 1064,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 140,
            "advanceWidth": 1142
        },
        "L": {
            "xMin": 178,
            "xMax": 906,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 178,
            "advanceWidth": 968
        },
        "M": {
            "xMin": 156,
            "xMax": 1430,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 156,
            "advanceWidth": 1594
        },
        "N": {
            "xMin": 148,
            "xMax": 1222,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 148,
            "advanceWidth": 1360
        },
        "O": {
            "xMin": 104,
            "xMax": 1026,
            "yMin": -8,
            "yMax": 1408,
            "ha": 1416,
            "leftSideBearing": 104,
            "advanceWidth": 1128
        },
        "P": {
            "xMin": 142,
            "xMax": 1066,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 142,
            "advanceWidth": 1082
        },
        "Q": {
            "xMin": 122,
            "xMax": 1114,
            "yMin": -110,
            "yMax": 1408,
            "ha": 1518,
            "leftSideBearing": 122,
            "advanceWidth": 1156
        },
        "R": {
            "xMin": 142,
            "xMax": 1062,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 142,
            "advanceWidth": 1142
        },
        "S": {
            "xMin": 88,
            "xMax": 950,
            "yMin": -8,
            "yMax": 1408,
            "ha": 1416,
            "leftSideBearing": 88,
            "advanceWidth": 1014
        },
        "T": {
            "xMin": 10,
            "xMax": 974,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 10,
            "advanceWidth": 982
        },
        "U": {
            "xMin": 142,
            "xMax": 1070,
            "yMin": -8,
            "yMax": 1400,
            "ha": 1408,
            "leftSideBearing": 142,
            "advanceWidth": 1208
        },
        "V": {
            "xMin": 16,
            "xMax": 992,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 16,
            "advanceWidth": 1000
        },
        "W": {
            "xMin": 24,
            "xMax": 1658,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 24,
            "advanceWidth": 1666
        },
        "X": {
            "xMin": 56,
            "xMax": 1094,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 56,
            "advanceWidth": 1146
        },
        "Y": {
            "xMin": -14,
            "xMax": 1022,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": -14,
            "advanceWidth": 1000
        },
        "Z": {
            "xMin": 70,
            "xMax": 982,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 70,
            "advanceWidth": 1042
        },
        "[": {
            "xMin": 240,
            "xMax": 736,
            "yMin": 2,
            "yMax": 1404,
            "ha": 1402,
            "leftSideBearing": 240,
            "advanceWidth": 836
        },
        "\\": {
            "xMin": 70,
            "xMax": 826,
            "yMin": -26,
            "yMax": 1408,
            "ha": 1434,
            "leftSideBearing": 70,
            "advanceWidth": 906
        },
        "]": {
            "xMin": 140,
            "xMax": 636,
            "yMin": 2,
            "yMax": 1404,
            "ha": 1402,
            "leftSideBearing": 140,
            "advanceWidth": 836
        },
        "^": {
            "xMin": 174,
            "xMax": 782,
            "yMin": 762,
            "yMax": 1156,
            "ha": 394,
            "leftSideBearing": 174,
            "advanceWidth": 976
        },
        "_": {
            "xMin": 146,
            "xMax": 1254,
            "yMin": 2,
            "yMax": 246,
            "ha": 244,
            "leftSideBearing": 146,
            "advanceWidth": 1408
        },
        "`": {
            "xMin": 132,
            "xMax": 578,
            "yMin": 1102,
            "yMax": 1452,
            "ha": 350,
            "leftSideBearing": 132,
            "advanceWidth": 698
        },
        "a": {
            "xMin": 84,
            "xMax": 912,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 84,
            "advanceWidth": 1020
        },
        "b": {
            "xMin": 120,
            "xMax": 948,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 120,
            "advanceWidth": 1042
        },
        "c": {
            "xMin": 84,
            "xMax": 930,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 84,
            "advanceWidth": 1000
        },
        "d": {
            "xMin": 82,
            "xMax": 910,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 82,
            "advanceWidth": 1020
        },
        "e": {
            "xMin": 92,
            "xMax": 936,
            "yMin": 0,
            "yMax": 1002,
            "ha": 1002,
            "leftSideBearing": 92,
            "advanceWidth": 1020
        },
        "f": {
            "xMin": 0,
            "xMax": 724,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 0,
            "advanceWidth": 750
        },
        "g": {
            "xMin": 92,
            "xMax": 922,
            "yMin": -400,
            "yMax": 1000,
            "ha": 1400,
            "leftSideBearing": 92,
            "advanceWidth": 1042
        },
        "h": {
            "xMin": 122,
            "xMax": 956,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 122,
            "advanceWidth": 1042
        },
        "i": {
            "xMin": 154,
            "xMax": 460,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 154,
            "advanceWidth": 626
        },
        "j": {
            "xMin": -44,
            "xMax": 480,
            "yMin": -400,
            "yMax": 1402,
            "ha": 1802,
            "leftSideBearing": -44,
            "advanceWidth": 626
        },
        "k": {
            "xMin": 150,
            "xMax": 920,
            "yMin": -2,
            "yMax": 1400,
            "ha": 1402,
            "leftSideBearing": 150,
            "advanceWidth": 1014
        },
        "l": {
            "xMin": 140,
            "xMax": 444,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 140,
            "advanceWidth": 586
        },
        "m": {
            "xMin": 134,
            "xMax": 1486,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 134,
            "advanceWidth": 1604
        },
        "n": {
            "xMin": 132,
            "xMax": 966,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 132,
            "advanceWidth": 1082
        },
        "o": {
            "xMin": 78,
            "xMax": 912,
            "yMin": -8,
            "yMax": 1008,
            "ha": 1016,
            "leftSideBearing": 78,
            "advanceWidth": 990
        },
        "p": {
            "xMin": 132,
            "xMax": 960,
            "yMin": -400,
            "yMax": 1000,
            "ha": 1400,
            "leftSideBearing": 132,
            "advanceWidth": 1062
        },
        "q": {
            "xMin": 104,
            "xMax": 932,
            "yMin": -400,
            "yMax": 1000,
            "ha": 1400,
            "leftSideBearing": 104,
            "advanceWidth": 1062
        },
        "r": {
            "xMin": 132,
            "xMax": 770,
            "yMin": 0,
            "yMax": 998,
            "ha": 998,
            "leftSideBearing": 132,
            "advanceWidth": 792
        },
        "s": {
            "xMin": 86,
            "xMax": 836,
            "yMin": -8,
            "yMax": 1008,
            "ha": 1016,
            "leftSideBearing": 86,
            "advanceWidth": 910
        },
        "t": {
            "xMin": 60,
            "xMax": 786,
            "yMin": 0,
            "yMax": 1400,
            "ha": 1400,
            "leftSideBearing": 60,
            "advanceWidth": 870
        },
        "u": {
            "xMin": 118,
            "xMax": 952,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 118,
            "advanceWidth": 1076
        },
        "v": {
            "xMin": 36,
            "xMax": 844,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 36,
            "advanceWidth": 876
        },
        "w": {
            "xMin": 24,
            "xMax": 1372,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 24,
            "advanceWidth": 1396
        },
        "x": {
            "xMin": 84,
            "xMax": 860,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 84,
            "advanceWidth": 938
        },
        "y": {
            "xMin": 20,
            "xMax": 892,
            "yMin": -400,
            "yMax": 1004,
            "ha": 1404,
            "leftSideBearing": 20,
            "advanceWidth": 916
        },
        "z": {
            "xMin": 72,
            "xMax": 844,
            "yMin": 0,
            "yMax": 1000,
            "ha": 1000,
            "leftSideBearing": 72,
            "advanceWidth": 916
        },
        "{": {
            "xMin": 188,
            "xMax": 932,
            "yMin": -160,
            "yMax": 1566,
            "ha": 1726,
            "leftSideBearing": 188,
            "advanceWidth": 1012
        },
        "|": {
            "xMin": 180,
            "xMax": 424,
            "yMin": -160,
            "yMax": 1566,
            "ha": 1726,
            "leftSideBearing": 180,
            "advanceWidth": 604
        },
        "}": {
            "xMin": 80,
            "xMax": 824,
            "yMin": -160,
            "yMax": 1566,
            "ha": 1726,
            "leftSideBearing": 80,
            "advanceWidth": 1012
        },
        "~": {
            "xMin": 112,
            "xMax": 802,
            "yMin": 84,
            "yMax": 398,
            "ha": 314,
            "leftSideBearing": 112,
            "advanceWidth": 918
        }
    },
    "resolution": 2048,
    "generatedOn": "2020-10-16T18:00:03.708Z"
};


/***/ }),

/***/ "./src/styles/font_metrics/Merriweather-Regular.js":
/*!*********************************************************!*\
  !*** ./src/styles/font_metrics/Merriweather-Regular.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MerriweatherFont: () => (/* binding */ MerriweatherFont)
/* harmony export */ });
const MerriweatherFont = {
    name: "Merriweather-Regular",
    smufl: false,
    spacing: 50,
    fontFamily: "Merriweather",
    description: "Merriweather, a serif web font by Sorkin Type",
    serifs: true,
    monospaced: false,
    superscriptOffset: 0.66,
    subscriptOffset: 0.66,
    maxSizeGlyph: 'H',
    "glyphs": {
        "0": {
            "xMin": 62,
            "xMax": 582,
            "yMin": -9,
            "yMax": 631,
            "ha": 640,
            "leftSideBearing": 62,
            "advanceWidth": 643
        },
        "1": {
            "xMin": 39,
            "xMax": 419,
            "yMin": 0,
            "yMax": 632,
            "ha": 632,
            "leftSideBearing": 39,
            "advanceWidth": 440
        },
        "2": {
            "xMin": 47,
            "xMax": 565,
            "yMin": 0,
            "yMax": 632,
            "ha": 632,
            "leftSideBearing": 47,
            "advanceWidth": 598
        },
        "3": {
            "xMin": 57,
            "xMax": 512,
            "yMin": -161,
            "yMax": 632,
            "ha": 793,
            "leftSideBearing": 57,
            "advanceWidth": 560
        },
        "4": {
            "xMin": 37,
            "xMax": 625,
            "yMin": -161,
            "yMax": 680,
            "ha": 841,
            "leftSideBearing": 37,
            "advanceWidth": 644
        },
        "5": {
            "xMin": 91,
            "xMax": 527,
            "yMin": -161,
            "yMax": 643,
            "ha": 804,
            "leftSideBearing": 91,
            "advanceWidth": 594
        },
        "6": {
            "xMin": 76,
            "xMax": 592,
            "yMin": -11,
            "yMax": 786,
            "ha": 797,
            "leftSideBearing": 76,
            "advanceWidth": 664
        },
        "7": {
            "xMin": 48,
            "xMax": 546,
            "yMin": -173,
            "yMax": 624,
            "ha": 797,
            "leftSideBearing": 48,
            "advanceWidth": 588
        },
        "8": {
            "xMin": 65,
            "xMax": 572,
            "yMin": -10,
            "yMax": 752,
            "ha": 762,
            "leftSideBearing": 65,
            "advanceWidth": 633
        },
        "9": {
            "xMin": 70,
            "xMax": 588,
            "yMin": -167,
            "yMax": 632,
            "ha": 799,
            "leftSideBearing": 70,
            "advanceWidth": 660
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 237
        },
        "!": {
            "xMin": 107,
            "xMax": 248,
            "yMin": -10,
            "yMax": 883,
            "ha": 893,
            "leftSideBearing": 107,
            "advanceWidth": 354
        },
        "\"": {
            "xMin": 124,
            "xMax": 489,
            "yMin": 456,
            "yMax": 827,
            "ha": 371,
            "leftSideBearing": 124,
            "advanceWidth": 612
        },
        "#": {
            "xMin": 81,
            "xMax": 677,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 81,
            "advanceWidth": 744
        },
        "$": {
            "xMin": 94,
            "xMax": 575,
            "yMin": -126,
            "yMax": 860,
            "ha": 986,
            "leftSideBearing": 94,
            "advanceWidth": 659
        },
        "%": {
            "xMin": 53,
            "xMax": 981,
            "yMin": 0,
            "yMax": 751,
            "ha": 751,
            "leftSideBearing": 53,
            "advanceWidth": 1037
        },
        "&": {
            "xMin": 60,
            "xMax": 739,
            "yMin": -9,
            "yMax": 752,
            "ha": 761,
            "leftSideBearing": 60,
            "advanceWidth": 756
        },
        "'": {
            "xMin": 124,
            "xMax": 230,
            "yMin": 456,
            "yMax": 827,
            "ha": 371,
            "leftSideBearing": 124,
            "advanceWidth": 353
        },
        "(": {
            "xMin": 67,
            "xMax": 360,
            "yMin": -184,
            "yMax": 828,
            "ha": 1012,
            "leftSideBearing": 67,
            "advanceWidth": 430
        },
        ")": {
            "xMin": 70,
            "xMax": 363,
            "yMin": -183,
            "yMax": 829,
            "ha": 1012,
            "leftSideBearing": 70,
            "advanceWidth": 430
        },
        "*": {
            "xMin": 76,
            "xMax": 568,
            "yMin": 310,
            "yMax": 823,
            "ha": 513,
            "leftSideBearing": 76,
            "advanceWidth": 643
        },
        "+": {
            "xMin": 105,
            "xMax": 556,
            "yMin": 84,
            "yMax": 547,
            "ha": 463,
            "leftSideBearing": 105,
            "advanceWidth": 661
        },
        ",": {
            "xMin": 99,
            "xMax": 250,
            "yMin": -224,
            "yMax": 150,
            "ha": 374,
            "leftSideBearing": 99,
            "advanceWidth": 335
        },
        "-": {
            "xMin": 112,
            "xMax": 516,
            "yMin": 284,
            "yMax": 357,
            "ha": 73,
            "leftSideBearing": 112,
            "advanceWidth": 628
        },
        ".": {
            "xMin": 63,
            "xMax": 202,
            "yMin": -10,
            "yMax": 127,
            "ha": 137,
            "leftSideBearing": 63,
            "advanceWidth": 265
        },
        "/": {
            "xMin": 36,
            "xMax": 394,
            "yMin": -177,
            "yMax": 781,
            "ha": 958,
            "leftSideBearing": 36,
            "advanceWidth": 431
        },
        ":": {
            "xMin": 102,
            "xMax": 240,
            "yMin": -10,
            "yMax": 539,
            "ha": 549,
            "leftSideBearing": 102,
            "advanceWidth": 344
        },
        ";": {
            "xMin": 99,
            "xMax": 250,
            "yMin": -224,
            "yMax": 539,
            "ha": 763,
            "leftSideBearing": 99,
            "advanceWidth": 344
        },
        "<": {
            "xMin": 82,
            "xMax": 555,
            "yMin": 27,
            "yMax": 575,
            "ha": 548,
            "leftSideBearing": 82,
            "advanceWidth": 669
        },
        "=": {
            "xMin": 102,
            "xMax": 552,
            "yMin": 127,
            "yMax": 474,
            "ha": 347,
            "leftSideBearing": 102,
            "advanceWidth": 653
        },
        ">": {
            "xMin": 114,
            "xMax": 587,
            "yMin": 27,
            "yMax": 575,
            "ha": 548,
            "leftSideBearing": 114,
            "advanceWidth": 669
        },
        "?": {
            "xMin": 42,
            "xMax": 452,
            "yMin": -10,
            "yMax": 906,
            "ha": 916,
            "leftSideBearing": 42,
            "advanceWidth": 487
        },
        "@": {
            "xMin": 93,
            "xMax": 977,
            "yMin": -253,
            "yMax": 760,
            "ha": 1013,
            "leftSideBearing": 93,
            "advanceWidth": 1078
        },
        "A": {
            "xMin": -13,
            "xMax": 705,
            "yMin": 0,
            "yMax": 749,
            "ha": 749,
            "leftSideBearing": -13,
            "advanceWidth": 692
        },
        "B": {
            "xMin": 46,
            "xMax": 649,
            "yMin": -6,
            "yMax": 751,
            "ha": 757,
            "leftSideBearing": 46,
            "advanceWidth": 685
        },
        "C": {
            "xMin": 33,
            "xMax": 617,
            "yMin": -11,
            "yMax": 751,
            "ha": 762,
            "leftSideBearing": 33,
            "advanceWidth": 653
        },
        "D": {
            "xMin": 46,
            "xMax": 725,
            "yMin": -8,
            "yMax": 751,
            "ha": 759,
            "leftSideBearing": 46,
            "advanceWidth": 758
        },
        "E": {
            "xMin": 46,
            "xMax": 630,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 46,
            "advanceWidth": 651
        },
        "F": {
            "xMin": 43,
            "xMax": 588,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 43,
            "advanceWidth": 619
        },
        "G": {
            "xMin": 43,
            "xMax": 721,
            "yMin": -11,
            "yMax": 751,
            "ha": 762,
            "leftSideBearing": 43,
            "advanceWidth": 740
        },
        "H": {
            "xMin": 50,
            "xMax": 777,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 50,
            "advanceWidth": 828
        },
        "I": {
            "xMin": 54,
            "xMax": 348,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 54,
            "advanceWidth": 403
        },
        "J": {
            "xMin": -6,
            "xMax": 343,
            "yMin": -179,
            "yMax": 743,
            "ha": 922,
            "leftSideBearing": -6,
            "advanceWidth": 381
        },
        "K": {
            "xMin": 48,
            "xMax": 727,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 48,
            "advanceWidth": 726
        },
        "L": {
            "xMin": 48,
            "xMax": 616,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 48,
            "advanceWidth": 634
        },
        "M": {
            "xMin": 6,
            "xMax": 984,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 6,
            "advanceWidth": 990
        },
        "N": {
            "xMin": 50,
            "xMax": 774,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 50,
            "advanceWidth": 799
        },
        "O": {
            "xMin": 34,
            "xMax": 689,
            "yMin": -11,
            "yMax": 751,
            "ha": 762,
            "leftSideBearing": 34,
            "advanceWidth": 722
        },
        "P": {
            "xMin": 48,
            "xMax": 624,
            "yMin": 0,
            "yMax": 750,
            "ha": 750,
            "leftSideBearing": 48,
            "advanceWidth": 649
        },
        "Q": {
            "xMin": 36,
            "xMax": 904,
            "yMin": -198,
            "yMax": 751,
            "ha": 949,
            "leftSideBearing": 36,
            "advanceWidth": 727
        },
        "R": {
            "xMin": 46,
            "xMax": 705,
            "yMin": 0,
            "yMax": 751,
            "ha": 751,
            "leftSideBearing": 46,
            "advanceWidth": 704
        },
        "S": {
            "xMin": 62,
            "xMax": 556,
            "yMin": -11,
            "yMax": 751,
            "ha": 762,
            "leftSideBearing": 62,
            "advanceWidth": 594
        },
        "T": {
            "xMin": 17,
            "xMax": 669,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 17,
            "advanceWidth": 692
        },
        "U": {
            "xMin": 24,
            "xMax": 725,
            "yMin": -8,
            "yMax": 743,
            "ha": 751,
            "leftSideBearing": 24,
            "advanceWidth": 740
        },
        "V": {
            "xMin": -16,
            "xMax": 689,
            "yMin": -8,
            "yMax": 743,
            "ha": 751,
            "leftSideBearing": -16,
            "advanceWidth": 670
        },
        "W": {
            "xMin": -19,
            "xMax": 1019,
            "yMin": -5,
            "yMax": 743,
            "ha": 748,
            "leftSideBearing": -19,
            "advanceWidth": 1000
        },
        "X": {
            "xMin": 7,
            "xMax": 710,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": 7,
            "advanceWidth": 712
        },
        "Y": {
            "xMin": -12,
            "xMax": 658,
            "yMin": 0,
            "yMax": 743,
            "ha": 743,
            "leftSideBearing": -12,
            "advanceWidth": 644
        },
        "Z": {
            "xMin": 34,
            "xMax": 616,
            "yMin": 0,
            "yMax": 746,
            "ha": 746,
            "leftSideBearing": 34,
            "advanceWidth": 654
        },
        "[": {
            "xMin": 96,
            "xMax": 338,
            "yMin": -137,
            "yMax": 804,
            "ha": 941,
            "leftSideBearing": 96,
            "advanceWidth": 428
        },
        "\\": {
            "xMin": 30,
            "xMax": 388,
            "yMin": -177,
            "yMax": 781,
            "ha": 958,
            "leftSideBearing": 30,
            "advanceWidth": 431
        },
        "]": {
            "xMin": 90,
            "xMax": 332,
            "yMin": -137,
            "yMax": 804,
            "ha": 941,
            "leftSideBearing": 90,
            "advanceWidth": 428
        },
        "^": {
            "xMin": 86,
            "xMax": 579,
            "yMin": 133,
            "yMax": 748,
            "ha": 615,
            "leftSideBearing": 86,
            "advanceWidth": 666
        },
        "_": {
            "xMin": -10,
            "xMax": 845,
            "yMin": -183,
            "yMax": -122,
            "ha": 61,
            "leftSideBearing": -10,
            "advanceWidth": 835
        },
        "`": {
            "xMin": -7,
            "xMax": 227,
            "yMin": 653,
            "yMax": 884,
            "ha": 231,
            "leftSideBearing": -7,
            "advanceWidth": 333
        },
        "a": {
            "xMin": 45,
            "xMax": 536,
            "yMin": -11,
            "yMax": 567,
            "ha": 578,
            "leftSideBearing": 45,
            "advanceWidth": 561
        },
        "b": {
            "xMin": -2,
            "xMax": 565,
            "yMin": -11,
            "yMax": 819,
            "ha": 830,
            "leftSideBearing": -2,
            "advanceWidth": 607
        },
        "c": {
            "xMin": 33,
            "xMax": 471,
            "yMin": -11,
            "yMax": 570,
            "ha": 581,
            "leftSideBearing": 33,
            "advanceWidth": 513
        },
        "d": {
            "xMin": 42,
            "xMax": 586,
            "yMin": -11,
            "yMax": 819,
            "ha": 830,
            "leftSideBearing": 42,
            "advanceWidth": 621
        },
        "e": {
            "xMin": 43,
            "xMax": 503,
            "yMin": -11,
            "yMax": 570,
            "ha": 581,
            "leftSideBearing": 43,
            "advanceWidth": 544
        },
        "f": {
            "xMin": 31,
            "xMax": 413,
            "yMin": 0,
            "yMax": 828,
            "ha": 828,
            "leftSideBearing": 31,
            "advanceWidth": 400
        },
        "g": {
            "xMin": 41,
            "xMax": 597,
            "yMin": -270,
            "yMax": 571,
            "ha": 841,
            "leftSideBearing": 41,
            "advanceWidth": 607
        },
        "h": {
            "xMin": 15,
            "xMax": 630,
            "yMin": 0,
            "yMax": 819,
            "ha": 819,
            "leftSideBearing": 15,
            "advanceWidth": 659
        },
        "i": {
            "xMin": 42,
            "xMax": 307,
            "yMin": 0,
            "yMax": 793,
            "ha": 793,
            "leftSideBearing": 42,
            "advanceWidth": 333
        },
        "j": {
            "xMin": -11,
            "xMax": 238,
            "yMin": -243,
            "yMax": 793,
            "ha": 1036,
            "leftSideBearing": -11,
            "advanceWidth": 317
        },
        "k": {
            "xMin": 20,
            "xMax": 624,
            "yMin": 0,
            "yMax": 819,
            "ha": 819,
            "leftSideBearing": 20,
            "advanceWidth": 600
        },
        "l": {
            "xMin": 37,
            "xMax": 307,
            "yMin": 0,
            "yMax": 819,
            "ha": 819,
            "leftSideBearing": 37,
            "advanceWidth": 333
        },
        "m": {
            "xMin": 33,
            "xMax": 970,
            "yMin": 0,
            "yMax": 568,
            "ha": 568,
            "leftSideBearing": 33,
            "advanceWidth": 995
        },
        "n": {
            "xMin": 33,
            "xMax": 637,
            "yMin": 0,
            "yMax": 568,
            "ha": 568,
            "leftSideBearing": 33,
            "advanceWidth": 664
        },
        "o": {
            "xMin": 45,
            "xMax": 562,
            "yMin": -11,
            "yMax": 570,
            "ha": 581,
            "leftSideBearing": 45,
            "advanceWidth": 608
        },
        "p": {
            "xMin": 29,
            "xMax": 586,
            "yMin": -242,
            "yMax": 570,
            "ha": 812,
            "leftSideBearing": 29,
            "advanceWidth": 628
        },
        "q": {
            "xMin": 42,
            "xMax": 597,
            "yMin": -242,
            "yMax": 570,
            "ha": 812,
            "leftSideBearing": 42,
            "advanceWidth": 609
        },
        "r": {
            "xMin": 47,
            "xMax": 437,
            "yMin": 0,
            "yMax": 570,
            "ha": 570,
            "leftSideBearing": 47,
            "advanceWidth": 458
        },
        "s": {
            "xMin": 55,
            "xMax": 460,
            "yMin": -11,
            "yMax": 567,
            "ha": 578,
            "leftSideBearing": 55,
            "advanceWidth": 505
        },
        "t": {
            "xMin": 31,
            "xMax": 391,
            "yMin": -10,
            "yMax": 699,
            "ha": 709,
            "leftSideBearing": 31,
            "advanceWidth": 407
        },
        "u": {
            "xMin": 36,
            "xMax": 597,
            "yMin": -11,
            "yMax": 567,
            "ha": 578,
            "leftSideBearing": 36,
            "advanceWidth": 632
        },
        "v": {
            "xMin": -1,
            "xMax": 575,
            "yMin": -8,
            "yMax": 555,
            "ha": 563,
            "leftSideBearing": -1,
            "advanceWidth": 568
        },
        "w": {
            "xMin": -7,
            "xMax": 853,
            "yMin": -8,
            "yMax": 555,
            "ha": 563,
            "leftSideBearing": -7,
            "advanceWidth": 839
        },
        "x": {
            "xMin": 6,
            "xMax": 591,
            "yMin": 0,
            "yMax": 555,
            "ha": 555,
            "leftSideBearing": 6,
            "advanceWidth": 595
        },
        "y": {
            "xMin": -3,
            "xMax": 571,
            "yMin": -249,
            "yMax": 555,
            "ha": 804,
            "leftSideBearing": -3,
            "advanceWidth": 572
        },
        "z": {
            "xMin": 30,
            "xMax": 518,
            "yMin": 0,
            "yMax": 555,
            "ha": 555,
            "leftSideBearing": 30,
            "advanceWidth": 554
        },
        "{": {
            "xMin": 57,
            "xMax": 431,
            "yMin": -137,
            "yMax": 806,
            "ha": 943,
            "leftSideBearing": 57,
            "advanceWidth": 508
        },
        "|": {
            "xMin": 170,
            "xMax": 252,
            "yMin": -91,
            "yMax": 869,
            "ha": 960,
            "leftSideBearing": 170,
            "advanceWidth": 422
        },
        "}": {
            "xMin": 77,
            "xMax": 450,
            "yMin": -137,
            "yMax": 806,
            "ha": 943,
            "leftSideBearing": 77,
            "advanceWidth": 508
        },
        "~": {
            "xMin": 107,
            "xMax": 584,
            "yMin": 218,
            "yMax": 379,
            "ha": 161,
            "leftSideBearing": 107,
            "advanceWidth": 692
        }
    },
    "resolution": 1000,
    "generatedOn": "2020-10-16T18:04:00.805Z"
};


/***/ }),

/***/ "./src/styles/font_metrics/arial_metrics.js":
/*!**************************************************!*\
  !*** ./src/styles/font_metrics/arial_metrics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArialFont: () => (/* binding */ ArialFont)
/* harmony export */ });
const ArialFont = {
    smufl: false,
    name: "Arial",
    spacing: 50,
    Description: 'Built-in sans-serif font',
    bold: true,
    italic: true,
    monospaced: false,
    serifs: false,
    "glyphs": {
        "0": {
            "xMin": 85,
            "xMax": 1041,
            "yMin": -25,
            "yMax": 1472,
            "ha": 1497,
            "leftSideBearing": 85,
            "advanceWidth": 1139
        },
        "1": {
            "xMin": 223,
            "xMax": 763,
            "yMin": 0,
            "yMax": 1472,
            "ha": 1472,
            "leftSideBearing": 223,
            "advanceWidth": 1139
        },
        "2": {
            "xMin": 61.840001123045234,
            "xMax": 1031,
            "yMin": 0,
            "yMax": 1472,
            "ha": 1472,
            "leftSideBearing": 61,
            "advanceWidth": 1139
        },
        "3": {
            "xMin": 86,
            "xMax": 1046,
            "yMin": -26,
            "yMax": 1472,
            "ha": 1498,
            "leftSideBearing": 86,
            "advanceWidth": 1139
        },
        "4": {
            "xMin": 26,
            "xMax": 1040,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 26,
            "advanceWidth": 1139
        },
        "5": {
            "xMin": 85,
            "xMax": 1057,
            "yMin": -25,
            "yMax": 1446,
            "ha": 1471,
            "leftSideBearing": 85,
            "advanceWidth": 1139
        },
        "6": {
            "xMin": 77,
            "xMax": 1045,
            "yMin": -25,
            "yMax": 1472,
            "ha": 1497,
            "leftSideBearing": 77,
            "advanceWidth": 1139
        },
        "7": {
            "xMin": 97,
            "xMax": 1046,
            "yMin": 0,
            "yMax": 1447,
            "ha": 1447,
            "leftSideBearing": 97,
            "advanceWidth": 1139
        },
        "8": {
            "xMin": 83,
            "xMax": 1049,
            "yMin": -25,
            "yMax": 1472,
            "ha": 1497,
            "leftSideBearing": 83,
            "advanceWidth": 1139
        },
        "9": {
            "xMin": 85,
            "xMax": 1049,
            "yMin": -25,
            "yMax": 1472,
            "ha": 1497,
            "leftSideBearing": 85,
            "advanceWidth": 1139
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 569
        },
        "!": {
            "xMin": 176,
            "xMax": 399,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 176,
            "advanceWidth": 569
        },
        "\"": {
            "xMin": 94,
            "xMax": 631,
            "yMin": 947,
            "yMax": 1466,
            "ha": 519,
            "leftSideBearing": 94,
            "advanceWidth": 727
        },
        "#": {
            "xMin": 21,
            "xMax": 1113,
            "yMin": -25,
            "yMax": 1491,
            "ha": 1516,
            "leftSideBearing": 21,
            "advanceWidth": 1139
        },
        "$": {
            "xMin": 73,
            "xMax": 1043,
            "yMin": -211,
            "yMax": 1601,
            "ha": 1812,
            "leftSideBearing": 73,
            "advanceWidth": 1139
        },
        "%": {
            "xMin": 119,
            "xMax": 1695,
            "yMin": -54,
            "yMax": 1491,
            "ha": 1545,
            "leftSideBearing": 119,
            "advanceWidth": 1821
        },
        "&": {
            "xMin": 88,
            "xMax": 1319,
            "yMin": -34,
            "yMax": 1491,
            "ha": 1525,
            "leftSideBearing": 88,
            "advanceWidth": 1366
        },
        "'": {
            "xMin": 90,
            "xMax": 295,
            "yMin": 947,
            "yMax": 1466,
            "ha": 519,
            "leftSideBearing": 90,
            "advanceWidth": 391
        },
        "(": {
            "xMin": 124,
            "xMax": 608,
            "yMin": -431,
            "yMax": 1491,
            "ha": 1922,
            "leftSideBearing": 124,
            "advanceWidth": 682
        },
        ")": {
            "xMin": 124,
            "xMax": 608,
            "yMin": -431,
            "yMax": 1491,
            "ha": 1922,
            "leftSideBearing": 124,
            "advanceWidth": 682
        },
        "*": {
            "xMin": 64,
            "xMax": 725,
            "yMin": 867,
            "yMax": 1491,
            "ha": 624,
            "leftSideBearing": 64,
            "advanceWidth": 797
        },
        "+": {
            "xMin": 114,
            "xMax": 1082,
            "yMin": 237,
            "yMax": 1206,
            "ha": 969,
            "leftSideBearing": 114,
            "advanceWidth": 1196
        },
        ",": {
            "xMin": 170,
            "xMax": 387,
            "yMin": -290,
            "yMax": 205,
            "ha": 495,
            "leftSideBearing": 170,
            "advanceWidth": 569
        },
        "-": {
            "xMin": 65,
            "xMax": 618,
            "yMin": 440,
            "yMax": 621,
            "ha": 181,
            "leftSideBearing": 65,
            "advanceWidth": 682
        },
        ".": {
            "xMin": 186,
            "xMax": 391,
            "yMin": 0,
            "yMax": 205,
            "ha": 205,
            "leftSideBearing": 186,
            "advanceWidth": 569
        },
        "/": {
            "xMin": 0,
            "xMax": 569,
            "yMin": -25,
            "yMax": 1491,
            "ha": 1516,
            "leftSideBearing": 0,
            "advanceWidth": 569
        },
        ":": {
            "xMin": 185,
            "xMax": 390,
            "yMin": 0,
            "yMax": 1062,
            "ha": 1062,
            "leftSideBearing": 185,
            "advanceWidth": 569
        },
        ";": {
            "xMin": 170,
            "xMax": 387,
            "yMin": -290,
            "yMax": 1062,
            "ha": 1352,
            "leftSideBearing": 170,
            "advanceWidth": 569
        },
        "<": {
            "xMin": 112,
            "xMax": 1083,
            "yMin": 226,
            "yMax": 1219,
            "ha": 993,
            "leftSideBearing": 112,
            "advanceWidth": 1196
        },
        "=": {
            "xMin": 114,
            "xMax": 1082,
            "yMin": 417,
            "yMax": 1030,
            "ha": 613,
            "leftSideBearing": 114,
            "advanceWidth": 1196
        },
        ">": {
            "xMin": 112,
            "xMax": 1083,
            "yMin": 226,
            "yMax": 1219,
            "ha": 993,
            "leftSideBearing": 112,
            "advanceWidth": 1196
        },
        "?": {
            "xMin": 90,
            "xMax": 1036,
            "yMin": 0,
            "yMax": 1491,
            "ha": 1491,
            "leftSideBearing": 90,
            "advanceWidth": 1139
        },
        "@": {
            "xMin": 111,
            "xMax": 2005,
            "yMin": -431,
            "yMax": 1493,
            "ha": 1924,
            "leftSideBearing": 111,
            "advanceWidth": 2079
        },
        "A": {
            "xMin": -3,
            "xMax": 1369,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": -3,
            "advanceWidth": 1366
        },
        "B": {
            "xMin": 150,
            "xMax": 1257,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 150,
            "advanceWidth": 1366
        },
        "C": {
            "xMin": 102,
            "xMax": 1398,
            "yMin": -25,
            "yMax": 1491,
            "ha": 1516,
            "leftSideBearing": 102,
            "advanceWidth": 1479
        },
        "D": {
            "xMin": 158,
            "xMax": 1370,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 158,
            "advanceWidth": 1479
        },
        "E": {
            "xMin": 162,
            "xMax": 1256,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 162,
            "advanceWidth": 1366
        },
        "F": {
            "xMin": 168,
            "xMax": 1157,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 168,
            "advanceWidth": 1251
        },
        "G": {
            "xMin": 109,
            "xMax": 1465,
            "yMin": -25,
            "yMax": 1491,
            "ha": 1516,
            "leftSideBearing": 109,
            "advanceWidth": 1593
        },
        "H": {
            "xMin": 164,
            "xMax": 1314,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 164,
            "advanceWidth": 1479
        },
        "I": {
            "xMin": 191,
            "xMax": 385,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 191,
            "advanceWidth": 569
        },
        "J": {
            "xMin": 58.84976474807333,
            "xMax": 865,
            "yMin": -25,
            "yMax": 1466,
            "ha": 1491,
            "leftSideBearing": 58,
            "advanceWidth": 1024
        },
        "K": {
            "xMin": 150,
            "xMax": 1362,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 150,
            "advanceWidth": 1366
        },
        "L": {
            "xMin": 150,
            "xMax": 1066,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 150,
            "advanceWidth": 1139
        },
        "M": {
            "xMin": 152,
            "xMax": 1551,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 152,
            "advanceWidth": 1706
        },
        "N": {
            "xMin": 156,
            "xMax": 1311,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 156,
            "advanceWidth": 1479
        },
        "O": {
            "xMin": 99,
            "xMax": 1501,
            "yMin": -25,
            "yMax": 1492,
            "ha": 1517,
            "leftSideBearing": 99,
            "advanceWidth": 1593
        },
        "P": {
            "xMin": 158,
            "xMax": 1277,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 158,
            "advanceWidth": 1366
        },
        "Q": {
            "xMin": 88,
            "xMax": 1518,
            "yMin": -114,
            "yMax": 1492,
            "ha": 1606,
            "leftSideBearing": 88,
            "advanceWidth": 1593
        },
        "R": {
            "xMin": 161,
            "xMax": 1453,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 161,
            "advanceWidth": 1479
        },
        "S": {
            "xMin": 92,
            "xMax": 1259,
            "yMin": -25,
            "yMax": 1491,
            "ha": 1516,
            "leftSideBearing": 92,
            "advanceWidth": 1366
        },
        "T": {
            "xMin": 48,
            "xMax": 1210,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 48,
            "advanceWidth": 1251
        },
        "U": {
            "xMin": 161,
            "xMax": 1314,
            "yMin": -25,
            "yMax": 1466,
            "ha": 1491,
            "leftSideBearing": 161,
            "advanceWidth": 1479
        },
        "V": {
            "xMin": 9,
            "xMax": 1350,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 9,
            "advanceWidth": 1366
        },
        "W": {
            "xMin": 25,
            "xMax": 1910,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 25,
            "advanceWidth": 1933
        },
        "X": {
            "xMin": 9,
            "xMax": 1353,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 9,
            "advanceWidth": 1366
        },
        "Y": {
            "xMin": 6,
            "xMax": 1350,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 6,
            "advanceWidth": 1366
        },
        "Z": {
            "xMin": 41,
            "xMax": 1200,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 41,
            "advanceWidth": 1251
        },
        "[": {
            "xMin": 139,
            "xMax": 536,
            "yMin": -407,
            "yMax": 1466,
            "ha": 1873,
            "leftSideBearing": 139,
            "advanceWidth": 569
        },
        "\\": {
            "xMin": 0,
            "xMax": 569,
            "yMin": -25,
            "yMax": 1491,
            "ha": 1516,
            "leftSideBearing": 0,
            "advanceWidth": 569
        },
        "]": {
            "xMin": 39,
            "xMax": 436,
            "yMin": -407,
            "yMax": 1466,
            "ha": 1873,
            "leftSideBearing": 39,
            "advanceWidth": 569
        },
        "^": {
            "xMin": 54,
            "xMax": 907,
            "yMin": 690,
            "yMax": 1491,
            "ha": 801,
            "leftSideBearing": 54,
            "advanceWidth": 961
        },
        "_": {
            "xMin": -31,
            "xMax": 1162,
            "yMin": -407,
            "yMax": -277,
            "ha": 130,
            "leftSideBearing": -31,
            "advanceWidth": 1139
        },
        "`": {
            "xMin": 89,
            "xMax": 465,
            "yMin": 1194,
            "yMax": 1474,
            "ha": 280,
            "leftSideBearing": 89,
            "advanceWidth": 682
        },
        "a": {
            "xMin": 74,
            "xMax": 1052,
            "yMin": -24,
            "yMax": 1086,
            "ha": 1110,
            "leftSideBearing": 74,
            "advanceWidth": 1139
        },
        "b": {
            "xMin": 134,
            "xMax": 1055,
            "yMin": -24,
            "yMax": 1466,
            "ha": 1490,
            "leftSideBearing": 134,
            "advanceWidth": 1139
        },
        "c": {
            "xMin": 80,
            "xMax": 1005,
            "yMin": -24,
            "yMax": 1086,
            "ha": 1110,
            "leftSideBearing": 80,
            "advanceWidth": 1024
        },
        "d": {
            "xMin": 70,
            "xMax": 991,
            "yMin": -24,
            "yMax": 1466,
            "ha": 1490,
            "leftSideBearing": 70,
            "advanceWidth": 1139
        },
        "e": {
            "xMin": 75,
            "xMax": 1054,
            "yMin": -24,
            "yMax": 1086,
            "ha": 1110,
            "leftSideBearing": 75,
            "advanceWidth": 1139
        },
        "f": {
            "xMin": 19,
            "xMax": 640,
            "yMin": 0,
            "yMax": 1491,
            "ha": 1491,
            "leftSideBearing": 19,
            "advanceWidth": 569
        },
        "g": {
            "xMin": 66,
            "xMax": 1002,
            "yMin": -431,
            "yMax": 1086,
            "ha": 1517,
            "leftSideBearing": 66,
            "advanceWidth": 1139
        },
        "h": {
            "xMin": 135,
            "xMax": 1000,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 135,
            "advanceWidth": 1139
        },
        "i": {
            "xMin": 136,
            "xMax": 316,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 136,
            "advanceWidth": 455
        },
        "j": {
            "xMin": -94,
            "xMax": 314,
            "yMin": -431,
            "yMax": 1466,
            "ha": 1897,
            "leftSideBearing": -94,
            "advanceWidth": 455
        },
        "k": {
            "xMin": 136,
            "xMax": 1016,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 136,
            "advanceWidth": 1024
        },
        "l": {
            "xMin": 131,
            "xMax": 311,
            "yMin": 0,
            "yMax": 1466,
            "ha": 1466,
            "leftSideBearing": 131,
            "advanceWidth": 455
        },
        "m": {
            "xMin": 135,
            "xMax": 1574,
            "yMin": 0,
            "yMax": 1086,
            "ha": 1086,
            "leftSideBearing": 135,
            "advanceWidth": 1706
        },
        "n": {
            "xMin": 135,
            "xMax": 998,
            "yMin": 0,
            "yMax": 1086,
            "ha": 1086,
            "leftSideBearing": 135,
            "advanceWidth": 1139
        },
        "o": {
            "xMin": 68,
            "xMax": 1063,
            "yMin": -24,
            "yMax": 1086,
            "ha": 1110,
            "leftSideBearing": 68,
            "advanceWidth": 1139
        },
        "p": {
            "xMin": 135,
            "xMax": 1057,
            "yMin": -407,
            "yMax": 1086,
            "ha": 1493,
            "leftSideBearing": 135,
            "advanceWidth": 1139
        },
        "q": {
            "xMin": 72,
            "xMax": 992,
            "yMin": -407,
            "yMax": 1086,
            "ha": 1493,
            "leftSideBearing": 72,
            "advanceWidth": 1139
        },
        "r": {
            "xMin": 133,
            "xMax": 710,
            "yMin": 0,
            "yMax": 1086,
            "ha": 1086,
            "leftSideBearing": 133,
            "advanceWidth": 682
        },
        "s": {
            "xMin": 63,
            "xMax": 945,
            "yMin": -24,
            "yMax": 1086,
            "ha": 1110,
            "leftSideBearing": 63,
            "advanceWidth": 1024
        },
        "t": {
            "xMin": 36,
            "xMax": 554,
            "yMin": -14,
            "yMax": 1433,
            "ha": 1447,
            "leftSideBearing": 36,
            "advanceWidth": 569
        },
        "u": {
            "xMin": 131,
            "xMax": 992,
            "yMin": -24,
            "yMax": 1062,
            "ha": 1086,
            "leftSideBearing": 131,
            "advanceWidth": 1139
        },
        "v": {
            "xMin": 26,
            "xMax": 1000,
            "yMin": 0,
            "yMax": 1062,
            "ha": 1062,
            "leftSideBearing": 26,
            "advanceWidth": 1024
        },
        "w": {
            "xMin": 6,
            "xMax": 1463,
            "yMin": 0,
            "yMax": 1062,
            "ha": 1062,
            "leftSideBearing": 6,
            "advanceWidth": 1479
        },
        "x": {
            "xMin": 15,
            "xMax": 1009,
            "yMin": 0,
            "yMax": 1062,
            "ha": 1062,
            "leftSideBearing": 15,
            "advanceWidth": 1024
        },
        "y": {
            "xMin": 33,
            "xMax": 1006,
            "yMin": -431,
            "yMax": 1062,
            "ha": 1493,
            "leftSideBearing": 33,
            "advanceWidth": 1024
        },
        "z": {
            "xMin": 40,
            "xMax": 980,
            "yMin": 0,
            "yMax": 1062,
            "ha": 1062,
            "leftSideBearing": 40,
            "advanceWidth": 1024
        },
        "{": {
            "xMin": 57,
            "xMax": 636,
            "yMin": -431,
            "yMax": 1491,
            "ha": 1922,
            "leftSideBearing": 57,
            "advanceWidth": 684
        },
        "|": {
            "xMin": 188,
            "xMax": 345,
            "yMin": -431,
            "yMax": 1491,
            "ha": 1922,
            "leftSideBearing": 188,
            "advanceWidth": 532
        },
        "}": {
            "xMin": 47,
            "xMax": 626,
            "yMin": -431,
            "yMax": 1491,
            "ha": 1922,
            "leftSideBearing": 47,
            "advanceWidth": 684
        },
        "~": {
            "xMin": 87,
            "xMax": 1110,
            "yMin": 557,
            "yMax": 885,
            "ha": 328,
            "leftSideBearing": 87,
            "advanceWidth": 1196
        }
    },
    "fontFamily": "Arial",
    "resolution": 2048,
    "generatedOn": "2020-10-18T18:48:11.823Z"
};


/***/ }),

/***/ "./src/styles/font_metrics/ssp-sans-metrics.js":
/*!*****************************************************!*\
  !*** ./src/styles/font_metrics/ssp-sans-metrics.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SourceSansProFont: () => (/* binding */ SourceSansProFont)
/* harmony export */ });
const SourceSansProFont = {
    smufl: false,
    name: "Sans",
    spacing: 50,
    description: "Open-source Sans font from Adobe",
    serifs: true,
    monospaced: false,
    superscriptOffset: 0.66,
    subscriptOffset: 0.66,
    maxSizeGlyph: 'H',
    "fontFamily": "Source Sans Pro",
    "resolution": 1000,
    "generatedOn": "2020-11-01T21:31:30.347Z",
    "glyphs": {
        "0": {
            "xMin": 44,
            "xMax": 453,
            "yMin": -12,
            "yMax": 650,
            "ha": 662,
            "leftSideBearing": 44,
            "advanceWidth": 497
        },
        "1": {
            "xMin": 79,
            "xMax": 439,
            "yMin": 0,
            "yMax": 638,
            "ha": 638,
            "leftSideBearing": 79,
            "advanceWidth": 497
        },
        "2": {
            "xMin": 36,
            "xMax": 452,
            "yMin": 0,
            "yMax": 650,
            "ha": 650,
            "leftSideBearing": 36,
            "advanceWidth": 497
        },
        "3": {
            "xMin": 26,
            "xMax": 446,
            "yMin": -12,
            "yMax": 650,
            "ha": 662,
            "leftSideBearing": 26,
            "advanceWidth": 497
        },
        "4": {
            "xMin": 17,
            "xMax": 469,
            "yMin": 0,
            "yMax": 638,
            "ha": 638,
            "leftSideBearing": 17,
            "advanceWidth": 497
        },
        "5": {
            "xMin": 25,
            "xMax": 449,
            "yMin": -12,
            "yMax": 638,
            "ha": 650,
            "leftSideBearing": 25,
            "advanceWidth": 497
        },
        "6": {
            "xMin": 48,
            "xMax": 457,
            "yMin": -12,
            "yMax": 650,
            "ha": 662,
            "leftSideBearing": 48,
            "advanceWidth": 497
        },
        "7": {
            "xMin": 44,
            "xMax": 455,
            "yMin": 0,
            "yMax": 638,
            "ha": 638,
            "leftSideBearing": 44,
            "advanceWidth": 497
        },
        "8": {
            "xMin": 41,
            "xMax": 456,
            "yMin": -12,
            "yMax": 650,
            "ha": 662,
            "leftSideBearing": 41,
            "advanceWidth": 497
        },
        "9": {
            "xMin": 40,
            "xMax": 448,
            "yMin": -12,
            "yMax": 650,
            "ha": 662,
            "leftSideBearing": 40,
            "advanceWidth": 497
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 200
        },
        "!": {
            "xMin": 85,
            "xMax": 204,
            "yMin": -12,
            "yMax": 670,
            "ha": 682,
            "leftSideBearing": 85,
            "advanceWidth": 289
        },
        "\"": {
            "xMin": 80,
            "xMax": 344,
            "yMin": 431,
            "yMax": 690,
            "ha": 259,
            "leftSideBearing": 80,
            "advanceWidth": 425
        },
        "#": {
            "xMin": 35,
            "xMax": 467,
            "yMin": 0,
            "yMax": 650,
            "ha": 650,
            "leftSideBearing": 35,
            "advanceWidth": 497
        },
        "$": {
            "xMin": 52,
            "xMax": 437,
            "yMin": -110,
            "yMax": 748,
            "ha": 858,
            "leftSideBearing": 52,
            "advanceWidth": 497
        },
        "%": {
            "xMin": 35,
            "xMax": 790,
            "yMin": -12,
            "yMax": 668,
            "ha": 680,
            "leftSideBearing": 35,
            "advanceWidth": 824
        },
        "&": {
            "xMin": 32,
            "xMax": 594,
            "yMin": -12,
            "yMax": 668,
            "ha": 680,
            "leftSideBearing": 32,
            "advanceWidth": 609
        },
        "'": {
            "xMin": 80,
            "xMax": 168,
            "yMin": 431,
            "yMax": 690,
            "ha": 259,
            "leftSideBearing": 80,
            "advanceWidth": 249
        },
        "(": {
            "xMin": 82,
            "xMax": 265,
            "yMin": -176,
            "yMax": 732,
            "ha": 908,
            "leftSideBearing": 82,
            "advanceWidth": 303
        },
        ")": {
            "xMin": 38,
            "xMax": 221,
            "yMin": -176,
            "yMax": 732,
            "ha": 908,
            "leftSideBearing": 38,
            "advanceWidth": 303
        },
        "*": {
            "xMin": 58,
            "xMax": 360,
            "yMin": 420,
            "yMax": 712,
            "ha": 292,
            "leftSideBearing": 58,
            "advanceWidth": 418
        },
        "+": {
            "xMin": 34,
            "xMax": 463,
            "yMin": 104,
            "yMax": 556,
            "ha": 452,
            "leftSideBearing": 34,
            "advanceWidth": 497
        },
        ",": {
            "xMin": 47,
            "xMax": 198,
            "yMin": -170,
            "yMax": 114,
            "ha": 284,
            "leftSideBearing": 47,
            "advanceWidth": 249
        },
        "-": {
            "xMin": 41,
            "xMax": 271,
            "yMin": 219,
            "yMax": 282,
            "ha": 63,
            "leftSideBearing": 41,
            "advanceWidth": 311
        },
        ".": {
            "xMin": 65,
            "xMax": 184,
            "yMin": -12,
            "yMax": 114,
            "ha": 126,
            "leftSideBearing": 65,
            "advanceWidth": 249
        },
        "/": {
            "xMin": 10,
            "xMax": 337,
            "yMin": -160,
            "yMax": 710,
            "ha": 870,
            "leftSideBearing": 10,
            "advanceWidth": 350
        },
        ":": {
            "xMin": 65,
            "xMax": 184,
            "yMin": -12,
            "yMax": 475,
            "ha": 487,
            "leftSideBearing": 65,
            "advanceWidth": 249
        },
        ";": {
            "xMin": 47,
            "xMax": 198,
            "yMin": -170,
            "yMax": 475,
            "ha": 645,
            "leftSideBearing": 47,
            "advanceWidth": 249
        },
        "<": {
            "xMin": 34,
            "xMax": 463,
            "yMin": 131,
            "yMax": 533,
            "ha": 402,
            "leftSideBearing": 34,
            "advanceWidth": 497
        },
        "=": {
            "xMin": 34,
            "xMax": 463,
            "yMin": 193,
            "yMax": 468,
            "ha": 275,
            "leftSideBearing": 34,
            "advanceWidth": 497
        },
        ">": {
            "xMin": 34,
            "xMax": 463,
            "yMin": 131,
            "yMax": 533,
            "ha": 402,
            "leftSideBearing": 34,
            "advanceWidth": 497
        },
        "?": {
            "xMin": 38,
            "xMax": 377,
            "yMin": -12,
            "yMax": 682,
            "ha": 694,
            "leftSideBearing": 38,
            "advanceWidth": 425
        },
        "@": {
            "xMin": 51,
            "xMax": 796,
            "yMin": -155,
            "yMax": 646,
            "ha": 801,
            "leftSideBearing": 51,
            "advanceWidth": 847
        },
        "A": {
            "xMin": 3,
            "xMax": 541,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 3,
            "advanceWidth": 544
        },
        "B": {
            "xMin": 90,
            "xMax": 548,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 588
        },
        "C": {
            "xMin": 52,
            "xMax": 539,
            "yMin": -12,
            "yMax": 668,
            "ha": 680,
            "leftSideBearing": 52,
            "advanceWidth": 571
        },
        "D": {
            "xMin": 90,
            "xMax": 564,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 615
        },
        "E": {
            "xMin": 90,
            "xMax": 478,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 527
        },
        "F": {
            "xMin": 90,
            "xMax": 468,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 494
        },
        "G": {
            "xMin": 52,
            "xMax": 550,
            "yMin": -12,
            "yMax": 668,
            "ha": 680,
            "leftSideBearing": 52,
            "advanceWidth": 617
        },
        "H": {
            "xMin": 90,
            "xMax": 562,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 652
        },
        "I": {
            "xMin": 90,
            "xMax": 173,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 263
        },
        "J": {
            "xMin": 31,
            "xMax": 393,
            "yMin": -12,
            "yMax": 656,
            "ha": 668,
            "leftSideBearing": 31,
            "advanceWidth": 480
        },
        "K": {
            "xMin": 90,
            "xMax": 575,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 579
        },
        "L": {
            "xMin": 90,
            "xMax": 460,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 486
        },
        "M": {
            "xMin": 90,
            "xMax": 637,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 727
        },
        "N": {
            "xMin": 90,
            "xMax": 557,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 647
        },
        "O": {
            "xMin": 52,
            "xMax": 613,
            "yMin": -12,
            "yMax": 668,
            "ha": 680,
            "leftSideBearing": 52,
            "advanceWidth": 664
        },
        "P": {
            "xMin": 90,
            "xMax": 523,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 566
        },
        "Q": {
            "xMin": 52,
            "xMax": 627,
            "yMin": -165,
            "yMax": 668,
            "ha": 833,
            "leftSideBearing": 52,
            "advanceWidth": 664
        },
        "R": {
            "xMin": 90,
            "xMax": 544,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 90,
            "advanceWidth": 569
        },
        "S": {
            "xMin": 42,
            "xMax": 495,
            "yMin": -12,
            "yMax": 668,
            "ha": 680,
            "leftSideBearing": 42,
            "advanceWidth": 534
        },
        "T": {
            "xMin": 28,
            "xMax": 508,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 28,
            "advanceWidth": 536
        },
        "U": {
            "xMin": 87,
            "xMax": 558,
            "yMin": -12,
            "yMax": 656,
            "ha": 668,
            "leftSideBearing": 87,
            "advanceWidth": 645
        },
        "V": {
            "xMin": 0,
            "xMax": 515,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 0,
            "advanceWidth": 515
        },
        "W": {
            "xMin": 23,
            "xMax": 762,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 23,
            "advanceWidth": 786
        },
        "X": {
            "xMin": 15,
            "xMax": 498,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 15,
            "advanceWidth": 513
        },
        "Y": {
            "xMin": -1,
            "xMax": 477,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": -1,
            "advanceWidth": 476
        },
        "Z": {
            "xMin": 45,
            "xMax": 497,
            "yMin": 0,
            "yMax": 656,
            "ha": 656,
            "leftSideBearing": 45,
            "advanceWidth": 539
        },
        "[": {
            "xMin": 94,
            "xMax": 273,
            "yMin": -152,
            "yMax": 708,
            "ha": 860,
            "leftSideBearing": 94,
            "advanceWidth": 303
        },
        "\\": {
            "xMin": 14,
            "xMax": 340,
            "yMin": -160,
            "yMax": 710,
            "ha": 870,
            "leftSideBearing": 14,
            "advanceWidth": 350
        },
        "]": {
            "xMin": 31,
            "xMax": 209,
            "yMin": -152,
            "yMax": 708,
            "ha": 860,
            "leftSideBearing": 31,
            "advanceWidth": 303
        },
        "^": {
            "xMin": 60,
            "xMax": 437,
            "yMin": 284,
            "yMax": 670,
            "ha": 386,
            "leftSideBearing": 60,
            "advanceWidth": 497
        },
        "_": {
            "xMin": 12,
            "xMax": 488,
            "yMin": -126,
            "yMax": -71,
            "ha": 55,
            "leftSideBearing": 12,
            "advanceWidth": 500
        },
        "`": {
            "xMin": 128,
            "xMax": 327,
            "yMin": 573,
            "yMax": 781,
            "ha": 208,
            "leftSideBearing": 128,
            "advanceWidth": 542
        },
        "a": {
            "xMin": 52,
            "xMax": 433,
            "yMin": -12,
            "yMax": 498,
            "ha": 510,
            "leftSideBearing": 52,
            "advanceWidth": 504
        },
        "b": {
            "xMin": 82,
            "xMax": 507,
            "yMin": -12,
            "yMax": 712,
            "ha": 724,
            "leftSideBearing": 82,
            "advanceWidth": 553
        },
        "c": {
            "xMin": 46,
            "xMax": 431,
            "yMin": -12,
            "yMax": 498,
            "ha": 510,
            "leftSideBearing": 46,
            "advanceWidth": 456
        },
        "d": {
            "xMin": 47,
            "xMax": 473,
            "yMin": -12,
            "yMax": 712,
            "ha": 724,
            "leftSideBearing": 47,
            "advanceWidth": 555
        },
        "e": {
            "xMin": 46,
            "xMax": 458,
            "yMin": -12,
            "yMax": 498,
            "ha": 510,
            "leftSideBearing": 46,
            "advanceWidth": 496
        },
        "f": {
            "xMin": 30,
            "xMax": 319,
            "yMin": 0,
            "yMax": 724,
            "ha": 724,
            "leftSideBearing": 30,
            "advanceWidth": 292
        },
        "g": {
            "xMin": 45,
            "xMax": 492,
            "yMin": -224,
            "yMax": 498,
            "ha": 722,
            "leftSideBearing": 45,
            "advanceWidth": 504
        },
        "h": {
            "xMin": 82,
            "xMax": 471,
            "yMin": 0,
            "yMax": 712,
            "ha": 712,
            "leftSideBearing": 82,
            "advanceWidth": 544
        },
        "i": {
            "xMin": 67,
            "xMax": 181,
            "yMin": 0,
            "yMax": 692,
            "ha": 692,
            "leftSideBearing": 67,
            "advanceWidth": 246
        },
        "j": {
            "xMin": -40,
            "xMax": 181,
            "yMin": -217,
            "yMax": 692,
            "ha": 909,
            "leftSideBearing": -40,
            "advanceWidth": 247
        },
        "k": {
            "xMin": 82,
            "xMax": 486,
            "yMin": 0,
            "yMax": 712,
            "ha": 712,
            "leftSideBearing": 82,
            "advanceWidth": 495
        },
        "l": {
            "xMin": 82,
            "xMax": 216,
            "yMin": -12,
            "yMax": 712,
            "ha": 724,
            "leftSideBearing": 82,
            "advanceWidth": 255
        },
        "m": {
            "xMin": 82,
            "xMax": 753,
            "yMin": 0,
            "yMax": 498,
            "ha": 498,
            "leftSideBearing": 82,
            "advanceWidth": 829
        },
        "n": {
            "xMin": 82,
            "xMax": 471,
            "yMin": 0,
            "yMax": 498,
            "ha": 498,
            "leftSideBearing": 82,
            "advanceWidth": 547
        },
        "o": {
            "xMin": 46,
            "xMax": 496,
            "yMin": -12,
            "yMax": 498,
            "ha": 510,
            "leftSideBearing": 46,
            "advanceWidth": 542
        },
        "p": {
            "xMin": 82,
            "xMax": 507,
            "yMin": -205,
            "yMax": 498,
            "ha": 703,
            "leftSideBearing": 82,
            "advanceWidth": 555
        },
        "q": {
            "xMin": 47,
            "xMax": 473,
            "yMin": -205,
            "yMax": 498,
            "ha": 703,
            "leftSideBearing": 47,
            "advanceWidth": 555
        },
        "r": {
            "xMin": 82,
            "xMax": 350,
            "yMin": 0,
            "yMax": 498,
            "ha": 498,
            "leftSideBearing": 82,
            "advanceWidth": 347
        },
        "s": {
            "xMin": 28,
            "xMax": 387,
            "yMin": -12,
            "yMax": 498,
            "ha": 510,
            "leftSideBearing": 28,
            "advanceWidth": 419
        },
        "t": {
            "xMin": 24,
            "xMax": 325,
            "yMin": -12,
            "yMax": 622,
            "ha": 634,
            "leftSideBearing": 24,
            "advanceWidth": 338
        },
        "u": {
            "xMin": 75,
            "xMax": 462,
            "yMin": -12,
            "yMax": 486,
            "ha": 498,
            "leftSideBearing": 75,
            "advanceWidth": 544
        },
        "v": {
            "xMin": 12,
            "xMax": 455,
            "yMin": 0,
            "yMax": 486,
            "ha": 486,
            "leftSideBearing": 12,
            "advanceWidth": 467
        },
        "w": {
            "xMin": 24,
            "xMax": 694,
            "yMin": 0,
            "yMax": 486,
            "ha": 486,
            "leftSideBearing": 24,
            "advanceWidth": 718
        },
        "x": {
            "xMin": 14,
            "xMax": 432,
            "yMin": 0,
            "yMax": 486,
            "ha": 486,
            "leftSideBearing": 14,
            "advanceWidth": 446
        },
        "y": {
            "xMin": 12,
            "xMax": 455,
            "yMin": -209,
            "yMax": 486,
            "ha": 695,
            "leftSideBearing": 12,
            "advanceWidth": 467
        },
        "z": {
            "xMin": 31,
            "xMax": 399,
            "yMin": 0,
            "yMax": 486,
            "ha": 486,
            "leftSideBearing": 31,
            "advanceWidth": 425
        },
        "{": {
            "xMin": 34,
            "xMax": 273,
            "yMin": -152,
            "yMax": 708,
            "ha": 860,
            "leftSideBearing": 34,
            "advanceWidth": 303
        },
        "|": {
            "xMin": 92,
            "xMax": 150,
            "yMin": -250,
            "yMax": 750,
            "ha": 1000,
            "leftSideBearing": 92,
            "advanceWidth": 241
        },
        "}": {
            "xMin": 31,
            "xMax": 269,
            "yMin": -152,
            "yMax": 708,
            "ha": 860,
            "leftSideBearing": 31,
            "advanceWidth": 303
        },
        "~": {
            "xMin": 36,
            "xMax": 461,
            "yMin": 257,
            "yMax": 403,
            "ha": 146,
            "leftSideBearing": 36,
            "advanceWidth": 497
        }
    },
};


/***/ }),

/***/ "./src/styles/font_metrics/ssp-serif-metrics.js":
/*!******************************************************!*\
  !*** ./src/styles/font_metrics/ssp-serif-metrics.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SourceSerifProFont: () => (/* binding */ SourceSerifProFont)
/* harmony export */ });
const SourceSerifProFont = {
    smufl: false,
    name: "Serif",
    spacing: 50,
    description: "Open-source Serif font from Adobe",
    serifs: true,
    monospaced: false,
    superscriptOffset: 0.66,
    subscriptOffset: 0.66,
    maxSizeGlyph: 'H',
    "fontFamily": "Source Serif Pro",
    "resolution": 1000,
    "glyphs": {
        "0": {
            "xMin": 41,
            "xMax": 460,
            "yMin": -13,
            "yMax": 659,
            "ha": 672,
            "leftSideBearing": 41,
            "advanceWidth": 500
        },
        "1": {
            "xMin": 74,
            "xMax": 445,
            "yMin": 0,
            "yMax": 654,
            "ha": 654,
            "leftSideBearing": 74,
            "advanceWidth": 500
        },
        "2": {
            "xMin": 44,
            "xMax": 460,
            "yMin": 0,
            "yMax": 659,
            "ha": 659,
            "leftSideBearing": 44,
            "advanceWidth": 500
        },
        "3": {
            "xMin": 44,
            "xMax": 460,
            "yMin": -13,
            "yMax": 659,
            "ha": 672,
            "leftSideBearing": 44,
            "advanceWidth": 500
        },
        "4": {
            "xMin": 24,
            "xMax": 484,
            "yMin": 0,
            "yMax": 655,
            "ha": 655,
            "leftSideBearing": 24,
            "advanceWidth": 500
        },
        "5": {
            "xMin": 38,
            "xMax": 458,
            "yMin": -13,
            "yMax": 646,
            "ha": 659,
            "leftSideBearing": 38,
            "advanceWidth": 500
        },
        "6": {
            "xMin": 40,
            "xMax": 457,
            "yMin": -13,
            "yMax": 659,
            "ha": 672,
            "leftSideBearing": 40,
            "advanceWidth": 500
        },
        "7": {
            "xMin": 51,
            "xMax": 464,
            "yMin": 0,
            "yMax": 646,
            "ha": 646,
            "leftSideBearing": 51,
            "advanceWidth": 500
        },
        "8": {
            "xMin": 44,
            "xMax": 455,
            "yMin": -13,
            "yMax": 659,
            "ha": 672,
            "leftSideBearing": 44,
            "advanceWidth": 500
        },
        "9": {
            "xMin": 29,
            "xMax": 450,
            "yMin": -20,
            "yMax": 659,
            "ha": 679,
            "leftSideBearing": 29,
            "advanceWidth": 500
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 233
        },
        "!": {
            "xMin": 80,
            "xMax": 209,
            "yMin": -13,
            "yMax": 684,
            "ha": 697,
            "leftSideBearing": 80,
            "advanceWidth": 289
        },
        "\"": {
            "xMin": 40,
            "xMax": 315,
            "yMin": 429,
            "yMax": 737,
            "ha": 308,
            "leftSideBearing": 40,
            "advanceWidth": 356
        },
        "#": {
            "xMin": 25,
            "xMax": 502,
            "yMin": 0,
            "yMax": 650,
            "ha": 650,
            "leftSideBearing": 25,
            "advanceWidth": 526
        },
        "$": {
            "xMin": 51,
            "xMax": 464,
            "yMin": -115,
            "yMax": 749,
            "ha": 864,
            "leftSideBearing": 51,
            "advanceWidth": 500
        },
        "%": {
            "xMin": 69,
            "xMax": 792,
            "yMin": -25,
            "yMax": 669,
            "ha": 694,
            "leftSideBearing": 69,
            "advanceWidth": 861
        },
        "&": {
            "xMin": 27,
            "xMax": 675,
            "yMin": -13,
            "yMax": 684,
            "ha": 697,
            "leftSideBearing": 27,
            "advanceWidth": 720
        },
        "'": {
            "xMin": 40,
            "xMax": 143,
            "yMin": 429,
            "yMax": 737,
            "ha": 308,
            "leftSideBearing": 40,
            "advanceWidth": 183
        },
        "(": {
            "xMin": 80,
            "xMax": 314,
            "yMin": -192,
            "yMax": 748,
            "ha": 940,
            "leftSideBearing": 80,
            "advanceWidth": 339
        },
        ")": {
            "xMin": 25,
            "xMax": 259,
            "yMin": -192,
            "yMax": 748,
            "ha": 940,
            "leftSideBearing": 25,
            "advanceWidth": 339
        },
        "*": {
            "xMin": 20,
            "xMax": 420,
            "yMin": 363,
            "yMax": 747,
            "ha": 384,
            "leftSideBearing": 20,
            "advanceWidth": 439
        },
        "+": {
            "xMin": 29,
            "xMax": 502,
            "yMin": 77,
            "yMax": 577,
            "ha": 500,
            "leftSideBearing": 29,
            "advanceWidth": 531
        },
        ",": {
            "xMin": 6,
            "xMax": 213,
            "yMin": -224,
            "yMax": 130,
            "ha": 354,
            "leftSideBearing": 6,
            "advanceWidth": 300
        },
        "-": {
            "xMin": 40,
            "xMax": 272,
            "yMin": 218,
            "yMax": 284,
            "ha": 66,
            "leftSideBearing": 40,
            "advanceWidth": 312
        },
        ".": {
            "xMin": 79,
            "xMax": 221,
            "yMin": -13,
            "yMax": 130,
            "ha": 143,
            "leftSideBearing": 79,
            "advanceWidth": 300
        },
        "/": {
            "xMin": 2,
            "xMax": 328,
            "yMin": -160,
            "yMax": 710,
            "ha": 870,
            "leftSideBearing": 2,
            "advanceWidth": 330
        },
        ":": {
            "xMin": 79,
            "xMax": 221,
            "yMin": -13,
            "yMax": 493,
            "ha": 506,
            "leftSideBearing": 79,
            "advanceWidth": 300
        },
        ";": {
            "xMin": 6,
            "xMax": 221,
            "yMin": -224,
            "yMax": 493,
            "ha": 717,
            "leftSideBearing": 6,
            "advanceWidth": 300
        },
        "<": {
            "xMin": 57,
            "xMax": 474,
            "yMin": 81,
            "yMax": 578,
            "ha": 497,
            "leftSideBearing": 57,
            "advanceWidth": 531
        },
        "=": {
            "xMin": 29,
            "xMax": 502,
            "yMin": 201,
            "yMax": 458,
            "ha": 257,
            "leftSideBearing": 29,
            "advanceWidth": 531
        },
        ">": {
            "xMin": 57,
            "xMax": 474,
            "yMin": 81,
            "yMax": 578,
            "ha": 497,
            "leftSideBearing": 57,
            "advanceWidth": 531
        },
        "?": {
            "xMin": 66,
            "xMax": 350,
            "yMin": -13,
            "yMax": 684,
            "ha": 697,
            "leftSideBearing": 66,
            "advanceWidth": 416
        },
        "@": {
            "xMin": 36,
            "xMax": 800,
            "yMin": -155,
            "yMax": 660,
            "ha": 815,
            "leftSideBearing": 36,
            "advanceWidth": 835
        },
        "A": {
            "xMin": 5,
            "xMax": 653,
            "yMin": 0,
            "yMax": 674,
            "ha": 674,
            "leftSideBearing": 5,
            "advanceWidth": 664
        },
        "B": {
            "xMin": 44,
            "xMax": 586,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 629
        },
        "C": {
            "xMin": 47,
            "xMax": 592,
            "yMin": -15,
            "yMax": 684,
            "ha": 699,
            "leftSideBearing": 47,
            "advanceWidth": 631
        },
        "D": {
            "xMin": 44,
            "xMax": 663,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 710
        },
        "E": {
            "xMin": 44,
            "xMax": 569,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 603
        },
        "F": {
            "xMin": 44,
            "xMax": 549,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 579
        },
        "G": {
            "xMin": 47,
            "xMax": 667,
            "yMin": -15,
            "yMax": 684,
            "ha": 699,
            "leftSideBearing": 47,
            "advanceWidth": 682
        },
        "H": {
            "xMin": 44,
            "xMax": 744,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 789
        },
        "I": {
            "xMin": 44,
            "xMax": 327,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 371
        },
        "J": {
            "xMin": -43,
            "xMax": 340,
            "yMin": -163,
            "yMax": 669,
            "ha": 832,
            "leftSideBearing": -43,
            "advanceWidth": 374
        },
        "K": {
            "xMin": 44,
            "xMax": 662,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 667
        },
        "L": {
            "xMin": 44,
            "xMax": 552,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 596
        },
        "M": {
            "xMin": 39,
            "xMax": 857,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 39,
            "advanceWidth": 902
        },
        "N": {
            "xMin": 39,
            "xMax": 695,
            "yMin": -7,
            "yMax": 669,
            "ha": 676,
            "leftSideBearing": 39,
            "advanceWidth": 735
        },
        "O": {
            "xMin": 47,
            "xMax": 660,
            "yMin": -15,
            "yMax": 684,
            "ha": 699,
            "leftSideBearing": 47,
            "advanceWidth": 707
        },
        "P": {
            "xMin": 44,
            "xMax": 567,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 44,
            "advanceWidth": 589
        },
        "Q": {
            "xMin": 47,
            "xMax": 660,
            "yMin": -216,
            "yMax": 684,
            "ha": 900,
            "leftSideBearing": 47,
            "advanceWidth": 707
        },
        "R": {
            "xMin": 44,
            "xMax": 637,
            "yMin": -10,
            "yMax": 669,
            "ha": 679,
            "leftSideBearing": 44,
            "advanceWidth": 651
        },
        "S": {
            "xMin": 40,
            "xMax": 472,
            "yMin": -15,
            "yMax": 684,
            "ha": 699,
            "leftSideBearing": 40,
            "advanceWidth": 512
        },
        "T": {
            "xMin": 20,
            "xMax": 584,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 20,
            "advanceWidth": 604
        },
        "U": {
            "xMin": 39,
            "xMax": 693,
            "yMin": -15,
            "yMax": 669,
            "ha": 684,
            "leftSideBearing": 39,
            "advanceWidth": 727
        },
        "V": {
            "xMin": 15,
            "xMax": 665,
            "yMin": -7,
            "yMax": 669,
            "ha": 676,
            "leftSideBearing": 15,
            "advanceWidth": 674
        },
        "W": {
            "xMin": 15,
            "xMax": 953,
            "yMin": -7,
            "yMax": 669,
            "ha": 676,
            "leftSideBearing": 15,
            "advanceWidth": 962
        },
        "X": {
            "xMin": 10,
            "xMax": 639,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 10,
            "advanceWidth": 648
        },
        "Y": {
            "xMin": 15,
            "xMax": 623,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 15,
            "advanceWidth": 633
        },
        "Z": {
            "xMin": 20,
            "xMax": 531,
            "yMin": 0,
            "yMax": 669,
            "ha": 669,
            "leftSideBearing": 20,
            "advanceWidth": 551
        },
        "[": {
            "xMin": 100,
            "xMax": 291,
            "yMin": -159,
            "yMax": 715,
            "ha": 874,
            "leftSideBearing": 100,
            "advanceWidth": 320
        },
        "\\": {
            "xMin": 2,
            "xMax": 328,
            "yMin": -160,
            "yMax": 710,
            "ha": 870,
            "leftSideBearing": 2,
            "advanceWidth": 330
        },
        "]": {
            "xMin": 29,
            "xMax": 220,
            "yMin": -159,
            "yMax": 715,
            "ha": 874,
            "leftSideBearing": 29,
            "advanceWidth": 320
        },
        "^": {
            "xMin": 88,
            "xMax": 446,
            "yMin": 208,
            "yMax": 481,
            "ha": 273,
            "leftSideBearing": 88,
            "advanceWidth": 531
        },
        "_": {
            "xMin": 40,
            "xMax": 472,
            "yMin": -66,
            "yMax": 0,
            "ha": 66,
            "leftSideBearing": 40,
            "advanceWidth": 512
        },
        "`": {
            "xMin": 75,
            "xMax": 256,
            "yMin": 557,
            "yMax": 758,
            "ha": 201,
            "leftSideBearing": 75,
            "advanceWidth": 400
        },
        "a": {
            "xMin": 45,
            "xMax": 503,
            "yMin": -13,
            "yMax": 488,
            "ha": 501,
            "leftSideBearing": 45,
            "advanceWidth": 509
        },
        "b": {
            "xMin": 25,
            "xMax": 532,
            "yMin": -13,
            "yMax": 739,
            "ha": 752,
            "leftSideBearing": 25,
            "advanceWidth": 577
        },
        "c": {
            "xMin": 42,
            "xMax": 453,
            "yMin": -13,
            "yMax": 488,
            "ha": 501,
            "leftSideBearing": 42,
            "advanceWidth": 488
        },
        "d": {
            "xMin": 45,
            "xMax": 551,
            "yMin": -13,
            "yMax": 739,
            "ha": 752,
            "leftSideBearing": 45,
            "advanceWidth": 567
        },
        "e": {
            "xMin": 45,
            "xMax": 461,
            "yMin": -13,
            "yMax": 488,
            "ha": 501,
            "leftSideBearing": 45,
            "advanceWidth": 510
        },
        "f": {
            "xMin": 34,
            "xMax": 426,
            "yMin": 0,
            "yMax": 749,
            "ha": 749,
            "leftSideBearing": 34,
            "advanceWidth": 354
        },
        "g": {
            "xMin": 36,
            "xMax": 495,
            "yMin": -239,
            "yMax": 488,
            "ha": 727,
            "leftSideBearing": 36,
            "advanceWidth": 518
        },
        "h": {
            "xMin": 25,
            "xMax": 571,
            "yMin": 0,
            "yMax": 739,
            "ha": 739,
            "leftSideBearing": 25,
            "advanceWidth": 601
        },
        "i": {
            "xMin": 29,
            "xMax": 267,
            "yMin": 0,
            "yMax": 726,
            "ha": 726,
            "leftSideBearing": 29,
            "advanceWidth": 298
        },
        "j": {
            "xMin": -83,
            "xMax": 220,
            "yMin": -249,
            "yMax": 726,
            "ha": 975,
            "leftSideBearing": -83,
            "advanceWidth": 277
        },
        "k": {
            "xMin": 25,
            "xMax": 547,
            "yMin": 0,
            "yMax": 739,
            "ha": 739,
            "leftSideBearing": 25,
            "advanceWidth": 547
        },
        "l": {
            "xMin": 25,
            "xMax": 273,
            "yMin": 0,
            "yMax": 739,
            "ha": 739,
            "leftSideBearing": 25,
            "advanceWidth": 298
        },
        "m": {
            "xMin": 34,
            "xMax": 872,
            "yMin": 0,
            "yMax": 488,
            "ha": 488,
            "leftSideBearing": 34,
            "advanceWidth": 901
        },
        "n": {
            "xMin": 34,
            "xMax": 576,
            "yMin": 0,
            "yMax": 488,
            "ha": 488,
            "leftSideBearing": 34,
            "advanceWidth": 606
        },
        "o": {
            "xMin": 45,
            "xMax": 504,
            "yMin": -13,
            "yMax": 488,
            "ha": 501,
            "leftSideBearing": 45,
            "advanceWidth": 549
        },
        "p": {
            "xMin": 35,
            "xMax": 538,
            "yMin": -239,
            "yMax": 488,
            "ha": 727,
            "leftSideBearing": 35,
            "advanceWidth": 583
        },
        "q": {
            "xMin": 45,
            "xMax": 556,
            "yMin": -239,
            "yMax": 488,
            "ha": 727,
            "leftSideBearing": 45,
            "advanceWidth": 557
        },
        "r": {
            "xMin": 34,
            "xMax": 416,
            "yMin": 0,
            "yMax": 488,
            "ha": 488,
            "leftSideBearing": 34,
            "advanceWidth": 423
        },
        "s": {
            "xMin": 47,
            "xMax": 395,
            "yMin": -13,
            "yMax": 488,
            "ha": 501,
            "leftSideBearing": 47,
            "advanceWidth": 434
        },
        "t": {
            "xMin": 9,
            "xMax": 323,
            "yMin": -13,
            "yMax": 611,
            "ha": 624,
            "leftSideBearing": 9,
            "advanceWidth": 325
        },
        "u": {
            "xMin": 25,
            "xMax": 549,
            "yMin": -13,
            "yMax": 481,
            "ha": 494,
            "leftSideBearing": 25,
            "advanceWidth": 583
        },
        "v": {
            "xMin": 0,
            "xMax": 496,
            "yMin": -6,
            "yMax": 475,
            "ha": 481,
            "leftSideBearing": 0,
            "advanceWidth": 505
        },
        "w": {
            "xMin": 0,
            "xMax": 754,
            "yMin": -6,
            "yMax": 475,
            "ha": 481,
            "leftSideBearing": 0,
            "advanceWidth": 764
        },
        "x": {
            "xMin": 10,
            "xMax": 516,
            "yMin": 0,
            "yMax": 475,
            "ha": 475,
            "leftSideBearing": 10,
            "advanceWidth": 526
        },
        "y": {
            "xMin": 0,
            "xMax": 512,
            "yMin": -249,
            "yMax": 475,
            "ha": 724,
            "leftSideBearing": 0,
            "advanceWidth": 512
        },
        "z": {
            "xMin": 29,
            "xMax": 431,
            "yMin": 0,
            "yMax": 475,
            "ha": 475,
            "leftSideBearing": 29,
            "advanceWidth": 456
        },
        "{": {
            "xMin": 40,
            "xMax": 314,
            "yMin": -159,
            "yMax": 715,
            "ha": 874,
            "leftSideBearing": 40,
            "advanceWidth": 344
        },
        "|": {
            "xMin": 96,
            "xMax": 155,
            "yMin": -250,
            "yMax": 750,
            "ha": 1000,
            "leftSideBearing": 96,
            "advanceWidth": 251
        },
        "}": {
            "xMin": 30,
            "xMax": 304,
            "yMin": -159,
            "yMax": 715,
            "ha": 874,
            "leftSideBearing": 30,
            "advanceWidth": 344
        },
        "~": {
            "xMin": 49,
            "xMax": 482,
            "yMin": 268,
            "yMax": 422,
            "ha": 154,
            "leftSideBearing": 49,
            "advanceWidth": 531
        }
    },
    "generatedOn": "2020-11-01T21:35:39.674Z"
};


/***/ }),

/***/ "./src/styles/font_metrics/times_metrics.js":
/*!**************************************************!*\
  !*** ./src/styles/font_metrics/times_metrics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimesFont: () => (/* binding */ TimesFont)
/* harmony export */ });
const TimesFont = {
    smufl: false,
    name: "Times New Roman",
    spacing: 50,
    Description: 'Built-in serif font',
    bold: true,
    italic: true,
    monospaced: false,
    serifs: true,
    "glyphs": {
        "0": {
            "xMin": 49,
            "xMax": 975,
            "yMin": -27,
            "yMax": 1383,
            "ha": 1410,
            "leftSideBearing": 49,
            "advanceWidth": 1024
        },
        "1": {
            "xMin": 227,
            "xMax": 811,
            "yMin": 0,
            "yMax": 1383,
            "ha": 1383,
            "leftSideBearing": 227,
            "advanceWidth": 1024
        },
        "2": {
            "xMin": 61,
            "xMax": 965,
            "yMin": 0,
            "yMax": 1383,
            "ha": 1383,
            "leftSideBearing": 61,
            "advanceWidth": 1024
        },
        "3": {
            "xMin": 88,
            "xMax": 883,
            "yMin": -27,
            "yMax": 1383,
            "ha": 1410,
            "leftSideBearing": 88,
            "advanceWidth": 1024
        },
        "4": {
            "xMin": 25,
            "xMax": 967,
            "yMin": 0,
            "yMax": 1384,
            "ha": 1384,
            "leftSideBearing": 25,
            "advanceWidth": 1024
        },
        "5": {
            "xMin": 66,
            "xMax": 898,
            "yMin": -27,
            "yMax": 1409,
            "ha": 1436,
            "leftSideBearing": 66,
            "advanceWidth": 1024
        },
        "6": {
            "xMin": 70,
            "xMax": 958,
            "yMin": -27,
            "yMax": 1401,
            "ha": 1428,
            "leftSideBearing": 70,
            "advanceWidth": 1024
        },
        "7": {
            "xMin": 41,
            "xMax": 920,
            "yMin": -16,
            "yMax": 1356,
            "ha": 1372,
            "leftSideBearing": 41,
            "advanceWidth": 1024
        },
        "8": {
            "xMin": 115,
            "xMax": 911,
            "yMin": -27,
            "yMax": 1383,
            "ha": 1410,
            "leftSideBearing": 115,
            "advanceWidth": 1024
        },
        "9": {
            "xMin": 61,
            "xMax": 940,
            "yMin": -41,
            "yMax": 1383,
            "ha": 1424,
            "leftSideBearing": 61,
            "advanceWidth": 1024
        },
        " ": {
            "xMin": 0,
            "xMax": 0,
            "yMin": 0,
            "yMax": 0,
            "ha": 0,
            "leftSideBearing": 0,
            "advanceWidth": 512
        },
        "!": {
            "xMin": 266,
            "xMax": 488,
            "yMin": -22,
            "yMax": 1383,
            "ha": 1405,
            "leftSideBearing": 266,
            "advanceWidth": 682
        },
        "\"": {
            "xMin": 157.2000021972655,
            "xMax": 678.2500021457677,
            "yMin": 881,
            "yMax": 1385,
            "ha": 504,
            "leftSideBearing": 157,
            "advanceWidth": 836
        },
        "#": {
            "xMin": 10,
            "xMax": 1016,
            "yMin": -1,
            "yMax": 1356,
            "ha": 1357,
            "leftSideBearing": 10,
            "advanceWidth": 1024
        },
        "$": {
            "xMin": 90,
            "xMax": 936,
            "yMin": -180,
            "yMax": 1492,
            "ha": 1672,
            "leftSideBearing": 90,
            "advanceWidth": 1024
        },
        "%": {
            "xMin": 125,
            "xMax": 1581,
            "yMin": -30,
            "yMax": 1388,
            "ha": 1418,
            "leftSideBearing": 125,
            "advanceWidth": 1706
        },
        "&": {
            "xMin": 86,
            "xMax": 1536,
            "yMin": -28,
            "yMax": 1383,
            "ha": 1411,
            "leftSideBearing": 86,
            "advanceWidth": 1593
        },
        "'": {
            "xMin": 97.20000219726548,
            "xMax": 273.2500021457677,
            "yMin": 881,
            "yMax": 1385,
            "ha": 504,
            "leftSideBearing": 97,
            "advanceWidth": 369
        },
        "(": {
            "xMin": 98,
            "xMax": 623,
            "yMin": -363,
            "yMax": 1383,
            "ha": 1746,
            "leftSideBearing": 98,
            "advanceWidth": 682
        },
        ")": {
            "xMin": 59,
            "xMax": 584,
            "yMin": -363,
            "yMax": 1383,
            "ha": 1746,
            "leftSideBearing": 59,
            "advanceWidth": 682
        },
        "*": {
            "xMin": 137.96078522291893,
            "xMax": 886.039214777081,
            "yMin": 543,
            "yMax": 1383,
            "ha": 840,
            "leftSideBearing": 137,
            "advanceWidth": 1024
        },
        "+": {
            "xMin": 61,
            "xMax": 1093,
            "yMin": 2,
            "yMax": 1034,
            "ha": 1032,
            "leftSideBearing": 61,
            "advanceWidth": 1155
        },
        ",": {
            "xMin": 115,
            "xMax": 399,
            "yMin": -291,
            "yMax": 208,
            "ha": 499,
            "leftSideBearing": 115,
            "advanceWidth": 512
        },
        "-": {
            "xMin": 80,
            "xMax": 584,
            "yMin": 396,
            "yMax": 525,
            "ha": 129,
            "leftSideBearing": 80,
            "advanceWidth": 682
        },
        ".": {
            "xMin": 143,
            "xMax": 371,
            "yMin": -22,
            "yMax": 205,
            "ha": 227,
            "leftSideBearing": 143,
            "advanceWidth": 512
        },
        "/": {
            "xMin": -17,
            "xMax": 586,
            "yMin": -27,
            "yMax": 1383,
            "ha": 1410,
            "leftSideBearing": -17,
            "advanceWidth": 569
        },
        ":": {
            "xMin": 166,
            "xMax": 394,
            "yMin": -22,
            "yMax": 943,
            "ha": 965,
            "leftSideBearing": 166,
            "advanceWidth": 569
        },
        ";": {
            "xMin": 164,
            "xMax": 448,
            "yMin": -290,
            "yMax": 943,
            "ha": 1233,
            "leftSideBearing": 164,
            "advanceWidth": 569
        },
        "<": {
            "xMin": 57,
            "xMax": 1098,
            "yMin": -15,
            "yMax": 1051,
            "ha": 1066,
            "leftSideBearing": 57,
            "advanceWidth": 1155
        },
        "=": {
            "xMin": 61,
            "xMax": 1093,
            "yMin": 246,
            "yMax": 791,
            "ha": 545,
            "leftSideBearing": 61,
            "advanceWidth": 1155
        },
        ">": {
            "xMin": 57,
            "xMax": 1098,
            "yMin": -15,
            "yMax": 1051,
            "ha": 1066,
            "leftSideBearing": 57,
            "advanceWidth": 1155
        },
        "?": {
            "xMin": 139,
            "xMax": 848,
            "yMin": -15,
            "yMax": 1383,
            "ha": 1398,
            "leftSideBearing": 139,
            "advanceWidth": 909
        },
        "@": {
            "xMin": 238,
            "xMax": 1657,
            "yMin": -29,
            "yMax": 1386,
            "ha": 1415,
            "leftSideBearing": 238,
            "advanceWidth": 1886
        },
        "A": {
            "xMin": 31,
            "xMax": 1445,
            "yMin": 0,
            "yMax": 1380,
            "ha": 1380,
            "leftSideBearing": 31,
            "advanceWidth": 1479
        },
        "B": {
            "xMin": 35,
            "xMax": 1214,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 35,
            "advanceWidth": 1366
        },
        "C": {
            "xMin": 57,
            "xMax": 1296,
            "yMin": -28,
            "yMax": 1383,
            "ha": 1411,
            "leftSideBearing": 57,
            "advanceWidth": 1366
        },
        "D": {
            "xMin": 33,
            "xMax": 1403,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 33,
            "advanceWidth": 1479
        },
        "E": {
            "xMin": 25,
            "xMax": 1222,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 25,
            "advanceWidth": 1251
        },
        "F": {
            "xMin": 25,
            "xMax": 1119,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 25,
            "advanceWidth": 1139
        },
        "G": {
            "xMin": 66,
            "xMax": 1452,
            "yMin": -28,
            "yMax": 1383,
            "ha": 1411,
            "leftSideBearing": 66,
            "advanceWidth": 1479
        },
        "H": {
            "xMin": 39,
            "xMax": 1438,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 39,
            "advanceWidth": 1479
        },
        "I": {
            "xMin": 37,
            "xMax": 642,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 37,
            "advanceWidth": 682
        },
        "J": {
            "xMin": 20,
            "xMax": 758,
            "yMin": -28,
            "yMax": 1356,
            "ha": 1384,
            "leftSideBearing": 20,
            "advanceWidth": 797
        },
        "K": {
            "xMin": 70,
            "xMax": 1479,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 70,
            "advanceWidth": 1479
        },
        "L": {
            "xMin": 25,
            "xMax": 1224,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 25,
            "advanceWidth": 1251
        },
        "M": {
            "xMin": 25,
            "xMax": 1768,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 25,
            "advanceWidth": 1821
        },
        "N": {
            "xMin": 25,
            "xMax": 1450,
            "yMin": -22,
            "yMax": 1356,
            "ha": 1378,
            "leftSideBearing": 25,
            "advanceWidth": 1479
        },
        "O": {
            "xMin": 70,
            "xMax": 1409,
            "yMin": -28,
            "yMax": 1383,
            "ha": 1411,
            "leftSideBearing": 70,
            "advanceWidth": 1479
        },
        "P": {
            "xMin": 33,
            "xMax": 1110,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 33,
            "advanceWidth": 1139
        },
        "Q": {
            "xMin": 70,
            "xMax": 1435,
            "yMin": -364.28571588721996,
            "yMax": 1383,
            "ha": 1747.28571588722,
            "leftSideBearing": 70,
            "advanceWidth": 1479
        },
        "R": {
            "xMin": 35,
            "xMax": 1347,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 35,
            "advanceWidth": 1366
        },
        "S": {
            "xMin": 86,
            "xMax": 1006,
            "yMin": -28,
            "yMax": 1383,
            "ha": 1411,
            "leftSideBearing": 86,
            "advanceWidth": 1139
        },
        "T": {
            "xMin": 35,
            "xMax": 1214,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 35,
            "advanceWidth": 1251
        },
        "U": {
            "xMin": 29,
            "xMax": 1444,
            "yMin": -28,
            "yMax": 1356,
            "ha": 1384,
            "leftSideBearing": 29,
            "advanceWidth": 1479
        },
        "V": {
            "xMin": 33,
            "xMax": 1428,
            "yMin": -22,
            "yMax": 1356,
            "ha": 1378,
            "leftSideBearing": 33,
            "advanceWidth": 1479
        },
        "W": {
            "xMin": 10,
            "xMax": 1906,
            "yMin": -22,
            "yMax": 1356,
            "ha": 1378,
            "leftSideBearing": 10,
            "advanceWidth": 1933
        },
        "X": {
            "xMin": 20,
            "xMax": 1449,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 20,
            "advanceWidth": 1479
        },
        "Y": {
            "xMin": 45,
            "xMax": 1441,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 45,
            "advanceWidth": 1479
        },
        "Z": {
            "xMin": 18,
            "xMax": 1222,
            "yMin": 0,
            "yMax": 1356,
            "ha": 1356,
            "leftSideBearing": 18,
            "advanceWidth": 1251
        },
        "[": {
            "xMin": 180,
            "xMax": 612,
            "yMin": -319,
            "yMax": 1355,
            "ha": 1674,
            "leftSideBearing": 180,
            "advanceWidth": 682
        },
        "\\": {
            "xMin": -17,
            "xMax": 586,
            "yMin": -27,
            "yMax": 1383,
            "ha": 1410,
            "leftSideBearing": -17,
            "advanceWidth": 569
        },
        "]": {
            "xMin": 70,
            "xMax": 502,
            "yMin": -319,
            "yMax": 1355,
            "ha": 1674,
            "leftSideBearing": 70,
            "advanceWidth": 682
        },
        "^": {
            "xMin": 49,
            "xMax": 914,
            "yMin": 608,
            "yMax": 1355,
            "ha": 747,
            "leftSideBearing": 49,
            "advanceWidth": 961
        },
        "_": {
            "xMin": 0,
            "xMax": 1024,
            "yMin": -255,
            "yMax": -153,
            "ha": 102,
            "leftSideBearing": 0,
            "advanceWidth": 1024
        },
        "`": {
            "xMin": 39,
            "xMax": 499,
            "yMin": 1037,
            "yMax": 1392.509803639748,
            "ha": 355.50980363974804,
            "leftSideBearing": 39,
            "advanceWidth": 682
        },
        "a": {
            "xMin": 76,
            "xMax": 905,
            "yMin": -20,
            "yMax": 942,
            "ha": 962,
            "leftSideBearing": 76,
            "advanceWidth": 909
        },
        "b": {
            "xMin": 6,
            "xMax": 958,
            "yMin": -20,
            "yMax": 1399,
            "ha": 1419,
            "leftSideBearing": 6,
            "advanceWidth": 1024
        },
        "c": {
            "xMin": 51,
            "xMax": 843,
            "yMin": -20,
            "yMax": 942,
            "ha": 962,
            "leftSideBearing": 51,
            "advanceWidth": 909
        },
        "d": {
            "xMin": 55,
            "xMax": 1006,
            "yMin": -20,
            "yMax": 1399,
            "ha": 1419,
            "leftSideBearing": 55,
            "advanceWidth": 1024
        },
        "e": {
            "xMin": 51,
            "xMax": 868,
            "yMin": -20,
            "yMax": 942,
            "ha": 962,
            "leftSideBearing": 51,
            "advanceWidth": 909
        },
        "f": {
            "xMin": 41,
            "xMax": 783,
            "yMin": 0,
            "yMax": 1399,
            "ha": 1399,
            "leftSideBearing": 41,
            "advanceWidth": 682
        },
        "g": {
            "xMin": 57,
            "xMax": 963,
            "yMin": -446,
            "yMax": 942,
            "ha": 1388,
            "leftSideBearing": 57,
            "advanceWidth": 1024
        },
        "h": {
            "xMin": 18,
            "xMax": 997,
            "yMin": 0,
            "yMax": 1399,
            "ha": 1399,
            "leftSideBearing": 18,
            "advanceWidth": 1024
        },
        "i": {
            "xMin": 33,
            "xMax": 516,
            "yMin": 0,
            "yMax": 1399,
            "ha": 1399,
            "leftSideBearing": 33,
            "advanceWidth": 569
        },
        "j": {
            "xMin": -142,
            "xMax": 397,
            "yMin": -446,
            "yMax": 1399,
            "ha": 1845,
            "leftSideBearing": -142,
            "advanceWidth": 569
        },
        "k": {
            "xMin": 14,
            "xMax": 1029,
            "yMin": 0,
            "yMax": 1399,
            "ha": 1399,
            "leftSideBearing": 14,
            "advanceWidth": 1024
        },
        "l": {
            "xMin": 39,
            "xMax": 523,
            "yMin": 0,
            "yMax": 1399,
            "ha": 1399,
            "leftSideBearing": 39,
            "advanceWidth": 569
        },
        "m": {
            "xMin": 33,
            "xMax": 1587,
            "yMin": 0,
            "yMax": 944,
            "ha": 944,
            "leftSideBearing": 33,
            "advanceWidth": 1593
        },
        "n": {
            "xMin": 33,
            "xMax": 993,
            "yMin": 0,
            "yMax": 944,
            "ha": 944,
            "leftSideBearing": 33,
            "advanceWidth": 1024
        },
        "o": {
            "xMin": 59,
            "xMax": 963,
            "yMin": -20,
            "yMax": 942,
            "ha": 962,
            "leftSideBearing": 59,
            "advanceWidth": 1024
        },
        "p": {
            "xMin": 10,
            "xMax": 964,
            "yMin": -443,
            "yMax": 944,
            "ha": 1387,
            "leftSideBearing": 10,
            "advanceWidth": 1024
        },
        "q": {
            "xMin": 49,
            "xMax": 999,
            "yMin": -443,
            "yMax": 942.0135137169275,
            "ha": 1385.0135137169275,
            "leftSideBearing": 49,
            "advanceWidth": 1024
        },
        "r": {
            "xMin": 10,
            "xMax": 685,
            "yMin": 0,
            "yMax": 944,
            "ha": 944,
            "leftSideBearing": 10,
            "advanceWidth": 682
        },
        "s": {
            "xMin": 104,
            "xMax": 713,
            "yMin": -20,
            "yMax": 942.0263161804552,
            "ha": 962.0263161804552,
            "leftSideBearing": 104,
            "advanceWidth": 797
        },
        "t": {
            "xMin": 27,
            "xMax": 572,
            "yMin": -18,
            "yMax": 1186,
            "ha": 1204,
            "leftSideBearing": 27,
            "advanceWidth": 569
        },
        "u": {
            "xMin": 18,
            "xMax": 981,
            "yMin": -21,
            "yMax": 921,
            "ha": 942,
            "leftSideBearing": 18,
            "advanceWidth": 1024
        },
        "v": {
            "xMin": 39,
            "xMax": 976,
            "yMin": -28,
            "yMax": 921,
            "ha": 949,
            "leftSideBearing": 39,
            "advanceWidth": 1024
        },
        "w": {
            "xMin": 43,
            "xMax": 1423,
            "yMin": -28,
            "yMax": 921,
            "ha": 949,
            "leftSideBearing": 43,
            "advanceWidth": 1479
        },
        "x": {
            "xMin": 35,
            "xMax": 989,
            "yMin": 0,
            "yMax": 921,
            "ha": 921,
            "leftSideBearing": 35,
            "advanceWidth": 1024
        },
        "y": {
            "xMin": 29,
            "xMax": 976,
            "yMin": -445,
            "yMax": 921,
            "ha": 1366,
            "leftSideBearing": 29,
            "advanceWidth": 1024
        },
        "z": {
            "xMin": 55,
            "xMax": 855,
            "yMin": 0,
            "yMax": 921,
            "ha": 921,
            "leftSideBearing": 55,
            "advanceWidth": 909
        },
        "{": {
            "xMin": 205,
            "xMax": 717,
            "yMin": -377,
            "yMax": 1397,
            "ha": 1774,
            "leftSideBearing": 205,
            "advanceWidth": 983
        },
        "|": {
            "xMin": 137,
            "xMax": 273,
            "yMin": -512,
            "yMax": 1535,
            "ha": 2047,
            "leftSideBearing": 137,
            "advanceWidth": 410
        },
        "}": {
            "xMin": 266,
            "xMax": 778,
            "yMin": -377,
            "yMax": 1397,
            "ha": 1774,
            "leftSideBearing": 266,
            "advanceWidth": 983
        },
        "~": {
            "xMin": 82,
            "xMax": 1028,
            "yMin": 380,
            "yMax": 666,
            "ha": 286,
            "leftSideBearing": 82,
            "advanceWidth": 1108
        }
    },
    "fontFamily": "Times",
    "resolution": 2048,
    "generatedOn": "2020-10-18T19:03:12.514Z"
};


/***/ }),

/***/ "./src/ui/buttons/articulation.ts":
/*!****************************************!*\
  !*** ./src/ui/buttons/articulation.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArticulationButtons: () => (/* binding */ ArticulationButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");


class ArticulationButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    static get articulationIdMap() {
        return {
            accentButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.accent,
            tenutoButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.tenuto,
            staccatoButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.staccato,
            marcatoButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.marcato,
            pizzicatoButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.pizzicato,
            fermataButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoArticulation.articulations.fermata,
            mordentButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.mordent,
            mordentInvertedButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.mordentInverted,
            trillButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.trill,
            scoopButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.scoop,
            dropButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.fall_short,
            dropLongButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.dropLong,
            doitButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.doit,
            doitLongButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.doitLong,
            flipButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.flip,
            smearButton: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoOrnament.ornaments.smear
        };
    }
    static get constructors() {
        return {
            accentButton: 'SmoArticulation',
            tenutoButton: 'SmoArticulation',
            staccatoButton: 'SmoArticulation',
            marcatoButton: 'SmoArticulation',
            pizzicatoButton: 'SmoArticulation',
            fermataButton: 'SmoArticulation',
            mordentButton: 'SmoOrnament',
            mordentInvertedButton: 'SmoOrnament',
            trillButton: 'SmoOrnament',
            scoopButton: 'SmoOrnament',
            dropButton: 'SmoOrnament',
            dropLongButton: 'SmoOrnament',
            doitButton: 'SmoOrnament',
            doitLongButton: 'SmoOrnament',
            flipButton: 'SmoOrnament',
            smearButton: 'SmoOrnament'
        };
    }
    constructor(parameters) {
        super(parameters);
        this.showState = false;
        this.articulation = ArticulationButtons.articulationIdMap[this.buttonData.id];
        this.ctor = ArticulationButtons.constructors[this.buttonData.id];
    }
    _toggleArticulation() {
        this.showState = !this.showState;
        this.view.toggleArticulation(this.articulation, this.ctor);
    }
    bind() {
        this.eventSource.domClick(this.buttonElement, this, '_toggleArticulation', null);
    }
}


/***/ }),

/***/ "./src/ui/buttons/beam.ts":
/*!********************************!*\
  !*** ./src/ui/buttons/beam.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BeamButtons: () => (/* binding */ BeamButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");

class BeamButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    operation() {
        if (this.buttonData.id === 'breakBeam') {
            this.view.toggleBeamGroup();
        }
        else if (this.buttonData.id === 'beamSelections') {
            this.view.beamSelections();
        }
        else if (this.buttonData.id === 'toggleBeamDirection') {
            this.view.toggleBeamDirection();
        }
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            this.operation();
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/button.ts":
/*!**********************************!*\
  !*** ./src/ui/buttons/button.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiButton: () => (/* binding */ SuiButton)
/* harmony export */ });
class SuiButton {
    constructor(params) {
        this.buttonId = params.buttonId;
        this.buttonElement = params.buttonElement;
        this.view = params.view;
        this.buttonData = params.buttonData;
        this.eventSource = params.eventSource;
        this.menus = params.menus;
        this.completeNotifier = params.completeNotifier;
    }
}


/***/ }),

/***/ "./src/ui/buttons/chord.ts":
/*!*********************************!*\
  !*** ./src/ui/buttons/chord.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChordButtons: () => (/* binding */ ChordButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");

class ChordButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
        this.interval = parseInt($(this.buttonElement).attr('data-interval'), 10);
        this.direction = parseInt($(this.buttonElement).attr('data-direction'), 10);
    }
    collapseChord() {
        this.view.collapseChord();
    }
    setInterval() {
        this.view.setInterval(this.interval * this.direction);
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            if ($(this.buttonElement).attr('id') === 'CollapseChordButton') {
                this.collapseChord();
                return;
            }
            this.setInterval();
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/collapsable.ts":
/*!***************************************!*\
  !*** ./src/ui/buttons/collapsable.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CollapseRibbonControl: () => (/* binding */ CollapseRibbonControl),
/* harmony export */   ExtendedCollapseParent: () => (/* binding */ ExtendedCollapseParent),
/* harmony export */   buttonIsBindable: () => (/* binding */ buttonIsBindable),
/* harmony export */   buttonIsCollapsible: () => (/* binding */ buttonIsCollapsible)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");


function buttonIsCollapsible(action) {
    return ['collapseChild', 'collapseChildMenu', 'collapseGrandchild', 'collapseMore'].indexOf(action) >= 0;
}
function buttonIsBindable(action) {
    return ['collapseChildMenu', 'menu', 'modal'].indexOf(action) >= 0;
}
class CollapseRibbonControl extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    static get paramArray() {
        return ['ribbonButtons', 'keyCommands', 'controller', 'view', 'menus', 'buttonData', 'buttonElement',
            'eventSource'];
    }
    constructor(parameters) {
        super(parameters);
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_1__.smoSerialize.filteredMerge(CollapseRibbonControl.paramArray, parameters, this);
        this.childButtons = parameters.buttons.filter((cb) => cb.group === this.buttonData.group &&
            buttonIsCollapsible(cb.action));
    }
    _toggleExpand() {
        this.childButtons.forEach((cb) => {
            const el = $('#' + cb.id);
            $(el).toggleClass('collapsed');
            $(el).toggleClass('expanded');
        });
        $(this.buttonElement).closest('div').toggleClass('expanded');
        $(this.buttonElement).toggleClass('expandedChildren');
        if ($(this.buttonElement).hasClass('expandedChildren')) {
            const leftSpan = $(this.buttonElement).find('.ribbon-button-text');
            $(leftSpan).text('');
            $(leftSpan).removeClass(this.buttonData.icon);
            $(this.buttonElement).addClass('icon icon-circle-left');
        }
        else {
            $(this.buttonElement).removeClass('icon-circle-left');
            const leftSpan = $(this.buttonElement).find('.ribbon-button-text');
            $(leftSpan).addClass(this.buttonData.icon);
            $(leftSpan).text(this.buttonData.leftText);
        }
        // Expand may change music dom, redraw
        $('body').trigger('forceScrollEvent');
    }
    bind() {
        $(this.buttonElement).closest('div').addClass('collapseContainer');
        this.eventSource.domClick(this.buttonElement, this, '_toggleExpand', null);
        this.childButtons.forEach((cb) => {
            const ctor = eval('globalThis.Smo.' + cb.ctor);
            if ((typeof (ctor) === 'function') && this.completeNotifier) {
                const el = $('#' + cb.id);
                const params = {
                    ctor: cb.ctor,
                    buttonId: cb.id,
                    buttonData: cb,
                    buttonElement: el,
                    view: this.view,
                    completeNotifier: this.completeNotifier,
                    eventSource: this.eventSource,
                    menus: this.menus
                };
                const btn = new ctor(params);
                if (typeof (btn.bind) === 'function') {
                    btn.bind();
                }
            }
        });
    }
}
// ## ExtendedCollapseParent
// Muse-style '...' buttons for less-common operations
class ExtendedCollapseParent extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            $(this.buttonElement).closest('.collapseContainer').toggleClass('expanded-more');
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/display.ts":
/*!***********************************!*\
  !*** ./src/ui/buttons/display.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DisplaySettings: () => (/* binding */ DisplaySettings)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * These are the quick-buttons that show up on the left of the button ribbon.
 * @category SuiButton
 */
class DisplaySettings extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
        if (this.buttonData.id === 'selectPart') {
            this.eventSource.bindScoreChangeHandler(this, 'handleScoreChange');
            this.enablePartSelection();
        }
    }
    enablePartSelection() {
        const partMap = this.view.getPartMap();
        const disable = partMap.keys.length < 1;
        $(this.buttonElement[0]).prop('disabled', disable);
    }
    handleScoreChange(ev) {
        if (this.view.isPartExposed()) {
            this.buttonData.rightText = this.view.score.staves[0].partInfo.partName;
        }
        else {
            this.buttonData.rightText = 'Select Part';
        }
        $(this.buttonElement[0]).find('.ribbon-button-hotkey').text(this.buttonData.rightText);
        this.enablePartSelection();
    }
    refresh() {
        this.view.refreshViewport();
    }
    zoomout() {
        const globalLayout = this.view.score.layoutManager.getGlobalLayout();
        globalLayout.zoomScale *= 1.1;
        this.view.updateZoom(globalLayout.zoomScale);
    }
    zoomin() {
        const globalLayout = this.view.score.layoutManager.getGlobalLayout();
        globalLayout.zoomScale = globalLayout.zoomScale / 1.1;
        this.view.updateZoom(globalLayout.zoomScale);
    }
    playButton2() {
        this.view.playFromSelection();
    }
    stopButton2() {
        this.view.stopPlayer();
    }
    selectPart() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.completeNotifier) {
                return;
            }
            yield this.view.renderPromise();
            this.menus.slashMenuMode(this.completeNotifier);
            this.menus.createMenu('SuiPartSelectionMenu');
        });
    }
    bind() {
        this.eventSource.domClick(this.buttonElement, this, this.buttonData.id, null);
    }
}


/***/ }),

/***/ "./src/ui/buttons/duration.ts":
/*!************************************!*\
  !*** ./src/ui/buttons/duration.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DurationButtons: () => (/* binding */ DurationButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");

class DurationButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
        this.buttonData = parameters.buttonData;
    }
    setDuration() {
        if (this.buttonData.id === 'GrowDuration') {
            this.view.batchDurationOperation('doubleDuration');
        }
        else if (this.buttonData.id === 'LessDuration') {
            this.view.batchDurationOperation('halveDuration');
        }
        else if (this.buttonData.id === 'GrowDurationDot') {
            this.view.batchDurationOperation('dotDuration');
        }
        else if (this.buttonData.id === 'LessDurationDot') {
            this.view.batchDurationOperation('undotDuration');
        }
        else if (this.buttonData.id === 'TripletButton') {
            this.view.makeTuplet(3);
        }
        else if (this.buttonData.id === 'QuintupletButton') {
            this.view.makeTuplet(5);
        }
        else if (this.buttonData.id === 'SeptupletButton') {
            this.view.makeTuplet(7);
        }
        else if (this.buttonData.id === 'NoTupletButton') {
            this.view.unmakeTuplet();
        }
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            this.setDuration();
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/measure.ts":
/*!***********************************!*\
  !*** ./src/ui/buttons/measure.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MeasureButtons: () => (/* binding */ MeasureButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");


class MeasureButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    endRepeat() {
        this.view.setBarline(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.barlines.endRepeat);
    }
    startRepeat() {
        this.view.setBarline(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.positions.start, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.barlines.startRepeat);
    }
    singleBarStart() {
        this.view.setBarline(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.positions.start, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.barlines.singleBar);
    }
    singleBarEnd() {
        this.view.setBarline(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.barlines.singleBar);
    }
    doubleBar() {
        this.view.setBarline(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.barlines.doubleBar);
    }
    endBar() {
        this.view.setBarline(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoBarline.barlines.endBar);
    }
    coda() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.Coda);
    }
    toCoda() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.ToCoda);
    }
    segno() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.Segno);
    }
    dsAlCoda() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.DsAlCoda);
    }
    dcAlCoda() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.DcAlCoda);
    }
    dsAlFine() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.DsAlFine);
    }
    dcAlFine() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.DcAlFine);
    }
    fine() {
        this.view.setRepeatSymbol(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.positions.end, _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoRepeatSymbol.symbols.Fine);
    }
    nthEnding() {
        this.view.addEnding();
    }
    handleEvent(event, method) {
        this[method]();
    }
    bind() {
        this.eventSource.domClick(this.buttonElement, this, 'handleEvent', this.buttonData.id);
    }
}


/***/ }),

/***/ "./src/ui/buttons/microtone.ts":
/*!*************************************!*\
  !*** ./src/ui/buttons/microtone.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MicrotoneButtons: () => (/* binding */ MicrotoneButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../render/audio/oscillator */ "./src/render/audio/oscillator.ts");



class MicrotoneButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    applyButton(el) {
        const defs = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMicrotone.defaults;
        defs.tone = el.id;
        const tn = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoMicrotone(defs);
        this.view.addRemoveMicrotone(tn);
        _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_2__.SuiOscillator.playSelectionNow(this.view.tracker.selections[0], this.view.score, 1);
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            this.applyButton(this.buttonData);
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/navigation.ts":
/*!**************************************!*\
  !*** ./src/ui/buttons/navigation.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NavigationButtons: () => (/* binding */ NavigationButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");

class NavigationButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    static get directionsTrackerMap() {
        return {
            navLeftButton: 'moveSelectionLeft',
            navRightButton: 'moveSelectionRight',
            navUpButton: 'moveSelectionUp',
            navDownButton: 'moveSelectionDown',
            navFastForward: 'moveSelectionRightMeasure',
            navRewind: 'moveSelectionLeftMeasure',
            navGrowLeft: 'growSelectionLeft',
            navGrowRight: 'growSelectionRight'
        };
    }
    constructor(parameters) {
        super(parameters);
    }
    _moveTracker() {
        this.view.tracker[NavigationButtons.directionsTrackerMap[this.buttonData.id]]();
    }
    bind() {
        this.eventSource.domClick(this.buttonElement, this, '_moveTracker', null);
    }
}


/***/ }),

/***/ "./src/ui/buttons/note.ts":
/*!********************************!*\
  !*** ./src/ui/buttons/note.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoteButtons: () => (/* binding */ NoteButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _smo_data_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/common */ "./src/smo/data/common.ts");


class NoteButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    setPitch() {
        if (this.buttonData.id === 'UpNoteButton') {
            this.view.transposeSelections(1);
        }
        else if (this.buttonData.id === 'DownNoteButton') {
            this.view.transposeSelections(-1);
        }
        else if (this.buttonData.id === 'UpOctaveButton') {
            this.view.transposeSelections(12);
        }
        else if (this.buttonData.id === 'DownOctaveButton') {
            this.view.transposeSelections(-12);
        }
        else if (this.buttonData.id === 'ToggleAccidental') {
            this.view.toggleEnharmonic();
        }
        else if (this.buttonData.id === 'ToggleCourtesy') {
            this.view.toggleCourtesyAccidentals();
        }
        else if (this.buttonData.id === 'ToggleRestButton') {
            this.view.makeRest();
        }
        else if (this.buttonData.id === 'ToggleSlashButton') {
            this.view.toggleSlash();
        }
        else if (this.buttonData.id === 'AddGraceNote') {
            this.view.addGraceNote();
        }
        else if (this.buttonData.id === 'SlashGraceNote') {
            this.view.slashGraceNotes();
        }
        else if (this.buttonData.id === 'RemoveGraceNote') {
            this.view.removeGraceNote();
        }
        else if (this.buttonData.id === 'XNoteHead') {
            this.view.setNoteHead('x2');
        }
        else if (this.buttonData.id === 'TriUpNoteHead') {
            this.view.setNoteHead('T2');
        }
        else if (this.buttonData.id === 'CircleXNoteHead') {
            this.view.setNoteHead('X3');
        }
        else if (this.buttonData.id === 'DiamondNoteHead') {
            this.view.setNoteHead('D2');
        }
        else {
            if ((0,_smo_data_common__WEBPACK_IMPORTED_MODULE_1__.IsPitchLetter)(this.buttonData.rightText)) {
                this.view.setPitch(this.buttonData.rightText);
            }
        }
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            this.setPitch();
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/player.ts":
/*!**********************************!*\
  !*** ./src/ui/buttons/player.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlayerButtons: () => (/* binding */ PlayerButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");

class PlayerButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    playButton() {
        this.view.playFromSelection();
    }
    stopButton() {
        this.view.stopPlayer();
    }
    pauseButton() {
        this.view.pausePlayer();
    }
    bind() {
        this.eventSource.domClick(this.buttonElement, this, this.buttonData.id, null);
    }
}


/***/ }),

/***/ "./src/ui/buttons/ribbon.ts":
/*!**********************************!*\
  !*** ./src/ui/buttons/ribbon.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RibbonButtons: () => (/* binding */ RibbonButtons),
/* harmony export */   SuiModalButtonStrings: () => (/* binding */ SuiModalButtonStrings),
/* harmony export */   isModalButtonType: () => (/* binding */ isModalButtonType)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _dialogs_library__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/library */ "./src/ui/dialogs/library.ts");
/* harmony import */ var _dialogs_tempo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/tempo */ "./src/ui/dialogs/tempo.ts");
/* harmony import */ var _dialogs_instrument__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialogs/instrument */ "./src/ui/dialogs/instrument.ts");
/* harmony import */ var _collapsable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./collapsable */ "./src/ui/buttons/collapsable.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _help__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../help */ "./src/ui/help.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.







var SuiModalButtonStrings = ['SuiLibraryDialog', 'SuiTempoDialog', 'SuiInstrumentDialog'];
function isModalButtonType(but) {
    return SuiModalButtonStrings.indexOf(but) >= 0;
}
// ## RibbonButtons
// Render the ribbon buttons based on group, function, and underlying UI handler.
// Also handles UI events.
// ### RibbonButton methods
// ---
class RibbonButtons {
    static get paramArray() {
        return ['ribbonButtons', 'ribbons', 'keyCommands', 'controller', 'menus', 'eventSource', 'view'];
    }
    static _buttonHtml(containerClass, buttonId, buttonClass, buttonText, buttonIcon, buttonKey) {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const r = b('div').classes(containerClass).append(b('button').attr('id', buttonId).classes(buttonClass).append(b('span').classes('left-text').append(b('span').classes('text-span').text(buttonText)).append(b('span').classes('ribbon-button-text icon ' + buttonIcon))).append(b('span').classes('ribbon-button-hotkey').text(buttonKey)));
        return r.dom();
    }
    constructor(params) {
        this.collapsables = [];
        this.collapseChildren = [];
        this.controller = params.completeNotifier;
        this.config = params.config;
        this.eventSource = params.eventSource;
        this.view = params.view;
        this.menus = params.menus;
        this.ribbonButtons = params.ribbonButtons;
        this.ribbons = params.ribbons;
        this.collapsables = [];
        this.collapseChildren = [];
    }
    _executeButtonModal(buttonElement, buttonData) {
        if (isModalButtonType(buttonData.ctor)) {
            const params = {
                eventSource: this.eventSource,
                completeNotifier: this.controller,
                view: this.view,
                ctor: buttonData.ctor,
                id: buttonData.id,
                startPromise: null,
                tracker: this.view.tracker
            };
            if (buttonData.ctor === 'SuiInstrumentDialog') {
                (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_5__.createAndDisplayDialog)(_dialogs_instrument__WEBPACK_IMPORTED_MODULE_3__.SuiInstrumentDialog, params);
            }
            else if (buttonData.ctor === 'SuiLibraryDialog') {
                _dialogs_library__WEBPACK_IMPORTED_MODULE_1__.SuiLibraryDialog.createAndDisplay(params, this.config);
            }
            else {
                (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_5__.createAndDisplayDialog)(_dialogs_tempo__WEBPACK_IMPORTED_MODULE_2__.SuiTempoDialog, params);
            }
        }
        else if (buttonData.ctor === 'helpModal') {
            _help__WEBPACK_IMPORTED_MODULE_6__.SuiHelp.displayHelp();
        }
    }
    _executeButtonMenu(buttonElement, buttonData) {
        this.menus.slashMenuMode(this.controller);
        this.menus.createMenu(buttonData.ctor);
    }
    _executeButton(buttonElement, buttonData) {
        if (buttonData.action === 'modal') {
            this._executeButtonModal(buttonElement, buttonData);
            return;
        }
        if (buttonData.action === 'menu' || buttonData.action === 'collapseChildMenu') {
            this._executeButtonMenu(buttonElement, buttonData);
        }
    }
    _bindButton(buttonElement, buttonData) {
        this.eventSource.domClick(buttonElement, this, '_executeButton', buttonData);
    }
    _createCollapsibleButtonGroups(selector) {
        let containerClass = '';
        // Now all the button elements have been bound.  Join child and parent buttons
        // For all the children of a button group, add it to the parent group
        this.collapseChildren.forEach((b) => {
            containerClass = 'ribbonButtonContainer';
            if (b.action === 'collapseGrandchild') {
                containerClass = 'ribbonButtonContainerMore';
            }
            const buttonHtml = RibbonButtons._buttonHtml(containerClass, b.id, b.classes, b.leftText, b.icon, b.rightText);
            if (b.dataElements) {
                const bkeys = Object.keys(b.dataElements);
                bkeys.forEach((bkey) => {
                    var de = b.dataElements[bkey];
                    $(buttonHtml).find('button').attr('data-' + bkey, de);
                });
            }
            // Bind the child button actions
            const parent = $(selector).find('.collapseContainer[data-group="' + b.group + '"]');
            $(parent).append(buttonHtml);
            const el = $(selector).find('#' + b.id);
            this._bindButton(el, b);
        });
        this.collapsables.forEach((cb) => {
            // Bind the events of the parent button
            cb.bind();
        });
    }
    static isCollapsible(action) {
        return ['collapseChild', 'collapseChildMenu', 'collapseGrandchild', 'collapseMore'].indexOf(action) >= 0;
    }
    // ### _createButtonHtml
    // For each button, create the html and bind the events based on
    // the button's configured action.
    _createRibbonHtml(buttonAr, selector) {
        let buttonClass = '';
        buttonAr.forEach((buttonId) => {
            const buttonData = this.ribbonButtons.find((e) => e.id === buttonId);
            if (buttonData) {
                if (buttonData.leftText) {
                    RibbonButtons.translateButtons.push({ buttonId: buttonData.id, buttonText: buttonData.leftText });
                }
                // collapse child is hidden until the parent button is selected, exposing the button group
                if (RibbonButtons.isCollapsible(buttonData.action)) {
                    this.collapseChildren.push(buttonData);
                }
                if (buttonData.action !== 'collapseChild') {
                    // else the button has a specific action, such as a menu or dialog, or a parent button
                    // for translation, add the menu name to the button class
                    buttonClass = buttonData.classes;
                    if (buttonData.action === 'menu' || buttonData.action === 'modal') {
                        buttonClass += ' ' + buttonData.ctor;
                    }
                    const buttonHtml = RibbonButtons._buttonHtml('ribbonButtonContainer', buttonData.id, buttonClass, buttonData.leftText, buttonData.icon, buttonData.rightText);
                    $(buttonHtml).attr('data-group', buttonData.group);
                    $(selector).append(buttonHtml);
                    const buttonElement = $('#' + buttonData.id);
                    // If this is a collabsable button, create it, otherwise bind its execute function.
                    if (buttonData.action === 'collapseParent') {
                        $(buttonHtml).addClass('collapseContainer');
                        // collapseParent
                        this.collapsables.push(new _collapsable__WEBPACK_IMPORTED_MODULE_4__.CollapseRibbonControl({
                            ctor: buttonData.ctor,
                            buttons: this.ribbonButtons,
                            view: this.view,
                            menus: this.menus,
                            eventSource: this.eventSource,
                            completeNotifier: this.controller,
                            buttonId: buttonData.id,
                            buttonElement,
                            buttonData
                        }));
                    }
                    else {
                        this.eventSource.domClick(buttonElement, this, '_executeButton', buttonData);
                    }
                }
            }
        });
    }
    addButton(button, parentElement) {
        this.ribbonButtons.push(button);
        this.createRibbon([button.id], parentElement);
    }
    createRibbon(buttonDataArray, parentElement) {
        this._createRibbonHtml(buttonDataArray, parentElement);
        this._createCollapsibleButtonGroups(parentElement);
    }
    display() {
        if (this.config.leftControls) {
            const leftControl = (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.getDomContainer)(this.config.leftControls);
            if (leftControl) {
                $(leftControl).html('');
                const lbuttons = this.ribbons.left;
                this.createRibbon(lbuttons, leftControl);
            }
        }
        if (this.config.topControls) {
            const topControl = (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.getDomContainer)(this.config.topControls);
            if (topControl) {
                const tbuttons = this.ribbons.top;
                this.createRibbon(tbuttons, topControl);
            }
        }
    }
}
RibbonButtons.translateButtons = [];


/***/ }),

/***/ "./src/ui/buttons/stave.ts":
/*!*********************************!*\
  !*** ./src/ui/buttons/stave.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveButtons: () => (/* binding */ StaveButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");


class StaveButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    addClef(clef, clefName) {
        var instrument = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoInstrument(_smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoInstrument.defaults);
        instrument.instrumentName = clefName;
        instrument.keyOffset = 0;
        instrument.clef = clef;
        this.view.changeInstrument(instrument, this.view.tracker.selections);
    }
    clefTreble() {
        this.addClef('treble', 'Treble Instrument');
    }
    clefBass() {
        this.addClef('bass', 'Bass Instrument');
    }
    clefAlto() {
        this.addClef('alto', 'Alto Instrument');
    }
    clefTenor() {
        this.addClef('tenor', 'Tenor Instrument');
    }
    clefPercussion() {
        this.addClef('percussion', 'Tenor Instrument');
    }
    _clefMove(index) {
        this.view.moveStaffUpDown(index);
    }
    clefMoveUp() {
        this._clefMove(-1);
    }
    clefMoveDown() {
        this._clefMove(1);
    }
    bind() {
        const self = this;
        $(this.buttonElement).off('click').on('click', () => {
            const id = self.buttonData.id;
            if (typeof (this[id]) === 'function') {
                this[id]();
            }
        });
    }
}


/***/ }),

/***/ "./src/ui/buttons/text.ts":
/*!********************************!*\
  !*** ./src/ui/buttons/text.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextButtons: () => (/* binding */ TextButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");
/* harmony import */ var _dialogs_textBlock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/textBlock */ "./src/ui/dialogs/textBlock.ts");
/* harmony import */ var _dialogs_lyric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/lyric */ "./src/ui/dialogs/lyric.ts");
/* harmony import */ var _dialogs_chordChange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialogs/chordChange */ "./src/ui/dialogs/chordChange.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");





class TextButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    lyrics() {
        const sel = this.view.tracker.selections[0];
        const note = sel.note;
        if (!note) {
            return;
        }
        const lyrics = note.getTrueLyrics();
        const lyric = lyrics.length > 0 ? null : lyrics[0];
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_4__.createAndDisplayDialog)(_dialogs_lyric__WEBPACK_IMPORTED_MODULE_2__.SuiLyricDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'lyricDialog',
            ctor: 'SuiLyricDialog',
            tracker: this.view.tracker,
            startPromise: null,
            modifier: lyric
        });
        // tracker, selection, controller
    }
    chordChanges() {
        const sel = this.view.tracker.selections[0];
        const note = sel.note;
        if (!note) {
            return;
        }
        const lyrics = note.getChords();
        const lyric = lyrics.length > 0 ? null : lyrics[0];
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_4__.createAndDisplayDialog)(_dialogs_chordChange__WEBPACK_IMPORTED_MODULE_3__.SuiChordChangeDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'chordDialog',
            ctor: 'SuiChordChangeDialog',
            tracker: this.view.tracker,
            startPromise: null,
            modifier: lyric
        });
    }
    rehearsalMark() {
        this.view.toggleRehearsalMark();
    }
    _invokeMenu(cmd) {
        if (!this.completeNotifier) {
            return;
        }
        this.menus.slashMenuMode(this.completeNotifier);
        this.menus.createMenu(cmd);
    }
    addTextMenu() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_4__.createAndDisplayDialog)(_dialogs_textBlock__WEBPACK_IMPORTED_MODULE_1__.SuiTextBlockDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'chordDialog',
            ctor: 'SuiChordChangeDialog',
            tracker: this.view.tracker,
            startPromise: null,
            modifier: null
        });
    }
    addDynamicsMenu() {
        this._invokeMenu('SuiDynamicsMenu');
    }
    bind() {
        this.eventSource.domClick(this.buttonElement, this, this.buttonData.id, null);
    }
}


/***/ }),

/***/ "./src/ui/buttons/voice.ts":
/*!*********************************!*\
  !*** ./src/ui/buttons/voice.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VoiceButtons: () => (/* binding */ VoiceButtons)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/ui/buttons/button.ts");

class VoiceButtons extends _button__WEBPACK_IMPORTED_MODULE_0__.SuiButton {
    constructor(parameters) {
        super(parameters);
    }
    doAction() {
        let voiceIx = 0;
        if (this.buttonData.id === 'V2Button') {
            voiceIx = 1;
        }
        else if (this.buttonData.id === 'V3Button') {
            voiceIx = 2;
        }
        else if (this.buttonData.id === 'V4Button') {
            voiceIx = 3;
        }
        else if (this.buttonData.id === 'VXButton') {
            this.view.depopulateVoice();
            return;
        }
        this.view.populateVoice(voiceIx);
    }
    bind() {
        $(this.buttonElement).off('click').on('click', () => {
            this.doAction();
        });
    }
}


/***/ }),

/***/ "./src/ui/dialogs/adapter.ts":
/*!***********************************!*\
  !*** ./src/ui/dialogs/adapter.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiComponentAdapter: () => (/* binding */ SuiComponentAdapter),
/* harmony export */   SuiDialogAdapterBase: () => (/* binding */ SuiDialogAdapterBase)
/* harmony export */ });
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


/**
 * An adapter is the glue logic between UI components and the score view.
 * An adapter consists mostly of accessors (get/set) for the component data.  The
 * components have their initial values set from the adapter get, and changes to components
 * result in sets to the adapter.  The adapter can then update the score.
 * For dialogs that use this pattern,
 * the dialog automatically creates the components and binds their values with the
 * adapter.
 * @method commit - called when OK button of dialog is clicked
 * @method cancel - called when cancel button of dialog is clicked
 * @method remove - optional.  Called when 'remove' button is clicked, for artifacts like dynamics that can be removed.
 * @category SuiDialog
 */
class SuiComponentAdapter {
    constructor(view) {
        this.view = view;
    }
    remove() {
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
    }
    ;
}
/**
 * SuiDialogAdapterBase is the base class for dialogs that use the adapter pattern
 * (almost all of them).
 * @typeParam T a class that implements the Adapter interface and fulfills the
 *  adapter data contract, with getters and setters from the components
 * @category SuiDialog
 */
class SuiDialogAdapterBase extends _dialog__WEBPACK_IMPORTED_MODULE_0__.SuiDialogBase {
    constructor(def, params) {
        super(def, params);
        this.adapter = params.adapter;
    }
    /**
     * Call the components bind() methods to activate them.  Also, verify that each
     * adapter meets the contract with the components
     */
    bindComponents() {
        this.components.forEach((component) => {
            // do some runtime validation of the adapter
            if (typeof (this.adapter[component.smoName]) === 'undefined') {
                throw ('Dialog ' + this.label + ' has component ' + component.smoName + ' but no setter in the adapter ');
            }
            component.bind();
        });
    }
    /**
     * Called before dialog is displayed.
     * components that interface (bind) with the adapter are called 'bound' components.
     * On initialize, update the component with the score value, as told by the adapter.
     */
    initialValue() {
        this.components.forEach((comp) => {
            comp.setValue(this.adapter[comp.smoName]);
        });
    }
    /**
     * When a component changes, it notifies the parent dialog.  Usually, we just
     * proxy the call to the adapter.  The specific dialog can override this method if
     * something in the UI needs to change as a result of the component state (e.g.
     * show or hide another component)
     */
    changed() {
        this.components.forEach((comp) => {
            if (comp.changeFlag) {
                this.adapter[comp.smoName] = comp.getValue();
            }
        });
    }
    /**
     * If there is any 'saving' to be done when the dialog clicks OK,
     * that is handled by the adapter.  Else it can be a noop.
     */
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.commit();
        });
    }
    /**
     * If there is any undo or restore to be done when the dialog clicks OK,
     * that is handled by the adapter.  Else it can be a noop.
     */
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.cancel();
        });
    }
    /**
     * For score artifacts that can be removed,
     */
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.remove();
        });
    }
    /**
     * Binds the main dialog buttons.  For OK/Cancel/remove, the logic calls the appropriate
     * derived function, which calls the appropriate adapter method, then calls complete()
     * to restore the event handling loop to the application
     */
    bindElements() {
        var dgDom = this.dgDom;
        $(dgDom.element).find('.ok-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            this.commit();
            this.complete();
        });
        $(dgDom.element).find('.cancel-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            this.cancel();
            this.complete();
        });
        $(dgDom.element).find('.remove-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            this.remove();
            this.complete();
        });
    }
}


/***/ }),

/***/ "./src/ui/dialogs/addMeasure.ts":
/*!**************************************!*\
  !*** ./src/ui/dialogs/addMeasure.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiInsertMeasures: () => (/* binding */ SuiInsertMeasures)
/* harmony export */ });
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * Insert some number of measures
 * @category SuiDialog
 */
class SuiInsertMeasures extends _dialog__WEBPACK_IMPORTED_MODULE_0__.SuiDialogBase {
    constructor(parameters) {
        super(SuiInsertMeasures.dialogElements, parameters);
        this.selection = this.view.tracker.selections[0];
        const selection = parameters.view.tracker.selections[0];
        const measure = selection.measure;
        this.measure = measure;
        if (!this.startPromise) {
            this.startPromise = new Promise((resolve) => {
                resolve();
            });
        }
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.addMeasures(this.appendCtrl.getValue(), this.measureCountCtrl.getValue());
        });
    }
    get measureCountCtrl() {
        return this.cmap.measureCountCtrl;
    }
    get appendCtrl() {
        return this.cmap.appendCtrl;
    }
    populateInitial() {
        this.measureCountCtrl.setValue(1);
    }
}
SuiInsertMeasures.dialogElements = {
    label: 'Insert Measures',
    elements: [{
            smoName: 'measureCount',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Measures to Insert'
        }, {
            smoName: 'append',
            control: 'SuiToggleComponent',
            label: 'Append to Selection'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/arpeggio.ts":
/*!************************************!*\
  !*** ./src/ui/dialogs/arpeggio.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiArpeggioAdapter: () => (/* binding */ SuiArpeggioAdapter),
/* harmony export */   SuiScoreArpeggioDialog: () => (/* binding */ SuiScoreArpeggioDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



class SuiArpeggioAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.changed = false;
        this.arpeggio = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoArpeggio({ type: 'none' });
        this.backup = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoArpeggio({ type: 'none' });
        const selections = view.tracker.selections;
        if (selections.length && selections[0].note) {
            if (selections[0].note.arpeggio) {
                this.arpeggio = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoArpeggio({ type: selections[0].note.arpeggio.typeString });
            }
            this.backup = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoArpeggio({ type: this.arpeggio.typeString });
        }
        this.view = view;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.view.addRemoveArpeggio(this.backup.typeString);
            }
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    get arpeggioType() {
        return this.arpeggio.typeString;
    }
    set arpeggioType(value) {
        if ((0,_smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.isArpeggioType)(value)) {
            this.view.addRemoveArpeggio(value);
            this.changed = true;
        }
    }
}
/**
 * export  const SmoArpeggioTypes = ['directionless', 'rasquedo_up', 'rasquedo_down',
  'roll_up', 'roll_down', 'brush_up', 'brush_down', 'none'];
 */
class SuiScoreArpeggioDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    static createAndDisplay(parameters) {
        const dg = new SuiScoreArpeggioDialog(parameters);
        dg.display();
    }
    constructor(params) {
        const adapter = new SuiArpeggioAdapter(params.view);
        super(SuiScoreArpeggioDialog.dialogElements, Object.assign({ adapter }, params));
        this.modifier = params.modifier;
    }
}
/**
 * The template used to create the dialog components
 */
SuiScoreArpeggioDialog.dialogElements = {
    label: 'Arpeggio', elements: [{
            smoName: 'arpeggioType',
            control: 'SuiDropdownComponent',
            label: 'Arpeggio Type',
            options: [{
                    value: 'directionless',
                    label: 'Plain'
                }, {
                    value: 'rasquedo_up',
                    label: 'Rasquedo Up'
                }, {
                    value: 'rasquedo_down',
                    label: 'Rasquedo Down'
                }, {
                    value: 'roll_up',
                    label: 'Roll Up'
                }, {
                    value: 'roll_down',
                    label: 'Roll Down'
                }, {
                    value: 'brush_up',
                    label: 'Brush Up'
                }, {
                    value: 'brush_down',
                    label: 'Brush Down'
                }, {
                    value: 'none',
                    label: 'None'
                }]
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/audioSettings.ts":
/*!*****************************************!*\
  !*** ./src/ui/dialogs/audioSettings.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiAudioSettingsAdapter: () => (/* binding */ SuiAudioSettingsAdapter),
/* harmony export */   SuiAudioSettingsDialog: () => (/* binding */ SuiAudioSettingsDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



class SuiAudioSettingsAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.settings = new _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPlayerSettings(view.score.audioSettings);
        this.backup = new _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoAudioPlayerSettings(view.score.audioSettings);
    }
    get enableReverb() {
        return this.settings.reverbEnable;
    }
    set enableReverb(value) {
        this.settings.reverbEnable = value;
        this.view.updateAudioSettings(this.settings);
    }
    get playerType() {
        return this.settings.playerType;
    }
    set playerType(value) {
        if (value !== 'sampler') {
            this.settings.playerType = 'synthesizer';
        }
        else {
            this.settings.playerType = 'sampler';
        }
        this.view.updateAudioSettings(this.settings);
    }
    get waveform() {
        return this.settings.waveform;
    }
    set waveform(value) {
        if ((0,_smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.IsOscillatorType)(value)) {
            this.settings.waveform = value;
        }
        this.view.updateAudioSettings(this.settings);
    }
    get reverbDelay() {
        return this.settings.reverbDelay;
    }
    set reverbDelay(value) {
        this.settings.reverbDelay = value;
        this.view.updateAudioSettings(this.settings);
    }
    get reverbDecay() {
        return this.settings.reverbDecay;
    }
    set reverbDecay(value) {
        this.settings.reverbDecay = value;
        this.view.updateAudioSettings(this.settings);
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.updateAudioSettings(this.backup);
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiAudioSettingsDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(params) {
        const adapter = new SuiAudioSettingsAdapter(params.view);
        super(SuiAudioSettingsDialog.dialogElements, Object.assign({ adapter }, params));
    }
}
SuiAudioSettingsDialog.dialogElements = {
    label: 'Audio Settings',
    elements: [{
            smoName: 'enableReverb',
            control: 'SuiToggleComponent',
            label: 'Enable Reverb'
        }, {
            smoName: 'playerType',
            control: 'SuiDropdownComponent',
            label: 'Audio Playback Engine',
            options: [{
                    value: 'sampler', label: 'Sampler'
                }, {
                    value: 'synthesizer', label: 'Analog SoftSynth'
                }]
        }, {
            smoName: 'waveform',
            control: 'SuiDropdownComponent',
            label: 'Waveform (Synth only)',
            options: [{
                    value: 'sine', label: 'Sine'
                }, {
                    value: 'sawtooth', label: 'sawtooth'
                }, {
                    value: 'square', label: 'square'
                }, {
                    value: 'triangle', label: 'triangle'
                }, {
                    value: 'custom', label: 'custom'
                }]
        }, {
            smoName: 'reverbDelay',
            control: 'SuiRockerComponent',
            label: 'Delay Time (if reverb) in seconds',
            dataType: 'float'
        }, {
            smoName: 'reverbDecay',
            control: 'SuiRockerComponent',
            label: 'Decay Time (if reverb) in seconds',
            dataType: 'float'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/chordChange.ts":
/*!***************************************!*\
  !*** ./src/ui/dialogs/chordChange.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiChordChangeDialog: () => (/* binding */ SuiChordChangeDialog)
/* harmony export */ });
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../render/sui/textRender */ "./src/render/sui/textRender.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


/**
 * Dialog for running a chord change editing session.
 * @category SuiDialog
 */
class SuiChordChangeDialog extends _dialog__WEBPACK_IMPORTED_MODULE_0__.SuiDialogBase {
    constructor(parameters) {
        super(SuiChordChangeDialog.dialogElements, parameters);
        this.lyric = null;
        this.selector = null;
        this.mouseMoveHandler = null;
        this.mouseClickHandler = null;
        parameters.ctor = 'SuiChordChangeDialog';
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'SELECTIONPOS'];
    }
    get chordEditorCtrl() {
        return this.cmap.chordEditorCtrl;
    }
    get chordSymbolCtrl() {
        return this.cmap.chordSymbolCtrl;
    }
    get translateYCtrl() {
        return this.cmap.translateYCtrl;
    }
    get textPositionCtrl() {
        return this.cmap.textPositionCtrl;
    }
    get adjustWidthCtrl() {
        return this.cmap.adjustWidthCtrl;
    }
    get fontCtrl() {
        return this.cmap.fontCtrl;
    }
    changed() {
        let val = '';
        if (this.chordSymbolCtrl.changeFlag && this.chordEditorCtrl.running) {
            val = '@' + this.chordSymbolCtrl.getValue() + '@';
            var kv;
            /*     type: string, shiftKey: boolean, ctrlKey: boolean, altKey: boolean, key: string, keyCode: string,
          code: string*/
            this.chordEditorCtrl.evKey({
                type: 'keydown',
                shiftKey: false,
                ctrlKey: false,
                altKey: false,
                key: val,
                code: val,
                event: null,
                keyCode: '0'
            });
            // Move focus outside the element so it doesn't intercept keys
            this.chordSymbolCtrl.unselect();
        }
        if (this.translateYCtrl.changeFlag) {
            if (this.lyric && this.selector) {
                this.lyric.translateY = this.translateYCtrl.getValue();
                this.view.addOrUpdateLyric(this.selector, this.lyric);
            }
        }
        if (this.textPositionCtrl.changeFlag) {
            this.chordEditorCtrl.setTextType(this.textPositionCtrl.getValue());
            $(this.textPositionCtrl._getInputElement())[0].selectedIndex = -1;
            $(this.textPositionCtrl._getInputElement()).blur();
        }
        if (this.fontCtrl.changeFlag) {
            const fontInfo = this.fontCtrl.getValue();
            this.view.setChordFont(fontInfo);
        }
        if (this.adjustWidthCtrl.changeFlag) {
            this.view.score.setChordAdjustWidth(this.adjustWidthCtrl.getValue());
        }
    }
    setLyric(selector, lyric) {
        this.selector = selector;
        this.lyric = lyric;
        this.translateYCtrl.setValue(lyric.translateY);
    }
    display() {
        super.display();
        this.mouseMoveHandler = this.eventSource.bindMouseMoveHandler(this, 'mouseMove');
        this.mouseClickHandler = this.eventSource.bindMouseClickHandler(this, 'mouseClick');
        if (this.chordEditorCtrl && this.chordEditorCtrl.session && this.chordEditorCtrl.session.lyric) {
            const lyric = this.chordEditorCtrl.session.lyric;
            this.adjustWidthCtrl.setValue(lyric.adjustNoteWidthChord);
            this.fontCtrl.setValue({
                family: lyric.fontInfo.family,
                size: lyric.fontInfo.size, weight: 'normal'
            });
        }
    }
    bindElements() {
        const dgDom = this.dgDom;
        $(dgDom.element).find('.ok-button').off('click').on('click', () => {
            this._complete();
        });
        $(dgDom.element).find('.cancel-button').off('click').on('click', () => {
            this._complete();
        });
        $(dgDom.element).find('.remove-button').remove();
        // this.chordEditorCtrl.setView(this.eventSource, this.view);
        this.chordEditorCtrl.startEditSession();
    }
    // ### handleKeydown
    // allow a dialog to be dismissed by esc.
    evKey(evdata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (evdata.key === 'Escape') {
                $(this.dgDom.element).find('.cancel-button').click();
                evdata.preventDefault();
            }
            else {
                if (!this.chordEditorCtrl.running) {
                    return;
                }
                const edited = yield this.chordEditorCtrl.evKey(evdata);
                if (edited) {
                    evdata.stopPropagation();
                }
            }
        });
    }
    _complete() {
        if (this.chordEditorCtrl.running) {
            this.chordEditorCtrl.endSession();
        }
        this.view.renderer.setDirty();
        if (this.mouseMoveHandler) {
            this.eventSource.unbindMouseMoveHandler(this.mouseMoveHandler);
        }
        if (this.mouseClickHandler) {
            this.eventSource.unbindMouseClickHandler(this.mouseClickHandler);
        }
        $('body').removeClass('showAttributeDialog');
        $('body').removeClass('textEditor');
        this.complete();
    }
    mouseMove(ev) {
        if (this.chordEditorCtrl && this.chordEditorCtrl.running) {
            this.chordEditorCtrl.mouseMove(ev);
        }
    }
    mouseClick(ev) {
        if (this.chordEditorCtrl && this.chordEditorCtrl.running) {
            this.chordEditorCtrl.mouseClick(ev);
            ev.stopPropagation();
        }
    }
}
SuiChordChangeDialog.dialogElements = {
    label: 'Edit Chord Symbol', elements: [{
            smoName: 'verse',
            defaultValue: 0,
            control: 'SuiDropdownComponent',
            label: 'Ordinality',
            classes: 'hide-when-editing',
            startRow: true,
            options: [{
                    value: 0,
                    label: '1'
                }, {
                    value: 1,
                    label: '2'
                }, {
                    value: 2,
                    label: '3'
                }]
        }, {
            smoName: 'translateY',
            defaultValue: 0,
            classes: 'hide-when-editing',
            control: 'SuiRockerComponent',
            label: 'Y Adjustment (Px)',
            dataType: 'int'
        }, {
            smoName: 'chordEditor',
            defaultValue: 0,
            classes: 'show-always',
            control: 'SuiChordComponent',
            label: 'Edit Text',
            options: []
        }, {
            smoName: 'chordSymbol',
            defaultValue: '',
            classes: 'show-when-editing',
            control: 'SuiDropdownComponent',
            label: 'Chord Symbol',
            startRow: true,
            options: [{
                    value: 'csymDiminished',
                    label: 'Dim'
                }, {
                    value: 'csymHalfDiminished',
                    label: 'Half dim'
                }, {
                    value: 'csymDiagonalArrangementSlash',
                    label: 'Slash'
                }, {
                    value: 'csymMajorSeventh',
                    label: 'Maj7'
                }]
        }, {
            smoName: 'textPosition',
            defaultValue: _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__.SuiInlineText.textTypes.normal,
            classes: 'show-when-editing',
            control: 'SuiDropdownComponent',
            label: 'Text Position',
            startRow: true,
            options: [{
                    value: _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__.SuiInlineText.textTypes.superScript,
                    label: 'Superscript'
                }, {
                    value: _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__.SuiInlineText.textTypes.subScript,
                    label: 'Subscript'
                }, {
                    value: _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__.SuiInlineText.textTypes.normal,
                    label: 'Normal'
                }]
        }, {
            smoName: 'font',
            classes: 'hide-when-editing',
            defaultValue: 0,
            control: 'SuiFontComponent',
            label: 'Font'
        }, {
            smoName: 'adjustWidth',
            classes: 'hide-when-editing',
            control: 'SuiToggleComponent',
            label: 'Adjust Note Width',
            options: []
        }],
    staticText: [
        { label: 'Edit Chord Symbol' },
        { undo: 'Undo Chord Symbols' },
        { doneEditing: 'Done Editing Chord Symbols' }
    ]
};


/***/ }),

/***/ "./src/ui/dialogs/components/baseComponent.ts":
/*!****************************************************!*\
  !*** ./src/ui/dialogs/components/baseComponent.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiComponentBase: () => (/* binding */ SuiComponentBase),
/* harmony export */   SuiComponentParent: () => (/* binding */ SuiComponentParent),
/* harmony export */   SuiDialogNotifier: () => (/* binding */ SuiDialogNotifier)
/* harmony export */ });
/**
 * components know about their parent dialog via the
 * DialogNotifier interface.  It allows a component to
 * notify parent of changing contents.
 * @category SuiDialog
 */
class SuiDialogNotifier {
}
/**
 * base class for Dialog components.  Notifies parent
 * dialog of state change via `change()`
 * @category SuiDialog
 */
class SuiComponentBase {
    constructor(dialog, parameters) {
        this.changeFlag = false;
        this.changeFlag = false;
        this.css = parameters.classes;
        this.dialog = dialog;
        this.id = parameters.id;
        this.label = parameters.label;
        this.control = parameters.control;
        this.smoName = parameters.smoName;
    }
    /**
     * Called by the derived class when the value changes.  The change flag is set to true, so the dialog will
     * know which component changed.
     */
    handleChanged() {
        this.changeFlag = true;
        this.dialog.changed();
        this.changeFlag = false;
    }
    /**
     * combine component classes with string, used for composites
     * @param classes string ot append
     * @returns combined strings
     */
    makeClasses(classes) {
        if (this.css) {
            return classes + ' ' + this.css;
        }
        return classes;
    }
    get parameterId() {
        return this.dialog.getId() + '-' + this.smoName;
    }
    show() {
        $('#' + this.parameterId).removeClass('hide');
    }
    hide() {
        $('#' + this.parameterId).addClass('hide');
    }
}
/**
 * Parent components are really containers for other components
 * For instance, FontComponent has size, family, weight, etc.
 *
 * @category SuiDialog
 */
class SuiComponentParent extends SuiComponentBase {
}


/***/ }),

/***/ "./src/ui/dialogs/components/button.ts":
/*!*********************************************!*\
  !*** ./src/ui/dialogs/components/button.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiButtonComponent: () => (/* binding */ SuiButtonComponent),
/* harmony export */   SuiButtonComposite: () => (/* binding */ SuiButtonComposite)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");


// ## SuiToggleComponent
// Simple on/off behavior.  No value just used to notifiy parent dialog
class SuiButtonComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_1__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.dialog = dialog;
        this.icon = parameter.icon;
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const id = this.parameterId;
        this.icon = typeof (this.icon) === 'undefined' ? '' : this.icon;
        const r = b('div').classes(this.makeClasses('buttonControl smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('button').attr('type', 'button').classes(this.icon)
            .attr('id', id + '-input')).append(b('label').attr('for', id + '-input').text(this.label));
        return r;
    }
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('button');
    }
    setValue() {
    }
    getValue() {
        return null;
    }
    bind() {
        const input = this._getInputElement();
        $(input).off('click').on('click', () => {
            this.handleChanged();
        });
    }
}
// ### SuiButtonComposite
// Dropdown component that can be part of a composite control.
class SuiButtonComposite extends SuiButtonComponent {
    constructor(dialog, parameters) {
        super(dialog, parameters);
        this.parentControl = parameters.parentControl;
    }
    handleChanged() {
        this.changeFlag = true;
        this.parentControl.changed();
        this.changeFlag = false;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/checkdrop.ts":
/*!************************************************!*\
  !*** ./src/ui/dialogs/components/checkdrop.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxDropdownComponent: () => (/* binding */ CheckboxDropdownComponent)
/* harmony export */ });
/* harmony import */ var _components_baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _components_toggle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/toggle */ "./src/ui/dialogs/components/toggle.ts");
/* harmony import */ var _components_dropdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/dropdown */ "./src/ui/dialogs/components/dropdown.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");




// ## CheckboxDropdownComponent
// A checkbox that enables a dropdown component, for optional or dependent parameter
class CheckboxDropdownComponent extends _components_baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentParent {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        const toggleParams = Object.assign({ id: this.id + parameter.toggleElement.smoName, classes: '', parentControl: this }, parameter.toggleElement);
        const dropdownParams = Object.assign({ id: this.id + parameter.dropdownElement.smoName, classes: '', defaultValue: '', parentControl: this }, parameter.dropdownElement);
        this.toggleCtrl = new _components_toggle__WEBPACK_IMPORTED_MODULE_1__.SuiToggleComposite(this.dialog, toggleParams);
        this.dropdownCtrl = new _components_dropdown__WEBPACK_IMPORTED_MODULE_2__.SuiDropdownComposite(this.dialog, dropdownParams);
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_3__.buildDom;
        const q = b('div').classes(this.makeClasses('multiControl smoControl checkboxDropdown'))
            .attr('id', this.parameterId);
        q.append(this.toggleCtrl.html);
        q.append(this.dropdownCtrl.html);
        return q;
    }
    bind() {
        this.toggleCtrl.bind();
        this.dropdownCtrl.bind();
    }
    changed() {
        if (this.toggleCtrl.getValue()) {
            $('#' + this.parameterId).addClass('checked');
        }
        else {
            $('#' + this.parameterId).removeClass('checked');
        }
        this.handleChanged();
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/dragText.ts":
/*!***********************************************!*\
  !*** ./src/ui/dialogs/components/dragText.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiDragText: () => (/* binding */ SuiDragText)
/* harmony export */ });
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../render/sui/textEdit */ "./src/render/sui/textEdit.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");



// ## SuiDragText
// A component that lets you drag the text you are editing to anywhere on the score.
// The text is not really part of the dialog but the location of the text appears
// in other dialog fields.
class SuiDragText extends _baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.dragging = false;
        this.running = false;
        this.value = '';
        this.session = null;
        this.dragging = false;
        this.running = false;
        this.staticText = this.dialog.getStaticText();
        this.altLabel = this.staticText.draggerLabel;
        this.value = '';
        this.view = this.dialog.getView();
    }
    get html() {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__.buildDom;
        var id = this.parameterId;
        var r = b('div').classes(this.makeClasses('cbDragTextDialog smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('button').attr('type', 'checkbox').classes('toggleTextEdit')
            .attr('id', id + '-input').append(b('span').classes('icon icon-move'))
            .append(b('label').attr('for', id + '-input').text(this.label)));
        return r;
    }
    show() { }
    hide() { }
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('button');
    }
    stopEditSession() {
        $('body').removeClass('text-move');
        $(this._getInputElement()).find('span.icon').removeClass('icon-checkmark').addClass('icon-move');
        if (this.session && this.session.dragging) {
            this.session.dragging = false;
            this.session.endDrag();
        }
        if (this.session) {
            this.session.unrender();
        }
        this.handleChanged();
        this.running = false;
    }
    startEditSession() {
        $('body').addClass('text-move');
        this.session = new _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_1__.SuiDragSession({
            textGroup: this.dialog.modifier,
            context: this.view.renderer.pageMap,
            scroller: this.view.tracker.scroller
        });
        $(this._getInputElement()).find('label').text(this.altLabel);
        $(this._getInputElement()).find('span.icon').removeClass('icon-enlarge').addClass('icon-checkmark');
        this.running = true;
    }
    mouseMove(e) {
        if (this.session && this.session.dragging) {
            this.session.mouseMove(e);
        }
    }
    mouseDown(e) {
        if (this.session && !this.session.dragging) {
            this.session.startDrag(e);
            this.dragging = true;
        }
    }
    mouseUp(e) {
        if (this.session && this.session.dragging) {
            this.session.endDrag();
            this.dragging = false;
        }
    }
    bind() {
        const self = this;
        $(this._getInputElement()).off('click').on('click', () => {
            if (self.running) {
                self.stopEditSession();
            }
            else {
                self.startEditSession();
            }
        });
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/dropdown.ts":
/*!***********************************************!*\
  !*** ./src/ui/dialogs/components/dropdown.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiDropdownComponent: () => (/* binding */ SuiDropdownComponent),
/* harmony export */   SuiDropdownComposite: () => (/* binding */ SuiDropdownComposite)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * Classes to support dropdown compontents
 * @module /ui/dialogs/components/dropdown
 */


/**
 * single-select dropdown list
 * @category SuiDialog
 */
class SuiDropdownComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_1__.SuiComponentBase {
    constructor(dialog, parameter) {
        var _a, _b;
        super(dialog, parameter);
        this.value = '';
        this.options = parameter.options;
        this.disabledOption = (_a = parameter.disabledOption) !== null && _a !== void 0 ? _a : '';
        this.dataType = (_b = parameter.dataType) !== null && _b !== void 0 ? _b : 'string';
    }
    checkDefault(s, b) {
        if (this.disabledOption.length) {
            s.prop('required', true).append(b('option').attr('selected', 'selected').prop('disabled', true).text(this.disabledOption));
        }
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const id = this.id;
        const r = b('div').classes(this.makeClasses('dropdownControl smoControl')).attr('id', id).attr('data-param', this.smoName);
        const s = b('select');
        this.checkDefault(s, b);
        this.options.forEach((option) => {
            s.append(b('option').attr('value', option.value.toString()).text(option.label));
        });
        r.append(s).append(b('label').attr('for', id + '-input').text(this.label));
        return r;
    }
    replaceOptions(options) {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const s = b('select');
        const sel = this._getInputElement();
        const parent = $(sel).parent();
        $(sel).remove();
        this.checkDefault(s, b);
        options.forEach((option) => {
            s.append(b('option').attr('value', option.value.toString()).text(option.label));
        });
        $(parent).append(s.dom());
        this.bind();
    }
    unselect() {
        $(this._getInputElement())[0].selectedIndex = -1;
        $(this._getInputElement()).blur();
    }
    _getInputElement() {
        var pid = this.id;
        return $(this.dialog.dgDom.element).find('#' + pid).find('select');
    }
    getValue() {
        const input = this._getInputElement();
        const option = input.find('option:selected');
        let val = $(option).val();
        val = (this.dataType.toLowerCase() === 'int') ? parseInt(val, 10) : val;
        val = (this.dataType.toLowerCase() === 'float') ? parseFloat(val) : val;
        if (typeof (val) === 'undefined') {
            val = $(input).find('option:first').val();
            $(input).find('option:first').prop('selected', true);
        }
        return val;
    }
    setValue(value) {
        const input = this._getInputElement();
        $(input).val(value);
    }
    bind() {
        const input = this._getInputElement();
        const self = this;
        $(input).off('change').on('change', () => {
            self.handleChanged();
        });
    }
}
/**
 * A dropdown composite mixes a dropdown with some other
 * @category SuiDialog
 */
class SuiDropdownComposite extends SuiDropdownComponent {
    constructor(dialog, parameters) {
        super(dialog, parameters);
        this.parentControl = parameters.parentControl;
    }
    handleChanged() {
        this.changeFlag = true;
        this.parentControl.changed();
        this.changeFlag = false;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/fileDownload.ts":
/*!***************************************************!*\
  !*** ./src/ui/dialogs/components/fileDownload.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiFileDownloadComponent: () => (/* binding */ SuiFileDownloadComponent)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _fileio_fileInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../fileio/fileInput */ "./src/ui/fileio/fileInput.ts");



// ## SuiFileDownloadComponent
// Download a test file using the file input.
class SuiFileDownloadComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_1__.SuiComponentBase {
    constructor(dialog, parameter) {
        var _a;
        super(dialog, parameter);
        this.value = null;
        this.defaultValue = (_a = parameter.defaultValue) !== null && _a !== void 0 ? _a : '';
        this.dialog = dialog;
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const id = this.parameterId;
        var r = b('div').classes(this.makeClasses('select-file')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('input').attr('type', 'file').classes('file-button')
            .attr('id', id + '-input')).append(b('label').attr('for', id + '-input').text(this.label));
        return r;
    }
    _handleUploadedFiles(evt) {
        const localFile = new _fileio_fileInput__WEBPACK_IMPORTED_MODULE_2__.SuiFileInput(evt);
        localFile.loadAsync().then(() => {
            this.value = localFile.value;
            this.handleChanged();
        });
    }
    getValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
    }
    bind() {
        const self = this;
        $('#' + this.parameterId).find('input').off('change').on('change', (e) => {
            self._handleUploadedFiles(e);
        });
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/fontComponent.ts":
/*!****************************************************!*\
  !*** ./src/ui/dialogs/components/fontComponent.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiFontComponent: () => (/* binding */ SuiFontComponent)
/* harmony export */ });
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropdown */ "./src/ui/dialogs/components/dropdown.ts");
/* harmony import */ var _rocker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rocker */ "./src/ui/dialogs/components/rocker.ts");
/* harmony import */ var _toggle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./toggle */ "./src/ui/dialogs/components/toggle.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../styles/font_metrics/ssp-serif-metrics */ "./src/styles/font_metrics/ssp-serif-metrics.js");
/* harmony import */ var _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../styles/font_metrics/ssp-sans-metrics */ "./src/styles/font_metrics/ssp-sans-metrics.js");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.








// ## SuiFontComponent
// Dialog component that lets user choose and customize fonts.
class SuiFontComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.dialog = dialog;
        const familyId = this.id + 'fontFamily';
        const sizeId = this.id + 'fontSize';
        this.familyPart = new _dropdown__WEBPACK_IMPORTED_MODULE_1__.SuiDropdownComposite(this.dialog, {
            id: familyId,
            smoName: 'fontFamily',
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiDropdownComponent',
            label: 'Font Family',
            parentControl: this,
            options: [
                { label: 'Arial', value: 'Arial' },
                { label: 'Times New Roman', value: 'Times New Roman' },
                { label: 'Serif', value: _styles_font_metrics_ssp_serif_metrics__WEBPACK_IMPORTED_MODULE_6__.SourceSerifProFont.fontFamily },
                { label: 'Sans', value: _styles_font_metrics_ssp_sans_metrics__WEBPACK_IMPORTED_MODULE_7__.SourceSansProFont.fontFamily },
                { label: 'Roboto Slab', value: 'Roboto Slab' },
                { label: 'Petaluma', value: 'Petaluma Script' },
                { label: 'Commissioner', value: 'Commissioner' },
                { label: 'Concert One', value: 'ConcertOne' },
                { label: 'Merriweather', value: 'Merriweather' }
            ]
        });
        this.sizePart = new _rocker__WEBPACK_IMPORTED_MODULE_2__.SuiRockerComposite(this.dialog, {
            id: sizeId,
            smoName: 'fontSize',
            defaultValue: 1,
            parentControl: this,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiRockerComponent',
            label: 'Font Size',
            dataType: 'float',
            increment: 0.1
        });
        this.italicsCtrl = new _toggle__WEBPACK_IMPORTED_MODULE_3__.SuiToggleComposite(this.dialog, {
            id: this.id + 'italic',
            smoName: 'italic',
            parentControl: this,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiToggleComponent',
            label: 'Italics'
        });
        this.boldCtrl = new _toggle__WEBPACK_IMPORTED_MODULE_3__.SuiToggleComposite(this.dialog, {
            id: this.id + 'bold',
            smoName: 'bold',
            parentControl: this,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiToggleComponent',
            label: 'Bold'
        });
    }
    changed() {
        this.handleChanged();
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__.buildDom;
        const q = b('div').classes(this.makeClasses('multiControl smoControl')).attr('id', this.id);
        if (this.label) {
            q.append(b('h3').classes('font-purpose').text(this.label));
        }
        q.append(this.familyPart.html);
        q.append(this.sizePart.html);
        q.append(this.boldCtrl.html);
        q.append(this.italicsCtrl.html);
        return q;
    }
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('select');
    }
    getValue() {
        return {
            family: this.familyPart.getValue().toString(),
            size: this.sizePart.getValue(),
            weight: this.boldCtrl.getValue() ? 'bold' : 'normal',
            style: this.italicsCtrl.getValue() ? 'italic' : 'normal'
        };
    }
    setValue(value) {
        var _a;
        let italics = false;
        // upconvert font size, all font sizes now in points.
        if (typeof (value.size) !== 'number') {
            value.size = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_4__.SmoScoreText.fontPointSize(value.size);
        }
        if (value.style && value.style === 'italic') {
            italics = true;
        }
        const boldString = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_4__.SmoScoreText.weightString(value.weight);
        const bold = boldString === 'bold';
        this.boldCtrl.setValue(bold);
        this.italicsCtrl.setValue(italics);
        this.familyPart.setValue((_a = value.family) !== null && _a !== void 0 ? _a : 'Arial');
        this.sizePart.setValue(value.size);
    }
    bind() {
        this.familyPart.bind();
        this.sizePart.bind();
        this.boldCtrl.bind();
        this.italicsCtrl.bind();
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/noteText.ts":
/*!***********************************************!*\
  !*** ./src/ui/dialogs/components/noteText.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiChordComponent: () => (/* binding */ SuiChordComponent),
/* harmony export */   SuiLyricComponent: () => (/* binding */ SuiLyricComponent),
/* harmony export */   SuiNoteTextComponent: () => (/* binding */ SuiNoteTextComponent)
/* harmony export */ });
/* harmony import */ var _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../render/sui/textEdit */ "./src/render/sui/textEdit.ts");
/* harmony import */ var _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../render/sui/textRender */ "./src/render/sui/textRender.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




/**
 * Base class for text editor components that navigate to
 * different notes.
 * */
class SuiNoteTextComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_3__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.session = null;
        this.value = null;
        this.started = false;
        this.view = this.dialog.getView();
        this.eventSource = this.dialog.getEventSource();
        this.selection = this.view.tracker.selections[0];
        this.selector = JSON.parse(JSON.stringify(this.selection.selector));
        this.staticText = this.dialog.getStaticText();
    }
    mouseMove(ev) {
        if (this.session && this.session.isRunning) {
            this.session.handleMouseEvent(ev);
        }
    }
    show() { }
    hide() { }
    mouseClick(ev) {
        if (this.session && this.session.isRunning) {
            this.session.handleMouseEvent(ev);
        }
    }
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('button');
    }
    get running() {
        return this.session && this.session.isRunning;
    }
    evKey(evdata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.session) {
                return yield this.session.evKey(evdata);
            }
            return false;
        });
    }
    setDialogLyric() {
        if (this.session && this.session.lyric) {
            this.dialog.setLyric(this.selector, this.session.lyric);
        }
    }
    moveSelectionRight() {
        if (this.session) {
            this.session.advanceSelection(false);
            this.setDialogLyric();
        }
    }
    moveSelectionLeft() {
        if (this.session) {
            this.session.advanceSelection(true);
            this.setDialogLyric();
        }
    }
    removeText() {
        if (this.session) {
            this.session.removeLyric();
        }
    }
    _bind() {
        $(this._getInputElement()).off('click').on('click', () => {
            if (this.session && this.session.isRunning) {
                this.endSession();
            }
            else {
                this.startEditSession();
            }
        });
        $('#' + this.parameterId + '-left').off('click').on('click', () => {
            this.moveSelectionLeft();
        });
        $('#' + this.parameterId + '-right').off('click').on('click', () => {
            this.moveSelectionRight();
        });
        $('#' + this.parameterId + '-remove').off('click').on('click', () => {
            this.removeText();
        });
    }
    getValue() {
        return this.value;
    }
}
/**
 * manage a lyric session that moves from note to note and adds lyrics.
 * @category SuiDialog
**/
class SuiLyricComponent extends SuiNoteTextComponent {
    constructor(dialog, parameter) {
        var _a;
        super(dialog, parameter);
        this.altLabel = this.staticText.doneEditing;
        this.started = false;
        this.verse = (_a = parameter.verse) !== null && _a !== void 0 ? _a : 0;
    }
    get html() {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__.buildDom;
        var id = this.parameterId;
        var r = b('div').classes(this.makeClasses('cbLyricEdit smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('div').classes('toggleEdit')
            .append(b('button').classes('toggleTextEdit')
            .attr('id', id + '-toggleInput').append(b('span').classes('icon icon-pencil'))).append(b('label').attr('for', id + '-toggleInput').text(this.label)))
            .append(b('div').classes('show-when-editing')
            .append(b('span')
            .append(b('button').attr('id', id + '-left').classes('icon-arrow-left buttonComponent')))
            .append(b('span')
            .append(b('button').attr('id', id + '-right').classes('icon-arrow-right buttonComponent')))
            .append(b('span')
            .append(b('button').attr('id', id + '-remove').classes('icon-cross buttonComponent'))));
        return r;
    }
    endSession() {
        this.started = false;
        console.log('ending text session');
        $(this._getInputElement()).find('label').text(this.label);
        const button = document.getElementById(this.parameterId);
        $(button).find('span.icon').removeClass('icon-checkmark').addClass('icon-pencil');
        if (this.session) {
            this.session.stopSession();
        }
        $('body').removeClass('text-edit');
    }
    startEditSession() {
        $(this._getInputElement()).find('label').text(this.altLabel);
        console.log('starting text session');
        if (this.started) {
            return;
        }
        // this.textElement=$(this.dialog.layout.svg).find('.'+modifier.attrs.id)[0];
        this.session = new _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_0__.SuiLyricSession({
            renderer: this.view.renderer,
            selector: this.selector,
            scroller: this.view.tracker.scroller,
            verse: this.verse,
            score: this.view.score,
            view: this.view
        });
        this.started = true;
        $('body').addClass('text-edit');
        const button = document.getElementById(this.parameterId);
        $(button).find('span.icon').removeClass('icon-pencil').addClass('icon-checkmark');
        this.session.startSession();
        this.setDialogLyric();
    }
    bind() {
        this._bind();
    }
}
// ## SuiChordComponent
// manage a chord editing session that moves from note to note and adds chord symbols.
class SuiChordComponent extends SuiNoteTextComponent {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.session = null;
        this.dialog = dialog;
        this.selection = this.view.tracker.selections[0];
        this.selector = JSON.parse(JSON.stringify(this.selection.selector));
        this.altLabel = this.staticText.doneEditing;
        this.verse = 0;
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__.buildDom;
        const id = this.parameterId;
        const r = b('div').classes(this.makeClasses('cbChordEdit smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('div').classes('toggleEdit')
            .append(b('button').classes('toggleTextEdit')
            .attr('id', id + '-toggleInput').append(b('span').classes('icon icon-pencil'))).append(b('label').attr('for', id + '-toggleInput').text(this.label)))
            .append(b('div').classes('show-when-editing')
            .append(b('span')
            .append(b('button').attr('id', id + '-left').classes('icon-arrow-left buttonComponent')))
            .append(b('span')
            .append(b('button').attr('id', id + '-right').classes('icon-arrow-right buttonComponent')))
            .append(b('span')
            .append(b('button').attr('id', id + '-remove').classes('icon-cross buttonComponent'))));
        return r;
    }
    endSession() {
        $(this._getInputElement()).find('label').text(this.label);
        const button = document.getElementById(this.parameterId);
        $(button).find('span.icon').removeClass('icon-checkmark').addClass('icon-pencil');
        if (this.session) {
            this.session.stopSession();
        }
        $('body').removeClass('text-edit');
    }
    startEditSession() {
        $(this._getInputElement()).find('label').text(this.altLabel);
        // this.textElement=$(this.dialog.layout.svg).find('.'+modifier.attrs.id)[0];
        this.session = new _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_0__.SuiChordSession({
            renderer: this.view.renderer,
            selector: this.selector,
            scroller: this.view.tracker.scroller,
            verse: 0,
            view: this.view,
            score: this.view.score
        });
        $('body').addClass('text-edit');
        const button = document.getElementById(this.parameterId);
        $(button).find('span.icon').removeClass('icon-pencil').addClass('icon-checkmark');
        this.session.startSession();
        this.setDialogLyric();
    }
    bind() {
        this._bind();
    }
    setTextType(type) {
        if (this.session) {
            this.session.textType = parseInt(type.toString(), 10);
        }
    }
    getTextType() {
        if (this.session) {
            return this.session.textType;
        }
        return _render_sui_textRender__WEBPACK_IMPORTED_MODULE_1__.SuiInlineText.textTypes.normal;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/rocker.ts":
/*!*********************************************!*\
  !*** ./src/ui/dialogs/components/rocker.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiRockerComponent: () => (/* binding */ SuiRockerComponent),
/* harmony export */   SuiRockerComposite: () => (/* binding */ SuiRockerComposite)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
/**
 * @module /ui/dialog/components/rocker
 * **/


/**
 * A numeric input box with +- buttons.   Adjustable type and scale
 * */
class SuiRockerComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_1__.SuiComponentBase {
    static get dataTypes() {
        return ['int', 'float', 'percent'];
    }
    static get increments() {
        return { 'int': 1, 'float': 0.1, 'percent': 10 };
    }
    static get parsers() {
        return { 'int': '_getIntValue', 'float': '_getFloatValue', 'percent': '_getPercentValue' };
    }
    constructor(dialog, params) {
        var _a, _b;
        super(dialog, params);
        this.initialValue = 0;
        this.increment = 1;
        this.dataType = (_a = params.dataType) !== null && _a !== void 0 ? _a : 'int';
        this.increment = (_b = params.increment) !== null && _b !== void 0 ? _b : SuiRockerComponent.increments[this.dataType];
        if (SuiRockerComponent.dataTypes.indexOf(this.dataType) < 0) {
            throw new Error('dialog element invalid type ' + this.dataType);
        }
        if (this.dataType === 'int' && this.increment < 1) {
            throw new Error('int component with decimal increment');
        }
        this.parser = SuiRockerComponent.parsers[this.dataType];
        this.dialog = dialog;
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const id = this.parameterId;
        const r = b('div').classes(this.makeClasses('rockerControl smoControl')).attr('id', id).attr('data-param', this.smoName)
            .append(b('button').classes('increment').append(b('span').classes('icon icon-circle-up'))).append(b('button').classes('decrement').append(b('span').classes('icon icon-circle-down'))).append(b('input').attr('type', 'text').classes('rockerInput')
            .attr('id', id + '-input')).append(b('label').attr('for', id + '-input').text(this.label));
        return r;
    }
    get parameterId() {
        return this.id;
    }
    handleChange() {
        this.changeFlag = true;
        this.dialog.changed();
        this.changeFlag = false;
    }
    bind() {
        const pid = this.parameterId;
        const input = this._getInputElement();
        let val = 0;
        $('#' + pid).find('button.increment').off('click').on('click', () => {
            val = this[this.parser]();
            if (this.dataType === 'percent') {
                val = 100 * val;
            }
            $(input).val(val + this.increment);
            this.handleChanged();
        });
        $('#' + pid).find('button.decrement').off('click').on('click', () => {
            val = this[this.parser]();
            if (this.dataType === 'percent') {
                val = 100 * val;
            }
            $(input).val(val - this.increment);
            this.handleChanged();
        });
        $(input).off('blur').on('blur', () => {
            val = this[this.parser]();
            if (val !== this.initialValue) {
                this.initialValue = val;
                this.handleChanged();
            }
        });
    }
    _getInputElement() {
        const pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('input');
    }
    _getIntValue() {
        let val = parseInt(this._getInputElement().val(), 10);
        val = isNaN(val) ? 0 : val;
        return val;
    }
    _getFloatValue() {
        let val = parseFloat(this._getInputElement().val());
        val = isNaN(val) ? 1.0 : val;
        return val;
    }
    _getPercentValue() {
        let val = parseFloat(this._getInputElement().val());
        val = isNaN(val) ? 1 : val;
        return val / 100;
    }
    _setIntValue(val) {
        this._getInputElement().val(val);
    }
    setValue(value) {
        if (this.dataType === 'percent') {
            value = value * 100;
        }
        this._setIntValue(value);
        this.initialValue = value;
    }
    getValue() {
        return this[this.parser]();
    }
}
class SuiRockerComposite extends SuiRockerComponent {
    constructor(dialog, parameters) {
        super(dialog, parameters);
        this.parentControl = parameters.parentControl;
    }
    handleChanged() {
        this.changeFlag = true;
        this.parentControl.changed();
        this.changeFlag = false;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/staffComponents.ts":
/*!******************************************************!*\
  !*** ./src/ui/dialogs/components/staffComponents.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaffAddRemoveComponent: () => (/* binding */ StaffAddRemoveComponent),
/* harmony export */   StaffCheckComponent: () => (/* binding */ StaffCheckComponent)
/* harmony export */ });
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _toggle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toggle */ "./src/ui/dialogs/components/toggle.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



class StaffAddRemoveComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.staffRows = [];
        this.createdShell = false;
        this.modifier = null;
        this.view = this.dialog.getView();
        this.staticText = dialog.getStaticText();
        this.label = this.staticText['includeStaff'];
    }
    setControlRows() {
        const mod = this.modifier;
        let i = mod.startSelector.staff;
        this.staffRows = [];
        this.view.storeScore.staves.forEach((staff) => {
            const name = this.label + ' ' + (staff.staffId + 1);
            const id = 'show-' + i;
            const elementParams = {
                smoName: id,
                classes: 'toggle-add-row',
                control: 'SuiToggleComponent',
                label: name,
                parentControl: this,
                id: id
            };
            // Toggle add of last row + 1
            if (staff.staffId === mod.endSelector.staff + 1) {
                const rowElement = new _toggle__WEBPACK_IMPORTED_MODULE_1__.SuiToggleComposite(this.dialog, elementParams);
                rowElement.parentControl = this;
                this.staffRows.push({
                    showCtrl: rowElement
                });
            }
            else if (staff.staffId > mod.startSelector.staff &&
                staff.staffId === mod.endSelector.staff) {
                elementParams.classes = 'toggle-remove-row';
                // toggle remove of ultimate row, other than first row
                const rowElement = new _toggle__WEBPACK_IMPORTED_MODULE_1__.SuiToggleComposite(this.dialog, elementParams);
                this.staffRows.push({
                    showCtrl: rowElement
                });
            }
            else if ((staff.staffId <= mod.endSelector.staff) &&
                (staff.staffId >= mod.startSelector.staff)) {
                // toggle remove of ultimate row, other than first row
                elementParams.classes = 'toggle-disabled';
                const rowElement = new _toggle__WEBPACK_IMPORTED_MODULE_1__.SuiToggleComposite(this.dialog, elementParams);
                this.staffRows.push({
                    showCtrl: rowElement
                });
            }
            i += 1;
        });
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__.buildDom;
        // a little hacky.  The first time we create an empty html shell for the control
        // subsequent times, we fill the html with the row information
        if (!this.createdShell) {
            this.createdShell = true;
            const q = b('div').classes(this.makeClasses('multiControl smoControl staffContainer')).attr('id', this.parameterId);
            return q;
        }
        else {
            const q = b('div').classes(this.makeClasses('smoControl'));
            this.staffRows.forEach((row) => {
                q.append(row.showCtrl.html);
            });
            return q;
        }
    }
    getInputElement() {
        var pid = this.parameterId;
        return $('#' + pid);
    }
    getValue() {
        if (!this.modifier) {
            throw 'No staff groups set for staff group component';
        }
        const mod = this.modifier;
        let nextStaff = mod.startSelector.staff;
        const maxMeasure = mod.endSelector.measure;
        mod.endSelector = JSON.parse(JSON.stringify(mod.startSelector));
        this.staffRows.forEach((staffRow) => {
            if (staffRow.showCtrl.getValue()) {
                mod.endSelector = { staff: nextStaff, measure: maxMeasure, voice: 0, tick: 0, pitches: [] };
                nextStaff += 1;
            }
        });
        return this.modifier;
    }
    setValue(staffGroup) {
        this.modifier = staffGroup;
        this.updateGroupMembership();
    }
    changed() {
        this.getValue(); // update modifier
        this.handleChanged();
        this.updateGroupMembership();
    }
    bind() {
        if (!this.modifier) {
            return;
        }
        // Can't bind before initial set of modifier
        this.staffRows.forEach((row) => {
            row.showCtrl.bind();
        });
    }
    updateGroupMembership() {
        const updateEl = this.getInputElement();
        this.setControlRows();
        $(updateEl).html('');
        $(updateEl).append(this.html.dom());
        $(updateEl).find('input').prop('disabled', false);
        $(updateEl).find('.toggle-disabled input').prop('checked', true);
        $(updateEl).find('.toggle-remove-row input').prop('checked', true);
        $(updateEl).find('.toggle-add-row input').prop('checked', false);
        $(updateEl).find('.toggle-disabled input').prop('disabled', true);
        this.bind();
    }
}
class StaffCheckComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.dialog = dialog;
        this.view = this.dialog.getView();
        this.staffRows = [];
        let previousStaff = null;
        this.view.storeScore.staves.forEach((staff) => {
            ;
            let name = 'View ' + staff.partInfo.partName;
            if (staff.partInfo.stavesBefore > 0 && previousStaff) {
                name = previousStaff + ' (2)';
            }
            previousStaff = name;
            const id = 'show-' + staff.staffId;
            const toggleParams = {
                smoName: id,
                classes: 'hide-when-editing',
                control: 'SuiToggleComponent',
                label: name,
                id: id,
                parentControl: this
            };
            const rowElement = new _toggle__WEBPACK_IMPORTED_MODULE_1__.SuiToggleComposite(this.dialog, toggleParams);
            this.staffRows.push({
                showCtrl: rowElement
            });
        });
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__.buildDom;
        const q = b('div').classes(this.makeClasses('multiControl smoControl staffContainer'));
        this.staffRows.forEach((row) => {
            q.append(row.showCtrl.html);
        });
        return q;
    }
    // Is this used for compound controls?
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('.staffContainer');
    }
    /* export interface StaffCheckValue {
    show: boolean;
  }*/
    getValue() {
        const rv = [];
        let i = 0;
        for (i = 0; i < this.staffRows.length; ++i) {
            const show = this.staffRows[i].showCtrl.getValue();
            rv.push({ show });
        }
        return rv;
    }
    setValue(rows) {
        let i = 0;
        rows.forEach((row) => {
            this.staffRows[i].showCtrl.setValue(row.show);
            i += 1;
        });
    }
    changed() {
        this.handleChanged();
    }
    bind() {
        this.staffRows.forEach((row) => {
            row.showCtrl.bind();
        });
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/textCheck.ts":
/*!************************************************!*\
  !*** ./src/ui/dialogs/components/textCheck.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextCheckComponent: () => (/* binding */ TextCheckComponent)
/* harmony export */ });
/* harmony import */ var _components_baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _components_toggle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/toggle */ "./src/ui/dialogs/components/toggle.ts");
/* harmony import */ var _components_textInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/textInput */ "./src/ui/dialogs/components/textInput.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




class TextCheckComponent extends _components_baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.dialog = dialog;
        this.view = this.dialog.getView();
        this.defaultValue = '';
        const toggleName = this.smoName + 'Toggle';
        const textName = this.smoName + 'Text';
        this.staticText = this.dialog.getStaticText();
        const label = this.staticText[textName];
        const show = this.staticText.show;
        this.toggleCtrl = new _components_toggle__WEBPACK_IMPORTED_MODULE_1__.SuiToggleComposite(this.dialog, {
            smoName: toggleName,
            control: 'SuiToggleComposite',
            label: show,
            parentControl: this,
            classes: '',
            id: toggleName
        });
        this.textCtrl = new _components_textInput__WEBPACK_IMPORTED_MODULE_2__.SuiTextInputComposite(this.dialog, {
            smoName: textName,
            defaultValue: this.defaultValue,
            control: 'SuiTextInputComposite',
            label,
            parentControl: this,
            classes: '',
            id: toggleName
        });
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_3__.buildDom;
        const q = b('div').classes(this.makeClasses('multiControl smoControl textCheckContainer'))
            .attr('id', this.parameterId);
        q.append(this.textCtrl.html);
        q.append(this.toggleCtrl.html);
        return q;
    }
    getInputElement() {
        var pid = this.parameterId;
        return $('#' + pid);
    }
    getValue() {
        return {
            checked: this.toggleCtrl.getValue(),
            text: this.textCtrl.getValue()
        };
    }
    setValue(val) {
        this.toggleCtrl.setValue(val.checked);
        this.textCtrl.setValue(val.text);
    }
    changed() {
        this.handleChanged();
    }
    bind() {
        this.toggleCtrl.bind();
        this.textCtrl.bind();
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/textInPlace.ts":
/*!**************************************************!*\
  !*** ./src/ui/dialogs/components/textInPlace.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTextBlockComponent: () => (/* binding */ SuiTextBlockComponent),
/* harmony export */   SuiTextInPlace: () => (/* binding */ SuiTextInPlace)
/* harmony export */ });
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../render/sui/textEdit */ "./src/render/sui/textEdit.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./button */ "./src/ui/dialogs/components/button.ts");
/* harmony import */ var _rocker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rocker */ "./src/ui/dialogs/components/rocker.ts");
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dropdown */ "./src/ui/dialogs/components/dropdown.ts");
/* harmony import */ var _render_sui_textRender__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../render/sui/textRender */ "./src/render/sui/textRender.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");








class SuiTextInPlace extends _baseComponent__WEBPACK_IMPORTED_MODULE_2__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.editMode = false;
        this.session = null;
        this.scroller = dialog.getView().scroller;
        this.value = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup(_smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.defaults);
        this.view = this.dialog.getView();
        const modifier = this.dialog.getModifier();
        if (modifier && _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.isTextGroup(modifier)) {
            this.value = modifier;
        }
        this.staticText = this.dialog.getStaticText();
        this.altLabel = this.staticText.editorLabel;
    }
    show() { }
    hide() { }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_7__.buildDom;
        const id = this.parameterId;
        const r = b('div').classes(this.makeClasses('cbTextInPlace smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('button').attr('type', 'checkbox').classes('toggleTextEdit')
            .attr('id', id + '-input').append(b('span').classes('icon icon-pencil'))
            .append(b('label').attr('for', id + '-input').text(this.label)));
        return r;
    }
    endSession() {
        $(this._getInputElement()).find('label').text(this.label);
        const button = document.getElementById(this.parameterId);
        $(button).find('span.icon').removeClass('icon-checkmark').addClass('icon-pencil');
        this.value.skipRender = false;
        if (this.session) {
            this.session.textGroup.tryParseUnicode();
            this.value = this.session.textGroup;
            this.session.stopSession();
        }
        $('body').removeClass('text-edit');
        this.handleChanged();
    }
    get isRunning() {
        return this.session && this.session.isRunning;
    }
    getValue() {
        return this.value;
    }
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('button');
    }
    mouseMove(ev) {
        if (this.session && this.session.isRunning) {
            this.session.handleMouseEvent(ev);
        }
    }
    mouseClick(ev) {
        if (this.session && this.session.isRunning) {
            this.session.handleMouseEvent(ev);
        }
    }
    _renderInactiveBlocks() {
        const modifier = this.value;
        const context = this.view.renderer.pageMap.getRendererFromModifier(this.value).getContext();
        context.save();
        context.setFillStyle('#ddd');
        const svgPage = this.view.renderer.pageMap.getRendererFromModifier(this.value);
        modifier.textBlocks.forEach((block) => {
            const st = block.text;
            if (st.attrs.id !== this.value.getActiveBlock().attrs.id && svgPage) {
                const svgText = _render_sui_textRender__WEBPACK_IMPORTED_MODULE_6__.SuiInlineText.fromScoreText(st, svgPage, this.view.renderer.pageMap, this.scroller);
                if (st.logicalBox) {
                    svgText.startX += st.logicalBox.x - st.x;
                    svgText.startY += (st.y - st.logicalBox.y) - st.logicalBox.height / 2;
                }
                const sgrp = context.openGroup();
                sgrp.classList.add('inactive-text');
                sgrp.classList.add('suiInlineText');
                svgText.render();
                context.closeGroup();
            }
        });
        context.restore();
    }
    startEditSession() {
        $(this._getInputElement()).find('label').text(this.altLabel);
        const modifier = this.value;
        modifier.skipRender = true;
        let pageContext = this.view.renderer.pageMap.getRendererFromModifier(this.value);
        $(pageContext.svg).find('#' + modifier.attrs.id).remove();
        this._renderInactiveBlocks();
        const ul = modifier.ul();
        // this.textElement=$(this.dialog.layout.svg).find('.'+modifier.attrs.id)[0];
        this.session = new _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_1__.SuiTextSession({
            renderer: this.view.renderer,
            scroller: this.scroller,
            x: ul.x,
            y: ul.y,
            textGroup: modifier,
            text: modifier.getActiveBlock().text,
            scoreText: modifier.getActiveBlock()
        });
        $('body').addClass('text-edit');
        this.value = this.session.textGroup;
        const button = document.getElementById(this.parameterId);
        $(button).find('span.icon').removeClass('icon-pencil').addClass('icon-checkmark');
        // Erase the original since we are going to edit it now.
        if (this.value) {
            this.value.elements.forEach((el) => {
                el.remove();
            });
            this.value.elements = [];
        }
        this.session.startSession();
        // blur the button so key events don't get passed to it.
        $(this._getInputElement()).blur();
    }
    evKey(evdata) {
        if (this.session) {
            this.session.evKey(evdata);
        }
    }
    bind() {
        $(this._getInputElement()).off('click').on('click', () => {
            if (this.session && this.session.isRunning) {
                this.endSession();
            }
            else {
                this.startEditSession();
            }
        });
    }
}
class SuiTextBlockComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_2__.SuiComponentParent {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.addBlockCtrl = new _button__WEBPACK_IMPORTED_MODULE_3__.SuiButtonComposite(this.dialog, {
            id: this.id + 'addBlock',
            smoName: 'addBlock',
            parentControl: this,
            icon: 'icon-plus',
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiButtonComponent',
            label: 'Add Text Block'
        });
        this.toggleBlockCtrl = new _button__WEBPACK_IMPORTED_MODULE_3__.SuiButtonComposite(this.dialog, {
            id: this.id + 'toggleBlock',
            smoName: 'toggleBlock',
            parentControl: this,
            icon: 'icon-arrow-right',
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiButtonComponent',
            label: 'Next Block'
        });
        this.removeBlockCtrl = new _button__WEBPACK_IMPORTED_MODULE_3__.SuiButtonComposite(this.dialog, {
            id: this.id + 'removeBlock',
            smoName: 'removeBlock',
            parentControl: this,
            icon: 'icon-minus',
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiButtonComponent',
            label: 'Remove Block'
        });
        this.relativePositionCtrl = new _dropdown__WEBPACK_IMPORTED_MODULE_5__.SuiDropdownComposite(this.dialog, {
            id: this.id + 'relativePosition',
            smoName: 'relativePosition',
            parentControl: this,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiDropdownComponent',
            label: 'Block Positions',
            options: [{
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.relativePositions.ABOVE,
                    label: 'Above'
                }, {
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.relativePositions.BELOW,
                    label: 'Below'
                }, {
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.relativePositions.LEFT,
                    label: 'Left'
                }, {
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.relativePositions.RIGHT,
                    label: 'Right'
                }]
        });
        this.justificationCtrl = new _dropdown__WEBPACK_IMPORTED_MODULE_5__.SuiDropdownComposite(this.dialog, {
            id: this.id + 'justification',
            smoName: 'justification',
            parentControl: this,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiDropdownComponent',
            label: 'Justification',
            options: [{
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.justifications.LEFT,
                    label: 'Left'
                }, {
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.justifications.RIGHT,
                    label: 'Right'
                }, {
                    value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.justifications.CENTER,
                    label: 'Center'
                }]
        });
        this.spacingCtrl = new _rocker__WEBPACK_IMPORTED_MODULE_4__.SuiRockerComposite(this.dialog, {
            id: this.id + 'spacing',
            smoName: 'spacing',
            defaultValue: 0,
            parentControl: this,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiRockerComponent',
            label: 'Spacing',
            dataType: 'float',
            increment: 0.1
        });
        const mod = this.dialog.getModifier();
        if (mod && _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.isTextGroup(mod)) {
            this.modifier = mod;
        }
        else {
            this.modifier = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup(_smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.defaults);
        }
        this.activeScoreText = this.modifier.textBlocks[0].text;
    }
    changed() {
        if (this.addBlockCtrl.changeFlag && this.modifier) {
            const nt = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoScoreText(this.activeScoreText);
            this.modifier.addScoreText(nt);
            this.activeScoreText = nt;
            this.modifier.setActiveBlock(nt);
            this._updateMultiiFields();
        }
        if (this.relativePositionCtrl.changeFlag) {
            this.modifier.setRelativePosition(parseInt(this.relativePositionCtrl.getValue().toString(), 10));
        }
        if (this.justificationCtrl.changeFlag) {
            this.modifier.justification = parseInt(this.justificationCtrl.getValue().toString(), 10);
        }
        if (this.removeBlockCtrl.changeFlag) {
            this.modifier.removeBlock(this.activeScoreText);
            this.activeScoreText = this.modifier.firstBlock();
            this._updateMultiiFields();
        }
        if (this.toggleBlockCtrl.changeFlag) {
            const curIx = this.modifier.indexOf(this.activeScoreText);
            const newIx = (curIx + 1) % this.modifier.textBlocks.length;
            this.activeScoreText = this.modifier.textBlocks[newIx].text;
            this.modifier.setActiveBlock(this.activeScoreText);
        }
        if (this.spacingCtrl.changeFlag) {
            const val = this.spacingCtrl.getValue();
            if (val >= 0) {
                this.modifier.spacing = val;
            }
        }
        this.handleChanged();
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_7__.buildDom;
        const q = b('div').classes(this.makeClasses('multiControl smoControl'));
        q.append(this.addBlockCtrl.html);
        q.append(this.removeBlockCtrl.html);
        q.append(this.toggleBlockCtrl.html);
        q.append(this.relativePositionCtrl.html);
        q.append(this.justificationCtrl.html);
        q.append(this.spacingCtrl.html);
        return q;
    }
    _getInputElement() {
        return $(this.dialog.dgDom.element).find('#' + this.parameterId);
    }
    getValue() {
        return {
            activeScoreText: this.activeScoreText,
            modifier: this.modifier
        };
    }
    _updateMultiiFields() {
        const fields = [this.justificationCtrl, this.relativePositionCtrl,
            this.removeBlockCtrl, this.toggleBlockCtrl, this.spacingCtrl];
        fields.forEach((field) => {
            if (this.modifier.textBlocks.length < 2) {
                $('#' + field.parameterId).addClass('hide');
            }
            else {
                $('#' + field.parameterId).removeClass('hide');
            }
        });
    }
    setValue(value) {
        this.activeScoreText = value.activeScoreText;
        this.modifier = value.modifier;
        this.relativePositionCtrl.setValue(this.modifier.relativePosition);
        this._updateMultiiFields();
        this.justificationCtrl.setValue(this.modifier.justification);
        this.spacingCtrl.setValue(this.modifier.spacing);
    }
    bind() {
        this.addBlockCtrl.bind();
        this.relativePositionCtrl.bind();
        this.justificationCtrl.bind();
        this.removeBlockCtrl.bind();
        this.toggleBlockCtrl.bind();
        this.spacingCtrl.bind();
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/textInput.ts":
/*!************************************************!*\
  !*** ./src/ui/dialogs/components/textInput.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTextInputComponent: () => (/* binding */ SuiTextInputComponent),
/* harmony export */   SuiTextInputComposite: () => (/* binding */ SuiTextInputComposite)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");


/**
 * Simple text input, like for a filename.  Not the text editing component.
 */
class SuiTextInputComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_1__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.defaultValue = '';
        this.value = '';
        this.dialog = dialog;
        this.value = '';
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const id = this.parameterId;
        const r = b('div').classes(this.makeClasses('text-input smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('input').attr('type', 'text').classes('file-name')
            .attr('id', id + '-input')).append(b('label').attr('for', id + '-input').text(this.label));
        return r;
    }
    getValue() {
        return this.value;
    }
    setValue(val) {
        this.value = val;
        $('#' + this.parameterId).find('input').val(val);
    }
    _getInputElement() {
        const pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('input');
    }
    bind() {
        const self = this;
        $('#' + this.parameterId).find('input').off('change').on('change', () => {
            self.value = $(this._getInputElement()).val();
            self.handleChanged();
        });
    }
}
class SuiTextInputComposite extends SuiTextInputComponent {
    constructor(dialog, parameters) {
        super(dialog, parameters);
        this.parentControl = parameters.parentControl;
    }
    handleChanged() {
        this.changeFlag = true;
        this.parentControl.changed();
        this.changeFlag = false;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/tie.ts":
/*!******************************************!*\
  !*** ./src/ui/dialogs/components/tie.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TieMappingComponent: () => (/* binding */ TieMappingComponent)
/* harmony export */ });
/* harmony import */ var _components_baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _components_dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/dropdown */ "./src/ui/dialogs/components/dropdown.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.





// ## TieMappingComponent
// Represent the pitches in 2 notes that can be individually tied together
class TieMappingComponent extends _components_baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentParent {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.controlRows = [];
        let i = 0;
        const modifier = this.dialog.getModifier();
        if (modifier && _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTie.isTie(modifier)) {
            this.modifier = modifier;
        }
        else { // should not happen
            this.modifier = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTie(_smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoTie.defaults);
        }
        this.startSelection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.noteFromSelector(this.dialog.getView().score, this.modifier.startSelector);
        this.endSelection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_3__.SmoSelection.noteFromSelector(this.dialog.getView().score, this.modifier.endSelector);
        if (this.startSelection === null || this.startSelection.note === null ||
            this.endSelection === null || this.endSelection.note === null) {
            return;
        }
        const pitchCount = Math.max(this.startSelection.note.pitches.length, this.endSelection.note.pitches.length);
        this.controlRows = [];
        for (i = 0; i < pitchCount; ++i) {
            const smoName = 'Line-' + (i + 1);
            const defaultValue = -1;
            const leftParams = {
                id: this.id + smoName + '-left',
                smoName: smoName + '-left',
                classes: 'leftControl',
                control: 'SuiDropdownComposite',
                label: dialog.getStaticText()['fromNote'],
                options: this._generateOptions(this.startSelection.note),
                parentControl: this
            };
            const leftControl = new _components_dropdown__WEBPACK_IMPORTED_MODULE_1__.SuiDropdownComposite(this.dialog, leftParams);
            const rightParams = {
                id: this.id + smoName + '-right',
                smoName: smoName + '-right',
                classes: 'rightControl',
                control: 'SuiDropdownComposite',
                label: dialog.getStaticText()['toNote'],
                options: this._generateOptions(this.endSelection.note),
                parentControl: this
            };
            const rightControl = new _components_dropdown__WEBPACK_IMPORTED_MODULE_1__.SuiDropdownComposite(this.dialog, rightParams);
            this.controlRows.push({ leftControl, rightControl });
        }
    }
    bind() {
        this.controlRows.forEach((row) => {
            row.rightControl.bind();
            row.leftControl.bind();
        });
    }
    _generateOptions(note) {
        const options = [];
        let index = 0;
        let label = '';
        options.push({ value: -1, label: 'No Line' });
        note.pitches.forEach((pitch) => {
            const value = index;
            label = pitch.letter.toUpperCase();
            if (pitch.accidental !== 'n') {
                label += pitch.accidental;
            }
            label += pitch.octave;
            options.push({ value, label });
            index += 1;
        });
        return options;
    }
    getValue() {
        const lines = [];
        this.controlRows.forEach((row) => {
            const left = parseInt(row.leftControl.getValue().toString(), 10);
            const right = parseInt(row.rightControl.getValue().toString(), 10);
            if (left >= 0 && right >= 0) {
                lines.push({ from: left, to: right });
            }
        });
        return lines;
    }
    setValue(modifier) {
        let i = 0;
        for (i = 0; i < this.controlRows.length; ++i) {
            const row = this.controlRows[i];
            if (modifier.length > i) {
                row.leftControl.setValue(modifier[i].from);
                row.rightControl.setValue(modifier[i].to);
            }
        }
    }
    changed() {
        this.handleChanged();
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_2__.buildDom;
        const q = b('div').classes(this.makeClasses('multiControl smoControl dropdownPair'))
            .attr('id', this.parameterId);
        this.controlRows.forEach((row) => {
            q.append(row.leftControl.html).append(row.rightControl.html);
        });
        return q;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/toggle.ts":
/*!*********************************************!*\
  !*** ./src/ui/dialogs/components/toggle.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiToggleComponent: () => (/* binding */ SuiToggleComponent),
/* harmony export */   SuiToggleComposite: () => (/* binding */ SuiToggleComposite)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");


/**
 * Simple boolean checkbox component
 */
class SuiToggleComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_1__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.defaultValue = false;
        this.defaultValue = false;
        this.dialog = dialog;
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const id = this.parameterId;
        const r = b('div').classes(this.makeClasses('toggleControl smoControl')).attr('id', this.parameterId).attr('data-param', this.smoName)
            .append(b('input').attr('type', 'checkbox').classes('toggleInput')
            .attr('id', id + '-input')).append(b('label').attr('for', id + '-input').text(this.label));
        return r;
    }
    _getInputElement() {
        const pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid).find('input');
    }
    setValue(value) {
        $(this._getInputElement()).prop('checked', value);
    }
    getValue() {
        return $(this._getInputElement()).prop('checked');
    }
    bind() {
        const input = this._getInputElement();
        $(input).off('change').on('change', () => {
            this.handleChanged();
        });
    }
}
// ### SuiToggleComposite
// Dropdown component that can be part of a composite control.
class SuiToggleComposite extends SuiToggleComponent {
    constructor(dialog, parameters) {
        super(dialog, parameters);
        this.parentControl = parameters.parentControl;
    }
    handleChanged() {
        this.changeFlag = true;
        this.parentControl.changed();
        this.changeFlag = false;
    }
}


/***/ }),

/***/ "./src/ui/dialogs/components/tree.ts":
/*!*******************************************!*\
  !*** ./src/ui/dialogs/components/tree.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTreeComponent: () => (/* binding */ SuiTreeComponent)
/* harmony export */ });
/* harmony import */ var _baseComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


// ### SuiDropdownComponent
// simple dropdown select list.
class SuiTreeComponent extends _baseComponent__WEBPACK_IMPORTED_MODULE_0__.SuiComponentBase {
    constructor(dialog, parameter) {
        super(dialog, parameter);
        this.persistControls = false;
        this.tree = {};
        this.options = [];
        this.root = parameter.root;
        this.value = this.root;
        this.options = parameter.options;
        this.calculateOptionTree();
    }
    calculateOptionTree() {
        this.tree = {};
        this.options.forEach((option) => {
            if (option.parent) {
                if (!(this.tree[option.parent])) {
                    this.tree[option.parent] = [];
                }
                this.tree[option.parent].push(option);
            }
        });
    }
    getNodesWithParent(parent) {
        return this.options.filter((oo) => oo.parent === parent);
    }
    appendOptionRecurse(b, option, level) {
        const children = this.getNodesWithParent(option.value);
        let treeClass = 'tree-branch';
        let buttonClass = 'expander';
        if (option.format === 'library' && children.length > 0) {
            if (this.persistControls && option.expanded) {
                buttonClass += ' expanded icon-minus';
            }
            if (this.persistControls && !option.expanded) {
                buttonClass += ' collapsed icon-plus';
                treeClass += ' collapsed';
            }
        }
        const current = b('li').classes(treeClass).attr('data-value', option.value).attr('data-level', level);
        current.append(b('button').classes(buttonClass));
        current.append(b('a').classes('tree-link').text(option.label));
        if (option.format === 'library') {
            current.append(b('span').classes('file-type icon-book'));
        }
        else {
            current.append(b('span').classes('file-type icon-file-music'));
        }
        children.forEach((child) => {
            current.append(b('ul').append(this.appendOptionRecurse(b, child, level + 1)));
        });
        return current;
    }
    _createTree(builder, ul) {
        // this.checkDefault(s, b);
        const options = this.getNodesWithParent(this.root);
        options.forEach((option) => {
            ul.append(this.appendOptionRecurse(builder, option, 0));
        });
    }
    get html() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.buildDom;
        const id = this.parameterId;
        const r = b('div').classes(this.makeClasses('dropdownControl smoControl')).attr('id', id).attr('data-param', this.smoName);
        const ul = b('ul').classes('tree tree-root');
        this._createTree(b, ul);
        r.append(ul);
        this.persistControls = true;
        return r;
    }
    updateOptions(options) {
        this.options = options;
        this.calculateOptionTree();
        const parentEl = $(this._getInputElement());
        const oldUl = $(parentEl).find('ul.tree-root');
        $(oldUl).remove();
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.buildDom;
        const ul = b('ul').classes('tree tree-root');
        this._createTree(b, ul);
        $(parentEl).append(ul.dom());
        this.bind();
    }
    _getInputElement() {
        var pid = this.parameterId;
        return $(this.dialog.dgDom.element).find('#' + pid);
    }
    getValue() {
        return this.value;
    }
    setValue(value) {
        $('ul.tree li').removeClass('selected');
        const option = this.options.find((o) => o.value === value);
        const input = this._getInputElement();
        const li = $(input).find('li[data-value="' + value + '"]');
        $(li).addClass('selected');
        if (option && option.format === 'library') {
            $(li).find('button').first().addClass('expanded icon-minus');
        }
        this.bindTreeControls();
    }
    bindTreeControls() {
        $('ul.tree button.expanded').off('click').on('click', (evt) => {
            const button = evt.currentTarget;
            $(button).removeClass('expanded').removeClass('icon-minus').addClass('icon-plus').addClass('collapsed');
            $(button).closest('li').addClass('collapsed');
            this.bindTreeControls();
        });
        $('ul.tree button.collapsed').off('click').on('click', (evt) => {
            const button = evt.currentTarget;
            $(button).addClass('expanded').addClass('icon-minus').removeClass('icon-plus').removeClass('collapsed');
            $(button).closest('li').removeClass('collapsed');
            this.bindTreeControls();
        });
    }
    bind() {
        const input = this._getInputElement();
        this.bindTreeControls();
        $(input).find('a.tree-link').each((ix, el) => {
            $(el).removeClass('selected');
            $(el).off('click').on('click', (ev) => {
                $(this._getInputElement()).find('li').removeClass('selected');
                const li = $(ev.currentTarget).closest('li.tree-branch');
                $(li).addClass('selected');
                this.value = $(li).attr('data-value');
                this.handleChanged();
            });
        });
    }
}


/***/ }),

/***/ "./src/ui/dialogs/dialog.ts":
/*!**********************************!*\
  !*** ./src/ui/dialogs/dialog.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiDialogBase: () => (/* binding */ SuiDialogBase),
/* harmony export */   createAndDisplayDialog: () => (/* binding */ createAndDisplayDialog),
/* harmony export */   dialogConstructor: () => (/* binding */ dialogConstructor)
/* harmony export */ });
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _components_baseComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/baseComponent */ "./src/ui/dialogs/components/baseComponent.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




/**
 * Note: Most dialogs will inherit from SuiDialogAdapter, not SuiDialogBase.
 * You will only want to inherit from SuiDialogBase under 2 conditions:
 * 1. the dialog is triviailly simple, like an alert box that makes no changes to the score, or
 * 2. the dialog is extremely complicated in how it interacts with the user, such that a form-based approach won't work
 * @category SuiDialog
 */
class SuiDialogBase extends _components_baseComponent__WEBPACK_IMPORTED_MODULE_2__.SuiDialogNotifier {
    static get displayOptions() {
        return {
            BINDCOMPONENTS: 'bindComponents', DRAGGABLE: 'makeDraggable',
            KEYBOARD_CAPTURE: 'captureKeyboardPromise', GLOBALPOS: 'positionGlobally',
            SELECTIONPOS: 'positionFromSelection', MODIFIERPOS: 'positionFromModifier',
            HIDEREMOVE: 'hideRemoveButton'
        };
    }
    // ### printXlate
    // print json with string labels to use as a translation file seed.
    static printTranslate(_class) {
        const output = [];
        const xx = eval('globalThis.Smo.' + _class);
        xx.dialogElements.elements.forEach((element) => {
            var _a;
            const component = {};
            if (element.label) {
                component.label = (_a = element.label) !== null && _a !== void 0 ? _a : '';
                component.id = element.smoName;
                if (element.options) {
                    component.options = [];
                    element.options.forEach((option) => {
                        component.options.push({ value: option.value, label: option.label });
                    });
                }
                output.push(component);
            }
        });
        // convert static text from an array of name/value pairs to a record for translation
        const staticText = {};
        const dialogStaticText = xx.dialogElements.staticText;
        if (dialogStaticText) {
            dialogStaticText.forEach((st) => {
                const key = Object.keys(st)[0];
                staticText[key] = st[key];
            });
        }
        return { ctor: xx.ctor, label: xx.dialogElements.label, dialogElements: output, staticText };
    }
    static getStaticText(staticText) {
        const rv = {};
        staticText.forEach((st) => {
            const key = Object.keys(st)[0];
            rv[key] = st[key];
        });
        return rv;
    }
    // ### SuiDialogBase ctor
    // Creates the DOM element for the dialog and gets some initial elements
    constructor(dialogElements, parameters) {
        super();
        this.components = [];
        this.boundComponents = [];
        this.cmap = {};
        this.staticText = [];
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'GLOBALPOS', 'HIDEREMOVE'];
        this.keydownHandler = null;
        this.id = parameters.id;
        this.boundKeyboard = false;
        this.scroller = parameters.view.tracker.scroller;
        this.label = dialogElements.label;
        this.eventSource = parameters.eventSource;
        this.view = parameters.view;
        this.completeNotifier = parameters.completeNotifier;
        this.modifier = parameters.modifier;
        this.ctor = parameters.ctor;
        this.closeDialogPromise = new Promise((resolve) => {
            $('body').off('dialogDismiss').on('dialogDismiss', () => {
                resolve();
            });
        });
        this.staticText = dialogElements.staticText;
        // If this dialog was spawned by a menu, wait for the menu to dismiss
        // before continuing.
        // this.startPromise = parameters.closeMenuPromise;
        this.startPromise = parameters.startPromise;
        this.dialogElements = dialogElements;
        const left = $('.musicRelief').offset().left + $('.musicRelief').width() / 2;
        const top = $('.musicRelief').offset().top + $('.musicRelief').height() / 2;
        this.dgDom = this._constructDialog(dialogElements, {
            id: 'dialog-' + this.id,
            top,
            left,
            label: this.label
        });
        // SmoTranslator.registerDialog(this.ctor);
    }
    // ### display
    // make3 the modal visible.  bind events and elements.
    display() {
        $('body').addClass('showAttributeDialog');
        this.bindComponents();
        this.bindElements();
        this.applyDisplayOptions();
        this.initialValue();
    }
    // ### bindElements
    // bing the generic controls in most dialogs.
    bindElements() {
        var dgDom = this.dgDom;
        $(dgDom.element).find('.ok-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            this.commit();
            this.complete();
        });
        $(dgDom.element).find('.cancel-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            if (this.modifier) {
                this.modifier.cancel();
            }
            this.complete();
        });
        $(dgDom.element).find('.remove-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            this.complete();
        });
    }
    bindComponents() {
        this.components.forEach((component) => {
            component.bind();
        });
    }
    initialValue() {
        if (this.modifier === null) {
            return;
        }
        this.boundComponents.forEach((comp) => {
            comp.setValue(this.modifier[comp.smoName]);
        });
    }
    changed() {
        if (this.modifier === null) {
            return;
        }
        this.boundComponents.forEach((comp) => {
            if (comp.changeFlag) {
                this.modifier[comp.smoName] = comp.getValue();
            }
        });
    }
    getId() {
        return this.id;
    }
    getModifier() {
        var _a;
        return (_a = this.modifier) !== null && _a !== void 0 ? _a : null;
    }
    getEventSource() {
        return this.eventSource;
    }
    getStaticText() {
        return SuiDialogBase.getStaticText(this.staticText);
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
    get closeModalPromise() {
        return this.closeDialogPromise;
    }
    // ### position
    // For dialogs based on selections, tries to place the dialog near the selection and also
    // to scroll so the dialog is in view
    static position(box, dgDom, scroller) {
        let y = (box.y + box.height) - scroller.netScroll.y;
        let x = 0;
        // TODO: adjust if db is clipped by the browser.
        const dge = $(dgDom.element).find('.attributeModal');
        const dgeHeight = $(dge).height();
        const maxY = $('.musicRelief').height();
        const maxX = $('.musicRelief').width();
        const offset = $('.dom-container').offset();
        y = y - offset.top;
        const offsetY = dgeHeight + y > window.innerHeight ? (dgeHeight + y) - window.innerHeight : 0;
        y = (y < 0) ? -y : y - offsetY;
        y = (y > maxY || y < 0) ? maxY / 2 : y;
        $(dge).css('top', '' + y + 'px');
        x = box.x - scroller.netScroll.x;
        x = x - offset.left;
        const w = $(dge).width();
        x = (x > window.innerWidth / 2) ? x - (w + 25) : x + (w + 25);
        x = (x < 0 || x > maxX) ? maxX / 2 : x;
        $(dge).css('left', '' + x + 'px');
    }
    getView() {
        return this.view;
    }
    applyDisplayOptions() {
        $('body').addClass('showAttributeDialog');
        this.displayOptions.forEach((option) => {
            this[SuiDialogBase.displayOptions[option]]();
        });
    }
    // ### position
    // Position the dialog near a selection.  If the dialog is not visible due
    // to scrolling, make sure it is visible.
    position(box) {
        SuiDialogBase.position(box, this.dgDom, this.view.tracker.scroller);
    }
    hideRemoveButton() {
        $(this.dgDom.element).find('.remove-button').remove();
    }
    // ### positionModifier()
    positionFromModifier() {
        if (this.modifier === null || this.modifier.logicalBox === null) {
            this.positionGlobally();
            return;
        }
        const pageContext = this.view.renderer.pageMap.getRendererFromModifier(this.modifier);
        const screenBox = this.view.renderer.pageMap.svgToClient(this.modifier.logicalBox);
        this.position(screenBox);
    }
    // ### positionGlobally
    // position the dialog box in the center of the current scroll region
    positionGlobally() {
        const box = _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_0__.SvgHelpers.boxPoints(250, 250, 1, 1);
        SuiDialogBase.position(box, this.dgDom, this.view.tracker.scroller);
    }
    // ### postionFromSelection
    // set initial position of dialog based on first selection
    positionFromSelection() {
        const note = this.view.tracker.selections[0].note;
        if (note && note.logicalBox) {
            const screenBox = this.view.renderer.pageMap.svgToClient(note.logicalBox);
            this.position(screenBox);
        }
    }
    // ### build the html for the dialog, based on the instance-specific components.
    _constructDialog(dialogElements, parameters) {
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.createTopDomContainer)('.attributeDialog');
        const id = parameters.id;
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.buildDom;
        const r = b('div').classes('attributeModal').attr('id', 'attr-modal-' + id)
            .css('top', parameters.top + 'px').css('left', parameters.left + 'px')
            .append(b('spanb').classes('draggable button').append(b('span').classes('icon icon-move jsDbMove')))
            .append(b('h2').classes('dialog-label').text(this.label));
        var ctrl = b('div').classes('smoControlContainer');
        dialogElements.elements.filter((de) => de.control).forEach((de) => {
            let ctor = null;
            if (typeof (de.control) === 'function') {
                ctor = de.control;
            }
            else {
                ctor = eval('globalThis.Smo.' + de.control);
            }
            const classes = de.classes ? de.classes : '';
            const compParams = Object.assign({ classes, id: id + de.smoName }, de);
            const control = new ctor(this, compParams);
            this.components.push(control);
            this.cmap[de.smoName + 'Ctrl'] = control;
            ctrl.append(control.html);
        });
        r.append(ctrl);
        r.append(b('div').classes('buttonContainer').append(b('button').classes('ok-button button-left').text('OK')).append(b('button').classes('cancel-button button-center').text('Cancel')).append(b('button').classes('remove-button button-right').text('Remove').append(b('span').classes('icon icon-cancel-circle'))));
        $('.attributeDialog').html('');
        $('.attributeDialog').append(r.dom());
        const trapper = new _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.InputTrapper('.attributeDialog');
        trapper.trap();
        $('.attributeDialog').find('.cancel-button').focus();
        return {
            element: $('.attributeDialog'),
            trapper
        };
    }
    // ### Complete
    // Dialogs take over the keyboard, so release that and trigger an event
    // that the dialog is closing that can resolve any outstanding promises.
    complete() {
        if (this.boundKeyboard && this.keydownHandler) {
            this.eventSource.unbindKeydownHandler(this.keydownHandler);
        }
        $('body').removeClass('showAttributeDialog');
        $('body').trigger('dialogDismiss');
        this.dgDom.trapper.close();
    }
    // ### makeDraggable
    // generic code to make the dialog box draggable so it doesn't
    // get in front of stuff.
    makeDraggable() {
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.createTopDomContainer)('.draganime');
        const cb = () => { };
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.draggable)({
            parent: $(this.dgDom.element).find('.attributeModal'),
            handle: $(this.dgDom.element).find('.jsDbMove'),
            animateDiv: '.draganime',
            cb,
            moveParent: true
        });
    }
    // ### captureKeyboardPromise
    // capture keyboard events until the dialog closes,
    // then give control back to the current keyboard
    captureKeyboardPromise() {
        if (!(this.startPromise)) {
            this.completeNotifier.unbindKeyboardForModal(this);
            this.bindKeyboard();
            return;
        }
        const getKeys = () => {
            this.completeNotifier.unbindKeyboardForModal(this);
            this.bindKeyboard();
        };
        if (this.startPromise) {
            this.startPromise.then(getKeys);
        }
    }
    // ### handleKeydown
    // allow a dialog to be dismissed by esc.
    evKey(evdata) {
        if (evdata.key === 'Escape') {
            $(this.dgDom.element).find('.cancel-button').click();
            evdata.preventDefault();
        }
    }
    // ### bindKeyboard
    // generic logic to grab keyboard elements for modal
    bindKeyboard() {
        this.boundKeyboard = true;
        this.keydownHandler = this.eventSource.bindKeydownHandler(this, 'evKey');
    }
}
function dialogConstructor(type, parameters) {
    return new type(parameters);
}
function createAndDisplayDialog(ctor, parameters) {
    const instance = dialogConstructor(ctor, parameters);
    instance.display();
    return instance;
}


/***/ }),

/***/ "./src/ui/dialogs/dynamics.ts":
/*!************************************!*\
  !*** ./src/ui/dialogs/dynamics.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiDynamicDialogAdapter: () => (/* binding */ SuiDynamicDialogAdapter),
/* harmony export */   SuiDynamicModifierDialog: () => (/* binding */ SuiDynamicModifierDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiDynamicDialogAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, modifier) {
        super(view);
        this.modifier = modifier;
        this.backup = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText(this.modifier);
        this.selection = this.view.tracker.modifierSelections[0].selection;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.addDynamic(this.selection, this.backup);
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    get xOffset() {
        return this.modifier.xOffset;
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeDynamic(this.modifier);
        });
    }
    set xOffset(value) {
        this.modifier.xOffset = value;
        this.view.addDynamic(this.selection, this.modifier);
    }
    get fontSize() {
        return this.modifier.fontSize;
    }
    set fontSize(value) {
        this.modifier.fontSize = value;
        this.view.addDynamic(this.selection, this.modifier);
    }
    get yOffsetLine() {
        return this.modifier.yOffsetLine;
    }
    set yOffsetLine(value) {
        this.modifier.yOffsetLine = value;
        this.view.addDynamic(this.selection, this.modifier);
    }
    get yOffsetPixels() {
        return this.modifier.yOffsetPixels;
    }
    set yOffsetPixels(value) {
        this.modifier.yOffsetPixels = value;
        this.view.addDynamic(this.selection, this.modifier);
    }
    get text() {
        return this.modifier.text;
    }
    set text(value) {
        this.modifier.text = value;
        this.view.addDynamic(this.selection, this.modifier);
    }
}
// ## SuiDynamicModifierDialog
// This is a poorly named class, it just allows you to placeText
// dynamic text so it doesn't collide with something.
class SuiDynamicModifierDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(parameters) {
        const adapter = new SuiDynamicDialogAdapter(parameters.view, parameters.modifier);
        super(SuiDynamicModifierDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.view.groupUndo(true);
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
    }
}
SuiDynamicModifierDialog.dialogElements = {
    label: 'Dynamics Properties', elements: [{
            smoName: 'yOffsetLine',
            defaultValue: 11,
            control: 'SuiRockerComponent',
            label: 'Y Line'
        }, {
            smoName: 'yOffsetPixels',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Y Offset Px'
        }, {
            smoName: 'xOffset',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'X Offset'
        }, {
            smoName: 'text',
            defaultValue: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.P,
            options: [{
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.P,
                    label: 'Piano'
                }, {
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.PP,
                    label: 'Pianissimo'
                }, {
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.MP,
                    label: 'Mezzo-Piano'
                }, {
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.MF,
                    label: 'Mezzo-Forte'
                }, {
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.F,
                    label: 'Forte'
                }, {
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.FF,
                    label: 'Fortissimo'
                }, {
                    value: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.dynamics.SFZ,
                    label: 'Sforzando'
                }],
            control: 'SuiDropdownComponent',
            label: 'Text'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/factory.ts":
/*!***********************************!*\
  !*** ./src/ui/dialogs/factory.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModifiersWithDialogNames: () => (/* binding */ ModifiersWithDialogNames),
/* harmony export */   SuiModifierDialogFactory: () => (/* binding */ SuiModifierDialogFactory),
/* harmony export */   isModifierWithDialog: () => (/* binding */ isModifierWithDialog)
/* harmony export */ });
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _hairpin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hairpin */ "./src/ui/dialogs/hairpin.ts");
/* harmony import */ var _slur__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slur */ "./src/ui/dialogs/slur.ts");
/* harmony import */ var _volta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./volta */ "./src/ui/dialogs/volta.ts");
/* harmony import */ var _lyric__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lyric */ "./src/ui/dialogs/lyric.ts");
/* harmony import */ var _tie__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tie */ "./src/ui/dialogs/tie.ts");
/* harmony import */ var _dynamics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dynamics */ "./src/ui/dialogs/dynamics.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./textBlock */ "./src/ui/dialogs/textBlock.ts");
/* harmony import */ var _textBracket__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./textBracket */ "./src/ui/dialogs/textBracket.ts");









var ModifiersWithDialogNames = ['SmoStaffHairpin', 'SmoTie', 'SmoSlur', 'SmoDynamicText', 'SmoVolta',
    'SmoScoreText', 'SmoLoadScore', 'SmoLyric', 'SmoTextGroup', 'SmoStaffTextBracket'];
function isModifierWithDialog(modifier) {
    return ModifiersWithDialogNames.indexOf(modifier.attrs.type) >= 0;
}
/**
 * Dialogs bound to selectable elements like slurs, dynamics, are created
 * directly from a button/menu option
 * @category SuiDialog
 */
class SuiModifierDialogFactory {
    static createModifierDialog(modifier, parameters) {
        if (!isModifierWithDialog(modifier)) {
            return null;
        }
        const ctor = modifier.attrs.type;
        parameters.modifier = modifier;
        if (ctor === 'SmoStaffHairpin') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_hairpin__WEBPACK_IMPORTED_MODULE_1__.SuiHairpinAttributesDialog, parameters);
        }
        else if (ctor === 'SmoTie') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_tie__WEBPACK_IMPORTED_MODULE_5__.SuiTieAttributesDialog, parameters);
        }
        else if (ctor === 'SmoSlur') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_slur__WEBPACK_IMPORTED_MODULE_2__.SuiSlurAttributesDialog, parameters);
        }
        else if (ctor === 'SmoDynamicText') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_dynamics__WEBPACK_IMPORTED_MODULE_6__.SuiDynamicModifierDialog, parameters);
        }
        else if (ctor === 'SmoVolta') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_volta__WEBPACK_IMPORTED_MODULE_3__.SuiVoltaAttributeDialog, parameters);
        }
        else if (ctor === 'SmoTextGroup') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_textBlock__WEBPACK_IMPORTED_MODULE_7__.SuiTextBlockDialog, parameters);
        }
        else if (ctor === 'SmoStaffTextBracket') {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_textBracket__WEBPACK_IMPORTED_MODULE_8__.SuiTextBracketDialog, parameters);
        }
        else {
            return (0,_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_lyric__WEBPACK_IMPORTED_MODULE_4__.SuiLyricDialog, parameters);
        }
    }
}


/***/ }),

/***/ "./src/ui/dialogs/fileDialogs.ts":
/*!***************************************!*\
  !*** ./src/ui/dialogs/fileDialogs.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiLoadFileDialog: () => (/* binding */ SuiLoadFileDialog),
/* harmony export */   SuiLoadMidiDialog: () => (/* binding */ SuiLoadMidiDialog),
/* harmony export */   SuiLoadMxmlDialog: () => (/* binding */ SuiLoadMxmlDialog),
/* harmony export */   SuiMidiLoadAdapter: () => (/* binding */ SuiMidiLoadAdapter),
/* harmony export */   SuiMidiSaveAdapter: () => (/* binding */ SuiMidiSaveAdapter),
/* harmony export */   SuiPrintFileDialog: () => (/* binding */ SuiPrintFileDialog),
/* harmony export */   SuiSaveFileDialog: () => (/* binding */ SuiSaveFileDialog),
/* harmony export */   SuiSaveMidiDialog: () => (/* binding */ SuiSaveMidiDialog),
/* harmony export */   SuiSaveVexDialog: () => (/* binding */ SuiSaveVexDialog),
/* harmony export */   SuiSaveXmlDialog: () => (/* binding */ SuiSaveXmlDialog),
/* harmony export */   SuiSmoLoadAdapter: () => (/* binding */ SuiSmoLoadAdapter),
/* harmony export */   SuiSmoSaveAdapter: () => (/* binding */ SuiSmoSaveAdapter),
/* harmony export */   SuiVexSaveAdapter: () => (/* binding */ SuiVexSaveAdapter),
/* harmony export */   SuiXmlLoadAdapter: () => (/* binding */ SuiXmlLoadAdapter),
/* harmony export */   SuiXmlSaveAdapter: () => (/* binding */ SuiXmlSaveAdapter)
/* harmony export */ });
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/mxml/xmlToSmo */ "./src/smo/mxml/xmlToSmo.ts");
/* harmony import */ var _smo_mxml_smoToXml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/mxml/smoToXml */ "./src/smo/mxml/smoToXml.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _smo_midi_smoToMidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../smo/midi/smoToMidi */ "./src/smo/midi/smoToMidi.ts");
/* harmony import */ var _smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../smo/midi/midiToSmo */ "./src/smo/midi/midiToSmo.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _smo_xform_toVex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../smo/xform/toVex */ "./src/smo/xform/toVex.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.










/**
 * internal state of FileLoadDialog is just the string for the filename.
 * @category SuiDialog
 */
class SuiSmoLoadAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.jsonFile = '';
    }
    get loadFile() {
        return this.jsonFile;
    }
    set loadFile(value) {
        this.jsonFile = value;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            let scoreWorks = false;
            if (this.jsonFile.length > 0) {
                try {
                    const score = _smo_data_score__WEBPACK_IMPORTED_MODULE_1__.SmoScore.deserialize(this.jsonFile);
                    scoreWorks = true;
                    yield this.view.changeScore(score);
                }
                catch (e) {
                    console.warn('unable to score ' + e);
                }
            }
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
/**
 * Load a SMO JSON file
 * @category SuiDialog
 */
class SuiLoadFileDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    get loadFileCtrl() {
        return this.cmap['loadFileCtrl'];
    }
    constructor(parameters) {
        const adapter = new SuiSmoLoadAdapter(parameters.view);
        parameters.ctor = 'SuiLoadFileDialog';
        super(SuiLoadFileDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.modifier = adapter;
    }
    changed() {
        super.changed();
        const enable = this.modifier.loadFile.length < 1;
        $(this.dgDom.element).find('.ok-button').prop('disabled', enable);
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.modifier.commit();
        });
    }
}
SuiLoadFileDialog.dialogElements = {
    label: 'Load File',
    elements: [{
            smoName: 'loadFile',
            defaultValue: '',
            control: 'SuiFileDownloadComponent',
            label: ''
        }
    ],
    staticText: []
};
/**
 * internal state of FileLoadDialog is just the string for the filename.
 * @category SuiDialog
 */
class SuiXmlLoadAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.xmlFile = '';
        this.changeScore = false;
    }
    get loadFile() {
        return this.xmlFile;
    }
    set loadFile(value) {
        this.xmlFile = value;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const self = this;
                const parser = new DOMParser();
                const xml = parser.parseFromString(this.xmlFile, 'text/xml');
                const score = _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_2__.XmlToSmo.convert(xml);
                score.layoutManager.zoomToWidth($('body').width());
                this.changeScore = true;
                yield this.view.changeScore(score);
            }
            catch (e) {
                console.warn('unable to score ' + e);
            }
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
/**
 * Load a music XML file
 * @category SuiDialog
 */
class SuiLoadMxmlDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    constructor(parameters) {
        parameters.ctor = 'SuiLoadMxmlDialog';
        const adapter = new SuiXmlLoadAdapter(parameters.view);
        super(SuiLoadMxmlDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
    changed() {
        super.changed();
        const enable = this.adapter.loadFile.length < 1;
        $(this.dgDom.element).find('.ok-button').prop('disabled', enable);
    }
}
SuiLoadMxmlDialog.dialogElements = {
    label: 'Load File',
    elements: [{
            smoName: 'loadFile',
            defaultValue: '',
            control: 'SuiFileDownloadComponent',
            label: ''
        },
    ],
    staticText: []
};
/**
 * internal state of FileLoadDialog is just the string for the filename.
 * @category SuiDialog
 */
class SuiMidiLoadAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.midiFile = null;
        this.changeScore = false;
        this.quantize = _smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_7__.MidiToSmo.quantizeTicksDefault;
    }
    get loadFile() {
        return this.midiFile;
    }
    set loadFile(value) {
        this.midiFile = value;
    }
    get quantizeDuration() {
        return this.quantize;
    }
    set quantizeDuration(value) {
        this.quantize = value;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // midi parser expects data in UintArray form
                const ar = new Uint8Array(this.midiFile);
                const midi = parseMidi(ar);
                const midiParser = new _smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_7__.MidiToSmo(midi, this.quantize);
                yield this.view.changeScore(midiParser.convert());
            }
            catch (e) {
                console.warn('unable to score ' + e);
            }
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiLoadMidiDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    constructor(parameters) {
        parameters.ctor = 'SuiLoadMidiDialog';
        const adapter = new SuiMidiLoadAdapter(parameters.view);
        super(SuiLoadMidiDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
    changed() {
        var _a, _b;
        super.changed();
        const enable = ((_b = (_a = this.adapter) === null || _a === void 0 ? void 0 : _a.loadFile) === null || _b === void 0 ? void 0 : _b.length) < 1;
        $(this.dgDom.element).find('.ok-button').prop('disabled', enable);
    }
}
SuiLoadMidiDialog.dialogElements = {
    label: 'Load File',
    elements: [{
            smoName: 'loadFile',
            defaultValue: '',
            control: 'SuiFileDownloadComponent',
            label: ''
        }, {
            smoName: 'quantizeDuration',
            defaultValue: _smo_data_score__WEBPACK_IMPORTED_MODULE_1__.SmoScore.engravingFonts.Bravura,
            control: 'SuiDropdownComponent',
            dataType: 'int',
            label: 'Quantize to:',
            options: [{
                    value: 1024,
                    label: '1/16th note'
                }, {
                    value: 512,
                    label: '1/32nd note'
                }, {
                    value: 2048,
                    label: '1/8th note'
                }]
        },
    ],
    staticText: []
};
class SuiPrintFileDialog extends _dialog__WEBPACK_IMPORTED_MODULE_0__.SuiDialogBase {
    constructor(parameters) {
        parameters.ctor = 'SuiPrintFileDialog';
        super(SuiPrintFileDialog.dialogElements, parameters);
    }
    changed() { }
    bindElements() {
        const dgDom = this.dgDom;
        $(dgDom.element).find('.ok-button').off('click').on('click', () => {
            $('body').removeClass('printing');
            this.view.renderer.restoreLayoutAfterPrint();
            window.dispatchEvent(new Event('resize'));
            this.complete();
        });
        $(dgDom.element).find('.cancel-button').remove();
        $(dgDom.element).find('.remove-button').remove();
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
SuiPrintFileDialog.dialogElements = {
    label: 'Print Complete',
    elements: [],
    staticText: []
};
class SuiVexSaveAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.fileName = '';
        this.page = 0;
        this.fileName = this.view.score.scoreInfo.name;
    }
    get saveFileName() {
        return this.fileName;
    }
    set saveFileName(value) {
        this.fileName = value;
    }
    get pageToRender() {
        return this.page;
    }
    set pageToRender(val) {
        this.page = val;
    }
    _saveScore() {
        return __awaiter(this, void 0, void 0, function* () {
            const vexText = _smo_xform_toVex__WEBPACK_IMPORTED_MODULE_9__.SmoToVex.convert(this.view.score, { div: 'smoo', page: this.page });
            if (!this.fileName.endsWith('.js')) {
                this.fileName = this.fileName + '.js';
            }
            /* TODO: zip multiple render files
            const zipname = this.fileName.replace('.js', 'zip');
            const zipFile = new JSZip();
            zipFile.file(this.fileName, vexText);
            const content = await zipFile.generateAsync({ type: 'blob' });
            addFileLink(zipname, content, $('.saveLink'));  */
            (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__.addFileLink)(this.fileName, vexText, $('.saveLink'));
            $('.saveLink a')[0].click();
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            let filename = this.fileName;
            const rawFile = filename.split('.')[0];
            if (!filename) {
                filename = 'vexRender.js';
            }
            if (filename.indexOf('.js') < 0) {
                filename = filename + '.js';
            }
            yield this._saveScore();
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiSaveVexDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    constructor(parameters) {
        parameters.ctor = 'SuiVexSaveDialog';
        const adapter = new SuiVexSaveAdapter(parameters.view);
        super(SuiSaveVexDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.commit();
        });
    }
}
SuiSaveVexDialog.dialogElements = {
    label: 'Save as Vex Code',
    elements: [{
            smoName: 'saveFileName',
            defaultValue: '',
            control: 'SuiTextInputComponent',
            label: 'File Name'
        }, {
            smoName: 'pageToRender',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Page',
            dataType: 'int',
        }],
    staticText: []
};
class SuiSmoSaveAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.fileName = '';
        this.fileName = this.view.score.scoreInfo.name;
    }
    get saveFileName() {
        return this.fileName;
    }
    set saveFileName(value) {
        this.fileName = value;
    }
    _saveScore() {
        const json = this.view.storeScore.serialize();
        const jsonText = JSON.stringify(json);
        if (!this.fileName.endsWith('.json')) {
            this.fileName = this.fileName + '.json';
        }
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__.addFileLink)(this.fileName, jsonText, $('.saveLink'));
        $('.saveLink a')[0].click();
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            let filename = this.fileName;
            const rawFile = filename.split('.')[0];
            if (!filename) {
                filename = 'myScore.json';
            }
            if (filename.indexOf('.json') < 0) {
                filename = filename + '.json';
            }
            const scoreInfo = this.view.score.scoreInfo;
            scoreInfo.name = rawFile;
            scoreInfo.version = scoreInfo.version + 1;
            yield this.view.updateScoreInfo(scoreInfo);
            this._saveScore();
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiSaveFileDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    constructor(parameters) {
        parameters.ctor = 'SuiSaveFileDialog';
        const adapter = new SuiSmoSaveAdapter(parameters.view);
        super(SuiSaveFileDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.commit();
        });
    }
}
SuiSaveFileDialog.dialogElements = {
    label: 'Save Score',
    elements: [{
            smoName: 'saveFileName',
            defaultValue: '',
            control: 'SuiTextInputComponent',
            label: 'File Name'
        }],
    staticText: []
};
class SuiXmlSaveAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.fileName = '';
    }
    get saveFileName() {
        return this.fileName;
    }
    set saveFileName(value) {
        this.fileName = value;
    }
    _saveXml() {
        const dom = _smo_mxml_smoToXml__WEBPACK_IMPORTED_MODULE_3__.SmoToXml.convert(this.view.storeScore);
        const ser = new XMLSerializer();
        const xmlText = ser.serializeToString(dom);
        if (!this.fileName.endsWith('.xml') && !this.fileName.endsWith('.mxml')) {
            this.fileName = this.fileName + '.xml';
        }
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__.addFileLink)(this.fileName, xmlText, $('.saveLink'));
        $('.saveLink a')[0].click();
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            let filename = this.fileName;
            if (!filename) {
                filename = 'myScore.xml';
            }
            if (filename.indexOf('.xml') < 0) {
                filename = filename + '.xml';
            }
            this.view.score.scoreInfo.version += 1;
            this._saveXml();
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
    // noop
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiSaveXmlDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    constructor(parameters) {
        parameters.ctor = 'SuiSaveXmlDialog';
        const adapter = new SuiXmlSaveAdapter(parameters.view);
        super(SuiSaveXmlDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.commit();
        });
    }
}
SuiSaveXmlDialog.dialogElements = {
    label: 'Save Score',
    elements: [{
            smoName: 'saveFileName',
            control: 'SuiTextInputComponent',
            label: 'File Name'
        }],
    staticText: []
};
class SuiMidiSaveAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.fileName = '';
    }
    get saveFileName() {
        return this.fileName;
    }
    set saveFileName(value) {
        this.fileName = value;
    }
    _saveScore() {
        const bytes = _smo_midi_smoToMidi__WEBPACK_IMPORTED_MODULE_6__.SmoToMidi.convert(this.view.storeScore);
        if (!this.fileName.endsWith('.mid')) {
            this.fileName = this.fileName + '.mid';
        }
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_5__.addFileLink)(this.fileName, bytes, $('.saveLink'), 'audio/midi');
        $('.saveLink a')[0].click();
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            let filename = this.fileName;
            if (!filename) {
                filename = 'myScore.mid';
            }
            if (filename.indexOf('.mid') < 0) {
                filename = filename + '.mid';
            }
            this.view.score.scoreInfo.version += 1;
            this._saveScore();
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_8__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiSaveMidiDialog extends _adapter__WEBPACK_IMPORTED_MODULE_4__.SuiDialogAdapterBase {
    constructor(parameters) {
        parameters.ctor = 'SuiSaveMidiDialog';
        const adapter = new SuiMidiSaveAdapter(parameters.view);
        super(SuiSaveMidiDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adapter.commit();
        });
    }
}
SuiSaveMidiDialog.dialogElements = {
    label: 'Save Score as Midi',
    elements: [{
            smoName: 'saveFileName',
            control: 'SuiTextInputComponent',
            label: 'File Name'
        }],
    staticText: []
};
/*
export class SuiSaveActionsDialog extends SuiDialogBase {
  static dialogElements =
      {
        label: 'Save Score', elements:
          [{
            smoName: 'saveFileName',
            defaultValue: '',
            control: 'SuiTextInputComponent',
            label: 'File Name'
          }],
          staticText: []
      };
      value: string;
  constructor(parameters: SuiDialogParams) {
    super(SuiSaveActionsDialog.dialogElements, parameters);
    this.value = SuiSaveActionsDialog.createName(this.view.score);
  }
  changed() {
    this.value = this.saveFileNameCtrl.getValue();
  }
  get saveFileNameCtrl() {
    return this.cmap['saveFileNameCtrl'] as SuiTextInputComponent;
  }
  commit() {
    let filename = this.value;
    if (!filename) {
      filename = 'myScore.json';
    }
    if (filename.indexOf('.json') < 0) {
      filename = filename + '.json';
    }
    this.view.score.scoreInfo.version += 1;
    this.view.saveActions(filename);
    this.complete();
  }
  display() {
    this.applyDisplayOptions();
    this.saveFileNameCtrl.setValue(this.value);
    this.bindElements();
  }
  static createName(score: SmoScore) {
    return score.scoreInfo.name + '-' + score.scoreInfo.version + '-actions.json';
  }
  static createAndDisplay(params: SuiDialogParams) {
    var dg = new SuiSaveActionsDialog(params);
    dg.display();
  }
}  */


/***/ }),

/***/ "./src/ui/dialogs/fonts.ts":
/*!*********************************!*\
  !*** ./src/ui/dialogs/fonts.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreFontAdapter: () => (/* binding */ SuiScoreFontAdapter),
/* harmony export */   SuiScoreFontDialog: () => (/* binding */ SuiScoreFontDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SuiScoreFontAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiComponentAdapter {
    static get defaultFont() {
        return {
            family: 'Merriweather',
            size: 14,
            weight: 'normal',
            style: 'normal'
        };
    }
    constructor(view) {
        super(view);
        this.changed = false;
        this.fonts = this.view.score.fonts;
        this.backups = JSON.parse(JSON.stringify(this.fonts));
        this.view = view;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                this.fonts = this.backups;
                // This takes advantage of setter/getter side-effect
                this.engravingFont = this.engravingFont;
                this.lyricFont = this.lyricFont;
                this.chordFont = this.chordFont;
            }
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
    changeFont(purpose, name, fontInfo) {
        var _a;
        const fontSize = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_1__.SmoScoreText.fontPointSize(fontInfo.family);
        const fontFamily = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : 'Arial';
        const fp = {
            name,
            purpose,
            family: fontFamily,
            size: fontSize,
            custom: false
        };
        const fonts = this.fonts.filter((ff) => ff.purpose !== purpose);
        fonts.push(fp);
        this.fonts = fonts;
        this.changed = true;
        return fp;
    }
    toInfo(fontPurpose) {
        return Object.assign({ weight: 'normal', style: 'normal' }, fontPurpose);
    }
    getInfo(purpose) {
        const font = this.fonts.find((ff) => ff.purpose === purpose);
        if (font) {
            return this.toInfo(font);
        }
        return SuiScoreFontAdapter.defaultFont;
    }
    // Only family can be editor for engraving font, so parameter is just a string
    get engravingFont() {
        var _a;
        const font = this.fonts.find((ff) => ff.purpose === _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.ENGRAVING);
        if (font) {
            return (_a = this.toInfo(font).family) !== null && _a !== void 0 ? _a : 'Arial';
        }
        return 'Bravura';
    }
    set engravingFont(value) {
        this.changed = true;
        const current = this.getInfo(_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.ENGRAVING);
        current.family = value;
        const fp = this.changeFont(_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.ENGRAVING, 'engraving', current);
        if ((0,_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.isEngravingFont)(fp.family)) {
            this.view.setEngravingFontFamily(fp.family);
        }
    }
    set chordFont(fontInfo) {
        const fp = this.changeFont(_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.CHORDS, 'chords', fontInfo);
        this.view.setChordFont(this.toInfo(fp));
        this.changed = true;
    }
    get chordFont() {
        return this.getInfo(_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.CHORDS);
    }
    set lyricFont(fontInfo) {
        this.changed = true;
        const fp = this.changeFont(_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.LYRICS, 'lyrics', fontInfo);
        this.view.setLyricFont(this.toInfo(fp));
    }
    get lyricFont() {
        return this.getInfo(_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.fontPurposes.LYRICS);
    }
}
class SuiScoreFontDialog extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiDialogAdapterBase {
    static createAndDisplay(parameters) {
        const dg = new SuiScoreFontDialog(parameters);
        dg.display();
    }
    constructor(params) {
        const adapter = new SuiScoreFontAdapter(params.view);
        super(SuiScoreFontDialog.dialogElements, Object.assign({ adapter }, params));
        this.modifier = params.modifier;
    }
}
// ### dialogElements
// all dialogs have elements define the controls of the dialog.
SuiScoreFontDialog.dialogElements = {
    label: 'Score Fonts', elements: [{
            smoName: 'engravingFont',
            defaultValue: _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.engravingFonts.Bravura,
            control: 'SuiDropdownComponent',
            label: 'Engraving Font',
            options: [{
                    value: 'Bravura',
                    label: 'Bravura'
                }, {
                    value: 'Gonville',
                    label: 'Gonville'
                }, {
                    value: 'Petaluma',
                    label: 'Petaluma'
                }, {
                    value: 'Leland',
                    label: 'Leland'
                }]
        }, {
            smoName: 'chordFont',
            classes: 'chord-font-component',
            defaultValue: 0,
            control: 'SuiFontComponent',
            label: 'Chord Font'
        }, {
            smoName: 'lyricFont',
            classes: 'lyric-font-component',
            defaultValue: 0,
            control: 'SuiFontComponent',
            label: 'Lyric Font'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/globalLayout.ts":
/*!****************************************!*\
  !*** ./src/ui/dialogs/globalLayout.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiGlobalLayoutAdapter: () => (/* binding */ SuiGlobalLayoutAdapter),
/* harmony export */   SuiGlobalLayoutDialog: () => (/* binding */ SuiGlobalLayoutDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




class SuiGlobalLayoutAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.changed = false;
        this.scoreLayout = this.view.score.layoutManager.globalLayout;
        this.backup = this.view.score.layoutManager.getGlobalLayout();
        this.view = view;
    }
    // TODO: writeValue is not called in a global context
    writeValue(attr, value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.scoreLayout[attr] === value) {
                return;
            }
            this.scoreLayout[attr] = value;
            yield this.view.setGlobalLayout(this.scoreLayout);
            this.changed = true;
        });
    }
    get noteSpacing() {
        return this.scoreLayout.noteSpacing;
    }
    set noteSpacing(value) {
        this.writeValue('noteSpacing', value);
    }
    get pageWidth() {
        return this.scoreLayout.pageWidth;
    }
    set pageWidth(value) {
        this.writeValue('pageWidth', value);
    }
    get pageHeight() {
        return this.scoreLayout.pageHeight;
    }
    set pageHeight(value) {
        this.writeValue('pageHeight', value);
    }
    get svgScale() {
        return this.scoreLayout.svgScale;
    }
    set svgScale(value) {
        this.writeValue('svgScale', value);
    }
    get zoomScale() {
        return this.scoreLayout.zoomScale;
    }
    set zoomScale(value) {
        this.writeValue('zoomScale', value);
    }
    get maxMeasureSystem() {
        return this.scoreLayout.maxMeasureSystem;
    }
    set maxMeasureSystem(value) {
        this.writeValue('maxMeasureSystem', value);
    }
    get pageSize() {
        const sz = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageSizeFromDimensions(this.scoreLayout.pageWidth, this.scoreLayout.pageHeight);
        if (sz === null) {
            return 'custom';
        }
        return sz;
    }
    set pageSize(value) {
        if (value === 'custom') {
            return;
        }
        if (_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageDimensions[value]) {
            const dims = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageDimensions[value];
            this.scoreLayout.pageWidth = dims.width;
            this.scoreLayout.pageHeight = dims.height;
        }
        this.view.setGlobalLayout(this.scoreLayout);
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.view.setGlobalLayout(this.backup);
            }
        });
    }
}
// ## SuiGlobalLayoutDialog
// change editor and formatting defaults for this score.
class SuiGlobalLayoutDialog extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiDialogAdapterBase {
    get dimensionControls() {
        return [this.cmap.pageSizeCtrl, this.cmap.pageWidthCtrl, this.cmap.pageHeightCtrl];
    }
    constructor(params) {
        const adapter = new SuiGlobalLayoutAdapter(params.view);
        super(SuiGlobalLayoutDialog.dialogElements, Object.assign({ adapter }, params));
    }
    changed() {
        super.changed();
        if (this.dimensionControls.find((x) => x.changeFlag)) {
            this.initialValue();
        }
    }
}
SuiGlobalLayoutDialog.dialogElements = {
    label: 'Global Settings', elements: [{
            smoName: 'noteSpacing',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.noteSpacing,
            control: 'SuiRockerComponent',
            dataType: 'percent',
            label: 'Note Spacing'
        }, {
            smoName: 'pageSize',
            defaultValue: _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageSizes[0],
            control: 'SuiDropdownComponent',
            label: 'Page Size',
            options: [
                {
                    value: 'letter',
                    label: 'Letter (Portrait)'
                }, {
                    value: 'letterLandscape',
                    label: 'Letter (Landscape)'
                }, {
                    value: 'tabloid',
                    label: 'Tabloid (11x17)'
                }, {
                    value: 'A4',
                    label: 'A4'
                }, {
                    value: 'custom',
                    label: 'Custom'
                }
            ]
        }, {
            smoName: 'pageWidth',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.pageWidth,
            control: 'SuiRockerComponent',
            label: 'Page Width (px)'
        }, {
            smoName: 'pageHeight',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.pageHeight,
            control: 'SuiRockerComponent',
            label: 'Page Height (px)'
        }, {
            smoName: 'zoomScale',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.zoomScale,
            control: 'SuiRockerComponent',
            label: '% Zoom',
            dataType: 'percent'
        }, {
            smoName: 'svgScale',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.svgScale,
            control: 'SuiRockerComponent',
            label: '% Note size',
            dataType: 'percent'
        }, {
            smoName: 'maxMeasureSystem',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.maxMeasureSystem,
            control: 'SuiRockerComponent',
            label: 'Max Measure/System (0=auto)',
            dataType: 'int'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/hairpin.ts":
/*!***********************************!*\
  !*** ./src/ui/dialogs/hairpin.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiHairpinAdapter: () => (/* binding */ SuiHairpinAdapter),
/* harmony export */   SuiHairpinAttributesDialog: () => (/* binding */ SuiHairpinAttributesDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiHairpinAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, hairpin) {
        super(view);
        this.changed = false;
        this.hairpin = hairpin;
        this.view = view;
        this.backup = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoStaffHairpin(this.hairpin);
        this.backup.attrs.id = hairpin.attrs.id;
        this.backup.associatedStaff = hairpin.associatedStaff;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.view.addOrUpdateStaffModifier(this.hairpin, this.backup);
            }
        });
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeStaffModifier(this.hairpin);
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    updateValue(param, val) {
        return __awaiter(this, void 0, void 0, function* () {
            const current = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoStaffHairpin(this.hairpin);
            this.hairpin[param] = val;
            yield this.view.addOrUpdateStaffModifier(current, this.hairpin);
            this.changed = true;
        });
    }
    get xOffsetLeft() {
        return this.hairpin.xOffsetLeft;
    }
    set xOffsetLeft(val) {
        this.updateValue('xOffsetLeft', val);
    }
    get xOffsetRight() {
        return this.hairpin.xOffsetRight;
    }
    set xOffsetRight(val) {
        this.updateValue('xOffsetRight', val);
    }
    get yOffset() {
        return this.hairpin.yOffset;
    }
    set yOffset(val) {
        this.updateValue('yOffset', val);
    }
    get height() {
        return this.hairpin.height;
    }
    set height(val) {
        this.updateValue('height', val);
    }
    get position() {
        return this.hairpin.position;
    }
    set position(val) {
        this.updateValue('position', val);
    }
}
class SuiHairpinAttributesDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(parameters) {
        const adapter = new SuiHairpinAdapter(parameters.view, parameters.modifier);
        super(SuiHairpinAttributesDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
    }
}
SuiHairpinAttributesDialog.dialogElements = {
    label: 'Hairpin Properties', elements: [{
            smoName: 'height',
            defaultValue: 10,
            control: 'SuiRockerComponent',
            label: 'Height'
        }, {
            smoName: 'yOffset',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Y Shift'
        }, {
            smoName: 'xOffsetRight',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Right Shift'
        }, {
            smoName: 'xOffsetLeft',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Left Shift'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/instrument.ts":
/*!**************************************!*\
  !*** ./src/ui/dialogs/instrument.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiInstrumentAdapter: () => (/* binding */ SuiInstrumentAdapter),
/* harmony export */   SuiInstrumentDialog: () => (/* binding */ SuiInstrumentDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _render_audio_samples__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../render/audio/samples */ "./src/render/audio/samples.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class SuiInstrumentAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.applies = SuiInstrumentDialog.applyTo.selected;
        const selection = this.view.tracker.selections[0];
        this.instrument = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoInstrument(this.view.score.getStaffInstrument(selection.selector));
        this.selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.getMeasureList(this.view.tracker.selections);
        this.selector = JSON.parse(JSON.stringify(this.selections[0].selector));
        this.backup = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoInstrument(this.instrument);
    }
    writeNumParam(paramName, value) {
        this.instrument[paramName] = value;
        this.view.changeInstrument(this.instrument, this.selections);
        this.instrument = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoInstrument(this.instrument);
    }
    writeStringParam(paramName, value) {
        this.instrument[paramName] = value;
        this.view.changeInstrument(this.instrument, this.selections);
        this.instrument = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoInstrument(this.instrument);
    }
    get transposeIndex() {
        return this.instrument.keyOffset;
    }
    set transposeIndex(value) {
        this.writeNumParam('keyOffset', value);
    }
    get instrumentName() {
        return this.instrument.instrumentName;
    }
    get subFamily() {
        return this.instrument.instrument;
    }
    set subFamily(value) {
        this.writeStringParam('instrument', value);
        this.instrument.family = _render_audio_samples__WEBPACK_IMPORTED_MODULE_4__.SuiSampleMedia.getFamilyForInstrument(value);
    }
    set instrumentName(value) {
        this.writeStringParam('instrumentName', value);
    }
    get clef() {
        return this.instrument.clef;
    }
    set clef(value) {
        this.instrument.clef = value;
        this.view.changeInstrument(this.instrument, this.selections);
        this.instrument = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoInstrument(this.instrument);
    }
    get applyTo() {
        return this.applies;
    }
    set applyTo(value) {
        this.applies = value;
        if (value === SuiInstrumentDialog.applyTo.score) {
            this.selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.selectionsToEnd(this.view.score, this.selector.staff, 0);
        }
        else if (this.applyTo === SuiInstrumentDialog.applyTo.remaining) {
            this.selections = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.selectionsToEnd(this.view.score, this.selector.staff, this.selector.measure);
        }
        else {
            this.selections = this.view.tracker.selections;
        }
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            // hack: the family name for musicxml purposes is here.
            this.instrument.family = _render_audio_samples__WEBPACK_IMPORTED_MODULE_4__.SuiSampleMedia.getFamilyForInstrument(this.instrument.instrument);
            yield this.view.changeInstrument(this.instrument, this.selections);
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.changeInstrument(this.backup, this.selections);
        });
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiInstrumentDialog extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiDialogAdapterBase {
    static get applyTo() {
        return {
            score: 0, selected: 1, remaining: 3
        };
    }
    constructor(parameters) {
        const adapter = new SuiInstrumentAdapter(parameters.view);
        super(SuiInstrumentDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
}
// export type Clef = 'treble' | 'bass' | 'tenor' | 'alto' | 'soprano' | 'percussion'
//| 'mezzo-soprano' | 'baritone-c' | 'baritone-f' | 'subbass' | 'french';
SuiInstrumentDialog.dialogElements = {
    label: 'Instrument Properties',
    elements: [{
            smoName: 'transposeIndex',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Transpose Index (1/2 steps)',
        }, {
            smoName: 'instrumentName',
            control: 'SuiTextInputComponent',
            label: 'Name'
        }, {
            smoName: 'subFamily',
            control: 'SuiDropdownComponent',
            label: 'Sample Sound',
            options: [{
                    value: 'piano',
                    label: 'Grand Piano'
                }, {
                    value: 'bass',
                    label: 'Bass (bowed)'
                }, {
                    value: 'jazzBass',
                    label: 'Bass (plucked)'
                }, {
                    value: 'eGuitar',
                    label: 'Electric Guitar'
                }, {
                    value: 'cello',
                    label: 'Cello'
                }, {
                    value: 'violin',
                    label: 'Violin'
                }, {
                    value: 'trumpet',
                    label: 'Bb Trumpet'
                }, {
                    value: 'horn',
                    label: 'F Horn'
                }, {
                    value: 'trombone',
                    label: 'Trombone'
                }, {
                    value: 'tuba',
                    label: 'Tuba'
                }, {
                    value: 'clarinet',
                    label: 'Bb Clarinet'
                }, {
                    value: 'flute',
                    label: 'Flute'
                }, {
                    value: 'altoSax',
                    label: 'Eb Alto Sax'
                }, {
                    value: 'tenorSax',
                    label: 'Bb Tenor Sax'
                }, {
                    value: 'bariSax',
                    label: 'Eb Bari Sax'
                }, {
                    value: 'pad',
                    label: 'Synth Pad'
                }, {
                    value: 'percussion',
                    label: 'Percussion'
                }, {
                    value: 'none',
                    label: 'None'
                }]
        }, {
            smoName: 'clef',
            control: 'SuiDropdownComponent',
            label: 'Clef',
            options: [{
                    value: 'treble',
                    label: 'Treble'
                }, {
                    value: 'bass',
                    label: 'Bass'
                }, {
                    value: 'tenor',
                    label: 'Tenor'
                }, {
                    value: 'alto',
                    label: 'Alto'
                }, {
                    label: 'Percussion',
                    value: 'percussion'
                }]
        }, {
            smoName: 'applyTo',
            defaultValue: SuiInstrumentDialog.applyTo.score,
            dataType: 'int',
            control: 'SuiDropdownComponent',
            label: 'Apply To',
            options: [{
                    value: SuiInstrumentDialog.applyTo.score,
                    label: 'Score'
                }, {
                    value: SuiInstrumentDialog.applyTo.selected,
                    label: 'Selected Measures'
                }, {
                    value: SuiInstrumentDialog.applyTo.remaining,
                    label: 'Remaining Measures'
                }]
        }
    ],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/library.ts":
/*!***********************************!*\
  !*** ./src/ui/dialogs/library.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiLibraryAdapter: () => (/* binding */ SuiLibraryAdapter),
/* harmony export */   SuiLibraryDialog: () => (/* binding */ SuiLibraryDialog)
/* harmony export */ });
/* harmony import */ var _fileio_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../fileio/library */ "./src/ui/fileio/library.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class SuiLibraryAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, config) {
        super(view);
        this.elements = null;
        this.selectedUrl = '';
        this.libHash = {};
        this.tree = {};
        // If the selected lib is a leaf node (a score), this is the same as that
        this.selectedScore = null;
        this.config = config;
        this.topLib = new _fileio_library__WEBPACK_IMPORTED_MODULE_0__.SmoLibrary({ url: this.config.libraryUrl });
        this.libHash = {};
        this.selectedLib = null;
    }
    loadPromise() {
    }
    initialize() {
        const self = this;
        return new Promise((resolve) => {
            self.topLib.load().then(() => {
                self.libHash[self.topLib.url] = self.topLib;
                resolve();
            });
        });
    }
    static addChildRecurse(options, parent, child) {
        options.push({ label: child.metadata.name, value: child.url, parent: parent.url, format: child.format, expanded: false });
        child.children.forEach((gchild) => {
            SuiLibraryAdapter.addChildRecurse(options, child, gchild);
        });
    }
    static createOptions(topLib) {
        const options = [];
        topLib.children.forEach((child) => {
            SuiLibraryAdapter.addChildRecurse(options, topLib, child);
        });
        return options;
    }
    buildTreeRecurse(children) {
        children.forEach((child) => {
            this.tree[child.url] = child;
            this.buildTreeRecurse(child.children);
        });
    }
    buildTree() {
        this.tree = {};
        this.buildTreeRecurse(this.topLib.children);
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    loadOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const self = this;
            return new Promise((resolve) => {
                if (self.selectedLib.format === 'library') {
                    if (!self.selectedLib.loaded) {
                        self.selectedLib.load().then(() => {
                            const nops = SuiLibraryAdapter.createOptions(self.topLib);
                            nops.forEach((option) => {
                                options.push(option);
                            });
                            resolve();
                        });
                    }
                    else {
                        const nops = SuiLibraryAdapter.createOptions(self.topLib);
                        nops.forEach((option) => {
                            options.push(option);
                        });
                        resolve();
                    }
                }
                else {
                    self.selectedScore = this.selectedLib;
                    resolve();
                }
            });
        });
    }
    _loadScore() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.loadRemoteScore(this.selectedScore.url);
        });
    }
    get selectedLibrary() {
        return this.selectedLib;
    }
    get smoLibrary() {
        return this.selectedUrl;
    }
    set smoLibrary(value) {
        this.selectedUrl = value;
        this.buildTree();
        this.selectedLib = this.tree[this.selectedUrl];
        if (this.selectedLib.format !== 'library') {
            this.selectedScore = this.selectedLib;
        }
        else {
            this.selectedScore = null;
        }
    }
}
// ## SuiLibraryDialog
// Traverse the library nodes or load a score
class SuiLibraryDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    static _createElements(topLib) {
        const elements = JSON.parse(JSON.stringify(SuiLibraryDialog.dialogElements));
        const tree = elements.elements[0];
        tree.root = topLib.url;
        tree.options = SuiLibraryAdapter.createOptions(topLib);
        return elements;
    }
    static _createAndDisplay(parameters, adapter) {
        const elements = SuiLibraryDialog._createElements(adapter.topLib);
        const dg = new SuiLibraryDialog(parameters, elements, adapter);
        dg.display();
    }
    /** Library requires a load first, so createAndDisplayDialog won't work on it */
    static createAndDisplay(parameters, config) {
        const adapter = new SuiLibraryAdapter(parameters.view, config);
        adapter.initialize().then(() => SuiLibraryDialog._createAndDisplay(parameters, adapter));
    }
    constructor(parameters, dialogElements, adapter) {
        super(dialogElements, Object.assign({ adapter }, parameters));
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.adapter.selectedScore !== null) {
                yield this.adapter._loadScore();
            }
            else {
                this.complete();
            }
        });
    }
    get smoLibraryCtrl() {
        return this.cmap.smoLibraryCtrl;
    }
    changed() {
        const _super = Object.create(null, {
            changed: { get: () => super.changed }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const okButton = $(this.dgDom.element).find('.ok-button');
            _super.changed.call(this);
            if (this.adapter.selectedLib.format === 'library') {
                $(okButton).prop('disabled', true);
                const options = [];
                yield this.adapter.loadOptions(options);
                this.smoLibraryCtrl.updateOptions(options);
                $(this.smoLibraryCtrl._getInputElement()).find('li[data-value="' + this.smoLibraryCtrl.getValue() + '"] button.expander').click();
            }
            else {
                $(okButton).prop('disabled', false);
            }
        });
    }
}
SuiLibraryDialog.dialogElements = {
    label: 'Music Library', elements: [{
            smoName: 'smoLibrary',
            control: 'SuiTreeComponent',
            root: '',
            label: 'Selection',
            options: []
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/lyric.ts":
/*!*********************************!*\
  !*** ./src/ui/dialogs/lyric.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiLyricDialog: () => (/* binding */ SuiLyricDialog)
/* harmony export */ });
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.

class SuiLyricDialog extends _dialog__WEBPACK_IMPORTED_MODULE_0__.SuiDialogBase {
    static get ctor() {
        return 'SuiLyricDialog';
    }
    static get idleLyricTime() {
        return 5000;
    }
    constructor(parameters) {
        super(SuiLyricDialog.dialogElements, parameters);
        this.modifier = null;
        this.verse = 0;
        this.mouseMoveHandler = null;
        this.mouseClickHandler = null;
        this.lyric = null;
        this.config = this.view.config;
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'SELECTIONPOS'];
        this.originalRefreshTimer = this.config.idleRedrawTime;
        this.config.idleRedrawTime = SuiLyricDialog.idleLyricTime;
        if (this.modifier) {
            this.verse = this.modifier.verse;
        }
    }
    get lyricEditorCtrl() {
        return this.cmap.lyricEditorCtrl;
    }
    get fontCtrl() {
        return this.cmap.fontCtrl;
    }
    get translateYCtrl() {
        return this.cmap.translateYCtrl;
    }
    get verseCtrl() {
        return this.cmap.verseCtrl;
    }
    display() {
        super.display();
        $(this.dgDom.element).find('.smoControl').each((ix, ctrl) => {
            if (!$(ctrl).hasClass('cbLyricEdit')) {
                $(ctrl).addClass('fold-textedit');
            }
        });
        this.mouseMoveHandler = this.eventSource.bindMouseMoveHandler(this, 'mouseMove');
        this.mouseClickHandler = this.eventSource.bindMouseClickHandler(this, 'mouseClick');
        if (this.lyricEditorCtrl.session && this.lyricEditorCtrl.session.lyric) {
            const lyric = this.lyricEditorCtrl.session.lyric;
            this.fontCtrl.setValue({
                family: lyric.fontInfo.family,
                size: lyric.fontInfo.size,
                weight: 'normal'
            });
        }
    }
    setLyric(lyric) {
        this.lyric = lyric;
        this.translateYCtrl.setValue(lyric.translateY);
    }
    _focusSelection() {
        var _a, _b;
        const selection = (_a = this.lyricEditorCtrl.session) === null || _a === void 0 ? void 0 : _a.selection;
        const note = selection === null || selection === void 0 ? void 0 : selection.note;
        const box = (_b = note === null || note === void 0 ? void 0 : note.logicalBox) !== null && _b !== void 0 ? _b : null;
        if (box) {
            this.view.scroller.scrollVisibleBox(this.view.renderer.pageMap.svgToClient(box));
        }
    }
    changed() {
        this.lyricEditorCtrl.verse = parseInt(this.verseCtrl.getValue().toString(), 10);
        // TODO: make these undoable
        if (this.fontCtrl.changeFlag) {
            const fontInfo = this.fontCtrl.getValue();
            this.view.setLyricFont({ 'family': fontInfo.family, size: fontInfo.size, weight: 'normal' });
        }
        if (this.translateYCtrl && this.lyric) {
            this.lyric.translateY = this.translateYCtrl.getValue();
        }
    }
    bindElements() {
        const dgDom = this.dgDom;
        $(dgDom.element).find('.ok-button').off('click').on('click', () => {
            this._complete();
        });
        $(dgDom.element).find('.cancel-button').off('click').on('click', () => {
            this._complete();
        });
        $(dgDom.element).find('.remove-button').remove();
        this.lyricEditorCtrl.startEditSession();
    }
    // ### handleKeydown
    // allow a dialog to be dismissed by esc.
    evKey(evdata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (evdata.key === 'Escape') {
                $(this.dgDom.element).find('.cancel-button').click();
                evdata.preventDefault();
            }
            else {
                if (!this.lyricEditorCtrl.running) {
                    return;
                }
                const edited = yield this.lyricEditorCtrl.evKey(evdata);
                if (edited) {
                    evdata.stopPropagation();
                }
            }
        });
    }
    _complete() {
        if (this.lyricEditorCtrl.running) {
            this.lyricEditorCtrl.endSession();
        }
        if (this.mouseMoveHandler) {
            this.eventSource.unbindMouseMoveHandler(this.mouseMoveHandler);
        }
        if (this.mouseClickHandler) {
            this.eventSource.unbindMouseClickHandler(this.mouseClickHandler);
        }
        $('body').removeClass('showAttributeDialog');
        $('body').removeClass('textEditor');
        this.config.idleRedrawTime = this.originalRefreshTimer;
        this.complete();
    }
    mouseMove(ev) {
        if (this.lyricEditorCtrl && this.lyricEditorCtrl.running) {
            this.lyricEditorCtrl.mouseMove(ev);
        }
    }
    mouseClick(ev) {
        if (this.lyricEditorCtrl && this.lyricEditorCtrl.running) {
            this.lyricEditorCtrl.mouseClick(ev);
            ev.stopPropagation();
        }
    }
}
SuiLyricDialog.dialogElements = {
    label: 'Lyric Editor', elements: [{
            smoName: 'verse',
            defaultValue: 0,
            control: 'SuiDropdownComponent',
            label: 'Verse',
            classes: 'hide-when-editing',
            startRow: true,
            options: [{
                    value: 0,
                    label: '1'
                }, {
                    value: 1,
                    label: '2'
                }, {
                    value: 2,
                    label: '3'
                }, {
                    value: 3,
                    label: '4'
                }
            ]
        }, {
            smoName: 'translateY',
            classes: 'hide-when-editing',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Y Adjustment (Px)',
            dataType: 'int'
        }, {
            smoName: 'font',
            classes: 'hide-when-editing',
            defaultValue: 0,
            control: 'SuiFontComponent',
            label: 'Font'
        }, {
            smoName: 'lyricEditor',
            defaultValue: 0,
            classes: 'show-always',
            control: 'SuiLyricComponent',
            label: 'Edit Lyrics',
            options: []
        },
    ], staticText: [
        { doneEditing: 'Done Editing Lyrics' },
        { undo: 'Undo Lyrics' },
        { label: 'Lyric Editor' }
    ]
};


/***/ }),

/***/ "./src/ui/dialogs/measureFormat.ts":
/*!*****************************************!*\
  !*** ./src/ui/dialogs/measureFormat.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiMeasureDialog: () => (/* binding */ SuiMeasureDialog),
/* harmony export */   SuiMeasureFormatAdapter: () => (/* binding */ SuiMeasureFormatAdapter)
/* harmony export */ });
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiMeasureFormatAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, measure) {
        super(view);
        this.edited = false;
        this.format = measure.format;
        this.renumberIndex = this.originalIndex = measure.measureNumber.localIndex;
        this.backup = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoMeasureFormat(this.format);
        this.measure = measure;
    }
    writeNumber(param, value) {
        this.format.measureIndex = this.measure.measureNumber.measureIndex;
        this.format[param] = value;
        this.view.setMeasureFormat(this.format);
        this.edited = true;
    }
    writeBoolean(param, value) {
        this.format.measureIndex = this.measure.measureNumber.measureIndex;
        this.format[param] = value;
        this.view.setMeasureFormat(this.format);
        this.edited = true;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.edited) {
                yield this.view.setMeasureFormat(this.backup);
            }
            if (this.localIndex !== this.originalIndex) {
                yield this.view.renumberMeasures(this.measure.measureNumber.measureIndex, this.originalIndex);
            }
        });
    }
    get padLeft() {
        return this.format.padLeft;
    }
    set padLeft(value) {
        if (value > 0) {
            $('.attributeDialog .attributeModal').addClass('pad-left-select');
        }
        else {
            $('.attributeDialog .attributeModal').removeClass('pad-left-select');
        }
        this.writeNumber('padLeft', value);
    }
    get skipMeasureCount() {
        return this.format.skipMeasureCount;
    }
    set skipMeasureCount(value) {
        this.writeBoolean('skipMeasureCount', value);
    }
    get localIndex() {
        return this.renumberIndex;
    }
    set localIndex(value) {
        if (this.renumberIndex !== value && value >= 0) {
            this.renumberIndex = value;
            this.view.renumberMeasures(this.measure.measureNumber.measureIndex, this.localIndex);
        }
    }
    get forceRest() {
        return this.format.forceRest;
    }
    set forceRest(value) {
        this.writeBoolean('forceRest', value);
    }
    get repeatSymbol() {
        return this.measure.repeatSymbol;
    }
    set repeatSymbol(value) {
        const repeatCount = value ? 1 : 0;
        this.view.updateRepeatCount(repeatCount);
        this.measure.repeatSymbol = value;
        this.measure.repeatCount = repeatCount;
    }
    get restBreak() {
        return this.format.restBreak;
    }
    set restBreak(value) {
        this.writeBoolean('restBreak', value);
    }
    get customStretch() {
        return this.format.customStretch;
    }
    set customStretch(value) {
        this.writeNumber('customStretch', value);
    }
    get customProportion() {
        return this.format.proportionality;
    }
    set customProportion(value) {
        this.writeNumber('proportionality', value);
    }
    get autoJustify() {
        return this.format.autoJustify;
    }
    set autoJustify(value) {
        this.writeBoolean('autoJustify', value);
    }
    get padAllInSystem() {
        return this.format.padAllInSystem;
    }
    set padAllInSystem(value) {
        this.writeBoolean('padAllInSystem', value);
    }
    get systemBreak() {
        return this.format.systemBreak;
    }
    set systemBreak(value) {
        this.writeBoolean('systemBreak', value);
    }
}
// ## measureDialogs.js
// This file contains dialogs that affect all measures at a certain position,
// such as tempo or time signature.
class SuiMeasureDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(parameters) {
        const selection = parameters.view.tracker.selections[0];
        const measure = selection.measure;
        const adapter = new SuiMeasureFormatAdapter(parameters.view, measure);
        super(SuiMeasureDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
}
SuiMeasureDialog.dialogElements = {
    label: 'Measure Properties',
    elements: [{
            smoName: 'padLeft',
            control: 'SuiRockerComponent',
            label: 'Pad Left (px)'
        }, {
            smoName: 'customStretch',
            control: 'SuiRockerComponent',
            label: 'Stretch Contents'
        }, {
            smoName: 'customProportion',
            control: 'SuiRockerComponent',
            increment: 10,
            label: 'Proportionalality'
        }, {
            smoName: 'localIndex',
            control: 'SuiRockerComponent',
            increment: 1,
            label: 'Measure Number'
        }, {
            smoName: 'padAllInSystem',
            control: 'SuiToggleComponent',
            label: 'Pad all measures in system'
        }, {
            smoName: 'autoJustify',
            control: 'SuiToggleComponent',
            label: 'Justify Columns'
        }, {
            smoName: 'restBreak',
            control: 'SuiToggleComponent',
            label: 'Break Multimeasure Rest in Part'
        }, {
            smoName: 'forceRest',
            control: 'SuiToggleComponent',
            label: 'Force Multimeasure Rest'
        }, {
            smoName: 'repeatSymbol',
            control: 'SuiToggleComponent',
            label: 'Repeat Symbol'
        }, {
            smoName: 'skipMeasureCount',
            control: 'SuiToggleComponent',
            label: 'Skip in max measure count'
        }, {
            smoName: 'systemBreak',
            control: 'SuiToggleComponent',
            label: 'System break before this measure'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/newPart.ts":
/*!***********************************!*\
  !*** ./src/ui/dialogs/newPart.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiNewPartAdapter: () => (/* binding */ SuiNewPartAdapter),
/* harmony export */   SuiNewPartDialog: () => (/* binding */ SuiNewPartDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SuiNewPartAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.alignWithPreviousVal = true;
        const selection = this.view.tracker.selections[0];
        this.instrument = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoInstrument(this.view.score.getStaffInstrument(selection.selector));
    }
    writeNumParam(paramName, value) {
        this.instrument[paramName] = value;
    }
    writeStringParam(paramName, value) {
        this.instrument[paramName] = value;
    }
    set alignWithPrevious(val) {
        this.alignWithPreviousVal = val;
    }
    get alignWithPrevious() {
        return this.alignWithPreviousVal;
    }
    get transposeIndex() {
        return this.instrument.keyOffset;
    }
    set transposeIndex(value) {
        this.writeNumParam('keyOffset', value);
    }
    get instrumentName() {
        return this.instrument.instrumentName;
    }
    get subFamily() {
        return this.instrument.instrument;
    }
    set subFamily(value) {
        this.writeStringParam('instrument', value);
    }
    set instrumentName(value) {
        this.writeStringParam('instrumentName', value);
    }
    get clef() {
        return this.instrument.clef;
    }
    set clef(value) {
        this.instrument.clef = value;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            const staffParams = _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_2__.SmoSystemStaff.defaults;
            staffParams.staffId = this.view.storeScore.staves.length;
            staffParams.measureInstrumentMap[0] = this.instrument;
            staffParams.alignWithPrevious = this.alignWithPreviousVal;
            yield this.view.addStaff(staffParams);
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiNewPartDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    static get applyTo() {
        return {
            score: 0, selected: 1, remaining: 3
        };
    }
    constructor(parameters) {
        const adapter = new SuiNewPartAdapter(parameters.view);
        super(SuiNewPartDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
}
// export type Clef = 'treble' | 'bass' | 'tenor' | 'alto' | 'soprano' | 'percussion'
//| 'mezzo-soprano' | 'baritone-c' | 'baritone-f' | 'subbass' | 'french';
SuiNewPartDialog.dialogElements = {
    label: 'Instrument Properties',
    elements: [{
            smoName: 'transposeIndex',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Transpose Index (1/2 steps)',
        }, {
            smoName: 'instrumentName',
            control: 'SuiTextInputComponent',
            label: 'Part Name'
        }, {
            smoName: 'alignWithPrevious',
            control: 'SuiToggleComponent',
            label: 'Align Notes with Previous Staff'
        }, {
            smoName: 'subFamily',
            control: 'SuiDropdownComponent',
            label: 'Sample Sound',
            options: [{
                    value: 'piano',
                    label: 'Grand Piano'
                }, {
                    value: 'bass',
                    label: 'Bass'
                }, {
                    value: 'cello',
                    label: 'Cello'
                }, {
                    value: 'violin',
                    label: 'Violin'
                }, {
                    value: 'trumpet',
                    label: 'Bb Trumpet'
                }, {
                    value: 'horn',
                    label: 'F Horn'
                }, {
                    value: 'tuba',
                    label: 'Tuba'
                }, {
                    value: 'clarinet',
                    label: 'Bb Clarinet'
                }, {
                    value: 'pad',
                    label: 'Synth Pad'
                }, {
                    value: 'percussion',
                    label: 'Percussion'
                }, {
                    value: 'none',
                    label: 'None'
                }]
        }, {
            smoName: 'clef',
            control: 'SuiDropdownComponent',
            label: 'Clef',
            options: [{
                    label: 'Treble Clef Staff',
                    value: 'treble'
                }, {
                    label: 'Bass Clef Staff',
                    value: 'bass'
                }, {
                    label: 'Alto Clef Staff',
                    value: 'alto'
                }, {
                    label: 'Tenor',
                    value: 'tenor'
                }, {
                    label: 'Percussion',
                    value: 'percussion'
                }]
        }
    ],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/pageLayout.ts":
/*!**************************************!*\
  !*** ./src/ui/dialogs/pageLayout.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiPageLayoutAdapter: () => (/* binding */ SuiPageLayoutAdapter),
/* harmony export */   SuiPageLayoutDialog: () => (/* binding */ SuiPageLayoutDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



class SuiPageLayoutAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    static get layoutTypes() {
        return {
            'all': -1,
            'remaining': -2,
            'page': -3
        };
    }
    updateLayouts() {
        return __awaiter(this, void 0, void 0, function* () {
            let i = 0;
            let startPage = this.currentPage;
            let endPage = this.layouts.length;
            if (this.applyTo === SuiPageLayoutAdapter.layoutTypes.page) {
                endPage = startPage;
            }
            else if (this.applyTo === SuiPageLayoutAdapter.layoutTypes.all) {
                startPage = 0;
            }
            yield this.view.setPageLayouts(this.currentLayout, startPage, endPage);
            this.changed = true;
        });
    }
    get enablePages() {
        return this.layouts.length > 1;
    }
    get applyToPage() {
        return this.applyTo;
    }
    set applyToPage(value) {
        this.applyTo = value;
        this.updateLayouts();
    }
    set leftMargin(value) {
        this.currentLayout.leftMargin = value;
        this.updateLayouts();
    }
    get leftMargin() {
        return this.currentLayout.leftMargin;
    }
    get rightMargin() {
        return this.currentLayout.rightMargin;
    }
    set rightMargin(value) {
        this.currentLayout.rightMargin = value;
        this.updateLayouts();
    }
    get topMargin() {
        return this.currentLayout.topMargin;
    }
    set topMargin(value) {
        this.currentLayout.topMargin = value;
        this.updateLayouts();
    }
    get bottomMargin() {
        return this.currentLayout.bottomMargin;
    }
    set bottomMargin(value) {
        this.currentLayout.bottomMargin = value;
        this.updateLayouts();
    }
    get interGap() {
        return this.currentLayout.interGap;
    }
    set interGap(value) {
        this.currentLayout.interGap = value;
        this.updateLayouts();
    }
    get intraGap() {
        return this.currentLayout.intraGap;
    }
    set intraGap(value) {
        this.currentLayout.intraGap = value;
        this.updateLayouts();
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            let i = 0;
            if (!this.changed) {
                return;
            }
            for (i = 0; i < this.backup.length; ++i) {
                // Avoid multiple page rerender...
                this.view._setPageLayout(this.backup[i], i);
            }
            yield this.view.refreshViewport();
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    constructor(view) {
        super(view);
        this.backup = [];
        this.changed = false;
        this.applyTo = SuiPageLayoutAdapter.layoutTypes.all;
        this.options = [];
        let i = 0;
        this.view = view;
        this.layoutManager = this.view.score.layoutManager;
        this.currentPage = this.view.getFocusedPage();
        for (i = 0; i < this.layoutManager.pageLayouts.length; ++i) {
            this.backup.push(new _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout(this.layoutManager.pageLayouts[i]));
        }
        for (i = 1; i < this.layoutManager.pageLayouts.length; ++i) {
            this.options.push({ value: i + 1, label: 'Page ' + (i + 1) });
        }
        this.layouts = this.layoutManager.getPageLayouts();
        this.currentLayout = this.layoutManager.pageLayouts[this.currentPage];
        if (this.layoutManager.pageLayouts.length === 1) {
            this.applyTo = SuiPageLayoutAdapter.layoutTypes.all;
        }
        else {
            if (this.currentPage >= 1) {
                this.applyTo = SuiPageLayoutAdapter.layoutTypes.remaining;
            }
            else {
                this.applyTo = SuiPageLayoutAdapter.layoutTypes.all;
            }
        }
    }
}
// ## SuiLayoutDialog
// The layout dialog has page-specific layout parameters
class SuiPageLayoutDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    static get layoutParams() {
        return ['leftMargin', 'rightMargin', 'topMargin', 'bottomMargin', 'interGap', 'intraGap'];
    }
    constructor(params) {
        const adapter = new SuiPageLayoutAdapter(params.view);
        super(SuiPageLayoutDialog.dialogElements, Object.assign({ adapter }, params));
    }
}
// ### dialogElements
// all dialogs have elements define the controls of the dialog.
SuiPageLayoutDialog.dialogElements = {
    label: 'Page Layouts', elements: [{
            smoName: 'applyToPage',
            defaultValue: -1,
            control: 'SuiDropdownComponent',
            label: 'Apply to Page',
            dataType: 'int',
            options: [{
                    value: -1,
                    label: 'All'
                }, {
                    value: -2,
                    label: 'All Remaining'
                }, {
                    value: 1,
                    label: 'Page 1'
                }]
        }, {
            smoName: 'leftMargin',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout.defaults.leftMargin,
            control: 'SuiRockerComponent',
            label: 'Left Margin (px)'
        }, {
            smoName: 'rightMargin',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout.defaults.rightMargin,
            control: 'SuiRockerComponent',
            label: 'Right Margin (px)'
        }, {
            smoName: 'topMargin',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout.defaults.topMargin,
            control: 'SuiRockerComponent',
            label: 'Top Margin (px)'
        }, {
            smoName: 'bottomMargin',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout.defaults.bottomMargin,
            control: 'SuiRockerComponent',
            label: 'Bottom Margin (px)'
        }, {
            smoName: 'interGap',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout.defaults.interGap,
            control: 'SuiRockerComponent',
            label: 'Inter-System Margin'
        }, {
            smoName: 'intraGap',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoPageLayout.defaults.intraGap,
            control: 'SuiRockerComponent',
            label: 'Intra-System Margin'
        }],
    staticText: [
        { all: 'Entire Score' },
        { remaining: 'Remaining Pages' },
        { current: 'Current Page' }
    ]
};


/***/ }),

/***/ "./src/ui/dialogs/partInfo.ts":
/*!************************************!*\
  !*** ./src/ui/dialogs/partInfo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiPartInfoAdapter: () => (/* binding */ SuiPartInfoAdapter),
/* harmony export */   SuiPartInfoDialog: () => (/* binding */ SuiPartInfoDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _smo_data_partInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/partInfo */ "./src/smo/data/partInfo.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.






class SuiPartInfoAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_5__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.changed = false;
        this.currentView = [];
        this.resetPart = false;
        this.currentView = this.view.getView();
        const selector = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_4__.SmoSelector.default;
        this.selection = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_4__.SmoSelection.measureSelection(this.view.score, selector.staff, selector.measure);
        this.partInfo = new _smo_data_partInfo__WEBPACK_IMPORTED_MODULE_3__.SmoPartInfo(this.selection.staff.partInfo);
        this.backup = new _smo_data_partInfo__WEBPACK_IMPORTED_MODULE_3__.SmoPartInfo(this.selection.staff.partInfo);
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            this.changed = true;
            // Since update will change the displayed score, wait for any display change to complete first.
            yield this.view.renderer.updatePromise();
            yield this.view.updatePartInfo(this.partInfo);
        });
    }
    writeLayoutValue(attr, value) {
        // no change?
        if (this.partInfo.layoutManager.globalLayout[attr] === value) {
            return;
        }
        this.partInfo.layoutManager.globalLayout[attr] = value;
        this.update();
    }
    writeStringValue(attr, value) {
        if (this.partInfo[attr] === value) {
            return;
        }
        this.partInfo[attr] = value;
        this.changed = true;
    }
    get expandMultimeasureRest() {
        return this.partInfo.expandMultimeasureRests;
    }
    set expandMultimeasureRest(value) {
        this.partInfo.expandMultimeasureRests = value;
        this.resetPart = true;
        this.update();
    }
    get noteSpacing() {
        return this.partInfo.layoutManager.globalLayout.noteSpacing;
    }
    set noteSpacing(value) {
        this.writeLayoutValue('noteSpacing', value);
    }
    get pageWidth() {
        return this.partInfo.layoutManager.globalLayout.pageWidth;
    }
    set pageWidth(value) {
        this.writeLayoutValue('pageWidth', value);
    }
    get pageHeight() {
        return this.partInfo.layoutManager.globalLayout.pageHeight;
    }
    set pageHeight(value) {
        this.writeLayoutValue('pageHeight', value);
    }
    get svgScale() {
        return this.partInfo.layoutManager.globalLayout.svgScale;
    }
    set svgScale(value) {
        this.writeLayoutValue('svgScale', value);
    }
    get maxMeasureSystem() {
        return this.partInfo.layoutManager.globalLayout.maxMeasureSystem;
    }
    set maxMeasureSystem(value) {
        this.writeLayoutValue('maxMeasureSystem', value);
    }
    get zoomScale() {
        return this.partInfo.layoutManager.globalLayout.zoomScale;
    }
    set zoomScale(value) {
        this.writeLayoutValue('zoomScale', value);
    }
    get pageSize() {
        const sz = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageSizeFromDimensions(this.partInfo.layoutManager.globalLayout.pageWidth, this.partInfo.layoutManager.globalLayout.pageHeight);
        if (sz === null) {
            return 'custom';
        }
        return sz;
    }
    set pageSize(value) {
        if (value === 'custom') {
            return;
        }
        if (_smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageDimensions[value]) {
            const dims = _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageDimensions[value];
            this.partInfo.layoutManager.globalLayout.pageWidth = dims.width;
            this.partInfo.layoutManager.globalLayout.pageHeight = dims.height;
        }
        this.update();
    }
    get partName() {
        return this.partInfo.partName;
    }
    set partName(value) {
        this.writeStringValue('partName', value);
    }
    get partAbbreviation() {
        return this.partInfo.partAbbreviation;
    }
    set partAbbreviation(value) {
        this.writeStringValue('partAbbreviation', value);
    }
    get includeNext() {
        return this.partInfo.stavesAfter === 1 && this.partInfo.stavesBefore === 0;
    }
    set includeNext(value) {
        const oldValue = this.partInfo.stavesAfter;
        if (value) {
            this.partInfo.stavesAfter = 1;
        }
        else {
            this.partInfo.stavesAfter = 0;
        }
        if (oldValue !== this.partInfo.stavesAfter) {
            // special case for a 2-stave score.  The score and the part are the same so we stick to 
            // score view.
            if (this.partInfo.stavesAfter === 1 && this.view.storeScore.staves.length === 2) {
                this.update().then(() => {
                    this.view.viewAll();
                });
                return;
            }
        }
        this.update();
    }
    get cueInScore() {
        return this.partInfo.cueInScore;
    }
    set cueInScore(value) {
        this.partInfo.cueInScore = value;
        this.update();
    }
    get preserveTextGroups() {
        return this.partInfo.preserveTextGroups;
    }
    set preserveTextGroups(value) {
        if (value === true && this.partInfo.textGroups.length === 0) {
            this.view.score.textGroups.forEach((tg) => {
                const ngrp = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_2__.SmoTextGroup.deserializePreserveId(tg.serialize());
                this.partInfo.textGroups.push(ngrp);
            });
        }
        this.partInfo.preserveTextGroups = value;
        this.update();
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.update();
            }
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                this.partInfo = this.backup;
                yield this.update();
            }
        });
    }
}
// ## SuiGlobalLayoutDialog
// change editor and formatting defaults for this score.
class SuiPartInfoDialog extends _adapter__WEBPACK_IMPORTED_MODULE_5__.SuiDialogAdapterBase {
    get dimensionControls() {
        return [this.cmap.pageSizeCtrl, this.cmap.pageWidthCtrl, this.cmap.pageHeightCtrl];
    }
    constructor(params) {
        const adapter = new SuiPartInfoAdapter(params.view);
        super(SuiPartInfoDialog.dialogElements, Object.assign({ adapter }, params));
    }
    changed() {
        super.changed();
        if (this.dimensionControls.find((x) => x.changeFlag)) {
            this.initialValue();
        }
        if (this.cmap.includeNextCtrl.changeFlag) {
            const includeNext = this.cmap.includeNextCtrl;
            if (includeNext.getValue()) {
                const partMap = this.view.getPartMap();
                if (this.view.storeScore.staves.length === 2) {
                    this.complete();
                }
            }
        }
    }
}
SuiPartInfoDialog.dialogElements = {
    label: 'Part Settings', elements: [{
            smoName: 'partName',
            control: 'SuiTextInputComponent',
            label: 'Part Name'
        }, {
            smoName: 'partAbbreviation',
            control: 'SuiTextInputComponent',
            label: 'Part Abbrev.'
        }, {
            smoName: 'preserveTextGroups',
            control: 'SuiToggleComponent',
            label: 'Part-specific text'
        }, {
            smoName: 'cueInScore',
            control: 'SuiToggleComponent',
            label: 'Show as Cues in score'
        }, {
            smoName: 'includeNext',
            control: 'SuiToggleComponent',
            label: 'Include Next Staff in Part'
        }, {
            smoName: 'expandMultimeasureRest',
            control: 'SuiToggleComponent',
            label: 'Expand Multimeasure Rests'
        }, {
            smoName: 'noteSpacing',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.noteSpacing,
            control: 'SuiRockerComponent',
            dataType: 'percent',
            label: 'Note Spacing'
        }, {
            smoName: 'pageSize',
            defaultValue: _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScore.pageSizes[0],
            control: 'SuiDropdownComponent',
            label: 'Page Size',
            options: [
                {
                    value: 'letter',
                    label: 'Letter (Portrait)'
                }, {
                    value: 'letterLandscape',
                    label: 'Letter (Landscape)'
                }, {
                    value: 'tabloid',
                    label: 'Tabloid (11x17)'
                }, {
                    value: 'A4',
                    label: 'A4'
                }, {
                    value: 'custom',
                    label: 'Custom'
                }
            ]
        }, {
            smoName: 'pageWidth',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.pageWidth,
            control: 'SuiRockerComponent',
            label: 'Page Width (px)'
        }, {
            smoName: 'pageHeight',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.pageHeight,
            control: 'SuiRockerComponent',
            label: 'Page Height (px)'
        }, {
            smoName: 'zoomScale',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.zoomScale,
            control: 'SuiRockerComponent',
            label: '% Zoom',
            dataType: 'percent'
        }, {
            smoName: 'svgScale',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.svgScale,
            control: 'SuiRockerComponent',
            label: '% Note size',
            dataType: 'percent'
        }, {
            smoName: 'maxMeasureSystem',
            defaultValue: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_1__.SmoLayoutManager.defaults.globalLayout.maxMeasureSystem,
            control: 'SuiRockerComponent',
            label: 'Max Measures/System (0=auto)',
            dataType: 'int'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/preferences.ts":
/*!***************************************!*\
  !*** ./src/ui/dialogs/preferences.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScorePreferencesAdapter: () => (/* binding */ SuiScorePreferencesAdapter),
/* harmony export */   SuiScorePreferencesDialog: () => (/* binding */ SuiScorePreferencesDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



const deepCopy = (x) => JSON.parse(JSON.stringify(x));
class SuiScorePreferencesAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.preferences = new _smo_data_score__WEBPACK_IMPORTED_MODULE_0__.SmoScorePreferences(view.score.preferences);
        this.backup = JSON.parse(JSON.stringify(this.preferences));
    }
    get autoAdvance() {
        return this.preferences.autoAdvance;
    }
    set autoAdvance(value) {
        this.preferences.autoAdvance = value;
        this.view.updateScorePreferences(this.preferences);
    }
    get autoPlay() {
        return this.preferences.autoPlay;
    }
    set autoPlay(value) {
        this.preferences.autoPlay = value;
        this.view.updateScorePreferences(this.preferences);
    }
    get showPiano() {
        return this.preferences.showPiano;
    }
    set showPiano(value) {
        this.preferences.showPiano = value;
        this.view.updateScorePreferences(this.preferences);
    }
    get hideEmptyLines() {
        return this.preferences.hideEmptyLines;
    }
    set hideEmptyLines(value) {
        this.preferences.hideEmptyLines = value;
        this.view.updateScorePreferences(this.preferences);
    }
    get defaultDupleDuration() {
        return this.preferences.defaultDupleDuration;
    }
    set defaultDupleDuration(value) {
        this.preferences.defaultDupleDuration = value;
        this.view.updateScorePreferences(this.preferences);
    }
    get defaultTripleDuration() {
        return this.preferences.defaultTripleDuration;
    }
    set defaultTripleDuration(value) {
        this.preferences.defaultTripleDuration = value;
        this.view.updateScorePreferences(this.preferences);
    }
    get transposingScore() {
        return this.preferences.transposingScore;
    }
    set transposingScore(value) {
        this.preferences.transposingScore = value;
        this.view.updateScorePreferences(this.preferences);
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            const p1 = JSON.stringify(this.preferences);
            const p2 = JSON.stringify(this.backup);
            if (p1 !== p2) {
                yield this.view.updateScorePreferences(this.backup);
            }
        });
    }
    commit() {
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
    }
}
class SuiScorePreferencesDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(params) {
        const adapter = new SuiScorePreferencesAdapter(params.view);
        super(SuiScorePreferencesDialog.dialogElements, Object.assign({ adapter }, params));
    }
}
SuiScorePreferencesDialog.dialogElements = {
    label: 'Score Preferences',
    elements: [{
            smoName: 'autoAdvance',
            control: 'SuiToggleComponent',
            label: 'Auto-advance after pitch'
        }, {
            smoName: 'autoPlay',
            control: 'SuiToggleComponent',
            label: 'Auto-play sounds for note entry'
        }, {
            smoName: 'showPiano',
            control: 'SuiToggleComponent',
            label: 'Show Piano widget'
        }, {
            smoName: 'transposingScore',
            control: 'SuiToggleComponent',
            label: 'Tranpose Score'
        }, {
            smoName: 'hideEmptyLines',
            control: 'SuiToggleComponent',
            label: 'Hide Empty Lines'
        }, {
            smoName: 'defaultDupleDuration',
            control: 'SuiDropdownComponent',
            label: 'Default Duration (even meter)',
            dataType: 'int',
            options: [{
                    value: 4096,
                    label: '1/4'
                }, {
                    value: 2048,
                    label: '1/8'
                }]
        }, {
            smoName: 'defaultTripleDuration',
            control: 'SuiDropdownComponent',
            label: 'Default Duration (triple meter)',
            dataType: 'int',
            options: [{
                    value: 6144,
                    label: 'dotted 1/4'
                }, {
                    value: 2048,
                    label: '1/8'
                }]
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/scoreId.ts":
/*!***********************************!*\
  !*** ./src/ui/dialogs/scoreId.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreIdentificationAdapter: () => (/* binding */ SuiScoreIdentificationAdapter),
/* harmony export */   SuiScoreIdentificationDialog: () => (/* binding */ SuiScoreIdentificationDialog)
/* harmony export */ });
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class SuiScoreIdentificationAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_0__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.scoreInfo = this.view.score.scoreInfo;
        this.backup = JSON.parse(JSON.stringify(this.scoreInfo));
    }
    get title() {
        return this.scoreInfo.title;
    }
    set title(value) {
        this.scoreInfo.title = value;
    }
    get subTitle() {
        return this.scoreInfo.subTitle;
    }
    set subTitle(value) {
        this.scoreInfo.subTitle = value;
    }
    get composer() {
        return this.scoreInfo.composer;
    }
    set composer(value) {
        this.scoreInfo.composer = value;
    }
    get copyright() {
        return this.scoreInfo.copyright;
    }
    set copyright(value) {
        this.scoreInfo.copyright = value;
    }
    get name() {
        return this.scoreInfo.name;
    }
    set name(value) {
        this.scoreInfo.name = value;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.updateScoreInfo(this.scoreInfo);
        });
    }
    cancel() {
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
    }
}
// ## SuiScoreIdentificationDialog
// change editor and formatting defaults for this score.
class SuiScoreIdentificationDialog extends _adapter__WEBPACK_IMPORTED_MODULE_0__.SuiDialogAdapterBase {
    static createAndDisplay(parameters) {
        const dg = new SuiScoreIdentificationDialog(parameters);
        dg.display();
    }
    constructor(params) {
        const adapter = new SuiScoreIdentificationAdapter(params.view);
        super(SuiScoreIdentificationDialog.dialogElements, Object.assign({ adapter }, params));
    }
}
SuiScoreIdentificationDialog.dialogElements = {
    label: 'Score Preferences', elements: [{
            smoName: 'name',
            defaultValue: '',
            control: 'SuiTextInputComponent',
            label: 'Score Name',
        }, {
            smoName: 'title',
            defaultValue: '',
            control: 'SuiTextInputComponent',
            label: 'Title',
        }, {
            smoName: 'subTitle',
            control: 'SuiTextInputComponent',
            label: 'Sub Title',
        }, {
            smoName: 'composer',
            control: 'SuiTextInputComponent',
            label: 'Composer',
        }, {
            smoName: 'copyright',
            control: 'SuiTextInputComponent',
            label: 'Copyright'
        }],
    staticText: [
        { titleText: 'Title' },
        { subTitleText: 'Sub-title' },
        { copyrightText: 'Copyright' },
        { composerText: 'Composer' },
        { show: 'Show' }
    ]
};


/***/ }),

/***/ "./src/ui/dialogs/scoreView.ts":
/*!*************************************!*\
  !*** ./src/ui/dialogs/scoreView.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreViewAdapter: () => (/* binding */ SuiScoreViewAdapter),
/* harmony export */   SuiScoreViewDialog: () => (/* binding */ SuiScoreViewDialog)
/* harmony export */ });
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const deepCopy = (x) => JSON.parse(JSON.stringify(x));
class SuiScoreViewAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_0__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.currentView = this.view.getView();
        this.originalView = JSON.parse(JSON.stringify(this.currentView));
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            const s1 = JSON.stringify(this.originalView);
            const s2 = JSON.stringify(this.currentView);
            if (s1 !== s2) {
                this.view.setView(this.originalView);
            }
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            const s1 = JSON.stringify(this.originalView);
            const s2 = JSON.stringify(this.currentView);
            if (s1 !== s2) {
                this.view.setView(this.currentView);
            }
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
        });
    }
    get scoreView() {
        return this.currentView;
    }
    set scoreView(value) {
        this.currentView = value;
    }
}
// ## SuiScoreViewDialog
// decide which rows of the score to look at
class SuiScoreViewDialog extends _adapter__WEBPACK_IMPORTED_MODULE_0__.SuiDialogAdapterBase {
    constructor(parameters) {
        const adapter = new SuiScoreViewAdapter(parameters.view);
        super(SuiScoreViewDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.originalValue = JSON.parse(JSON.stringify(this.view.getView()));
    }
    get scoreViewCtrl() {
        return this.cmap.scoreViewCtrl;
    }
}
SuiScoreViewDialog.dialogElements = {
    label: 'Score View', elements: [{
            smoName: 'scoreView',
            control: 'StaffCheckComponent',
            label: 'Show staff',
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/slur.ts":
/*!********************************!*\
  !*** ./src/ui/dialogs/slur.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiSlurAdapter: () => (/* binding */ SuiSlurAdapter),
/* harmony export */   SuiSlurAttributesDialog: () => (/* binding */ SuiSlurAttributesDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _smo_xform_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../smo/xform/operations */ "./src/smo/xform/operations.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SuiSlurAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, slur) {
        super(view);
        this.changed = false;
        this.updating = false;
        this.slur = slur;
        this.view = view;
        this.backup = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur(this.slur);
        // Set the same id so the erase works
        this.backup.attrs.id = slur.attrs.id;
        this.backup.associatedStaff = this.slur.associatedStaff;
    }
    writeSlurNumber(view, slur, key, value) {
        const current = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur(slur);
        slur[key] = value;
        view.addOrUpdateStaffModifier(current, slur);
        this.changed = true;
    }
    writeSlurBool(view, slur, key, value) {
        const current = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur(slur);
        slur[key] = value;
        view.addOrUpdateStaffModifier(current, slur);
        this.changed = true;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.changed) {
                return;
            }
            yield this.view.addOrUpdateStaffModifier(this.slur, this.backup);
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
    get resetAll() {
        return false;
    }
    set resetAll(value) {
        this.resetDefaults = value;
        const slurs = [];
        const self = this;
        this.updating = true;
        const updateSlur = (score, slur) => __awaiter(this, void 0, void 0, function* () {
            const params = _smo_xform_operations__WEBPACK_IMPORTED_MODULE_2__.SmoOperation.getDefaultSlurDirection(score, slur.startSelector, slur.endSelector, _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.AUTO, _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.orientations.AUTO);
            const original = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur(slur);
            _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SlurNumberParams.forEach((key) => {
                slur[key] = params[key];
            });
            yield self.view.addOrUpdateStaffModifier(original, slur);
        });
        new Promise((resolve) => {
            const nextSlur = () => {
                setTimeout(() => {
                    if (slurs.length) {
                        const slur = slurs.pop();
                        updateSlur(self.view.score, slur).then(() => {
                            nextSlur();
                        });
                    }
                    else {
                        self.updating = false;
                        resolve();
                    }
                }, 1);
            };
            nextSlur();
        });
        this.view.score.staves.forEach((staff) => {
            staff.modifiers.filter((x) => x.ctor === 'SmoSlur').forEach((smoObj) => {
                const slur = smoObj;
                slurs.push(slur);
            });
        });
        this.changed = true;
    }
    get resetDefaults() {
        return false;
    }
    set resetDefaults(value) {
        const params = _smo_xform_operations__WEBPACK_IMPORTED_MODULE_2__.SmoOperation.getDefaultSlurDirection(this.view.score, this.slur.startSelector, this.slur.endSelector, _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.AUTO, _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.orientations.AUTO);
        _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SlurNumberParams.forEach((key) => {
            this.slur[key] = params[key];
        });
        this.view.addOrUpdateStaffModifier(this.backup, this.slur);
        this.changed = true;
    }
    get cp2y() {
        return this.slur.cp2y;
    }
    set cp2y(value) {
        this.writeSlurNumber(this.view, this.slur, 'cp2y', value);
    }
    get cp2x() {
        return this.slur.cp2x;
    }
    set cp2x(value) {
        this.writeSlurNumber(this.view, this.slur, 'cp2x', value);
    }
    get cp1y() {
        return this.slur.cp1y;
    }
    set cp1y(value) {
        this.writeSlurNumber(this.view, this.slur, 'cp1y', value);
    }
    get cp1x() {
        return this.slur.cp1x;
    }
    set cp1x(value) {
        this.writeSlurNumber(this.view, this.slur, 'cp1x', value);
    }
    get invert() {
        return this.slur.invert;
    }
    set invert(value) {
        this.writeSlurBool(this.view, this.slur, 'invert', value);
    }
    get position_end() {
        return this.slur.position_end;
    }
    set position_end(value) {
        this.writeSlurNumber(this.view, this.slur, 'position_end', value);
    }
    get position() {
        return this.slur.position;
    }
    set position(value) {
        this.writeSlurNumber(this.view, this.slur, 'position', value);
    }
    get yOffset() {
        return this.slur.yOffset;
    }
    set yOffset(value) {
        this.writeSlurNumber(this.view, this.slur, 'yOffset', value);
    }
    get xOffset() {
        return this.slur.xOffset;
    }
    set xOffset(value) {
        this.writeSlurNumber(this.view, this.slur, 'xOffset', value);
    }
    get thickness() {
        return this.slur.thickness;
    }
    set thickness(value) {
        this.writeSlurNumber(this.view, this.slur, 'thickness', value);
    }
    get spacing() {
        return this.slur.spacing;
    }
    set spacing(value) {
        this.writeSlurNumber(this.view, this.slur, 'spacing', value);
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeStaffModifier(this.backup);
        });
    }
}
class SuiSlurAttributesDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    disableClose() {
        $(this.dgDom.element).find('.ok-button').prop('disabled', true);
        $(this.dgDom.element).find('.cancel-button').prop('disabled', true);
        $(this.dgDom.element).find('.remove-button').prop('disabled', true);
    }
    enableClose() {
        $(this.dgDom.element).find('.ok-button').prop('disabled', false);
        $(this.dgDom.element).find('.cancel-button').prop('disabled', false);
        $(this.dgDom.element).find('.remove-button').prop('disabled', false);
    }
    modalPromise() {
        const self = this;
        return new Promise((resolve) => {
            const checkComplete = () => {
                setTimeout(() => {
                    if (self.adapter.updating === false) {
                        resolve();
                    }
                    else {
                        checkComplete();
                    }
                }, 200);
            };
            checkComplete();
        });
    }
    changed() {
        super.changed();
        if (this.adapter.updating) {
            const self = this;
            this.disableClose();
            this.modalPromise().then(() => {
                self.enableClose();
            });
        }
    }
    constructor(parameters) {
        const adapter = new SuiSlurAdapter(parameters.view, parameters.modifier);
        super(SuiSlurAttributesDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
    }
}
SuiSlurAttributesDialog.dialogElements = {
    label: 'Slur Properties', elements: [{
            smoName: 'spacing',
            defaultValue: 2,
            control: 'SuiRockerComponent',
            label: 'Spacing'
        }, {
            smoName: 'thickness',
            defaultValue: 2,
            control: 'SuiRockerComponent',
            label: 'Thickness'
        }, {
            smoName: 'xOffset',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'X Offset'
        }, {
            smoName: 'yOffset',
            defaultValue: 10,
            control: 'SuiRockerComponent',
            label: 'Y Offset'
        }, {
            smoName: 'position',
            defaultValue: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.HEAD,
            dataType: 'int',
            options: [{
                    value: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.HEAD,
                    label: 'Head'
                }, {
                    value: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.TOP,
                    label: 'Top'
                }],
            control: 'SuiDropdownComponent',
            label: 'Start Position'
        }, {
            smoName: 'position_end',
            defaultValue: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.HEAD,
            dataType: 'int',
            options: [{
                    value: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.HEAD,
                    label: 'Head'
                }, {
                    value: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSlur.positions.TOP,
                    label: 'Top'
                }],
            control: 'SuiDropdownComponent',
            label: 'End Position'
        }, {
            smoName: 'invert',
            control: 'SuiToggleComponent',
            label: 'Invert'
        }, {
            smoName: 'resetDefaults',
            control: 'SuiToggleComponent',
            label: 'Defaults'
        }, {
            smoName: 'resetAll',
            control: 'SuiToggleComponent',
            label: 'Reset All Slurs'
        }, {
            smoName: 'cp1x',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Control Point 1 X'
        }, {
            smoName: 'cp1y',
            defaultValue: 40,
            control: 'SuiRockerComponent',
            label: 'Control Point 1 Y'
        }, {
            smoName: 'cp2x',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Control Point 2 X'
        }, {
            smoName: 'cp2y',
            defaultValue: 40,
            control: 'SuiRockerComponent',
            label: 'Control Point 2 Y'
        }], staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/staffGroup.ts":
/*!**************************************!*\
  !*** ./src/ui/dialogs/staffGroup.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiStaffGroupDialog: () => (/* binding */ SuiStaffGroupDialog),
/* harmony export */   SuiStaffGroupDialogAdapter: () => (/* binding */ SuiStaffGroupDialogAdapter)
/* harmony export */ });
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiStaffGroupDialogAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        const selection = this.view.tracker.selections[0];
        // Reset the view so we can see all the staves
        this.view.viewAll();
        const staffGroup = this.view.score.getSystemGroupForStaff(selection);
        if (!staffGroup) {
            const params = _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSystemGroup.defaults;
            params.startSelector = JSON.parse(JSON.stringify(selection.selector));
            params.endSelector = JSON.parse(JSON.stringify(selection.selector));
            this.staffGroup = new _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSystemGroup(params);
        }
        else {
            this.staffGroup = staffGroup;
        }
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    cancel() {
        return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
    }
    get leftConnector() {
        return this.staffGroup.leftConnector;
    }
    set leftConnector(val) {
        this.staffGroup.leftConnector = val;
        this.view.addOrUpdateStaffGroup(this.staffGroup);
    }
    get staffGroups() {
        return this.staffGroup;
    }
    set staffGroups(val) {
        this.staffGroup = val;
        this.view.addOrUpdateStaffGroup(this.staffGroup);
    }
}
// ## SuiStaffGroupDialog
// A staff group is a grouping of staves that can be bracketed and justified
class SuiStaffGroupDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    static createAndDisplay(parameters) {
        const dg = new SuiStaffGroupDialog(parameters);
        dg.display();
    }
    getModifier() {
        return this.adapter.staffGroups;
    }
    constructor(parameters) {
        const adapter = new SuiStaffGroupDialogAdapter(parameters.view);
        super(SuiStaffGroupDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
}
SuiStaffGroupDialog.dialogElements = {
    label: 'Staff Group', elements: [{
            smoName: 'staffGroups',
            control: 'StaffAddRemoveComponent',
            label: 'Staves in Group',
        }, {
            smoName: 'leftConnector',
            control: 'SuiDropdownComponent',
            dataType: 'int',
            label: 'Left Connector',
            options: [
                {
                    value: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSystemGroup.connectorTypes.bracket,
                    label: 'Bracket'
                }, {
                    value: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSystemGroup.connectorTypes.brace,
                    label: 'Brace'
                }, {
                    value: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSystemGroup.connectorTypes.single,
                    label: 'Single'
                }, {
                    value: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoSystemGroup.connectorTypes.double,
                    label: 'Double'
                }
            ]
        }],
    staticText: [
        { includeStaff: 'Include Staff' }
    ]
};


/***/ }),

/***/ "./src/ui/dialogs/tempo.ts":
/*!*********************************!*\
  !*** ./src/ui/dialogs/tempo.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTempoAdapter: () => (/* binding */ SuiTempoAdapter),
/* harmony export */   SuiTempoDialog: () => (/* binding */ SuiTempoDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




class SuiTempoAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiComponentAdapter {
    constructor(view, measure) {
        super(view);
        this.applyToAllVal = false;
        this.applyToSelection = false;
        this.edited = false;
        this.measure = measure;
        this.smoTempoText = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText(measure.tempo);
        this.backup = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText(this.smoTempoText);
    }
    writeNumber(param, value) {
        this.smoTempoText[param] = value;
        this.view.updateTempoScore(this.measure, this.smoTempoText, this.applyToAll, this.applyToSelection);
        this.edited = true;
    }
    writeBoolean(param, value) {
        this.smoTempoText[param] = value;
        this.view.updateTempoScore(this.measure, this.smoTempoText, this.applyToAll, this.applyToSelection);
        this.edited = true;
    }
    writeString(param, value) {
        this.smoTempoText[param] = value;
        this.view.updateTempoScore(this.measure, this.smoTempoText, this.applyToAll, this.applyToSelection);
        this.edited = true;
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeTempo(this.measure, this.smoTempoText, this.applyToAll, this.applyToSelection);
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.updateTempoScore(this.measure, this.backup, this.applyToAll, this.applyToSelection);
        });
    }
    get applyToAll() {
        return this.applyToAllVal;
    }
    set applyToAll(val) {
        this.applyToAllVal = val;
        this.view.updateTempoScore(this.measure, this.smoTempoText, this.applyToAll, this.applyToSelection);
        this.edited = true;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_3__.PromiseHelpers.emptyPromise();
        });
    }
    get tempoText() {
        return this.smoTempoText.tempoText;
    }
    set tempoText(value) {
        this.writeString('tempoText', value);
    }
    get tempoMode() {
        return this.smoTempoText.tempoMode;
    }
    set tempoMode(value) {
        this.writeString('tempoMode', value);
    }
    get customText() {
        return this.smoTempoText.customText;
    }
    set customText(value) {
        this.writeString('customText', value);
    }
    get bpm() {
        return this.smoTempoText.bpm;
    }
    set bpm(value) {
        this.writeNumber('bpm', value);
    }
    get display() {
        return this.smoTempoText.display;
    }
    set display(value) {
        this.writeBoolean('display', value);
    }
    get beatDuration() {
        return this.smoTempoText.beatDuration;
    }
    set beatDuration(value) {
        this.writeNumber('beatDuration', value);
    }
    get yOffset() {
        return this.smoTempoText.yOffset;
    }
    set yOffset(value) {
        this.writeNumber('yOffset', value);
    }
}
// ## SuiTempoDialog
// Allow user to choose a tempo or tempo change.
class SuiTempoDialog extends _adapter__WEBPACK_IMPORTED_MODULE_2__.SuiDialogAdapterBase {
    showHideCustom() {
        if (this.adapter.tempoMode === 'custom') {
            this.cmap.customTextCtrl.show();
        }
        else {
            this.cmap.customTextCtrl.hide();
        }
    }
    changed() {
        super.changed();
        this.showHideCustom();
    }
    initialValue() {
        super.initialValue();
        this.showHideCustom();
    }
    constructor(parameters) {
        const measures = _smo_xform_selections__WEBPACK_IMPORTED_MODULE_1__.SmoSelection.getMeasureList(parameters.view.tracker.selections)
            .map((sel) => sel.measure);
        const measure = measures[0];
        const adapter = new SuiTempoAdapter(parameters.view, measure);
        super(SuiTempoDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
}
SuiTempoDialog.dialogElements = {
    label: 'Tempo Properties',
    elements: [
        {
            smoName: 'tempoMode',
            defaultValue: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoModes.durationMode,
            control: 'SuiDropdownComponent',
            label: 'Tempo Mode',
            options: [{
                    value: 'duration',
                    label: 'Duration (Beats/Minute)'
                }, {
                    value: 'text',
                    label: 'Tempo Text'
                }, {
                    value: 'custom',
                    label: 'Specify text and duration'
                }
            ]
        },
        {
            smoName: 'customText',
            defaultValue: '',
            control: 'SuiTextInputComponent',
            label: 'Custom Text',
            classes: 'hide-when-text-mode'
        },
        {
            smoName: 'bpm',
            defaultValue: 120,
            control: 'SuiRockerComponent',
            label: 'Notes/Minute'
        },
        {
            smoName: 'beatDuration',
            defaultValue: 4096,
            dataType: 'int',
            control: 'SuiDropdownComponent',
            label: 'Unit for Beat',
            options: [{
                    value: 4096,
                    label: 'Quarter Note',
                }, {
                    value: 2048,
                    label: '1/8 note'
                }, {
                    value: 6144,
                    label: 'Dotted 1/4 note'
                }, {
                    value: 8192,
                    label: '1/2 note'
                }
            ]
        },
        {
            smoName: 'tempoText',
            defaultValue: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.allegro,
            control: 'SuiDropdownComponent',
            label: 'Tempo Text',
            classes: 'hide-when-not-text-mode',
            options: [{
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.larghissimo,
                    label: 'Larghissimo'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.grave,
                    label: 'Grave'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.lento,
                    label: 'Lento'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.largo,
                    label: 'Largo'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.larghetto,
                    label: 'Larghetto'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.adagio,
                    label: 'Adagio'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.adagietto,
                    label: 'Adagietto'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.andante_moderato,
                    label: 'Andante moderato'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.andante,
                    label: 'Andante'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.andantino,
                    label: 'Andantino'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.moderator,
                    label: 'Moderato'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.allegretto,
                    label: 'Allegretto',
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.allegro,
                    label: 'Allegro'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.vivace,
                    label: 'Vivace'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.presto,
                    label: 'Presto'
                }, {
                    value: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTempoText.tempoTexts.prestissimo,
                    label: 'Prestissimo'
                }
            ]
        }, {
            smoName: 'applyToAll',
            control: 'SuiToggleComponent',
            label: 'Apply to all future measures?'
        }, {
            smoName: 'applyToSelection',
            control: 'SuiToggleComponent',
            label: 'Apply to selection?'
        }, {
            smoName: 'display',
            control: 'SuiToggleComponent',
            label: 'Display Tempo'
        }, {
            smoName: 'yOffset',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Y Offset'
        }
    ],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/textBlock.ts":
/*!*************************************!*\
  !*** ./src/ui/dialogs/textBlock.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTextBlockDialog: () => (/* binding */ SuiTextBlockDialog),
/* harmony export */   helpModal: () => (/* binding */ helpModal)
/* harmony export */ });
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../render/sui/layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../render/sui/textEdit */ "./src/render/sui/textEdit.ts");
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _help__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../help */ "./src/ui/help.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.







class SuiTextBlockDialog extends _dialog__WEBPACK_IMPORTED_MODULE_5__.SuiDialogBase {
    get textEditorCtrl() {
        return this.cmap.textEditorCtrl;
    }
    get insertCodeCtrl() {
        return this.cmap.insertCodeCtrl;
    }
    get textDraggerCtrl() {
        return this.cmap.textDraggerCtrl;
    }
    get yCtrl() {
        return this.cmap.yCtrl;
    }
    get xCtrl() {
        return this.cmap.xCtrl;
    }
    get fontCtrl() {
        return this.cmap.fontCtrl;
    }
    get textBlockCtrl() {
        return this.cmap.textBlockCtrl;
    }
    get paginationCtrl() {
        return this.cmap.paginationCtrl;
    }
    get attachToSelectorCtrl() {
        return this.cmap.attachToSelectorCtrl;
    }
    constructor(parameters) {
        let edited = false;
        let isNew = false;
        const tracker = parameters.view.tracker;
        ['staffModifier', 'suggestion'].forEach((outlineType) => {
            if (tracker.outlines[outlineType]) {
                _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.eraseOutline(tracker.outlines[outlineType]);
            }
        });
        const layout = parameters.view.score.layoutManager.getGlobalLayout();
        // Create a new text modifier, if this is new text.   Else use selection
        if (!parameters.modifier) {
            isNew = true;
            const textParams = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoScoreText.defaults;
            const newText = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoScoreText(textParams);
            // convert scroll from screen coord to svg coord
            const svgScroll = tracker.renderer.pageMap.clientToSvg(_render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.smoBox(tracker.scroller.scrollState));
            newText.y += svgScroll.y;
            newText.x += svgScroll.x;
            if (tracker.selections.length > 0) {
                const sel = tracker.selections[0].measure.svg;
                if (typeof (sel.logicalBox) !== 'undefined') {
                    if (sel.logicalBox.y >= newText.y) {
                        newText.y = sel.logicalBox.y;
                        newText.x = sel.logicalBox.x;
                    }
                }
            }
            const grpParams = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.defaults;
            grpParams.textBlocks = [{ text: newText, position: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.relativePositions.LEFT, activeText: true }];
            const newGroup = new _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup(grpParams);
            parameters.modifier = newGroup;
            parameters.modifier.setActiveBlock(newText);
            parameters.view.addTextGroup(parameters.modifier);
            edited = true;
        }
        else {
            // Make sure there is a score text to start the editing.
            parameters.modifier.setActiveBlock(parameters.modifier.textBlocks[0].text);
        }
        super(SuiTextBlockDialog.dialogElements, parameters);
        this.outlineRect = null;
        this.isNew = isNew;
        this.modifier = parameters.modifier;
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
        this.edited = edited;
        this.view.groupUndo(true);
        this.activeScoreText = this.modifier.getActiveBlock();
        this.mouseMoveHandler = null;
        this.mouseUpHandler = null;
        this.mouseDownHandler = null;
        this.mouseClickHandler = null;
    }
    populateInitial() {
        this.textBlockCtrl.setValue({
            activeScoreText: this.activeScoreText,
            modifier: this.modifier
        });
        const fontFamily = this.activeScoreText.fontInfo.family;
        const fontSize = this.activeScoreText.fontInfo.size;
        this.fontCtrl.setValue({
            family: fontFamily,
            size: fontSize,
            style: this.activeScoreText.fontInfo.style,
            weight: this.activeScoreText.fontInfo.weight
        });
        this.attachToSelectorCtrl.setValue(this.modifier.attachToSelector);
        const ul = this.modifier.ul();
        this.xCtrl.setValue(ul.x);
        this.yCtrl.setValue(ul.y);
        this.paginationCtrl.setValue(this.modifier.pagination);
        this.highlightActiveRegion();
    }
    display() {
        const pageContext = this.view.renderer.pageMap.getRendererFromModifier(this.activeScoreText);
        const svg = pageContext.svg;
        this.textElement = $(svg).find('.' + this.activeScoreText.attrs.id)[0];
        $('body').addClass('showAttributeDialog');
        $('body').addClass('textEditor');
        this.applyDisplayOptions();
        this.populateInitial();
        this.bindElements();
        if (!this.modifier.logicalBox) {
            this.view.renderer.renderTextGroup(this.modifier);
        }
        // If this control has not been edited this session, assume they want to
        // edit the text and just right into that.
        if (!this.modifier.edited) {
            this.modifier.edited = true;
            _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_2__.layoutDebug.addDialogDebug('text transform db: startEditSession');
            this.textEditorCtrl.startEditSession();
        }
        this.mouseMoveHandler = this.eventSource.bindMouseMoveHandler(this, 'mouseMove');
        this.mouseUpHandler = this.eventSource.bindMouseUpHandler(this, 'mouseUp');
        this.mouseDownHandler = this.eventSource.bindMouseDownHandler(this, 'mouseDown');
        this.mouseClickHandler = this.eventSource.bindMouseClickHandler(this, 'mouseClick');
    }
    _resetAttachToSelector() {
        this.modifier.attachToSelector = false;
        this.modifier.selector = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.defaults.selector;
        this.modifier.musicXOffset = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.defaults.musicXOffset;
        this.modifier.musicYOffset = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.defaults.musicYOffset;
    }
    _activateAttachToSelector() {
        this.modifier.attachToSelector = true;
        this.modifier.selector = JSON.parse(JSON.stringify(this.view.tracker.selections[0].selector));
        if (this.modifier.logicalBox) {
            this.modifier.musicXOffset = this.modifier.logicalBox.x - this.view.tracker.selections[0].measure.svg.logicalBox.x;
            this.modifier.musicYOffset = this.modifier.logicalBox.y - this.view.tracker.selections[0].measure.svg.logicalBox.y;
        }
    }
    changed() {
        this.edited = true;
        if (this.insertCodeCtrl.changeFlag && this.textEditorCtrl.session) {
            const val = this.insertCodeCtrl.getValue().toString().split('');
            val.forEach((key) => {
                this.evKey({ key });
            });
            this.insertCodeCtrl.unselect();
        }
        if (this.textBlockCtrl.changeFlag) {
            const nval = this.textBlockCtrl.getValue();
            this.activeScoreText = nval.activeScoreText;
            this.highlightActiveRegion();
        }
        if (this.textEditorCtrl.changeFlag) {
            this.highlightActiveRegion();
        }
        if (this.attachToSelectorCtrl.changeFlag) {
            const toSet = this.attachToSelectorCtrl.getValue();
            if (toSet) {
                this._activateAttachToSelector();
                this.paginationCtrl.setValue(_smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.ONCE);
                this.modifier.pagination = _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.ONCE;
            }
            else {
                this._resetAttachToSelector();
            }
        }
        const pos = this.modifier.ul();
        // position can change from drag or by dialog - only update from
        // dialog entries if that changed.
        if (this.xCtrl.changeFlag) {
            this.modifier.offsetX(this.xCtrl.getValue() - pos.x);
        }
        if (this.yCtrl.changeFlag) {
            this.modifier.offsetY(this.yCtrl.getValue() - pos.y);
        }
        if (this.textDraggerCtrl.changeFlag) {
            this.xCtrl.setValue(pos.x);
            this.yCtrl.setValue(pos.y);
        }
        if (this.paginationCtrl.changeFlag) {
            this.modifier.pagination = parseInt(this.paginationCtrl.getValue().toString(), 10);
            // Pagination and attach to measure don't mix.
            this._resetAttachToSelector();
            this.attachToSelectorCtrl.setValue(false);
        }
        if (this.fontCtrl.changeFlag) {
            const fontInfo = this.fontCtrl.getValue();
            this.activeScoreText.fontInfo.family = fontInfo.family;
            // transitioning away from non-point-based font size units
            this.activeScoreText.fontInfo.size = fontInfo.size;
            this.activeScoreText.fontInfo.weight = fontInfo.weight;
            this.activeScoreText.fontInfo.style = fontInfo.style;
        }
        // Use layout context because render may have reset svg.
        this.view.updateTextGroup(this.modifier);
    }
    highlightActiveRegion() {
        const pageContext = this.view.renderer.pageMap.getRendererFromModifier(this.activeScoreText);
        const svg = pageContext.svg;
        if (this.activeScoreText.logicalBox) {
            const stroke = _render_sui_textEdit__WEBPACK_IMPORTED_MODULE_4__.SuiTextEditor.strokes['text-highlight'];
            if (!this.outlineRect) {
                this.outlineRect = {
                    context: pageContext,
                    classes: '',
                    stroke,
                    box: this.activeScoreText.logicalBox,
                    scroll: this.scroller.scrollState,
                    timeOff: 1000
                };
            }
            _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.eraseOutline(this.outlineRect);
            this.outlineRect.box = this.activeScoreText.logicalBox;
            _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.outlineRect(this.outlineRect);
        }
    }
    // ### handleKeydown
    // allow a dialog to be dismissed by esc.
    evKey(evdata) {
        if (evdata.key === 'Escape') {
            $(this.dgDom.element).find('.cancel-button').click();
            evdata.preventDefault();
        }
        else {
            this.textEditorCtrl.evKey(evdata);
        }
    }
    // ### Event handlers, passed from dialog
    mouseUp() {
        if (this.textDraggerCtrl && this.textDraggerCtrl.running) {
            this.textDraggerCtrl.mouseUp(null);
        }
    }
    mouseMove(ev) {
        if (this.textDraggerCtrl && this.textDraggerCtrl.running) {
            this.textDraggerCtrl.mouseMove(ev);
        }
        else if (this.textEditorCtrl && this.textEditorCtrl.isRunning) {
            this.textEditorCtrl.mouseMove(ev);
        }
    }
    mouseClick(ev) {
        if (this.textEditorCtrl && this.textEditorCtrl.isRunning) {
            this.textEditorCtrl.mouseClick(ev);
            ev.stopPropagation();
        }
    }
    mouseDown(ev) {
        if (this.textDraggerCtrl && this.textDraggerCtrl.running) {
            this.textDraggerCtrl.mouseDown(ev);
        }
    }
    _complete() {
        this.view.groupUndo(false);
        this.modifier.setActiveBlock(null);
        this.view.tracker.updateMap(); // update the text map
        this.view.renderer.setDirty();
        if (this.mouseDownHandler) {
            this.eventSource.unbindMouseDownHandler(this.mouseDownHandler);
        }
        if (this.mouseUpHandler) {
            this.eventSource.unbindMouseUpHandler(this.mouseUpHandler);
        }
        if (this.mouseMoveHandler) {
            this.eventSource.unbindMouseMoveHandler(this.mouseMoveHandler);
        }
        if (this.mouseClickHandler) {
            this.eventSource.unbindMouseClickHandler(this.mouseClickHandler);
        }
        if (this.outlineRect) {
            _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_3__.SvgHelpers.eraseOutline(this.outlineRect);
        }
        // Hack - this comes from SuiInlineText and SuiTextEdit.
        $('body').removeClass('showAttributeDialog');
        $('body').removeClass('textEditor');
        this.complete();
    }
    _removeText() {
        this.view.removeTextGroup(this.modifier);
    }
    bindElements() {
        const dgDom = this.dgDom;
        $(dgDom.element).find('.ok-button').off('click').on('click', () => {
            this.view.updateTextGroup(this.modifier);
            this._complete();
        });
        $(dgDom.element).find('.cancel-button').off('click').on('click', () => {
            this.view.groupUndo(false);
            if (this.edited) {
                this.modifier.elements.forEach((element) => {
                    element.remove();
                });
                this.modifier.elements = [];
                this.view.undo();
            }
            this._complete();
        });
        $(dgDom.element).find('.remove-button').off('click').on('click', () => {
            this._removeText();
            this._complete();
        });
    }
}
SuiTextBlockDialog.dialogElements = {
    label: 'Text Properties', elements: [{
            smoName: 'textEditor',
            defaultValue: 0,
            control: 'SuiTextInPlace',
            classes: 'show-always hide-when-moving',
            label: 'Edit Text',
            options: []
        }, {
            smoName: 'insertCode',
            classes: 'show-when-editing hide-when-moving',
            control: 'SuiDropdownComponent',
            label: 'Insert Special',
            options: [
                { value: '@@@', label: 'Pages' },
                { value: '###', label: 'Page Number' }
            ]
        }, {
            smoName: 'textDragger',
            classes: 'hide-when-editing show-when-moving',
            defaultValue: 0,
            control: 'SuiDragText',
            label: 'Move Text',
            options: []
        }, {
            smoName: 'x',
            defaultValue: 0,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiRockerComponent',
            label: 'X Position (Px)',
            dataType: 'int'
        }, {
            smoName: 'y',
            defaultValue: 0,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiRockerComponent',
            label: 'Y Position (Px)',
            dataType: 'int'
        }, {
            smoName: 'font',
            classes: 'hide-when-editing hide-when-moving',
            defaultValue: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoScoreText.fontFamilies.times,
            control: 'SuiFontComponent',
            label: 'Font Information'
        },
        {
            smoName: 'textBlock',
            classes: 'hide-when-editing hide-when-moving',
            defaultValue: '',
            control: 'SuiTextBlockComponent',
            label: 'Text Block Properties'
        },
        {
            smoName: 'pagination',
            defaultValue: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.ONCE,
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiDropdownComponent',
            label: 'Page Behavior',
            startRow: true,
            options: [{ value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.ONCE, label: 'Once' },
                { value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.EVERY, label: 'Every' },
                { value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.ODD, label: 'Odd' },
                { value: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_0__.SmoTextGroup.paginations.SUBSEQUENT, label: 'Subsequent' }
            ]
        }, {
            smoName: 'attachToSelector',
            classes: 'hide-when-editing hide-when-moving',
            control: 'SuiToggleComponent',
            label: 'Attach to Selection'
        }],
    staticText: [
        { label: 'Text Properties' },
        { editorLabel: 'Done Editing Text' },
        { draggerLabel: 'Done Dragging Text' }
    ]
};
class helpModal {
    static createAndDisplay() {
        _help__WEBPACK_IMPORTED_MODULE_6__.SuiHelp.displayHelp();
        return (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_1__.closeDialogPromise)();
    }
}


/***/ }),

/***/ "./src/ui/dialogs/textBracket.ts":
/*!***************************************!*\
  !*** ./src/ui/dialogs/textBracket.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTextBracketAdapter: () => (/* binding */ SuiTextBracketAdapter),
/* harmony export */   SuiTextBracketDialog: () => (/* binding */ SuiTextBracketDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiTextBracketAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, bracket) {
        super(view);
        this.changed = false;
        this.bracket = bracket;
        this.view = view;
        this.backup = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoStaffTextBracket(this.bracket);
        this.backup.attrs.id = bracket.attrs.id;
        this.backup.associatedStaff = bracket.associatedStaff;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.view.removeTextBracket(this.bracket);
                yield this.view.addOrReplaceTextBracket(this.backup);
            }
        });
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeStaffModifier(this.bracket);
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    updateValue(param, val) {
        return __awaiter(this, void 0, void 0, function* () {
            const current = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoStaffTextBracket(this.bracket);
            this.bracket[param] = parseInt(val.toString(), 10);
            yield this.view.addOrUpdateStaffModifier(current, this.bracket);
            this.changed = true;
        });
    }
    updateText(param, val) {
        return __awaiter(this, void 0, void 0, function* () {
            const current = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoStaffTextBracket(this.bracket);
            this.bracket[param] = val;
            yield this.view.addOrUpdateStaffModifier(current, this.bracket);
            this.changed = true;
        });
    }
    get text() {
        return this.bracket.text;
    }
    set text(val) {
        this.updateText('text', val);
    }
    get superscript() {
        return this.bracket.superscript;
    }
    set superscript(val) {
        this.updateText('superscript', val);
    }
    get position() {
        return this.bracket.position;
    }
    set position(val) {
        this.updateValue('position', val);
    }
    get line() {
        return this.bracket.line;
    }
    set line(val) {
        this.updateValue('line', val);
    }
}
class SuiTextBracketDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(parameters) {
        const adapter = new SuiTextBracketAdapter(parameters.view, parameters.modifier);
        super(SuiTextBracketDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
    }
}
SuiTextBracketDialog.dialogElements = {
    label: 'Text Bracket Properties', elements: [{
            smoName: 'line',
            defaultValue: 1,
            control: 'SuiRockerComponent',
            label: 'Line'
        }, {
            smoName: 'position',
            control: 'SuiDropdownComponent',
            label: 'Position',
            options: [
                {
                    value: '1',
                    label: 'Above'
                }, {
                    value: '-1',
                    label: 'Below'
                }
            ]
        }, {
            smoName: 'text',
            control: 'SuiTextInputComponent',
            label: 'Text'
        }, {
            smoName: 'superscript',
            control: 'SuiTextInputComponent',
            label: 'SubText'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/tie.ts":
/*!*******************************!*\
  !*** ./src/ui/dialogs/tie.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTieAdapter: () => (/* binding */ SuiTieAdapter),
/* harmony export */   SuiTieAttributesDialog: () => (/* binding */ SuiTieAttributesDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiTieAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, tie) {
        super(view);
        this.changed = false;
        this.tie = tie;
        this.backup = new _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoTie(tie);
        // Make it have same ID so remove works.
        this.backup.attrs.id = tie.attrs.id;
        this.backup.associatedStaff = tie.associatedStaff;
    }
    writeTieNumber(value, param) {
        this.tie[param] = value;
        this.view.addOrUpdateStaffModifier(this.backup, this.tie);
        this.changed = true;
    }
    get lines() {
        return this.tie.lines;
    }
    set lines(value) {
        this.tie.lines = JSON.parse(JSON.stringify(value));
        this.view.addOrUpdateStaffModifier(this.backup, this.tie);
    }
    get tie_spacing() {
        return this.tie.tie_spacing;
    }
    set tie_spacing(value) {
        this.writeTieNumber(value, 'tie_spacing');
    }
    get first_x_shift() {
        return this.tie.first_x_shift;
    }
    set first_x_shift(value) {
        this.writeTieNumber(value, 'first_x_shift');
    }
    get last_x_shift() {
        return this.tie.last_x_shift;
    }
    set last_x_shift(value) {
        this.writeTieNumber(value, 'last_x_shift');
    }
    get y_shift() {
        return this.tie.y_shift;
    }
    set y_shift(value) {
        this.writeTieNumber(value, 'y_shift');
    }
    get cp1() {
        return this.tie.cp1;
    }
    set cp1(value) {
        this.writeTieNumber(value, 'cp1');
    }
    get cp2() {
        return this.tie.cp2;
    }
    set cp2(value) {
        this.writeTieNumber(value, 'cp2');
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.view.addOrUpdateStaffModifier(this.backup, this.backup);
            }
        });
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeStaffModifier(this.backup);
        });
    }
}
class SuiTieAttributesDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(parameters) {
        if (!parameters.modifier) {
            throw new Error('modifier attribute dialog must have modifier');
        }
        const tie = parameters.modifier;
        const adapter = new SuiTieAdapter(parameters.view, tie);
        super(SuiTieAttributesDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
    }
}
SuiTieAttributesDialog.dialogElements = {
    label: 'Tie Properties',
    staticText: [
        { label: 'Tie Properties' },
        { fromNote: 'From Note' },
        { toNote: 'To Note' }
    ], elements: [{
            smoName: 'lines',
            control: 'TieMappingComponent',
            label: 'Lines'
        }, {
            smoName: 'cp1',
            control: 'SuiRockerComponent',
            label: 'Control Point 1'
        }, {
            smoName: 'cp2',
            control: 'SuiRockerComponent',
            label: 'Control Point 2'
        }, {
            smoName: 'first_x_shift',
            control: 'SuiRockerComponent',
            label: 'X Offset 1'
        }, {
            smoName: 'last_x_shift',
            control: 'SuiRockerComponent',
            label: 'X Offset 2'
        }, {
            smoName: 'y_shift',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Y Offset'
        }, {
            smoName: 'tie_spacing',
            defaultValue: 40,
            control: 'SuiRockerComponent',
            label: 'Tie Spacing'
        }],
};


/***/ }),

/***/ "./src/ui/dialogs/timeSignature.ts":
/*!*****************************************!*\
  !*** ./src/ui/dialogs/timeSignature.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTimeSignatureAdapter: () => (/* binding */ SuiTimeSignatureAdapter),
/* harmony export */   SuiTimeSignatureDialog: () => (/* binding */ SuiTimeSignatureDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiTimeSignatureAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view) {
        super(view);
        this.measure = this.view.tracker.selections[0].measure;
        this.backup = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.TimeSignature(this.measure.timeSignature);
    }
    get numerator() {
        return this.measure.timeSignature.actualBeats;
    }
    set numerator(value) {
        this.measure.timeSignature.actualBeats = value;
    }
    get denominator() {
        return this.measure.timeSignature.beatDuration;
    }
    set denominator(value) {
        this.measure.timeSignature.beatDuration = value;
    }
    get display() {
        return this.measure.timeSignature.display;
    }
    set display(value) {
        this.measure.timeSignature.display = value;
    }
    get useSymbol() {
        return this.measure.timeSignature.useSymbol;
    }
    set useSymbol(value) {
        this.measure.timeSignature.useSymbol = value;
    }
    get customString() {
        return this.measure.timeSignature.displayString;
    }
    set customString(value) {
        const tr = value.trim();
        if (!(tr.indexOf('/') >= 0)) {
            if (tr === 'C' || tr === 'C|') {
                this.measure.timeSignature.displayString = tr;
                return;
            }
        }
        const ar = tr.split('/');
        if (isNaN(parseInt(ar[0], 10)) || isNaN(parseInt(ar[1], 10))) {
            this.measure.timeSignature.displayString = '';
            return;
        }
        this.measure.timeSignature.displayString = tr;
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.setTimeSignature(this.measure.timeSignature);
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            this.measure.timeSignature = this.backup;
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
}
class SuiTimeSignatureDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    constructor(parameters) {
        const adapter = new SuiTimeSignatureAdapter(parameters.view);
        super(SuiTimeSignatureDialog.dialogElements, Object.assign({ adapter }, parameters));
    }
}
SuiTimeSignatureDialog.dialogElements = {
    label: 'Custom Time Signature',
    elements: [
        {
            smoName: 'numerator',
            defaultValue: 3,
            control: 'SuiRockerComponent',
            label: 'Beats/Measure',
        },
        {
            smoName: 'denominator',
            defaultValue: 8,
            dataType: 'int',
            control: 'SuiDropdownComponent',
            label: 'Beat Value',
            options: [{
                    value: 16,
                    label: '16',
                }, {
                    value: 8,
                    label: '8',
                }, {
                    value: 4,
                    label: '4'
                }, {
                    value: 2,
                    label: '2'
                }]
        }, {
            smoName: 'display',
            control: 'SuiToggleComponent',
            label: 'Display',
        }, {
            smoName: 'useSymbol',
            control: 'SuiToggleComponent',
            label: 'Common/Cut',
        }, {
            smoName: 'customString',
            control: 'SuiTextInputComponent',
            label: 'Custom',
        }
    ],
    staticText: []
};


/***/ }),

/***/ "./src/ui/dialogs/volta.ts":
/*!*********************************!*\
  !*** ./src/ui/dialogs/volta.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiVoltaAdapter: () => (/* binding */ SuiVoltaAdapter),
/* harmony export */   SuiVoltaAttributeDialog: () => (/* binding */ SuiVoltaAttributeDialog)
/* harmony export */ });
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./src/ui/dialogs/adapter.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiVoltaAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiComponentAdapter {
    constructor(view, volta) {
        super(view);
        this.changed = false;
        this.volta = volta;
        this.backup = new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoVolta(this.volta);
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.view.removeEnding(this.volta);
        });
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.changed) {
                yield this.view.updateEnding(this.backup);
            }
        });
    }
    commit() {
        return __awaiter(this, void 0, void 0, function* () {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_2__.PromiseHelpers.emptyPromise();
        });
    }
    updateVolta(param, value) {
        this.volta[param] = value;
        this.view.updateEnding(this.volta);
        this.changed = true;
    }
    get startBar() {
        return this.volta.startBar;
    }
    set startBar(val) {
        this.updateVolta('startBar', val);
    }
    get endBar() {
        return this.volta.endBar;
    }
    set endBar(val) {
        this.updateVolta('endBar', val);
    }
    get xOffsetStart() {
        return this.volta.xOffsetStart;
    }
    set xOffsetStart(val) {
        this.updateVolta('xOffsetStart', val);
    }
    get xOffsetEnd() {
        return this.volta.xOffsetEnd;
    }
    set xOffsetEnd(val) {
        this.updateVolta('xOffsetEnd', val);
    }
    get yOffset() {
        return this.volta.yOffset;
    }
    set yOffset(val) {
        this.updateVolta('yOffset', val);
    }
    get number() {
        return this.volta.number;
    }
    set number(val) {
        this.updateVolta('number', val);
    }
}
// ## SuiVoltaAttributeDialog
// aka first and second endings
class SuiVoltaAttributeDialog extends _adapter__WEBPACK_IMPORTED_MODULE_1__.SuiDialogAdapterBase {
    static createAndDisplay(parameters) {
        if (parameters.modifier.logicalBox === null) {
            return null;
        }
        const dg = new SuiVoltaAttributeDialog(parameters);
        dg.display();
        return dg;
    }
    constructor(parameters) {
        const adapter = new SuiVoltaAdapter(parameters.view, parameters.modifier);
        super(SuiVoltaAttributeDialog.dialogElements, Object.assign({ adapter }, parameters));
        this.displayOptions = ['BINDCOMPONENTS', 'DRAGGABLE', 'KEYBOARD_CAPTURE', 'MODIFIERPOS'];
    }
}
SuiVoltaAttributeDialog.dialogElements = {
    label: 'Volta Properties', elements: [{
            smoName: 'number',
            defaultValue: 1,
            control: 'SuiRockerComponent',
            label: 'number'
        }, {
            smoName: 'xOffsetStart',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'X1 Offset'
        }, {
            smoName: 'xOffsetEnd',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'X2 Offset'
        }, {
            smoName: 'yOffset',
            defaultValue: 0,
            control: 'SuiRockerComponent',
            label: 'Y Offset'
        }],
    staticText: []
};


/***/ }),

/***/ "./src/ui/eventSource.ts":
/*!*******************************!*\
  !*** ./src/ui/eventSource.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BrowserEventSource: () => (/* binding */ BrowserEventSource)
/* harmony export */ });
/* harmony import */ var _render_sui_renderState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/sui/renderState */ "./src/render/sui/renderState.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * This is the event generating interface for Smoosic.  It is kept as
 * skeletal as possible so applications can call event handling methods from
 * their own event logic.
 * @category SuiUiBase
 */
class BrowserEventSource {
    constructor() {
        this.scoreChangeHandlers = [];
        this.handleMouseMove = null;
        this.handleMouseClick = null;
        this.handleMouseUp = null;
        this.handleMouseDown = null;
        this.keydownHandlers = [];
        this.mouseMoveHandlers = [];
        this.mouseClickHandlers = [];
        this.mouseUpHandlers = [];
        this.mouseDownHandlers = [];
        this.domTriggers = [];
        this.handleKeydown = this.evKey.bind(this);
        this.handleScoreChangeEvent = this.evScoreChange.bind(this);
        window.addEventListener("keydown", this.handleKeydown, true);
        window.addEventListener(_render_sui_renderState__WEBPACK_IMPORTED_MODULE_0__.scoreChangeEvent, this.handleScoreChangeEvent, true);
    }
    evKey(event) {
        return __awaiter(this, void 0, void 0, function* () {
            let i = 0;
            for (i = 0; i < this.keydownHandlers.length; ++i) {
                const handler = this.keydownHandlers[i];
                yield handler.sink[handler.method](event);
            }
        });
    }
    evScoreChange(event) {
        return __awaiter(this, void 0, void 0, function* () {
            let i = 0;
            for (i = 0; i < this.scoreChangeHandlers.length; ++i) {
                const handler = this.scoreChangeHandlers[i];
                yield handler.sink[handler.method](event);
            }
        });
    }
    mouseMove(event) {
        this.mouseMoveHandlers.forEach((handler) => {
            handler.sink[handler.method](event);
        });
    }
    mouseClick(event) {
        this.mouseClickHandlers.forEach((handler) => {
            handler.sink[handler.method](event);
        });
    }
    mouseDown(event) {
        this.mouseDownHandlers.forEach((handler) => {
            handler.sink[handler.method](event);
        });
    }
    mouseUp(event) {
        this.mouseUpHandlers.forEach((handler) => {
            handler.sink[handler.method](event);
        });
    }
    setRenderElement(renderElement) {
        this.renderElement = renderElement;
        var self = this;
        this.handleMouseMove = this.mouseMove.bind(this);
        this.handleMouseClick = this.mouseClick.bind(this);
        this.handleMouseUp = this.mouseUp.bind(this);
        this.handleMouseDown = this.mouseDown.bind(this);
        $(document)[0].addEventListener("mousemove", this.handleMouseMove);
        $(this.renderElement)[0].addEventListener("click", this.handleMouseClick);
        $(document)[0].addEventListener("mouseup", this.handleMouseUp);
        $(document)[0].addEventListener("mousedown", this.handleMouseDown);
    }
    _unbindHandlerArray(arSrc, arDest, handler) {
        arSrc.forEach((htest) => {
            if (handler.symbol !== htest.symbol) {
                arDest.push(htest);
            }
        });
    }
    unbindMouseMoveHandler(handler) {
        const handlers = [];
        this._unbindHandlerArray(this.mouseMoveHandlers, handlers, handler);
        this.mouseMoveHandlers = handlers;
    }
    unbindMouseDownHandler(handler) {
        const handlers = [];
        this._unbindHandlerArray(this.mouseDownHandlers, handlers, handler);
        this.mouseDownHandlers = handlers;
    }
    unbindMouseUpHandler(handler) {
        const handlers = [];
        this._unbindHandlerArray(this.mouseUpHandlers, handlers, handler);
        this.mouseUpHandlers = handlers;
    }
    unbindMouseClickHandler(handler) {
        const handlers = [];
        this._unbindHandlerArray(this.mouseClickHandlers, handlers, handler);
        this.mouseClickHandlers = handlers;
    }
    unbindKeydownHandler(handler) {
        const handlers = [];
        this._unbindHandlerArray(this.keydownHandlers, handlers, handler);
        this.keydownHandlers = handlers;
    }
    bindScroller() { }
    // ### bindKeydownHandler
    // add a handler for the evKey event, for keyboard data.
    bindKeydownHandler(sink, method) {
        var handler = { symbol: Symbol(), sink, method };
        this.keydownHandlers.push(handler);
        return handler;
    }
    bindMouseMoveHandler(sink, method) {
        var handler = { symbol: Symbol(), sink, method };
        this.mouseMoveHandlers.push(handler);
        return handler;
    }
    bindMouseUpHandler(sink, method) {
        var handler = { symbol: Symbol(), sink, method };
        this.mouseUpHandlers.push(handler);
        return handler;
    }
    bindScoreChangeHandler(sink, method) {
        var handler = { symbol: Symbol(), sink, method };
        this.scoreChangeHandlers.push(handler);
        return handler;
    }
    bindMouseDownHandler(sink, method) {
        var handler = { symbol: Symbol(), sink, method };
        this.mouseDownHandlers.push(handler);
        return handler;
    }
    bindMouseClickHandler(sink, method) {
        var handler = { symbol: Symbol(), sink, method };
        this.mouseClickHandlers.push(handler);
        return handler;
    }
    domClick(selector, sink, method, args) {
        $(selector).off('click').on('click', function (ev) {
            sink[method](ev, args);
        });
    }
}


/***/ }),

/***/ "./src/ui/exceptions.ts":
/*!******************************!*\
  !*** ./src/ui/exceptions.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiExceptionHandler: () => (/* binding */ SuiExceptionHandler)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _application_eventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../application/eventHandler */ "./src/application/eventHandler.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


class SuiExceptionHandler {
    constructor(params) {
        this.view = params.view;
        this.thrown = false;
        SuiExceptionHandler._instance = this;
    }
    static get instance() {
        return SuiExceptionHandler._instance;
    }
    exceptionHandler(e) {
        let stack = '';
        let doing = '';
        let scoreString = '';
        if (this.thrown) {
            return;
        }
        this.thrown = true;
        if (_application_eventHandler__WEBPACK_IMPORTED_MODULE_1__.SuiEventHandler.reentry) {
            return;
        }
        _application_eventHandler__WEBPACK_IMPORTED_MODULE_1__.SuiEventHandler.reentry = true;
        scoreString = 'Could not serialize score.';
        try {
            scoreString = this.view.score.serialize();
        }
        catch (e) {
            if (e.message) {
                scoreString += ' ' + e.message;
            }
        }
        const message = e.message;
        stack = 'No stack trace available';
        try {
            if (e.error && e.error.stack) {
                stack = e.error.stack;
            }
            else if (e.stack) {
                stack = e.stack;
            }
        }
        catch (e2) {
            stack = 'Error with stack: ' + e2.message;
        }
        doing = 'Last operation not available.';
        const lastOp = this.view.storeUndo.peek();
        if (lastOp) {
            doing = lastOp.title;
        }
        const url = 'https://github.com/AaronDavidNewman/Smoosic/issues';
        const bodyObject = JSON.stringify({
            message,
            stack,
            lastOperation: doing,
            scoreString
        }, null, ' ');
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('.bugDialog');
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const r = b('div').classes('bug-modal').append(b('img').attr('src', '../styles/images/logo.png').classes('bug-logo'))
            .append(b('button').classes('icon icon-cross bug-dismiss-button'))
            .append(b('span').classes('bug-title').text('oh nooooo!  You\'ve found a bug'))
            .append(b('p').text('It would be helpful if you would submit a bug report, and copy the data below into an issue'))
            .append(b('div')
            .append(b('textarea').attr('id', 'bug-text-area').text(bodyObject))
            .append(b('div').classes('button-container').append(b('button').classes('bug-submit-button').text('Submit Report'))));
        $('.bugDialog').html('');
        $('.bugDialog').append(r.dom());
        $('.bug-dismiss-button').off('click').on('click', () => {
            $('body').removeClass('bugReport');
            if (lastOp) {
                this.view.storeUndo.undo(this.view.score, {}, true);
                this.view.renderer.render();
                _application_eventHandler__WEBPACK_IMPORTED_MODULE_1__.SuiEventHandler.reentry = false;
            }
        });
        $('.bug-submit-button').off('click').on('click', () => {
            $('#bug-text-area').select();
            document.execCommand('copy');
            window.open(url, 'Report Smoosic issues');
        });
        $('body').addClass('bugReport');
        if (!this.thrown) {
            this.thrown = true;
            throw (e);
        }
    }
}


/***/ }),

/***/ "./src/ui/fileio/fileInput.ts":
/*!************************************!*\
  !*** ./src/ui/fileio/fileInput.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiFileInput: () => (/* binding */ SuiFileInput)
/* harmony export */ });
// ## SuiFileInput
// Get a string or binary file  from a file input control and transparently
// decompress it if it's mxml file (compressed).  This will read any text  or
// binary file,
// but it will only unzip .mxml files first and has a consistent async interface
class SuiFileInput {
    constructor(evt) {
        this.compressed = false;
        this.binary = false;
        this.compressed = false;
        this.binary = false;
        this.value = null;
        this.event = evt;
        if (evt.target.files[0].name.endsWith('.mxl')) {
            this.compressed = true;
            this.binary = true;
        }
        else if (evt.target.files[0].name.endsWith('.mid')) {
            this.binary = true;
        }
    }
    _handleZip() {
        const self = this;
        return new Promise((resolve) => {
            JSZip.loadAsync(self.value).then((zip) => {
                // Find the real xml file in the zip (not metadata)
                const filename = Object.keys(zip.files).find((ss) => ss.indexOf('META') < 0 && ss.endsWith('xml'));
                zip.file(filename).async('text').then((str) => {
                    self.value = str;
                    resolve();
                });
            });
        });
    }
    loadAsync() {
        const self = this;
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (file) => {
                if (file === null || file.target === null || file.target.result === null) {
                    reject();
                    return;
                }
                self.value = file.target.result;
                if (!self.compressed) {
                    resolve();
                }
                else {
                    self._handleZip().then(() => {
                        resolve();
                    });
                }
            };
            if (self.binary) {
                reader.readAsArrayBuffer(self.event.target.files[0]);
            }
            else {
                reader.readAsText(self.event.target.files[0]);
            }
        });
    }
}


/***/ }),

/***/ "./src/ui/fileio/library.ts":
/*!**********************************!*\
  !*** ./src/ui/fileio/library.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoLibrary: () => (/* binding */ SmoLibrary)
/* harmony export */ });
/* harmony import */ var _xhrLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xhrLoader */ "./src/ui/fileio/xhrLoader.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/serializationHelpers */ "./src/common/serializationHelpers.js");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



// ## SmoLibrary
// A class to organize smoosic files (or any format smoosic accepts) into libraries.
class SmoLibrary {
    constructor(parameters) {
        this.url = '';
        this.format = 'smo';
        this.metadata = {};
        this.children = [];
        this.loaded = false;
        this.parentLib = {};
        if (parameters.url) {
            this.url = parameters.url;
        }
        else if (parameters.data) {
            this.initialize(parameters.data);
        }
    }
    initialize(parameters) {
        _common_serializationHelpers__WEBPACK_IMPORTED_MODULE_2__.smoSerialize.serializedMerge(SmoLibrary.parameterArray, SmoLibrary.defaults, this);
        // if the object was loaded from URL, use that.
        if (!this.url) {
            this.url = parameters.url;
        }
        this.format = parameters.format;
        Object.keys(parameters.metadata).forEach((key) => {
            this.metadata[key] = parameters.metadata[key];
        });
        this.children = [];
        if (typeof (parameters.children) !== 'undefined') {
            parameters.children.forEach((childLib) => {
                this.children.push(new SmoLibrary({ data: childLib }));
            });
        }
        this.children.forEach((child) => {
            child._inheritMetadata(this);
        });
    }
    static get metadataNames() {
        return ['name', 'icon', 'tags', 'composer', 'artist', 'copyright',
            'title', 'subtitle', 'movement', 'source'];
    }
    static get formatTypes() {
        return ['smoosic', 'library', 'mxml', 'midi', 'abc'];
    }
    static get libraryTypes() {
        return ['work', 'transcription', 'library', 'collection'];
    }
    static get defaults() {
        if (typeof (SmoLibrary._defaults) === 'undefined') {
            SmoLibrary._defaults = { children: [], metadata: {} };
        }
        return SmoLibrary._defaults;
    }
    static get parameterArray() {
        return ['children', 'metadata', 'format', 'url'];
    }
    load() {
        const self = this;
        if (this.loaded) {
            return _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_1__.PromiseHelpers.emptyPromise();
        }
        const loader = new _xhrLoader__WEBPACK_IMPORTED_MODULE_0__.SuiXhrLoader(this.url);
        return new Promise((resolve) => {
            loader.loadAsync().then(() => {
                const jsonObj = JSON.parse(loader.value);
                self.initialize(jsonObj);
                self.loaded = true;
                resolve();
            });
        });
    }
    _inheritMetadata(parent) {
        // eslint-disable-next-line
        for (const key in parent) {
            if (typeof (this.metadata[key]) === 'undefined') {
                this.metadata[key] = parent[key];
            }
        }
        this.parentLib = { name: parent.metadata.name, value: parent };
        this.children.forEach((child) => {
            child._inheritMetadata(this);
        });
    }
}


/***/ }),

/***/ "./src/ui/fileio/xhrLoader.ts":
/*!************************************!*\
  !*** ./src/ui/fileio/xhrLoader.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiXhrLoader: () => (/* binding */ SuiXhrLoader)
/* harmony export */ });
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Load a file.  Guess based on the extension whether the file is string or binary
 */
class SuiXhrLoader {
    constructor(path) {
        this.compressed = false;
        this.value = null;
        this.binary = false;
        this.isMidi = false;
        this.path = path;
        if (path.endsWith('mxl')) {
            this.compressed = true;
            this.binary = true;
        }
        else if (path.endsWith('mid')) {
            this.isMidi = true;
            this.binary = true;
        }
    }
    _uncompress(result) {
        return __awaiter(this, void 0, void 0, function* () {
            const self = this;
            const zip = yield JSZip.loadAsync(result);
            // Find the real xml file in the zip (not metadata)
            const filename = Object.keys(zip.files).find((ss) => ss.indexOf('META') < 0 && ss.endsWith('xml'));
            self.value = yield zip.file(filename).async('text');
            return self.value;
        });
    }
    /**
     *
     * @returns promise resolved when the target file is loaded
     */
    loadAsync() {
        const req = new XMLHttpRequest();
        const self = this;
        const promise = new Promise((resolve) => {
            req.addEventListener('load', () => {
                const reader = new FileReader();
                reader.addEventListener('loadend', () => __awaiter(this, void 0, void 0, function* () {
                    if (self.isMidi) {
                        self.value = new Uint8Array(reader.result);
                        resolve(self.value);
                    }
                    else if (!self.compressed) {
                        self.value = reader.result;
                        resolve(self.value);
                    }
                    else {
                        self.value = yield self._uncompress(reader.result);
                        resolve(self.value);
                    }
                }));
                if (this.isMidi) {
                    reader.readAsArrayBuffer(req.response);
                }
                else if (this.binary) {
                    reader.readAsBinaryString(req.response);
                }
                else {
                    reader.readAsText(req.response);
                }
            });
        });
        req.responseType = 'blob';
        req.open('GET', this.path);
        req.send();
        return promise;
    }
}


/***/ }),

/***/ "./src/ui/help.ts":
/*!************************!*\
  !*** ./src/ui/help.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiHelp: () => (/* binding */ SuiHelp)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _i18n_language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./i18n/language */ "./src/ui/i18n/language.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.


class SuiHelp {
    static displayHelp() {
        $('body').addClass('showHelpDialog');
        if (!SuiHelp.created) {
            (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('helpDialog');
            SuiHelp.created = true;
        }
        $('.helpDialog').html('');
        $('.helpDialog').append(SuiHelp.closeButton.dom());
        SuiHelp.helpHtml.forEach((cat, catIx) => {
            const r = SuiHelp._buildElements(cat);
            $('.helpDialog').append(r.dom());
        });
        $('button.help-title').off('click').on('click', (ev) => {
            $(ev.currentTarget).closest('div.helpLine').toggleClass('showSection');
            $(ev.currentTarget).find('span.icon').toggleClass('icon-plus');
            $(ev.currentTarget).find('span.icon').toggleClass('icon-minus');
        });
        $('.helpDialog button.icon-cross').off('click').on('click', () => {
            $('body').removeClass('showHelpDialog');
            $('.workspace').css('height', '');
        });
        const wsh = window.innerHeight;
        $('.workspace').css('height', '' + wsh + 'px');
        const cb = () => { };
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('.draganime');
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.draggable)({
            parent: $('.helpDialog'),
            handle: $('.helpDialog').find('.icon-move'),
            animateDiv: '.draganime',
            cb,
            moveParent: true
        });
        SuiHelp.setCards();
    }
    static setCards() {
        $('.helpDialog').addClass('card-view');
        const lines = $('.helpDialog .helpLine');
        const numLines = $(lines).length;
        $(lines).each((ix, line) => {
            const lineno = parseInt($(line).attr('data-index'));
            if (lineno !== SuiHelp.currentCard) {
                $(line).addClass('hide');
            }
            else {
                $(line).removeClass('hide');
                const prevButton = $(line).find('button.prev-topic');
                const nextButton = $(line).find('button.next-topic');
                if (lineno === numLines - 1) {
                    $(nextButton).addClass('hide');
                }
                if (lineno === 0) {
                    $(prevButton).addClass('hide');
                }
                $(prevButton).off('click').on('click', () => {
                    SuiHelp.currentCard = (SuiHelp.currentCard + (numLines - 1)) % numLines;
                    SuiHelp.setCards();
                });
                $(nextButton).off('click').on('click', () => {
                    SuiHelp.currentCard = (SuiHelp.currentCard + 1) % numLines;
                    SuiHelp.setCards();
                });
            }
        });
    }
    static get closeButton() {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const r = b('div').append(b('span').classes('icon icon-move')).append('div').classes('help-closer').append(b('button').classes('icon-cross close'));
        return r;
    }
    static _buildElements(helps) {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const r = b('div').classes('helpLine').attr('data-index', helps.index.toString())
            .append(b('div').classes('help-category-button')
            .append(b('button')
            .append(b('span').classes('icon icon-plus')).classes('help-title')
            .append(b('span').classes('help-category-text').text(helps.title))))
            .append(b('h3').text(helps.title))
            .append(b('div').classes('help-content').html(helps.html))
            .append(b('div').classes('button-container')
            .append(b('button').classes('prev-topic')
            .append(b('span').classes('icon icon-arrow-left'))
            .append(b('span').classes('prev-topic-text').text('Previous Topic')))
            .append(b('button').classes('next-topic')
            .append(b('span').classes('next-topic-text').text('Next Topic'))
            .append(b('span').classes(' icon icon-arrow-right'))));
        return r;
    }
    static get helpHtml() {
        /* [cardKeysHtmlEn, cardNotesLetterHtmlEn, cardNotesChromaticHtmlEn, cardNotesChordsHtmlEn,
      cardNotesRestsHtmlEn, cardDurationNotesHtmlEn, cardDurationTupletsHtmlEn,
      cardSelectionsNotesHtmlEn, cardSelectionsModifiersHtmlEn, cardSelectionsNonSelectableHtmlEn, cardSelectionsSlashHtmlEn,
      cardBeamsAndStemsDirectionHtmlEn, cardBeamsAndStemsGroupingHtmlEn,
      cardMeasuresAddDeleteHtmlEn, cardVoicesCreateDeleteHtmlEn, cardVoicesHiddenNotesHtmlEn
    ]; */
        const cards = [
            { title: 'Keys', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardKeysHtml') },
            { title: 'Notes - letter notes', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardNotesLetterHtml') },
            { title: 'Notes - chromatic and octave', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardNotesChromaticHtml') },
            { title: 'Notes - chords', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardNotesChordsHtml') },
            { title: 'Notes - rests', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardNotesRestsHtml') },
            { title: 'Duration', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardDurationNotesHtml') },
            { title: 'Duration - tuplets', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardDurationTupletsHtml') },
            { title: 'Selections - notes', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardSelectionsNotesHtml') },
            { title: 'Selections - modifiers', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardSelectionsModifiersHtml') },
            { title: 'Selections - non-selectable modifiers', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardSelectionsNonSelectableHtml') },
            { title: 'Selections - slash menus', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardSelectionsSlashHtml') },
            { title: 'Beams and Stems - direction', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardBeamsAndStemsDirectionHtml') },
            { title: 'Beams and Stems - grouping', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardBeamsAndStemsGroupingHtml') },
            { title: 'Measures - insert and delete', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardMeasuresAddDeleteHtml') },
            { title: 'Staves - add and delete', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardPartAddDeleteHtml') },
            { title: 'Voices - create and delete', html: _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.getHelpFile('cardVoicesCreateDeleteHtml') },
        ];
        const blocks = [];
        cards.forEach((card, cardIx) => {
            blocks.push(Object.assign({ index: cardIx }, card));
        });
        return blocks;
    }
}
SuiHelp.helpMode = 'cards';
SuiHelp.created = false;
SuiHelp.currentCard = 0;


/***/ }),

/***/ "./src/ui/i18n/language.ts":
/*!*********************************!*\
  !*** ./src/ui/i18n/language.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoLanguage: () => (/* binding */ SmoLanguage),
/* harmony export */   SmoTranslator: () => (/* binding */ SmoTranslator)
/* harmony export */ });
/* harmony import */ var _language_ar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./language_ar */ "./src/ui/i18n/language_ar.js");
/* harmony import */ var _language_de__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./language_de */ "./src/ui/i18n/language_de.js");
/* harmony import */ var _language_en__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./language_en */ "./src/ui/i18n/language_en.js");
/* harmony import */ var _buttons_ribbon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../buttons/ribbon */ "./src/ui/buttons/ribbon.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




class SmoTranslator {
    static registerMenu(_class) {
        if (!SmoTranslator.menus[_class]) {
            SmoTranslator.menus[_class] = true;
        }
    }
    static registerDialog(_class) {
        if (!SmoTranslator.dialogs[_class]) {
            SmoTranslator.dialogs[_class] = true;
        }
    }
    static printLanguages() {
        const dialogs = [];
        const menus = [];
        SmoTranslator.allDialogs.forEach((key) => {
            SmoTranslator.registerDialog(key);
            const translatable = eval('globalThis.Smo.' + key);
            dialogs.push(translatable.printTranslate(key));
        });
        SmoTranslator.allMenus.forEach((key) => {
            SmoTranslator.registerMenu(key);
            const translatable = eval('globalThis.Smo.' + key);
            menus.push(translatable.printTranslate(key));
        });
        const buttonText = JSON.parse(JSON.stringify(_buttons_ribbon__WEBPACK_IMPORTED_MODULE_3__.RibbonButtons.translateButtons));
        console.log(JSON.stringify({ dialogs, menus, buttonText }, null, ' '));
    }
    static _updateDialog(dialogStrings, _dialogClass, dialogClass) {
        if (!dialogStrings) {
            console.log('no strings for Dialog ' + dialogClass);
            return;
        }
        _dialogClass.label = dialogStrings.label;
        const staticText = dialogStrings.staticText;
        if (staticText || _dialogClass.dialogElements.staticText) {
            const keys = Object.keys(staticText);
            keys.forEach((key) => {
                _dialogClass.dialogElements.staticText[key] = staticText[key];
            });
        }
        _dialogClass.dialogElements.label = dialogStrings.label;
        _dialogClass.dialogElements.elements.forEach((component) => {
            const componentStrings = dialogStrings.dialogElements.find((ds) => ds.id === component.smoName);
            if (componentStrings) {
                component.label = componentStrings.label;
                if (component.options) {
                    component.options.forEach((option) => {
                        const optionString = componentStrings.options.find((cs) => cs.value === option.value);
                        if (!optionString) {
                            console.log('no string for option ' + option.value + ' in component ' + component.smoName + ' in dialog ' + dialogClass);
                        }
                        else {
                            option.label = optionString.label;
                        }
                    });
                }
            }
            else {
                console.log('Untranslated component in  ' + dialogClass);
            }
        });
    }
    static _updateMenu(menuStrings, _menuClass, menuClass) {
        if (!menuStrings) {
            console.log('no strings for Menu ' + menuClass);
            return;
        }
        const defaults = _menuClass.defaults;
        defaults.menuItems.forEach((menuItem) => {
            const val = menuItem.value;
            const nvPair = menuStrings.menuItems.find((ff) => ff.value === val);
            if (!nvPair) {
                console.log('no xlate for ' + val + ' in menu ' + menuClass);
            }
            else {
                menuItem.text = nvPair.text;
                console.log('setting menu item value ' + val + ' to ' + nvPair.text);
            }
        });
    }
    static setLanguage(language) {
        if (!SmoLanguage[language]) {
            return; // no xlate exists
        }
        const trans = SmoLanguage[language];
        // Set the text in all the menus
        SmoTranslator.allMenus.forEach((menuClass) => {
            const _class = eval('globalThis.Smo.' + menuClass);
            const menuStrings = trans.strings.menus.find((mm) => mm.ctor === menuClass);
            if (menuStrings) {
                SmoTranslator._updateMenu(menuStrings, _class, menuClass);
                // Set text in ribbon buttons that invoke menus
                const menuButton = $('.ribbonButtonContainer button.' + menuClass).find('.left-text .text-span');
                if (menuButton.length && menuStrings) {
                    $(menuButton).text(menuStrings.label);
                }
            }
        });
        SmoTranslator.allDialogs.forEach((dialogClass) => {
            const _class = eval('globalThis.Smo.' + dialogClass);
            const dialogStrings = trans.strings.dialogs.find((mm) => mm.ctor === dialogClass);
            if (typeof (_class) === 'undefined') {
                console.log('no eval for class ' + dialogClass);
                return;
            }
            if (!dialogStrings) {
                return;
            }
            // Set text in ribbon buttons that invoke menus
            const dialogButton = $('.ribbonButtonContainer button.' + dialogClass).find('.left-text .text-span');
            if (dialogButton.length && dialogStrings) {
                $(dialogButton).text(dialogStrings.label);
            }
            SmoTranslator._updateDialog(dialogStrings, _class, dialogClass);
        });
        // Translate the buttons on the ribbon
        const langButtons = trans.strings.buttonText;
        if (langButtons) {
            _buttons_ribbon__WEBPACK_IMPORTED_MODULE_3__.RibbonButtons.translateButtons.forEach((button) => {
                const langButton = langButtons.find((lb) => lb.buttonId === button.buttonId);
                if (langButton) {
                    const buttonDom = $('.ribbonButtonContainer #' + button.buttonId);
                    if (buttonDom.length) {
                        $(buttonDom).find('.left-text').text(langButton.buttonText);
                    }
                }
            });
        }
        // Handle rtl languages
        $('body').find('.language-dir').each((ix, dd) => { $(dd).attr('dir', trans.dir); });
    }
    static get allMenus() {
        return [
            'SuiDynamicsMenu',
            'SuiFileMenu',
            'SuiKeySignatureMenu',
            'SuiLanguageMenu',
            'SuiMeasureMenu',
            'SuiPartMenu',
            'SuiScoreMenu',
            'SuiStaffModifierMenu',
            'SuiTimeSignatureMenu',
        ];
    }
    static get allDialogs() {
        return [
            // file dialogs
            'SuiChordChangeDialog',
            'SuiDynamicModifierDialog',
            'SuiGlobalLayoutDialog',
            'SuiHairpinAttributesDialog',
            'SuiInsertMeasures',
            'SuiInstrumentDialog',
            'SuiLoadFileDialog',
            'SuiLoadMxmlDialog',
            'SuiLyricDialog',
            'SuiMeasureDialog',
            'SuiPageLayoutDialog',
            'SuiPartInfoDialog',
            'SuiPrintFileDialog',
            'SuiSaveFileDialog',
            'SuiSaveMidiDialog',
            'SuiSaveXmlDialog',
            'SuiScoreFontDialog',
            'SuiScorePreferencesDialog',
            'SuiScoreIdentificationDialog',
            'SuiScoreViewDialog',
            'SuiSlurAttributesDialog',
            'SuiStaffGroupDialog',
            'SuiTempoDialog',
            'SuiTextBlockDialog',
            'SuiTieAttributesDialog',
            'SuiTimeSignatureDialog',
            'SuiVoltaAttributeDialog'
        ];
    }
}
SmoTranslator.dialogs = [];
SmoTranslator.menus = [];
class SmoLanguage {
    static getHelpFile(category) {
        // TODO: how to express language if it is not part of the config?
        return eval('globalThis.Smo.' + category + 'En');
    }
    static get en() {
        const strings = JSON.parse(_language_en__WEBPACK_IMPORTED_MODULE_2__.smoLanguageStringEn);
        const rv = { dir: 'ltr', strings, helpHtml: {} };
        return rv;
    }
    static get ar() {
        const strings = JSON.parse(_language_ar__WEBPACK_IMPORTED_MODULE_0__.smoLanguageStringAr);
        const rv = { dir: 'rtl', strings, helpHtml: {} };
        return rv;
    }
    static get de() {
        const strings = JSON.parse(_language_de__WEBPACK_IMPORTED_MODULE_1__.smoLanguageStringDe);
        const rv = { dir: 'ltr', strings, helpHtml: {} };
        return rv;
    }
}


/***/ }),

/***/ "./src/ui/i18n/language_ar.js":
/*!************************************!*\
  !*** ./src/ui/i18n/language_ar.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   enterDurationsHtmlar: () => (/* binding */ enterDurationsHtmlar),
/* harmony export */   enterPitchesHtmlar: () => (/* binding */ enterPitchesHtmlar),
/* harmony export */   quickStartHtmlar: () => (/* binding */ quickStartHtmlar),
/* harmony export */   selectionHtmlar: () => (/* binding */ selectionHtmlar),
/* harmony export */   smoLanguageStringAr: () => (/* binding */ smoLanguageStringAr)
/* harmony export */ });
const smoLanguageStringAr = `{
    "dialogs": [
     {
      "ctor": "SuiLoadFileDialog",
      "label": "Load File",
      "dialogElements": [
       {}
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveFileDialog",
      "label": "Save Score",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveXmlDialog",
      "label": "Save Score",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiPrintFileDialog",
      "label": "Print Complete",
      "dialogElements": [],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveMidiDialog",
      "label": "Save Score as Midi",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveActionsDialog",
      "label": "Save Score",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLoadMxmlDialog",
      "label": "Load File",
      "dialogElements": [
       {},
       {
        "staticText": {
         "label": "Load File"
        }
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLoadActionsDialog",
      "label": "Load Action File",
      "dialogElements": [
       {},
       {
        "staticText": {
         "label": "Load Action File"
        }
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiMeasureDialog",
      "label": "Measure Properties",
      "dialogElements": [
       {
        "label": "Pickup",
        "id": "pickup"
       },
       {
        "label": "Pad Left (px)",
        "id": "padLeft"
       },
       {
        "label": "Stretch Contents",
        "id": "customStretch"
       },
       {
        "label": "Proportionalality",
        "id": "customProportion"
       },
       {
        "label": "Pad all measures in system",
        "id": "padAllInSystem"
       },
       {
        "label": "Justify Columns",
        "id": "autoJustify"
       },
       {
        "label": "Text Position",
        "id": "measureTextPosition",
        "options": [
         {
          "value": 2,
          "label": "Left"
         },
         {
          "value": 3,
          "label": "Right"
         },
         {
          "value": 0,
          "label": "Above"
         },
         {
          "value": 1,
          "label": "Below"
         }
        ]
       },
       {
        "label": "System break before this measure",
        "id": "systemBreak"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiTempoDialog",
      "label": "Tempo Properties",
      "dialogElements": [
       {
        "label": "وضع الإيقاع",
        "id": "tempoMode",
        "options": [
         {
          "value": "duration",
          "label": "Duration (Beats/Minute)"
         },
         {
          "value": "text",
          "label": "Tempo Text"
         },
         {
          "value": "custom",
          "label": "Specify text and duration"
         }
        ]
       },
       {
        "label": "Custom Text",
        "id": "customText"
       },
       {
        "label": "Notes/Minute",
        "id": "bpm"
       },
       {
        "label": "وحدة لكل ضربه",
        "id": "beatDuration",
        "options": [
         {
          "value": 4096,
          "label": "Quarter Note"
         },
         {
          "value": 2048,
          "label": "1/8 note"
         },
         {
          "value": 6144,
          "label": "Dotted 1/4 note"
         },
         {
          "value": 8192,
          "label": "1/2 note"
         }
        ]
       },
       {
        "label": "Tempo Text",
        "id": "tempoText",
        "options": [
         {
          "value": "Larghissimo",
          "label": "Larghissimo"
         },
         {
          "value": "Grave",
          "label": "Grave"
         },
         {
          "value": "Lento",
          "label": "Lento"
         },
         {
          "value": "Largo",
          "label": "Largo"
         },
         {
          "value": "Larghetto",
          "label": "Larghetto"
         },
         {
          "value": "Adagio",
          "label": "Adagio"
         },
         {
          "value": "Adagietto",
          "label": "Adagietto"
         },
         {
          "value": "Andante moderato",
          "label": "Andante moderato"
         },
         {
          "value": "Andante",
          "label": "Andante"
         },
         {
          "value": "Andantino",
          "label": "Andantino"
         },
         {
          "value": "Moderato",
          "label": "Moderato"
         },
         {
          "value": "Allegretto",
          "label": "Allegretto"
         },
         {
          "value": "Allegro",
          "label": "Allegro"
         },
         {
          "value": "Vivace",
          "label": "Vivace"
         },
         {
          "value": "Presto",
          "label": "Presto"
         },
         {
          "value": "Prestissimo",
          "label": "Prestissimo"
         }
        ]
       },
       {
        "label": "Apply to all future measures?",
        "id": "applyToAll"
       },
       {
        "label": "Display Tempo",
        "id": "display"
       },
       {
        "label": "Y Offset",
        "id": "yOffset"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiInstrumentDialog",
      "label": "Instrument Properties",
      "dialogElements": [
       {
        "label": "Transpose Index (1/2 steps)",
        "id": "transposeIndex"
       },
       {
        "label": "Apply To",
        "id": "applyTo",
        "options": [
         {
          "value": 0,
          "label": "Score"
         },
         {
          "value": 1,
          "label": "Selected Measures"
         },
         {
          "value": 3,
          "label": "Remaining Measures"
         }
        ]
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiInsertMeasures",
      "label": "Insert Measures",
      "dialogElements": [
       {
        "label": "Measures to Insert",
        "id": "measureCount"
       },
       {
        "label": "Append to Selection",
        "id": "append"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiTimeSignatureDialog",
      "label": "Custom Time Signature",
      "dialogElements": [
       {
        "label": "Beats/Measure",
        "id": "numerator"
       },
       {
        "label": "Beat Value",
        "id": "denominator",
        "options": [
         {
          "value": 8,
          "label": "8"
         },
         {
          "value": 4,
          "label": "4"
         },
         {
          "value": 2,
          "label": "2"
         }
        ]
       },
       {
        "label": "Display",
        "id": "display"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiScoreViewDialog",
      "label": "Score View",
      "dialogElements": [
       {
        "label": "Show staff",
        "id": "scoreView"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiScoreIdentificationDialog",
      "label": "Score Preferences",
      "dialogElements": [
       {
        "label": "Title",
        "id": "title"
       },
       {
        "label": "Sub Title",
        "id": "subTitle"
       },
       {
        "label": "Composer",
        "id": "composer"
       },
       {
        "label": "Copyright",
        "id": "copyright"
       }
      ],
      "staticText": {
       "titleText": "Title",
       "subTitleText": "Sub-title",
       "copyrightText": "Copyright",
       "composerText": "Composer",
       "show": "Show"
      }
     },
     {
      "ctor": "SuiGlobalLayoutDialog",
      "label": "Global Settings",
      "dialogElements": [
       {
        "label": "Score Name",
        "id": "scoreName"
       },
       {
        "label": "Play Selections",
        "id": "autoPlay"
       },
       {
        "label": "Auto-Advance Cursor",
        "id": "autoAdvance"
       },
       {
        "label": "Note Spacing",
        "id": "noteSpacing"
       },
       {
        "label": "Page Size",
        "id": "pageSize",
        "options": [
         {
          "value": "letter",
          "label": "Letter (Portrait)"
         },
         {
          "value": "letterLandscape",
          "label": "Letter (Landscape)"
         },
         {
          "value": "tabloid",
          "label": "Tabloid (11x17)"
         },
         {
          "value": "A4",
          "label": "A4"
         },
         {
          "value": "custom",
          "label": "Custom"
         }
        ]
       },
       {
        "label": "Page Width (px)",
        "id": "pageWidth"
       },
       {
        "label": "Page Height (px)",
        "id": "pageHeight"
       },
       {
        "label": "% Zoom",
        "id": "zoomScale"
       },
       {
        "label": "% Note size",
        "id": "svgScale"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiScoreFontDialog",
      "label": "Score Fonts",
      "dialogElements": [
       {
        "label": "Engraving Font",
        "id": "engravingFont",
        "options": [
         {
          "value": "Bravura",
          "label": "Bravura"
         },
         {
          "value": "Gonville",
          "label": "Gonville"
         },
         {
          "value": "Petaluma",
          "label": "Petaluma"
         },
         {
          "value": "Leland",
          "label": "Leland"
         }
        ]
       },
       {
        "label": "Chord Font",
        "id": "chordFont"
       },
       {
        "label": "Lyric Font",
        "id": "lyricFont"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLayoutDialog",
      "label": "Page Layouts",
      "dialogElements": [
       {
        "label": "Apply to Page",
        "id": "applyToPage",
        "options": [
         {
          "value": -1,
          "label": "All"
         },
         {
          "value": -2,
          "label": "All Remaining"
         },
         {
          "value": 1,
          "label": "Page 1"
         }
        ]
       },
       {
        "label": "Left Margin (px)",
        "id": "leftMargin"
       },
       {
        "label": "Right Margin (px)",
        "id": "rightMargin"
       },
       {
        "label": "Top Margin (px)",
        "id": "topMargin"
       },
       {
        "label": "Bottom Margin (px)",
        "id": "bottomMargin"
       },
       {
        "label": "Inter-System Margin",
        "id": "interGap"
       },
       {
        "label": "Intra-System Margin",
        "id": "intraGap"
       },
       {
        "staticText": {
         "label": "Page Layouts"
        }
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSlurAttributesDialog",
      "label": "Slur Properties",
      "dialogElements": [
       {
        "label": "Spacing",
        "id": "spacing"
       },
       {
        "label": "Thickness",
        "id": "thickness"
       },
       {
        "label": "X Offset",
        "id": "xOffset"
       },
       {
        "label": "Y Offset",
        "id": "yOffset"
       },
       {
        "label": "Start Position",
        "id": "position",
        "options": [
         {
          "value": 1,
          "label": "Head"
         },
         {
          "value": 2,
          "label": "Top"
         }
        ]
       },
       {
        "label": "End Position",
        "id": "position_end",
        "options": [
         {
          "value": 1,
          "label": "Head"
         },
         {
          "value": 2,
          "label": "Top"
         }
        ]
       },
       {
        "label": "Invert",
        "id": "invert"
       },
       {
        "label": "Control Point 1 X",
        "id": "cp1x"
       },
       {
        "label": "Control Point 1 Y",
        "id": "cp1y"
       },
       {
        "label": "Control Point 2 X",
        "id": "cp2x"
       },
       {
        "label": "Control Point 2 Y",
        "id": "cp2y"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiTieAttributesDialog",
      "label": "Tie Properties",
      "dialogElements": [
       {
        "label": "Lines",
        "id": "lines"
       }
      ],
      "staticText": {
       "label": "Tie Properties",
       "fromNote": "From Note",
       "toNote": "To Note"
      }
     },
     {
      "ctor": "SuiVoltaAttributeDialog",
      "label": "Volta Properties",
      "dialogElements": [
       {
        "label": "number",
        "id": "number"
       },
       {
        "label": "X1 Offset",
        "id": "xOffsetStart"
       },
       {
        "label": "X2 Offset",
        "id": "xOffsetEnd"
       },
       {
        "label": "Y Offset",
        "id": "yOffset"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiHairpinAttributesDialog",
      "label": "Hairpin Properties",
      "dialogElements": [
       {
        "label": "Height",
        "id": "height"
       },
       {
        "label": "Y Shift",
        "id": "yOffset"
       },
       {
        "label": "Right Shift",
        "id": "xOffsetRight"
       },
       {
        "label": "Left Shift",
        "id": "xOffsetLeft"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiStaffGroupDialog",
      "label": "Staff Group",
      "dialogElements": [
       {
        "label": "Staves in Group",
        "id": "staffGroups"
       },
       {
        "label": "Left Connector",
        "id": "leftConnector",
        "options": [
         {
          "value": 1,
          "label": "Bracket"
         },
         {
          "value": 0,
          "label": "Brace"
         },
         {
          "value": 2,
          "label": "Single"
         },
         {
          "value": 3,
          "label": "Double"
         }
        ]
       }
      ],
      "staticText": {
       "includeStaff": "Include Staff"
      }
     },
     {
      "ctor": "SuiDynamicModifierDialog",
      "label": "Dynamics Properties",
      "dialogElements": [
       {
        "label": "Y Line",
        "id": "yOffsetLine"
       },
       {
        "label": "Y Offset Px",
        "id": "yOffsetPixels"
       },
       {
        "label": "X Offset",
        "id": "xOffset"
       },
       {
        "label": "Text",
        "id": "text",
        "options": [
         {
          "value": "p",
          "label": "Piano"
         },
         {
          "value": "pp",
          "label": "Pianissimo"
         },
         {
          "value": "mp",
          "label": "Mezzo-Piano"
         },
         {
          "value": "mf",
          "label": "Mezzo-Forte"
         },
         {
          "value": "f",
          "label": "Forte"
         },
         {
          "value": "ff",
          "label": "Fortissimo"
         },
         {
          "value": "sfz",
          "label": "Sforzando"
         }
        ]
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLyricDialog",
      "label": "Lyric Editor",
      "dialogElements": [
       {
        "label": "Verse",
        "id": "verse",
        "options": [
         {
          "value": 0,
          "label": "1"
         },
         {
          "value": 1,
          "label": "2"
         },
         {
          "value": 2,
          "label": "3"
         },
         {
          "value": 3,
          "label": "4"
         }
        ]
       },
       {
        "label": "Y Adjustment (Px)",
        "id": "translateY"
       },
       {
        "label": "Font",
        "id": "font"
       },
       {
        "label": "Edit Lyrics",
        "id": "lyricEditor",
        "options": []
       }
      ],
      "staticText": {
       "doneEditing": "Done Editing Lyrics",
       "undo": "Undo Lyrics",
       "label": "Lyric Editor"
      }
     },
     {
      "ctor": "SuiChordChangeDialog",
      "label": "Edit Chord Symbol",
      "dialogElements": [
       {
        "label": "Ordinality",
        "id": "verse",
        "options": [
         {
          "value": 0,
          "label": "1"
         },
         {
          "value": 1,
          "label": "2"
         },
         {
          "value": 2,
          "label": "3"
         }
        ]
       },
       {
        "label": "Y Adjustment (Px)",
        "id": "translateY"
       },
       {
        "label": "Edit Text",
        "id": "chordEditor",
        "options": []
       },
       {
        "label": "Chord Symbol",
        "id": "chordSymbol",
        "options": [
         {
          "value": "csymDiminished",
          "label": "Dim"
         },
         {
          "value": "csymHalfDiminished",
          "label": "Half dim"
         },
         {
          "value": "csymDiagonalArrangementSlash",
          "label": "Slash"
         },
         {
          "value": "csymMajorSeventh",
          "label": "Maj7"
         }
        ]
       },
       {
        "label": "Text Position",
        "id": "textPosition",
        "options": [
         {
          "value": 1,
          "label": "Superscript"
         },
         {
          "value": 2,
          "label": "Subscript"
         },
         {
          "value": 0,
          "label": "Normal"
         }
        ]
       },
       {
        "label": "Font",
        "id": "font"
       },
       {
        "label": "Adjust Note Width",
        "id": "adjustWidth",
        "options": []
       }
      ],
      "staticText": {
       "label": "Edit Chord Symbol",
       "undo": "Undo Chord Symbols",
       "doneEditing": "Done Editing Chord Symbols"
      }
     },
     {
      "ctor": "SuiTextBlockDialog",
      "label": "Text Properties",
      "dialogElements": [
       {
        "label": "Edit Text",
        "id": "textEditor",
        "options": []
       },
       {
        "label": "Insert Special",
        "id": "insertCode",
        "options": [
         {
          "value": "@@@",
          "label": "Pages"
         },
         {
          "value": "###",
          "label": "Page Number"
         }
        ]
       },
       {
        "label": "Move Text",
        "id": "textDragger",
        "options": []
       },
       {
        "label": "X Position (Px)",
        "id": "x"
       },
       {
        "label": "Y Position (Px)",
        "id": "y"
       },
       {
        "label": "Font Information",
        "id": "font"
       },
       {
        "label": "Text Block Properties",
        "id": "textBlock"
       },
       {
        "label": "Page Behavior",
        "id": "pagination",
        "options": [
         {
          "value": 4,
          "label": "Once"
         },
         {
          "value": 1,
          "label": "Every"
         },
         {
          "label": "Even"
         },
         {
          "value": 3,
          "label": "Odd"
         },
         {
          "value": 5,
          "label": "Subsequent"
         }
        ]
       },
       {
        "label": "Attach to Selection",
        "id": "attachToSelector"
       }
      ],
      "staticText": {
       "label": "Text Properties",
       "editorLabel": "Done Editing Text",
       "draggerLabel": "Done Dragging Text"
      }
     }
    ],
    "menus": [
     {
      "ctor": "SuiDynamicsMenu",
      "label": "Dynamics",
      "menuItems": [
       {
        "icon": "pianissimo",
        "text": "Pianissimo",
        "value": "pp"
       },
       {
        "icon": "piano",
        "text": "Piano",
        "value": "p"
       },
       {
        "icon": "mezzopiano",
        "text": "Mezzo-piano",
        "value": "mp"
       },
       {
        "icon": "mezzoforte",
        "text": "Mezzo-forte",
        "value": "mf"
       },
       {
        "icon": "forte",
        "text": "Forte",
        "value": "f"
       },
       {
        "icon": "fortissimo",
        "text": "Fortissimo",
        "value": "ff"
       },
       {
        "icon": "sfz",
        "text": "sfortzando",
        "value": "sfz"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiFileMenu",
      "label": "ملف",
      "menuItems": [
       {
        "icon": "folder-new",
        "text": "جديدe",
        "value": "newFile"
       },
       {
        "icon": "folder-open",
        "text": "فتح",
        "value": "openFile"
       },
       {
        "icon": "",
        "text": "Quick Save",
        "value": "quickSave"
       },
       {
        "icon": "folder-save",
        "text": "حفظ",
        "value": "saveFile"
       },
       {
        "icon": "",
        "text": "طباعه",
        "value": "printScore"
       },
       {
        "icon": "",
        "text": "Import MusicXML",
        "value": "importMxml"
       },
       {
        "icon": "",
        "text": "Export MusicXML",
        "value": "exportXml"
       },
       {
        "icon": "",
        "text": "Export Midi",
        "value": "exportMidi"
       },
       {
        "icon": "folder-save",
        "text": "Save Actions",
        "value": "saveActions"
       },
       {
        "icon": "icon-play3",
        "text": "Play Actions",
        "value": "playActions"
       },
       {
        "icon": "",
        "text": "إلغاء",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiKeySignatureMenu",
      "label": "الدليل",
      "menuItems": [
       {
        "icon": "key-sig-c",
        "text": "C Major",
        "value": "KeyOfC"
       },
       {
        "icon": "key-sig-f",
        "text": "F Major",
        "value": "KeyOfF"
       },
       {
        "icon": "key-sig-g",
        "text": "G Major",
        "value": "KeyOfG"
       },
       {
        "icon": "key-sig-bb",
        "text": "Bb Major",
        "value": "KeyOfBb"
       },
       {
        "icon": "key-sig-d",
        "text": "D Major",
        "value": "KeyOfD"
       },
       {
        "icon": "key-sig-eb",
        "text": "Eb Major",
        "value": "KeyOfEb"
       },
       {
        "icon": "key-sig-a",
        "text": "A Major",
        "value": "KeyOfA"
       },
       {
        "icon": "key-sig-ab",
        "text": "Ab Major",
        "value": "KeyOfAb"
       },
       {
        "icon": "key-sig-e",
        "text": "E Major",
        "value": "KeyOfE"
       },
       {
        "icon": "key-sig-bd",
        "text": "Db Major",
        "value": "KeyOfDb"
       },
       {
        "icon": "key-sig-b",
        "text": "B Major",
        "value": "KeyOfB"
       },
       {
        "icon": "key-sig-fs",
        "text": "F# Major",
        "value": "KeyOfF#"
       },
       {
        "icon": "key-sig-cs",
        "text": "C# Major",
        "value": "KeyOfC#"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiMeasureMenu",
      "label": "Measure",
      "menuItems": [
       {
        "icon": "",
        "text": "Add Measures",
        "value": "addMenuCmd"
       },
       {
        "icon": "icon-cross",
        "text": "Delete Selected Measures",
        "value": "deleteSelected"
       },
       {
        "icon": "",
        "text": "Format Measure",
        "value": "formatMeasureDialog"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiTimeSignatureMenu",
      "label": "وزن الإيقاع",
      "menuItems": [
       {
        "icon": "sixeight",
        "text": "6/8",
        "value": "6/8"
       },
       {
        "icon": "fourfour",
        "text": "4/4",
        "value": "4/4"
       },
       {
        "icon": "threefour",
        "text": "3/4",
        "value": "3/4"
       },
       {
        "icon": "twofour",
        "text": "2/4",
        "value": "2/4"
       },
       {
        "icon": "twelveeight",
        "text": "12/8",
        "value": "12/8"
       },
       {
        "icon": "seveneight",
        "text": "7/8",
        "value": "7/8"
       },
       {
        "icon": "fiveeight",
        "text": "5/8",
        "value": "5/8"
       },
       {
        "icon": "",
        "text": "Other",
        "value": "TimeSigOther"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiStaffModifierMenu",
      "label": "خطوط",
      "menuItems": [
       {
        "icon": "cresc",
        "text": "تصاعد",
        "value": "crescendo"
       },
       {
        "icon": "decresc",
        "text": "تهابط",
        "value": "decrescendo"
       },
       {
        "icon": "slur",
        "text": "طمس / تعادل",
        "value": "slur"
       },
       {
        "icon": "slur",
        "text": "Tie",
        "value": "tie"
       },
       {
        "icon": "ending",
        "text": "النهاية التاسعة",
        "value": "ending"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiLanguageMenu",
      "label": "Language",
      "menuItems": [
       {
        "icon": "",
        "text": "English",
        "value": "en"
       },
       {
        "icon": "",
        "text": "Deutsch",
        "value": "de"
       },
       {
        "icon": "",
        "text": "اَلْعَرَبِيَّةُ",
        "value": "ar"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiLibraryMenu",
      "label": "Score",
      "menuItems": [
       {
        "icon": "",
        "text": "Bach Invention",
        "value": "bach"
       },
       {
        "icon": "",
        "text": "Postillion-Lied",
        "value": "postillion"
       },
       {
        "icon": "",
        "text": "Jesu Bambino",
        "value": "bambino"
       },
       {
        "icon": "",
        "text": "Handel Messiah 1-1",
        "value": "handel"
       },
       {
        "icon": "",
        "text": "Precious Lord",
        "value": "preciousLord"
       },
       {
        "icon": "",
        "text": "In Its Delightful Shade",
        "value": "shade"
       },
       {
        "icon": "",
        "text": "Yama",
        "value": "yamaJson"
       },
       {
        "icon": "",
        "text": "Dichterliebe (xml)",
        "value": "dichterliebe"
       },
       {
        "icon": "",
        "text": "Beethoven - An die ferne Gliebte (xml)",
        "value": "beethoven"
       },
       {
        "icon": "",
        "text": "Mozart - An Chloe (xml)",
        "value": "mozart"
       },
       {
        "icon": "",
        "text": "Joplin - The Entertainer (xml)",
        "value": "joplin"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiScoreMenu",
      "label": "Score Settings",
      "menuItems": [
       {
        "icon": "",
        "text": "Layout",
        "value": "layout"
       },
       {
        "icon": "",
        "text": "Fonts",
        "value": "fonts"
       },
       {
        "icon": "",
        "text": "View",
        "value": "view"
       },
       {
        "icon": "",
        "text": "Score Info",
        "value": "identification"
       },
       {
        "icon": "",
        "text": "Global Settings",
        "value": "preferences"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     }
    ],
    "buttonText": [
     {
      "buttonId": "helpDialog",
      "buttonText": "Help"
     },
     {
      "buttonId": "languageMenu",
      "buttonText": "Language"
     },
     {
      "buttonId": "fileMenu",
      "buttonText": "ملف"
     },
     {
      "buttonId": "libraryMenu",
      "buttonText": "Library"
     },
     {
      "buttonId": "addStaffMenu",
      "buttonText": "Staves"
     },
     {
      "buttonId": "measureModal",
      "buttonText": "Measure"
     },
     {
      "buttonId": "tempoModal",
      "buttonText": "Tempo"
     },
     {
      "buttonId": "timeSignatureMenu",
      "buttonText": "Time Signature"
     },
     {
      "buttonId": "keyMenu",
      "buttonText": "Key"
     },
     {
      "buttonId": "staffModifierMenu",
      "buttonText": "Lines"
     },
     {
      "buttonId": "instrumentModal",
      "buttonText": "Instrument"
     },
     {
      "buttonId": "pianoModal",
      "buttonText": "Piano"
     },
     {
      "buttonId": "layoutMenu",
      "buttonText": "Score"
     },
     {
      "buttonId": "UpOctaveButton",
      "buttonText": "8va"
     },
     {
      "buttonId": "DownOctaveButton",
      "buttonText": "8vb"
     },
     {
      "buttonId": "moreNavButtons",
      "buttonText": "..."
     },
     {
      "buttonId": "dcAlCoda",
      "buttonText": "DC Al Coda"
     },
     {
      "buttonId": "dsAlCoda",
      "buttonText": "DS Al Coda"
     },
     {
      "buttonId": "dcAlFine",
      "buttonText": "DC Al Fine"
     },
     {
      "buttonId": "dsAlFine",
      "buttonText": "DS Al Fine"
     },
     {
      "buttonId": "toCoda",
      "buttonText": "to "
     },
     {
      "buttonId": "fine",
      "buttonText": "Fine"
     },
     {
      "buttonId": "moreStaffButtons",
      "buttonText": "..."
     }
    ]
   }`;
const quickStartHtmlar = `(Arabic)
    <h3 id="quick-start-guide">Quick start guide</h3>
<p>If you don&#39;t like to read instructions, this cook&#39;s tour of Smoosic was made for you.</p>
<ul>
<li><p>One of buttons on the left is called &#39;File&#39;.  Click on it. The menu items before &#39;cancel&#39; are pre-canned projects that you can use as a template to get you started.</p>
</li>
<li><p>The cursor keys will navigate you to the different notes.</p>
</li>
<li><p>Letters a-g on the computer keyboard change the note to those pitches</p>
</li>
<li><p>&#39;Insert&#39; adds a new, blank measure.</p>
</li>
<li><p>The ribbon of thick blue buttons on the top expand to button groups, that contain most of the functionality of Smoosic.  </p>
</li>
<li><p>The buttons on the left bring up menus or dialogs that do basically what the buttons say.</p>
</li>
<li><p>There are a few &#39;instant gratification&#39; buttons for playing the music, refreshing the screen or changing the zoom level on the left part of the ribbon.</p>
</li>
<li><p>The piano tool is an alternate way of entering music, or can be dismissed by the close button in the lower left.</p>
</li>
</ul>
<p><img src="https://imgur.com/nP16PMI.gif" alt="" width="640" height="480"></p>
`;
const selectionHtmlar = `(Arabic)
<h3 id="selecting-things">Selecting things</h3>
<p>Almost all operations in Smoosic act on the selected music.  You can select notes in different ways:</p>
<ol>
<li>with the computer mouse</li>
<li>with the keyboard&#39;s navigation keys</li>
<li>with the navigation keys on the ribbon</li>
<li>with the piano tool, to some extent.</li>
</ol>
<p><img src="https://imgur.com/q1qK3Pn.gif" alt=""></p>
<p>You can select multiple things with the keyboard navigation keys, by selecting &#39;shift-arrow&#39;, just like many applications.  There is a similar control for selection in the navigation ribbon.  Some operations, like changing pitch for instance, act on all the selected notes.</p>
<p>Sometimes a selection of one line affects all the measures in that column (or all the measures of the system, if you like).  When you change the key, for instance, the selection determines where the key change starts.  If you have multiple measures selected, it applies to those measures, and then changes back to whatever it was before.</p>
`;
const enterDurationsHtmlar = `(Arabic)
<p>Note duration in Smoosic is done by changing the duration of an existing note.  Usually, doubling the duration or cutting it in two, or adding a dot - duration to a note.  You can also create tuplets for uneven sets of notes (3, 5, or 7).</p>
<p>There are actually 3 ways to do many duration operations - using the piano tool, using the computer keyboard, or using the button ribbon.  Like with many things, you should find entering duration using the keyboard fastest, once you have some experience with Smoosic.  But the ribbon or the </p>
<h2 id="changing-note-length-with-the-keyboard">Changing note length with the keyboard</h2>
<p>You can change the length of notes using the &#39;,&#39; and &#39;.&#39; (comma and period) keys, which halve and double the note lengths, respectively.  You can add a dot to the length of the note (multiplying length by 3/2 for the first dot, and 3/4 for the second dot, if you like to think of it that way) or remove a dot, using the &#39;&gt;&#39; and &#39;&lt;&#39;.  The mnemonic device for these is &#39;&gt;&#39; makes note duration greater.  &#39;&lt;&#39; makes note duration...less.  (On most QWERTY keyboards, comma shifted is &#39;&lt;&#39; and period shifted is &#39;&gt;&#39;).</p>
<p><img src="https://imgur.com/5ZWq2Xe.gif" alt=""></p>
<p>Note how the selection is preserved as the notes get shorter.  When you change something, Smoosic will try to keep the selection as close as possible to what you had.  You can use the cursor navigation keys to move to a specific selected note.</p>
<p><img src="https://imgur.com/woMw4RH.gif" alt=""></p>
<p>When you increase the length of a note, Smoosic always &#39;borrows&#39; from the next note in the measure that is eligible.  So when you double the length of the 8th note, it combines the 16th, and 2 32nd notes, and collapses them into a single quarter.  If Smoosic can&#39;t honor the request, it does nothing.  For instance, it can&#39;t remove the dot from a note with no dot, and it can&#39;t extend beyond the length of the measure.</p>
<p>You can create tuplets from the keyboard by typing Ctrl-3, Ctrl-5 or Ctrl-7 for triplets, quintuplets, and septuplets, respectively.  Individual notes in a tuplet can be doubled and halved with the duration keys &#39;-&#39; (minus) and &#39;=&#39; (equals), just like non-tuplets.  You &#39;untupletify&#39; a tuplet by Ctrl-0.</p>
<p><img src="https://imgur.com/uBpQwXD.gif" alt=""></p>
<h2 id="changing-note-length-with-piano-widget">Changing note length with piano widget</h2>
<p>The piano widget is shown when the application starts, and can be restored from the left menu &#39;Piano&#39; button when closed.</p>
<p>You can double or halve note duration, or add dot duration, to a note using the piano tool. </p>
<p><img src="https://imgur.com/Rw4yDxP.gif" alt=""></p>
<h2 id="changing-note-length-from-the-button-ribbon">Changing note length from the button ribbon</h2>
<p>All the duration commands can be accomplished from the ribbon buttons.  </p>
<p><img src="https://imgur.com/n9bmamg.gif" alt=""></p>
<p>Note that the equivalent keyboard commands are also indicated on the right of each button, when it&#39;s available.  (there are only so many keys, so there are some ribbon buttons with no key shortcut). </p>
`;
const enterPitchesHtmlar = `(Arabic)
<p>There are a few ways to enter notes in Smoosic.  You can click on the piano widget keys, or you can enter notes directly from the keyboard.</p>
<h2 id="your-first-smoosical-notes">Your first Smoosical notes</h2>
<h3 id="notes-from-the-keyboard">Notes from the keyboard</h3>
<p>The keys a-g on the computer keyboard will enter a corresponding note, A-G, on the staff (Most key commands in Smoosic have a mnemonic device).  The default behavior is for the cursor to advance when a note is entered in this way.  (Future behavior, auto-advance can be overridden). You navigate to the notes using the keyboard navigation arrows.</p>
<p><img src="https://imgur.com/lxR0NI7.gif" alt=""></p>
<p>You change the octave from the keyboard using the &#39;_&#39; and &#39;+&#39; (underscore, aka shift-minus, and plus), and change notes chromatically using &#39;-&#39; and &#39;=&#39; key.  The mnemonic device for this is &#39;plus and minus&#39; for raising and lowering pitches.  You can change the enharmonic spelling of the note using the &#39;Shift-E&#39; (mnemonic: E for enharmonic - get it?).  And Shift-F gives you a courtesy, or cautionary, accidental (mnemonic - F comes after E).</p>
<p><img src="https://imgur.com/1tC94sV.gif" alt=""></p>
<p>You can create chords and intervals using the number keys along the top of the keyboard.  The &#39;3&#39; key makes a third, the &#39;4&#39; key a fourth, and so on.  Shift+number gives you the interval down.</p>
<p><img src="https://imgur.com/IwoeWi3.gif" alt=""></p>
<p>Note that the interval starts from the highest note in the chord, for intervals going up, and the lowest note in the chord, for intervals going down.  You can select individual pitches in the chord using &#39;Shift-Up Arrow&#39; as shown.  This is similar to how modifiers like dynamics are selected.  Once you have the pitch selected, you can change it using the up-down commands shows above, or change the enharmonic spelling.</p>
<p>There is currently no way to remove a single pitch from the chord.  If you want to collapse the chord, just type a letter a-g on the keyboard, and it will be replaced with a single note.</p>
<h3 id="notes-from-the-piano-tool">Notes from the piano tool</h3>
<p>You can also add notes to your score with the piano tool, by clicking on the corresponding notes.</p>
<p><img src="https://imgur.com/MOMlIg3.gif" alt=""></p>
<p>Clicking on the piano gives the selected note the piano pitch.  The octave of the note is based on the clef, so for treble clef, the &#39;C&#39; is middle &#39;C&#39;.  You can change the octave of the note, and move the pitch up and down.  The top buttons affect the pitch, and the bottom buttons navigate or change the length of the note.  Clicking on the chord button acts like a &#39;sustain&#39; that puts additional notes in chords.</p>
<p>Everything that can be done from the piano widget, and most things in Smoosic generally, can be done more efficiently with keyboard commands. Once you are comfortable with the computer keyboard, you can free up some screen real-estate by closing the piano widget (cross control in lower left).  You can bring it up again with the piano menu button on the left.</p>
`;


/***/ }),

/***/ "./src/ui/i18n/language_de.js":
/*!************************************!*\
  !*** ./src/ui/i18n/language_de.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   smoLanguageStringDe: () => (/* binding */ smoLanguageStringDe)
/* harmony export */ });
const smoLanguageStringDe = `{
    "dialogs": [
        {
            "ctor": "SuiLoadFileDialog",
            "label": "Datei laden",
            "dialogElements": [
                {}
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiSaveFileDialog",
            "label": "Score speichern",
            "dialogElements": [
                {
                    "label": "File Name",
                    "id": "saveFileName"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiSaveXmlDialog",
            "label": "Score speichern",
            "dialogElements": [
                {
                    "label": "File Name",
                    "id": "saveFileName"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiPrintFileDialog",
            "label": "Print Complete",
            "dialogElements": [],
            "staticText": {}
        },
        {
            "ctor": "SuiSaveMidiDialog",
            "label": "Save Score as Midi",
            "dialogElements": [
                {
                    "label": "File Name",
                    "id": "saveFileName"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiSaveActionsDialog",
            "label": "Save Score",
            "dialogElements": [
                {
                    "label": "File Name",
                    "id": "saveFileName"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiLoadMxmlDialog",
            "label": "Load File",
            "dialogElements": [
                {},
                {
                    "staticText": {
                        "label": "Load File"
                    }
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiLoadActionsDialog",
            "label": "Load Action File",
            "dialogElements": [
                {},
                {
                    "staticText": {
                        "label": "Load Action File"
                    }
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiMeasureDialog",
            "label": "Takt Voreinstellungen",
            "dialogElements": [
                {
                    "label": "Takt Pickup",
                    "id": "pickup"
                },
                {
                    "label": "Pad Left (px)",
                    "id": "padLeft"
                },
                {
                    "label": "Stretch Contents",
                    "id": "customStretch"
                },
                {
                    "label": "Proportionalality",
                    "id": "customProportion"
                },
                {
                    "label": "Pad all measures in system",
                    "id": "padAllInSystem"
                },
                {
                    "label": "Justify Columns",
                    "id": "autoJustify"
                },
                {
                    "label": "Text Position",
                    "id": "measureTextPosition",
                    "options": [
                        {
                            "value": 2,
                            "label": "Left"
                        },
                        {
                            "value": 3,
                            "label": "Right"
                        },
                        {
                            "value": 0,
                            "label": "Above"
                        },
                        {
                            "value": 1,
                            "label": "Below"
                        }
                    ]
                },
                {
                    "label": "System break before this measure",
                    "id": "systemBreak"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiTempoDialog",
            "label": "Tempo Voreinstellungen",
            "dialogElements": [
                {
                    "label": "Tempo Modus",
                    "id": "tempoMode",
                    "options": [
                        {
                            "value": "duration",
                            "label": "Dauer (Beats/Minute)"
                        },
                        {
                            "value": "text",
                            "label": "Tempo Text"
                        },
                        {
                            "value": "custom",
                            "label": "Text und Dauer festlegen"
                        }
                    ]
                },
                {
                    "label": "Custom Text",
                    "id": "customText"
                },
                {
                    "label": "Notes/Minute",
                    "id": "bpm"
                },
                {
                    "label": "Einheit für Beat",
                    "id": "beatDuration",
                    "options": [
                        {
                            "value": 4096,
                            "label": "Quarter Note"
                        },
                        {
                            "value": 2048,
                            "label": "1/8 note"
                        },
                        {
                            "value": 6144,
                            "label": "Dotted 1/4 note"
                        },
                        {
                            "value": 8192,
                            "label": "1/2 note"
                        }
                    ]
                },
                {
                    "label": "Tempo Text",
                    "id": "tempoText",
                    "options": [
                        {
                            "value": "Larghissimo",
                            "label": "Larghissimo"
                        },
                        {
                            "value": "Grave",
                            "label": "Grave"
                        },
                        {
                            "value": "Lento",
                            "label": "Lento"
                        },
                        {
                            "value": "Largo",
                            "label": "Largo"
                        },
                        {
                            "value": "Larghetto",
                            "label": "Larghetto"
                        },
                        {
                            "value": "Adagio",
                            "label": "Adagio"
                        },
                        {
                            "value": "Adagietto",
                            "label": "Adagietto"
                        },
                        {
                            "value": "Andante moderato",
                            "label": "Andante moderato"
                        },
                        {
                            "value": "Andante",
                            "label": "Andante"
                        },
                        {
                            "value": "Andantino",
                            "label": "Andantino"
                        },
                        {
                            "value": "Moderato",
                            "label": "Moderato"
                        },
                        {
                            "value": "Allegretto",
                            "label": "Allegretto"
                        },
                        {
                            "value": "Allegro",
                            "label": "Allegro"
                        },
                        {
                            "value": "Vivace",
                            "label": "Vivace"
                        },
                        {
                            "value": "Presto",
                            "label": "Presto"
                        },
                        {
                            "value": "Prestissimo",
                            "label": "Prestissimo"
                        }
                    ]
                },
                {
                    "label": "Apply to all future measures?",
                    "id": "applyToAll"
                },
                {
                    "label": "Display Tempo",
                    "id": "display"
                },
                {
                    "label": "Y Offset",
                    "id": "yOffset"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiInstrumentDialog",
            "label": "Instrument Properties",
            "dialogElements": [
                {
                    "label": "Transpose Index (1/2 steps)",
                    "id": "transposeIndex"
                },
                {
                    "label": "Apply To",
                    "id": "applyTo",
                    "options": [
                        {
                            "value": 0,
                            "label": "Score"
                        },
                        {
                            "value": 1,
                            "label": "Selected Measures"
                        },
                        {
                            "value": 3,
                            "label": "Remaining Measures"
                        }
                    ]
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiInsertMeasures",
            "label": "Insert Measures",
            "dialogElements": [
                {
                    "label": "Measures to Insert",
                    "id": "measureCount"
                },
                {
                    "label": "Append to Selection",
                    "id": "append"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiTimeSignatureDialog",
            "label": "Custom Time Signature",
            "dialogElements": [
                {
                    "label": "Beats/Measure",
                    "id": "numerator"
                },
                {
                    "label": "Beat Value",
                    "id": "denominator",
                    "options": [
                        {
                            "value": 8,
                            "label": "8"
                        },
                        {
                            "value": 4,
                            "label": "4"
                        },
                        {
                            "value": 2,
                            "label": "2"
                        }
                    ]
                },
                {
                    "label": "Display",
                    "id": "display"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiScoreViewDialog",
            "label": "Score View",
            "dialogElements": [
                {
                    "label": "Show staff",
                    "id": "scoreView"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiScoreIdentificationDialog",
            "label": "Score Preferences",
            "dialogElements": [
                {
                    "label": "Title",
                    "id": "title"
                },
                {
                    "label": "Sub Title",
                    "id": "subTitle"
                },
                {
                    "label": "Composer",
                    "id": "composer"
                },
                {
                    "label": "Copyright",
                    "id": "copyright"
                }
            ],
            "staticText": {
                "titleText": "Title",
                "subTitleText": "Sub-title",
                "copyrightText": "Copyright",
                "composerText": "Composer",
                "show": "Show"
            }
        },
        {
            "ctor": "SuiGlobalLayoutDialog",
            "label": "Global Settings",
            "dialogElements": [
                {
                    "label": "Score Name",
                    "id": "scoreName"
                },
                {
                    "label": "Play Selections",
                    "id": "autoPlay"
                },
                {
                    "label": "Auto-Advance Cursor",
                    "id": "autoAdvance"
                },
                {
                    "label": "Note Spacing",
                    "id": "noteSpacing"
                },
                {
                    "label": "Seitengröße",
                    "id": "pageSize",
                    "options": [
                        {
                            "value": "letter",
                            "label": "Brief"
                        },
                        {
                            "value": "letterLandscape",
                            "label": "Brief (Landscape)"
                        },
                        {
                            "value": "tabloid",
                            "label": "Tabloid (11x17)"
                        },
                        {
                            "value": "A4",
                            "label": "A4"
                        },
                        {
                            "value": "custom",
                            "label": "benutzerdefiniert"
                        }
                    ]
                },
                {
                    "label": "Page Width (px)",
                    "id": "pageWidth"
                },
                {
                    "label": "Page Height (px)",
                    "id": "pageHeight"
                },
                {
                    "label": "% Zoom",
                    "id": "zoomScale"
                },
                {
                    "label": "% Note size",
                    "id": "svgScale"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiScoreFontDialog",
            "label": "Schriftart",
            "dialogElements": [
                {
                    "label": "Schriftart",
                    "id": "engravingFont",
                    "options": [
                        {
                            "value": "Bravura",
                            "label": "Bravura"
                        },
                        {
                            "value": "Gonville",
                            "label": "Gonville"
                        },
                        {
                            "value": "Petaluma",
                            "label": "Petaluma"
                        },
                        {
                            "value": "Leland",
                            "label": "Leland"
                        }
                    ]
                },
                {
                    "label": "Chord Font",
                    "id": "chordFont"
                },
                {
                    "label": "Lyric Font",
                    "id": "lyricFont"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiLayoutDialog",
            "label": "Page Layouts",
            "dialogElements": [
                {
                    "label": "Apply to Page",
                    "id": "applyToPage",
                    "options": [
                        {
                            "value": -1,
                            "label": "All"
                        },
                        {
                            "value": -2,
                            "label": "All Remaining"
                        },
                        {
                            "value": 1,
                            "label": "Page 1"
                        }
                    ]
                },
                {
                    "label": "Left Margin (px)",
                    "id": "leftMargin"
                },
                {
                    "label": "Right Margin (px)",
                    "id": "rightMargin"
                },
                {
                    "label": "Top Margin (px)",
                    "id": "topMargin"
                },
                {
                    "label": "Bottom Margin (px)",
                    "id": "bottomMargin"
                },
                {
                    "label": "Inter-System Margin",
                    "id": "interGap"
                },
                {
                    "label": "Intra-System Margin",
                    "id": "intraGap"
                },
                {
                    "staticText": {
                        "label": "Page Layouts"
                    }
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiSlurAttributesDialog",
            "label": "Slur Properties",
            "dialogElements": [
                {
                    "label": "Spacing",
                    "id": "spacing"
                },
                {
                    "label": "Thickness",
                    "id": "thickness"
                },
                {
                    "label": "X Offset",
                    "id": "xOffset"
                },
                {
                    "label": "Y Offset",
                    "id": "yOffset"
                },
                {
                    "label": "Startposition",
                    "id": "position",
                    "options": [
                        {
                            "value": 1,
                            "label": "Head"
                        },
                        {
                            "value": 2,
                            "label": "Top"
                        }
                    ]
                },
                {
                    "label": "Endposition",
                    "id": "position_end",
                    "options": [
                        {
                            "value": 1,
                            "label": "Head"
                        },
                        {
                            "value": 2,
                            "label": "Top"
                        }
                    ]
                },
                {
                    "label": "Invert",
                    "id": "invert"
                },
                {
                    "label": "Control Point 1 X",
                    "id": "cp1x"
                },
                {
                    "label": "Control Point 1 Y",
                    "id": "cp1y"
                },
                {
                    "label": "Control Point 2 X",
                    "id": "cp2x"
                },
                {
                    "label": "Control Point 2 Y",
                    "id": "cp2y"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiTieAttributesDialog",
            "label": "Tie Properties",
            "dialogElements": [
                {
                    "label": "Lines",
                    "id": "lines"
                }
            ],
            "staticText": {
                "label": "Tie Properties",
                "fromNote": "From Note",
                "toNote": "To Note"
            }
        },
        {
            "ctor": "SuiVoltaAttributeDialog",
            "label": "Volta Properties",
            "dialogElements": [
                {
                    "label": "number",
                    "id": "number"
                },
                {
                    "label": "X1 Offset",
                    "id": "xOffsetStart"
                },
                {
                    "label": "X2 Offset",
                    "id": "xOffsetEnd"
                },
                {
                    "label": "Y Offset",
                    "id": "yOffset"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiHairpinAttributesDialog",
            "label": "Hairpin Properties",
            "dialogElements": [
                {
                    "label": "Height",
                    "id": "height"
                },
                {
                    "label": "Y Shift",
                    "id": "yOffset"
                },
                {
                    "label": "Right Shift",
                    "id": "xOffsetRight"
                },
                {
                    "label": "Left Shift",
                    "id": "xOffsetLeft"
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiStaffGroupDialog",
            "label": "Staff Group",
            "dialogElements": [
                {
                    "label": "Staves in Group",
                    "id": "staffGroups"
                },
                {
                    "label": "Left Connector",
                    "id": "leftConnector",
                    "options": [
                        {
                            "value": 1,
                            "label": "Bracket"
                        },
                        {
                            "value": 0,
                            "label": "Brace"
                        },
                        {
                            "value": 2,
                            "label": "Single"
                        },
                        {
                            "value": 3,
                            "label": "Double"
                        }
                    ]
                }
            ],
            "staticText": {
                "includeStaff": "Include Staff"
            }
        },
        {
            "ctor": "SuiDynamicModifierDialog",
            "label": "Dynamics Properties",
            "dialogElements": [
                {
                    "label": "Y Line",
                    "id": "yOffsetLine"
                },
                {
                    "label": "Y Offset Px",
                    "id": "yOffsetPixels"
                },
                {
                    "label": "X Offset",
                    "id": "xOffset"
                },
                {
                    "label": "Text",
                    "id": "text",
                    "options": [
                        {
                            "value": "p",
                            "label": "Piano"
                        },
                        {
                            "value": "pp",
                            "label": "Pianissimo"
                        },
                        {
                            "value": "mp",
                            "label": "Mezzo-Piano"
                        },
                        {
                            "value": "mf",
                            "label": "Mezzo-Forte"
                        },
                        {
                            "value": "f",
                            "label": "Forte"
                        },
                        {
                            "value": "ff",
                            "label": "Fortissimo"
                        },
                        {
                            "value": "sfz",
                            "label": "Sforzando"
                        }
                    ]
                }
            ],
            "staticText": {}
        },
        {
            "ctor": "SuiLyricDialog",
            "label": "Lyric Editor",
            "dialogElements": [
                {
                    "label": "Verse",
                    "id": "verse",
                    "options": [
                        {
                            "value": 0,
                            "label": "1"
                        },
                        {
                            "value": 1,
                            "label": "2"
                        },
                        {
                            "value": 2,
                            "label": "3"
                        },
                        {
                            "value": 3,
                            "label": "4"
                        }
                    ]
                },
                {
                    "label": "Y Adjustment (Px)",
                    "id": "translateY"
                },
                {
                    "label": "Font",
                    "id": "font"
                },
                {
                    "label": "Edit Lyrics",
                    "id": "lyricEditor",
                    "options": []
                }
            ],
            "staticText": {
                "doneEditing": "Done Editing Lyrics",
                "undo": "Undo Lyrics",
                "label": "Lyric Editor"
            }
        },
        {
            "ctor": "SuiChordChangeDialog",
            "label": "Edit Chord Symbol",
            "dialogElements": [
                {
                    "label": "Ordinality",
                    "id": "verse",
                    "options": [
                        {
                            "value": 0,
                            "label": "1"
                        },
                        {
                            "value": 1,
                            "label": "2"
                        },
                        {
                            "value": 2,
                            "label": "3"
                        }
                    ]
                },
                {
                    "label": "Y Adjustment (Px)",
                    "id": "translateY"
                },
                {
                    "label": "Edit Text",
                    "id": "chordEditor",
                    "options": []
                },
                {
                    "label": "Chord Symbol",
                    "id": "chordSymbol",
                    "options": [
                        {
                            "value": "csymDiminished",
                            "label": "Dim"
                        },
                        {
                            "value": "csymHalfDiminished",
                            "label": "Half dim"
                        },
                        {
                            "value": "csymDiagonalArrangementSlash",
                            "label": "Slash"
                        },
                        {
                            "value": "csymMajorSeventh",
                            "label": "Maj7"
                        }
                    ]
                },
                {
                    "label": "Text Position",
                    "id": "textPosition",
                    "options": [
                        {
                            "value": 1,
                            "label": "Superscript"
                        },
                        {
                            "value": 2,
                            "label": "Subscript"
                        },
                        {
                            "value": 0,
                            "label": "Normal"
                        }
                    ]
                },
                {
                    "label": "Font",
                    "id": "font"
                },
                {
                    "label": "Adjust Note Width",
                    "id": "adjustWidth",
                    "options": []
                }
            ],
            "staticText": {
                "label": "Edit Chord Symbol",
                "undo": "Undo Chord Symbols",
                "doneEditing": "Done Editing Chord Symbols"
            }
        },
        {
            "ctor": "SuiTextBlockDialog",
            "label": "Text Properties",
            "dialogElements": [
                {
                    "label": "Edit Text",
                    "id": "textEditor",
                    "options": []
                },
                {
                    "label": "Insert Special",
                    "id": "insertCode",
                    "options": [
                        {
                            "value": "@@@",
                            "label": "Pages"
                        },
                        {
                            "value": "###",
                            "label": "Page Number"
                        }
                    ]
                },
                {
                    "label": "Move Text",
                    "id": "textDragger",
                    "options": []
                },
                {
                    "label": "X Position (Px)",
                    "id": "x"
                },
                {
                    "label": "Y Position (Px)",
                    "id": "y"
                },
                {
                    "label": "Font Information",
                    "id": "font"
                },
                {
                    "label": "Text Block Properties",
                    "id": "textBlock"
                },
                {
                    "label": "Page Behavior",
                    "id": "pagination",
                    "options": [
                        {
                            "value": 4,
                            "label": "Once"
                        },
                        {
                            "value": 1,
                            "label": "Every"
                        },
                        {
                            "label": "Even"
                        },
                        {
                            "value": 3,
                            "label": "Odd"
                        },
                        {
                            "value": 5,
                            "label": "Subsequent"
                        }
                    ]
                },
                {
                    "label": "Attach to Selection",
                    "id": "attachToSelector"
                }
            ],
            "staticText": {
                "label": "Text Properties",
                "editorLabel": "Done Editing Text",
                "draggerLabel": "Done Dragging Text"
            }
        }
    ],
    "menus": [
        {
            "ctor": "SuiDynamicsMenu",
            "label": "Dynamics",
            "menuItems": [
                {
                    "icon": "pianissimo",
                    "text": "Pianissimo",
                    "value": "pp"
                },
                {
                    "icon": "piano",
                    "text": "Piano",
                    "value": "p"
                },
                {
                    "icon": "mezzopiano",
                    "text": "Mezzo-piano",
                    "value": "mp"
                },
                {
                    "icon": "mezzoforte",
                    "text": "Mezzo-forte",
                    "value": "mf"
                },
                {
                    "icon": "forte",
                    "text": "Forte",
                    "value": "f"
                },
                {
                    "icon": "fortissimo",
                    "text": "Fortissimo",
                    "value": "ff"
                },
                {
                    "icon": "sfz",
                    "text": "sfortzando",
                    "value": "sfz"
                },
                {
                    "icon": "",
                    "text": "Abbrechen",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiFileMenu",
            "label": "Datei",
            "menuItems": [
                {
                    "icon": "folder-new",
                    "text": "Neu",
                    "value": "newFile"
                },
                {
                    "icon": "folder-open",
                    "text": "Öffnen",
                    "value": "openFile"
                },
                {
                    "icon": "",
                    "text": "Schnellspeichern",
                    "value": "quickSave"
                },
                {
                    "icon": "folder-save",
                    "text": "Speichern",
                    "value": "saveFile"
                },
                {
                    "icon": "",
                    "text": "Drucken",
                    "value": "printScore"
                },
                {
                    "icon": "",
                    "text": "Import MusicXML",
                    "value": "importMxml"
                },
                {
                    "icon": "",
                    "text": "Export MusicXML",
                    "value": "exportXml"
                },
                {
                    "icon": "",
                    "text": "Export Midi",
                    "value": "exportMidi"
                },
                {
                    "icon": "folder-save",
                    "text": "Save Actions",
                    "value": "saveActions"
                },
                {
                    "icon": "icon-play3",
                    "text": "Play Actions",
                    "value": "playActions"
                },
                {
                    "icon": "",
                    "text": "Abbrechen",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiKeySignatureMenu",
            "label": "Tonlage",
            "menuItems": [
                {
                    "icon": "key-sig-c",
                    "text": "C Major",
                    "value": "KeyOfC"
                },
                {
                    "icon": "key-sig-f",
                    "text": "F Major",
                    "value": "KeyOfF"
                },
                {
                    "icon": "key-sig-g",
                    "text": "G Major",
                    "value": "KeyOfG"
                },
                {
                    "icon": "key-sig-bb",
                    "text": "Bb Major",
                    "value": "KeyOfBb"
                },
                {
                    "icon": "key-sig-d",
                    "text": "D Major",
                    "value": "KeyOfD"
                },
                {
                    "icon": "key-sig-eb",
                    "text": "Eb Major",
                    "value": "KeyOfEb"
                },
                {
                    "icon": "key-sig-a",
                    "text": "A Major",
                    "value": "KeyOfA"
                },
                {
                    "icon": "key-sig-ab",
                    "text": "Ab Major",
                    "value": "KeyOfAb"
                },
                {
                    "icon": "key-sig-e",
                    "text": "E Major",
                    "value": "KeyOfE"
                },
                {
                    "icon": "key-sig-bd",
                    "text": "Db Major",
                    "value": "KeyOfDb"
                },
                {
                    "icon": "key-sig-b",
                    "text": "B Major",
                    "value": "KeyOfB"
                },
                {
                    "icon": "key-sig-fs",
                    "text": "F# Major",
                    "value": "KeyOfF#"
                },
                {
                    "icon": "key-sig-cs",
                    "text": "C# Major",
                    "value": "KeyOfC#"
                },
                {
                    "icon": "",
                    "text": "Abbrechen",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiMeasureMenu",
            "label": "Measure",
            "menuItems": [
                {
                    "icon": "",
                    "text": "Add Measures",
                    "value": "addMenuCmd"
                },
                {
                    "icon": "icon-cross",
                    "text": "Delete Selected Measures",
                    "value": "deleteSelected"
                },
                {
                    "icon": "",
                    "text": "Format Measure",
                    "value": "formatMeasureDialog"
                },
                {
                    "icon": "",
                    "text": "Cancel",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiTimeSignatureMenu",
            "label": "Taktzeit",
            "menuItems": [
                {
                    "icon": "sixeight",
                    "text": "6/8",
                    "value": "6/8"
                },
                {
                    "icon": "fourfour",
                    "text": "4/4",
                    "value": "4/4"
                },
                {
                    "icon": "threefour",
                    "text": "3/4",
                    "value": "3/4"
                },
                {
                    "icon": "twofour",
                    "text": "2/4",
                    "value": "2/4"
                },
                {
                    "icon": "twelveeight",
                    "text": "12/8",
                    "value": "12/8"
                },
                {
                    "icon": "seveneight",
                    "text": "7/8",
                    "value": "7/8"
                },
                {
                    "icon": "fiveeight",
                    "text": "5/8",
                    "value": "5/8"
                },
                {
                    "icon": "",
                    "text": "benutzerdefiniert",
                    "value": "TimeSigOther"
                },
                {
                    "icon": "",
                    "text": "Abbrechen",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiStaffModifierMenu",
            "label": "Lines",
            "menuItems": [
                {
                    "icon": "cresc",
                    "text": "Crescendo",
                    "value": "crescendo"
                },
                {
                    "icon": "decresc",
                    "text": "Decrescendo",
                    "value": "decrescendo"
                },
                {
                    "icon": "slur",
                    "text": "Bogen/Bindung",
                    "value": "slur"
                },
                {
                    "icon": "slur",
                    "text": "Tie",
                    "value": "tie"
                },
                {
                    "icon": "ending",
                    "text": "nth Ende",
                    "value": "ending"
                },
                {
                    "icon": "",
                    "text": "Abbrechen",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiLanguageMenu",
            "label": "Language",
            "menuItems": [
                {
                    "icon": "",
                    "text": "English",
                    "value": "en"
                },
                {
                    "icon": "",
                    "text": "Deutsch",
                    "value": "de"
                },
                {
                    "icon": "",
                    "text": "اَلْعَرَبِيَّةُ",
                    "value": "ar"
                },
                {
                    "icon": "",
                    "text": "Cancel",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiLibraryMenu",
            "label": "Score",
            "menuItems": [
                {
                    "icon": "",
                    "text": "Bach Invention",
                    "value": "bach"
                },
                {
                    "icon": "",
                    "text": "Postillion-Lied",
                    "value": "postillion"
                },
                {
                    "icon": "",
                    "text": "Jesu Bambino",
                    "value": "bambino"
                },
                {
                    "icon": "",
                    "text": "Handel Messiah 1-1",
                    "value": "handel"
                },
                {
                    "icon": "",
                    "text": "Precious Lord",
                    "value": "preciousLord"
                },
                {
                    "icon": "",
                    "text": "In Its Delightful Shade",
                    "value": "shade"
                },
                {
                    "icon": "",
                    "text": "Yama",
                    "value": "yamaJson"
                },
                {
                    "icon": "",
                    "text": "Dichterliebe (xml)",
                    "value": "dichterliebe"
                },
                {
                    "icon": "",
                    "text": "Beethoven - An die ferne Gliebte (xml)",
                    "value": "beethoven"
                },
                {
                    "icon": "",
                    "text": "Mozart - An Chloe (xml)",
                    "value": "mozart"
                },
                {
                    "icon": "",
                    "text": "Joplin - The Entertainer (xml)",
                    "value": "joplin"
                },
                {
                    "icon": "",
                    "text": "Cancel",
                    "value": "cancel"
                }
            ]
        },
        {
            "ctor": "SuiScoreMenu",
            "label": "Score Settings",
            "menuItems": [
                {
                    "icon": "",
                    "text": "Layout",
                    "value": "layout"
                },
                {
                    "icon": "",
                    "text": "Fonts",
                    "value": "fonts"
                },
                {
                    "icon": "",
                    "text": "View",
                    "value": "view"
                },
                {
                    "icon": "",
                    "text": "Score Info",
                    "value": "identification"
                },
                {
                    "icon": "",
                    "text": "Global Settings",
                    "value": "preferences"
                },
                {
                    "icon": "",
                    "text": "Cancel",
                    "value": "cancel"
                }
            ]
        }
    ],
    "buttonText": [
        {
            "buttonId": "helpDialog",
            "buttonText": "Help"
        },
        {
            "buttonId": "languageMenu",
            "buttonText": "Language"
        },
        {
            "buttonId": "fileMenu",
            "buttonText": "File"
        },
        {
            "buttonId": "libraryMenu",
            "buttonText": "Library"
        },
        {
            "buttonId": "addStaffMenu",
            "buttonText": "Staves"
        },
        {
            "buttonId": "measureModal",
            "buttonText": "Measure"
        },
        {
            "buttonId": "tempoModal",
            "buttonText": "Tempo"
        },
        {
            "buttonId": "timeSignatureMenu",
            "buttonText": "Time Signature"
        },
        {
            "buttonId": "keyMenu",
            "buttonText": "Key"
        },
        {
            "buttonId": "staffModifierMenu",
            "buttonText": "Lines"
        },
        {
            "buttonId": "instrumentModal",
            "buttonText": "Instrument"
        },
        {
            "buttonId": "pianoModal",
            "buttonText": "Piano"
        },
        {
            "buttonId": "layoutMenu",
            "buttonText": "Score"
        },
        {
            "buttonId": "UpOctaveButton",
            "buttonText": "8va"
        },
        {
            "buttonId": "DownOctaveButton",
            "buttonText": "8vb"
        },
        {
            "buttonId": "moreNavButtons",
            "buttonText": "..."
        },
        {
            "buttonId": "dcAlCoda",
            "buttonText": "DC Al Coda"
        },
        {
            "buttonId": "dsAlCoda",
            "buttonText": "DS Al Coda"
        },
        {
            "buttonId": "dcAlFine",
            "buttonText": "DC Al Fine"
        },
        {
            "buttonId": "dsAlFine",
            "buttonText": "DS Al Fine"
        },
        {
            "buttonId": "toCoda",
            "buttonText": "to "
        },
        {
            "buttonId": "fine",
            "buttonText": "Fine"
        },
        {
            "buttonId": "moreStaffButtons",
            "buttonText": "..."
        }
    ]
}`;


/***/ }),

/***/ "./src/ui/i18n/language_en.js":
/*!************************************!*\
  !*** ./src/ui/i18n/language_en.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cardBeamsAndStemsDirectionHtmlEn: () => (/* binding */ cardBeamsAndStemsDirectionHtmlEn),
/* harmony export */   cardBeamsAndStemsGroupingHtmlEn: () => (/* binding */ cardBeamsAndStemsGroupingHtmlEn),
/* harmony export */   cardDurationNotesHtmlEn: () => (/* binding */ cardDurationNotesHtmlEn),
/* harmony export */   cardDurationTupletsHtmlEn: () => (/* binding */ cardDurationTupletsHtmlEn),
/* harmony export */   cardKeysHtmlEn: () => (/* binding */ cardKeysHtmlEn),
/* harmony export */   cardMeasuresAddDeleteHtmlEn: () => (/* binding */ cardMeasuresAddDeleteHtmlEn),
/* harmony export */   cardNotesChordsHtmlEn: () => (/* binding */ cardNotesChordsHtmlEn),
/* harmony export */   cardNotesChromaticHtmlEn: () => (/* binding */ cardNotesChromaticHtmlEn),
/* harmony export */   cardNotesLetterHtmlEn: () => (/* binding */ cardNotesLetterHtmlEn),
/* harmony export */   cardNotesRestsHtmlEn: () => (/* binding */ cardNotesRestsHtmlEn),
/* harmony export */   cardPartAddDeleteHtmlEn: () => (/* binding */ cardPartAddDeleteHtmlEn),
/* harmony export */   cardSelectionsModifiersHtmlEn: () => (/* binding */ cardSelectionsModifiersHtmlEn),
/* harmony export */   cardSelectionsNonSelectableHtmlEn: () => (/* binding */ cardSelectionsNonSelectableHtmlEn),
/* harmony export */   cardSelectionsNotesHtmlEn: () => (/* binding */ cardSelectionsNotesHtmlEn),
/* harmony export */   cardSelectionsSlashHtmlEn: () => (/* binding */ cardSelectionsSlashHtmlEn),
/* harmony export */   cardVoicesCreateDeleteHtmlEn: () => (/* binding */ cardVoicesCreateDeleteHtmlEn),
/* harmony export */   helpCards: () => (/* binding */ helpCards),
/* harmony export */   smoLanguageStringEn: () => (/* binding */ smoLanguageStringEn)
/* harmony export */ });
const smoLanguageStringEn = `{
    "dialogs": [
     {
      "ctor": "SuiLoadFileDialog",
      "label": "Load File",
      "dialogElements": [
       {}
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveFileDialog",
      "label": "Save Score",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveXmlDialog",
      "label": "Save Score",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiPrintFileDialog",
      "label": "Print Complete",
      "dialogElements": [],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveMidiDialog",
      "label": "Save Score as Midi",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSaveActionsDialog",
      "label": "Save Score",
      "dialogElements": [
       {
        "label": "File Name",
        "id": "saveFileName"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLoadMxmlDialog",
      "label": "Load File",
      "dialogElements": [
       {},
       {
        "staticText": {
         "label": "Load File"
        }
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLoadActionsDialog",
      "label": "Load Action File",
      "dialogElements": [
       {},
       {
        "staticText": {
         "label": "Load Action File"
        }
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiMeasureDialog",
      "label": "Measure Properties",
      "dialogElements": [
       {
        "label": "Pickup",
        "id": "pickup"
       },
       {
        "label": "Pad Left (px)",
        "id": "padLeft"
       },
       {
        "label": "Stretch Contents",
        "id": "customStretch"
       },
       {
        "label": "Proportionalality",
        "id": "customProportion"
       },
       {
        "label": "Pad all measures in system",
        "id": "padAllInSystem"
       },
       {
        "label": "Justify Columns",
        "id": "autoJustify"
       },
       {
        "label": "Text Position",
        "id": "measureTextPosition",
        "options": [
         {
          "value": 2,
          "label": "Left"
         },
         {
          "value": 3,
          "label": "Right"
         },
         {
          "value": 0,
          "label": "Above"
         },
         {
          "value": 1,
          "label": "Below"
         }
        ]
       },
       {
        "label": "System break before this measure",
        "id": "systemBreak"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiTempoDialog",
      "label": "Tempo Properties",
      "dialogElements": [
       {
        "label": "Tempo Mode",
        "id": "tempoMode",
        "options": [
         {
          "value": "duration",
          "label": "Duration (Beats/Minute)"
         },
         {
          "value": "text",
          "label": "Tempo Text"
         },
         {
          "value": "custom",
          "label": "Specify text and duration"
         }
        ]
       },
       {
        "label": "Custom Text",
        "id": "customText"
       },
       {
        "label": "Notes/Minute",
        "id": "bpm"
       },
       {
        "label": "Unit for Beat",
        "id": "beatDuration",
        "options": [
         {
          "value": 4096,
          "label": "Quarter Note"
         },
         {
          "value": 2048,
          "label": "1/8 note"
         },
         {
          "value": 6144,
          "label": "Dotted 1/4 note"
         },
         {
          "value": 8192,
          "label": "1/2 note"
         }
        ]
       },
       {
        "label": "Tempo Text",
        "id": "tempoText",
        "options": [
         {
          "value": "Larghissimo",
          "label": "Larghissimo"
         },
         {
          "value": "Grave",
          "label": "Grave"
         },
         {
          "value": "Lento",
          "label": "Lento"
         },
         {
          "value": "Largo",
          "label": "Largo"
         },
         {
          "value": "Larghetto",
          "label": "Larghetto"
         },
         {
          "value": "Adagio",
          "label": "Adagio"
         },
         {
          "value": "Adagietto",
          "label": "Adagietto"
         },
         {
          "value": "Andante moderato",
          "label": "Andante moderato"
         },
         {
          "value": "Andante",
          "label": "Andante"
         },
         {
          "value": "Andantino",
          "label": "Andantino"
         },
         {
          "value": "Moderato",
          "label": "Moderato"
         },
         {
          "value": "Allegretto",
          "label": "Allegretto"
         },
         {
          "value": "Allegro",
          "label": "Allegro"
         },
         {
          "value": "Vivace",
          "label": "Vivace"
         },
         {
          "value": "Presto",
          "label": "Presto"
         },
         {
          "value": "Prestissimo",
          "label": "Prestissimo"
         }
        ]
       },
       {
        "label": "Apply to all future measures?",
        "id": "applyToAll"
       },
       {
        "label": "Display Tempo",
        "id": "display"
       },
       {
        "label": "Y Offset",
        "id": "yOffset"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiInstrumentDialog",
      "label": "Instrument Properties",
      "dialogElements": [
       {
        "label": "Transpose Index (1/2 steps)",
        "id": "transposeIndex"
       },
       {
        "label": "Apply To",
        "id": "applyTo",
        "options": [
         {
          "value": 0,
          "label": "Score"
         },
         {
          "value": 1,
          "label": "Selected Measures"
         },
         {
          "value": 3,
          "label": "Remaining Measures"
         }
        ]
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiInsertMeasures",
      "label": "Insert Measures",
      "dialogElements": [
       {
        "label": "Measures to Insert",
        "id": "measureCount"
       },
       {
        "label": "Append to Selection",
        "id": "append"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiTimeSignatureDialog",
      "label": "Custom Time Signature",
      "dialogElements": [
       {
        "label": "Beats/Measure",
        "id": "numerator"
       },
       {
        "label": "Beat Value",
        "id": "denominator",
        "options": [
         {
          "value": 8,
          "label": "8"
         },
         {
          "value": 4,
          "label": "4"
         },
         {
          "value": 2,
          "label": "2"
         }
        ]
       },
       {
        "label": "Display",
        "id": "display"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiScoreViewDialog",
      "label": "Score View",
      "dialogElements": [
       {
        "label": "Show staff",
        "id": "scoreView"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiScoreIdentificationDialog",
      "label": "Score Preferences",
      "dialogElements": [
       {
        "label": "Title",
        "id": "title"
       },
       {
        "label": "Sub Title",
        "id": "subTitle"
       },
       {
        "label": "Composer",
        "id": "composer"
       },
       {
        "label": "Copyright",
        "id": "copyright"
       }
      ],
      "staticText": {
       "titleText": "Title",
       "subTitleText": "Sub-title",
       "copyrightText": "Copyright",
       "composerText": "Composer",
       "show": "Show"
      }
     },
     {
      "ctor": "SuiGlobalLayoutDialog",
      "label": "Global Settings",
      "dialogElements": [
       {
        "label": "Score Name",
        "id": "scoreName"
       },
       {
        "label": "Play Selections",
        "id": "autoPlay"
       },
       {
        "label": "Auto-Advance Cursor",
        "id": "autoAdvance"
       },
       {
        "label": "Note Spacing",
        "id": "noteSpacing"
       },
       {
        "label": "Page Size",
        "id": "pageSize",
        "options": [
         {
          "value": "letter",
          "label": "Letter (Portrait)"
         },
         {
          "value": "letterLandscape",
          "label": "Letter (Landscape)"
         },
         {
          "value": "tabloid",
          "label": "Tabloid (11x17)"
         },
         {
          "value": "A4",
          "label": "A4"
         },
         {
          "value": "custom",
          "label": "Custom"
         }
        ]
       },
       {
        "label": "Page Width (px)",
        "id": "pageWidth"
       },
       {
        "label": "Page Height (px)",
        "id": "pageHeight"
       },
       {
        "label": "% Zoom",
        "id": "zoomScale"
       },
       {
        "label": "% Note size",
        "id": "svgScale"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiScoreFontDialog",
      "label": "Score Fonts",
      "dialogElements": [
       {
        "label": "Engraving Font",
        "id": "engravingFont",
        "options": [
         {
          "value": "Bravura",
          "label": "Bravura"
         },
         {
          "value": "Gonville",
          "label": "Gonville"
         },
         {
          "value": "Petaluma",
          "label": "Petaluma"
         },
         {
          "value": "Leland",
          "label": "Leland"
         }
        ]
       },
       {
        "label": "Chord Font",
        "id": "chordFont"
       },
       {
        "label": "Lyric Font",
        "id": "lyricFont"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLayoutDialog",
      "label": "Page Layouts",
      "dialogElements": [
       {
        "label": "Apply to Page",
        "id": "applyToPage",
        "options": [
         {
          "value": -1,
          "label": "All"
         },
         {
          "value": -2,
          "label": "All Remaining"
         },
         {
          "value": 1,
          "label": "Page 1"
         }
        ]
       },
       {
        "label": "Left Margin (px)",
        "id": "leftMargin"
       },
       {
        "label": "Right Margin (px)",
        "id": "rightMargin"
       },
       {
        "label": "Top Margin (px)",
        "id": "topMargin"
       },
       {
        "label": "Bottom Margin (px)",
        "id": "bottomMargin"
       },
       {
        "label": "Inter-System Margin",
        "id": "interGap"
       },
       {
        "label": "Intra-System Margin",
        "id": "intraGap"
       },
       {
        "staticText": {
         "label": "Page Layouts"
        }
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiSlurAttributesDialog",
      "label": "Slur Properties",
      "dialogElements": [
       {
        "label": "Spacing",
        "id": "spacing"
       },
       {
        "label": "Thickness",
        "id": "thickness"
       },
       {
        "label": "X Offset",
        "id": "xOffset"
       },
       {
        "label": "Y Offset",
        "id": "yOffset"
       },
       {
        "label": "Start Position",
        "id": "position",
        "options": [
         {
          "value": 1,
          "label": "Head"
         },
         {
          "value": 2,
          "label": "Top"
         }
        ]
       },
       {
        "label": "End Position",
        "id": "position_end",
        "options": [
         {
          "value": 1,
          "label": "Head"
         },
         {
          "value": 2,
          "label": "Top"
         }
        ]
       },
       {
        "label": "Invert",
        "id": "invert"
       },
       {
        "label": "Control Point 1 X",
        "id": "cp1x"
       },
       {
        "label": "Control Point 1 Y",
        "id": "cp1y"
       },
       {
        "label": "Control Point 2 X",
        "id": "cp2x"
       },
       {
        "label": "Control Point 2 Y",
        "id": "cp2y"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiTieAttributesDialog",
      "label": "Tie Properties",
      "dialogElements": [
       {
        "label": "Lines",
        "id": "lines"
       }
      ],
      "staticText": {
       "label": "Tie Properties",
       "fromNote": "From Note",
       "toNote": "To Note"
      }
     },
     {
      "ctor": "SuiVoltaAttributeDialog",
      "label": "Volta Properties",
      "dialogElements": [
       {
        "label": "number",
        "id": "number"
       },
       {
        "label": "X1 Offset",
        "id": "xOffsetStart"
       },
       {
        "label": "X2 Offset",
        "id": "xOffsetEnd"
       },
       {
        "label": "Y Offset",
        "id": "yOffset"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiHairpinAttributesDialog",
      "label": "Hairpin Properties",
      "dialogElements": [
       {
        "label": "Height",
        "id": "height"
       },
       {
        "label": "Y Shift",
        "id": "yOffset"
       },
       {
        "label": "Right Shift",
        "id": "xOffsetRight"
       },
       {
        "label": "Left Shift",
        "id": "xOffsetLeft"
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiStaffGroupDialog",
      "label": "Staff Group",
      "dialogElements": [
       {
        "label": "Staves in Group",
        "id": "staffGroups"
       },
       {
        "label": "Left Connector",
        "id": "leftConnector",
        "options": [
         {
          "value": 1,
          "label": "Bracket"
         },
         {
          "value": 0,
          "label": "Brace"
         },
         {
          "value": 2,
          "label": "Single"
         },
         {
          "value": 3,
          "label": "Double"
         }
        ]
       }
      ],
      "staticText": {
       "includeStaff": "Include Staff"
      }
     },
     {
      "ctor": "SuiDynamicModifierDialog",
      "label": "Dynamics Properties",
      "dialogElements": [
       {
        "label": "Y Line",
        "id": "yOffsetLine"
       },
       {
        "label": "Y Offset Px",
        "id": "yOffsetPixels"
       },
       {
        "label": "X Offset",
        "id": "xOffset"
       },
       {
        "label": "Text",
        "id": "text",
        "options": [
         {
          "value": "p",
          "label": "Piano"
         },
         {
          "value": "pp",
          "label": "Pianissimo"
         },
         {
          "value": "mp",
          "label": "Mezzo-Piano"
         },
         {
          "value": "mf",
          "label": "Mezzo-Forte"
         },
         {
          "value": "f",
          "label": "Forte"
         },
         {
          "value": "ff",
          "label": "Fortissimo"
         },
         {
          "value": "sfz",
          "label": "Sforzando"
         }
        ]
       }
      ],
      "staticText": {}
     },
     {
      "ctor": "SuiLyricDialog",
      "label": "Lyric Editor",
      "dialogElements": [
       {
        "label": "Verse",
        "id": "verse",
        "options": [
         {
          "value": 0,
          "label": "1"
         },
         {
          "value": 1,
          "label": "2"
         },
         {
          "value": 2,
          "label": "3"
         },
         {
          "value": 3,
          "label": "4"
         }
        ]
       },
       {
        "label": "Y Adjustment (Px)",
        "id": "translateY"
       },
       {
        "label": "Font",
        "id": "font"
       },
       {
        "label": "Edit Lyrics",
        "id": "lyricEditor",
        "options": []
       }
      ],
      "staticText": {
       "doneEditing": "Done Editing Lyrics",
       "undo": "Undo Lyrics",
       "label": "Lyric Editor"
      }
     },
     {
      "ctor": "SuiChordChangeDialog",
      "label": "Edit Chord Symbol",
      "dialogElements": [
       {
        "label": "Ordinality",
        "id": "verse",
        "options": [
         {
          "value": 0,
          "label": "1"
         },
         {
          "value": 1,
          "label": "2"
         },
         {
          "value": 2,
          "label": "3"
         }
        ]
       },
       {
        "label": "Y Adjustment (Px)",
        "id": "translateY"
       },
       {
        "label": "Edit Text",
        "id": "chordEditor",
        "options": []
       },
       {
        "label": "Chord Symbol",
        "id": "chordSymbol",
        "options": [
         {
          "value": "csymDiminished",
          "label": "Dim"
         },
         {
          "value": "csymHalfDiminished",
          "label": "Half dim"
         },
         {
          "value": "csymDiagonalArrangementSlash",
          "label": "Slash"
         },
         {
          "value": "csymMajorSeventh",
          "label": "Maj7"
         }
        ]
       },
       {
        "label": "Text Position",
        "id": "textPosition",
        "options": [
         {
          "value": 1,
          "label": "Superscript"
         },
         {
          "value": 2,
          "label": "Subscript"
         },
         {
          "value": 0,
          "label": "Normal"
         }
        ]
       },
       {
        "label": "Font",
        "id": "font"
       },
       {
        "label": "Adjust Note Width",
        "id": "adjustWidth",
        "options": []
       }
      ],
      "staticText": {
       "label": "Edit Chord Symbol",
       "undo": "Undo Chord Symbols",
       "doneEditing": "Done Editing Chord Symbols"
      }
     },
     {
      "ctor": "SuiTextBlockDialog",
      "label": "Text Properties",
      "dialogElements": [
       {
        "label": "Edit Text",
        "id": "textEditor",
        "options": []
       },
       {
        "label": "Insert Special",
        "id": "insertCode",
        "options": [
         {
          "value": "@@@",
          "label": "Pages"
         },
         {
          "value": "###",
          "label": "Page Number"
         }
        ]
       },
       {
        "label": "Move Text",
        "id": "textDragger",
        "options": []
       },
       {
        "label": "X Position (Px)",
        "id": "x"
       },
       {
        "label": "Y Position (Px)",
        "id": "y"
       },
       {
        "label": "Font Information",
        "id": "font"
       },
       {
        "label": "Text Block Properties",
        "id": "textBlock"
       },
       {
        "label": "Page Behavior",
        "id": "pagination",
        "options": [
         {
          "value": 4,
          "label": "Once"
         },
         {
          "value": 1,
          "label": "Every"
         },
         {
          "label": "Even"
         },
         {
          "value": 3,
          "label": "Odd"
         },
         {
          "value": 5,
          "label": "Subsequent"
         }
        ]
       },
       {
        "label": "Attach to Selection",
        "id": "attachToSelector"
       }
      ],
      "staticText": {
       "label": "Text Properties",
       "editorLabel": "Done Editing Text",
       "draggerLabel": "Done Dragging Text"
      }
     }
    ],
    "menus": [
     {
      "ctor": "SuiDynamicsMenu",
      "label": "Dynamics",
      "menuItems": [
       {
        "icon": "pianissimo",
        "text": "Pianissimo",
        "value": "pp"
       },
       {
        "icon": "piano",
        "text": "Piano",
        "value": "p"
       },
       {
        "icon": "mezzopiano",
        "text": "Mezzo-piano",
        "value": "mp"
       },
       {
        "icon": "mezzoforte",
        "text": "Mezzo-forte",
        "value": "mf"
       },
       {
        "icon": "forte",
        "text": "Forte",
        "value": "f"
       },
       {
        "icon": "fortissimo",
        "text": "Fortissimo",
        "value": "ff"
       },
       {
        "icon": "sfz",
        "text": "sfortzando",
        "value": "sfz"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiFileMenu",
      "label": "File",
      "menuItems": [
       {
        "icon": "folder-new",
        "text": "New Score",
        "value": "newFile"
       },
       {
        "icon": "folder-open",
        "text": "Open",
        "value": "openFile"
       },
       {
        "icon": "",
        "text": "Quick Save",
        "value": "quickSave"
       },
       {
        "icon": "folder-save",
        "text": "Save",
        "value": "saveFile"
       },
       {
        "icon": "",
        "text": "Print",
        "value": "printScore"
       },
       {
        "icon": "",
        "text": "Import MusicXML",
        "value": "importMxml"
       },
       {
        "icon": "",
        "text": "Export MusicXML",
        "value": "exportXml"
       },
       {
        "icon": "",
        "text": "Export Midi",
        "value": "exportMidi"
       },
       {
        "icon": "folder-save",
        "text": "Save Actions",
        "value": "saveActions"
       },
       {
        "icon": "icon-play3",
        "text": "Play Actions",
        "value": "playActions"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },     
     {
      "ctor": "SuiKeySignatureMenu",
      "label": "Key",
      "menuItems": [
       {
        "icon": "key-sig-c",
        "text": "C Major",
        "value": "KeyOfC"
       },
       {
        "icon": "key-sig-f",
        "text": "F Major",
        "value": "KeyOfF"
       },
       {
        "icon": "key-sig-g",
        "text": "G Major",
        "value": "KeyOfG"
       },
       {
        "icon": "key-sig-bb",
        "text": "Bb Major",
        "value": "KeyOfBb"
       },
       {
        "icon": "key-sig-d",
        "text": "D Major",
        "value": "KeyOfD"
       },
       {
        "icon": "key-sig-eb",
        "text": "Eb Major",
        "value": "KeyOfEb"
       },
       {
        "icon": "key-sig-a",
        "text": "A Major",
        "value": "KeyOfA"
       },
       {
        "icon": "key-sig-ab",
        "text": "Ab Major",
        "value": "KeyOfAb"
       },
       {
        "icon": "key-sig-e",
        "text": "E Major",
        "value": "KeyOfE"
       },
       {
        "icon": "key-sig-bd",
        "text": "Db Major",
        "value": "KeyOfDb"
       },
       {
        "icon": "key-sig-b",
        "text": "B Major",
        "value": "KeyOfB"
       },
       {
        "icon": "key-sig-fs",
        "text": "F# Major",
        "value": "KeyOfF#"
       },
       {
        "icon": "key-sig-cs",
        "text": "C# Major",
        "value": "KeyOfC#"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiMeasureMenu",
      "label": "Measure",
      "menuItems": [
       {
        "icon": "",
        "text": "Add Measures",
        "value": "addMenuCmd"
       },
       {
        "icon": "icon-cross",
        "text": "Delete Selected Measures",
        "value": "deleteSelected"
       },
       {
        "icon": "",
        "text": "Format Measure",
        "value": "formatMeasureDialog"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiTimeSignatureMenu",
      "label": "Time Sig",
      "menuItems": [
       {
        "icon": "sixeight",
        "text": "6/8",
        "value": "6/8"
       },
       {
        "icon": "fourfour",
        "text": "4/4",
        "value": "4/4"
       },
       {
        "icon": "threefour",
        "text": "3/4",
        "value": "3/4"
       },
       {
        "icon": "twofour",
        "text": "2/4",
        "value": "2/4"
       },
       {
        "icon": "twelveeight",
        "text": "12/8",
        "value": "12/8"
       },
       {
        "icon": "seveneight",
        "text": "7/8",
        "value": "7/8"
       },
       {
        "icon": "fiveeight",
        "text": "5/8",
        "value": "5/8"
       },
       {
        "icon": "",
        "text": "Other",
        "value": "TimeSigOther"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiStaffModifierMenu",
      "label": "Lines",
      "menuItems": [
       {
        "icon": "cresc",
        "text": "Crescendo",
        "value": "crescendo"
       },
       {
        "icon": "decresc",
        "text": "Decrescendo",
        "value": "decrescendo"
       },
       {
        "icon": "slur",
        "text": "Slur",
        "value": "slur"
       },
       {
        "icon": "slur",
        "text": "Tie",
        "value": "tie"
       },
       {
        "icon": "ending",
        "text": "nth ending",
        "value": "ending"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiLanguageMenu",
      "label": "Language",
      "menuItems": [
       {
        "icon": "",
        "text": "English",
        "value": "en"
       },
       {
        "icon": "",
        "text": "Deutsch",
        "value": "de"
       },
       {
        "icon": "",
        "text": "اَلْعَرَبِيَّةُ",
        "value": "ar"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiLibraryMenu",
      "label": "Score",
      "menuItems": [
       {
        "icon": "",
        "text": "Bach Invention",
        "value": "bach"
       },
       {
        "icon": "",
        "text": "Postillion-Lied",
        "value": "postillion"
       },
       {
        "icon": "",
        "text": "Jesu Bambino",
        "value": "bambino"
       },
       {
        "icon": "",
        "text": "Handel Messiah 1-1",
        "value": "handel"
       },
       {
        "icon": "",
        "text": "Precious Lord",
        "value": "preciousLord"
       },
       {
        "icon": "",
        "text": "In Its Delightful Shade",
        "value": "shade"
       },
       {
        "icon": "",
        "text": "Yama",
        "value": "yamaJson"
       },
       {
        "icon": "",
        "text": "Dichterliebe (xml)",
        "value": "dichterliebe"
       },
       {
        "icon": "",
        "text": "Beethoven - An die ferne Gliebte (xml)",
        "value": "beethoven"
       },
       {
        "icon": "",
        "text": "Mozart - An Chloe (xml)",
        "value": "mozart"
       },
       {
        "icon": "",
        "text": "Joplin - The Entertainer (xml)",
        "value": "joplin"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     },
     {
      "ctor": "SuiScoreMenu",
      "label": "Score Settings",
      "menuItems": [
       {
        "icon": "",
        "text": "Layout",
        "value": "layout"
       },
       {
        "icon": "",
        "text": "Fonts",
        "value": "fonts"
       },
       {
        "icon": "",
        "text": "View",
        "value": "view"
       },
       {
        "icon": "",
        "text": "Score Info",
        "value": "identification"
       },
       {
        "icon": "",
        "text": "Global Settings",
        "value": "preferences"
       },
       {
        "icon": "",
        "text": "Cancel",
        "value": "cancel"
       }
      ]
     }
    ],
    "buttonText": [
     {
      "buttonId": "helpDialog",
      "buttonText": "Help"
     },
     {
      "buttonId": "languageMenu",
      "buttonText": "Language"
     },
     {
      "buttonId": "fileMenu",
      "buttonText": "File"
     },
     {
      "buttonId": "libraryMenu",
      "buttonText": "Library"
     },
     {
      "buttonId": "addStaffMenu",
      "buttonText": "Staves"
     },
     {
      "buttonId": "measureModal",
      "buttonText": "Measure"
     },
     {
      "buttonId": "tempoModal",
      "buttonText": "Tempo"
     },
     {
      "buttonId": "timeSignatureMenu",
      "buttonText": "Time Signature"
     },
     {
      "buttonId": "keyMenu",
      "buttonText": "Key"
     },
     {
      "buttonId": "staffModifierMenu",
      "buttonText": "Lines"
     },
     {
      "buttonId": "instrumentModal",
      "buttonText": "Instrument"
     },
     {
      "buttonId": "pianoModal",
      "buttonText": "Piano"
     },
     {
      "buttonId": "layoutMenu",
      "buttonText": "Score"
     },
     {
      "buttonId": "UpOctaveButton",
      "buttonText": "8va"
     },
     {
      "buttonId": "DownOctaveButton",
      "buttonText": "8vb"
     },
     {
      "buttonId": "moreNavButtons",
      "buttonText": "..."
     },
     {
      "buttonId": "dcAlCoda",
      "buttonText": "DC Al Coda"
     },
     {
      "buttonId": "dsAlCoda",
      "buttonText": "DS Al Coda"
     },
     {
      "buttonId": "dcAlFine",
      "buttonText": "DC Al Fine"
     },
     {
      "buttonId": "dsAlFine",
      "buttonText": "DS Al Fine"
     },
     {
      "buttonId": "toCoda",
      "buttonText": "to "
     },
     {
      "buttonId": "fine",
      "buttonText": "Fine"
     },
     {
      "buttonId": "moreStaffButtons",
      "buttonText": "..."
     }
    ]
   }`;
const cardKeysHtmlEn = `
<h3 id="welcome-to-smoosic">Welcome to Smoosic</h3>
<p>Smoosic was designed to allow you to enter music as fast as you can type, once you learn some basic commands and patterns.  While music can be entered in multiple ways, the fastest/easiest way to create or edit in Smoosic is to use some basic keyboard shortcuts.</p>
<p>You can customize the key bindings (which keys do what) by changing the files in <code>src/ui/keyBindings/</code> directory, or by providing your own bindings.  See the <code>custom-keybinding.html</code> in the project that demonstrates how to create your own key bindings.
<img src="https://imgur.com/jJ5utJm.gif" alt=""></p>
`;
const cardNotesLetterHtmlEn = `
<p>Most key commands in Smoosic have a mnemonic device.  The keys <strong>a-g</strong> on the computer keyboard will enter a corresponding note, A-G, on the staff.  The default behavior is for the cursor to advance when a note is entered in this way.  This can be overridden in the &#39;Score Preferences&#39; dialog. You navigate to the notes using the keyboard navigation arrows.</p>
<p><img src="https://imgur.com/lxR0NI7.gif" alt=""></p>
<p>Some conventions used in this documentation: </p>
<p>Keystrokes are specified in <strong>bold</strong>, e.g. <strong>x</strong> means the &#39;x&#39; key.  <strong>Shift+E</strong> means to press the <strong>Shift</strong> and <strong>E</strong> keys at the same time.</p>
<p>Key sequences are specified on their own line:</p>
<p><strong>/</strong> <strong>a</strong></p>
<p>means to press the <strong>/</strong> key followed by the <strong>a</strong> key.</p>
`;
const cardNotesChromaticHtmlEn = `
<p>You change notes chromatically using <strong>-</strong> and <strong>=</strong> key.  You can change the octave using the <strong>_</strong> (underscore) and <strong>+</strong> (plus) keys.   The mnemonic device for this is &#39;plus and minus&#39; for raising and lowering pitches.  You can change the enharmonic spelling of the note using the <strong>Shift+E</strong> (mnemonic: E for enharmonic - get it?).  And <strong>Shift+F</strong> gives you a courtesy, or cautionary, accidental (mnemonic - F comes after E).</p>
<p><img src="https://imgur.com/1tC94sV.gif" alt=""></p>
`;
const cardNotesChordsHtmlEn = `
<p>You can create chords and intervals using the number keys along the top of the keyboard.  The <strong>3</strong> key makes a third, the <strong>4</strong> key a fourth, and so on.  <strong>Shift+3</strong> gives you the 3rd below.</p>
<p>You can toggle selection to individual pitches by using <strong>Shift+UpArrow</strong>. So to create a G triad, starting with <strong>g</strong>, hit <strong>3</strong> for the &#39;B&#39;, <strong>3</strong> again for the &#39;D&#39;.  So far, we have G major.  To lower the 3rd, <strong>Shift+up</strong> to select the &#39;B&#39;, then <strong>-</strong> to lower the pitch.</p>
<p><img src="https://imgur.com/NGXRJQZ.gif" alt=""></p>
`;
const cardNotesRestsHtmlEn = `
<p>You can toggle notes to rests by pressing <strong>r</strong> or <strong>Delete</strong>.</p>
<p>In Smoosic, you can&#39;t truly delete a note - a 4/4 bar will always have 4 beats of music.  But you can &#39;hide&#39; notes by creating invisible rests.  This is another use of <strong>Delete</strong>.</p>
<p><strong>Delete</strong> follows standard toggle behavior - deleted notes become rests, and delete rests become invisible rests.  Hitting <strong>Delete</strong> a third time restores the note.</p>
<p>Invisible rests show up as partially opaque in the display.  But when printed, they are truly invisible.</p>
<p><img src="https://imgur.com/c2FVZi3.gif" alt=""></p>
`;
const cardDurationNotesHtmlEn = `
<p>Changing duration is a little different in Smoosic than other programs.  Rather than selecting a duration (quarter note, etc.), you change (increase/decrease) the duration of existing notes.</p>
<p>You can change the length of notes using the <strong>,</strong> and <strong>.</strong> (comma and period) keys, which halve and double the note lengths, respectively.  You can add a dot to the length of the note (multiplying length by 3/2 for the first dot, and 5/4 for the second dot, if you like to think of it that way) or remove a dot, using the <strong>&gt;</strong> (<strong>Shift+,</strong>) and <strong>,</strong>.  The mnemonic device for these is <strong>&gt;</strong> makes note duration greater. <strong>&lt;</strong>  makes note duration less.  (On most QWERTY keyboards, comma shifted is <strong>&lt;</strong> and period shifted is <strong>&gt;</strong>).</p>
<p><img src="https://imgur.com/5ZWq2Xe.gif" alt=""></p>`;
const cardDurationTupletsHtmlEn = `
<p>You can create tuplets from the keyboard by typing <strong>Ctrl+3</strong>, <strong>Ctrl+5</strong> or <strong>Ctrl+7</strong> for triplets, quintuplets, and septuplets, respectively.  Individual notes in a tuplet can be doubled and halved with the duration keys <strong>-</strong> (minus) and <strong>=</strong> (equals), just like non-tuplets.  You &#39;untupletify&#39; a tuplet by <strong>Ctrl+0</strong>.</p>
<p><img src="https://imgur.com/uBpQwXD.gif" alt=""></p>`;
const cardSelectionsNotesHtmlEn = ` <p>Many operations in Smoosic act on the selected music.  You select the music the way you select text in a text app, with the <strong>→</strong> to move right, <strong>←</strong> to move left.   <strong>Shift+→</strong> expands the selection left, etc. </p>
<p><img src="https://imgur.com/5ZWq2Xe.gif" alt=""></p>
<p>In the last example, note how the selection is preserved as the notes get shorter.  When you change something, Smoosic will try to keep the selection as close as possible to what you had when the music changes.
You can also use the mouse to select notes.  Selecting a range across multiple staves is not supported (yet).  But you can use <strong>Control+click</strong> to select notes in multiple staves.</p>
`;
const cardSelectionsModifiersHtmlEn = ` 
<p>A modifier is anything that affects a note, such as an articulation or dynamic.  Many modifiers, especially those that affect multiple notes, can be selected with the keyboard.  To select a modifier such as a slur, crescendo, or ending, use &#39;Alt-left arrow&#39; or &#39;Alt-right arrow&#39; when the first or last note of the modifier is selected.  This will move the selecttion between modifiers that apply to that note.</p>
<p>You can also select modifiers with the mouse. </p>
<p>Once selected, you can bring up the modifier dialog by hitting &#39;Enter&#39;.</p>
<p><img src="https://imgur.com/rhOyIKD.gif" alt=""></p>
`;
const cardSelectionsNonSelectableHtmlEn = `
<p>Some modifiers, such as articulations, aren&#39;t selectable.  The keys <strong>h</strong>, <strong>i</strong>, <strong>j</strong>, and <strong>k</strong> bring up articulations that aren&#39;t selectable, but are placed on the note automatically.  You can toggle position and on/off by repeating the key.</p>
<p>Additional articulations are available from the of articulation button group.</p>
<p>You can customize the articulations selected by the key bindings by changing the <code>ui/keyBindings/editorKeys.ts</code> file, or by providing your own bindings.  See the <code>custom-keybinding.html</code> example in the project.</p>
<p><img src="https://imgur.com/RqY9Nzo.gif" alt=""></p>`;
const cardSelectionsSlashHtmlEn = `
<p>The buttons on the left (for L-to-R languages) bring up menus and dialogs.  These dialogs can also be accessed via the &#39;Slash&#39; menus.</p>
<p>For instance, slurs, ties, hairpins and other modifiers that work on a range of music are created from the &#39;Lines&#39; menu.  You can access this via the slash menu:</p>
<p><strong>/</strong> <strong>l</strong> (el, not one) <strong>2</strong></p>
<p>Then you can use the modifier selection to edit the phrase marking to your taste.</p>
<p>You can also select modifiers or any menu option with the mouse.</p>
<p><img src="https://imgur.com/4QfEfSs.gif" alt=""></p>`;
const cardBeamsAndStemsDirectionHtmlEn = `
<h3 id="beams-and-stems-part-1-direction">Beams and Stems part 1: Direction</h3>
<p>The direction of beams and stems is controlled selecting the notes you want to affect and typing <strong>Shift+B</strong>.  The selection will be toggled between auto (default), up, and down. &#39;Auto&#39; means stems are up if the notes are below 3rd line, so the beam direction will change if the notes do. </p>
<p>Note that there are 3 settings, even though only 2 will produce a visible change for any given stem, since &#39;auto&#39; will be either up or down.  </p>
<p><img src="https://imgur.com/itUMVBF.gif" alt=""></p>
`;
const cardBeamsAndStemsGroupingHtmlEn = `
<p>By default, notes are auto-beamed so that a 1/4 note is beamed.  So 1/8 notes in 4/4 time will be beamed in 2&#39;s, 16th notes in 4&#39;s etc.  In triple time (e.g. 6/8, 9/8), 1/8 notes are beamed in 3&#39;s.  You can change this default in the Score Preferences.</p>
<p>You can split a beam at any point using the <strong>x</strong> (mnemonic: <strong>x</strong> to cancel beaming.  You can create a beam by selecting the notes and typing <strong>Shift-X</strong>.  Only notes with 1/8 note duration or less can be beamed.</p>
<p><img src="https://imgur.com/wZmXKq8.gif" alt=""></p>
`;
const cardMeasuresAddDeleteHtmlEn = `
<p>You can add a single measure at the current selection point by pressing <strong>Insert</strong>.  <strong>Shift+Insert</strong> appends the new measure to the selected measure.</p>
<p>To add many measures, you can do this from the &#39;Add Measures&#39; dialog.  This can be brought up through the &#39;Measure&#39; button on the left, or by pressing </p>
<p><strong>/</strong>  <strong>a</strong>  <strong>0</strong> (zero)</p>
<p>Deleting the selected measures can be done from the &#39;Measures&#39; menu on the left, or by pressing </p>
<p><strong>/</strong>  <strong>a</strong> <strong>1</strong>.</p>
<p>Note the insert and delete key behavior is asymmetric.  The <strong>Delete</strong> key is used to toggle notes to rests, and also I thought this made it too easy to accidentally delete a lot of music. </p>
<p><img src="https://imgur.com/gGuxP7G.gif" alt=""></p>
`;
const cardVoicesCreateDeleteHtmlEn = `
<p>If you need different rhythms in the same stave, you can do this by creating multiple voices.  You add a voice to a measure using the voice buttons - you can have up to 4 voices in a measure.  </p>
<p>You can select a differnt voice using the voice buttons also.  </p>
<p>You can delete any voice except voice 1 by selecting the voice, and selecting the <strong>Vx</strong> button.  When a voice is deleted, any voices with a higher number are bumped down - e.g., if you delete voice 2, voice 3 becomes voice 2, etc.</p>
<p>By default, the odd-numbered voices (indexed from 1) have stems that point up.  You can use the <strong>Ctrl+B</strong> to change the staff direction if you want.</p>
<p>Notes in voices &gt; 1 have different colors in the editor.  This is to make editing easier.  All voices are black when the music is printed.</p>
<p><img src="https://imgur.com/HIUH2Pp.gif" alt=""></p>
`;
const cardPartAddDeleteHtmlEn = `    <p>You can add a new stave/part from the parts menu.</p>
<p><strong>/</strong>  <strong>p</strong>  <strong>0</strong> (zero)</p>
<p>From the dialog, you can select the initial properties of the new stave, such as the clef and transposition.</p>
<p>To delete the selected staves:
<strong>/</strong>  <strong>p</strong>  <strong>1</strong> (zero)</p>
<p>Note that you can&#39;t delete the only stave - the music will always contain at least one stave.</p>
<p>Note:  The &#39;Part&#39; menu may show different options depending on what else is in the score.  Other characteristics of the part and staff are covered in the &#39;Working with Scores&#39; section.</p>
<p><img src="https://imgur.com/7GAia6G.gif" alt=""></p>
`;
const helpCards = [cardKeysHtmlEn, cardNotesLetterHtmlEn, cardNotesChromaticHtmlEn, cardNotesChordsHtmlEn,
    cardNotesRestsHtmlEn, cardDurationNotesHtmlEn, cardDurationTupletsHtmlEn,
    cardSelectionsNotesHtmlEn, cardSelectionsModifiersHtmlEn, cardSelectionsNonSelectableHtmlEn, cardSelectionsSlashHtmlEn,
    cardBeamsAndStemsDirectionHtmlEn, cardBeamsAndStemsGroupingHtmlEn,
    cardMeasuresAddDeleteHtmlEn, cardVoicesCreateDeleteHtmlEn, cardPartAddDeleteHtmlEn
];


/***/ }),

/***/ "./src/ui/i18n/translationEditor.ts":
/*!******************************************!*\
  !*** ./src/ui/i18n/translationEditor.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoTranslationEditor: () => (/* binding */ SmoTranslationEditor)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./language */ "./src/ui/i18n/language.ts");
/* harmony import */ var _buttons_ribbon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../buttons/ribbon */ "./src/ui/buttons/ribbon.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



// ## SmoTranslationEditor
// Create a somewhat user-friendly editor DOM to translate SMO
// dialogs and menus, and any subset, into other languages.
class SmoTranslationEditor {
    // ### _getHtmlTextInput
    // All the editable text elements contain: the code label or value from the
    // UI element, the En string, and  the translated string, or a copy of the
    // EN string if the string has not been translated.
    static _getHtmlTextInput(dbLabel, enLabel, langLabel, labelType, labelId) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const compHtml = b('div').classes('dialog-element-container')
            .attr('data-' + labelType, labelId).append(b('div').classes('dialog-component-label').append(b('span').classes('trans-label').append(b('span').classes('trans-db-text').text(dbLabel)).append(b('span').classes('trans-en-text').text(enLabel)).append(b('input').classes('trans-label-input')).append(b('span').classes('plaintext-translate hide').text(langLabel)))).dom();
        return compHtml;
    }
    // ### _getMenuTextDialogHtml
    // Get all the menu item labels for translation
    static _getMenuTextDialogHtml(menuCtor, enStrings, langStrings) {
        const menuClass = eval('globalThis.Smo.' + menuCtor);
        const menuItems = menuClass['defaults'].menuItems;
        var enMenu = enStrings.menus.find((mn) => mn.ctor === menuCtor);
        // Get the JSON EN menu, or copy the DB strings if it doesn't exist
        if (!enMenu) {
            enMenu = JSON.parse(JSON.stringify(menuClass['defaults']));
            enMenu.ctor = menuCtor;
        }
        // Get the JSON language menu strings, or copy the EN strings if it doesn't exist
        var langMenu = langStrings.menus.find((mn) => mn.ctor === menuCtor);
        if (!langMenu) {
            langMenu = JSON.parse(JSON.stringify(menuClass['defaults']));
            langMenu.ctor = menuCtor;
        }
        // create the DOM menu container
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const container = b('div').classes('menu-translate-container')
            .attr('data-menucontainer', menuCtor).append(b('button').classes('icon-plus trans-expander')).append(b('span').classes('menu-translate-title').text(menuCtor)).dom();
        const menuItemsDom = b('div').classes('menu-element-container').dom();
        // create the label editor
        const menuLabel = SmoTranslationEditor._getHtmlTextInput(menuClass['defaults'].label, enMenu.label, langMenu.label, 'menulabel', menuCtor);
        $(menuItemsDom).append(menuLabel);
        $(container).append(menuItemsDom);
        // create the editor for each item
        menuItems.forEach((item) => {
            var enItem = enMenu.menuItems.find((mi) => mi.value === item.value);
            if (!enItem) {
                enItem = JSON.parse(JSON.stringify(item));
            }
            var langItem = langMenu.menuItems.find((mi) => mi.value === item.value);
            if (!langItem) {
                langItem = JSON.parse(JSON.stringify(item));
            }
            const menuItemDom = b('div').classes('menu-item-container').dom();
            const itemEditDom = SmoTranslationEditor._getHtmlTextInput(item.value, enItem.text, langItem.text, 'itemtext', item.value);
            $(menuItemDom).append(itemEditDom);
            $(menuItemsDom).append(menuItemDom);
        });
        return container;
    }
    static getButtonTranslateHtml(enStrings, langStrings, transContainer) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var buttonDom = b('div').classes('ribbon-translate-container')
            .attr('data-ribbon-translate', 'buttons').append(b('button').classes('icon-plus trans-expander')).append(b('span').classes('ribbon-translate-title').text('Button Text')).dom();
        var enKeys = enStrings.buttonText;
        if (!enKeys) {
            enKeys = JSON.parse(JSON.stringify(_buttons_ribbon__WEBPACK_IMPORTED_MODULE_2__.RibbonButtons.translateButtons));
        }
        var langKeys = langStrings.buttonText;
        if (!langKeys) {
            langKeys = JSON.parse(JSON.stringify(_buttons_ribbon__WEBPACK_IMPORTED_MODULE_2__.RibbonButtons.translateButtons));
        }
        enKeys.forEach((button) => {
            const langObj = langKeys.find((langText) => langText.buttonId === button.buttonId);
            const langString = langObj ? langObj.buttonText : button.buttonText;
            var buttonContainer = b('div').classes('ribbon-button-container')
                .attr('data-buttoncontainer', button.buttonId).dom();
            $(buttonContainer).append(SmoTranslationEditor._getHtmlTextInput(button.buttonId, button.buttonText, langString, 'ribbon-button', button.buttonId));
            $(buttonDom).append(buttonContainer);
        });
        $(transContainer).append(buttonDom);
    }
    // ### _getStaticTextDialogHtml
    // create DOM for the static text section of the dialogs.
    static _getStaticTextDialogHtml(elements, enDb, langDb, htmlContainer) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const keys = Object.keys(elements.staticText);
        const nodeContainer = b('div')
            .classes('dialog-element-container')
            .attr('data-component', 'staticText')
            .dom();
        elements.staticText.forEach((nv) => {
            const name = Object.keys(nv)[0];
            const value = nv[name];
            var enVal = enDb[name] ? enDb[name] : value;
            var langVal = langDb[name] ? langDb[name] : enDb[name];
            const translateElement = SmoTranslationEditor._getHtmlTextInput(name, enVal, langVal, 'statictext', name);
            $(nodeContainer).append(translateElement);
        });
        $(htmlContainer).append(nodeContainer);
    }
    static _getDialogComponentHtml(element, enDb, langDb, container) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var label = element.label;
        var smoName = element.smoName;
        if (typeof (enDb.dialogElements.find) !== 'function') {
            console.warn('no ENDB!');
        }
        var enComponent = enDb.dialogElements.find((st) => st.id === smoName);
        if (!enComponent) {
            enComponent = JSON.parse(JSON.stringify(element));
        }
        var langComponent = langDb.dialogElements.find((st) => st.id === smoName);
        if (!langComponent) {
            langComponent = JSON.parse(JSON.stringify(element));
        }
        const enLabel = enComponent.label ? enComponent.label : label;
        const langLabel = langComponent.label ? langComponent.label : label;
        const compHtml = SmoTranslationEditor._getHtmlTextInput(label, enLabel, langLabel, 'component', smoName);
        if (element.options) {
            const optionsHtml = b('div').classes('dialog-component-options').dom();
            $(compHtml).append(optionsHtml);
            if (!enComponent.options) {
                enComponent.options = JSON.parse(JSON.stringify(element.options));
            }
            if (!langComponent.options) {
                langComponent.options = JSON.parse(JSON.stringify(element.options));
            }
            element.options.forEach((option) => {
                var enOption = enComponent.options.find((op) => op.value === option.value);
                var langOption = langComponent.options.find((op) => op.value === option.value);
                if (!enOption || !enOption.label) {
                    enOption = JSON.parse(JSON.stringify(option));
                }
                if (!langOption || !langOption.label) {
                    langOption = JSON.parse(JSON.stringify(option));
                }
                const optionHtml = SmoTranslationEditor._getHtmlTextInput(option.value.toString(), enOption.label, langOption.label, 'component-option', option.value.toString());
                $(optionsHtml).append(optionHtml);
            });
        }
        $(container).append(compHtml);
    }
    static getDialogTranslationHtml(dialogCtor, enStrings, langStrings) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var container = b('div').classes('db-translate-container').attr('data-dbcontainer', dialogCtor)
            .append(b('button').classes('icon-plus trans-expander'))
            .append(b('span').classes('db-translate-title').text(dialogCtor)).dom();
        var ctor = eval('globalThis.Smo.' + dialogCtor);
        if (!ctor) {
            console.warn('Bad dialog in translate: ' + dialogCtor);
            return;
        }
        var elements = ctor.dialogElements;
        var enDb = enStrings.dialogs.find((dbStr) => dbStr.ctor === dialogCtor);
        if (!enDb) {
            enDb = JSON.parse(JSON.stringify({
                ctor: dialogCtor, label: elements.label, dialogElements: elements.elements, staticText: elements.staticText
            }));
        }
        var langDb = langStrings.dialogs.find((dbStr) => dbStr.ctor === dialogCtor);
        if (!langDb) {
            langDb = JSON.parse(JSON.stringify({
                ctor: dialogCtor, label: elements.label, dialogElements: elements.elements, staticText: elements.staticText
            }));
        }
        const htmlText = SmoTranslationEditor._getHtmlTextInput(dialogCtor, enDb.label, langDb.label, 'dialog-label', dialogCtor);
        $(container).append(htmlText);
        if (elements.staticText) {
            SmoTranslationEditor._getStaticTextDialogHtml(elements, enDb.staticText, langDb.staticText, container);
        }
        elements.elements.forEach((element) => {
            if (element.smoName && element.label) {
                SmoTranslationEditor._getDialogComponentHtml(element, enDb, langDb, container);
            }
        });
        return container;
    }
    static getAllTranslationHtml(lang) {
        const enStr = _language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage.en.strings;
        const langStr = _language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage[lang].strings;
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var container = b('div').classes('top-translate-container')
            .attr('dir', _language__WEBPACK_IMPORTED_MODULE_1__.SmoLanguage[lang].dir).dom();
        _language__WEBPACK_IMPORTED_MODULE_1__.SmoTranslator.allDialogs.forEach((dialog) => {
            const htmlDom = SmoTranslationEditor.getDialogTranslationHtml(dialog, enStr, langStr);
            if (htmlDom) {
                $(container).append(htmlDom);
            }
        });
        _language__WEBPACK_IMPORTED_MODULE_1__.SmoTranslator.allMenus.forEach((menu) => {
            $(container).append(SmoTranslationEditor._getMenuTextDialogHtml(menu, enStr, langStr));
        });
        SmoTranslationEditor.getButtonTranslateHtml(enStr, langStr, container);
        var resultDom = b('div').classes('translation-json-container').append(b('textarea').classes('translation-json-text')).append(b('div').append(b('button').classes('translate-submit-button').text('Submit'))).dom();
        $(container).append(resultDom);
        return container;
    }
    static parseDom() {
        var json = [];
        // $('.top-translate-container .db-translate-container[data-dbcontainer] [data-component="staticText"]')
        $('.top-translate-container .db-translate-container[data-dbcontainer]').each((ix, dbEl) => {
            var db = $(dbEl).attr('data-dbcontainer');
            var obj = { ctor: db };
            var elements = [];
            var domComponents = $(dbEl).find('[data-component]');
            $(domComponents).each(function (ix, domComponent) {
                const compType = $(domComponent).attr('data-component');
                if (compType === 'staticText') {
                    var stElements = [];
                    $(domComponent).find('[data-statictext]').each((ix, stDom) => {
                        const key = $(stDom).attr('data-statictext');
                        const value = $(stDom).find('input.trans-label-input').val();
                        const stNode = JSON.parse('{"' + key + '":"' + value + '"}');
                        stElements.push(stNode);
                    });
                    elements.push({ staticText: stElements });
                }
                else {
                    var dbComponent = { id: compType, label: '', options: {} };
                    dbComponent.label = $(domComponent).find('input.trans-label-input').val();
                    var compOptions = [];
                    $(domComponent).find('[data-component-option]').each(function (ix, optionDom) {
                        const value = $(optionDom).find('.trans-db-text').text();
                        const label = $(optionDom).find('input.trans-label-input').val();
                        compOptions.push({ value: value, label: label });
                    });
                    dbComponent.options = compOptions;
                    elements.push(dbComponent);
                }
            });
            obj.dialogElements = elements;
            json.push(obj);
        });
        $('.menu-translate-container[data-menucontainer]').each((ix, menuEl) => {
            var menuId = $(menuEl).attr('data-menucontainer');
            var obj = { ctor: menuId, label: '', options: {}, menuItems: {} };
            const menuLabel = $(menuEl)
                .find('.dialog-element-container[data-menulabel] .trans-label-input')
                .val();
            obj.label = menuLabel;
            var menuItems = [];
            var itemsDom = $(menuEl).find('.menu-item-container .dialog-element-container');
            $(itemsDom).each((ix, itemDom) => {
                const value = $(itemDom).find('.trans-db-text').text();
                const text = $(itemDom).find('input.trans-label-input').val();
                menuItems.push({ value: value, text: text });
            });
            obj.menuItems = menuItems;
            json.push(obj);
        });
        var ribbonText = [];
        $('.ribbon-translate-container .ribbon-button-container').each((ix, buttonEl) => {
            const buttonId = $(buttonEl).find('.trans-db-text').text();
            const buttonText = $(buttonEl).find('input.trans-label-input').val();
            ribbonText.push({ buttonId: buttonId, buttonText: buttonText });
        });
        json.push({ ribbonText: ribbonText });
        return json;
    }
    static startEditor(lang) {
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('.translation-editor');
        var transDom = SmoTranslationEditor.getAllTranslationHtml(lang);
        $('.translation-editor').append(transDom);
        $('body').addClass('translation-mode');
        $('.plaintext-translate').each(function (ix, el) {
            var txt = $(el).text();
            $(el).closest('.trans-label').find('input.trans-label-input').val(txt);
        });
        $('.db-translate-container button.trans-expander').off('click').on('click', function (ev) {
            var exp = $(ev.target).closest('.db-translate-container');
            if ($(exp).hasClass('expanded')) {
                $(exp).removeClass('expanded');
                $(ev.target).removeClass('icon-minus');
                $(ev.target).addClass('icon-plus');
            }
            else {
                $(exp).addClass('expanded');
                $(ev.target).addClass('icon-minus');
                $(ev.target).removeClass('icon-plus');
            }
        });
        $('.menu-translate-container button.trans-expander').off('click').on('click', function (ev) {
            var exp = $(ev.target).closest('.menu-translate-container');
            if ($(exp).hasClass('expanded')) {
                $(exp).removeClass('expanded');
                $(ev.target).removeClass('icon-minus');
                $(ev.target).addClass('icon-plus');
            }
            else {
                $(exp).addClass('expanded');
                $(ev.target).addClass('icon-minus');
                $(ev.target).removeClass('icon-plus');
            }
        });
        $('.ribbon-translate-container button.trans-expander').off('click').on('click', function () {
            const dom = $('.ribbon-translate-container button.trans-expander');
            var exp = $(dom).closest('.ribbon-translate-container');
            if ($(exp).hasClass('expanded')) {
                $(exp).removeClass('expanded');
                $(dom).removeClass('icon-minus');
                $(dom).addClass('icon-plus');
            }
            else {
                $(exp).addClass('expanded');
                $(dom).addClass('icon-minus');
                $(dom).removeClass('icon-plus');
            }
        });
        $('.translate-submit-button').off('click').on('click', () => {
            var json = SmoTranslationEditor.parseDom();
            $('.translation-json-text').val(JSON.stringify(json, null, ' '));
        });
    }
}


/***/ }),

/***/ "./src/ui/keyBindings/default/editorKeys.ts":
/*!**************************************************!*\
  !*** ./src/ui/keyBindings/default/editorKeys.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultEditorKeys: () => (/* binding */ defaultEditorKeys)
/* harmony export */ });
class defaultEditorKeys {
    static get keys() {
        return [{
                event: "keydown",
                key: "=",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "transposeUp"
            }, {
                event: "keydown",
                key: "-",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "transposeDown"
            }, {
                event: "keydown",
                key: "+",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "upOctave"
            }, {
                event: "keydown",
                key: "_",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "downOctave"
            }, {
                event: "keydown",
                key: "F",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "toggleCourtesyAccidental"
            }, {
                event: "keydown",
                key: ".",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "doubleDuration"
            }, {
                event: "keydown",
                key: ",",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "halveDuration"
            }, {
                event: "keydown",
                key: ">",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "dotDuration"
            }, {
                event: "keydown",
                key: "<",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "undotDuration"
            }, {
                event: "keydown",
                key: "a",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "A",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "slashGraceNotes"
            }, {
                event: "keydown",
                key: "b",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "G",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addGraceNote"
            }, {
                event: "keydown",
                key: "g",
                ctrlKey: false,
                altKey: true,
                shiftKey: false,
                action: "removeGraceNote"
            }, {
                event: "keydown",
                key: "c",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "d",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "e",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "f",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "g",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "setPitch"
            }, {
                event: "keydown",
                key: "r",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "makeRest"
            }, {
                event: "keydown",
                key: "r",
                ctrlKey: false,
                altKey: true,
                shiftKey: false,
                action: "rerender"
            }, {
                event: "keydown",
                key: "p",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "playScore"
            }, {
                event: "keydown",
                key: "P",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "pausePlayer"
            },
            { event: "keydown",
                key: " ",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "togglePlayer"
            },
            {
                event: "keydown",
                key: "s",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "stopPlayer"
            }, {
                event: "keydown",
                key: "t",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "tempoDialog"
            },
            {
                event: "keydown",
                key: "3",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "makeTuplet"
            }, {
                event: "keydown",
                key: "5",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "makeTuplet"
            }, {
                event: "keydown",
                key: "7",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "makeTuplet"
            },
            // interval commands
            {
                event: "keydown",
                key: "2",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "3",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "4",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "5",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "6",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "7",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "8",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "interval"
            }, {
                event: "keydown",
                key: "@",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "$",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "#",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "%",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "^",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "&",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "*",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "8",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "interval"
            }, {
                event: "keydown",
                key: "0",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "unmakeTuplet"
            }, {
                event: "keydown",
                key: "Insert",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "addMeasure"
            }, {
                event: "keydown",
                key: "Insert",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addMeasure"
            }, {
                event: "keydown",
                key: "i",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "addMeasure"
            }, {
                event: "keydown",
                key: "I",
                ctrlKey: true,
                altKey: false,
                shiftKey: true,
                action: "addMeasure"
            }, {
                event: "keydown",
                key: "B",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "toggleBeamDirection"
            }, {
                event: "keydown",
                key: "Delete",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "deleteNote"
            }, {
                event: "keydown",
                key: "d",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "deleteNote"
            }, {
                event: "keydown",
                key: "z",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "undo"
            }, {
                event: "keydown",
                key: "c",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "copy"
            }, {
                event: "keydown",
                key: "x",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "toggleBeamGroup"
            }, {
                event: "keydown",
                key: "X",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "beamSelections"
            }, {
                event: "keydown",
                key: "v",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "paste"
            }, {
                event: "keydown",
                key: "h",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "addRemoveAccent"
            }, {
                event: "keydown",
                key: "i",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "addRemoveTenuto"
            }, {
                event: "keydown",
                key: "j",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "addRemoveStaccato"
            }, {
                event: "keydown",
                key: "k",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "addRemoveMarcato"
            }, {
                event: "keydown",
                key: "l",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "addRemovePizzicato"
            }, {
                event: "keydown",
                key: "H",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addRemoveAccent"
            }, {
                event: "keydown",
                key: "I",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addRemoveTenuto"
            }, {
                event: "keydown",
                key: "J",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addRemoveStaccato"
            }, {
                event: "keydown",
                key: "K",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addRemoveMarcato"
            }, {
                event: "keydown",
                key: "L",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "addRemovePizzicato"
            }, {
                event: "keydown",
                key: "E",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "toggleEnharmonic"
            }
        ];
    }
}


/***/ }),

/***/ "./src/ui/keyBindings/default/trackerKeys.ts":
/*!***************************************************!*\
  !*** ./src/ui/keyBindings/default/trackerKeys.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultTrackerKeys: () => (/* binding */ defaultTrackerKeys)
/* harmony export */ });
class defaultTrackerKeys {
    static get keys() {
        return [{
                event: "keydown",
                key: "Home",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "moveHome"
            }, {
                event: "keydown",
                key: "Home",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "moveHome"
            }, {
                event: "keydown",
                key: "Home",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "moveHome"
            }, {
                event: "keydown",
                key: "Home",
                ctrlKey: true,
                altKey: false,
                shiftKey: true,
                action: "moveHome"
            }, {
                event: "keydown",
                key: "End",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "moveEnd"
            }, {
                event: "keydown",
                key: "End",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "moveHome"
            }, {
                event: "keydown",
                key: "End",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "moveEnd"
            }, {
                event: "keydown",
                key: "End",
                ctrlKey: true,
                altKey: false,
                shiftKey: true,
                action: "moveEnd"
            }, {
                event: "keydown",
                key: "ArrowRight",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "moveSelectionRight"
            }, {
                event: "keydown",
                key: "ArrowRight",
                ctrlKey: false,
                altKey: true,
                shiftKey: false,
                action: "advanceModifierSelection"
            }, {
                event: "keydown",
                key: "ArrowLeft",
                ctrlKey: false,
                altKey: true,
                shiftKey: false,
                action: "advanceModifierSelection"
            }, {
                event: "keydown",
                key: "ArrowLeft",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "moveSelectionLeft"
            }, {
                event: "keydown",
                key: "ArrowRight",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "growSelectionRight"
            }, {
                event: "keydown",
                key: "ArrowRight",
                ctrlKey: true,
                altKey: false,
                shiftKey: true,
                action: "growSelectionRightMeasure"
            }, {
                event: "keydown",
                key: "ArrowLeft",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "growSelectionLeft"
            }, {
                event: "keydown",
                key: "ArrowUp",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "moveSelectionUp"
            }, {
                event: "keydown",
                key: "ArrowDown",
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: "moveSelectionDown"
            }, {
                event: "keydown",
                key: "ArrowRight",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "moveSelectionRightMeasure"
            }, {
                event: "keydown",
                key: "ArrowLeft",
                ctrlKey: true,
                altKey: false,
                shiftKey: false,
                action: "moveSelectionLeftMeasure"
            }, {
                event: "keydown",
                key: "ArrowUp",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "moveSelectionPitchUp"
            }, {
                event: "keydown",
                key: "ArrowDown",
                ctrlKey: false,
                altKey: false,
                shiftKey: true,
                action: "moveSelectionPitchDown"
            }
        ];
    }
}


/***/ }),

/***/ "./src/ui/menus/dynamics.ts":
/*!**********************************!*\
  !*** ./src/ui/menus/dynamics.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiDynamicsMenu: () => (/* binding */ SuiDynamicsMenu)
/* harmony export */ });
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");


class SuiDynamicsMenu extends _menu__WEBPACK_IMPORTED_MODULE_1__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    getDefinition() {
        return SuiDynamicsMenu.defaults;
    }
    selection(ev) {
        const text = $(ev.currentTarget).attr('data-value');
        const props = _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText.defaults;
        props.text = text;
        const dynamic = new _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_0__.SmoDynamicText(props);
        this.view.addDynamic(this.tracker.selections[0], dynamic);
        this.complete();
    }
    keydown() { }
}
SuiDynamicsMenu.defaults = {
    label: 'Dynamics',
    menuItems: [{
            icon: 'pianissimo',
            text: 'Pianissimo',
            value: 'pp'
        }, {
            icon: 'piano',
            text: 'Piano',
            value: 'p'
        }, {
            icon: 'mezzopiano',
            text: 'Mezzo-piano',
            value: 'mp'
        }, {
            icon: 'mezzoforte',
            text: 'Mezzo-forte',
            value: 'mf'
        }, {
            icon: 'forte',
            text: 'Forte',
            value: 'f'
        }, {
            icon: 'fortissimo',
            text: 'Fortissimo',
            value: 'ff'
        }, {
            icon: 'sfz',
            text: 'sfortzando',
            value: 'sfz'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/menus/file.ts":
/*!******************************!*\
  !*** ./src/ui/menus/file.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiFileMenu: () => (/* binding */ SuiFileMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/fileDialogs */ "./src/ui/dialogs/fileDialogs.ts");
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../smo/data/score */ "./src/smo/data/score.ts");




class SuiFileMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    getDefinition() {
        return SuiFileMenu.defaults;
    }
    systemPrint() {
        window.print();
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiPrintFileDialog, {
            ctor: 'SuiPrintFileDialog',
            id: 'print',
            eventSource: this.eventSource,
            modifier: null,
            view: this.view,
            completeNotifier: this.completeNotifier,
            startPromise: this.closePromise,
            tracker: this.tracker
        });
    }
    selection(ev) {
        const text = $(ev.currentTarget).attr('data-value');
        const self = this;
        if (text === 'saveFile') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiSaveFileDialog, {
                ctor: 'SuiSaveFileDialog',
                id: 'save',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        else if (text === 'openFile') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiLoadFileDialog, {
                ctor: 'SuiLoadFileDialog',
                id: 'loadFile',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        else if (text === 'newFile') {
            const score = _smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.getDefaultScore(_smo_data_score__WEBPACK_IMPORTED_MODULE_3__.SmoScore.defaults, null);
            this.view.changeScore(score);
        }
        else if (text === 'quickSave') {
            this.view.quickSave();
        }
        else if (text === 'printScore') {
            const systemPrint = () => {
                self.systemPrint();
            };
            this.view.renderer.renderForPrintPromise().then(systemPrint);
        }
        else if (text === 'exportXml') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiSaveXmlDialog, {
                ctor: 'SuiSaveXmlDialog',
                id: 'save',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        else if (text === 'exportVex') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiSaveVexDialog, {
                ctor: 'SuiSaveVexDialog',
                id: 'save',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        else if (text === 'exportMidi') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiSaveMidiDialog, {
                ctor: 'SuiSaveMidiDialog',
                id: 'save',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        else if (text === 'importMxml') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiLoadMxmlDialog, {
                ctor: 'SuiLoadMxmlDialog',
                id: 'save',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        else if (text === 'importMidi') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_2__.SuiLoadMidiDialog, {
                ctor: 'SuiLoadMidiDialog',
                id: 'save',
                modifier: null,
                completeNotifier: this.completeNotifier,
                tracker: this.tracker,
                eventSource: this.eventSource,
                view: this.view,
                startPromise: this.closePromise
            });
        }
        this.complete();
    }
    keydown() { }
}
SuiFileMenu.defaults = {
    label: 'File',
    menuItems: [{
            icon: 'folder-new',
            text: 'New Score',
            value: 'newFile'
        }, {
            icon: 'folder-open',
            text: 'Open',
            value: 'openFile'
        }, {
            icon: '',
            text: 'Quick Save',
            value: 'quickSave'
        }, {
            icon: 'folder-save',
            text: 'Save',
            value: 'saveFile'
        }, {
            icon: '',
            text: 'Print',
            value: 'printScore'
        }, {
            icon: '',
            text: 'Import MusicXML',
            value: 'importMxml'
        }, {
            icon: '',
            text: 'Export MusicXML',
            value: 'exportXml'
        }, {
            icon: '',
            text: 'Export Midi',
            value: 'exportMidi'
        }, {
            icon: '',
            text: 'Import Midi',
            value: 'importMidi'
        }, {
            icon: '',
            text: 'Export Vex',
            value: 'exportVex'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/menus/keySignature.ts":
/*!**************************************!*\
  !*** ./src/ui/menus/keySignature.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiKeySignatureMenu: () => (/* binding */ SuiKeySignatureMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");

class SuiKeySignatureMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    static get ctor() {
        return 'SuiKeySignatureMenu';
    }
    getDefinition() {
        return SuiKeySignatureMenu.defaults;
    }
    selection(ev) {
        let keySig = $(ev.currentTarget).attr('data-value');
        keySig = (keySig === 'cancel' ? keySig : keySig.substring(5, keySig.length));
        if (keySig === 'cancel') {
            return;
        }
        this.view.addKeySignature(keySig);
        this.complete();
    }
    keydown() { }
}
SuiKeySignatureMenu.defaults = {
    label: 'Key',
    menuItems: [{
            icon: 'key-sig-c',
            text: 'C Major',
            value: 'KeyOfC',
        }, {
            icon: 'key-sig-f',
            text: 'F Major',
            value: 'KeyOfF',
        }, {
            icon: 'key-sig-g',
            text: 'G Major',
            value: 'KeyOfG',
        }, {
            icon: 'key-sig-bb',
            text: 'Bb Major',
            value: 'KeyOfBb'
        }, {
            icon: 'key-sig-d',
            text: 'D Major',
            value: 'KeyOfD'
        }, {
            icon: 'key-sig-eb',
            text: 'Eb Major',
            value: 'KeyOfEb'
        }, {
            icon: 'key-sig-a',
            text: 'A Major',
            value: 'KeyOfA'
        }, {
            icon: 'key-sig-ab',
            text: 'Ab Major',
            value: 'KeyOfAb'
        }, {
            icon: 'key-sig-e',
            text: 'E Major',
            value: 'KeyOfE'
        }, {
            icon: 'key-sig-bd',
            text: 'Db Major',
            value: 'KeyOfDb'
        }, {
            icon: 'key-sig-b',
            text: 'B Major',
            value: 'KeyOfB'
        }, {
            icon: 'key-sig-fs',
            text: 'F# Major',
            value: 'KeyOfF#'
        }, {
            icon: 'key-sig-cs',
            text: 'C# Major',
            value: 'KeyOfC#'
        },
        {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/menus/language.ts":
/*!**********************************!*\
  !*** ./src/ui/menus/language.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiLanguageMenu: () => (/* binding */ SuiLanguageMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _i18n_language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../i18n/language */ "./src/ui/i18n/language.ts");


class SuiLanguageMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    static get ctor() {
        return 'SuiLanguageMenu';
    }
    getDefinition() {
        return SuiLanguageMenu.defaults;
    }
    selection(ev) {
        var op = $(ev.currentTarget).attr('data-value');
        _i18n_language__WEBPACK_IMPORTED_MODULE_1__.SmoTranslator.setLanguage(op);
        this.complete();
    }
    keydown() {
    }
}
SuiLanguageMenu.defaults = {
    label: 'Language',
    menuItems: [{
            icon: '',
            text: 'English',
            value: 'en'
        }, {
            icon: '',
            text: 'Deutsch',
            value: 'de'
        }, {
            icon: '',
            text: 'اَلْعَرَبِيَّةُ',
            value: 'ar'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/menus/manager.ts":
/*!*********************************!*\
  !*** ./src/ui/menus/manager.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiMenuManager: () => (/* binding */ SuiMenuManager)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../render/sui/layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _qwerty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../qwerty */ "./src/ui/qwerty.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.



class SuiMenuManager {
    constructor(params) {
        var _a;
        this.bound = false;
        this.hotkeyBindings = {};
        this.closeMenuPromise = null;
        this.menu = null;
        this.keydownHandler = null;
        this.menuPosition = { x: 250, y: 40, width: 1, height: 1 };
        this.menuBind = SuiMenuManager.menuKeyBindingDefaults;
        this.eventSource = params.eventSource;
        this.view = params.view;
        this.bound = false;
        this.menuContainer = (_a = params.menuContainer) !== null && _a !== void 0 ? _a : (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('.menuContainer');
        this.completeNotifier = params.completeNotifier;
        this.undoBuffer = params.undoBuffer;
        this.tracker = params.view.tracker;
    }
    static get defaults() {
        return {
            menuBind: SuiMenuManager.menuKeyBindingDefaults,
            menuContainer: '.menuContainer'
        };
    }
    get closeModalPromise() {
        return this.closeMenuPromise;
    }
    setController(c) {
        this.completeNotifier = c;
    }
    get score() {
        return this.view.score;
    }
    // ### Description:
    // slash ('/') menu key bindings.  The slash key followed by another key brings up
    // a menu.
    static get menuKeyBindingDefaults() {
        return [
            {
                event: 'keydown',
                key: 'n',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiLanguageMenu'
            }, {
                event: 'keydown',
                key: 'k',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiKeySignatureMenu'
            }, {
                event: 'keydown',
                key: 'p',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiPartMenu'
            }, {
                event: 'keydown',
                key: 'l',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiStaffModifierMenu'
            }, {
                event: 'keydown',
                key: 'd',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiDynamicsMenu'
            }, {
                event: 'keydown',
                key: 'f',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiFileMenu'
            }, {
                event: 'keydown',
                key: 'm',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiTimeSignatureMenu'
            }, {
                event: 'keydown',
                key: 'a',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiMeasureMenu'
            }, {
                event: 'partSelection',
                key: '',
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                action: 'SuiPartSelectionMenu'
            }
        ];
    }
    _advanceSelection(inc) {
        if (!this.menu) {
            return;
        }
        const options = $('.menuContainer ul.menuElement li.menuOption');
        inc = inc < 0 ? options.length - 1 : 1;
        this.menu.focusIndex = (this.menu.focusIndex + inc) % options.length;
        $(options[this.menu.focusIndex]).find('button').focus();
    }
    unattach() {
        if (!this.keydownHandler) {
            return;
        }
        this.eventSource.unbindKeydownHandler(this.keydownHandler);
        $('body').removeClass('modal');
        $(this.menuContainer).html('');
        $('body').off('dismissMenu');
        this.bound = false;
        this.menu = null;
    }
    attach() {
        if (!this.menu) {
            return;
        }
        let hotkey = 0;
        $(this.menuContainer).html('');
        $(this.menuContainer).attr('z-index', '12');
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const r = b('ul').classes('menuElement').attr('size', this.menu.menuItems.length.toString())
            .css('left', '' + this.menuPosition.x + 'px')
            .css('top', '' + this.menuPosition.y + 'px');
        this.menu.menuItems.forEach((item) => {
            var vkey = (hotkey < 10) ? String.fromCharCode(48 + hotkey) :
                String.fromCharCode(87 + hotkey);
            r.append(b('li').classes('menuOption').append(b('button').attr('data-value', item.value).append(b('span').classes('menuText').text(item.text))
                .append(b('span').classes('icon icon-' + item.icon))
                .append(b('span').classes('menu-key').text('' + vkey))));
            item.hotkey = vkey;
            hotkey += 1;
        });
        $(this.menuContainer).append(r.dom());
        $('body').addClass('modal');
        this.bindEvents();
    }
    slashMenuMode(completeNotifier) {
        var self = this;
        if (this.closeMenuPromise) {
            console.log('menu already open, skipping');
            return;
        }
        this.bindEvents();
        _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_1__.layoutDebug.addDialogDebug('slash menu creating closeMenuPromise');
        // A menu asserts this event when it is done.
        this.closeMenuPromise = new Promise((resolve) => {
            $('body').off('menuDismiss').on('menuDismiss', () => {
                _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_1__.layoutDebug.addDialogDebug('menuDismiss received, resolve closeMenuPromise');
                self.unattach();
                $('body').removeClass('slash-menu');
                self.closeMenuPromise = null;
                resolve();
            });
        });
        // take over the keyboard
        if (this.closeModalPromise) {
            completeNotifier.unbindKeyboardForModal(this);
        }
    }
    dismiss() {
        $('body').trigger('menuDismiss');
    }
    displayMenu(menu) {
        this.menu = menu;
        if (!this.menu) {
            return;
        }
        this.menu.preAttach();
        this.attach();
        this.menu.menuItems.forEach((item) => {
            if (typeof (item.hotkey) !== 'undefined') {
                this.hotkeyBindings[item.hotkey] = item.value;
            }
        });
    }
    createMenu(action) {
        if (!this.completeNotifier) {
            return;
        }
        this.menuPosition = { x: 250, y: 40, width: 1, height: 1 };
        // If we were called from the ribbon, we notify the controller that we are
        // taking over the keyboard.  If this was a key-based command we already did.
        _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_1__.layoutDebug.addDialogDebug('createMenu creating ' + action);
        const ctor = eval('globalThis.Smo.' + action);
        const params = {
            position: this.menuPosition,
            tracker: this.tracker,
            score: this.score,
            completeNotifier: this.completeNotifier,
            closePromise: this.closeMenuPromise,
            view: this.view,
            eventSource: this.eventSource,
            undoBuffer: this.undoBuffer,
            ctor: action
        };
        this.displayMenu(new ctor(params));
    }
    // ### evKey
    // We have taken over menu commands from controller.  If there is a menu active, send the key
    // to it.  If there is not, see if the keystroke creates one.  If neither, dismissi the menu.
    evKey(event) {
        _qwerty__WEBPACK_IMPORTED_MODULE_2__.Qwerty.handleKeyEvent(event);
        if (['Tab', 'Enter'].indexOf(event.code) >= 0) {
            return;
        }
        event.preventDefault();
        if (event.code === 'Escape') {
            this.dismiss();
        }
        if (this.menu) {
            if (event.code === 'ArrowUp') {
                this._advanceSelection(-1);
            }
            else if (event.code === 'ArrowDown') {
                this._advanceSelection(1);
            }
            else if (this.hotkeyBindings[event.key]) {
                $('button[data-value="' + this.hotkeyBindings[event.key] + '"]').click();
            }
            else {
                this.menu.keydown();
            }
            return;
        }
        const binding = this.menuBind.find((ev) => ev.key === event.key);
        if (!binding) {
            this.dismiss();
            return;
        }
        this.createMenu(binding.action);
    }
    bindEvents() {
        this.hotkeyBindings = {};
        $('body').addClass('slash-menu');
        // We need to keep track of is bound, b/c the menu can be created from
        // different sources.
        if (!this.bound) {
            this.keydownHandler = this.eventSource.bindKeydownHandler(this, 'evKey');
            this.bound = true;
        }
        $(this.menuContainer).find('button').off('click').on('click', (ev) => {
            if ($(ev.currentTarget).attr('data-value') === 'cancel') {
                this.menu.complete();
                return;
            }
            this.menu.selection(ev);
        });
    }
}


/***/ }),

/***/ "./src/ui/menus/measure.ts":
/*!*********************************!*\
  !*** ./src/ui/menus/measure.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiMeasureMenu: () => (/* binding */ SuiMeasureMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _dialogs_addMeasure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/addMeasure */ "./src/ui/dialogs/addMeasure.ts");
/* harmony import */ var _dialogs_measureFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialogs/measureFormat */ "./src/ui/dialogs/measureFormat.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");





class SuiMeasureMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    getDefinition() {
        return SuiMeasureMenu.defaults;
    }
    constructor(params) {
        super(params);
    }
    selection(ev) {
        const text = $(ev.currentTarget).attr('data-value');
        if (text === 'formatMeasureDialog') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_measureFormat__WEBPACK_IMPORTED_MODULE_3__.SuiMeasureDialog, {
                view: this.view,
                completeNotifier: this.completeNotifier,
                startPromise: this.closePromise,
                eventSource: this.eventSource,
                tracker: this.tracker,
                ctor: 'SuiMeasureDialog',
                id: 'measure-dialog',
                modifier: null
            });
            this.complete();
            return;
        }
        if (text === 'addMenuCmd') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_addMeasure__WEBPACK_IMPORTED_MODULE_2__.SuiInsertMeasures, {
                view: this.view,
                completeNotifier: this.completeNotifier,
                startPromise: this.closePromise,
                eventSource: this.eventSource,
                tracker: this.tracker,
                ctor: 'SuiMeasureDialog',
                id: 'insert-dialog',
                modifier: null
            });
            this.complete();
        }
        if (text === 'addMenuAfterCmd') {
            this.view.addMeasure(true);
            this.complete();
        }
        if (text === 'deleteSelected') {
            this.view.deleteMeasure();
        }
        if (text === 'removeSystemBreaks') {
            this.view.removeSystemBreaks();
        }
        if (text === 'resetFormatting') {
            this.view.setMeasureFormat(new _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoMeasureFormat(_smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_4__.SmoMeasureFormat.defaults));
        }
        this.complete();
    }
}
SuiMeasureMenu.defaults = {
    label: 'Measure',
    menuItems: [
        {
            icon: '',
            text: 'Add Measures',
            value: 'addMenuCmd'
        }, {
            icon: 'icon-cross',
            text: 'Delete Selected Measures',
            value: 'deleteSelected'
        }, {
            icon: '',
            text: 'Format Measure',
            value: 'formatMeasureDialog'
        }, {
            icon: '',
            text: 'Remove system breaks selection',
            value: 'removeSystemBreaks'
        }, {
            icon: '',
            text: 'Reset formatting selection',
            value: 'resetFormatting'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }
    ]
};


/***/ }),

/***/ "./src/ui/menus/menu.ts":
/*!******************************!*\
  !*** ./src/ui/menus/menu.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiMenuBase: () => (/* binding */ SuiMenuBase)
/* harmony export */ });
/* harmony import */ var _i18n_language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../i18n/language */ "./src/ui/i18n/language.ts");

class SuiMenuBase {
    constructor(params) {
        this.focusIndex = -1;
        this.ctor = params.ctor;
        const definition = this.getDefinition();
        this.label = definition.label;
        this.menuItems = definition.menuItems;
        this.completeNotifier = params.completeNotifier;
        this.score = params.score;
        this.view = params.view;
        this.undoBuffer = params.undoBuffer;
        this.eventSource = params.eventSource;
        this.closePromise = params.closePromise;
        this.tracker = params.tracker;
        _i18n_language__WEBPACK_IMPORTED_MODULE_0__.SmoTranslator.registerMenu(this.ctor);
    }
    /**
     * Base class can override this, called before display and event binding to
     * add or remove options from the static list
     */
    preAttach() { }
    static printTranslate(_class) {
        const xx = eval('Smo.' + _class);
        const items = xx.defaults.menuItems;
        const rvItems = [];
        items.forEach((item) => {
            rvItems.push({ value: item.value, text: item.text, icon: '' });
        });
        return { ctor: _class, label: xx.defaults.label, menuItems: items };
    }
    complete() {
        $('body').trigger('menuDismiss');
    }
    // Most menus don't process their own events
    keydown() { }
}


/***/ }),

/***/ "./src/ui/menus/note.ts":
/*!******************************!*\
  !*** ./src/ui/menus/note.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiNoteMenu: () => (/* binding */ SuiNoteMenu)
/* harmony export */ });
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _dialogs_arpeggio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/arpeggio */ "./src/ui/dialogs/arpeggio.ts");
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SuiNoteMenu extends _menu__WEBPACK_IMPORTED_MODULE_2__.SuiMenuBase {
    getDefinition() {
        return SuiNoteMenu.defaults;
    }
    constructor(params) {
        super(params);
    }
    selection(ev) {
        return __awaiter(this, void 0, void 0, function* () {
            const text = $(ev.currentTarget).attr('data-value');
            if (text === 'toggleCueCmd') {
                yield this.view.toggleCue();
            }
            else if (text === 'arpeggioDialog') {
                (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_0__.createAndDisplayDialog)(_dialogs_arpeggio__WEBPACK_IMPORTED_MODULE_1__.SuiScoreArpeggioDialog, {
                    view: this.view,
                    completeNotifier: this.completeNotifier,
                    startPromise: this.closePromise,
                    eventSource: this.eventSource,
                    tracker: this.tracker,
                    ctor: 'SuiArpeggioDialog',
                    id: 'insert-dialog',
                    modifier: null
                });
                this.complete();
            }
            this.complete();
        });
    }
}
SuiNoteMenu.defaults = {
    label: 'Measure',
    menuItems: [
        {
            icon: '',
            text: 'Toggle Cue',
            value: 'toggleCueCmd'
        }, {
            icon: '',
            text: 'Arpeggio',
            value: 'arpeggioDialog'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }
    ]
};


/***/ }),

/***/ "./src/ui/menus/partSelection.ts":
/*!***************************************!*\
  !*** ./src/ui/menus/partSelection.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiPartSelectionMenu: () => (/* binding */ SuiPartSelectionMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");

class SuiPartSelectionMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
        this.partMap = { keys: [], partMap: {} };
    }
    getDefinition() {
        return SuiPartSelectionMenu.defaults;
    }
    selectPart(val) {
        if (val < 0) {
            this.view.viewAll();
            this.complete();
            return;
        }
        const partInfo = this.partMap.partMap[val];
        this.view.exposePart(this.view.storeScore.staves[partInfo.associatedStaff]);
        this.complete();
    }
    preAttach() {
        const defs = [];
        this.partMap = this.view.getPartMap();
        if (this.view.score.staves.length < this.view.storeScore.staves.length) {
            defs.push({
                icon: '',
                text: 'View All',
                value: '-1'
            });
        }
        this.partMap.keys.forEach((key) => {
            defs.push({
                icon: '',
                text: this.partMap.partMap[key].partName,
                value: key.toString()
            });
        });
        defs.push({
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        });
        this.menuItems = defs;
    }
    selection(ev) {
        const op = $(ev.currentTarget).attr('data-value');
        const choice = parseInt(op);
        if (isNaN(choice)) {
            this.complete(); // cancel
        }
        this.selectPart(choice);
    }
    keydown() { }
}
SuiPartSelectionMenu.defaults = {
    label: 'Parts',
    menuItems: [
        {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }
    ]
};


/***/ }),

/***/ "./src/ui/menus/parts.ts":
/*!*******************************!*\
  !*** ./src/ui/menus/parts.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiPartMenu: () => (/* binding */ SuiPartMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _dialogs_scoreView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/scoreView */ "./src/ui/dialogs/scoreView.ts");
/* harmony import */ var _dialogs_instrument__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialogs/instrument */ "./src/ui/dialogs/instrument.ts");
/* harmony import */ var _dialogs_partInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dialogs/partInfo */ "./src/ui/dialogs/partInfo.ts");
/* harmony import */ var _dialogs_pageLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dialogs/pageLayout */ "./src/ui/dialogs/pageLayout.ts");
/* harmony import */ var _dialogs_newPart__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dialogs/newPart */ "./src/ui/dialogs/newPart.ts");







class SuiPartMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    getDefinition() {
        return SuiPartMenu.defaults;
    }
    createPart() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_newPart__WEBPACK_IMPORTED_MODULE_6__.SuiNewPartDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'newPartDialog',
            ctor: 'SuiNewPartDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execView() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_scoreView__WEBPACK_IMPORTED_MODULE_2__.SuiScoreViewDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'scoreViewDialog',
            ctor: 'SuiScoreViewDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    editPart() {
        const selection = this.view.tracker.selections[0];
        const self = this;
        if (this.view.score.staves.length !== selection.staff.partInfo.stavesAfter + selection.staff.partInfo.stavesBefore + 1) {
            this.view.exposePart(selection.staff);
        }
        this.view.renderPromise().then(() => {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_partInfo__WEBPACK_IMPORTED_MODULE_4__.SuiPartInfoDialog, {
                completeNotifier: self.completeNotifier,
                view: self.view,
                eventSource: self.eventSource,
                id: 'editPart',
                ctor: 'SuiPartInfoDialog',
                tracker: self.view.tracker,
                modifier: null,
                startPromise: self.closePromise
            });
        });
    }
    editInstrument() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_instrument__WEBPACK_IMPORTED_MODULE_3__.SuiInstrumentDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'instrumentModal',
            ctor: 'SuiInstrumentDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    removePart() {
        this.view.removeStaff();
        this.complete();
    }
    pageLayout() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_1__.createAndDisplayDialog)(_dialogs_pageLayout__WEBPACK_IMPORTED_MODULE_5__.SuiPageLayoutDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'layoutDialog',
            ctor: 'SuiPageLayoutDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    preAttach() {
        const fullScore = this.view.score.staves.length < this.view.storeScore.staves.length;
        const defs = [];
        this.menuItems.forEach((item) => {
            // Only show 'display all' if the full score is not already displayed
            if (item.value === 'viewAll') {
                if (!fullScore) {
                    defs.push(item);
                }
            }
            else if (item.value === 'pageLayout') {
                // only show the page layout in part menu if we are in part mode
                if (this.view.isPartExposed()) {
                    defs.push(item);
                }
            }
            else if (item.value === 'view') {
                if (this.view.isPartExposed() === false) {
                    // don't let the user restrict the view if we are already viewing a part.
                    defs.push(item);
                }
            }
            else if (item.value === 'editPart') {
                if (this.view.isPartExposed()) {
                    item.text = 'Part Properties';
                    defs.push(item);
                }
            }
            else {
                defs.push(item);
            }
        });
        this.menuItems = defs;
    }
    selection(ev) {
        const op = $(ev.currentTarget).attr('data-value');
        if (op === 'pageLayout') {
            this.pageLayout();
            this.complete();
        }
        else if (op === 'view') {
            this.execView();
            this.complete();
        }
        else if (op === 'createPart') {
            this.createPart();
            this.complete();
        }
        else if (op === 'removePart') {
            this.removePart();
            this.complete();
        }
        else if (op === 'editPart') {
            this.editPart();
            this.complete();
        }
        else if (op === 'editInstrument') {
            this.editInstrument();
            this.complete();
        }
        else if (op === 'cancel') {
            this.complete();
        }
        else if (op === 'viewAll') {
            this.view.viewAll();
            this.complete();
        }
    }
    keydown() { }
}
SuiPartMenu.defaults = {
    label: 'Parts',
    menuItems: [
        {
            icon: '',
            text: 'Create New Part/Stave',
            value: 'createPart'
        }, {
            icon: 'cancel-circle',
            text: 'Remove Selected Parts/Staves',
            value: 'removePart'
        }, {
            icon: '',
            text: 'Part Properties',
            value: 'editPart'
        }, {
            icon: '',
            text: 'Page Layout',
            value: 'pageLayout'
        }, {
            icon: '',
            text: 'View Partial Score',
            value: 'view'
        }, {
            icon: '',
            text: 'View All',
            value: 'viewAll'
        }, {
            icon: '',
            text: 'Instrument Properties',
            value: 'editInstrument'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }
    ]
};


/***/ }),

/***/ "./src/ui/menus/score.ts":
/*!*******************************!*\
  !*** ./src/ui/menus/score.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiScoreMenu: () => (/* binding */ SuiScoreMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _dialogs_preferences__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialogs/preferences */ "./src/ui/dialogs/preferences.ts");
/* harmony import */ var _dialogs_scoreId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/scoreId */ "./src/ui/dialogs/scoreId.ts");
/* harmony import */ var _dialogs_pageLayout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialogs/pageLayout */ "./src/ui/dialogs/pageLayout.ts");
/* harmony import */ var _dialogs_fonts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dialogs/fonts */ "./src/ui/dialogs/fonts.ts");
/* harmony import */ var _dialogs_globalLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dialogs/globalLayout */ "./src/ui/dialogs/globalLayout.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _dialogs_staffGroup__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dialogs/staffGroup */ "./src/ui/dialogs/staffGroup.ts");
/* harmony import */ var _dialogs_audioSettings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dialogs/audioSettings */ "./src/ui/dialogs/audioSettings.ts");









class SuiScoreMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    getDefinition() {
        return SuiScoreMenu.defaults;
    }
    preAttach() {
        const defs = [];
        this.menuItems.forEach((item) => {
            // show these options no matter what
            if (['fonts', 'cancel', 'identification', 'preferences', 'audioSettings'].findIndex((x) => x === item.value) >= 0) {
                defs.push(item);
            }
            else if (item.value === 'pageLayout' || item.value === 'globalLayout' || item.value === 'staffGroups') {
                if (this.view.isPartExposed() === false) {
                    // only show the page layout in score menu if we are in score mode
                    defs.push(item);
                }
            }
            else if (item.value === 'viewAll') {
                // Only show 'view all' if we are not viewing all
                if (this.score.staves.length < this.view.storeScore.staves.length) {
                    defs.push(item);
                }
            }
        });
        this.menuItems = defs;
    }
    constructor(params) {
        super(params);
    }
    execStaffGroups() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_6__.createAndDisplayDialog)(_dialogs_staffGroup__WEBPACK_IMPORTED_MODULE_7__.SuiStaffGroupDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'staffGroups',
            ctor: 'SuiStaffGroupDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execScoreId() {
        _dialogs_scoreId__WEBPACK_IMPORTED_MODULE_2__.SuiScoreIdentificationDialog.createAndDisplay({
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'scoreIdDialog',
            ctor: 'SuiScoreIdentificationDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execPageLayout() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_6__.createAndDisplayDialog)(_dialogs_pageLayout__WEBPACK_IMPORTED_MODULE_3__.SuiPageLayoutDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'layoutDialog',
            ctor: 'SuiPageLayoutDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execFonts() {
        _dialogs_fonts__WEBPACK_IMPORTED_MODULE_4__.SuiScoreFontDialog.createAndDisplay({
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'fontDialog',
            ctor: 'SuiScoreFontDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execGlobalLayout() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_6__.createAndDisplayDialog)(_dialogs_globalLayout__WEBPACK_IMPORTED_MODULE_5__.SuiGlobalLayoutDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'globalLayout',
            ctor: 'SuiGlobalLayoutDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execPreferences() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_6__.createAndDisplayDialog)(_dialogs_preferences__WEBPACK_IMPORTED_MODULE_1__.SuiScorePreferencesDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'preferences',
            ctor: 'SuiScorePreferencesDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    execAudioSettings() {
        (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_6__.createAndDisplayDialog)(_dialogs_audioSettings__WEBPACK_IMPORTED_MODULE_8__.SuiAudioSettingsDialog, {
            completeNotifier: this.completeNotifier,
            view: this.view,
            eventSource: this.eventSource,
            id: 'audioSettings',
            ctor: 'SuiAudioSettingsDialog',
            tracker: this.view.tracker,
            modifier: null,
            startPromise: this.closePromise
        });
    }
    selection(ev) {
        const text = $(ev.currentTarget).attr('data-value');
        if (text === 'pageLayout') {
            this.execPageLayout();
        }
        else if (text === 'staffGroups') {
            this.execStaffGroups();
        }
        else if (text === 'preferences') {
            this.execPreferences();
        }
        else if (text === 'fonts') {
            this.execFonts();
        }
        else if (text === 'globalLayout') {
            this.execGlobalLayout();
        }
        else if (text === 'identification') {
            this.execScoreId();
        }
        else if (text === 'viewAll') {
            this.view.viewAll();
        }
        else if (text === 'audioSettings') {
            this.execAudioSettings();
        }
        this.complete();
    }
    keydown() { }
}
SuiScoreMenu.defaults = {
    label: 'Score Settings',
    menuItems: [{
            icon: '',
            text: 'Smoosic Preferences',
            value: 'preferences'
        }, {
            icon: '',
            text: 'View All',
            value: 'viewAll'
        }, {
            icon: '',
            text: 'Global Layout',
            value: 'globalLayout'
        }, {
            icon: '',
            text: 'Page Layout',
            value: 'pageLayout'
        }, {
            icon: '',
            text: 'Audio Settings',
            value: 'audioSettings'
        }, {
            icon: '',
            text: 'System Groups',
            value: 'staffGroups'
        }, {
            icon: '',
            text: 'Score Fonts',
            value: 'fonts'
        }, {
            icon: '',
            text: 'Score Info',
            value: 'identification'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/menus/staffModifier.ts":
/*!***************************************!*\
  !*** ./src/ui/menus/staffModifier.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiStaffModifierMenu: () => (/* binding */ SuiStaffModifierMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");

class SuiStaffModifierMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    getDefinition() {
        return SuiStaffModifierMenu.defaults;
    }
    selection(ev) {
        var op = $(ev.currentTarget).attr('data-value');
        if (op === 'ending') {
            this.view.addEnding();
        }
        else if (op === 'slur') {
            this.view.slur();
        }
        else if (op === 'tie') {
            this.view.tie();
        }
        else if (op === 'accel') {
            this.view.accelerando();
        }
        else if (op === 'dimenuendo') {
            this.view.dimenuendo();
        }
        else if (op === 'ritard') {
            this.view.ritard();
        }
        else if (op === 'crescendoBracket') {
            this.view.crescendoBracket();
        }
        else if (op === 'crescendo') {
            this.view.crescendo();
        }
        else if (op === 'decrescendo') {
            this.view.decrescendo();
        }
        else if (op === 'resetSlurs') {
            const self = this;
            this.view.refreshViewport().then(() => {
                self.complete();
            });
            return;
        }
        // else cancel...
        this.complete();
    }
    keydown() {
    }
}
SuiStaffModifierMenu.defaults = {
    label: 'Lines',
    menuItems: [{
            icon: 'cresc',
            text: 'Cresc. Hairpin',
            value: 'crescendo'
        }, {
            icon: 'decresc',
            text: 'Dim. Hairpin',
            value: 'decrescendo'
        }, {
            icon: 'slur',
            text: 'Slur',
            value: 'slur'
        }, {
            icon: 'slur',
            text: 'Tie',
            value: 'tie'
        }, {
            icon: 'ending',
            text: 'nth ending',
            value: 'ending'
        }, {
            icon: '',
            text: 'Dim. Bracket',
            value: 'dimenuendo'
        }, {
            icon: '',
            text: 'Cresc. Bracket',
            value: 'crescendoBracket'
        }, {
            icon: '',
            text: 'Accelerando',
            value: 'accel'
        }, {
            icon: '',
            text: 'Ritard',
            value: 'ritard'
        }, {
            icon: 'slur',
            text: 'Reset slurs',
            value: 'resetSlurs'
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/menus/timeSignature.ts":
/*!***************************************!*\
  !*** ./src/ui/menus/timeSignature.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SuiTimeSignatureMenu: () => (/* binding */ SuiTimeSignatureMenu)
/* harmony export */ });
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _smo_data_measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../smo/data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _dialogs_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _dialogs_timeSignature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dialogs/timeSignature */ "./src/ui/dialogs/timeSignature.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.




class SuiTimeSignatureMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__.SuiMenuBase {
    constructor(params) {
        super(params);
    }
    getDefinition() {
        return SuiTimeSignatureMenu.defaults;
    }
    selection(ev) {
        var text = $(ev.currentTarget).attr('data-value');
        if (text === 'TimeSigOther') {
            (0,_dialogs_dialog__WEBPACK_IMPORTED_MODULE_2__.createAndDisplayDialog)(_dialogs_timeSignature__WEBPACK_IMPORTED_MODULE_3__.SuiTimeSignatureDialog, {
                completeNotifier: this.completeNotifier,
                view: this.view,
                eventSource: this.eventSource,
                id: 'staffGroups',
                ctor: 'SuiStaffGroupDialog',
                tracker: this.view.tracker,
                modifier: null,
                startPromise: this.closePromise
            });
            this.complete();
            return;
        }
        this.view.setTimeSignature(_smo_data_measure__WEBPACK_IMPORTED_MODULE_1__.SmoMeasure.convertLegacyTimeSignature(text));
        this.complete();
    }
    keydown() { }
}
SuiTimeSignatureMenu.defaults = {
    label: 'Time Sig',
    menuItems: [{
            icon: 'sixeight',
            text: '6/8',
            value: '6/8',
        }, {
            icon: 'fourfour',
            text: '4/4',
            value: '4/4',
        }, {
            icon: 'threefour',
            text: '3/4',
            value: '3/4',
        }, {
            icon: 'twofour',
            text: '2/4',
            value: '2/4',
        }, {
            icon: 'twelveeight',
            text: '12/8',
            value: '12/8',
        }, {
            icon: 'seveneight',
            text: '7/8',
            value: '7/8',
        }, {
            icon: 'fiveeight',
            text: '5/8',
            value: '5/8',
        }, {
            icon: '',
            text: 'Other',
            value: 'TimeSigOther',
        }, {
            icon: '',
            text: 'Cancel',
            value: 'cancel'
        }]
};


/***/ }),

/***/ "./src/ui/qwerty.ts":
/*!**************************!*\
  !*** ./src/ui/qwerty.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Qwerty: () => (/* binding */ Qwerty)
/* harmony export */ });
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.

;
;
class Qwerty {
    static get navigationElements() {
        const kbRows = [
            { row: '1234567890-=', shifted: '!@#$%^&*()_+' },
            { row: 'QWERTYUIOP[]', shifted: 'QWERTYUIOP{}' },
            { row: "ASDFGHJKL;'", shifted: 'ASDFGHJKL:"' },
            { row: 'ZXCVBNM,./', shifted: 'ZXCVBNM<>?' }
        ];
        const arrows = [
            { icon: 'icon-arrow-left', text: '', shifted: '', classes: 'helpKey', dataKey: 'ArrowLeft' },
            { icon: 'icon-arrow-right', text: '', shifted: '', classes: 'helpKey', dataKey: 'ArrowRight' },
            { icon: '', text: 'Space', classes: 'wideKey', shifted: '', dataKey: 'Space' },
            { icon: 'icon-arrow-up', text: '', shifted: '', classes: 'helpKey', dataKey: 'ArrowUp' },
            { icon: 'icon-arrow-down', text: '', shifted: '', classes: 'helpKey', dataKey: 'ArrowDown' },
            { icon: '', text: 'Ins', shifted: '', classes: 'helpKey', dataKey: 'Insert' },
            { icon: '', text: 'Del', shifted: '', classes: 'helpKey', dataKey: 'Delete' },
            { icon: '', text: 'Enter', shifted: '', classes: 'wideKey', dataKey: 'Enter' }
        ];
        let keyRows = {};
        const labels = ['topNumbers', 'keys1', 'keys2', 'keys3', 'arrows'];
        let j = 0;
        kbRows.forEach((kbRow) => {
            var str = kbRow.row;
            var shifted = kbRow.shifted;
            var keys = [];
            for (var i = 0; i < str.length; ++i) {
                if (j === 2 && i === 0) {
                    keys.push({ icon: '', text: 'Shift', shifted: '', classes: 'wideKey', dataKey: 'shift' });
                }
                if (j === 3 && i === 0) {
                    keys.push({ icon: '', text: 'Ctrl', shifted: '', classes: 'wideKey', dataKey: 'ctrl' });
                    keys.push({ icon: '', text: 'Alt', shifted: '', classes: 'helpKey', dataKey: 'alt' });
                }
                keys.push({ icon: '', text: str[i], shifted: shifted[i], classes: 'helpKey', dataKey: str[i] });
            }
            keyRows[labels[j]] = keys;
            j += 1;
        });
        keyRows[labels[j]] = arrows;
        return keyRows;
    }
    static flashShift() {
        if (Qwerty._shiftTime) {
            Qwerty._shiftTime = 0;
            setTimeout(function () {
                Qwerty.flashShift();
            }, 1000);
        }
        else {
            $('.kb-float').removeClass('shifted');
        }
    }
    static displayForDuration() {
        Qwerty.displayAll();
        $('#row-0').hide();
        $('#row-1').hide();
        $('#row-4').hide();
    }
    static displayForTuplet() {
        Qwerty.displayAll();
        $('#row-1').hide();
        $('#row-2').hide();
    }
    static displayForNav() {
        Qwerty.displayAll();
        $('#row-0').hide();
        $('#row-1').hide();
    }
    static displayAll() {
        $('#row-0').show();
        $('#row-1').show();
        $('#row-2').show();
        $('#row-3').show();
        $('#row-4').show();
    }
    static _flashButton(key) {
        var e = $('[data-key="' + key + '"]');
        if (!e.length) {
            e = $('[data-shift="' + key + '"]');
        }
        if (e.length) {
            $(e).removeClass('transition-button');
            $(e).addClass('reverse-button');
            setTimeout(function () {
                $(e).removeClass('reverse-button');
                $(e).addClass('transition-button');
            }, 750);
        }
    }
    static get editingKeys() {
        return ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Insert', 'Delete'];
    }
    static handleKeyEvent(evdata) {
        if (Qwerty.editingKeys.indexOf(evdata.code) >= 0) {
            Qwerty._flashButton(evdata.code);
        }
        else if (evdata.key.length === 1
            && evdata.key.charCodeAt(0) > 32
            && evdata.key.charCodeAt(0) < 127) {
            Qwerty._flashButton(evdata.key.toUpperCase());
        }
        if (evdata.code === 'Space') {
            Qwerty._flashButton('Space');
        }
        if (evdata.code === 'Enter') {
            Qwerty._flashButton('Enter');
        }
        if (evdata.ctrlKey) {
            Qwerty._flashButton('ctrl');
        }
        if (evdata.shiftKey) {
            Qwerty._flashButton('shift');
            $('.kb-float').addClass('shifted');
            Qwerty._shiftTime = 1;
            Qwerty.flashShift();
        }
        if (evdata.altKey) {
            Qwerty._flashButton('alt');
        }
    }
    static _kbButton(buttons) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var r = b('span').classes('keyContainer');
        buttons.forEach((button) => {
            var text = button.text;
            var shiftedText = button.shifted ? button.shifted : text;
            r.append(b('span').classes(button.icon + ' ' + button.classes)
                .attr('data-key', button.dataKey).attr('data-shift', shiftedText)
                .append(b('span').classes('button-text').text(text))
                .append(b('span').classes('button-shifted').text(shiftedText)));
        });
        return r;
    }
    static _buttonBlock(buttons, id) {
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var r = b('div').classes('keyBlock').attr('id', id);
        r.append(Qwerty._kbButton(buttons));
        return r;
    }
    static _buildElements(rows) {
        const b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        const r = b('div').classes('buttonLine')
            .append(b('span').classes('icon icon-move'));
        const keys = Object.keys(rows);
        keys.forEach((key, rowIx) => {
            const row = rows[key];
            r.append(Qwerty._buttonBlock(row, 'row-' + rowIx));
        });
        return r;
    }
    static hideKb() {
        $('body').removeClass('showQwerty');
        Qwerty.displayed = false;
    }
    static displayKb() {
        if (Qwerty.created) {
            $('body').addClass('showQwerty');
            Qwerty.displayed = true;
            return;
        }
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('.qwertyKb');
        $('body').addClass('showQwerty');
        $('.qwertyKb').html('');
        var b = _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.buildDom;
        var r = b('div').classes('kb-float');
        r.append(Qwerty._buildElements(Qwerty.navigationElements));
        $('.qwertyKb').append(r.dom());
        var cb = function (x, y) { };
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.createTopDomContainer)('.draganime');
        (0,_common_htmlHelpers__WEBPACK_IMPORTED_MODULE_0__.draggable)({
            parent: $('.qwertyKb'),
            handle: $('.qwertyKb').find('.icon-move'),
            animateDiv: '.draganime',
            cb: cb,
            moveParent: true
        });
        Qwerty.displayed = true;
        Qwerty.created = true;
    }
}
Qwerty._shiftTime = 0;
Qwerty.displayed = false;
Qwerty.created = false;


/***/ }),

/***/ "./src/ui/ribbonLayout/default/defaultRibbon.ts":
/*!******************************************************!*\
  !*** ./src/ui/ribbonLayout/default/defaultRibbon.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultRibbonLayout: () => (/* binding */ defaultRibbonLayout)
/* harmony export */ });
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
class defaultRibbonLayout {
    static get ribbons() {
        var left = defaultRibbonLayout.leftRibbonIds;
        var top = defaultRibbonLayout.displayIds.concat(defaultRibbonLayout.noteButtonIds).concat(defaultRibbonLayout.navigateButtonIds)
            .concat(defaultRibbonLayout.articulateButtonIds).concat(defaultRibbonLayout.microtoneIds)
            .concat(defaultRibbonLayout.durationIds)
            .concat(defaultRibbonLayout.beamIds).concat(defaultRibbonLayout.measureIds)
            .concat(defaultRibbonLayout.staveIds)
            .concat(defaultRibbonLayout.textIds).concat(defaultRibbonLayout.playerIds)
            .concat(defaultRibbonLayout.voiceButtonIds).concat(defaultRibbonLayout.debugIds);
        return {
            left: left,
            top: top
        };
    }
    static get ribbonButtons() {
        return defaultRibbonLayout.leftRibbonButtons.concat(defaultRibbonLayout.navigationButtons).concat(defaultRibbonLayout.noteRibbonButtons).concat(defaultRibbonLayout.articulationButtons).concat(defaultRibbonLayout.microtoneButtons).concat(defaultRibbonLayout.chordButtons).concat(defaultRibbonLayout.durationRibbonButtons).concat(defaultRibbonLayout.beamRibbonButtons).concat(defaultRibbonLayout.measureRibbonButtons)
            .concat(defaultRibbonLayout.staveRibbonButtons)
            .concat(defaultRibbonLayout.textRibbonButtons).concat(defaultRibbonLayout.playerButtons)
            .concat(defaultRibbonLayout.voiceRibbonButtons).concat(defaultRibbonLayout.displayButtons).concat(defaultRibbonLayout.debugRibbonButtons);
    }
    static get leftRibbonIds() {
        return ['helpDialog', 'languageMenu', 'fileMenu', 'libraryMenu',
            'scoreMenu', 'partMenu', 'noteMenu', 'addStaffMenu', 'measureModal',
            'tempoModal', 'timeSignatureMenu', 'keyMenu', 'staffModifierMenu',
            'pianoModal'];
    }
    static get noteButtonIds() {
        return ['NoteButtons',
            'UpNoteButton', 'DownNoteButton', 'AddGraceNote', 'RemoveGraceNote', 'SlashGraceNote',
            'XNoteHead', 'TriUpNoteHead', 'CircleXNoteHead', 'DiamondNoteHead',
            'UpOctaveButton', 'DownOctaveButton', 'ToggleRestButton', 'ToggleSlashButton', 'ToggleAccidental', 'ToggleCourtesy'];
    }
    static get voiceButtonIds() {
        return ['VoiceButtons', 'V1Button', 'V2Button', 'V3Button', 'V4Button', 'VXButton'];
    }
    static get navigateButtonIds() {
        return ['NavigationButtons', 'navLeftButton', 'navRightButton', 'navUpButton', 'navDownButton', 'moreNavButtons', 'navFastForward', 'navRewind',
            'navGrowLeft', 'navGrowRight'];
    }
    static get articulateButtonIds() {
        return ['articulationButtons', 'accentButton', 'tenutoButton', 'staccatoButton', 'marcatoButton', 'fermataButton', 'pizzicatoButton', 'mordentButton', 'mordentInvertedButton', 'trillButton',
            'scoopButton', 'dropButton', 'dropLongButton', 'doitButton', 'doitLongButton', 'flipButton', 'smearButton'];
    }
    static get intervalIds() {
        return ['CreateChordButtons', 'SecondUpButton', 'SecondDownButton', 'ThirdUpButton', 'ThirdDownButton', 'FourthUpButton', 'FourthDownButton',
            'FifthUpButton', 'FifthDownButton', 'SixthUpButton', 'SixthDownButton',
            'SeventhUpButton', 'SeventhDownButton', 'OctaveUpButton', 'OctaveDownButton', 'CollapseChordButton'];
    }
    static get debugIds() {
        return ['DebugGroup', 'DebugButton2'];
    }
    static get durationIds() {
        return ['DurationButtons', 'GrowDuration', 'LessDuration', 'GrowDurationDot', 'LessDurationDot', 'TripletButton', 'QuintupletButton', 'SeptupletButton', 'NoTupletButton'];
    }
    static get measureIds() {
        return ['MeasureButtons', 'endRepeat', 'startRepeat', 'endBar', 'doubleBar', 'singleBarEnd', 'singleBarStart', 'nthEnding', 'dcAlCoda', 'dsAlCoda', 'dcAlFine', 'dsAlFine', 'coda', 'toCoda', 'segno', 'toSegno', 'fine'];
    }
    static get staveIds() {
        return ['StaveButtons', 'clefTreble', 'clefBass', 'clefAddRemove', 'clefMoveUp', 'clefMoveDown', 'moreStaffButtons',
            'clefTenor', 'clefAlto', 'clefPercussion',
            'staffBracketLower', 'staffBraceLower', 'staffDoubleConnectorLower', 'staffSingleConnectorLower'];
    }
    static get textIds() {
        return ['TextButtons', 'addTextMenu', 'rehearsalMark', 'lyrics', 'chordChanges', 'addDynamicsMenu'];
    }
    static get beamIds() {
        return ['BeamButtons', 'breakBeam', 'beamSelections', 'toggleBeamDirection'];
    }
    static get playerIds() {
        return ['playerButtons', 'playButton', 'pauseButton', 'stopButton'];
    }
    static get microtoneIds() {
        return ['MicrotoneButtons', 'flat75sz', 'flat25sz', 'flat25ar', 'flat125ar', 'sharp75', 'sharp125', 'sharp25', 'sori', 'koron'];
    }
    static get displayIds() {
        return ['quickButtons', 'selectPart', 'refresh', 'zoomout', 'zoomin', 'playButton2', 'stopButton2'];
    }
    static get textRibbonButtons() {
        return [
            {
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent measure',
                icon: 'icon-text',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'textEdit',
                id: 'TextButtons'
            }, {
                leftText: '',
                rightText: '/t',
                classes: 'icon collapsed textButton',
                icon: 'icon-textBasic',
                action: 'collapseChild',
                ctor: 'TextButtons',
                group: 'textEdit',
                id: 'addTextMenu'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon collapsed textButton',
                icon: 'icon-rehearsemark',
                action: 'collapseChild',
                ctor: 'TextButtons',
                group: 'textEdit',
                id: 'rehearsalMark'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon collapsed textButton',
                icon: 'icon-lyric',
                action: 'collapseChild',
                ctor: 'TextButtons',
                group: 'textEdit',
                id: 'lyrics'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon collapsed textButton',
                icon: 'icon-chordSymbol',
                action: 'collapseChild',
                ctor: 'TextButtons',
                group: 'textEdit',
                id: 'chordChanges'
            }, {
                leftText: '',
                rightText: '/d',
                classes: 'icon collapsed textButton',
                icon: 'icon-mezzopiano',
                action: 'collapseChild',
                ctor: 'TextButtons',
                group: 'textEdit',
                id: 'addDynamicsMenu'
            }
        ];
    }
    static get displayButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  hide',
                icon: 'icon-zoomplus',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'quickButtons',
                id: 'quickButtons'
            }, {
                leftText: '',
                rightText: 'Select Part',
                classes: 'icon select-part-button',
                icon: 'icon-circle-down',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'selectPart'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   refresh',
                icon: 'icon-refresh',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'refresh'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   refresh',
                icon: 'icon-zoomplus',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'zoomout'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   refresh',
                icon: 'icon-zoomminus',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'zoomin'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   play',
                icon: 'icon-play3',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'playButton2'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   stop2',
                icon: 'icon-stop2',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'stopButton2'
            }
        ];
    }
    static get microtoneButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent microtones',
                icon: 'icon-microtone',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'microtone',
                id: 'MicrotoneButtons'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-flat25sz',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'flat25sz'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-flat75sz',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'flat75sz'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-flat25ar',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'flat25ar'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-sharp75',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'sharp75'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-sharp125',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'sharp125'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-sharp25',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'sharp25'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-sori',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'sori'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed microtones',
                icon: 'icon-koron',
                action: 'collapseChild',
                ctor: 'MicrotoneButtons',
                group: 'microtone',
                id: 'koron'
            }];
    }
    static get staveRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent staves',
                icon: 'icon-treble',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'staves',
                id: 'StaveButtons'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-treble',
                action: 'collapseChild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefTreble'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-bass',
                action: 'collapseChild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefBass'
            },
            {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-arrow-up',
                action: 'collapseChild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefMoveUp'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-arrow-down',
                action: 'collapseChild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefMoveDown'
            },
            {
                leftText: '...',
                rightText: '',
                icon: 'icon-circle-left',
                classes: 'collapsed expander',
                action: 'collapseMore',
                ctor: 'ExtendedCollapseParent',
                group: 'staves',
                id: 'moreStaffButtons'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-tenor',
                action: 'collapseGrandchild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefTenor'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-alto',
                action: 'collapseGrandchild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefAlto'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-percussion',
                action: 'collapseGrandchild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'clefPercussion'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-brace',
                action: 'collapseGrandchild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'staffBraceLower'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed staves',
                icon: 'icon-bracket',
                action: 'collapseGrandchild',
                ctor: 'StaveButtons',
                group: 'staves',
                id: 'staffBracketLower'
            }
        ];
    }
    static get beamRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent beams',
                icon: 'icon-flag',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'beams',
                id: 'BeamButtons'
            }, {
                leftText: '',
                rightText: 'x',
                icon: 'icon-beamBreak',
                classes: 'collapsed beams',
                action: 'collapseChild',
                ctor: 'BeamButtons',
                group: 'beams',
                id: 'breakBeam'
            },
            {
                leftText: '',
                rightText: 'Shift-X',
                icon: 'icon-beam',
                classes: 'collapsed beams',
                action: 'collapseChild',
                ctor: 'BeamButtons',
                group: 'beams',
                id: 'beamSelections'
            },
            {
                leftText: '',
                rightText: 'Shift-B',
                icon: 'icon-flagFlip',
                classes: 'collapsed beams',
                action: 'collapseChild',
                ctor: 'BeamButtons',
                group: 'beams',
                id: 'toggleBeamDirection'
            }
        ];
    }
    static get measureRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent measure',
                icon: 'icon-end_rpt',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'measure',
                id: 'MeasureButtons'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-end_rpt',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'endRepeat'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-start_rpt',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'startRepeat'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-end_bar',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'endBar'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-double_bar',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'doubleBar'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-single_bar',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'singleBarEnd'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-single_bar_start',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'singleBarStart'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-ending',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'nthEnding'
            },
            {
                leftText: 'DC Al Coda',
                rightText: '',
                icon: '',
                classes: 'collapsed repetext',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'dcAlCoda'
            },
            {
                leftText: 'DS Al Coda',
                rightText: '',
                icon: '',
                classes: 'collapsed repetext',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'dsAlCoda'
            },
            {
                leftText: 'DC Al Fine',
                rightText: '',
                icon: '',
                classes: 'collapsed repetext',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'dcAlFine'
            },
            {
                leftText: 'DS Al Fine',
                rightText: '',
                icon: '',
                classes: 'collapsed repetext',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'dsAlFine'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-coda',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'coda'
            },
            {
                leftText: 'to ',
                rightText: '',
                icon: 'icon-coda',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'toCoda'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-segno',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'segno'
            },
            {
                leftText: 'Fine',
                rightText: '',
                icon: '',
                classes: 'collapsed repetext',
                action: 'collapseChild',
                ctor: 'MeasureButtons',
                group: 'measure',
                id: 'fine'
            }
        ];
    }
    static get debugRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent',
                icon: 'icon-new-tab',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'debug',
                id: 'DebugGroup'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon  collapsed',
                icon: 'icon-new-tab',
                action: 'collapseChild',
                ctor: 'DebugButtons',
                group: 'debug',
                id: 'DebugButton2'
            }];
    }
    static get durationRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent duration',
                icon: 'icon-duration',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'duration',
                id: 'DurationButtons'
            }, {
                leftText: '',
                rightText: '.',
                icon: 'icon-duration_grow',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'GrowDuration'
            }, {
                leftText: '',
                rightText: ',',
                icon: 'icon-duration_less',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'LessDuration'
            }, {
                leftText: '',
                rightText: '>',
                icon: 'icon-duration_grow_dot',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'GrowDurationDot'
            }, {
                leftText: '',
                rightText: '<',
                icon: 'icon-duration_less_dot',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'LessDurationDot'
            }, {
                leftText: '',
                rightText: 'Ctrl-3',
                icon: 'icon-triplet',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'TripletButton'
            }, {
                leftText: '',
                rightText: 'Ctrl-5',
                icon: 'icon-quint',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'QuintupletButton'
            }, {
                leftText: '',
                rightText: 'Ctrl-7',
                icon: 'icon-septuplet',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'SeptupletButton'
            },
            {
                leftText: '',
                rightText: 'Ctrl-0',
                icon: 'icon-no_tuplet',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'NoTupletButton'
            }
        ];
    }
    static get voiceRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent',
                icon: 'icon-Vo',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'voices',
                id: 'VoiceButtons'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-V1',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'VoiceButtons',
                group: 'voices',
                id: 'V1Button'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-V2',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'VoiceButtons',
                group: 'voices',
                id: 'V2Button'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-V3',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'VoiceButtons',
                group: 'voices',
                id: 'V3Button'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-V4',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'VoiceButtons',
                group: 'voices',
                id: 'V4Button'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-Vx',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'VoiceButtons',
                group: 'voices',
                id: 'VXButton'
            }
        ];
    }
    static get noteRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent',
                icon: 'icon-note',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'notes',
                id: 'NoteButtons'
            }, {
                leftText: 'A',
                rightText: 'a',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ANoteButton'
            }, {
                leftText: 'B',
                rightText: 'b',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'BNoteButton'
            }, {
                leftText: 'C',
                rightText: 'c',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'CNoteButton'
            }, {
                leftText: 'D',
                rightText: 'd',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DNoteButton'
            }, {
                leftText: 'E',
                rightText: 'e',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ENoteButton'
            }, {
                leftText: 'F',
                rightText: 'f',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'FNoteButton'
            }, {
                leftText: 'G',
                rightText: 'g',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'GNoteButton'
            }, {
                leftText: '',
                rightText: '-',
                icon: 'icon-sharp',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'UpNoteButton'
            }, {
                leftText: '',
                rightText: '=',
                icon: 'icon-bravura icon-accidentalFlat',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DownNoteButton'
            }, {
                leftText: '',
                rightText: 'r',
                icon: 'icon-rest',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleRestButton'
            }, {
                leftText: '',
                rightText: 'r',
                icon: 'icon-slash',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleSlashButton'
            }, {
                leftText: '...',
                rightText: '',
                icon: 'icon-circle-left',
                classes: 'collapsed expander',
                action: 'collapseMore',
                ctor: 'ExtendedCollapseParent',
                group: 'notes',
                id: 'moreNoteButtons'
            }, {
                leftText: '',
                rightText: 'G',
                icon: 'icon-grace_note',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'AddGraceNote'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-grace_slash',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'SlashGraceNote'
            }, {
                leftText: '',
                rightText: 'alt-g',
                icon: 'icon-grace_remove',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'RemoveGraceNote'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notex',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'XNoteHead'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notehead-triangleup',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'TriUpNoteHead'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notehead-circlex',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'CircleXNoteHead'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notehead-diamondblack',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DiamondNoteHead'
            }, {
                leftText: '8va',
                rightText: 'Shift=',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'UpOctaveButton'
            }, {
                leftText: '8vb',
                rightText: 'Shift-',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DownOctaveButton'
            }, {
                leftText: '',
                rightText: 'ShiftE',
                icon: 'icon-accident',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleAccidental'
            }, {
                leftText: '',
                rightText: 'ShiftF',
                icon: 'icon-courtesy',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleCourtesy'
            }
        ];
    }
    static get playerButtons() {
        // .icon-play3
        return [{
                leftText: '',
                rightText: '',
                icon: 'icon-equalizer2',
                classes: 'icon collapseParent player',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'playerButtons',
                id: 'playerButtons'
            }, {
                leftText: '',
                rightText: 'p',
                icon: 'icon-play3',
                classes: 'icon collapsed player',
                action: 'collapseChild',
                ctor: 'PlayerButtons',
                group: 'playerButtons',
                id: 'playButton'
            },
            {
                leftText: '',
                rightText: 's',
                icon: 'icon-stop2',
                classes: 'icon collapsed player',
                action: 'collapseChild',
                ctor: 'PlayerButtons',
                group: 'playerButtons',
                id: 'stopButton'
            },
            {
                leftText: '',
                rightText: 'P',
                icon: 'icon-pause2',
                classes: 'icon collapsed player',
                action: 'collapseChild',
                ctor: 'PlayerButtons',
                group: 'playerButtons',
                id: 'pauseButton'
            }];
    }
    static get articulationButtons() {
        return [{
                leftText: '',
                rightText: '',
                icon: 'icon-articulation',
                classes: 'icon collapseParent articulation',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'articulations',
                id: 'articulationButtons'
            }, {
                leftText: '',
                rightText: 'h',
                icon: 'icon-accent_above',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'accentButton'
            }, {
                leftText: '',
                rightText: 'i',
                icon: 'icon-tenuto_above',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'tenutoButton'
            }, {
                leftText: '',
                rightText: 'j',
                icon: 'icon-staccato_above',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'staccatoButton'
            }, {
                leftText: '',
                rightText: 'k',
                icon: 'icon-marcato_above',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'marcatoButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-fermata',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'fermataButton'
            }, {
                leftText: '',
                rightText: 'l',
                icon: 'icon-pitz_above',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'pizzicatoButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-mordent-inv',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'mordentInvertedButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-mordent',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'mordentButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-trill',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'trillButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-scoop',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'scoopButton'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-drop',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'dropButton'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-drop-long',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'dropLongButton'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-doit',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'doitButton'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-doit-long',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'doitLongButton'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-flip',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'flipButton'
            },
            {
                leftText: '',
                rightText: '',
                icon: 'icon-smear',
                classes: 'icon collapsed articulation',
                action: 'collapseChild',
                ctor: 'ArticulationButtons',
                group: 'articulations',
                id: 'smearButton'
            }
        ];
    }
    static get navigationButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent',
                icon: 'icon-navigate',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'navigation',
                id: 'NavigationButtons'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-left',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navLeftButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-right',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navRightButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-up',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navUpButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-down',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navDownButton'
            }, {
                leftText: '...',
                rightText: '',
                icon: '',
                classes: 'collapsed expander',
                action: 'collapseMore',
                ctor: 'ExtendedCollapseParent',
                group: 'navigation',
                id: 'moreNavButtons'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-fforward',
                classes: 'collapsed',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navFastForward'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-rewind',
                classes: 'collapsed',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navRewind'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-note_select_left',
                classes: 'collapsed selection-icon',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navGrowLeft'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-note_select_right',
                classes: 'collapsed selection-icon',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navGrowRight'
            }
        ];
    }
    static get chordButtons() {
        return [{
                icon: 'icon-chords',
                leftText: '',
                rightText: '',
                classes: 'icon collapseParent',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'chords',
                id: 'CreateChordButtons'
            }, {
                icon: 'icon-arrow-up',
                leftText: '2nd',
                rightText: '2',
                classes: 'collapsed addChord',
                action: 'collapseChild',
                dataElements: {
                    interval: '1',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'SecondUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '2nd',
                rightText: 'Shift 2',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '1',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'SecondDownButton'
            }, {
                icon: 'icon-arrow-up',
                leftText: '3rd',
                rightText: '3',
                classes: 'collapsed addChord',
                action: 'collapseChild',
                dataElements: {
                    interval: '2',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'ThirdUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '3rd',
                rightText: 'Shift 3',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '2',
                    direction: '-1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'ThirdDownButton'
            }, {
                icon: 'icon-arrow-up',
                leftText: '4th',
                rightText: '4',
                classes: 'collapsed addChord',
                action: 'collapseChild',
                dataElements: {
                    interval: '3',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'FourthUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '4th',
                rightText: 'Shift 4',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '3',
                    direction: '-1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'FourthDownButton'
            }, {
                icon: 'icon-arrow-up',
                leftText: '5th',
                rightText: '5',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '4',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'FifthUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '5th',
                rightText: 'Shift 5',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '4',
                    direction: '-1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'FifthDownButton'
            }, {
                icon: 'icon-arrow-up',
                leftText: '6th',
                rightText: '6',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '5',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'SixthUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '6th',
                rightText: 'Shift 6',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '5',
                    direction: '-1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'SixthDownButton'
            }, {
                icon: 'icon-arrow-up',
                leftText: '7th',
                rightText: '7',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '6',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'SeventhUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '7th',
                rightText: 'Shift 7',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '6',
                    direction: '-1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'SeventhDownButton'
            }, {
                icon: 'icon-arrow-up',
                leftText: '8va',
                rightText: '8',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '7',
                    direction: '1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'OctaveUpButton'
            }, {
                icon: 'icon-arrow-down',
                leftText: '7th',
                rightText: 'Shift 7',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                dataElements: {
                    interval: '7',
                    direction: '-1'
                },
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'OctaveDownButton'
            }, {
                icon: '',
                leftText: 'Collapse',
                rightText: '',
                classes: 'collapsed addChord dirdown',
                action: 'collapseChild',
                ctor: 'ChordButtons',
                group: 'chords',
                id: 'CollapseChordButton'
            }
        ];
    }
    static get leftRibbonButtons() {
        return [{
                icon: '',
                leftText: 'Help',
                rightText: '?',
                classes: 'help-button',
                action: 'modal',
                ctor: 'helpModal',
                group: 'scoreEdit',
                id: 'helpDialog'
            }, {
                leftText: 'Language',
                rightText: '/n',
                icon: '',
                classes: 'language-select menu-select',
                action: 'menu',
                ctor: 'SuiLanguageMenu',
                group: 'scoreEdit',
                id: 'languageMenu'
            }, {
                leftText: 'File',
                rightText: '/f',
                icon: '',
                classes: 'file-modify menu-select',
                action: 'menu',
                ctor: 'SuiFileMenu',
                group: 'scoreEdit',
                id: 'fileMenu'
            }, {
                leftText: 'Library',
                rightText: '/L',
                icon: '',
                classes: 'file-modify menu-select',
                action: 'modal',
                ctor: 'SuiLibraryDialog',
                group: 'scoreEdit',
                id: 'libraryMenu'
            }, {
                leftText: 'Score',
                rightText: '',
                icon: '',
                classes: 'icon ',
                action: 'menu',
                ctor: 'SuiScoreMenu',
                group: 'scoreEdit',
                id: 'scoreMenu'
            },
            {
                leftText: 'Parts',
                rightText: '/p',
                icon: '',
                classes: 'icon',
                action: 'menu',
                ctor: 'SuiPartMenu',
                group: 'scoreEdit',
                id: 'partMenu'
            }, {
                leftText: 'Notes',
                rightText: '',
                icon: 'icon-note',
                classes: 'icon',
                action: 'menu',
                ctor: 'SuiNoteMenu',
                group: 'scoreEdit',
                id: 'noteMenu'
            }, {
                leftText: 'Measure',
                rightText: '/a',
                icon: '',
                classes: 'icon menu-select',
                action: 'menu',
                ctor: 'SuiMeasureMenu',
                group: 'scoreEdit',
                id: 'measureModal'
            }, {
                leftText: 'Tempo',
                rightText: 't',
                icon: '',
                classes: 'icon ',
                action: 'modal',
                ctor: 'SuiTempoDialog',
                group: 'scoreEdit',
                id: 'tempoModal'
            }, {
                leftText: 'Time Signature',
                rightText: '/m',
                icon: '',
                classes: 'staff-modify menu-select',
                action: 'menu',
                ctor: 'SuiTimeSignatureMenu',
                group: 'scoreEdit',
                id: 'timeSignatureMenu'
            },
            {
                leftText: 'Key',
                rightText: '/k',
                icon: '',
                classes: 'note-modify menu-select',
                action: 'menu',
                ctor: 'SuiKeySignatureMenu',
                group: 'scoreEdit',
                id: 'keyMenu'
            }, {
                leftText: 'Lines',
                rightText: '/l',
                icon: '',
                classes: 'icon note-modify menu-select',
                action: 'menu',
                ctor: 'SuiStaffModifierMenu',
                group: 'scoreEdit',
                id: 'staffModifierMenu'
            },
        ];
    }
}


/***/ }),

/***/ "./src/ui/ribbonLayout/default/tabletRibbon.ts":
/*!*****************************************************!*\
  !*** ./src/ui/ribbonLayout/default/tabletRibbon.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   simpleRibbonLayout: () => (/* binding */ simpleRibbonLayout)
/* harmony export */ });
// [Smoosic](https://github.com/AaronDavidNewman/Smoosic)
// Copyright (c) Aaron David Newman 2021.
class simpleRibbonLayout {
    static get ribbons() {
        var left = simpleRibbonLayout.leftRibbonIds;
        var top = simpleRibbonLayout.displayIds.concat(simpleRibbonLayout.noteButtonIds).concat(simpleRibbonLayout.navigateButtonIds)
            .concat(simpleRibbonLayout.durationIds);
        return {
            left: left,
            top: top
        };
    }
    static get simpleRibbonLayout() {
        return simpleRibbonLayout.leftRibbonButtons.concat(simpleRibbonLayout.navigationButtons).concat(simpleRibbonLayout.noteRibbonButtons).concat(simpleRibbonLayout.durationRibbonButtons);
    }
    static get leftRibbonIds() {
        return ['libraryMenu',
            'layoutMenu',
            'tempoModal', 'timeSignatureMenu', 'keyMenu', 'staffModifierMenu',
            'pianoModal'];
    }
    static get noteButtonIds() {
        return ['NoteButtons',
            'UpNoteButton', 'DownNoteButton',
            'UpOctaveButton', 'DownOctaveButton', 'ToggleRestButton', 'ToggleSlashButton', 'ToggleAccidental', 'ToggleCourtesy'];
    }
    static get navigateButtonIds() {
        return ['NavigationButtons', 'navLeftButton', 'navRightButton', 'navUpButton', 'navDownButton', 'moreNavButtons', 'navFastForward', 'navRewind',
            'navGrowLeft', 'navGrowRight'];
    }
    static get intervalIds() {
        return ['CreateChordButtons', 'SecondUpButton', 'SecondDownButton', 'ThirdUpButton', 'ThirdDownButton', 'FourthUpButton', 'FourthDownButton',
            'FifthUpButton', 'FifthDownButton', 'SixthUpButton', 'SixthDownButton',
            'SeventhUpButton', 'SeventhDownButton', 'OctaveUpButton', 'OctaveDownButton', 'CollapseChordButton'];
    }
    static get durationIds() {
        return ['DurationButtons', 'GrowDuration', 'LessDuration', 'GrowDurationDot', 'LessDurationDot', 'TripletButton', 'QuintupletButton', 'SeptupletButton', 'NoTupletButton'];
    }
    static get playerIds() {
        return ['playerButtons', 'playButton', 'pauseButton', 'stopButton'];
    }
    static get displayIds() {
        return ['quickButtons', 'refresh', 'zoomout', 'zoomin', 'playButton2', 'stopButton2'];
    }
    static get displayButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  hide',
                icon: 'icon-zoomplus',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'quickButtons',
                id: 'quickButtons'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   refresh',
                icon: 'icon-refresh',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'refresh'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   refresh',
                icon: 'icon-zoomplus',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'zoomout'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   refresh',
                icon: 'icon-zoomminus',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'zoomin'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   play',
                icon: 'icon-play3',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'playButton2'
            }, {
                leftText: '',
                rightText: '',
                classes: 'icon   stop2',
                icon: 'icon-stop2',
                action: 'collapseChild',
                ctor: 'DisplaySettings',
                group: 'quickButtons',
                id: 'stopButton2'
            }
        ];
    }
    static get durationRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent duration',
                icon: 'icon-duration',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'duration',
                id: 'DurationButtons'
            }, {
                leftText: '',
                rightText: '.',
                icon: 'icon-duration_grow',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'GrowDuration'
            }, {
                leftText: '',
                rightText: ',',
                icon: 'icon-duration_less',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'LessDuration'
            }, {
                leftText: '',
                rightText: '>',
                icon: 'icon-duration_grow_dot',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'GrowDurationDot'
            }, {
                leftText: '',
                rightText: '<',
                icon: 'icon-duration_less_dot',
                classes: 'collapsed duration',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'LessDurationDot'
            }, {
                leftText: '',
                rightText: 'Ctrl-3',
                icon: 'icon-triplet',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'TripletButton'
            }, {
                leftText: '',
                rightText: 'Ctrl-5',
                icon: 'icon-quint',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'QuintupletButton'
            }, {
                leftText: '',
                rightText: 'Ctrl-7',
                icon: 'icon-septuplet',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'SeptupletButton'
            },
            {
                leftText: '',
                rightText: 'Ctrl-0',
                icon: 'icon-no_tuplet',
                classes: 'collapsed duration tuplet',
                action: 'collapseChild',
                ctor: 'DurationButtons',
                group: 'duration',
                id: 'NoTupletButton'
            }
        ];
    }
    static get noteRibbonButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent',
                icon: 'icon-note',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'notes',
                id: 'NoteButtons'
            }, {
                leftText: 'A',
                rightText: 'a',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ANoteButton'
            }, {
                leftText: 'B',
                rightText: 'b',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'BNoteButton'
            }, {
                leftText: 'C',
                rightText: 'c',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'CNoteButton'
            }, {
                leftText: 'D',
                rightText: 'd',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DNoteButton'
            }, {
                leftText: 'E',
                rightText: 'e',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ENoteButton'
            }, {
                leftText: 'F',
                rightText: 'f',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'FNoteButton'
            }, {
                leftText: 'G',
                rightText: 'g',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'GNoteButton'
            }, {
                leftText: '',
                rightText: '-',
                icon: 'icon-sharp',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'UpNoteButton'
            }, {
                leftText: '',
                rightText: '=',
                icon: 'icon-flat',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DownNoteButton'
            }, {
                leftText: '',
                rightText: 'r',
                icon: 'icon-rest',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleRestButton'
            }, {
                leftText: '',
                rightText: 'r',
                icon: 'icon-slash',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleSlashButton'
            }, {
                leftText: '...',
                rightText: '',
                icon: 'icon-circle-left',
                classes: 'collapsed expander',
                action: 'collapseMore',
                ctor: 'ExtendedCollapseParent',
                group: 'notes',
                id: 'moreNoteButtons'
            }, {
                leftText: '',
                rightText: 'G',
                icon: 'icon-grace_note',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'AddGraceNote'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-grace_slash',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'SlashGraceNote'
            }, {
                leftText: '',
                rightText: 'alt-g',
                icon: 'icon-grace_remove',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'RemoveGraceNote'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notex',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'XNoteHead'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notehead-triangleup',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'TriUpNoteHead'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notehead-circlex',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'CircleXNoteHead'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-notehead-diamondblack',
                classes: 'collapsed graceIcon',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DiamondNoteHead'
            }, {
                leftText: '8va',
                rightText: 'Shift=',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'UpOctaveButton'
            }, {
                leftText: '8vb',
                rightText: 'Shift-',
                icon: '',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'DownOctaveButton'
            }, {
                leftText: '',
                rightText: 'ShiftE',
                icon: 'icon-accident',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleAccidental'
            }, {
                leftText: '',
                rightText: 'ShiftF',
                icon: 'icon-courtesy',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NoteButtons',
                group: 'notes',
                id: 'ToggleCourtesy'
            }
        ];
    }
    static get playerButtons() {
        // .icon-play3
        return [{
                leftText: '',
                rightText: '',
                icon: 'icon-equalizer2',
                classes: 'icon collapseParent player',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'playerButtons',
                id: 'playerButtons'
            }, {
                leftText: '',
                rightText: 'p',
                icon: 'icon-play3',
                classes: 'icon collapsed player',
                action: 'collapseChild',
                ctor: 'PlayerButtons',
                group: 'playerButtons',
                id: 'playButton'
            },
            {
                leftText: '',
                rightText: 's',
                icon: 'icon-stop2',
                classes: 'icon collapsed player',
                action: 'collapseChild',
                ctor: 'PlayerButtons',
                group: 'playerButtons',
                id: 'stopButton'
            },
            {
                leftText: '',
                rightText: 'P',
                icon: 'icon-pause2',
                classes: 'icon collapsed player',
                action: 'collapseChild',
                ctor: 'PlayerButtons',
                group: 'playerButtons',
                id: 'pauseButton'
            }];
    }
    static get navigationButtons() {
        return [{
                leftText: '',
                rightText: '',
                classes: 'icon  collapseParent',
                icon: 'icon-navigate',
                action: 'collapseParent',
                ctor: 'CollapseRibbonControl',
                group: 'navigation',
                id: 'NavigationButtons'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-left',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navLeftButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-right',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navRightButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-up',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navUpButton'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-arrow-down',
                classes: 'collapsed',
                action: 'collapseChild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navDownButton'
            }, {
                leftText: '...',
                rightText: '',
                icon: '',
                classes: 'collapsed expander',
                action: 'collapseMore',
                ctor: 'ExtendedCollapseParent',
                group: 'navigation',
                id: 'moreNavButtons'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-fforward',
                classes: 'collapsed',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navFastForward'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-rewind',
                classes: 'collapsed',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navRewind'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-note_select_left',
                classes: 'collapsed selection-icon',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navGrowLeft'
            }, {
                leftText: '',
                rightText: '',
                icon: 'icon-note_select_right',
                classes: 'collapsed selection-icon',
                action: 'collapseGrandchild',
                ctor: 'NavigationButtons',
                group: 'navigation',
                id: 'navGrowRight'
            }
        ];
    }
    static get leftRibbonButtons() {
        return [{
                leftText: 'Library',
                rightText: '/L',
                icon: '',
                classes: 'file-modify menu-select',
                action: 'modal',
                ctor: 'SuiLibraryDialog',
                group: 'scoreEdit',
                id: 'libraryMenu'
            }, {
                leftText: 'Score',
                rightText: '',
                icon: '',
                classes: 'icon ',
                action: 'menu',
                ctor: 'SuiScoreMenu',
                group: 'scoreEdit',
                id: 'layoutMenu'
            }, {
                leftText: 'Tempo',
                rightText: 't',
                icon: '',
                classes: 'icon ',
                action: 'modal',
                ctor: 'SuiTempoDialog',
                group: 'scoreEdit',
                id: 'tempoModal'
            }, {
                leftText: 'Time Signature',
                rightText: '/m',
                icon: '',
                classes: 'staff-modify menu-select',
                action: 'menu',
                ctor: 'SuiTimeSignatureMenu',
                group: 'scoreEdit',
                id: 'timeSignatureMenu'
            },
            {
                leftText: 'Key',
                rightText: '/k',
                icon: '',
                classes: 'note-modify menu-select',
                action: 'menu',
                ctor: 'SuiKeySignatureMenu',
                group: 'scoreEdit',
                id: 'keyMenu'
            },
        ];
    }
}


/***/ }),

/***/ "./tests/file-load.ts":
/*!****************************!*\
  !*** ./tests/file-load.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLoadTests: () => (/* binding */ createLoadTests)
/* harmony export */ });
/* harmony import */ var _src_application_application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/application/application */ "./src/application/application.ts");
/* harmony import */ var _src_smo_mxml_smoToXml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/smo/mxml/smoToXml */ "./src/smo/mxml/smoToXml.ts");
/* harmony import */ var _src_smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/smo/mxml/xmlToSmo */ "./src/smo/mxml/xmlToSmo.ts");
/* harmony import */ var _src_ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/ui/fileio/xhrLoader */ "./src/ui/fileio/xhrLoader.ts");
/* harmony import */ var _src_smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/smo/midi/midiToSmo */ "./src/smo/midi/midiToSmo.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





function createLoadTests() {
    const jsonPath = 'https://aarondavidnewman.github.io/Smoosic/release/library/hymns/Precious Lord.json';
    const midiTiesPath = 'https://aarondavidnewman.github.io/Smoosic/release/library/miditest/ties.mid';
    const midiTripletPath = 'https://aarondavidnewman.github.io/Smoosic/release/library/miditest/triplet.mid';
    const midiKeyPath = 'https://aarondavidnewman.github.io/Smoosic/release/library/miditest/keytime.mid';
    var app = (application) => __awaiter(this, void 0, void 0, function* () {
        const view = application.view;
        yield view.loadRemoteScore(jsonPath);
        yield view.renderPromise();
        QUnit.test('loaded', assert => {
            assert.equal(view.score.staves[0].measures.length, 17);
            assert.equal($('#boo .vf-lyric').length, 82);
        });
        const xml = _src_smo_mxml_smoToXml__WEBPACK_IMPORTED_MODULE_1__.SmoToXml.convert(view.score);
        const newScore = _src_smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_2__.XmlToSmo.convert(xml);
        yield view.changeScore(newScore);
        QUnit.test('loadXml', assert => {
            assert.equal(view.score.staves[0].measures.length, 17);
            assert.equal($('#boo .vf-lyric').length, 82);
        });
        let midiData = new _src_ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_3__.SuiXhrLoader(midiTiesPath);
        yield midiData.loadAsync();
        let midiScore = (new _src_smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_4__.MidiToSmo(parseMidi(midiData.value), 1024)).convert();
        yield view.changeScore(midiScore);
        QUnit.test('loadMidi1', assert => {
            assert.equal(midiScore.staves[0].getTiesEndingAt({ staff: 0, measure: 1, voice: 0, tick: 0, pitches: [] }).length, 1);
        });
        midiData = new _src_ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_3__.SuiXhrLoader(midiTripletPath);
        yield midiData.loadAsync();
        midiScore = (new _src_smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_4__.MidiToSmo(parseMidi(midiData.value), 1024)).convert();
        yield view.changeScore(midiScore);
        QUnit.test('loadMidi2', assert => {
            assert.equal(midiScore.staves[0].measures[0].tuplets.length, 1);
        });
        midiData = new _src_ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_3__.SuiXhrLoader(midiKeyPath);
        yield midiData.loadAsync();
        midiScore = (new _src_smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_4__.MidiToSmo(parseMidi(midiData.value), 1024)).convert();
        yield view.changeScore(midiScore);
        QUnit.test('loadMidi2', assert => {
            assert.equal(midiScore.staves.length, 2);
            assert.equal(midiScore.staves[0].measures[0].keySignature, 'eb');
        });
        // console.log('measures ' + view.score.staves[0].measures.length);
    });
    _src_application_application__WEBPACK_IMPORTED_MODULE_0__.SuiApplication.configure({
        mode: 'library',
        idleRedrawTime: 5,
        scoreDomContainer: 'outer-container'
    }).then((application) => {
        app(application);
    });
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/entry/vexflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/entry/vexflow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Accidental: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Accidental),
/* harmony export */   Annotation: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Annotation),
/* harmony export */   AnnotationHorizontalJustify: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.AnnotationHorizontalJustify),
/* harmony export */   AnnotationVerticalJustify: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.AnnotationVerticalJustify),
/* harmony export */   Articulation: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Articulation),
/* harmony export */   BEAM_BOTH: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BEAM_BOTH),
/* harmony export */   BEAM_LEFT: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BEAM_LEFT),
/* harmony export */   BEAM_RIGHT: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BEAM_RIGHT),
/* harmony export */   BarNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BarNote),
/* harmony export */   Barline: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Barline),
/* harmony export */   BarlineType: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BarlineType),
/* harmony export */   Beam: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Beam),
/* harmony export */   Bend: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Bend),
/* harmony export */   BoundingBox: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BoundingBox),
/* harmony export */   BoundingBoxComputation: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.BoundingBoxComputation),
/* harmony export */   Builder: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Builder),
/* harmony export */   CanvasContext: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.CanvasContext),
/* harmony export */   ChordSymbol: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.ChordSymbol),
/* harmony export */   ChordSymbolHorizontalJustify: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.ChordSymbolHorizontalJustify),
/* harmony export */   ChordSymbolVerticalJustify: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.ChordSymbolVerticalJustify),
/* harmony export */   Clef: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Clef),
/* harmony export */   ClefNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.ClefNote),
/* harmony export */   Crescendo: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Crescendo),
/* harmony export */   Curve: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Curve),
/* harmony export */   CurvePosition: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.CurvePosition),
/* harmony export */   Dot: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Dot),
/* harmony export */   EasyScore: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.EasyScore),
/* harmony export */   EasyScoreGrammar: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.EasyScoreGrammar),
/* harmony export */   Element: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Element),
/* harmony export */   Factory: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Factory),
/* harmony export */   Flow: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Flow),
/* harmony export */   Font: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Font),
/* harmony export */   FontStyle: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.FontStyle),
/* harmony export */   FontWeight: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.FontWeight),
/* harmony export */   Formatter: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Formatter),
/* harmony export */   Fraction: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Fraction),
/* harmony export */   FretHandFinger: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.FretHandFinger),
/* harmony export */   GhostNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.GhostNote),
/* harmony export */   Glyph: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Glyph),
/* harmony export */   GlyphNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.GlyphNote),
/* harmony export */   GraceNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.GraceNote),
/* harmony export */   GraceNoteGroup: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.GraceNoteGroup),
/* harmony export */   GraceTabNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.GraceTabNote),
/* harmony export */   KeyManager: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.KeyManager),
/* harmony export */   KeySigNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.KeySigNote),
/* harmony export */   KeySignature: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.KeySignature),
/* harmony export */   Modifier: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Modifier),
/* harmony export */   ModifierContext: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.ModifierContext),
/* harmony export */   ModifierPosition: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.ModifierPosition),
/* harmony export */   MultiMeasureRest: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.MultiMeasureRest),
/* harmony export */   Music: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Music),
/* harmony export */   Note: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Note),
/* harmony export */   NoteHead: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.NoteHead),
/* harmony export */   NoteSubGroup: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.NoteSubGroup),
/* harmony export */   Ornament: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Ornament),
/* harmony export */   Parenthesis: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Parenthesis),
/* harmony export */   Parser: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Parser),
/* harmony export */   PedalMarking: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.PedalMarking),
/* harmony export */   Piece: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Piece),
/* harmony export */   Registry: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Registry),
/* harmony export */   RenderContext: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.RenderContext),
/* harmony export */   Renderer: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Renderer),
/* harmony export */   RendererBackends: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.RendererBackends),
/* harmony export */   RendererLineEndType: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.RendererLineEndType),
/* harmony export */   RepeatNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.RepeatNote),
/* harmony export */   Repetition: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Repetition),
/* harmony export */   RuntimeError: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError),
/* harmony export */   SVGContext: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.SVGContext),
/* harmony export */   Stave: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Stave),
/* harmony export */   StaveConnector: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveConnector),
/* harmony export */   StaveHairpin: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveHairpin),
/* harmony export */   StaveLine: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveLine),
/* harmony export */   StaveModifier: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveModifier),
/* harmony export */   StaveModifierPosition: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveModifierPosition),
/* harmony export */   StaveNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveNote),
/* harmony export */   StaveSection: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveSection),
/* harmony export */   StaveTempo: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveTempo),
/* harmony export */   StaveText: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveText),
/* harmony export */   StaveTie: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StaveTie),
/* harmony export */   Stem: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Stem),
/* harmony export */   StemmableNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StemmableNote),
/* harmony export */   StringNumber: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.StringNumber),
/* harmony export */   Stroke: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Stroke),
/* harmony export */   SymbolModifiers: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.SymbolModifiers),
/* harmony export */   SymbolTypes: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.SymbolTypes),
/* harmony export */   System: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.System),
/* harmony export */   TabNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TabNote),
/* harmony export */   TabSlide: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TabSlide),
/* harmony export */   TabStave: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TabStave),
/* harmony export */   TabTie: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TabTie),
/* harmony export */   TextBracket: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TextBracket),
/* harmony export */   TextBracketPosition: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TextBracketPosition),
/* harmony export */   TextDynamics: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TextDynamics),
/* harmony export */   TextFormatter: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TextFormatter),
/* harmony export */   TextJustification: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TextJustification),
/* harmony export */   TextNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TextNote),
/* harmony export */   TickContext: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TickContext),
/* harmony export */   Tickable: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Tickable),
/* harmony export */   TimeSigNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TimeSigNote),
/* harmony export */   TimeSignature: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TimeSignature),
/* harmony export */   TimeSignatureGlyph: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.TimeSignatureGlyph),
/* harmony export */   Tremolo: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Tremolo),
/* harmony export */   Tuning: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Tuning),
/* harmony export */   Tuplet: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Tuplet),
/* harmony export */   Vex: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Vex),
/* harmony export */   Vibrato: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Vibrato),
/* harmony export */   VibratoBracket: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.VibratoBracket),
/* harmony export */   Voice: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Voice),
/* harmony export */   VoiceMode: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.VoiceMode),
/* harmony export */   Volta: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.Volta),
/* harmony export */   VoltaType: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.VoltaType),
/* harmony export */   "default": () => (/* reexport module object */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   defined: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.defined),
/* harmony export */   drawDot: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.drawDot),
/* harmony export */   globalObject: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.globalObject),
/* harmony export */   isAccidental: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isAccidental),
/* harmony export */   isAnnotation: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isAnnotation),
/* harmony export */   isBarline: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isBarline),
/* harmony export */   isCategory: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isCategory),
/* harmony export */   isDot: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isDot),
/* harmony export */   isGraceNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isGraceNote),
/* harmony export */   isGraceNoteGroup: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isGraceNoteGroup),
/* harmony export */   isHTMLCanvas: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLCanvas),
/* harmony export */   isHTMLDiv: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLDiv),
/* harmony export */   isNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isNote),
/* harmony export */   isRenderContext: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isRenderContext),
/* harmony export */   isStaveNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isStaveNote),
/* harmony export */   isStemmableNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isStemmableNote),
/* harmony export */   isTabNote: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.isTabNote),
/* harmony export */   log: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.log),
/* harmony export */   midLine: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.midLine),
/* harmony export */   normalizeAngle: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.normalizeAngle),
/* harmony export */   prefix: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.prefix),
/* harmony export */   warn: () => (/* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_3__.warn)
/* harmony export */ });
/* harmony import */ var _src_flow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/flow.js */ "./node_modules/vexflow_smoosic/build/esm/src/flow.js");
/* harmony import */ var _src_fonts_load_all_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/fonts/load_all.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_all.js");
/* harmony import */ var _src_fonts_textfonts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/fonts/textfonts.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/textfonts.js");
/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/index.js */ "./node_modules/vexflow_smoosic/build/esm/src/index.js");



(0,_src_fonts_load_all_js__WEBPACK_IMPORTED_MODULE_1__.loadAllMusicFonts)();
_src_flow_js__WEBPACK_IMPORTED_MODULE_0__.Flow.setMusicFont('Bravura', 'Gonville', 'Custom');
(0,_src_fonts_textfonts_js__WEBPACK_IMPORTED_MODULE_2__.loadTextFonts)();




/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/accidental.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/accidental.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Accidental: () => (/* binding */ Accidental)
/* harmony export */ });
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _music_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./music.js */ "./node_modules/vexflow_smoosic/build/esm/src/music.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







function L(...args) {
    if (Accidental.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.log)('Vex.Flow.Accidental', args);
}
class Accidental extends _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier {
    constructor(type) {
        super();
        L('New accidental: ', type);
        this.type = type;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT;
        this.render_options = {
            font_scale: 38,
            parenLeftPadding: 2,
            parenRightPadding: 2,
        };
        this.accidental = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.accidentalCodes(this.type);
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);
        this.cautionary = false;
        this.reset();
    }
    static get CATEGORY() {
        return "Accidental";
    }
    static format(accidentals, state) {
        if (!accidentals || accidentals.length === 0)
            return;
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont();
        const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');
        const leftShift = state.left_shift + noteheadAccidentalPadding;
        const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');
        const additionalPadding = musicFont.lookupMetric('accidental.leftPadding');
        const accList = [];
        let prevNote = undefined;
        let shiftL = 0;
        for (let i = 0; i < accidentals.length; ++i) {
            const acc = accidentals[i];
            const note = acc.getNote();
            const stave = note.getStave();
            const index = acc.checkIndex();
            const props = note.getKeyProps()[index];
            if (note !== prevNote) {
                for (let n = 0; n < note.keys.length; ++n) {
                    shiftL = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), shiftL);
                }
                prevNote = note;
            }
            if (stave) {
                const lineSpace = stave.getSpacingBetweenLines();
                const y = stave.getYForLine(props.line);
                const accLine = Math.round((y / lineSpace) * 2) / 2;
                accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });
            }
            else {
                accList.push({ line: props.line, shift: shiftL, acc });
            }
        }
        accList.sort((a, b) => b.line - a.line);
        const lineList = [];
        let accShift = 0;
        let previousLine = undefined;
        for (let i = 0; i < accList.length; i++) {
            const acc = accList[i];
            if (previousLine === undefined || previousLine !== acc.line) {
                lineList.push({
                    line: acc.line,
                    flatLine: true,
                    dblSharpLine: true,
                    numAcc: 0,
                    width: 0,
                    column: 0,
                });
            }
            if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {
                lineList[lineList.length - 1].flatLine = false;
            }
            if (acc.acc.type !== '##') {
                lineList[lineList.length - 1].dblSharpLine = false;
            }
            lineList[lineList.length - 1].numAcc++;
            lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;
            accShift = acc.shift > accShift ? acc.shift : accShift;
            previousLine = acc.line;
        }
        let totalColumns = 0;
        for (let i = 0; i < lineList.length; i++) {
            let noFurtherConflicts = false;
            const groupStart = i;
            let groupEnd = i;
            while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {
                if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {
                    groupEnd++;
                }
                else {
                    noFurtherConflicts = true;
                }
            }
            const getGroupLine = (index) => lineList[groupStart + index];
            const getGroupLines = (indexes) => indexes.map(getGroupLine);
            const lineDifference = (indexA, indexB) => {
                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);
                return a - b;
            };
            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));
            const groupLength = groupEnd - groupStart + 1;
            let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';
            switch (groupLength) {
                case 3:
                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {
                        endCase = 'second_on_bottom';
                    }
                    break;
                case 4:
                    if (notColliding([0, 2], [1, 3])) {
                        endCase = 'spaced_out_tetrachord';
                    }
                    break;
                case 5:
                    if (endCase === 'b' && notColliding([1, 3])) {
                        endCase = 'spaced_out_pentachord';
                        if (notColliding([0, 2], [2, 4])) {
                            endCase = 'very_spaced_out_pentachord';
                        }
                    }
                    break;
                case 6:
                    if (notColliding([0, 3], [1, 4], [2, 5])) {
                        endCase = 'spaced_out_hexachord';
                    }
                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {
                        endCase = 'very_spaced_out_hexachord';
                    }
                    break;
                default:
                    break;
            }
            let groupMember;
            let column;
            if (groupLength >= 7) {
                let patternLength = 2;
                let collisionDetected = true;
                while (collisionDetected === true) {
                    collisionDetected = false;
                    for (let line = 0; line + patternLength < lineList.length; line++) {
                        if (this.checkCollision(lineList[line], lineList[line + patternLength])) {
                            collisionDetected = true;
                            patternLength++;
                            break;
                        }
                    }
                }
                for (groupMember = i; groupMember <= groupEnd; groupMember++) {
                    column = ((groupMember - i) % patternLength) + 1;
                    lineList[groupMember].column = column;
                    totalColumns = totalColumns > column ? totalColumns : column;
                }
            }
            else {
                for (groupMember = i; groupMember <= groupEnd; groupMember++) {
                    column = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];
                    lineList[groupMember].column = column;
                    totalColumns = totalColumns > column ? totalColumns : column;
                }
            }
            i = groupEnd;
        }
        const columnWidths = [];
        const columnXOffsets = [];
        for (let i = 0; i <= totalColumns; i++) {
            columnWidths[i] = 0;
            columnXOffsets[i] = 0;
        }
        columnWidths[0] = accShift + leftShift;
        columnXOffsets[0] = accShift + leftShift;
        lineList.forEach((line) => {
            if (line.width > columnWidths[line.column])
                columnWidths[line.column] = line.width;
        });
        for (let i = 1; i < columnWidths.length; i++) {
            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];
        }
        const totalShift = columnXOffsets[columnXOffsets.length - 1];
        let accCount = 0;
        lineList.forEach((line) => {
            let lineWidth = 0;
            const lastAccOnLine = accCount + line.numAcc;
            for (accCount; accCount < lastAccOnLine; accCount++) {
                const xShift = columnXOffsets[line.column - 1] + lineWidth;
                accList[accCount].acc.setXShift(xShift);
                lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;
                L('Line, accCount, shift: ', line.line, accCount, xShift);
            }
        });
        state.left_shift += totalShift + additionalPadding;
    }
    static checkCollision(line1, line2) {
        let clearance = line2.line - line1.line;
        let clearanceRequired = 3;
        if (clearance > 0) {
            clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;
            if (line1.dblSharpLine)
                clearance -= 0.5;
        }
        else {
            clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;
            if (line2.dblSharpLine)
                clearance -= 0.5;
        }
        const collision = Math.abs(clearance) < clearanceRequired;
        L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);
        return collision;
    }
    static applyAccidentals(voices, keySignature) {
        const tickPositions = [];
        const tickNoteMap = {};
        voices.forEach((voice) => {
            const tickPosition = new _fraction_js__WEBPACK_IMPORTED_MODULE_0__.Fraction(0, 1);
            const tickable = voice.getTickables();
            tickable.forEach((t) => {
                if (t.shouldIgnoreTicks())
                    return;
                const notesAtPosition = tickNoteMap[tickPosition.value()];
                if (!notesAtPosition) {
                    tickPositions.push(tickPosition.value());
                    tickNoteMap[tickPosition.value()] = [t];
                }
                else {
                    notesAtPosition.push(t);
                }
                tickPosition.add(t.getTicks());
            });
        });
        const music = new _music_js__WEBPACK_IMPORTED_MODULE_3__.Music();
        if (!keySignature)
            keySignature = 'C';
        const scaleMapKey = music.createScaleMap(keySignature);
        const scaleMap = {};
        tickPositions.forEach((tickPos) => {
            const tickables = tickNoteMap[tickPos];
            const modifiedPitches = [];
            const processNote = (t) => {
                if (!(0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isStaveNote)(t) || t.isRest() || t.shouldIgnoreTicks()) {
                    return;
                }
                const staveNote = t;
                staveNote.keys.forEach((keyString, keyIndex) => {
                    const key = music.getNoteParts(keyString.split('/')[0]);
                    const octave = keyString.split('/')[1];
                    const accidentalString = key.accidental || 'n';
                    const pitch = key.root + accidentalString;
                    if (!scaleMap[key.root + octave])
                        scaleMap[key.root + octave] = scaleMapKey[key.root];
                    const sameAccidental = scaleMap[key.root + octave] === pitch;
                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;
                    staveNote.getModifiers().forEach((modifier, index) => {
                        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isAccidental)(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {
                            staveNote.getModifiers().splice(index, 1);
                        }
                    });
                    if (!sameAccidental || (sameAccidental && previouslyModified)) {
                        scaleMap[key.root + octave] = pitch;
                        const accidental = new Accidental(accidentalString);
                        staveNote.addModifier(accidental, keyIndex);
                        modifiedPitches.push(keyString);
                    }
                });
                staveNote.getModifiers().forEach((modifier) => {
                    if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isGraceNoteGroup)(modifier)) {
                        modifier.getGraceNotes().forEach(processNote);
                    }
                });
            };
            tickables.forEach(processNote);
        });
    }
    reset() {
        const fontScale = this.render_options.font_scale;
        this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(this.accidental.code, fontScale);
        this.glyph.setOriginX(1.0);
        if (this.cautionary) {
            this.parenLeft = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(_tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.accidentalCodes('{').code, fontScale);
            this.parenRight = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(_tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.accidentalCodes('}').code, fontScale);
            this.parenLeft.setOriginX(1.0);
            this.parenRight.setOriginX(1.0);
        }
    }
    getWidth() {
        if (this.cautionary) {
            const parenLeft = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(this.parenLeft);
            const parenRight = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(this.parenRight);
            const parenWidth = parenLeft.getMetrics().width +
                parenRight.getMetrics().width +
                this.render_options.parenLeftPadding +
                this.render_options.parenRightPadding;
            return this.glyph.getMetrics().width + parenWidth;
        }
        else {
            return this.glyph.getMetrics().width;
        }
    }
    setNote(note) {
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(note, 'ArgumentError', `Bad note value: ${note}`);
        this.note = note;
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isGraceNote)(note)) {
            this.render_options.font_scale = 25;
            this.reset();
        }
        return this;
    }
    setAsCautionary() {
        this.cautionary = true;
        this.render_options.font_scale = 28;
        this.reset();
        return this;
    }
    draw() {
        const { type, position, index, cautionary, x_shift, y_shift, glyph, render_options: { parenLeftPadding, parenRightPadding }, } = this;
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(position, index);
        let accX = start.x + x_shift;
        const accY = start.y + y_shift;
        L('Rendering: ', type, accX, accY);
        if (!cautionary) {
            glyph.render(ctx, accX, accY);
        }
        else {
            const parenLeft = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(this.parenLeft);
            const parenRight = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(this.parenRight);
            parenRight.render(ctx, accX, accY);
            accX -= parenRight.getMetrics().width;
            accX -= parenRightPadding;
            accX -= this.accidental.parenRightPaddingAdjustment;
            glyph.render(ctx, accX, accY);
            accX -= glyph.getMetrics().width;
            accX -= parenLeftPadding;
            parenLeft.render(ctx, accX, accY);
        }
    }
}
Accidental.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/annotation.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/annotation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Annotation: () => (/* binding */ Annotation),
/* harmony export */   AnnotationHorizontalJustify: () => (/* binding */ AnnotationHorizontalJustify),
/* harmony export */   AnnotationVerticalJustify: () => (/* binding */ AnnotationVerticalJustify)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







function L(...args) {
    if (Annotation.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.log)('Vex.Flow.Annotation', args);
}
var AnnotationHorizontalJustify;
(function (AnnotationHorizontalJustify) {
    AnnotationHorizontalJustify[AnnotationHorizontalJustify["LEFT"] = 1] = "LEFT";
    AnnotationHorizontalJustify[AnnotationHorizontalJustify["CENTER"] = 2] = "CENTER";
    AnnotationHorizontalJustify[AnnotationHorizontalJustify["RIGHT"] = 3] = "RIGHT";
    AnnotationHorizontalJustify[AnnotationHorizontalJustify["CENTER_STEM"] = 4] = "CENTER_STEM";
})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));
var AnnotationVerticalJustify;
(function (AnnotationVerticalJustify) {
    AnnotationVerticalJustify[AnnotationVerticalJustify["TOP"] = 1] = "TOP";
    AnnotationVerticalJustify[AnnotationVerticalJustify["CENTER"] = 2] = "CENTER";
    AnnotationVerticalJustify[AnnotationVerticalJustify["BOTTOM"] = 3] = "BOTTOM";
    AnnotationVerticalJustify[AnnotationVerticalJustify["CENTER_STEM"] = 4] = "CENTER_STEM";
})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));
class Annotation extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(text) {
        super();
        this.text = text;
        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;
        this.verticalJustification = AnnotationVerticalJustify.TOP;
        this.resetFont();
        this.setWidth(_tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.textWidth(text));
    }
    static get CATEGORY() {
        return "Annotation";
    }
    static get minAnnotationPadding() {
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont();
        return musicFont.lookupMetric('glyphs.noteHead.minPadding');
    }
    static format(annotations, state) {
        if (!annotations || annotations.length === 0)
            return false;
        let leftWidth = 0;
        let rightWidth = 0;
        let maxLeftGlyphWidth = 0;
        let maxRightGlyphWidth = 0;
        for (let i = 0; i < annotations.length; ++i) {
            const annotation = annotations[i];
            const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.create(annotation.textFont);
            const textLines = (5 + textFormatter.maxHeight) / _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE;
            let verticalSpaceNeeded = textLines;
            const note = annotation.checkAttachedNote();
            const glyphWidth = note.getGlyph().getWidth();
            const textWidth = textFormatter.getWidthForTextInPx(annotation.text);
            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {
                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);
                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;
            }
            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {
                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);
                rightWidth = Math.max(rightWidth, textWidth);
            }
            else {
                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;
                rightWidth = Math.max(rightWidth, textWidth / 2);
                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);
                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);
            }
            const stave = note.getStave();
            const stemDirection = note.hasStem() ? note.getStemDirection() : _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
            let stemHeight = 0;
            let lines = 5;
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isTabNote)(note)) {
                if (note.render_options.draw_stem) {
                    const stem = note.getStem();
                    if (stem) {
                        stemHeight = Math.abs(stem.getHeight()) / _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE;
                    }
                }
                else {
                    stemHeight = 0;
                }
            }
            else if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isStemmableNote)(note)) {
                const stem = note.getStem();
                if (stem && note.getNoteType() === 'n') {
                    stemHeight = Math.abs(stem.getHeight()) / _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE;
                }
            }
            if (stave) {
                lines = stave.getNumLines();
            }
            if (annotation.verticalJustification === this.VerticalJustify.TOP) {
                let noteLine = note.getLineNumber(true);
                if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isTabNote)(note)) {
                    noteLine = lines - (note.leastString() - 0.5);
                }
                if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                    noteLine += stemHeight;
                }
                const curTop = noteLine + state.top_text_line + 0.5;
                if (curTop < lines) {
                    annotation.setTextLine(lines - noteLine);
                    verticalSpaceNeeded += lines - noteLine;
                    state.top_text_line = verticalSpaceNeeded;
                }
                else {
                    annotation.setTextLine(state.top_text_line);
                    state.top_text_line += verticalSpaceNeeded;
                }
            }
            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {
                let noteLine = lines - note.getLineNumber();
                if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isTabNote)(note)) {
                    noteLine = note.greatestString() - 1;
                }
                if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
                    noteLine += stemHeight;
                }
                const curBottom = noteLine + state.text_line + 1;
                if (curBottom < lines) {
                    annotation.setTextLine(lines - curBottom);
                    verticalSpaceNeeded += lines - curBottom;
                    state.text_line = verticalSpaceNeeded;
                }
                else {
                    annotation.setTextLine(state.text_line);
                    state.text_line += verticalSpaceNeeded;
                }
            }
            else {
                annotation.setTextLine(state.text_line);
            }
        }
        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));
        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));
        state.left_shift += leftOverlap;
        state.right_shift += rightOverlap;
        return true;
    }
    setVerticalJustification(just) {
        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;
        return this;
    }
    getJustification() {
        return this.horizontalJustification;
    }
    setJustification(just) {
        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        const stemDirection = note.hasStem() ? note.getStemDirection() : _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
        const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.create(this.textFont);
        const start = note.getModifierStartXY(_modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.ABOVE, this.index);
        this.setRendered();
        ctx.save();
        this.applyStyle();
        const classString = Object.keys(this.getAttribute('classes')).join(' ');
        ctx.openGroup(classString, this.getAttribute('id'));
        ctx.setFont(this.textFont);
        const text_width = textFormatter.getWidthForTextInPx(this.text);
        const text_height = textFormatter.maxHeight + 2;
        let x;
        let y;
        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {
            x = start.x;
        }
        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {
            x = start.x - text_width;
        }
        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {
            x = start.x - text_width / 2;
        }
        else {
            x = note.getStemX() - text_width / 2;
        }
        let stem_ext = {};
        let spacing = 0;
        const has_stem = note.hasStem();
        const stave = note.checkStave();
        if (has_stem) {
            stem_ext = note.checkStem().getExtents();
            spacing = stave.getSpacingBetweenLines();
        }
        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {
            const ys = note.getYs();
            y = ys.reduce((a, b) => (a > b ? a : b));
            y += (this.text_line + 1) * _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE + text_height;
            if (has_stem && stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
                y = Math.max(y, stem_ext.topY + text_height + spacing * this.text_line);
            }
        }
        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {
            const yt = note.getYForTopText(this.text_line) - 1;
            const yb = stave.getYForBottomText(this.text_line);
            y = yt + (yb - yt) / 2 + text_height / 2;
        }
        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {
            y = note.getYs()[0] - (this.text_line + 1) * _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE;
            if (has_stem && stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                spacing = stem_ext.topY < stave.getTopLineTopY() ? _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE : spacing;
                y = Math.min(y, stem_ext.topY - spacing * (this.text_line + 1));
            }
        }
        else {
            const extents = note.getStemExtents();
            y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;
        }
        L('Rendering annotation: ', this.text, x, y);
        ctx.fillText(this.text, x, y);
        ctx.closeGroup();
        this.restoreStyle();
        ctx.restore();
    }
}
Annotation.DEBUG = false;
Annotation.TEXT_FONT = Object.assign({}, _element_js__WEBPACK_IMPORTED_MODULE_0__.Element.TEXT_FONT);
Annotation.HorizontalJustify = AnnotationHorizontalJustify;
Annotation.HorizontalJustifyString = {
    left: AnnotationHorizontalJustify.LEFT,
    right: AnnotationHorizontalJustify.RIGHT,
    center: AnnotationHorizontalJustify.CENTER,
    centerStem: AnnotationHorizontalJustify.CENTER_STEM,
};
Annotation.VerticalJustify = AnnotationVerticalJustify;
Annotation.VerticalJustifyString = {
    above: AnnotationVerticalJustify.TOP,
    top: AnnotationVerticalJustify.TOP,
    below: AnnotationVerticalJustify.BOTTOM,
    bottom: AnnotationVerticalJustify.BOTTOM,
    center: AnnotationVerticalJustify.CENTER,
    centerStem: AnnotationVerticalJustify.CENTER_STEM,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/articulation.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/articulation.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Articulation: () => (/* binding */ Articulation)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");






function L(...args) {
    if (Articulation.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.log)('Vex.Flow.Articulation', args);
}
const { ABOVE, BELOW } = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position;
function roundToNearestHalf(mathFn, value) {
    return mathFn(value / 0.5) * 0.5;
}
function isWithinLines(line, position) {
    return position === ABOVE ? line <= 5 : line >= 1;
}
function getRoundingFunction(line, position) {
    if (isWithinLines(line, position)) {
        if (position === ABOVE) {
            return Math.ceil;
        }
        else {
            return Math.floor;
        }
    }
    else {
        return Math.round;
    }
}
function snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {
    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);
    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);
    const onStaffLine = snappedLine % 1 === 0;
    if (canSnapToStaffSpace && onStaffLine) {
        const HALF_STAFF_SPACE = 0.5;
        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;
    }
    else {
        return snappedLine;
    }
}
const isStaveOrGraceNote = (note) => (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isStaveNote)(note) || (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isGraceNote)(note);
function getTopY(note, textLine) {
    const stemDirection = note.getStemDirection();
    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();
    if (isStaveOrGraceNote(note)) {
        if (note.hasStem()) {
            if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                return stemTipY;
            }
            else {
                return stemBaseY;
            }
        }
        else {
            return Math.min(...note.getYs());
        }
    }
    else if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isTabNote)(note)) {
        if (note.hasStem()) {
            if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                return stemTipY;
            }
            else {
                return note.checkStave().getYForTopText(textLine);
            }
        }
        else {
            return note.checkStave().getYForTopText(textLine);
        }
    }
    else {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
    }
}
function getBottomY(note, textLine) {
    const stemDirection = note.getStemDirection();
    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();
    if (isStaveOrGraceNote(note)) {
        if (note.hasStem()) {
            if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                return stemBaseY;
            }
            else {
                return stemTipY;
            }
        }
        else {
            return Math.max(...note.getYs());
        }
    }
    else if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isTabNote)(note)) {
        if (note.hasStem()) {
            if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                return note.checkStave().getYForBottomText(textLine);
            }
            else {
                return stemTipY;
            }
        }
        else {
            return note.checkStave().getYForBottomText(textLine);
        }
    }
    else {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
    }
}
function getInitialOffset(note, position) {
    const isOnStemTip = (position === ABOVE && note.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) ||
        (position === BELOW && note.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN);
    if (isStaveOrGraceNote(note)) {
        if (note.hasStem() && isOnStemTip) {
            return 0.5;
        }
        else {
            return 1;
        }
    }
    else {
        if (note.hasStem() && isOnStemTip) {
            return 1;
        }
        else {
            return 0;
        }
    }
}
class Articulation extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(type) {
        super();
        this.type = type;
        this.position = BELOW;
        this.render_options = {
            font_scale: 38,
        };
        this.reset();
    }
    static get CATEGORY() {
        return "Articulation";
    }
    static format(articulations, state) {
        if (!articulations || articulations.length === 0)
            return false;
        const margin = 0.5;
        let maxGlyphWidth = 0;
        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(articulation.glyph.getMetrics().height) / 10 + margin);
        articulations.forEach((articulation) => {
            const note = articulation.checkAttachedNote();
            const logStr = JSON.stringify(note.keys[0], null, ' ');
            L('note ' + logStr + ' line ' + state.text_line + ' bottomLine ' + state.top_text_line);
            maxGlyphWidth = Math.max(note.getGlyph().getWidth(), maxGlyphWidth);
            let lines = 5;
            const stemDirection = note.hasStem() ? note.getStemDirection() : _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
            let stemHeight = 0;
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isStemmableNote)(note)) {
                const stem = note.getStem();
                if (stem) {
                    stemHeight = Math.abs(stem.getHeight()) / _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_DISTANCE;
                }
            }
            const stave = note.getStave();
            if (stave) {
                lines = stave.getNumLines();
                L('stave is ' + stave.getAttribute('id'));
            }
            if (articulation.getPosition() === ABOVE) {
                let noteLine = note.getLineNumber(true);
                if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP) {
                    noteLine += stemHeight;
                }
                let increment = getIncrement(articulation, state.top_text_line, ABOVE);
                const curTop = noteLine + state.top_text_line + 0.5;
                if (!articulation.articulation.between_lines && curTop < lines) {
                    increment += lines - curTop;
                }
                articulation.setTextLine(state.top_text_line);
                state.top_text_line += increment;
                L('note line above ' + noteLine);
            }
            else if (articulation.getPosition() === BELOW) {
                let noteLine = Math.max(lines - note.getLineNumber(), 0);
                if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
                    noteLine += stemHeight;
                }
                let increment = getIncrement(articulation, state.text_line, BELOW);
                const curBottom = noteLine + state.text_line + 0.5;
                if (!articulation.articulation.between_lines && curBottom < lines) {
                    increment += lines - curBottom;
                }
                articulation.setTextLine(state.text_line);
                state.text_line += increment;
                L('note line below ' + noteLine);
            }
        });
        const width = articulations
            .map((articulation) => articulation.getWidth())
            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));
        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.left_shift + state.right_shift), 0));
        state.left_shift += overlap / 2;
        state.right_shift += overlap / 2;
        return true;
    }
    static easyScoreHook({ articulations }, note, builder) {
        if (!articulations)
            return;
        const articNameToCode = {
            staccato: 'a.',
            tenuto: 'a-',
            accent: 'a>',
        };
        articulations
            .split(',')
            .map((articString) => articString.trim().split('.'))
            .map(([name, position]) => {
            const artic = { type: articNameToCode[name] };
            if (position)
                artic.position = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.PositionString[position];
            return builder.getFactory().Articulation(artic);
        })
            .map((artic) => note.addModifier(artic, 0));
    }
    reset() {
        this.articulation = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.articulationCodes(this.type);
        const articulation = (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);
        const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;
        this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(code !== null && code !== void 0 ? code : '', this.render_options.font_scale);
        this.setWidth((0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(this.glyph.getMetrics().width));
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const index = this.checkIndex();
        const { position, glyph, text_line: textLine } = this;
        const canSitBetweenLines = this.articulation.between_lines;
        const stave = note.checkStave();
        const staffSpace = stave.getSpacingBetweenLines();
        const isTab = (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isTabNote)(note);
        const { x } = note.getModifierStartXY(position, index);
        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;
        const initialOffset = getInitialOffset(note, position);
        const padding = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);
        L(`staffSpace: ${staffSpace} x: ${x} textLine ${textLine} initialOffset ${initialOffset} shouldSitOutsideStaff ${shouldSitOutsideStaff} padding ${padding}`);
        let y = {
            [ABOVE]: () => {
                glyph.setOrigin(0.5, 1);
                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;
                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;
            },
            [BELOW]: () => {
                glyph.setOrigin(0.5, 0);
                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;
                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;
            },
        }[position]();
        if (!isTab) {
            const offsetDirection = position === ABOVE ? -1 : +1;
            const noteLine = note.getKeyProps()[index].line;
            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;
            const articLine = distanceFromNote + Number(noteLine);
            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);
            if (isWithinLines(snappedLine, position))
                glyph.setOrigin(0.5, 0.5);
            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;
        }
        const staffId = stave.getAttribute('id');
        L(`Rendering articulation ${this.type} stave ${staffId} at (x: ${x}, y: ${y})`);
        glyph.render(ctx, x, y);
    }
}
Articulation.DEBUG = false;
Articulation.INITIAL_OFFSET = -0.5;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/barnote.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/barnote.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BarNote: () => (/* binding */ BarNote)
/* harmony export */ });
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _stavebarline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavebarline.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavebarline.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



function L(...args) {
    if (BarNote.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.log)('Vex.Flow.BarNote', args);
}
class BarNote extends _note_js__WEBPACK_IMPORTED_MODULE_0__.Note {
    constructor(type = _stavebarline_js__WEBPACK_IMPORTED_MODULE_1__.BarlineType.SINGLE) {
        super({ duration: 'b' });
        this.metrics = {
            widths: {},
        };
        const TYPE = _stavebarline_js__WEBPACK_IMPORTED_MODULE_1__.BarlineType;
        this.metrics.widths = {
            [TYPE.SINGLE]: 8,
            [TYPE.DOUBLE]: 12,
            [TYPE.END]: 15,
            [TYPE.REPEAT_BEGIN]: 14,
            [TYPE.REPEAT_END]: 14,
            [TYPE.REPEAT_BOTH]: 18,
            [TYPE.NONE]: 0,
        };
        this.ignore_ticks = true;
        this.setType(type);
    }
    static get CATEGORY() {
        return "BarNote";
    }
    getType() {
        return this.type;
    }
    setType(type) {
        this.type = typeof type === 'string' ? _stavebarline_js__WEBPACK_IMPORTED_MODULE_1__.Barline.typeString[type] : type;
        this.setWidth(this.metrics.widths[this.type]);
        return this;
    }
    addToModifierContext(mc) {
        return this;
    }
    preFormat() {
        this.preFormatted = true;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        L('Rendering bar line at: ', this.getAbsoluteX());
        if (this.style)
            this.applyStyle(ctx);
        const barline = new _stavebarline_js__WEBPACK_IMPORTED_MODULE_1__.Barline(this.type);
        barline.setX(this.getAbsoluteX());
        barline.draw(this.checkStave());
        if (this.style)
            this.restoreStyle(ctx);
        this.setRendered();
    }
}
BarNote.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/beam.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/beam.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BEAM_BOTH: () => (/* binding */ BEAM_BOTH),
/* harmony export */   BEAM_LEFT: () => (/* binding */ BEAM_LEFT),
/* harmony export */   BEAM_RIGHT: () => (/* binding */ BEAM_RIGHT),
/* harmony export */   Beam: () => (/* binding */ Beam)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");






function calculateStemDirection(notes) {
    let lineSum = 0;
    notes.forEach((note) => {
        if (note.keyProps) {
            note.keyProps.forEach((keyProp) => {
                lineSum += keyProp.line - 3;
            });
        }
    });
    if (lineSum >= 0) {
        return _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN;
    }
    return _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
}
function getStemSlope(firstNote, lastNote) {
    const firstStemTipY = firstNote.getStemExtents().topY;
    const firstStemX = firstNote.getStemX();
    const lastStemTipY = lastNote.getStemExtents().topY;
    const lastStemX = lastNote.getStemX();
    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);
}
const BEAM_LEFT = 'L';
const BEAM_RIGHT = 'R';
const BEAM_BOTH = 'B';
class Beam extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(notes, auto_stem = false) {
        super();
        this.slope = 0;
        this.y_shift = 0;
        this.forcedPartialDirections = {};
        if (!notes || notes.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('BadArguments', 'No notes provided for beam.');
        }
        if (notes.length === 1) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('BadArguments', 'Too few notes for beam.');
        }
        this.ticks = notes[0].getIntrinsicTicks();
        if (this.ticks >= _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks('4')) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');
        }
        let i;
        let note;
        this.stem_direction = _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
        for (i = 0; i < notes.length; ++i) {
            note = notes[i];
            if (note.hasStem()) {
                this.stem_direction = note.getStemDirection();
                break;
            }
        }
        let stem_direction = this.stem_direction;
        if (auto_stem && (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isStaveNote)(notes[0])) {
            stem_direction = calculateStemDirection(notes);
        }
        else if (auto_stem && (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isTabNote)(notes[0])) {
            const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);
            stem_direction = stem_weight > -1 ? _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP : _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN;
        }
        for (i = 0; i < notes.length; ++i) {
            note = notes[i];
            if (auto_stem) {
                note.setStemDirection(stem_direction);
                this.stem_direction = stem_direction;
            }
            note.setBeam(this);
        }
        this.postFormatted = false;
        this.notes = notes;
        this.beam_count = this.getBeamCount();
        this.break_on_indices = [];
        this.render_options = {
            beam_width: 5,
            max_slope: 0.25,
            min_slope: -0.25,
            slope_iterations: 20,
            slope_cost: 100,
            show_stemlets: false,
            stemlet_extension: 7,
            partial_beam_length: 10,
            flat_beams: false,
            min_flat_beam_offset: 15,
        };
    }
    static get CATEGORY() {
        return "Beam";
    }
    getStemDirection() {
        return this.stem_direction;
    }
    static getDefaultBeamGroups(time_sig) {
        if (!time_sig || time_sig === 'c') {
            time_sig = '4/4';
        }
        const defaults = {
            '1/2': ['1/2'],
            '2/2': ['1/2'],
            '3/2': ['1/2'],
            '4/2': ['1/2'],
            '1/4': ['1/4'],
            '2/4': ['1/4'],
            '3/4': ['1/4'],
            '4/4': ['1/4'],
            '1/8': ['1/8'],
            '2/8': ['2/8'],
            '3/8': ['3/8'],
            '4/8': ['2/8'],
            '1/16': ['1/16'],
            '2/16': ['2/16'],
            '3/16': ['3/16'],
            '4/16': ['2/16'],
        };
        const groups = defaults[time_sig];
        if (groups === undefined) {
            const beatTotal = parseInt(time_sig.split('/')[0], 10);
            const beatValue = parseInt(time_sig.split('/')[1], 10);
            const tripleMeter = beatTotal % 3 === 0;
            if (tripleMeter) {
                return [new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(3, beatValue)];
            }
            else if (beatValue > 4) {
                return [new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(2, beatValue)];
            }
            else if (beatValue <= 4) {
                return [new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(1, beatValue)];
            }
        }
        else {
            return groups.map((group) => new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction().parse(group));
        }
        return [new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(1, 4)];
    }
    static applyAndGetBeams(voice, stem_direction, groups) {
        return Beam.generateBeams(voice.getTickables(), { groups, stem_direction });
    }
    static generateBeams(notes, config = {}) {
        if (!config.groups || !config.groups.length) {
            config.groups = [new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(2, 8)];
        }
        const tickGroups = config.groups.map((group) => {
            if (!group.multiply) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');
            }
            return group.clone().multiply(_tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.RESOLUTION, 1);
        });
        const unprocessedNotes = notes;
        let currentTickGroup = 0;
        let noteGroups = [];
        let currentGroup = [];
        function getTotalTicks(vf_notes) {
            return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(0, 1));
        }
        function nextTickGroup() {
            if (tickGroups.length - 1 > currentTickGroup) {
                currentTickGroup += 1;
            }
            else {
                currentTickGroup = 0;
            }
        }
        function createGroups() {
            let nextGroup = [];
            let currentGroupTotalTicks = new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(0, 1);
            unprocessedNotes.forEach((unprocessedNote) => {
                nextGroup = [];
                if (unprocessedNote.shouldIgnoreTicks()) {
                    noteGroups.push(currentGroup);
                    currentGroup = nextGroup;
                    return;
                }
                currentGroup.push(unprocessedNote);
                const ticksPerGroup = tickGroups[currentTickGroup].clone();
                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);
                const unbeamable = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToNumber(unprocessedNote.getDuration()) < 8;
                if (unbeamable && unprocessedNote.getTuplet()) {
                    ticksPerGroup.numerator *= 2;
                }
                if (totalTicks.greaterThan(ticksPerGroup)) {
                    if (!unbeamable) {
                        const note = currentGroup.pop();
                        if (note)
                            nextGroup.push(note);
                    }
                    noteGroups.push(currentGroup);
                    do {
                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);
                        nextTickGroup();
                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));
                    currentGroup = nextGroup;
                }
                else if (totalTicks.equals(ticksPerGroup)) {
                    noteGroups.push(currentGroup);
                    currentGroupTotalTicks = new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(0, 1);
                    currentGroup = nextGroup;
                    nextTickGroup();
                }
            });
            if (currentGroup.length > 0) {
                noteGroups.push(currentGroup);
            }
        }
        function getBeamGroups() {
            return noteGroups.filter((group) => {
                if (group.length > 1) {
                    let beamable = true;
                    group.forEach((note) => {
                        if (note.getIntrinsicTicks() >= _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks('4')) {
                            beamable = false;
                        }
                    });
                    return beamable;
                }
                return false;
            });
        }
        function sanitizeGroups() {
            const sanitizedGroups = [];
            noteGroups.forEach((group) => {
                let tempGroup = [];
                group.forEach((note, index, group) => {
                    const isFirstOrLast = index === 0 || index === group.length - 1;
                    const prevNote = group[index - 1];
                    const breaksOnEachRest = !config.beam_rests && note.isRest();
                    const breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;
                    let breakOnStemChange = false;
                    if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {
                        const prevDirection = prevNote.getStemDirection();
                        const currentDirection = note.getStemDirection();
                        breakOnStemChange = currentDirection !== prevDirection;
                    }
                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;
                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;
                    if (shouldBreak) {
                        if (tempGroup.length > 0) {
                            sanitizedGroups.push(tempGroup);
                        }
                        tempGroup = breakOnStemChange ? [note] : [];
                    }
                    else {
                        tempGroup.push(note);
                    }
                });
                if (tempGroup.length > 0) {
                    sanitizedGroups.push(tempGroup);
                }
            });
            noteGroups = sanitizedGroups;
        }
        function formatStems() {
            noteGroups.forEach((group) => {
                let stemDirection;
                if (config.maintain_stem_directions) {
                    const note = findFirstNote(group);
                    stemDirection = note ? note.getStemDirection() : _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
                }
                else {
                    if (config.stem_direction) {
                        stemDirection = config.stem_direction;
                    }
                    else {
                        stemDirection = calculateStemDirection(group);
                    }
                }
                applyStemDirection(group, stemDirection);
            });
        }
        function findFirstNote(group) {
            for (let i = 0; i < group.length; i++) {
                const note = group[i];
                if (!note.isRest()) {
                    return note;
                }
            }
            return false;
        }
        function applyStemDirection(group, direction) {
            group.forEach((note) => {
                note.setStemDirection(direction);
            });
        }
        function getTuplets() {
            const uniqueTuplets = [];
            noteGroups.forEach((group) => {
                let tuplet;
                group.forEach((note) => {
                    const noteTuplet = note.getTuplet();
                    if (noteTuplet && tuplet !== noteTuplet) {
                        tuplet = noteTuplet;
                        uniqueTuplets.push(tuplet);
                    }
                });
            });
            return uniqueTuplets;
        }
        createGroups();
        sanitizeGroups();
        formatStems();
        const beamedNoteGroups = getBeamGroups();
        const allTuplets = getTuplets();
        const beams = [];
        beamedNoteGroups.forEach((group) => {
            const beam = new Beam(group);
            if (config.show_stemlets) {
                beam.render_options.show_stemlets = true;
            }
            if (config.secondary_breaks) {
                beam.render_options.secondary_break_ticks = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks(config.secondary_breaks);
            }
            if (config.flat_beams === true) {
                beam.render_options.flat_beams = true;
                beam.render_options.flat_beam_offset = config.flat_beam_offset;
            }
            beams.push(beam);
        });
        allTuplets.forEach((tuplet) => {
            const direction = tuplet.notes[0].stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN ? -1 : 1;
            tuplet.setTupletLocation(direction);
            let bracketed = false;
            for (let i = 0; i < tuplet.notes.length; i++) {
                const note = tuplet.notes[i];
                if (!note.hasBeam()) {
                    bracketed = true;
                    break;
                }
            }
            tuplet.setBracketed(bracketed);
        });
        return beams;
    }
    getNotes() {
        return this.notes;
    }
    getBeamCount() {
        const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);
        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));
        return maxBeamCount;
    }
    breakSecondaryAt(indices) {
        this.break_on_indices = indices;
        return this;
    }
    setPartialBeamSideAt(noteIndex, side) {
        this.forcedPartialDirections[noteIndex] = side;
        return this;
    }
    unsetPartialBeamSideAt(noteIndex) {
        delete this.forcedPartialDirections[noteIndex];
        return this;
    }
    getSlopeY(x, first_x_px, first_y_px, slope) {
        return first_y_px + (x - first_x_px) * slope;
    }
    calculateSlope() {
        const { notes, stem_direction: stemDirection, render_options: { max_slope, min_slope, slope_iterations, slope_cost }, } = this;
        const firstNote = notes[0];
        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);
        const increment = (max_slope - min_slope) / slope_iterations;
        let minCost = Number.MAX_VALUE;
        let bestSlope = 0;
        let yShift = 0;
        for (let slope = min_slope; slope <= max_slope; slope += increment) {
            let totalStemExtension = 0;
            let yShiftTemp = 0;
            for (let i = 1; i < notes.length; ++i) {
                const note = notes[i];
                if (note.hasStem() || note.isRest()) {
                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;
                    const stemTipY = note.getStemExtents().topY;
                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {
                        const diff = Math.abs(stemTipY - adjustedStemTipY);
                        yShiftTemp += diff * -stemDirection;
                        totalStemExtension += diff * i;
                    }
                    else {
                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;
                    }
                }
            }
            const idealSlope = initialSlope / 2;
            const distanceFromIdeal = Math.abs(idealSlope - slope);
            const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);
            if (cost < minCost) {
                minCost = cost;
                bestSlope = slope;
                yShift = yShiftTemp;
            }
        }
        this.slope = bestSlope;
        this.y_shift = yShift;
    }
    calculateFlatSlope() {
        const { notes, stem_direction, render_options: { beam_width, min_flat_beam_offset, flat_beam_offset }, } = this;
        let total = 0;
        let extremeY = 0;
        let extremeBeamCount = 0;
        let currentExtreme = 0;
        for (let i = 0; i < notes.length; i++) {
            const note = notes[i];
            const stemTipY = note.getStemExtents().topY;
            total += stemTipY;
            if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN && currentExtreme < stemTipY) {
                currentExtreme = stemTipY;
                extremeY = Math.max(...note.getYs());
                extremeBeamCount = note.getBeamCount();
            }
            else if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {
                currentExtreme = stemTipY;
                extremeY = Math.min(...note.getYs());
                extremeBeamCount = note.getBeamCount();
            }
        }
        let offset = total / notes.length;
        const beamWidth = beam_width * 1.5;
        const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;
        const newOffset = extremeY + extremeTest * -stem_direction;
        if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN && offset < newOffset) {
            offset = extremeY + extremeTest;
        }
        else if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP && offset > newOffset) {
            offset = extremeY - extremeTest;
        }
        if (!flat_beam_offset) {
            this.render_options.flat_beam_offset = offset;
        }
        else if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN && offset > flat_beam_offset) {
            this.render_options.flat_beam_offset = offset;
        }
        else if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP && offset < flat_beam_offset) {
            this.render_options.flat_beam_offset = offset;
        }
        this.slope = 0;
        this.y_shift = 0;
    }
    getBeamYToDraw() {
        const firstNote = this.notes[0];
        const firstStemTipY = firstNote.getStemExtents().topY;
        let beamY = firstStemTipY;
        if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {
            beamY = this.render_options.flat_beam_offset;
        }
        return beamY;
    }
    applyStemExtensions() {
        const { notes, slope, y_shift, stem_direction, beam_count, render_options: { show_stemlets, stemlet_extension, beam_width }, } = this;
        const firstNote = notes[0];
        const firstStemTipY = this.getBeamYToDraw();
        const firstStemX = firstNote.getStemX();
        for (let i = 0; i < notes.length; ++i) {
            const note = notes[i];
            const stem = note.getStem();
            if (stem) {
                const stemX = note.getStemX();
                const { topY: stemTipY } = note.getStemExtents();
                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;
                const preBeamExtension = stem.getExtension();
                const beamExtension = stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;
                stem.setExtension(preBeamExtension + beamExtension);
                stem.adjustHeightForBeam();
                if (note.isRest() && show_stemlets) {
                    const beamWidth = beam_width;
                    const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;
                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);
                }
            }
        }
    }
    lookupBeamDirection(duration, prev_tick, tick, next_tick, noteIndex) {
        if (duration === '4') {
            return BEAM_LEFT;
        }
        const forcedBeamDirection = this.forcedPartialDirections[noteIndex];
        if (forcedBeamDirection)
            return forcedBeamDirection;
        const lookup_duration = `${_tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToNumber(duration) / 2}`;
        const prev_note_gets_beam = prev_tick < _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks(lookup_duration);
        const next_note_gets_beam = next_tick < _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks(lookup_duration);
        const note_gets_beam = tick < _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks(lookup_duration);
        if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {
            return BEAM_BOTH;
        }
        else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {
            return BEAM_LEFT;
        }
        else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {
            return BEAM_RIGHT;
        }
        return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick, noteIndex);
    }
    getBeamLines(duration) {
        const tick_of_duration = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToTicks(duration);
        let beam_started = false;
        const beam_lines = [];
        let current_beam = undefined;
        const partial_beam_length = this.render_options.partial_beam_length;
        let previous_should_break = false;
        let tick_tally = 0;
        for (let i = 0; i < this.notes.length; ++i) {
            const note = this.notes[i];
            const ticks = note.getTicks().value();
            tick_tally += ticks;
            let should_break = false;
            if (parseInt(duration, 10) >= 8) {
                should_break = this.break_on_indices.indexOf(i) !== -1;
                if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {
                    tick_tally = 0;
                    should_break = true;
                }
            }
            const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;
            const stem_x = note.getStemX() - _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.WIDTH / 2;
            const prev_note = this.notes[i - 1];
            const next_note = this.notes[i + 1];
            const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;
            const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;
            const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;
            if (note_gets_beam) {
                if (beam_started) {
                    current_beam = beam_lines[beam_lines.length - 1];
                    current_beam.end = stem_x;
                    if (should_break) {
                        beam_started = false;
                        if (next_note && !next_note_gets_beam && current_beam.end === undefined) {
                            current_beam.end = current_beam.start - partial_beam_length;
                        }
                    }
                }
                else {
                    current_beam = { start: stem_x, end: undefined };
                    beam_started = true;
                    if (beam_alone) {
                        const prev_tick = prev_note.getIntrinsicTicks();
                        const next_tick = next_note.getIntrinsicTicks();
                        const tick = note.getIntrinsicTicks();
                        const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick, i);
                        if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {
                            current_beam.end = current_beam.start - partial_beam_length;
                        }
                        else {
                            current_beam.end = current_beam.start + partial_beam_length;
                        }
                    }
                    else if (!next_note_gets_beam) {
                        if ((previous_should_break || i === 0) && next_note) {
                            current_beam.end = current_beam.start + partial_beam_length;
                        }
                        else {
                            current_beam.end = current_beam.start - partial_beam_length;
                        }
                    }
                    else if (should_break) {
                        current_beam.end = current_beam.start - partial_beam_length;
                        beam_started = false;
                    }
                    beam_lines.push(current_beam);
                }
            }
            else {
                beam_started = false;
            }
            previous_should_break = should_break;
        }
        const last_beam = beam_lines[beam_lines.length - 1];
        if (last_beam && last_beam.end === undefined) {
            last_beam.end = last_beam.start - partial_beam_length;
        }
        return beam_lines;
    }
    drawStems(ctx) {
        this.notes.forEach((note) => {
            const stem = note.getStem();
            if (stem) {
                const stem_x = note.getStemX();
                stem.setNoteHeadXBounds(stem_x, stem_x);
                ctx.openGroup('stem', note.getAttribute('id') + '-stem');
                stem.setContext(ctx).draw();
                ctx.closeGroup();
            }
        }, this);
    }
    drawBeamLines(ctx) {
        const valid_beam_durations = ['4', '8', '16', '32', '64'];
        const firstNote = this.notes[0];
        let beamY = this.getBeamYToDraw();
        const firstStemX = firstNote.getStemX();
        const beamThickness = this.render_options.beam_width * this.stem_direction;
        for (let i = 0; i < valid_beam_durations.length; ++i) {
            const duration = valid_beam_durations[i];
            const beamLines = this.getBeamLines(duration);
            for (let j = 0; j < beamLines.length; ++j) {
                const beam_line = beamLines[j];
                const startBeamX = beam_line.start;
                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);
                const lastBeamX = beam_line.end;
                if (lastBeamX) {
                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);
                    this.setAttribute('el', ctx.openGroup('beam'));
                    ctx.beginPath();
                    ctx.moveTo(startBeamX, startBeamY);
                    ctx.lineTo(startBeamX, startBeamY + beamThickness);
                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);
                    ctx.lineTo(lastBeamX + 1, lastBeamY);
                    ctx.closePath();
                    ctx.fill();
                    ctx.closeGroup();
                }
                else {
                    throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('NoLastBeamX', 'lastBeamX undefined.');
                }
            }
            beamY += beamThickness * 1.5;
        }
    }
    preFormat() {
        return this;
    }
    postFormat() {
        if (this.postFormatted)
            return;
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_4__.isTabNote)(this.notes[0]) || this.render_options.flat_beams) {
            this.calculateFlatSlope();
        }
        else {
            this.calculateSlope();
        }
        this.applyStemExtensions();
        this.postFormatted = true;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        if (this.unbeamable)
            return;
        if (!this.postFormatted) {
            this.postFormat();
        }
        this.drawStems(ctx);
        this.applyStyle();
        this.drawBeamLines(ctx);
        this.restoreStyle();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/bend.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/bend.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Bend: () => (/* binding */ Bend)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class Bend extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(text, release = false, phrase) {
        super();
        this.text = text;
        this.x_shift = 0;
        this.release = release;
        this.tap = '';
        this.resetFont();
        this.render_options = {
            line_width: 1.5,
            line_style: '#777777',
            bend_width: 8,
            release_width: 8,
        };
        if (phrase) {
            this.phrase = phrase;
        }
        else {
            this.phrase = [{ type: Bend.UP, text: this.text }];
            if (this.release)
                this.phrase.push({ type: Bend.DOWN, text: '' });
        }
        this.updateWidth();
    }
    static get CATEGORY() {
        return "Bend";
    }
    static get UP() {
        return 0;
    }
    static get DOWN() {
        return 1;
    }
    static format(bends, state) {
        if (!bends || bends.length === 0)
            return false;
        let last_width = 0;
        for (let i = 0; i < bends.length; ++i) {
            const bend = bends[i];
            const note = bend.checkAttachedNote();
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isTabNote)(note)) {
                const stringPos = note.leastString() - 1;
                if (state.top_text_line < stringPos) {
                    state.top_text_line = stringPos;
                }
            }
            bend.setXShift(last_width);
            last_width = bend.getWidth();
            bend.setTextLine(state.top_text_line);
        }
        state.right_shift += last_width;
        state.top_text_line += 1;
        return true;
    }
    setXShift(value) {
        this.x_shift = value;
        this.updateWidth();
        return this;
    }
    setTap(value) {
        this.tap = value;
        return this;
    }
    getText() {
        return this.text;
    }
    getTextHeight() {
        const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_2__.TextFormatter.create(this.textFont);
        return textFormatter.maxHeight;
    }
    updateWidth() {
        const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_2__.TextFormatter.create(this.textFont);
        const measureText = (text) => {
            return textFormatter.getWidthForTextInPx(text);
        };
        let totalWidth = 0;
        for (let i = 0; i < this.phrase.length; ++i) {
            const bend = this.phrase[i];
            if (bend.width !== undefined) {
                totalWidth += bend.width;
            }
            else {
                const additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;
                bend.width = Math.max(additional_width, measureText(bend.text)) + 3;
                bend.draw_width = bend.width / 2;
                totalWidth += bend.width;
            }
        }
        this.setWidth(totalWidth + this.x_shift);
        return this;
    }
    draw() {
        var _a;
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(_modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT, this.index);
        start.x += 3;
        start.y += 0.5;
        const x_shift = this.x_shift;
        const stave = note.checkStave();
        const spacing = stave.getSpacingBetweenLines();
        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));
        const bend_height = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) + 3;
        const annotation_y = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) - 1;
        const renderBend = (x, y, width, height) => {
            const cp_x = x + width;
            const cp_y = y;
            ctx.save();
            ctx.beginPath();
            ctx.setLineWidth(this.render_options.line_width);
            ctx.setStrokeStyle(this.render_options.line_style);
            ctx.setFillStyle(this.render_options.line_style);
            ctx.moveTo(x, y);
            ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);
            ctx.stroke();
            ctx.restore();
        };
        const renderRelease = (x, y, width, height) => {
            ctx.save();
            ctx.beginPath();
            ctx.setLineWidth(this.render_options.line_width);
            ctx.setStrokeStyle(this.render_options.line_style);
            ctx.setFillStyle(this.render_options.line_style);
            ctx.moveTo(x, height);
            ctx.quadraticCurveTo(x + width, height, x + width, y);
            ctx.stroke();
            ctx.restore();
        };
        const renderArrowHead = (x, y, direction) => {
            const width = 4;
            const yBase = y + width * direction;
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x - width, yBase);
            ctx.lineTo(x + width, yBase);
            ctx.closePath();
            ctx.fill();
        };
        const renderText = (x, text) => {
            ctx.save();
            ctx.setFont(this.textFont);
            const render_x = x - ctx.measureText(text).width / 2;
            ctx.fillText(text, render_x, annotation_y);
            ctx.restore();
        };
        let last_bend = undefined;
        let last_bend_draw_width = 0;
        let last_drawn_width = 0;
        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {
            const tapStart = note.getModifierStartXY(_modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.CENTER, this.index);
            renderText(tapStart.x, this.tap);
        }
        for (let i = 0; i < this.phrase.length; ++i) {
            const bend = this.phrase[i];
            if (!bend.draw_width)
                bend.draw_width = 0;
            if (i === 0)
                bend.draw_width += x_shift;
            last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);
            if (bend.type === Bend.UP) {
                if (last_bend && last_bend.type === Bend.UP) {
                    renderArrowHead(start.x, bend_height, +1);
                }
                renderBend(start.x, start.y, last_drawn_width, bend_height);
            }
            if (bend.type === Bend.DOWN) {
                if (last_bend && last_bend.type === Bend.UP) {
                    renderRelease(start.x, start.y, last_drawn_width, bend_height);
                }
                if (last_bend && last_bend.type === Bend.DOWN) {
                    renderArrowHead(start.x, start.y, -1);
                    renderRelease(start.x, start.y, last_drawn_width, bend_height);
                }
                if (!last_bend) {
                    last_drawn_width = bend.draw_width;
                    renderRelease(start.x, start.y, last_drawn_width, bend_height);
                }
            }
            renderText(start.x + last_drawn_width, bend.text);
            last_bend = bend;
            last_bend_draw_width = bend.draw_width;
            last_bend.x = start.x;
            start.x += last_drawn_width;
        }
        if (!last_bend || last_bend.x == undefined) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoLastBendForBend', 'Internal error.');
        }
        if (last_bend.type === Bend.UP) {
            renderArrowHead(last_bend.x + last_drawn_width, bend_height, +1);
        }
        else if (last_bend.type === Bend.DOWN) {
            renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);
        }
    }
}
Bend.TEXT_FONT = Object.assign({}, _element_js__WEBPACK_IMPORTED_MODULE_0__.Element.TEXT_FONT);


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BoundingBox: () => (/* binding */ BoundingBox)
/* harmony export */ });
class BoundingBox {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }
    static copy(that) {
        return new BoundingBox(that.x, that.y, that.w, that.h);
    }
    getX() {
        return this.x;
    }
    getY() {
        return this.y;
    }
    getW() {
        return this.w;
    }
    getH() {
        return this.h;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setW(w) {
        this.w = w;
        return this;
    }
    setH(h) {
        this.h = h;
        return this;
    }
    move(x, y) {
        this.x += x;
        this.y += y;
        return this;
    }
    clone() {
        return BoundingBox.copy(this);
    }
    mergeWith(boundingBox) {
        const that = boundingBox;
        const new_x = this.x < that.x ? this.x : that.x;
        const new_y = this.y < that.y ? this.y : that.y;
        const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;
        const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;
        this.x = new_x;
        this.y = new_y;
        this.w = new_w;
        this.h = new_h;
        return this;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/boundingboxcomputation.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/boundingboxcomputation.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BoundingBoxComputation: () => (/* binding */ BoundingBoxComputation)
/* harmony export */ });
class BoundingBoxComputation {
    constructor() {
        this.x1 = Number.NaN;
        this.y1 = Number.NaN;
        this.x2 = Number.NaN;
        this.y2 = Number.NaN;
    }
    getX1() {
        return this.x1;
    }
    getY1() {
        return this.y1;
    }
    width() {
        return this.x2 - this.x1;
    }
    height() {
        return this.y2 - this.y1;
    }
    addPoint(x, y) {
        if (isNaN(this.x1) || x < this.x1)
            this.x1 = x;
        if (isNaN(this.x2) || x > this.x2)
            this.x2 = x;
        if (isNaN(this.y1) || y < this.y1)
            this.y1 = y;
        if (isNaN(this.y2) || y > this.y2)
            this.y2 = y;
    }
    addX(x) {
        this.addPoint(x, this.y1);
    }
    addY(y) {
        this.addPoint(this.x1, y);
    }
    addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {
        this.addPoint(p0x, p0y);
        this.addPoint(p2x, p2y);
        const p01x = p1x - p0x;
        const p12x = p2x - p1x;
        let denom = p01x - p12x;
        if (denom != 0) {
            const t = p01x / denom;
            if (t > 0 && t < 1) {
                const it = 1 - t;
                this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);
            }
        }
        const p01y = p1y - p0y;
        const p12y = p2y - p1y;
        denom = p01y - p12y;
        if (denom != 0) {
            const t = p01y / denom;
            if (t > 0 && t < 1) {
                const it = 1 - t;
                this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);
            }
        }
    }
    addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
        const p0 = [p0x, p0y];
        const p1 = [p1x, p1y];
        const p2 = [p2x, p2y];
        const p3 = [p3x, p3y];
        let i;
        this.addPoint(p0[0], p0[1]);
        this.addPoint(p3[0], p3[1]);
        const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +
            3 * Math.pow(1 - t, 2) * t * p1[i] +
            3 * (1 - t) * Math.pow(t, 2) * p2[i] +
            Math.pow(t, 3) * p3[i];
        for (i = 0; i <= 1; i++) {
            const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
            const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
            const c = 3 * p1[i] - 3 * p0[i];
            if (a === 0) {
                if (b === 0)
                    continue;
                const t = -c / b;
                if (0 < t && t < 1) {
                    if (i === 0)
                        this.addX(f(t, i));
                    if (i === 1)
                        this.addY(f(t, i));
                }
                continue;
            }
            const b2ac = Math.pow(b, 2) - 4 * c * a;
            if (b2ac < 0)
                continue;
            const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
            if (0 < t1 && t1 < 1) {
                if (i === 0)
                    this.addX(f(t1, i));
                if (i === 1)
                    this.addY(f(t1, i));
            }
            const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
            if (0 < t2 && t2 < 1) {
                if (i === 0)
                    this.addX(f(t2, i));
                if (i === 1)
                    this.addY(f(t2, i));
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/canvascontext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/canvascontext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanvasContext: () => (/* binding */ CanvasContext)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _rendercontext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rendercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _web_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./web.js */ "./node_modules/vexflow_smoosic/build/esm/src/web.js");




class CanvasContext extends _rendercontext_js__WEBPACK_IMPORTED_MODULE_1__.RenderContext {
    constructor(context) {
        super();
        this.textHeight = 0;
        this.context2D = context;
        if (!context.canvas) {
            this.canvas = {
                width: CanvasContext.WIDTH,
                height: CanvasContext.HEIGHT,
            };
        }
        else {
            this.canvas = context.canvas;
        }
    }
    static get WIDTH() {
        return 600;
    }
    static get HEIGHT() {
        return 400;
    }
    static get CANVAS_BROWSER_SIZE_LIMIT() {
        return 32767;
    }
    static sanitizeCanvasDims(width, height) {
        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;
        if (Math.max(width, height) > limit) {
            (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.warn)('Canvas dimensions exceed browser limit. Cropping to ' + limit);
            if (width > limit) {
                width = limit;
            }
            if (height > limit) {
                height = limit;
            }
        }
        return [width, height];
    }
    clear() {
        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
    openGroup(cls, id, attrs) {
    }
    closeGroup() {
    }
    add(child) {
    }
    setFillStyle(style) {
        this.context2D.fillStyle = style;
        return this;
    }
    setBackgroundFillStyle(style) {
        return this;
    }
    setStrokeStyle(style) {
        this.context2D.strokeStyle = style;
        return this;
    }
    setShadowColor(color) {
        this.context2D.shadowColor = color;
        return this;
    }
    setShadowBlur(blur) {
        const t = this.context2D.getTransform();
        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);
        this.context2D.shadowBlur = scale * blur;
        return this;
    }
    setLineWidth(width) {
        this.context2D.lineWidth = width;
        return this;
    }
    setLineCap(capType) {
        this.context2D.lineCap = capType;
        return this;
    }
    setLineDash(dash) {
        this.context2D.setLineDash(dash);
        return this;
    }
    scale(x, y) {
        this.context2D.scale(x, y);
        return this;
    }
    resize(width, height) {
        const canvas = this.context2D.canvas;
        const devicePixelRatio = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.globalObject)().devicePixelRatio || 1;
        [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);
        width = (width / devicePixelRatio) | 0;
        height = (height / devicePixelRatio) | 0;
        canvas.width = width * devicePixelRatio;
        canvas.height = height * devicePixelRatio;
        if ((0,_web_js__WEBPACK_IMPORTED_MODULE_3__.isHTMLCanvas)(canvas)) {
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
        }
        return this.scale(devicePixelRatio, devicePixelRatio);
    }
    rect(x, y, width, height) {
        this.context2D.rect(x, y, width, height);
        return this;
    }
    fillRect(x, y, width, height) {
        this.context2D.fillRect(x, y, width, height);
        return this;
    }
    clearRect(x, y, width, height) {
        this.context2D.clearRect(x, y, width, height);
        return this;
    }
    beginPath() {
        this.context2D.beginPath();
        return this;
    }
    moveTo(x, y) {
        this.context2D.moveTo(x, y);
        return this;
    }
    lineTo(x, y) {
        this.context2D.lineTo(x, y);
        return this;
    }
    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
        return this;
    }
    quadraticCurveTo(cpx, cpy, x, y) {
        this.context2D.quadraticCurveTo(cpx, cpy, x, y);
        return this;
    }
    arc(x, y, radius, startAngle, endAngle, counterclockwise) {
        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);
        return this;
    }
    fill() {
        this.context2D.fill();
        return this;
    }
    stroke() {
        this.context2D.stroke();
        return this;
    }
    closePath() {
        this.context2D.closePath();
        return this;
    }
    measureText(text) {
        const metrics = this.context2D.measureText(text);
        let y = 0;
        let height = 0;
        if (metrics.fontBoundingBoxAscent) {
            y = -metrics.fontBoundingBoxAscent;
            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;
        }
        else {
            y = -metrics.actualBoundingBoxAscent;
            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;
        }
        return {
            x: 0,
            y: y,
            width: metrics.width,
            height: height,
        };
    }
    fillText(text, x, y) {
        this.context2D.fillText(text, x, y);
        return this;
    }
    save() {
        this.context2D.save();
        return this;
    }
    restore() {
        this.context2D.restore();
        return this;
    }
    set fillStyle(style) {
        this.context2D.fillStyle = style;
    }
    get fillStyle() {
        return this.context2D.fillStyle;
    }
    set strokeStyle(style) {
        this.context2D.strokeStyle = style;
    }
    get strokeStyle() {
        return this.context2D.strokeStyle;
    }
    setFont(f, size, weight, style) {
        const fontInfo = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.validate(f, size, weight, style);
        this.context2D.font = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.toCSSString(fontInfo);
        this.textHeight = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.convertSizeToPixelValue(fontInfo.size);
        return this;
    }
    getFont() {
        return this.context2D.font;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/chordsymbol.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/chordsymbol.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChordSymbol: () => (/* binding */ ChordSymbol),
/* harmony export */   ChordSymbolHorizontalJustify: () => (/* binding */ ChordSymbolHorizontalJustify),
/* harmony export */   ChordSymbolVerticalJustify: () => (/* binding */ ChordSymbolVerticalJustify),
/* harmony export */   SymbolModifiers: () => (/* binding */ SymbolModifiers),
/* harmony export */   SymbolTypes: () => (/* binding */ SymbolTypes)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







function L(...args) {
    if (ChordSymbol.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.log)('Vex.Flow.ChordSymbol', args);
}
var ChordSymbolHorizontalJustify;
(function (ChordSymbolHorizontalJustify) {
    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["LEFT"] = 1] = "LEFT";
    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["CENTER"] = 2] = "CENTER";
    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["RIGHT"] = 3] = "RIGHT";
    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify["CENTER_STEM"] = 4] = "CENTER_STEM";
})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));
var ChordSymbolVerticalJustify;
(function (ChordSymbolVerticalJustify) {
    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify["TOP"] = 1] = "TOP";
    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify["BOTTOM"] = 2] = "BOTTOM";
})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));
var SymbolTypes;
(function (SymbolTypes) {
    SymbolTypes[SymbolTypes["GLYPH"] = 1] = "GLYPH";
    SymbolTypes[SymbolTypes["TEXT"] = 2] = "TEXT";
    SymbolTypes[SymbolTypes["LINE"] = 3] = "LINE";
})(SymbolTypes || (SymbolTypes = {}));
var SymbolModifiers;
(function (SymbolModifiers) {
    SymbolModifiers[SymbolModifiers["NONE"] = 1] = "NONE";
    SymbolModifiers[SymbolModifiers["SUBSCRIPT"] = 2] = "SUBSCRIPT";
    SymbolModifiers[SymbolModifiers["SUPERSCRIPT"] = 3] = "SUPERSCRIPT";
})(SymbolModifiers || (SymbolModifiers = {}));
class ChordSymbol extends _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier {
    constructor() {
        super();
        this.symbolBlocks = [];
        this.horizontal = ChordSymbolHorizontalJustify.LEFT;
        this.vertical = ChordSymbolVerticalJustify.TOP;
        this.useKerning = true;
        this.reportWidth = true;
        this.resetFont();
    }
    static get CATEGORY() {
        return "ChordSymbol";
    }
    static get superSubRatio() {
        return ChordSymbol.metrics.global.superSubRatio;
    }
    static set NO_TEXT_FORMAT(val) {
        ChordSymbol.noFormat = val;
    }
    static get NO_TEXT_FORMAT() {
        return ChordSymbol.noFormat;
    }
    static getMetricForGlyph(glyphCode) {
        if (ChordSymbol.metrics[glyphCode]) {
            return ChordSymbol.metrics[glyphCode];
        }
        return undefined;
    }
    static get engravingFontResolution() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().getResolution();
    }
    static get spacingBetweenBlocks() {
        return ChordSymbol.metrics.global.spacing / ChordSymbol.engravingFontResolution;
    }
    static getWidthForGlyph(glyph) {
        const metric = ChordSymbol.getMetricForGlyph(glyph.code);
        if (!metric) {
            return 0.65;
        }
        return metric.advanceWidth / ChordSymbol.engravingFontResolution;
    }
    static getYShiftForGlyph(glyph) {
        const metric = ChordSymbol.getMetricForGlyph(glyph.code);
        if (!metric) {
            return 0;
        }
        return metric.yOffset / ChordSymbol.engravingFontResolution;
    }
    static getXShiftForGlyph(glyph) {
        const metric = ChordSymbol.getMetricForGlyph(glyph.code);
        if (!metric) {
            return 0;
        }
        return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;
    }
    static get superscriptOffset() {
        return ChordSymbol.metrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;
    }
    static get subscriptOffset() {
        return ChordSymbol.metrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;
    }
    static get kerningOffset() {
        return ChordSymbol.metrics.global.kerningOffset / ChordSymbol.engravingFontResolution;
    }
    static get metrics() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().getMetrics().glyphs.chordSymbol;
    }
    static get lowerKerningText() {
        return ChordSymbol.metrics.global.lowerKerningText;
    }
    static get upperKerningText() {
        return ChordSymbol.metrics.global.upperKerningText;
    }
    static isSuperscript(block) {
        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUPERSCRIPT;
    }
    static isSubscript(block) {
        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUBSCRIPT;
    }
    static get minPadding() {
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont();
        return musicFont.lookupMetric('glyphs.noteHead.minPadding');
    }
    static format(symbols, state) {
        var _a;
        if (!symbols || symbols.length === 0)
            return false;
        let width = 0;
        let nonSuperWidth = 0;
        let leftWidth = 0;
        let rightWidth = 0;
        let maxLeftGlyphWidth = 0;
        let maxRightGlyphWidth = 0;
        for (const symbol of symbols) {
            const fontSize = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.convertSizeToPointValue((_a = symbol.textFont) === null || _a === void 0 ? void 0 : _a.size);
            const fontAdj = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.scaleSize(fontSize, 0.05);
            const glyphAdj = fontAdj * 2;
            const note = symbol.checkAttachedNote();
            let symbolWidth = 0;
            let lineSpaces = 1;
            let vAlign = false;
            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {
                const block = symbol.symbolBlocks[j];
                const sup = ChordSymbol.isSuperscript(block);
                const sub = ChordSymbol.isSubscript(block);
                const superSubScale = sup || sub ? ChordSymbol.superSubRatio : 1;
                const adj = block.symbolType === SymbolTypes.GLYPH ? glyphAdj * superSubScale : fontAdj * superSubScale;
                if (sup || sub) {
                    lineSpaces = 2;
                }
                const fontSize = symbol.textFormatter.fontSizeInPixels;
                const superSubFontSize = fontSize * superSubScale;
                if (block.symbolType === SymbolTypes.GLYPH && block.glyph !== undefined) {
                    block.width = ChordSymbol.getWidthForGlyph(block.glyph) * superSubFontSize;
                    block.yShift += ChordSymbol.getYShiftForGlyph(block.glyph) * superSubFontSize;
                    block.xShift += ChordSymbol.getXShiftForGlyph(block.glyph) * superSubFontSize;
                    block.glyph.scale = block.glyph.scale * adj;
                }
                else if (block.symbolType === SymbolTypes.TEXT) {
                    block.width = block.width * superSubFontSize;
                    block.yShift += symbol.getYOffsetForText(block.text) * adj;
                }
                if (block.symbolType === SymbolTypes.GLYPH &&
                    block.glyph !== undefined &&
                    block.glyph.code === ChordSymbol.glyphs.over.code) {
                    lineSpaces = 2;
                }
                block.width += ChordSymbol.spacingBetweenBlocks * fontSize * superSubScale;
                if (sup && j > 0) {
                    const prev = symbol.symbolBlocks[j - 1];
                    if (!ChordSymbol.isSuperscript(prev)) {
                        nonSuperWidth = width;
                    }
                }
                if (sub && nonSuperWidth > 0) {
                    vAlign = true;
                    block.xShift = block.xShift + (nonSuperWidth - width);
                    width = nonSuperWidth;
                    nonSuperWidth = 0;
                    symbol.setEnableKerning(false);
                }
                if (!sup && !sub) {
                    nonSuperWidth = 0;
                }
                block.vAlign = vAlign;
                width += block.width;
                symbolWidth = width;
            }
            symbol.updateKerningAdjustments();
            symbol.updateOverBarAdjustments();
            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {
                symbol.setTextLine(state.top_text_line);
                state.top_text_line += lineSpaces;
            }
            else {
                symbol.setTextLine(state.text_line + 1);
                state.text_line += lineSpaces + 1;
            }
            if (symbol.getReportWidth() && (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isStemmableNote)(note)) {
                const glyphWidth = note.getGlyph().getWidth();
                if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {
                    maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);
                    leftWidth = Math.max(leftWidth, symbolWidth) + ChordSymbol.minPadding;
                }
                else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {
                    maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);
                    rightWidth = Math.max(rightWidth, symbolWidth);
                }
                else {
                    leftWidth = Math.max(leftWidth, symbolWidth / 2) + ChordSymbol.minPadding;
                    rightWidth = Math.max(rightWidth, symbolWidth / 2);
                    maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);
                    maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);
                }
            }
            width = 0;
        }
        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));
        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));
        state.left_shift += leftOverlap;
        state.right_shift += rightOverlap;
        return true;
    }
    static get TEXT_FONT() {
        let family = 'Roboto Slab, Times, serif';
        if (_tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().getName() === 'Petaluma') {
            family = 'PetalumaScript, Arial, sans-serif';
        }
        return {
            family,
            size: 12,
            weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.NORMAL,
            style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
        };
    }
    get superscriptOffset() {
        return ChordSymbol.superscriptOffset * this.textFormatter.fontSizeInPixels;
    }
    get subscriptOffset() {
        return ChordSymbol.subscriptOffset * this.textFormatter.fontSizeInPixels;
    }
    setReportWidth(value) {
        this.reportWidth = value;
        return this;
    }
    getReportWidth() {
        return this.reportWidth;
    }
    updateOverBarAdjustments() {
        const barIndex = this.symbolBlocks.findIndex(({ symbolType, glyph }) => symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash');
        if (barIndex < 0) {
            return;
        }
        const bar = this.symbolBlocks[barIndex];
        const xoff = bar.width / 4;
        const yoff = 0.25 * this.textFormatter.fontSizeInPixels;
        let symIndex = 0;
        for (symIndex === 0; symIndex < barIndex; ++symIndex) {
            const symbol = this.symbolBlocks[symIndex];
            symbol.xShift = symbol.xShift + xoff;
            symbol.yShift = symbol.yShift - yoff;
        }
        for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {
            const symbol = this.symbolBlocks[symIndex];
            symbol.xShift = symbol.xShift - xoff;
            symbol.yShift = symbol.yShift + yoff;
        }
    }
    updateKerningAdjustments() {
        let accum = 0;
        for (let j = 0; j < this.symbolBlocks.length; ++j) {
            const symbol = this.symbolBlocks[j];
            accum += this.getKerningAdjustment(j);
            symbol.xShift += accum;
        }
    }
    getKerningAdjustment(j) {
        if (!this.useKerning) {
            return 0;
        }
        const currSymbol = this.symbolBlocks[j];
        const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;
        let adjustment = 0;
        if (currSymbol.symbolType === SymbolTypes.GLYPH &&
            currSymbol.glyph !== undefined &&
            currSymbol.glyph.code === ChordSymbol.glyphs.over.code) {
            adjustment += currSymbol.glyph.metrics.x_shift;
        }
        if (prevSymbol !== undefined &&
            prevSymbol.symbolType === SymbolTypes.GLYPH &&
            prevSymbol.glyph !== undefined &&
            prevSymbol.glyph.code === ChordSymbol.glyphs.over.code) {
            adjustment += prevSymbol.glyph.metrics.x_shift;
        }
        let preKernUpper = false;
        let preKernLower = false;
        if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {
            preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);
            preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);
        }
        const kerningOffsetPixels = ChordSymbol.kerningOffset * this.textFormatter.fontSizeInPixels;
        if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {
            adjustment += kerningOffsetPixels;
        }
        if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {
            if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {
                adjustment += kerningOffsetPixels / 2;
            }
            if (ChordSymbol.upperKerningText.some((xx) => xx === (prevSymbol === null || prevSymbol === void 0 ? void 0 : prevSymbol.text[prevSymbol.text.length - 1]))) {
                adjustment += kerningOffsetPixels / 2;
            }
        }
        return adjustment;
    }
    getSymbolBlock(params = {}) {
        var _a, _b, _c;
        const symbolType = (_a = params.symbolType) !== null && _a !== void 0 ? _a : SymbolTypes.TEXT;
        const symbolBlock = {
            text: (_b = params.text) !== null && _b !== void 0 ? _b : '',
            symbolType,
            symbolModifier: (_c = params.symbolModifier) !== null && _c !== void 0 ? _c : SymbolModifiers.NONE,
            xShift: 0,
            yShift: 0,
            vAlign: false,
            width: 0,
        };
        if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {
            const glyphArgs = ChordSymbol.glyphs[params.glyph];
            const glyphPoints = 20;
            symbolBlock.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });
        }
        else if (symbolType === SymbolTypes.TEXT) {
            symbolBlock.width = this.textFormatter.getWidthForTextInEm(symbolBlock.text);
        }
        else if (symbolType === SymbolTypes.LINE) {
            symbolBlock.width = params.width;
        }
        return symbolBlock;
    }
    addSymbolBlock(parameters) {
        this.symbolBlocks.push(this.getSymbolBlock(parameters));
        return this;
    }
    addText(text, parameters = {}) {
        const symbolType = SymbolTypes.TEXT;
        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text, symbolType }));
    }
    addTextSuperscript(text) {
        const symbolType = SymbolTypes.TEXT;
        const symbolModifier = SymbolModifiers.SUPERSCRIPT;
        return this.addSymbolBlock({ text, symbolType, symbolModifier });
    }
    addTextSubscript(text) {
        const symbolType = SymbolTypes.TEXT;
        const symbolModifier = SymbolModifiers.SUBSCRIPT;
        return this.addSymbolBlock({ text, symbolType, symbolModifier });
    }
    addGlyphSuperscript(glyph) {
        const symbolType = SymbolTypes.GLYPH;
        const symbolModifier = SymbolModifiers.SUPERSCRIPT;
        return this.addSymbolBlock({ glyph, symbolType, symbolModifier });
    }
    addGlyph(glyph, params = {}) {
        const symbolType = SymbolTypes.GLYPH;
        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { glyph, symbolType }));
    }
    addGlyphOrText(text, params = {}) {
        let str = '';
        for (let i = 0; i < text.length; ++i) {
            const char = text[i];
            if (ChordSymbol.glyphs[char]) {
                if (str.length > 0) {
                    this.addText(str, params);
                    str = '';
                }
                this.addGlyph(char, params);
            }
            else {
                str += char;
            }
        }
        if (str.length > 0) {
            this.addText(str, params);
        }
        return this;
    }
    addLine(width, params = {}) {
        const symbolType = SymbolTypes.LINE;
        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { symbolType, width }));
    }
    setFont(f, size, weight, style) {
        super.setFont(f, size, weight, style);
        this.textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.create(this.textFont);
        return this;
    }
    setEnableKerning(val) {
        this.useKerning = val;
        return this;
    }
    setVertical(vj) {
        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;
        return this;
    }
    getVertical() {
        return this.vertical;
    }
    setHorizontal(hj) {
        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;
        return this;
    }
    getHorizontal() {
        return this.horizontal;
    }
    getWidth() {
        let width = 0;
        this.symbolBlocks.forEach((symbol) => {
            width += symbol.vAlign ? 0 : symbol.width;
        });
        return width;
    }
    getYOffsetForText(text) {
        var _a;
        let acc = 0;
        let i = 0;
        for (i = 0; i < text.length; ++i) {
            const metrics = this.textFormatter.getGlyphMetrics(text[i]);
            if (metrics) {
                const yMax = (_a = metrics.y_max) !== null && _a !== void 0 ? _a : 0;
                acc = yMax < acc ? yMax : acc;
            }
        }
        const resolution = this.textFormatter.getResolution();
        return i > 0 ? -1 * (acc / resolution) : 0;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        ctx.save();
        const classString = Object.keys(this.getAttribute('classes')).join(' ');
        ctx.openGroup(classString, this.getAttribute('id'));
        const start = note.getModifierStartXY(_modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE, this.index);
        ctx.setFont(this.textFont);
        let y;
        const hasStem = note.hasStem();
        const stave = note.checkStave();
        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {
            y = stave.getYForBottomText(this.text_line + _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.TEXT_HEIGHT_OFFSET_HACK);
            if (hasStem) {
                const stem_ext = note.checkStem().getExtents();
                const spacing = stave.getSpacingBetweenLines();
                const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;
                y = Math.max(y, stem_base + spacing * (this.text_line + 2));
            }
        }
        else {
            y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);
            if (hasStem) {
                const stem_ext = note.checkStem().getExtents();
                const spacing = stave.getSpacingBetweenLines();
                y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);
            }
        }
        let x = start.x;
        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {
            x = start.x;
        }
        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {
            x = start.x + this.getWidth();
        }
        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {
            x = start.x - this.getWidth() / 2;
        }
        else {
            x = note.getStemX() - this.getWidth() / 2;
        }
        L('Rendering ChordSymbol: ', this.textFormatter, x, y);
        this.symbolBlocks.forEach((symbol) => {
            const isSuper = ChordSymbol.isSuperscript(symbol);
            const isSub = ChordSymbol.isSubscript(symbol);
            let curY = y;
            L('shift was ', symbol.xShift, symbol.yShift);
            L('curY pre sub ', curY);
            if (isSuper) {
                curY += this.superscriptOffset;
            }
            if (isSub) {
                curY += this.subscriptOffset;
            }
            L('curY sup/sub ', curY);
            if (symbol.symbolType === SymbolTypes.TEXT) {
                if (isSuper || isSub) {
                    ctx.save();
                    if (this.textFont) {
                        const { family, size, weight, style } = this.textFont;
                        const smallerFontSize = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.scaleSize(size, ChordSymbol.superSubRatio);
                        ctx.setFont(family, smallerFontSize, weight, style);
                    }
                }
                L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);
                ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);
                if (isSuper || isSub) {
                    ctx.restore();
                }
            }
            else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {
                curY += symbol.yShift;
                L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);
                symbol.glyph.render(ctx, x + symbol.xShift, curY);
            }
            else if (symbol.symbolType === SymbolTypes.LINE) {
                L('Rendering Line : ', symbol.width, x, curY);
                ctx.beginPath();
                ctx.setLineWidth(1);
                ctx.moveTo(x, y);
                ctx.lineTo(x + symbol.width, curY);
                ctx.stroke();
            }
            x += symbol.width;
            if (symbol.vAlign) {
                x += symbol.xShift;
            }
        });
        ctx.closeGroup();
        ctx.restore();
    }
}
ChordSymbol.DEBUG = false;
ChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;
ChordSymbol.HorizontalJustifyString = {
    left: ChordSymbolHorizontalJustify.LEFT,
    right: ChordSymbolHorizontalJustify.RIGHT,
    center: ChordSymbolHorizontalJustify.CENTER,
    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,
};
ChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;
ChordSymbol.VerticalJustifyString = {
    top: ChordSymbolVerticalJustify.TOP,
    above: ChordSymbolVerticalJustify.TOP,
    below: ChordSymbolVerticalJustify.BOTTOM,
    bottom: ChordSymbolVerticalJustify.BOTTOM,
};
ChordSymbol.glyphs = {
    diminished: {
        code: 'csymDiminished',
    },
    dim: {
        code: 'csymDiminished',
    },
    halfDiminished: {
        code: 'csymHalfDiminished',
    },
    '+': {
        code: 'csymAugmented',
    },
    augmented: {
        code: 'csymAugmented',
    },
    majorSeventh: {
        code: 'csymMajorSeventh',
    },
    minor: {
        code: 'csymMinor',
    },
    '-': {
        code: 'csymMinor',
    },
    '(': {
        code: 'csymParensLeftTall',
    },
    leftParen: {
        code: 'csymParensLeftTall',
    },
    ')': {
        code: 'csymParensRightTall',
    },
    rightParen: {
        code: 'csymParensRightTall',
    },
    leftBracket: {
        code: 'csymBracketLeftTall',
    },
    rightBracket: {
        code: 'csymBracketRightTall',
    },
    leftParenTall: {
        code: 'csymParensLeftVeryTall',
    },
    rightParenTall: {
        code: 'csymParensRightVeryTall',
    },
    '/': {
        code: 'csymDiagonalArrangementSlash',
    },
    over: {
        code: 'csymDiagonalArrangementSlash',
    },
    '#': {
        code: 'accidentalSharp',
    },
    b: {
        code: 'accidentalFlat',
    },
};
ChordSymbol.symbolTypes = SymbolTypes;
ChordSymbol.symbolModifiers = SymbolModifiers;
ChordSymbol.noFormat = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/clef.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/clef.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Clef: () => (/* binding */ Clef)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




function L(...args) {
    if (Clef.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.log)('Vex.Flow.Clef', args);
}
class Clef extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
    constructor(type, size, annotation) {
        super();
        this.clef = Clef.types['treble'];
        this.setPosition(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.BEGIN);
        this.setType(type, size, annotation);
        this.setWidth(_tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric(`clef.${this.size}.width`));
        L('Creating clef:', type);
    }
    static get CATEGORY() {
        return "Clef";
    }
    static get types() {
        return {
            treble: {
                code: 'gClef',
                line: 3,
                point: 0,
            },
            bass: {
                code: 'fClef',
                line: 1,
                point: 0,
            },
            alto: {
                code: 'cClef',
                line: 2,
                point: 0,
            },
            tenor: {
                code: 'cClef',
                line: 1,
                point: 0,
            },
            percussion: {
                code: 'restMaxima',
                line: 2,
                point: 0,
            },
            soprano: {
                code: 'cClef',
                line: 4,
                point: 0,
            },
            'mezzo-soprano': {
                code: 'cClef',
                line: 3,
                point: 0,
            },
            'baritone-c': {
                code: 'cClef',
                line: 0,
                point: 0,
            },
            'baritone-f': {
                code: 'fClef',
                line: 2,
                point: 0,
            },
            subbass: {
                code: 'fClef',
                line: 0,
                point: 0,
            },
            french: {
                code: 'gClef',
                line: 4,
                point: 0,
            },
            tab: {
                code: '6stringTabClef',
                point: 0,
            },
        };
    }
    setType(type, size, annotation) {
        this.type = type;
        this.clef = Clef.types[type];
        if (size === undefined) {
            this.size = 'default';
        }
        else {
            this.size = size;
        }
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont();
        this.clef.point = musicFont.lookupMetric(`clef.${this.size}.point`, 0);
        this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(this.clef.code, this.clef.point, {
            category: `clef.${this.clef.code}.${this.size}`,
        });
        if (annotation !== undefined) {
            const code = musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);
            const point = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);
            const line = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);
            const x_shift = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);
            this.annotation = { code, point, line, x_shift };
            this.attachment = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(this.annotation.code, this.annotation.point);
            this.attachment.metrics.x_max = 0;
            this.attachment.setXShift(this.annotation.x_shift);
        }
        else {
            this.annotation = undefined;
        }
        return this;
    }
    getWidth() {
        if (this.type === 'tab') {
            (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.stave, 'ClefError', "Can't get width without stave.");
        }
        return this.width;
    }
    setStave(stave) {
        this.stave = stave;
        if (this.type === 'tab') {
            const glyph = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.glyph, 'ClefError', "Can't set stave without glyph.");
            const numLines = this.stave.getNumLines();
            const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont();
            const point = musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);
            const shiftY = musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);
            glyph.setPoint(point);
            glyph.setYShift(shiftY);
        }
        return this;
    }
    draw() {
        const glyph = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.glyph, 'ClefError', "Can't draw clef without glyph.");
        const stave = this.checkStave();
        const ctx = stave.checkContext();
        this.setRendered();
        ctx.openGroup('clef', this.getAttribute('id'));
        glyph.setStave(stave);
        glyph.setContext(ctx);
        if (this.clef.line !== undefined) {
            this.placeGlyphOnLine(glyph, stave, this.clef.line);
        }
        glyph.renderToStave(this.x);
        if (this.annotation !== undefined && this.attachment !== undefined) {
            this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);
            this.attachment.setStave(stave);
            this.attachment.setContext(ctx);
            this.attachment.renderToStave(this.x);
        }
        ctx.closeGroup();
    }
}
Clef.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/clefnote.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/clefnote.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClefNote: () => (/* binding */ ClefNote)
/* harmony export */ });
/* harmony import */ var _clef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clef.js */ "./node_modules/vexflow_smoosic/build/esm/src/clef.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");



class ClefNote extends _note_js__WEBPACK_IMPORTED_MODULE_2__.Note {
    constructor(type, size, annotation) {
        super({ duration: 'b' });
        this.type = type;
        this.clef_obj = new _clef_js__WEBPACK_IMPORTED_MODULE_0__.Clef(type, size, annotation);
        this.clef = this.clef_obj.clef;
        this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(this.clef.code, this.clef.point);
        this.setWidth(this.glyph.getMetrics().width);
        this.ignore_ticks = true;
    }
    static get CATEGORY() {
        return "ClefNote";
    }
    setType(type, size, annotation) {
        this.type = type;
        this.clef_obj = new _clef_js__WEBPACK_IMPORTED_MODULE_0__.Clef(type, size, annotation);
        this.clef = this.clef_obj.clef;
        this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(this.clef.code, this.clef.point);
        this.setWidth(this.glyph.getMetrics().width);
        return this;
    }
    getClef() {
        return this.clef;
    }
    setContext(context) {
        super.setContext(context);
        this.glyph.setContext(this.getContext());
        return this;
    }
    getBoundingBox() {
        return super.getBoundingBox();
    }
    addToModifierContext(mc) {
        return this;
    }
    preFormat() {
        this.preFormatted = true;
        return this;
    }
    draw() {
        var _a;
        const stave = this.checkStave();
        if (!this.glyph.getContext()) {
            this.glyph.setContext(this.getContext());
        }
        this.setRendered();
        const abs_x = this.getAbsoluteX();
        this.glyph.setStave(stave);
        this.glyph.setYShift(stave.getYForLine((_a = this.clef.line) !== null && _a !== void 0 ? _a : 0) - stave.getYForGlyphs());
        this.glyph.renderToStave(abs_x);
        if (this.clef_obj.annotation !== undefined) {
            const attachment = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);
            if (!attachment.getContext()) {
                attachment.setContext(this.getContext());
            }
            attachment.setStave(stave);
            attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());
            attachment.setXShift(this.clef_obj.annotation.x_shift);
            attachment.renderToStave(abs_x);
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/crescendo.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/crescendo.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Crescendo: () => (/* binding */ Crescendo)
/* harmony export */ });
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _tickcontext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tickcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



function L(...args) {
    if (Crescendo.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.log)('Vex.Flow.Crescendo', args);
}
function renderHairpin(ctx, params) {
    const begin_x = params.begin_x;
    const end_x = params.end_x;
    const y = params.y;
    const half_height = params.height / 2;
    ctx.beginPath();
    if (params.reverse) {
        ctx.moveTo(begin_x, y - half_height);
        ctx.lineTo(end_x, y);
        ctx.lineTo(begin_x, y + half_height);
    }
    else {
        ctx.moveTo(end_x, y - half_height);
        ctx.lineTo(begin_x, y);
        ctx.lineTo(end_x, y + half_height);
    }
    ctx.stroke();
    ctx.closePath();
}
class Crescendo extends _note_js__WEBPACK_IMPORTED_MODULE_0__.Note {
    constructor(noteStruct) {
        super(noteStruct);
        this.options = {
            extend_left: 0,
            extend_right: 0,
            y_shift: 0,
        };
        this.decrescendo = false;
        this.line = noteStruct.line || 0;
        this.height = 15;
    }
    static get CATEGORY() {
        return "Crescendo";
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    setHeight(height) {
        this.height = height;
        return this;
    }
    setDecrescendo(decresc) {
        this.decrescendo = decresc;
        return this;
    }
    preFormat() {
        this.preFormatted = true;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const stave = this.checkStave();
        this.setRendered();
        const tick_context = this.getTickContext();
        const next_context = _tickcontext_js__WEBPACK_IMPORTED_MODULE_1__.TickContext.getNextContext(tick_context);
        const begin_x = this.getAbsoluteX();
        const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();
        const y = stave.getYForLine(this.line + -3) + 1;
        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);
        renderHairpin(ctx, {
            begin_x: begin_x - this.options.extend_left,
            end_x: end_x + this.options.extend_right,
            y: y + this.options.y_shift,
            height: this.height,
            reverse: this.decrescendo,
        });
    }
}
Crescendo.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/curve.js":
/*!*************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/curve.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Curve: () => (/* binding */ Curve),
/* harmony export */   CurvePosition: () => (/* binding */ CurvePosition)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


var CurvePosition;
(function (CurvePosition) {
    CurvePosition[CurvePosition["NEAR_HEAD"] = 1] = "NEAR_HEAD";
    CurvePosition[CurvePosition["NEAR_TOP"] = 2] = "NEAR_TOP";
})(CurvePosition || (CurvePosition = {}));
class Curve extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(from, to, options) {
        super();
        this.render_options = Object.assign({ thickness: 2, x_shift: 0, y_shift: 10, position: CurvePosition.NEAR_HEAD, position_end: CurvePosition.NEAR_HEAD, invert: false, cps: [
                { x: 0, y: 10 },
                { x: 0, y: 10 },
            ] }, options);
        this.from = from;
        this.to = to;
    }
    static get CATEGORY() {
        return "Curve";
    }
    static get Position() {
        return CurvePosition;
    }
    static get PositionString() {
        return {
            nearHead: CurvePosition.NEAR_HEAD,
            nearTop: CurvePosition.NEAR_TOP,
        };
    }
    setNotes(from, to) {
        if (!from && !to) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');
        }
        this.from = from;
        this.to = to;
        return this;
    }
    isPartial() {
        return !this.from || !this.to;
    }
    renderCurve(params) {
        const ctx = this.checkContext();
        const x_shift = this.render_options.x_shift;
        const y_shift = this.render_options.y_shift * params.direction;
        const first_x = params.first_x + x_shift;
        const first_y = params.first_y + y_shift;
        const last_x = params.last_x - x_shift;
        const last_y = params.last_y + y_shift;
        const thickness = this.render_options.thickness;
        const cps = this.render_options.cps;
        const { x: cp0x, y: cp0y } = cps[0];
        const { x: cp1x, y: cp1y } = cps[1];
        const cp_spacing = (last_x - first_x) / (cps.length + 2);
        ctx.beginPath();
        ctx.moveTo(first_x, first_y);
        ctx.bezierCurveTo(first_x + cp_spacing + cp0x, first_y + cp0y * params.direction, last_x - cp_spacing + cp1x, last_y + cp1y * params.direction, last_x, last_y);
        ctx.bezierCurveTo(last_x - cp_spacing + cp1x, last_y + (cp1y + thickness) * params.direction, first_x + cp_spacing + cp0x, first_y + (cp0y + thickness) * params.direction, first_x, first_y);
        ctx.stroke();
        ctx.closePath();
        ctx.fill();
    }
    draw() {
        this.checkContext();
        this.setRendered();
        const first_note = this.from;
        const last_note = this.to;
        let first_x;
        let last_x;
        let first_y;
        let last_y;
        let stem_direction = 0;
        let metric = 'baseY';
        let end_metric = 'baseY';
        function getPosition(position) {
            return typeof position === 'string' ? Curve.PositionString[position] : position;
        }
        const position = getPosition(this.render_options.position);
        const position_end = getPosition(this.render_options.position_end);
        if (position === CurvePosition.NEAR_TOP) {
            metric = 'topY';
            end_metric = 'topY';
        }
        if (position_end === CurvePosition.NEAR_HEAD) {
            end_metric = 'baseY';
        }
        else if (position_end === CurvePosition.NEAR_TOP) {
            end_metric = 'topY';
        }
        if (first_note) {
            first_x = first_note.getTieRightX();
            stem_direction = first_note.getStemDirection();
            first_y = first_note.getStemExtents()[metric];
        }
        else {
            const stave = last_note.checkStave();
            first_x = stave.getTieStartX();
            first_y = last_note.getStemExtents()[metric];
        }
        if (last_note) {
            last_x = last_note.getTieLeftX();
            stem_direction = last_note.getStemDirection();
            last_y = last_note.getStemExtents()[end_metric];
        }
        else {
            const stave = first_note.checkStave();
            last_x = stave.getTieEndX();
            last_y = first_note.getStemExtents()[end_metric];
        }
        this.renderCurve({
            first_x,
            last_x,
            first_y,
            last_y,
            direction: stem_direction * (this.render_options.invert === true ? -1 : 1),
        });
        return true;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/dot.js":
/*!***********************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/dot.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dot: () => (/* binding */ Dot)
/* harmony export */ });
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



class Dot extends _modifier_js__WEBPACK_IMPORTED_MODULE_0__.Modifier {
    constructor() {
        super();
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_0__.Modifier.Position.RIGHT;
        this.radius = 2;
        this.setWidth(5);
        this.dot_shiftY = 0;
    }
    static get CATEGORY() {
        return "Dot";
    }
    static getDots(note) {
        return note.getModifiersByType(Dot.CATEGORY);
    }
    static buildAndAttach(notes, options) {
        for (const note of notes) {
            if (options === null || options === void 0 ? void 0 : options.all) {
                for (let i = 0; i < note.keys.length; i++) {
                    const dot = new Dot();
                    dot.setDotShiftY(note.glyph.dot_shiftY);
                    note.addModifier(dot, i);
                }
            }
            else if ((options === null || options === void 0 ? void 0 : options.index) != undefined) {
                const dot = new Dot();
                dot.setDotShiftY(note.glyph.dot_shiftY);
                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);
            }
            else {
                const dot = new Dot();
                dot.setDotShiftY(note.glyph.dot_shiftY);
                note.addModifier(dot, 0);
            }
        }
    }
    static format(dots, state) {
        const right_shift = state.right_shift;
        const dot_spacing = 1;
        if (!dots || dots.length === 0)
            return false;
        const dot_list = [];
        const max_shift_map = {};
        for (let i = 0; i < dots.length; ++i) {
            const dot = dots[i];
            const note = dot.getNote();
            let props;
            let shift;
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_1__.isStaveNote)(note)) {
                const index = dot.checkIndex();
                props = note.getKeyProps()[index];
                shift = note.getFirstDotPx();
            }
            else if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_1__.isTabNote)(note)) {
                props = { line: 0.5 };
                shift = right_shift;
            }
            else {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('Internal', 'Unexpected instance.');
            }
            const note_id = note.getAttribute('id');
            dot_list.push({ line: props.line, note, note_id, dot });
            max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);
        }
        dot_list.sort((a, b) => b.line - a.line);
        let dot_shift = right_shift;
        let x_width = 0;
        let last_line = null;
        let last_note = null;
        let prev_dotted_space = null;
        let half_shiftY = 0;
        for (let i = 0; i < dot_list.length; ++i) {
            const { dot, note, note_id, line } = dot_list[i];
            if (line !== last_line || note !== last_note) {
                dot_shift = max_shift_map[note_id];
            }
            if (!note.isRest() && line !== last_line) {
                if (Math.abs(line % 1) === 0.5) {
                    half_shiftY = 0;
                }
                else {
                    half_shiftY = 0.5;
                    if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {
                        half_shiftY = -0.5;
                    }
                    else if (line + half_shiftY === prev_dotted_space) {
                        half_shiftY = -0.5;
                    }
                }
            }
            if (note.isRest()) {
                dot.dot_shiftY += -half_shiftY;
            }
            else {
                dot.dot_shiftY = -half_shiftY;
            }
            prev_dotted_space = line + half_shiftY;
            dot.setXShift(dot_shift);
            dot_shift += dot.getWidth() + dot_spacing;
            x_width = dot_shift > x_width ? dot_shift : x_width;
            last_line = line;
            last_note = note;
        }
        state.right_shift += x_width;
        return true;
    }
    setNote(note) {
        this.note = note;
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_1__.isGraceNote)(note)) {
            this.radius *= 0.5;
            this.setWidth(3);
        }
        return this;
    }
    setDotShiftY(y) {
        this.dot_shiftY = y;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const stave = note.checkStave();
        const lineSpace = stave.getSpacingBetweenLines();
        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_1__.isTabNote)(note)) {
            start.y = note.getStemExtents().baseY;
        }
        const x = start.x + this.x_shift + this.width - this.radius;
        const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;
        ctx.beginPath();
        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);
        ctx.fill();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/easyscore.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/easyscore.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Builder: () => (/* binding */ Builder),
/* harmony export */   EasyScore: () => (/* binding */ EasyScore),
/* harmony export */   EasyScoreGrammar: () => (/* binding */ EasyScoreGrammar),
/* harmony export */   Piece: () => (/* binding */ Piece)
/* harmony export */ });
/* harmony import */ var _articulation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./articulation.js */ "./node_modules/vexflow_smoosic/build/esm/src/articulation.js");
/* harmony import */ var _dot_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dot.js */ "./node_modules/vexflow_smoosic/build/esm/src/dot.js");
/* harmony import */ var _frethandfinger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frethandfinger.js */ "./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js");
/* harmony import */ var _music_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./music.js */ "./node_modules/vexflow_smoosic/build/esm/src/music.js");
/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser.js */ "./node_modules/vexflow_smoosic/build/esm/src/parser.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







function L(...args) {
    if (EasyScore.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.log)('Vex.Flow.EasyScore', args);
}
class EasyScoreGrammar {
    constructor(builder) {
        this.builder = builder;
    }
    begin() {
        return this.LINE;
    }
    LINE() {
        return {
            expect: [this.PIECE, this.PIECES, this.EOL],
        };
    }
    PIECE() {
        return {
            expect: [this.CHORDORNOTE, this.PARAMS],
            run: () => this.builder.commitPiece(),
        };
    }
    PIECES() {
        return {
            expect: [this.COMMA, this.PIECE],
            zeroOrMore: true,
        };
    }
    PARAMS() {
        return {
            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],
        };
    }
    CHORDORNOTE() {
        return {
            expect: [this.CHORD, this.SINGLENOTE],
            or: true,
        };
    }
    CHORD() {
        return {
            expect: [this.LPAREN, this.NOTES, this.RPAREN],
            run: (state) => this.builder.addChord(state.matches[1]),
        };
    }
    NOTES() {
        return {
            expect: [this.NOTE],
            oneOrMore: true,
        };
    }
    NOTE() {
        return {
            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
        };
    }
    SINGLENOTE() {
        return {
            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
            run: (state) => {
                const s = state;
                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);
            },
        };
    }
    ACCIDENTAL() {
        return {
            expect: [this.MICROTONES, this.ACCIDENTALS],
            maybe: true,
            or: true,
        };
    }
    DOTS() {
        return {
            expect: [this.DOT],
            zeroOrMore: true,
            run: (state) => this.builder.setNoteDots(state.matches),
        };
    }
    TYPE() {
        return {
            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],
            maybe: true,
            run: (state) => this.builder.setNoteType(state.matches[2]),
        };
    }
    DURATION() {
        return {
            expect: [this.SLASH, this.DURATIONS],
            maybe: true,
            run: (state) => this.builder.setNoteDuration(state.matches[1]),
        };
    }
    OPTS() {
        return {
            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],
            maybe: true,
        };
    }
    KEYVALS() {
        return {
            expect: [this.COMMA, this.KEYVAL],
            zeroOrMore: true,
        };
    }
    KEYVAL() {
        const unquote = (str) => str.slice(1, -1);
        return {
            expect: [this.KEY, this.EQUALS, this.VAL],
            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),
        };
    }
    VAL() {
        return {
            expect: [this.SVAL, this.DVAL],
            or: true,
        };
    }
    KEY() {
        return { token: '[a-zA-Z][a-zA-Z0-9]*' };
    }
    DVAL() {
        return { token: '["][^"]*["]' };
    }
    SVAL() {
        return { token: "['][^']*[']" };
    }
    NOTENAME() {
        return { token: '[a-gA-G]' };
    }
    OCTAVE() {
        return { token: '[0-9]+' };
    }
    ACCIDENTALS() {
        return { token: 'bb|b|##|#|n' };
    }
    MICROTONES() {
        return { token: 'bbs|bss|bs|db|d|\\+\\+-|\\+-|\\+\\+|\\+|k|o' };
    }
    DURATIONS() {
        return { token: '[0-9whq]+' };
    }
    TYPES() {
        return { token: '[rRsSmMhHgG]' };
    }
    LPAREN() {
        return { token: '[(]' };
    }
    RPAREN() {
        return { token: '[)]' };
    }
    COMMA() {
        return { token: '[,]' };
    }
    DOT() {
        return { token: '[.]' };
    }
    SLASH() {
        return { token: '[/]' };
    }
    MAYBESLASH() {
        return { token: '[/]?' };
    }
    EQUALS() {
        return { token: '[=]' };
    }
    LBRACKET() {
        return { token: '\\[' };
    }
    RBRACKET() {
        return { token: '\\]' };
    }
    EOL() {
        return { token: '$' };
    }
}
class Piece {
    constructor(duration) {
        this.chord = [];
        this.dots = 0;
        this.options = {};
        this.duration = duration;
    }
}
class Builder {
    constructor(factory) {
        this.commitHooks = [];
        this.factory = factory;
        this.reset();
    }
    reset(options) {
        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);
        this.elements = { notes: [], accidentals: [] };
        this.rollingDuration = '8';
        this.resetPiece();
    }
    getFactory() {
        return this.factory;
    }
    getElements() {
        return this.elements;
    }
    addCommitHook(commitHook) {
        this.commitHooks.push(commitHook);
    }
    resetPiece() {
        L('resetPiece');
        this.piece = new Piece(this.rollingDuration);
    }
    setNoteDots(dots) {
        L('setNoteDots:', dots);
        if (dots)
            this.piece.dots = dots.length;
    }
    setNoteDuration(duration) {
        L('setNoteDuration:', duration);
        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;
    }
    setNoteType(type) {
        L('setNoteType:', type);
        if (type)
            this.piece.type = type;
    }
    addNoteOption(key, value) {
        L('addNoteOption: key:', key, 'value:', value);
        this.piece.options[key] = value;
    }
    addNote(key, accid, octave) {
        L('addNote:', key, accid, octave);
        this.piece.chord.push({
            key: key,
            accid,
            octave,
        });
    }
    addSingleNote(key, accid, octave) {
        L('addSingleNote:', key, accid, octave);
        this.addNote(key, accid, octave);
    }
    addChord(notes) {
        L('startChord');
        if (typeof notes[0] !== 'object') {
            this.addSingleNote(notes[0]);
        }
        else {
            notes.forEach((n) => {
                if (n)
                    this.addNote(...n);
            });
        }
        L('endChord');
    }
    commitPiece() {
        L('commitPiece');
        const { factory } = this;
        if (!factory)
            return;
        const options = Object.assign(Object.assign({}, this.options), this.piece.options);
        const stem = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();
        const clef = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();
        const { chord, duration, dots, type } = this.piece;
        const standardAccidentals = _music_js__WEBPACK_IMPORTED_MODULE_3__.Music.accidentals;
        const keys = chord.map((notePiece) => {
            var _a;
            return notePiece.key +
                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +
                '/' +
                notePiece.octave;
        });
        const auto_stem = stem === 'auto';
        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g'
            ? factory.GhostNote({ duration, dots })
            : factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });
        if (!auto_stem)
            note.setStemDirection(stem === 'up' ? _stem_js__WEBPACK_IMPORTED_MODULE_5__.Stem.UP : _stem_js__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN);
        const accidentals = [];
        chord.forEach((notePiece, index) => {
            const accid = notePiece.accid;
            if (typeof accid === 'string') {
                const accidental = factory.Accidental({ type: accid });
                note.addModifier(accidental, index);
                accidentals.push(accidental);
            }
            else {
                accidentals.push(undefined);
            }
        });
        for (let i = 0; i < dots; i++)
            _dot_js__WEBPACK_IMPORTED_MODULE_1__.Dot.buildAndAttach([note], { all: true });
        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));
        this.elements.notes.push(note);
        this.elements.accidentals.push(accidentals);
        this.resetPiece();
    }
}
function setId(options, note) {
    if (options.id === undefined)
        return;
    note.setAttribute('id', options.id);
}
const commaSeparatedRegex = /\s*,\s*/;
function setClass(options, note) {
    if (options.class === undefined)
        return;
    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));
}
class EasyScore {
    constructor(options = {}) {
        this.defaults = {
            clef: 'treble',
            time: '4/4',
            stem: 'auto',
        };
        this.setOptions(options);
    }
    set(defaults) {
        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);
        return this;
    }
    setOptions(options) {
        var _a, _b;
        const factory = options.factory;
        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);
        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, _articulation_js__WEBPACK_IMPORTED_MODULE_0__.Articulation.easyScoreHook, _frethandfinger_js__WEBPACK_IMPORTED_MODULE_2__.FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,
            builder });
        this.factory = factory;
        this.builder = builder;
        this.grammar = new EasyScoreGrammar(this.builder);
        this.parser = new _parser_js__WEBPACK_IMPORTED_MODULE_4__.Parser(this.grammar);
        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));
        return this;
    }
    setContext(context) {
        this.factory.setContext(context);
        return this;
    }
    parse(line, options = {}) {
        this.builder.reset(options);
        const result = this.parser.parse(line);
        if (!result.success && this.options.throwOnError) {
            L(result);
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('Error parsing line: ' + line);
        }
        return result;
    }
    beam(notes, options) {
        this.factory.Beam({ notes, options });
        return notes;
    }
    tuplet(notes, options) {
        this.factory.Tuplet({ notes, options });
        return notes;
    }
    notes(line, options = {}) {
        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);
        this.parse(line, options);
        return this.builder.getElements().notes;
    }
    voice(notes, options = {}) {
        options = Object.assign({ time: this.defaults.time }, options);
        return this.factory.Voice(options).addTickables(notes);
    }
    addCommitHook(commitHook) {
        this.builder.addCommitHook(commitHook);
    }
}
EasyScore.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/element.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/element.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Element: () => (/* binding */ Element)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registry.js */ "./node_modules/vexflow_smoosic/build/esm/src/registry.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



class Element {
    constructor() {
        var _a;
        this.children = [];
        this.attrs = {
            id: Element.newID(),
            el: undefined,
            type: this.getCategory(),
            classes: {},
        };
        this.rendered = false;
        (_a = _registry_js__WEBPACK_IMPORTED_MODULE_1__.Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);
    }
    static get CATEGORY() {
        return "Element";
    }
    static newID() {
        return `auto${Element.ID++}`;
    }
    addChildElement(child) {
        this.children.push(child);
        return this;
    }
    getCategory() {
        return this.constructor.CATEGORY;
    }
    setStyle(style) {
        this.style = style;
        return this;
    }
    setGroupStyle(style) {
        this.style = style;
        this.children.forEach((child) => child.setGroupStyle(style));
        return this;
    }
    getStyle() {
        return this.style;
    }
    applyStyle(context = this.context, style = this.getStyle()) {
        if (!style)
            return this;
        if (!context)
            return this;
        context.save();
        if (style.shadowColor)
            context.setShadowColor(style.shadowColor);
        if (style.shadowBlur)
            context.setShadowBlur(style.shadowBlur);
        if (style.fillStyle)
            context.setFillStyle(style.fillStyle);
        if (style.strokeStyle)
            context.setStrokeStyle(style.strokeStyle);
        if (style.lineWidth)
            context.setLineWidth(style.lineWidth);
        return this;
    }
    restoreStyle(context = this.context, style = this.getStyle()) {
        if (!style)
            return this;
        if (!context)
            return this;
        context.restore();
        return this;
    }
    drawWithStyle() {
        this.checkContext();
        this.applyStyle();
        this.draw();
        this.restoreStyle();
    }
    hasClass(className) {
        return this.attrs.classes[className] === true;
    }
    addClass(className) {
        var _a;
        this.attrs.classes[className] = true;
        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({
            id: this.attrs.id,
            name: 'class',
            value: className,
            oldValue: undefined,
        });
        return this;
    }
    removeClass(className) {
        var _a;
        delete this.attrs.classes[className];
        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({
            id: this.attrs.id,
            name: 'class',
            value: undefined,
            oldValue: className,
        });
        return this;
    }
    onRegister(registry) {
        this.registry = registry;
        return this;
    }
    isRendered() {
        return this.rendered;
    }
    setRendered(rendered = true) {
        this.rendered = rendered;
        return this;
    }
    getAttributes() {
        return this.attrs;
    }
    getAttribute(name) {
        return this.attrs[name];
    }
    setAttribute(name, value) {
        var _a;
        const oldID = this.attrs.id;
        const oldValue = this.attrs[name];
        this.attrs[name] = value;
        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });
        return this;
    }
    getBoundingBox() {
        return this.boundingBox;
    }
    getContext() {
        return this.context;
    }
    setContext(context) {
        this.context = context;
        return this;
    }
    checkContext() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.defined)(this.context, 'NoContext', 'No rendering context attached to instance.');
    }
    set font(f) {
        this.setFont(f);
    }
    get font() {
        return _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.toCSSString(this.textFont);
    }
    setFont(font, size, weight, style) {
        const defaultTextFont = this.constructor.TEXT_FONT;
        const fontIsObject = typeof font === 'object';
        const fontIsString = typeof font === 'string';
        const fontIsUndefined = font === undefined;
        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;
        if (fontIsObject) {
            this.textFont = Object.assign(Object.assign({}, defaultTextFont), font);
        }
        else if (fontIsString && sizeWeightStyleAreUndefined) {
            this.textFont = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.fromCSSString(font);
        }
        else if (fontIsUndefined && sizeWeightStyleAreUndefined) {
            this.textFont = Object.assign({}, defaultTextFont);
        }
        else {
            this.textFont = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);
        }
        return this;
    }
    getFont() {
        if (!this.textFont) {
            this.resetFont();
        }
        return _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.toCSSString(this.textFont);
    }
    resetFont() {
        this.setFont();
    }
    get fontInfo() {
        if (!this.textFont) {
            this.resetFont();
        }
        return Object.assign({}, this.textFont);
    }
    set fontInfo(fontInfo) {
        this.setFont(fontInfo);
    }
    setFontSize(size) {
        const fontInfo = this.fontInfo;
        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);
        return this;
    }
    getFontSize() {
        return this.fontSize;
    }
    set fontSize(size) {
        this.setFontSize(size);
    }
    get fontSize() {
        let size = this.fontInfo.size;
        if (typeof size === 'number') {
            size = `${size}pt`;
        }
        return size;
    }
    get fontSizeInPoints() {
        return _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.convertSizeToPointValue(this.fontSize);
    }
    get fontSizeInPixels() {
        return _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.convertSizeToPixelValue(this.fontSize);
    }
    get fontStyle() {
        return this.fontInfo.style;
    }
    set fontStyle(style) {
        const fontInfo = this.fontInfo;
        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);
    }
    get fontWeight() {
        return this.fontInfo.weight + '';
    }
    set fontWeight(weight) {
        const fontInfo = this.fontInfo;
        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);
    }
}
Element.ID = 1000;
Element.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
    size: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SIZE,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.NORMAL,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/factory.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Factory: () => (/* binding */ Factory)
/* harmony export */ });
/* harmony import */ var _accidental_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accidental.js */ "./node_modules/vexflow_smoosic/build/esm/src/accidental.js");
/* harmony import */ var _annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotation.js */ "./node_modules/vexflow_smoosic/build/esm/src/annotation.js");
/* harmony import */ var _articulation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./articulation.js */ "./node_modules/vexflow_smoosic/build/esm/src/articulation.js");
/* harmony import */ var _barnote_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./barnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/barnote.js");
/* harmony import */ var _beam_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./beam.js */ "./node_modules/vexflow_smoosic/build/esm/src/beam.js");
/* harmony import */ var _chordsymbol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chordsymbol.js */ "./node_modules/vexflow_smoosic/build/esm/src/chordsymbol.js");
/* harmony import */ var _clefnote_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./clefnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/clefnote.js");
/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./curve.js */ "./node_modules/vexflow_smoosic/build/esm/src/curve.js");
/* harmony import */ var _easyscore_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./easyscore.js */ "./node_modules/vexflow_smoosic/build/esm/src/easyscore.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _frethandfinger_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./frethandfinger.js */ "./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js");
/* harmony import */ var _ghostnote_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ghostnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/ghostnote.js");
/* harmony import */ var _glyphnote_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./glyphnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyphnote.js");
/* harmony import */ var _gracenote_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./gracenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenote.js");
/* harmony import */ var _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./gracenotegroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenotegroup.js");
/* harmony import */ var _keysignote_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./keysignote.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignote.js");
/* harmony import */ var _modifiercontext_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modifiercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifiercontext.js");
/* harmony import */ var _multimeasurerest_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./multimeasurerest.js */ "./node_modules/vexflow_smoosic/build/esm/src/multimeasurerest.js");
/* harmony import */ var _notesubgroup_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./notesubgroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/notesubgroup.js");
/* harmony import */ var _ornament_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ornament.js */ "./node_modules/vexflow_smoosic/build/esm/src/ornament.js");
/* harmony import */ var _pedalmarking_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./pedalmarking.js */ "./node_modules/vexflow_smoosic/build/esm/src/pedalmarking.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/vexflow_smoosic/build/esm/src/renderer.js");
/* harmony import */ var _repeatnote_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./repeatnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/repeatnote.js");
/* harmony import */ var _stave_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./stave.js */ "./node_modules/vexflow_smoosic/build/esm/src/stave.js");
/* harmony import */ var _staveconnector_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./staveconnector.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveconnector.js");
/* harmony import */ var _staveline_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./staveline.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveline.js");
/* harmony import */ var _stavenote_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./stavenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js");
/* harmony import */ var _stavetie_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./stavetie.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetie.js");
/* harmony import */ var _stringnumber_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./stringnumber.js */ "./node_modules/vexflow_smoosic/build/esm/src/stringnumber.js");
/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./system.js */ "./node_modules/vexflow_smoosic/build/esm/src/system.js");
/* harmony import */ var _tabnote_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./tabnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabnote.js");
/* harmony import */ var _tabstave_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./tabstave.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabstave.js");
/* harmony import */ var _textbracket_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./textbracket.js */ "./node_modules/vexflow_smoosic/build/esm/src/textbracket.js");
/* harmony import */ var _textdynamics_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./textdynamics.js */ "./node_modules/vexflow_smoosic/build/esm/src/textdynamics.js");
/* harmony import */ var _textnote_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./textnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/textnote.js");
/* harmony import */ var _tickcontext_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./tickcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js");
/* harmony import */ var _timesignote_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./timesignote.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignote.js");
/* harmony import */ var _tuplet_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./tuplet.js */ "./node_modules/vexflow_smoosic/build/esm/src/tuplet.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _vibratobracket_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./vibratobracket.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibratobracket.js");
/* harmony import */ var _voice_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./voice.js */ "./node_modules/vexflow_smoosic/build/esm/src/voice.js");
/* harmony import */ var _web_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./web.js */ "./node_modules/vexflow_smoosic/build/esm/src/web.js");











































function L(...args) {
    if (Factory.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_39__.log)('Vex.Flow.Factory', args);
}
class Factory {
    constructor(options = {}) {
        L('New factory: ', options);
        this.options = {
            stave: {
                space: 10,
            },
            renderer: {
                elementId: '',
                width: 500,
                height: 200,
                background: '#FFF',
            },
            font: Factory.TEXT_FONT,
        };
        this.setOptions(options);
    }
    static newFromElementId(elementId, width = 500, height = 200) {
        return new Factory({ renderer: { elementId, width, height } });
    }
    reset() {
        this.renderQ = [];
        this.systems = [];
        this.staves = [];
        this.voices = [];
        this.stave = undefined;
    }
    setOptions(options) {
        this.options = Object.assign(Object.assign({}, this.options), options);
        this.initRenderer();
        this.reset();
    }
    initRenderer() {
        const { elementId, width, height, background } = this.options.renderer;
        if (elementId == null) {
            return;
        }
        if (elementId == '') {
            L(this);
            throw new _util_js__WEBPACK_IMPORTED_MODULE_39__.RuntimeError('renderer.elementId not set in FactoryOptions');
        }
        let backend = this.options.renderer.backend;
        if (backend === undefined) {
            const elem = document.getElementById(elementId);
            if ((0,_web_js__WEBPACK_IMPORTED_MODULE_42__.isHTMLCanvas)(elem)) {
                backend = _renderer_js__WEBPACK_IMPORTED_MODULE_22__.Renderer.Backends.CANVAS;
            }
            else {
                backend = _renderer_js__WEBPACK_IMPORTED_MODULE_22__.Renderer.Backends.SVG;
            }
        }
        this.context = _renderer_js__WEBPACK_IMPORTED_MODULE_22__.Renderer.buildContext(elementId, backend, width, height, background);
    }
    getContext() {
        return this.context;
    }
    setContext(context) {
        this.context = context;
        return this;
    }
    getStave() {
        return this.stave;
    }
    getVoices() {
        return this.voices;
    }
    Stave(params) {
        const staveSpace = this.options.stave.space;
        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.0 } }, params);
        const stave = new _stave_js__WEBPACK_IMPORTED_MODULE_24__.Stave(p.x, p.y, p.width, p.options);
        this.staves.push(stave);
        stave.setContext(this.context);
        this.stave = stave;
        return stave;
    }
    TabStave(params) {
        const staveSpace = this.options.stave.space;
        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.3 } }, params);
        const stave = new _tabstave_js__WEBPACK_IMPORTED_MODULE_32__.TabStave(p.x, p.y, p.width, p.options);
        this.staves.push(stave);
        stave.setContext(this.context);
        this.stave = stave;
        return stave;
    }
    StaveNote(noteStruct) {
        const note = new _stavenote_js__WEBPACK_IMPORTED_MODULE_27__.StaveNote(noteStruct);
        if (this.stave)
            note.setStave(this.stave);
        note.setContext(this.context);
        this.renderQ.push(note);
        return note;
    }
    GlyphNote(glyph, noteStruct, options) {
        const note = new _glyphnote_js__WEBPACK_IMPORTED_MODULE_13__.GlyphNote(glyph, noteStruct, options);
        if (this.stave)
            note.setStave(this.stave);
        note.setContext(this.context);
        this.renderQ.push(note);
        return note;
    }
    RepeatNote(type, noteStruct, options) {
        const note = new _repeatnote_js__WEBPACK_IMPORTED_MODULE_23__.RepeatNote(type, noteStruct, options);
        if (this.stave)
            note.setStave(this.stave);
        note.setContext(this.context);
        this.renderQ.push(note);
        return note;
    }
    GhostNote(noteStruct) {
        const ghostNote = new _ghostnote_js__WEBPACK_IMPORTED_MODULE_12__.GhostNote(noteStruct);
        if (this.stave)
            ghostNote.setStave(this.stave);
        ghostNote.setContext(this.context);
        this.renderQ.push(ghostNote);
        return ghostNote;
    }
    TextNote(noteStruct) {
        const textNote = new _textnote_js__WEBPACK_IMPORTED_MODULE_35__.TextNote(noteStruct);
        if (this.stave)
            textNote.setStave(this.stave);
        textNote.setContext(this.context);
        this.renderQ.push(textNote);
        return textNote;
    }
    BarNote(params = {}) {
        const barNote = new _barnote_js__WEBPACK_IMPORTED_MODULE_3__.BarNote(params.type);
        if (this.stave)
            barNote.setStave(this.stave);
        barNote.setContext(this.context);
        this.renderQ.push(barNote);
        return barNote;
    }
    ClefNote(params) {
        const p = Object.assign({ type: 'treble', options: {
                size: 'default',
                annotation: undefined,
            } }, params);
        const clefNote = new _clefnote_js__WEBPACK_IMPORTED_MODULE_6__.ClefNote(p.type, p.options.size, p.options.annotation);
        if (this.stave)
            clefNote.setStave(this.stave);
        clefNote.setContext(this.context);
        this.renderQ.push(clefNote);
        return clefNote;
    }
    TimeSigNote(params) {
        const p = Object.assign({ time: '4/4' }, params);
        const timeSigNote = new _timesignote_js__WEBPACK_IMPORTED_MODULE_37__.TimeSigNote(p.time);
        if (this.stave)
            timeSigNote.setStave(this.stave);
        timeSigNote.setContext(this.context);
        this.renderQ.push(timeSigNote);
        return timeSigNote;
    }
    KeySigNote(params) {
        const keySigNote = new _keysignote_js__WEBPACK_IMPORTED_MODULE_16__.KeySigNote(params.key, params.cancelKey, params.alterKey);
        if (this.stave)
            keySigNote.setStave(this.stave);
        keySigNote.setContext(this.context);
        this.renderQ.push(keySigNote);
        return keySigNote;
    }
    TabNote(noteStruct) {
        const note = new _tabnote_js__WEBPACK_IMPORTED_MODULE_31__.TabNote(noteStruct);
        if (this.stave)
            note.setStave(this.stave);
        note.setContext(this.context);
        this.renderQ.push(note);
        return note;
    }
    GraceNote(noteStruct) {
        const note = new _gracenote_js__WEBPACK_IMPORTED_MODULE_14__.GraceNote(noteStruct);
        if (this.stave)
            note.setStave(this.stave);
        note.setContext(this.context);
        return note;
    }
    GraceNoteGroup(params) {
        const group = new _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_15__.GraceNoteGroup(params.notes, params.slur);
        group.setContext(this.context);
        return group;
    }
    Accidental(params) {
        const accid = new _accidental_js__WEBPACK_IMPORTED_MODULE_0__.Accidental(params.type);
        accid.setContext(this.context);
        return accid;
    }
    Annotation(params) {
        const p = Object.assign({ text: 'p', hJustify: _annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationHorizontalJustify.CENTER, vJustify: _annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationVerticalJustify.BOTTOM }, params);
        const annotation = new _annotation_js__WEBPACK_IMPORTED_MODULE_1__.Annotation(p.text);
        annotation.setJustification(p.hJustify);
        annotation.setVerticalJustification(p.vJustify);
        annotation.setFont(p.font);
        annotation.setContext(this.context);
        return annotation;
    }
    ChordSymbol(params) {
        const p = Object.assign({ vJustify: 'top', hJustify: 'center', kerning: true, reportWidth: true }, params);
        const chordSymbol = new _chordsymbol_js__WEBPACK_IMPORTED_MODULE_5__.ChordSymbol();
        chordSymbol.setHorizontal(p.hJustify);
        chordSymbol.setVertical(p.vJustify);
        chordSymbol.setEnableKerning(p.kerning);
        chordSymbol.setReportWidth(p.reportWidth);
        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {
            if (typeof p.fontWeight === 'string')
                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);
            else
                chordSymbol.setFont(p.fontFamily, p.fontSize, '');
        }
        else if (typeof p.fontSize === 'number') {
            chordSymbol.setFontSize(p.fontSize);
        }
        chordSymbol.setContext(this.context);
        return chordSymbol;
    }
    Articulation(params) {
        const p = Object.assign({ type: 'a.', position: 'above' }, params);
        const articulation = new _articulation_js__WEBPACK_IMPORTED_MODULE_2__.Articulation(p.type);
        articulation.setPosition(p.position);
        articulation.setContext(this.context);
        return articulation;
    }
    Ornament(type, params) {
        const options = Object.assign({ type, position: 0, accidental: '' }, params);
        const ornament = new _ornament_js__WEBPACK_IMPORTED_MODULE_20__.Ornament(type);
        ornament.setPosition(options.position);
        if (options.upperAccidental) {
            ornament.setUpperAccidental(options.upperAccidental);
        }
        if (options.lowerAccidental) {
            ornament.setLowerAccidental(options.lowerAccidental);
        }
        if (typeof options.delayed !== 'undefined') {
            ornament.setDelayed(options.delayed);
        }
        ornament.setContext(this.context);
        return ornament;
    }
    TextDynamics(params) {
        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);
        const text = new _textdynamics_js__WEBPACK_IMPORTED_MODULE_34__.TextDynamics({
            text: p.text,
            line: p.line,
            duration: p.duration,
            dots: p.dots,
        });
        if (this.stave)
            text.setStave(this.stave);
        text.setContext(this.context);
        this.renderQ.push(text);
        return text;
    }
    Fingering(params) {
        const p = Object.assign({ number: '0', position: 'left' }, params);
        const fingering = new _frethandfinger_js__WEBPACK_IMPORTED_MODULE_11__.FretHandFinger(p.number);
        fingering.setPosition(p.position);
        fingering.setContext(this.context);
        return fingering;
    }
    StringNumber(params, drawCircle = true) {
        const stringNumber = new _stringnumber_js__WEBPACK_IMPORTED_MODULE_29__.StringNumber(params.number);
        stringNumber.setPosition(params.position);
        stringNumber.setContext(this.context);
        stringNumber.setDrawCircle(drawCircle);
        return stringNumber;
    }
    TickContext() {
        return new _tickcontext_js__WEBPACK_IMPORTED_MODULE_36__.TickContext();
    }
    ModifierContext() {
        return new _modifiercontext_js__WEBPACK_IMPORTED_MODULE_17__.ModifierContext();
    }
    MultiMeasureRest(params) {
        const numMeasures = (0,_util_js__WEBPACK_IMPORTED_MODULE_39__.defined)(params.number_of_measures, 'NoNumberOfMeasures');
        const multiMeasureRest = new _multimeasurerest_js__WEBPACK_IMPORTED_MODULE_18__.MultiMeasureRest(numMeasures, params);
        multiMeasureRest.setContext(this.context);
        this.renderQ.push(multiMeasureRest);
        return multiMeasureRest;
    }
    Voice(params) {
        const p = Object.assign({ time: '4/4' }, params);
        const voice = new _voice_js__WEBPACK_IMPORTED_MODULE_41__.Voice(p.time);
        this.voices.push(voice);
        return voice;
    }
    StaveConnector(params) {
        const connector = new _staveconnector_js__WEBPACK_IMPORTED_MODULE_25__.StaveConnector(params.top_stave, params.bottom_stave);
        connector.setType(params.type).setContext(this.context);
        this.renderQ.push(connector);
        return connector;
    }
    Formatter(options) {
        return new _formatter_js__WEBPACK_IMPORTED_MODULE_10__.Formatter(options);
    }
    Tuplet(params) {
        const p = Object.assign({ notes: [], options: {} }, params);
        const tuplet = new _tuplet_js__WEBPACK_IMPORTED_MODULE_38__.Tuplet(p.notes, p.options).setContext(this.context);
        this.renderQ.push(tuplet);
        return tuplet;
    }
    Beam(params) {
        var _a, _b, _c, _d, _e;
        const beam = new _beam_js__WEBPACK_IMPORTED_MODULE_4__.Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);
        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);
        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {
            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {
                beam.setPartialBeamSideAt(Number(noteIndex), direction);
            });
        }
        this.renderQ.push(beam);
        return beam;
    }
    Curve(params) {
        const curve = new _curve_js__WEBPACK_IMPORTED_MODULE_7__.Curve(params.from, params.to, params.options).setContext(this.context);
        this.renderQ.push(curve);
        return curve;
    }
    StaveTie(params) {
        var _a;
        const tie = new _stavetie_js__WEBPACK_IMPORTED_MODULE_28__.StaveTie({
            first_note: params.from,
            last_note: params.to,
            first_indices: params.first_indices,
            last_indices: params.last_indices,
        }, params.text);
        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)
            tie.setDirection(params.options.direction);
        tie.setContext(this.context);
        this.renderQ.push(tie);
        return tie;
    }
    StaveLine(params) {
        var _a, _b;
        const line = new _staveline_js__WEBPACK_IMPORTED_MODULE_26__.StaveLine({
            first_note: params.from,
            last_note: params.to,
            first_indices: params.first_indices,
            last_indices: params.last_indices,
        });
        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)
            line.setText(params.options.text);
        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)
            line.setFont(params.options.font);
        line.setContext(this.context);
        this.renderQ.push(line);
        return line;
    }
    VibratoBracket(params) {
        const vibratoBracket = new _vibratobracket_js__WEBPACK_IMPORTED_MODULE_40__.VibratoBracket({
            start: params.from,
            stop: params.to,
        });
        if (params.options.line)
            vibratoBracket.setLine(params.options.line);
        if (params.options.harsh)
            vibratoBracket.setHarsh(params.options.harsh);
        vibratoBracket.setContext(this.context);
        this.renderQ.push(vibratoBracket);
        return vibratoBracket;
    }
    TextBracket(params) {
        const textBracket = new _textbracket_js__WEBPACK_IMPORTED_MODULE_33__.TextBracket({
            start: params.from,
            stop: params.to,
            text: params.text,
            superscript: params.options.superscript,
            position: params.options.position,
        });
        if (params.options.line)
            textBracket.setLine(params.options.line);
        if (params.options.font)
            textBracket.setFont(params.options.font);
        textBracket.setContext(this.context);
        this.renderQ.push(textBracket);
        return textBracket;
    }
    System(params = {}) {
        params.factory = this;
        const system = new _system_js__WEBPACK_IMPORTED_MODULE_30__.System(params).setContext(this.context);
        this.systems.push(system);
        return system;
    }
    EasyScore(options = {}) {
        options.factory = this;
        return new _easyscore_js__WEBPACK_IMPORTED_MODULE_8__.EasyScore(options);
    }
    PedalMarking(params) {
        const p = Object.assign({ notes: [], options: {
                style: 'mixed',
            } }, params);
        const pedal = new _pedalmarking_js__WEBPACK_IMPORTED_MODULE_21__.PedalMarking(p.notes);
        pedal.setType(_pedalmarking_js__WEBPACK_IMPORTED_MODULE_21__.PedalMarking.typeString[p.options.style]);
        pedal.setContext(this.context);
        this.renderQ.push(pedal);
        return pedal;
    }
    NoteSubGroup(params) {
        const p = Object.assign({ notes: [] }, params);
        const group = new _notesubgroup_js__WEBPACK_IMPORTED_MODULE_19__.NoteSubGroup(p.notes);
        group.setContext(this.context);
        return group;
    }
    draw() {
        const ctx = this.context;
        this.systems.forEach((s) => s.setContext(ctx).format());
        this.staves.forEach((s) => s.setContext(ctx).draw());
        this.voices.forEach((v) => v.setContext(ctx).draw());
        this.renderQ.forEach((e) => {
            if (!e.isRendered())
                e.setContext(ctx).draw();
        });
        this.systems.forEach((s) => s.setContext(ctx).draw());
        this.reset();
    }
}
Factory.DEBUG = false;
Factory.TEXT_FONT = Object.assign({}, _element_js__WEBPACK_IMPORTED_MODULE_9__.Element.TEXT_FONT);


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/flow.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/flow.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Flow: () => (/* binding */ Flow)
/* harmony export */ });
/* harmony import */ var _accidental_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accidental.js */ "./node_modules/vexflow_smoosic/build/esm/src/accidental.js");
/* harmony import */ var _annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotation.js */ "./node_modules/vexflow_smoosic/build/esm/src/annotation.js");
/* harmony import */ var _articulation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./articulation.js */ "./node_modules/vexflow_smoosic/build/esm/src/articulation.js");
/* harmony import */ var _barnote_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./barnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/barnote.js");
/* harmony import */ var _beam_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./beam.js */ "./node_modules/vexflow_smoosic/build/esm/src/beam.js");
/* harmony import */ var _bend_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bend.js */ "./node_modules/vexflow_smoosic/build/esm/src/bend.js");
/* harmony import */ var _boundingbox_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./boundingbox.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js");
/* harmony import */ var _boundingboxcomputation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./boundingboxcomputation.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingboxcomputation.js");
/* harmony import */ var _canvascontext_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./canvascontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/canvascontext.js");
/* harmony import */ var _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chordsymbol.js */ "./node_modules/vexflow_smoosic/build/esm/src/chordsymbol.js");
/* harmony import */ var _clef_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./clef.js */ "./node_modules/vexflow_smoosic/build/esm/src/clef.js");
/* harmony import */ var _clefnote_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./clefnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/clefnote.js");
/* harmony import */ var _crescendo_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./crescendo.js */ "./node_modules/vexflow_smoosic/build/esm/src/crescendo.js");
/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./curve.js */ "./node_modules/vexflow_smoosic/build/esm/src/curve.js");
/* harmony import */ var _dot_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dot.js */ "./node_modules/vexflow_smoosic/build/esm/src/dot.js");
/* harmony import */ var _easyscore_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./easyscore.js */ "./node_modules/vexflow_smoosic/build/esm/src/easyscore.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./factory.js */ "./node_modules/vexflow_smoosic/build/esm/src/factory.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _frethandfinger_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./frethandfinger.js */ "./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js");
/* harmony import */ var _ghostnote_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ghostnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/ghostnote.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _glyphnote_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./glyphnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyphnote.js");
/* harmony import */ var _gracenote_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./gracenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenote.js");
/* harmony import */ var _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gracenotegroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenotegroup.js");
/* harmony import */ var _gracetabnote_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./gracetabnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracetabnote.js");
/* harmony import */ var _keymanager_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./keymanager.js */ "./node_modules/vexflow_smoosic/build/esm/src/keymanager.js");
/* harmony import */ var _keysignature_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./keysignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignature.js");
/* harmony import */ var _keysignote_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./keysignote.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignote.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _modifiercontext_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./modifiercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifiercontext.js");
/* harmony import */ var _multimeasurerest_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./multimeasurerest.js */ "./node_modules/vexflow_smoosic/build/esm/src/multimeasurerest.js");
/* harmony import */ var _music_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./music.js */ "./node_modules/vexflow_smoosic/build/esm/src/music.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _notehead_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./notehead.js */ "./node_modules/vexflow_smoosic/build/esm/src/notehead.js");
/* harmony import */ var _notesubgroup_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./notesubgroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/notesubgroup.js");
/* harmony import */ var _ornament_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./ornament.js */ "./node_modules/vexflow_smoosic/build/esm/src/ornament.js");
/* harmony import */ var _parenthesis_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./parenthesis.js */ "./node_modules/vexflow_smoosic/build/esm/src/parenthesis.js");
/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./parser.js */ "./node_modules/vexflow_smoosic/build/esm/src/parser.js");
/* harmony import */ var _pedalmarking_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./pedalmarking.js */ "./node_modules/vexflow_smoosic/build/esm/src/pedalmarking.js");
/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./registry.js */ "./node_modules/vexflow_smoosic/build/esm/src/registry.js");
/* harmony import */ var _rendercontext_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./rendercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/vexflow_smoosic/build/esm/src/renderer.js");
/* harmony import */ var _repeatnote_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./repeatnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/repeatnote.js");
/* harmony import */ var _stave_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./stave.js */ "./node_modules/vexflow_smoosic/build/esm/src/stave.js");
/* harmony import */ var _stavebarline_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./stavebarline.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavebarline.js");
/* harmony import */ var _staveconnector_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./staveconnector.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveconnector.js");
/* harmony import */ var _stavehairpin_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./stavehairpin.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavehairpin.js");
/* harmony import */ var _staveline_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./staveline.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveline.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _stavenote_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./stavenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js");
/* harmony import */ var _staverepetition_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./staverepetition.js */ "./node_modules/vexflow_smoosic/build/esm/src/staverepetition.js");
/* harmony import */ var _stavetempo_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./stavetempo.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetempo.js");
/* harmony import */ var _stavetext_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./stavetext.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetext.js");
/* harmony import */ var _stavetie_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./stavetie.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetie.js");
/* harmony import */ var _stavevolta_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./stavevolta.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavevolta.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _stringnumber_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./stringnumber.js */ "./node_modules/vexflow_smoosic/build/esm/src/stringnumber.js");
/* harmony import */ var _strokes_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./strokes.js */ "./node_modules/vexflow_smoosic/build/esm/src/strokes.js");
/* harmony import */ var _svgcontext_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./svgcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/svgcontext.js");
/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./system.js */ "./node_modules/vexflow_smoosic/build/esm/src/system.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _tabnote_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./tabnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabnote.js");
/* harmony import */ var _tabslide_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./tabslide.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabslide.js");
/* harmony import */ var _tabstave_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./tabstave.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabstave.js");
/* harmony import */ var _tabtie_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./tabtie.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabtie.js");
/* harmony import */ var _textbracket_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./textbracket.js */ "./node_modules/vexflow_smoosic/build/esm/src/textbracket.js");
/* harmony import */ var _textdynamics_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./textdynamics.js */ "./node_modules/vexflow_smoosic/build/esm/src/textdynamics.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _textnote_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./textnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/textnote.js");
/* harmony import */ var _tickcontext_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./tickcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js");
/* harmony import */ var _timesignature_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./timesignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignature.js");
/* harmony import */ var _timesignote_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./timesignote.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignote.js");
/* harmony import */ var _tremolo_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./tremolo.js */ "./node_modules/vexflow_smoosic/build/esm/src/tremolo.js");
/* harmony import */ var _tuning_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./tuning.js */ "./node_modules/vexflow_smoosic/build/esm/src/tuning.js");
/* harmony import */ var _tuplet_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./tuplet.js */ "./node_modules/vexflow_smoosic/build/esm/src/tuplet.js");
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./version.js */ "./node_modules/vexflow_smoosic/build/esm/src/version.js");
/* harmony import */ var _vibrato_js__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./vibrato.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibrato.js");
/* harmony import */ var _vibratobracket_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./vibratobracket.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibratobracket.js");
/* harmony import */ var _voice_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./voice.js */ "./node_modules/vexflow_smoosic/build/esm/src/voice.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


















































































class Flow {
    static get BUILD() {
        return {
            VERSION: _version_js__WEBPACK_IMPORTED_MODULE_78__.VERSION,
            ID: _version_js__WEBPACK_IMPORTED_MODULE_78__.ID,
            DATE: _version_js__WEBPACK_IMPORTED_MODULE_78__.DATE,
        };
    }
    static setMusicFont(...fontNames) {
        const fonts = fontNames.map((fontName) => _font_js__WEBPACK_IMPORTED_MODULE_18__.Font.load(fontName));
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.MUSIC_FONT_STACK = fonts;
        _glyph_js__WEBPACK_IMPORTED_MODULE_23__.Glyph.MUSIC_FONT_STACK = fonts.slice();
        _glyph_js__WEBPACK_IMPORTED_MODULE_23__.Glyph.CURRENT_CACHE_KEY = fontNames.join(',');
        return fonts;
    }
    static fetchMusicFont(fontName, fontModuleOrPath) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    static getMusicFont() {
        const fonts = _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.MUSIC_FONT_STACK;
        return fonts.map((font) => font.getName());
    }
    static get RENDER_PRECISION_PLACES() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.RENDER_PRECISION_PLACES;
    }
    static set RENDER_PRECISION_PLACES(precision) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.RENDER_PRECISION_PLACES = precision;
    }
    static get SOFTMAX_FACTOR() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.SOFTMAX_FACTOR;
    }
    static set SOFTMAX_FACTOR(factor) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.SOFTMAX_FACTOR = factor;
    }
    static get NOTATION_FONT_SCALE() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.NOTATION_FONT_SCALE;
    }
    static set NOTATION_FONT_SCALE(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.NOTATION_FONT_SCALE = value;
    }
    static get TABLATURE_FONT_SCALE() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.TABLATURE_FONT_SCALE;
    }
    static set TABLATURE_FONT_SCALE(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.TABLATURE_FONT_SCALE = value;
    }
    static get RESOLUTION() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.RESOLUTION;
    }
    static set RESOLUTION(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.RESOLUTION = value;
    }
    static get SLASH_NOTEHEAD_WIDTH() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.SLASH_NOTEHEAD_WIDTH;
    }
    static set SLASH_NOTEHEAD_WIDTH(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.SLASH_NOTEHEAD_WIDTH = value;
    }
    static get STAVE_LINE_DISTANCE() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STAVE_LINE_DISTANCE;
    }
    static set STAVE_LINE_DISTANCE(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STAVE_LINE_DISTANCE = value;
    }
    static get STAVE_LINE_THICKNESS() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STAVE_LINE_THICKNESS;
    }
    static set STAVE_LINE_THICKNESS(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STAVE_LINE_THICKNESS = value;
    }
    static get STEM_HEIGHT() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STEM_HEIGHT;
    }
    static set STEM_HEIGHT(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STEM_HEIGHT = value;
    }
    static get STEM_WIDTH() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STEM_WIDTH;
    }
    static set STEM_WIDTH(value) {
        _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.STEM_WIDTH = value;
    }
    static get TIME4_4() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.TIME4_4;
    }
    static get accidentalMap() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.accidentalMap;
    }
    static get unicode() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.unicode;
    }
    static keySignature(spec) {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.keySignature(spec);
    }
    static hasKeySignature(spec) {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.hasKeySignature(spec);
    }
    static getKeySignatures() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.getKeySignatures();
    }
    static clefProperties(clef) {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.clefProperties(clef);
    }
    static keyProperties(key, clef, params) {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.keyProperties(key, clef, params);
    }
    static durationToTicks(duration) {
        return _tables_js__WEBPACK_IMPORTED_MODULE_63__.Tables.durationToTicks(duration);
    }
}
Flow.Accidental = _accidental_js__WEBPACK_IMPORTED_MODULE_0__.Accidental;
Flow.Annotation = _annotation_js__WEBPACK_IMPORTED_MODULE_1__.Annotation;
Flow.Articulation = _articulation_js__WEBPACK_IMPORTED_MODULE_2__.Articulation;
Flow.Barline = _stavebarline_js__WEBPACK_IMPORTED_MODULE_47__.Barline;
Flow.BarNote = _barnote_js__WEBPACK_IMPORTED_MODULE_3__.BarNote;
Flow.Beam = _beam_js__WEBPACK_IMPORTED_MODULE_4__.Beam;
Flow.Bend = _bend_js__WEBPACK_IMPORTED_MODULE_5__.Bend;
Flow.BoundingBox = _boundingbox_js__WEBPACK_IMPORTED_MODULE_6__.BoundingBox;
Flow.BoundingBoxComputation = _boundingboxcomputation_js__WEBPACK_IMPORTED_MODULE_7__.BoundingBoxComputation;
Flow.CanvasContext = _canvascontext_js__WEBPACK_IMPORTED_MODULE_8__.CanvasContext;
Flow.ChordSymbol = _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.ChordSymbol;
Flow.Clef = _clef_js__WEBPACK_IMPORTED_MODULE_10__.Clef;
Flow.ClefNote = _clefnote_js__WEBPACK_IMPORTED_MODULE_11__.ClefNote;
Flow.Crescendo = _crescendo_js__WEBPACK_IMPORTED_MODULE_12__.Crescendo;
Flow.Curve = _curve_js__WEBPACK_IMPORTED_MODULE_13__.Curve;
Flow.Dot = _dot_js__WEBPACK_IMPORTED_MODULE_14__.Dot;
Flow.EasyScore = _easyscore_js__WEBPACK_IMPORTED_MODULE_15__.EasyScore;
Flow.Element = _element_js__WEBPACK_IMPORTED_MODULE_16__.Element;
Flow.Factory = _factory_js__WEBPACK_IMPORTED_MODULE_17__.Factory;
Flow.Font = _font_js__WEBPACK_IMPORTED_MODULE_18__.Font;
Flow.Formatter = _formatter_js__WEBPACK_IMPORTED_MODULE_19__.Formatter;
Flow.Fraction = _fraction_js__WEBPACK_IMPORTED_MODULE_20__.Fraction;
Flow.FretHandFinger = _frethandfinger_js__WEBPACK_IMPORTED_MODULE_21__.FretHandFinger;
Flow.GhostNote = _ghostnote_js__WEBPACK_IMPORTED_MODULE_22__.GhostNote;
Flow.Glyph = _glyph_js__WEBPACK_IMPORTED_MODULE_23__.Glyph;
Flow.GlyphNote = _glyphnote_js__WEBPACK_IMPORTED_MODULE_24__.GlyphNote;
Flow.GraceNote = _gracenote_js__WEBPACK_IMPORTED_MODULE_25__.GraceNote;
Flow.GraceNoteGroup = _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_26__.GraceNoteGroup;
Flow.GraceTabNote = _gracetabnote_js__WEBPACK_IMPORTED_MODULE_27__.GraceTabNote;
Flow.KeyManager = _keymanager_js__WEBPACK_IMPORTED_MODULE_28__.KeyManager;
Flow.KeySignature = _keysignature_js__WEBPACK_IMPORTED_MODULE_29__.KeySignature;
Flow.KeySigNote = _keysignote_js__WEBPACK_IMPORTED_MODULE_30__.KeySigNote;
Flow.Modifier = _modifier_js__WEBPACK_IMPORTED_MODULE_31__.Modifier;
Flow.ModifierContext = _modifiercontext_js__WEBPACK_IMPORTED_MODULE_32__.ModifierContext;
Flow.MultiMeasureRest = _multimeasurerest_js__WEBPACK_IMPORTED_MODULE_33__.MultiMeasureRest;
Flow.Music = _music_js__WEBPACK_IMPORTED_MODULE_34__.Music;
Flow.Note = _note_js__WEBPACK_IMPORTED_MODULE_35__.Note;
Flow.NoteHead = _notehead_js__WEBPACK_IMPORTED_MODULE_36__.NoteHead;
Flow.NoteSubGroup = _notesubgroup_js__WEBPACK_IMPORTED_MODULE_37__.NoteSubGroup;
Flow.Ornament = _ornament_js__WEBPACK_IMPORTED_MODULE_38__.Ornament;
Flow.Parenthesis = _parenthesis_js__WEBPACK_IMPORTED_MODULE_39__.Parenthesis;
Flow.Parser = _parser_js__WEBPACK_IMPORTED_MODULE_40__.Parser;
Flow.PedalMarking = _pedalmarking_js__WEBPACK_IMPORTED_MODULE_41__.PedalMarking;
Flow.Registry = _registry_js__WEBPACK_IMPORTED_MODULE_42__.Registry;
Flow.RenderContext = _rendercontext_js__WEBPACK_IMPORTED_MODULE_43__.RenderContext;
Flow.Renderer = _renderer_js__WEBPACK_IMPORTED_MODULE_44__.Renderer;
Flow.RepeatNote = _repeatnote_js__WEBPACK_IMPORTED_MODULE_45__.RepeatNote;
Flow.Repetition = _staverepetition_js__WEBPACK_IMPORTED_MODULE_53__.Repetition;
Flow.Stave = _stave_js__WEBPACK_IMPORTED_MODULE_46__.Stave;
Flow.StaveConnector = _staveconnector_js__WEBPACK_IMPORTED_MODULE_48__.StaveConnector;
Flow.StaveHairpin = _stavehairpin_js__WEBPACK_IMPORTED_MODULE_49__.StaveHairpin;
Flow.StaveLine = _staveline_js__WEBPACK_IMPORTED_MODULE_50__.StaveLine;
Flow.StaveModifier = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_51__.StaveModifier;
Flow.StaveNote = _stavenote_js__WEBPACK_IMPORTED_MODULE_52__.StaveNote;
Flow.StaveTempo = _stavetempo_js__WEBPACK_IMPORTED_MODULE_54__.StaveTempo;
Flow.StaveText = _stavetext_js__WEBPACK_IMPORTED_MODULE_55__.StaveText;
Flow.StaveTie = _stavetie_js__WEBPACK_IMPORTED_MODULE_56__.StaveTie;
Flow.Stem = _stem_js__WEBPACK_IMPORTED_MODULE_58__.Stem;
Flow.StringNumber = _stringnumber_js__WEBPACK_IMPORTED_MODULE_59__.StringNumber;
Flow.Stroke = _strokes_js__WEBPACK_IMPORTED_MODULE_60__.Stroke;
Flow.SVGContext = _svgcontext_js__WEBPACK_IMPORTED_MODULE_61__.SVGContext;
Flow.System = _system_js__WEBPACK_IMPORTED_MODULE_62__.System;
Flow.TabNote = _tabnote_js__WEBPACK_IMPORTED_MODULE_64__.TabNote;
Flow.TabSlide = _tabslide_js__WEBPACK_IMPORTED_MODULE_65__.TabSlide;
Flow.TabStave = _tabstave_js__WEBPACK_IMPORTED_MODULE_66__.TabStave;
Flow.TabTie = _tabtie_js__WEBPACK_IMPORTED_MODULE_67__.TabTie;
Flow.TextBracket = _textbracket_js__WEBPACK_IMPORTED_MODULE_68__.TextBracket;
Flow.TextDynamics = _textdynamics_js__WEBPACK_IMPORTED_MODULE_69__.TextDynamics;
Flow.TextFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_70__.TextFormatter;
Flow.TextNote = _textnote_js__WEBPACK_IMPORTED_MODULE_71__.TextNote;
Flow.TickContext = _tickcontext_js__WEBPACK_IMPORTED_MODULE_72__.TickContext;
Flow.TimeSignature = _timesignature_js__WEBPACK_IMPORTED_MODULE_73__.TimeSignature;
Flow.TimeSigNote = _timesignote_js__WEBPACK_IMPORTED_MODULE_74__.TimeSigNote;
Flow.Tremolo = _tremolo_js__WEBPACK_IMPORTED_MODULE_75__.Tremolo;
Flow.Tuning = _tuning_js__WEBPACK_IMPORTED_MODULE_76__.Tuning;
Flow.Tuplet = _tuplet_js__WEBPACK_IMPORTED_MODULE_77__.Tuplet;
Flow.Vibrato = _vibrato_js__WEBPACK_IMPORTED_MODULE_79__.Vibrato;
Flow.VibratoBracket = _vibratobracket_js__WEBPACK_IMPORTED_MODULE_80__.VibratoBracket;
Flow.Voice = _voice_js__WEBPACK_IMPORTED_MODULE_81__.Voice;
Flow.Volta = _stavevolta_js__WEBPACK_IMPORTED_MODULE_57__.Volta;
Flow.AnnotationHorizontalJustify = _annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationHorizontalJustify;
Flow.AnnotationVerticalJustify = _annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationVerticalJustify;
Flow.ChordSymbolHorizontalJustify = _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.ChordSymbolHorizontalJustify;
Flow.ChordSymbolVerticalJustify = _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.ChordSymbolVerticalJustify;
Flow.SymbolTypes = _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.SymbolTypes;
Flow.SymbolModifiers = _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.SymbolModifiers;
Flow.CurvePosition = _curve_js__WEBPACK_IMPORTED_MODULE_13__.CurvePosition;
Flow.FontWeight = _font_js__WEBPACK_IMPORTED_MODULE_18__.FontWeight;
Flow.FontStyle = _font_js__WEBPACK_IMPORTED_MODULE_18__.FontStyle;
Flow.ModifierPosition = _modifier_js__WEBPACK_IMPORTED_MODULE_31__.ModifierPosition;
Flow.RendererBackends = _renderer_js__WEBPACK_IMPORTED_MODULE_44__.RendererBackends;
Flow.RendererLineEndType = _renderer_js__WEBPACK_IMPORTED_MODULE_44__.RendererLineEndType;
Flow.BarlineType = _stavebarline_js__WEBPACK_IMPORTED_MODULE_47__.BarlineType;
Flow.StaveModifierPosition = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_51__.StaveModifierPosition;
Flow.VoltaType = _stavevolta_js__WEBPACK_IMPORTED_MODULE_57__.VoltaType;
Flow.TextBracketPosition = _textbracket_js__WEBPACK_IMPORTED_MODULE_68__.TextBracketPosition;
Flow.TextJustification = _textnote_js__WEBPACK_IMPORTED_MODULE_71__.TextJustification;
Flow.VoiceMode = _voice_js__WEBPACK_IMPORTED_MODULE_81__.VoiceMode;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/font.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/font.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Font: () => (/* binding */ Font),
/* harmony export */   FontStyle: () => (/* binding */ FontStyle),
/* harmony export */   FontWeight: () => (/* binding */ FontWeight)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var FontWeight;
(function (FontWeight) {
    FontWeight["NORMAL"] = "normal";
    FontWeight["BOLD"] = "bold";
})(FontWeight || (FontWeight = {}));
var FontStyle;
(function (FontStyle) {
    FontStyle["NORMAL"] = "normal";
    FontStyle["ITALIC"] = "italic";
})(FontStyle || (FontStyle = {}));
let fontParser;
const Fonts = {};
class Font {
    constructor(fontName) {
        this.name = fontName;
    }
    static convertSizeToPixelValue(fontSize = Font.SIZE) {
        var _a;
        if (typeof fontSize === 'number') {
            return fontSize * Font.scaleToPxFrom.pt;
        }
        else {
            const value = parseFloat(fontSize);
            if (isNaN(value)) {
                return 0;
            }
            const unit = fontSize.replace(/[\d.\s]/g, '').toLowerCase();
            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;
            return value * conversionFactor;
        }
    }
    static convertSizeToPointValue(fontSize = Font.SIZE) {
        var _a;
        if (typeof fontSize === 'number') {
            return fontSize;
        }
        else {
            const value = parseFloat(fontSize);
            if (isNaN(value)) {
                return 0;
            }
            const unit = fontSize.replace(/[\d.\s]/g, '').toLowerCase();
            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;
            return value * conversionFactor;
        }
    }
    static validate(f, size, weight, style) {
        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {
            return Font.fromCSSString(f);
        }
        let family;
        if (typeof f === 'object') {
            family = f.family;
            size = f.size;
            weight = f.weight;
            style = f.style;
        }
        else {
            family = f;
        }
        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;
        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';
        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;
        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;
        if (weight === '') {
            weight = FontWeight.NORMAL;
        }
        if (style === '') {
            style = FontStyle.NORMAL;
        }
        if (typeof size === 'number') {
            size = `${size}pt`;
        }
        if (typeof weight === 'number') {
            weight = weight.toString();
        }
        return { family, size, weight, style };
    }
    static fromCSSString(cssFontShorthand) {
        if (!fontParser) {
            fontParser = document.createElement('span');
        }
        fontParser.style.font = cssFontShorthand;
        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;
        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };
    }
    static toCSSString(fontInfo) {
        var _a;
        if (!fontInfo) {
            return '';
        }
        let style;
        const st = fontInfo.style;
        if (st === FontStyle.NORMAL || st === '' || st === undefined) {
            style = '';
        }
        else {
            style = st.trim() + ' ';
        }
        let weight;
        const wt = fontInfo.weight;
        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {
            weight = '';
        }
        else if (typeof wt === 'number') {
            weight = wt + ' ';
        }
        else {
            weight = wt.trim() + ' ';
        }
        let size;
        const sz = fontInfo.size;
        if (sz === undefined) {
            size = Font.SIZE + 'pt ';
        }
        else if (typeof sz === 'number') {
            size = sz + 'pt ';
        }
        else {
            size = sz.trim() + ' ';
        }
        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;
        return `${style}${weight}${size}${family}`;
    }
    static scaleSize(fontSize, scaleFactor) {
        if (typeof fontSize === 'number') {
            return (fontSize * scaleFactor);
        }
        else {
            const value = parseFloat(fontSize);
            const unit = fontSize.replace(/[\d.\s]/g, '');
            return `${value * scaleFactor}${unit}`;
        }
    }
    static isBold(weight) {
        if (!weight) {
            return false;
        }
        else if (typeof weight === 'number') {
            return weight >= 600;
        }
        else {
            const parsedWeight = parseInt(weight, 10);
            if (isNaN(parsedWeight)) {
                return weight.toLowerCase() === 'bold';
            }
            else {
                return parsedWeight >= 600;
            }
        }
    }
    static isItalic(style) {
        if (!style) {
            return false;
        }
        else {
            return style.toLowerCase() === FontStyle.ITALIC;
        }
    }
    static loadWebFont(fontName, woffURL, includeWoff2 = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';
            const woff1URL = `url(${woffURL}) format('woff')`;
            const woffURLs = woff2URL + woff1URL;
            const fontFace = new FontFace(fontName, woffURLs);
            yield fontFace.load();
            document.fonts.add(fontFace);
            return fontFace;
        });
    }
    static loadWebFonts() {
        return __awaiter(this, void 0, void 0, function* () {
            const host = Font.WEB_FONT_HOST;
            const files = Font.WEB_FONT_FILES;
            for (const fontName in files) {
                const fontPath = files[fontName];
                Font.loadWebFont(fontName, host + fontPath);
            }
        });
    }
    static load(fontName, data, metrics) {
        let font = Fonts[fontName];
        if (!font) {
            font = new Font(fontName);
            Fonts[fontName] = font;
        }
        if (data) {
            font.setData(data);
        }
        if (metrics) {
            font.setMetrics(metrics);
        }
        return font;
    }
    getName() {
        return this.name;
    }
    getData() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.defined)(this.data, 'FontError', 'Missing font data');
    }
    getMetrics() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.defined)(this.metrics, 'FontError', 'Missing metrics');
    }
    setData(data) {
        this.data = data;
    }
    setMetrics(metrics) {
        this.metrics = metrics;
    }
    hasData() {
        return this.data !== undefined;
    }
    getResolution() {
        return this.getData().resolution;
    }
    getGlyphs() {
        return this.getData().glyphs;
    }
    lookupMetric(key, defaultValue) {
        const keyParts = key.split('.');
        let currObj = this.getMetrics();
        for (let i = 0; i < keyParts.length; i++) {
            const keyPart = keyParts[i];
            const value = currObj[keyPart];
            if (value === undefined) {
                return defaultValue;
            }
            currObj = value;
        }
        return currObj;
    }
    toString() {
        return '[' + this.name + ' Font]';
    }
}
Font.SANS_SERIF = 'Arial, sans-serif';
Font.SERIF = 'Times New Roman, serif';
Font.SIZE = 10;
Font.scaleToPxFrom = {
    pt: 4 / 3,
    px: 1,
    em: 16,
    '%': 4 / 25,
    in: 96,
    mm: 96 / 25.4,
    cm: 96 / 2.54,
};
Font.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';
Font.WEB_FONT_FILES = {
    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',
    PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff',
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/bravura_glyphs.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/bravura_glyphs.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BravuraFont: () => (/* binding */ BravuraFont)
/* harmony export */ });
const BravuraFont = {
    glyphs: {
        bracketTop: {
            x_min: 0,
            x_max: 469,
            y_min: 0,
            y_max: 295,
            ha: 295,
            o: 'm 0 0 l 180 0 b 674 390 410 43 616 150 b 675 405 675 396 675 400 b 664 425 675 416 671 422 b 628 405 651 425 635 415 b 157 179 613 389 432 199 l 12 179 b 0 168 3 179 0 177 z',
        },
        bracketBottom: {
            x_min: 0,
            x_max: 469,
            y_min: -295,
            y_max: 0,
            ha: 295,
            o: 'm 0 -168 b 12 -179 0 -177 3 -179 l 157 -179 b 628 -405 432 -199 613 -389 b 664 -425 635 -415 651 -425 b 675 -405 671 -422 675 -416 b 674 -390 675 -400 675 -396 b 180 0 616 -150 410 -43 l 0 0 z',
        },
        barlineTick: {
            x_min: 0,
            x_max: 36,
            y_min: 868,
            y_max: 1120,
            ha: 252,
            o: 'm 52 1250 l 52 1613 l 0 1613 l 0 1250 z',
        },
        breathMarkTick: {
            x_min: 0,
            x_max: 500,
            y_min: 0,
            y_max: 502,
            ha: 502,
            o: 'm 9 367 b 0 374 6 372 3 374 b 9 334 0 367 0 343 b 179 19 40 312 164 121 b 192 0 179 3 186 0 b 210 19 197 0 207 6 b 698 701 245 197 507 658 b 720 714 714 704 720 711 b 698 723 720 720 711 723 b 197 186 455 714 210 202 b 186 176 194 179 189 176 b 176 186 179 176 176 186 b 9 367 143 266 27 359 z',
        },
        segno: {
            x_min: 4,
            x_max: 550,
            y_min: -27,
            y_max: 759,
            ha: 786,
            o: 'm 194 958 b 217 939 203 958 213 955 l 220 929 b 325 805 230 890 252 805 b 425 901 384 805 425 840 b 413 969 425 923 420 946 b 220 1060 390 1035 294 1060 b 6 793 120 1060 6 936 b 29 687 6 759 13 723 b 295 449 75 582 284 454 b 304 438 301 446 304 444 b 295 415 304 432 301 425 b 78 22 285 395 78 22 b 73 3 75 16 73 9 b 114 -39 73 -20 91 -39 b 150 -17 128 -39 143 -30 b 377 395 150 -17 373 386 b 395 402 377 393 389 402 b 704 176 416 397 704 312 b 621 75 704 120 670 82 l 616 73 b 562 138 586 73 562 94 l 562 154 b 485 249 562 209 526 249 b 468 246 480 249 474 248 b 366 153 415 233 366 210 b 540 -12 366 65 455 -12 b 600 -1 559 -12 579 -9 b 792 251 716 37 792 131 b 789 292 792 264 791 278 b 523 588 768 451 540 579 b 498 611 505 598 498 603 b 501 619 498 613 500 616 b 732 1032 508 631 732 1032 b 737 1053 736 1040 737 1045 b 697 1093 737 1076 719 1093 b 661 1073 683 1093 668 1086 b 423 647 661 1073 432 660 b 410 635 419 639 416 635 b 396 639 406 635 402 636 b 128 792 383 644 166 727 b 108 868 120 808 108 838 b 186 958 108 907 125 948 z m 598 671 b 680 589 598 626 635 589 b 762 671 726 589 762 626 b 680 753 762 717 726 753 b 598 671 635 753 598 717 z m 202 380 b 120 462 202 425 166 462 b 37 380 75 462 37 425 b 120 298 37 334 75 298 b 202 380 166 298 202 334 z',
        },
        coda: {
            x_min: -4,
            x_max: 955,
            y_min: -158,
            y_max: 898,
            ha: 1056,
            o: 'm 1349 576 l 1178 576 b 729 1083 1164 847 962 1064 l 729 1269 b 694 1293 729 1287 713 1293 b 660 1269 675 1293 660 1287 l 660 1083 b 210 576 426 1064 226 848 l 20 576 b -6 541 0 576 -6 560 b 20 507 -6 523 0 507 l 210 507 b 660 0 226 238 426 19 l 660 -202 b 694 -228 660 -222 675 -228 b 729 -202 713 -228 729 -222 l 729 0 b 1178 507 962 19 1164 238 l 1349 507 b 1375 541 1369 507 1375 523 b 1349 576 1375 560 1369 576 z m 940 576 l 729 576 l 729 1002 b 940 576 930 985 940 809 z m 660 1002 l 660 576 l 455 576 b 660 1002 455 809 455 985 z m 455 507 l 660 507 l 660 69 b 455 507 474 91 456 285 z m 729 69 l 729 507 l 940 507 b 729 69 936 287 909 91 z',
        },
        gClef: {
            x_min: 0,
            x_max: 671,
            y_min: -658,
            y_max: 1098,
            ha: 1756,
            o: 'm 541 598 b 550 625 539 615 541 616 b 824 1174 706 770 824 953 b 730 1509 824 1299 789 1423 b 655 1581 708 1541 671 1581 b 562 1512 635 1581 590 1544 b 420 1064 455 1394 420 1214 b 441 828 420 981 431 887 b 428 793 444 811 445 808 b 0 125 220 622 0 416 b 524 -363 0 -125 171 -363 b 624 -354 557 -363 595 -360 b 645 -367 639 -351 642 -350 b 684 -657 662 -464 684 -589 b 455 -896 684 -870 540 -896 b 340 -854 377 -896 340 -873 b 386 -829 340 -844 353 -840 b 482 -694 431 -816 482 -778 b 344 -547 482 -615 432 -547 b 190 -713 248 -547 190 -624 b 464 -948 190 -806 246 -948 b 747 -660 560 -948 747 -904 b 706 -351 747 -577 721 -441 b 724 -327 703 -334 704 -336 b 966 16 870 -269 966 -147 b 619 363 966 200 831 363 b 577 389 582 363 582 363 z m 677 1358 b 763 1240 724 1358 763 1319 b 513 851 763 1080 626 950 b 494 863 503 842 497 844 b 485 995 488 900 485 949 b 677 1358 485 1220 589 1358 z m 520 377 b 498 343 524 350 524 351 b 289 63 372 300 289 186 b 455 -192 289 -66 357 -158 b 494 -200 467 -196 484 -200 b 511 -184 505 -200 511 -193 b 490 -166 511 -174 500 -170 b 386 -12 429 -140 386 -78 b 530 157 386 71 442 132 b 559 145 553 163 556 161 l 631 -284 b 611 -304 634 -300 632 -300 b 530 -311 588 -308 559 -311 b 115 29 278 -311 115 -171 b 249 363 115 114 130 228 b 469 567 336 459 402 513 b 490 562 484 579 487 577 z m 619 148 b 635 168 616 166 618 170 b 848 -66 752 158 848 60 b 713 -271 848 -157 793 -230 b 690 -262 696 -279 693 -279 z',
        },
        cClef: {
            x_min: 0,
            x_max: 699,
            y_min: -506,
            y_max: 506,
            ha: 1012,
            o: 'm 331 694 b 301 724 331 714 321 724 l 300 724 b 269 694 279 724 269 714 l 269 -694 b 300 -724 269 -714 279 -724 l 301 -724 b 331 -694 321 -724 331 -714 l 331 -63 b 344 -55 331 -52 338 -53 b 472 -265 382 -65 442 -102 b 500 -301 477 -288 485 -301 b 530 -262 516 -301 523 -287 b 684 -128 549 -199 582 -128 b 804 -409 778 -128 804 -220 b 651 -683 804 -598 770 -683 b 528 -644 631 -683 528 -674 b 567 -622 528 -636 552 -628 b 625 -528 596 -612 625 -583 b 527 -429 625 -465 583 -429 b 416 -547 465 -429 416 -471 b 667 -729 416 -638 495 -729 b 1007 -413 903 -729 1007 -563 b 706 -76 1007 -215 897 -76 b 618 -89 664 -76 636 -84 b 576 -88 603 -94 589 -96 b 524 0 556 -75 524 -29 b 576 88 524 29 556 75 b 618 89 589 96 603 94 b 706 76 636 84 664 76 b 1007 413 897 76 1007 215 b 667 729 1007 563 903 729 b 416 547 495 729 416 638 b 527 429 416 471 465 429 b 625 528 583 429 625 465 b 567 622 625 583 596 612 b 528 644 552 628 528 636 b 651 683 528 674 631 683 b 804 409 770 683 804 598 b 684 128 804 220 778 128 b 530 262 582 128 549 199 b 500 301 523 287 516 301 b 472 265 485 301 477 288 b 344 55 442 102 382 65 b 331 63 338 53 331 52 z m 30 724 b 0 694 10 724 0 714 l 0 -694 b 30 -724 0 -714 10 -724 l 154 -724 b 184 -694 174 -724 184 -714 l 184 694 b 154 724 184 714 174 724 z',
        },
        fClef: {
            x_min: -5,
            x_max: 684,
            y_min: -635,
            y_max: 262,
            ha: 897,
            o: 'm 363 377 b 0 56 112 377 0 194 b 177 -158 0 -59 60 -158 b 330 -6 268 -158 330 -95 b 192 144 330 86 262 144 b 120 134 153 144 138 134 b 96 160 101 134 96 145 b 330 323 96 217 183 323 b 549 -53 482 323 549 173 b 14 -871 549 -455 350 -680 b -7 -897 1 -878 -7 -886 b 12 -914 -7 -906 -1 -914 b 36 -907 19 -914 27 -912 b 765 -40 390 -734 765 -478 b 363 377 765 210 612 377 z m 906 259 b 827 180 861 259 827 225 b 906 101 827 135 861 101 b 985 180 950 101 985 135 b 906 259 985 225 950 259 z m 907 -102 b 829 -180 863 -102 829 -135 b 907 -258 829 -225 863 -258 b 985 -180 952 -258 985 -225 b 907 -102 985 -135 952 -102 z',
        },
        unpitchedPercussionClef1: {
            x_min: 0,
            x_max: 382,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 230 -338 l 230 338 b 210 360 230 350 222 360 l 20 360 b 0 338 9 360 0 350 l 0 -338 b 20 -360 0 -350 9 -360 l 210 -360 b 230 -338 222 -360 230 -350 z m 550 338 b 530 360 550 350 541 360 l 340 360 b 320 338 328 360 320 350 l 320 -338 b 340 -360 320 -350 328 -360 l 530 -360 b 550 -338 541 -360 550 -350 z',
        },
        '6stringTabClef': {
            x_min: -3,
            x_max: 408,
            y_min: -748,
            y_max: 764,
            ha: 1512,
            o: 'm 557 1024 l 557 1100 l 26 1100 l 26 1024 l 249 1024 l 249 422 l 336 422 l 336 1024 z m 588 -328 l 350 348 l 238 348 l -4 -328 l 88 -328 l 160 -125 l 420 -125 l 491 -328 z m 397 -52 l 181 -52 l 292 256 z m 544 -883 b 420 -719 544 -802 507 -752 b 514 -572 482 -690 514 -639 b 314 -399 514 -472 442 -399 l 39 -399 l 39 -1077 l 344 -1077 b 544 -883 467 -1077 544 -995 z m 428 -583 b 292 -691 428 -652 389 -691 l 125 -691 l 125 -475 l 292 -475 b 428 -583 389 -475 428 -514 z m 458 -884 b 337 -1001 458 -949 418 -1001 l 125 -1001 l 125 -768 l 337 -768 b 458 -884 418 -768 458 -818 z',
        },
        timeSig0: {
            x_min: 20,
            x_max: 450,
            y_min: -250,
            y_max: 251,
            ha: 501,
            o: 'm 648 0 b 338 361 648 200 510 361 b 29 0 167 361 29 200 b 338 -360 29 -199 167 -360 b 648 0 510 -360 648 -199 z m 338 317 b 446 10 397 317 446 180 b 338 -295 446 -158 397 -295 b 230 10 278 -295 230 -158 b 338 317 230 180 278 317 z',
        },
        timeSig1: {
            x_min: 20,
            x_max: 314,
            y_min: -250,
            y_max: 251,
            ha: 501,
            o: 'm 35 19 b 29 0 35 19 29 10 b 45 -20 29 -7 33 -16 b 58 -23 50 -22 56 -23 b 78 -10 72 -23 78 -10 b 156 117 78 -10 140 89 b 170 131 161 127 167 131 b 179 111 176 131 179 120 l 179 -261 b 115 -315 179 -294 145 -315 b 91 -337 105 -315 91 -320 b 122 -360 91 -353 104 -360 l 429 -360 b 452 -337 452 -360 452 -337 b 431 -315 452 -337 452 -315 b 384 -265 410 -315 384 -289 l 384 328 b 356 361 384 351 376 360 b 281 356 336 361 300 356 b 206 360 253 356 228 357 b 199 361 203 360 200 361 b 173 334 184 361 179 347 z',
        },
        timeSig2: {
            x_min: 20,
            x_max: 426,
            y_min: -257,
            y_max: 254,
            ha: 511,
            o: 'm 606 -131 b 589 -111 606 -114 599 -111 b 570 -127 577 -111 573 -117 l 569 -128 b 513 -192 554 -164 543 -192 b 488 -187 505 -192 498 -190 b 445 -171 469 -180 459 -179 b 289 -137 416 -160 348 -137 b 236 -145 271 -137 252 -140 b 422 -42 268 -94 390 -50 b 613 147 523 -14 613 27 b 330 366 613 300 464 366 b 69 275 229 366 140 357 b 29 170 45 245 29 209 b 42 108 29 150 33 130 b 160 29 63 63 108 29 b 261 156 248 29 261 120 b 161 275 261 242 161 246 b 275 330 164 295 190 330 b 405 192 403 330 405 233 b 193 -102 405 60 297 -39 b 33 -317 114 -153 58 -223 l 32 -321 b 69 -370 32 -340 48 -370 b 203 -282 101 -370 118 -282 b 410 -360 261 -282 282 -360 b 606 -131 472 -360 583 -354 z',
        },
        timeSig3: {
            x_min: 20,
            x_max: 401,
            y_min: -251,
            y_max: 249,
            ha: 500,
            o: 'm 307 357 b 301 357 305 357 304 357 l 291 359 b 285 359 289 359 287 359 b 37 200 161 359 37 276 b 154 84 37 153 65 89 l 161 84 b 256 177 225 84 256 130 l 256 189 b 209 248 252 242 216 245 b 180 268 202 251 180 248 l 180 274 b 240 310 183 298 228 310 b 374 199 363 310 374 233 l 374 189 b 199 36 374 82 289 40 b 164 12 184 35 164 27 b 200 -6 164 -6 189 -6 b 379 -137 366 -6 379 -118 b 269 -307 379 -289 301 -307 b 256 -305 264 -307 258 -305 b 216 -282 245 -304 217 -304 l 216 -275 b 249 -180 216 -243 248 -222 b 145 -76 249 -120 207 -76 b 130 -78 140 -76 135 -76 b 60 -115 105 -82 78 -96 b 29 -203 36 -137 29 -171 b 275 -361 32 -315 134 -359 l 288 -361 b 577 -161 431 -361 577 -288 l 577 -151 b 537 -50 575 -109 564 -82 b 503 -20 528 -39 517 -29 l 472 -3 l 425 10 b 410 17 418 12 413 12 b 409 24 409 20 409 22 b 415 37 409 30 410 36 b 459 50 431 42 446 43 b 547 181 517 78 547 115 b 307 357 547 314 367 353 z',
        },
        timeSig4: {
            x_min: 20,
            x_max: 450,
            y_min: -250,
            y_max: 251,
            ha: 501,
            o: 'm 521 -107 l 521 202 b 504 226 521 213 520 226 b 475 213 491 226 484 223 l 338 48 b 325 14 333 40 325 32 l 325 -107 l 131 -107 b 481 336 246 -9 477 318 l 482 340 b 461 361 482 353 472 361 b 363 359 448 361 389 359 b 261 361 337 359 272 361 b 228 334 248 361 228 357 b 43 -105 228 156 86 -45 l 35 -117 b 35 -118 35 -117 35 -118 l 33 -120 b 29 -137 30 -127 29 -132 b 58 -161 29 -151 40 -161 l 325 -161 l 325 -252 b 268 -302 325 -291 294 -302 b 235 -330 245 -302 235 -315 b 262 -360 235 -344 240 -360 l 569 -360 b 598 -330 583 -360 598 -350 b 566 -301 598 -310 580 -301 b 521 -246 552 -301 521 -292 l 521 -161 l 626 -161 b 648 -134 641 -161 648 -151 b 626 -107 648 -117 642 -107 z',
        },
        timeSig5: {
            x_min: 20,
            x_max: 383,
            y_min: -251,
            y_max: 246,
            ha: 497,
            o: 'm 109 85 b 117 179 109 85 115 166 b 138 197 118 190 125 197 l 144 197 b 285 184 158 194 226 184 b 492 323 485 184 492 300 b 472 353 492 341 488 353 b 295 340 454 353 341 340 b 101 354 249 340 125 351 b 66 330 75 354 68 341 l 50 10 l 50 7 b 79 -14 50 -12 65 -14 b 111 14 94 -14 95 -1 b 209 62 125 29 160 62 b 357 -125 258 62 357 35 b 235 -304 357 -284 272 -304 b 202 -300 223 -304 212 -304 b 184 -279 194 -295 186 -289 b 202 -259 184 -269 194 -264 b 256 -163 235 -239 256 -203 b 144 -50 256 -99 206 -50 b 30 -157 66 -50 35 -107 b 29 -183 29 -166 29 -174 b 284 -361 29 -302 107 -361 b 552 -125 456 -361 552 -255 b 314 112 552 6 445 112 b 122 71 230 112 168 98 b 115 69 120 69 117 69 b 109 79 109 69 109 75 z',
        },
        timeSig6: {
            x_min: 20,
            x_max: 414,
            y_min: -249,
            y_max: 251,
            ha: 500,
            o: 'm 439 120 b 554 229 500 120 554 167 b 553 245 554 235 554 239 b 348 361 539 337 426 361 b 85 209 239 360 137 307 b 29 4 53 148 29 72 l 29 -1 b 73 -200 30 -68 42 -143 b 324 -359 132 -307 203 -359 b 513 -307 389 -359 461 -348 b 596 -137 563 -266 596 -202 b 379 72 596 -24 490 72 b 248 22 333 72 285 55 b 239 19 245 19 242 19 b 226 53 230 19 226 30 b 346 327 230 320 315 327 b 393 305 374 327 393 320 b 357 251 393 285 366 268 b 347 209 350 238 347 223 b 369 150 347 187 354 166 b 439 120 379 131 420 120 z m 320 3 b 405 -158 366 3 405 -69 b 320 -320 405 -248 366 -320 b 236 -158 274 -320 236 -248 b 320 3 236 -69 274 3 z',
        },
        timeSig7: {
            x_min: 20,
            x_max: 421,
            y_min: -250,
            y_max: 249,
            ha: 499,
            o: 'm 606 294 b 582 351 606 333 606 351 b 552 336 580 351 557 346 b 485 236 541 318 521 236 b 262 359 449 236 382 359 b 137 307 179 359 157 325 b 98 281 117 288 108 282 b 60 315 86 281 68 301 b 43 325 58 321 50 325 b 29 308 36 325 29 321 l 29 71 b 45 48 29 71 30 48 b 66 76 56 48 60 60 b 164 196 81 112 99 196 b 374 88 222 196 291 88 b 446 118 415 88 435 109 b 459 124 451 121 456 124 b 469 111 465 124 468 120 b 272 -112 469 71 359 -10 b 173 -315 217 -176 173 -259 b 200 -360 173 -346 173 -360 b 294 -347 226 -360 258 -347 b 412 -360 330 -347 397 -360 b 435 -307 426 -360 435 -348 b 606 288 435 -66 606 140 z',
        },
        timeSig8: {
            x_min: 20,
            x_max: 416,
            y_min: -259,
            y_max: 259,
            ha: 518,
            o: 'm 481 52 b 567 204 533 85 567 132 b 317 373 567 351 356 373 b 36 176 150 373 36 297 b 161 -16 36 76 92 23 b 29 -190 86 -52 29 -99 b 301 -373 29 -315 158 -373 b 599 -117 445 -373 599 -311 b 481 52 599 -30 549 17 z m 406 85 b 168 240 291 125 168 150 b 314 331 168 301 251 331 b 482 207 360 331 482 308 b 406 85 482 150 454 112 z m 295 -325 b 111 -183 199 -325 111 -276 b 225 -48 111 -125 161 -72 b 436 -219 330 -94 436 -124 b 295 -325 436 -276 392 -325 z',
        },
        timeSig9: {
            x_min: 20,
            x_max: 414,
            y_min: -249,
            y_max: 251,
            ha: 500,
            o: 'm 186 -117 b 71 -226 125 -117 71 -164 b 72 -242 71 -232 71 -236 b 276 -359 86 -334 199 -359 b 540 -206 386 -357 488 -304 b 596 -1 572 -145 596 -69 l 596 4 b 552 203 595 71 583 145 b 301 361 492 310 422 361 b 112 310 236 361 164 351 b 29 140 62 269 29 204 b 246 -69 29 27 135 -69 b 377 -19 292 -69 340 -52 b 386 -16 380 -16 383 -16 b 399 -50 395 -16 399 -27 b 279 -324 395 -317 310 -324 b 232 -302 251 -324 232 -317 b 268 -248 232 -282 259 -265 b 278 -206 275 -235 278 -220 b 256 -147 278 -184 271 -163 b 186 -117 246 -128 204 -117 z m 305 0 b 220 161 259 0 220 72 b 305 323 220 251 259 323 b 389 161 351 323 389 251 b 305 0 389 72 351 0 z',
        },
        timeSigCommon: {
            x_min: 5,
            x_max: 424,
            y_min: -249,
            y_max: 251,
            ha: 500,
            o: 'm 336 361 b 7 -14 131 361 7 180 b 101 -262 7 -108 42 -190 b 321 -359 156 -328 235 -359 b 611 -88 573 -359 611 -130 b 589 -56 611 -56 595 -56 b 567 -82 577 -56 567 -58 b 363 -311 567 -268 409 -311 b 184 40 246 -311 184 -197 b 372 327 184 278 294 327 b 477 278 446 327 477 292 b 451 246 477 265 472 246 b 360 140 393 246 360 184 b 471 32 360 58 431 32 b 580 156 471 32 580 36 b 336 361 580 344 363 361 z',
        },
        timeSigCutCommon: {
            x_min: 0,
            x_max: 418,
            y_min: -359,
            y_max: 361,
            ha: 720,
            o: 'm 573 -58 b 559 -82 567 -58 559 -60 b 354 -310 559 -266 400 -310 b 317 -305 340 -310 328 -308 b 302 -284 311 -304 302 -295 l 302 287 b 338 323 302 297 328 321 b 363 324 347 324 356 324 b 468 275 436 324 468 289 b 442 243 468 264 464 243 b 351 137 384 243 351 181 b 462 30 351 56 422 30 b 572 154 462 30 572 35 b 318 357 572 295 441 357 b 302 390 310 359 302 383 l 302 495 b 276 520 302 507 292 520 b 252 495 265 520 252 507 l 252 369 b 235 346 252 359 238 346 l 196 331 b 0 -14 66 275 0 122 b 225 -346 0 -150 86 -310 b 252 -382 235 -350 252 -369 l 252 -492 b 276 -517 252 -505 265 -517 b 302 -492 292 -517 302 -505 l 302 -379 b 318 -359 302 -370 308 -363 b 602 -85 563 -354 602 -130 b 579 -58 600 -58 586 -58 z m 252 -235 b 243 -252 252 -248 248 -252 b 236 -248 240 -252 238 -251 b 177 37 197 -193 177 -96 b 232 259 177 147 200 215 b 236 262 233 262 235 262 b 252 239 243 262 252 251 z',
        },
        timeSigPlus: {
            x_min: -1,
            x_max: 499,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 432 53 b 413 79 420 53 413 65 l 413 340 b 392 360 413 350 405 360 l 325 360 b 305 340 312 360 305 350 l 305 79 b 284 53 305 66 292 53 l 19 53 b -1 33 9 53 -1 46 l -1 -33 b 19 -55 -1 -46 9 -55 l 284 -55 b 305 -75 298 -55 305 -68 l 305 -340 b 325 -360 305 -350 312 -360 l 392 -360 b 413 -340 405 -360 413 -350 l 413 -78 b 433 -55 413 -63 423 -55 l 698 -55 b 719 -33 708 -55 719 -46 l 719 33 b 698 53 719 46 708 53 z',
        },
        timeSigPlusSmall: {
            x_min: -1,
            x_max: 255,
            y_min: -133,
            y_max: 123,
            ha: 256,
            o: 'm 220 20 b 210 33 215 20 210 26 l 210 166 b 200 177 210 171 206 177 l 166 177 b 156 166 160 177 156 171 l 156 33 b 145 20 156 27 150 20 l 10 20 b -1 10 4 20 -1 16 l -1 -24 b 10 -35 -1 -30 4 -35 l 145 -35 b 156 -46 153 -35 156 -42 l 156 -180 b 166 -192 156 -186 160 -192 l 200 -192 b 210 -180 206 -192 210 -186 l 210 -48 b 222 -35 210 -39 216 -35 l 356 -35 b 367 -24 361 -35 367 -30 l 367 10 b 356 20 367 16 361 20 z',
        },
        timeSigMinus: {
            x_min: 0,
            x_max: 448,
            y_min: -35,
            y_max: 40,
            ha: 75,
            o: 'm 645 39 b 619 58 645 49 634 58 l 27 58 b 0 39 12 58 0 49 l 0 -32 b 27 -50 0 -42 12 -50 l 619 -50 b 645 -32 634 -50 645 -42 z',
        },
        timeSigParensRight: {
            x_min: 0,
            x_max: 184,
            y_min: -489,
            y_max: 491,
            ha: 980,
            o: 'm 0 -696 b 3 -704 0 -698 1 -704 b 7 -703 4 -704 6 -704 b 265 1 187 -530 265 -282 b 12 701 265 289 187 531 b 4 707 12 701 6 707 b 0 696 1 707 0 703 l 0 665 b 4 644 0 665 0 651 b 167 1 112 503 167 315 b 6 -641 167 -311 109 -497 b 0 -658 3 -644 0 -651 z',
        },
        timeSigParensRightSmall: {
            x_min: 0,
            x_max: 110,
            y_min: -251,
            y_max: 249,
            ha: 500,
            o: 'm 0 -356 b 3 -361 0 -357 1 -361 b 158 0 112 -272 158 -145 b 4 359 158 147 109 272 b 0 353 3 359 0 357 l 0 338 b 3 327 0 338 0 330 b 91 0 60 246 91 160 b 4 -328 91 -160 62 -249 b 0 -337 3 -330 0 -333 z',
        },
        timeSigParensLeft: {
            x_min: 0,
            x_max: 184,
            y_min: -489,
            y_max: 491,
            ha: 980,
            o: 'm 265 -658 b 259 -641 265 -651 262 -644 b 98 1 156 -497 98 -311 b 261 644 98 315 153 503 b 265 665 265 651 265 665 l 265 696 b 261 707 265 703 264 707 b 253 701 259 707 253 701 b 0 1 78 531 0 289 b 258 -703 0 -282 78 -530 b 262 -704 259 -704 261 -704 b 265 -696 264 -704 265 -698 z',
        },
        timeSigParensLeftSmall: {
            x_min: 0,
            x_max: 110,
            y_min: -251,
            y_max: 249,
            ha: 500,
            o: 'm 158 -337 b 154 -328 158 -333 156 -330 b 68 0 96 -249 68 -160 b 156 327 68 160 98 246 b 158 338 158 330 158 338 l 158 353 b 154 359 158 357 156 359 b 0 0 49 272 0 147 b 156 -361 0 -145 46 -272 b 158 -356 157 -361 158 -357 z',
        },
        noteheadDoubleWhole: {
            x_min: 0,
            x_max: 599,
            y_min: -155,
            y_max: 155,
            ha: 310,
            o: 'm 13 223 b 0 212 4 223 0 217 l 0 -213 b 13 -223 0 -219 4 -223 l 32 -223 b 45 -213 39 -223 45 -219 l 45 212 b 32 223 45 217 39 223 z m 96 223 b 82 212 88 223 82 217 l 82 -213 b 96 -223 82 -219 88 -223 l 114 -223 b 128 -213 121 -223 128 -219 l 128 212 b 114 223 128 217 121 223 z m 747 223 b 733 212 740 223 733 217 l 733 -213 b 747 -223 733 -219 740 -223 l 766 -223 b 780 -213 773 -223 780 -219 l 780 212 b 766 223 780 217 773 223 z m 829 223 b 815 212 824 223 815 217 l 815 -213 b 829 -223 815 -219 824 -223 l 848 -223 b 863 -213 857 -223 863 -219 l 863 212 b 848 223 863 217 857 223 z m 438 180 b 130 1 248 180 130 101 b 423 -180 130 -92 210 -180 b 733 1 657 -180 733 -98 b 438 180 733 104 572 180 z m 469 -145 b 331 -71 409 -145 369 -112 b 284 58 305 -37 284 12 b 400 147 284 131 333 147 b 577 -45 498 147 577 42 b 469 -145 577 -115 533 -145 z',
        },
        noteheadWhole: {
            x_min: 0,
            x_max: 422,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 311 180 b 0 3 120 180 0 101 b 297 -180 0 -94 82 -180 b 608 3 533 -180 608 -98 b 311 180 608 105 445 180 z m 160 91 b 274 148 176 141 229 148 b 452 -45 373 148 452 42 b 386 -141 452 -89 433 -130 b 341 -147 372 -145 356 -147 b 206 -72 289 -147 236 -112 b 156 56 177 -39 156 10 b 160 91 156 68 157 79 z',
        },
        noteheadHalf: {
            x_min: 0,
            x_max: 295,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 140 -180 b 425 60 377 -180 425 13 b 282 180 425 134 366 180 b 0 -60 68 180 0 14 b 140 -180 0 -137 60 -180 z m 108 -125 b 50 -92 78 -125 60 -109 b 42 -63 46 -84 42 -73 b 318 121 42 7 251 121 b 372 91 346 121 361 108 b 380 63 376 82 380 73 b 108 -125 380 1 177 -125 z',
        },
        noteheadBlack: {
            x_min: 0,
            x_max: 295,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 140 -180 b 425 60 268 -180 425 -62 b 285 180 425 134 367 180 b 0 -60 127 180 0 63 b 140 -180 0 -135 62 -180 z',
        },
        noteheadXDoubleWhole: {
            x_min: 0,
            x_max: 546,
            y_min: -155,
            y_max: 155,
            ha: 310,
            o: 'm 43 213 b 30 223 43 217 39 223 l 13 223 b 0 213 6 223 0 217 l 0 -215 b 13 -223 0 -219 6 -223 l 30 -223 b 43 -215 39 -223 43 -219 z m 704 213 b 693 223 704 217 698 223 l 672 223 b 660 213 667 223 660 217 l 660 163 b 634 180 655 173 645 180 l 505 180 b 484 173 498 180 490 177 l 393 95 l 300 173 b 279 180 294 177 287 180 l 151 180 b 125 163 141 180 130 173 l 125 213 b 112 223 125 217 118 223 l 94 223 b 82 213 86 223 82 217 l 82 -215 b 94 -223 82 -219 86 -223 l 112 -223 b 125 -215 118 -223 125 -219 l 125 -163 b 151 -180 130 -173 140 -180 l 279 -180 b 300 -171 287 -180 294 -177 l 393 -95 l 485 -171 b 505 -180 491 -177 498 -180 l 632 -180 b 660 -163 645 -180 655 -173 l 660 -215 b 672 -223 660 -219 667 -223 l 693 -223 b 704 -215 698 -223 704 -219 z m 786 213 b 772 223 786 217 780 223 l 755 223 b 740 213 747 223 740 217 l 740 -215 b 755 -223 740 -219 747 -223 l 772 -223 b 786 -215 780 -223 786 -219 z m 507 -141 l 393 -45 l 276 -141 l 207 -141 l 364 0 l 207 141 l 276 141 l 393 45 l 507 141 l 577 141 l 420 0 l 577 -141 z m 660 -132 l 518 0 l 660 132 z m 125 131 l 266 0 l 125 -131 z',
        },
        noteheadXWhole: {
            x_min: 0,
            x_max: 377,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 272 -95 l 364 -171 b 384 -180 370 -177 377 -180 l 511 -180 b 543 -148 528 -180 543 -164 b 531 -124 543 -140 539 -131 l 412 0 l 531 124 b 541 148 539 131 541 140 b 513 180 541 164 528 180 l 384 180 b 364 171 377 180 370 177 l 272 94 l 179 171 b 158 180 173 177 166 180 l 30 180 b 0 148 16 180 0 164 b 12 124 0 140 4 131 l 132 0 l 12 -124 b 1 -148 4 -131 1 -140 b 32 -180 1 -164 14 -180 l 158 -180 b 179 -171 166 -180 173 -177 z m 386 -141 l 272 -45 l 157 -141 l 88 -141 l 245 0 l 88 141 l 157 141 l 272 45 l 386 141 l 456 141 l 300 0 l 456 -141 z',
        },
        noteheadXHalf: {
            x_min: 0,
            x_max: 334,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 295 180 b 271 170 287 180 278 177 l 209 98 l 115 171 b 95 180 109 177 104 180 l 36 180 b 4 148 19 180 4 164 b 14 124 4 140 7 132 l 140 22 l 7 -127 b 0 -148 3 -131 0 -138 b 32 -180 0 -166 14 -180 l 184 -180 b 209 -170 193 -180 203 -177 l 271 -99 l 363 -171 b 384 -180 370 -176 377 -180 l 445 -180 b 478 -147 461 -180 478 -163 b 465 -125 478 -138 474 -131 l 341 -22 l 474 127 b 481 148 480 131 481 138 b 448 180 481 166 468 180 z m 36 148 l 95 148 l 233 33 l 334 148 l 410 148 l 274 -6 l 445 -148 l 384 -148 l 248 -35 l 147 -148 l 71 -148 l 206 4 z',
        },
        noteheadXBlack: {
            x_min: 0,
            x_max: 290,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 410 -143 l 239 0 l 410 144 b 418 160 415 147 418 154 b 399 180 418 171 408 180 b 389 177 396 180 392 179 l 207 26 l 29 177 b 17 180 26 179 22 180 b 0 161 7 180 0 170 b 7 144 0 156 3 148 l 179 0 l 7 -143 b 0 -158 1 -147 0 -153 b 19 -180 0 -170 7 -180 b 29 -176 23 -180 26 -179 l 207 -24 l 389 -176 b 399 -180 392 -179 396 -180 b 418 -160 410 -180 418 -168 b 410 -143 418 -153 415 -147 z',
        },
        noteheadCircleXDoubleWhole: {
            x_min: 0,
            x_max: 422,
            y_min: -155,
            y_max: 155,
            ha: 310,
            o: 'm 576 223 b 563 213 570 223 563 219 l 563 -215 b 576 -223 563 -219 570 -223 l 595 -223 b 608 -215 602 -223 608 -219 l 608 213 b 595 223 608 219 602 223 z m 497 223 b 484 213 491 223 484 219 l 484 -215 b 497 -223 484 -219 491 -223 l 516 -223 b 528 -215 523 -223 528 -219 l 528 213 b 516 223 528 219 523 223 z m 94 223 b 81 213 86 223 81 219 l 81 -215 b 94 -223 81 -219 86 -223 l 111 -223 b 124 -215 118 -223 124 -219 l 124 213 b 111 223 124 219 118 223 z m 13 223 b 0 213 6 223 0 219 l 0 -215 b 13 -223 0 -219 6 -223 l 30 -223 b 45 -215 37 -223 45 -219 l 45 213 b 30 223 45 219 37 223 z m 304 180 b 127 0 206 180 127 101 b 304 -180 127 -99 206 -180 b 482 0 405 -180 482 -99 b 304 180 482 101 405 180 z m 305 32 l 225 112 b 304 140 248 130 275 140 b 387 112 336 140 364 130 z m 278 1 l 193 -82 b 216 0 199 -59 216 -30 b 194 85 216 33 203 50 z m 334 1 l 418 84 b 389 0 402 50 389 23 b 418 -81 389 -30 409 -60 z m 305 -27 l 389 -109 b 304 -138 364 -128 336 -138 b 222 -109 274 -138 246 -128 z',
        },
        noteheadCircleXWhole: {
            x_min: 0,
            x_max: 249,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 179 180 b 0 0 81 180 0 101 b 179 -180 0 -99 81 -180 b 359 0 278 -180 359 -99 b 179 180 359 101 278 180 z m 180 32 l 99 112 b 179 140 121 130 150 140 b 262 112 210 140 238 130 z m 151 1 l 68 -82 b 86 0 73 -59 86 -30 b 68 85 86 33 78 50 z m 209 1 l 291 84 b 269 0 276 50 269 32 b 291 -79 269 -26 282 -58 z m 180 -27 l 264 -111 b 179 -138 239 -128 210 -138 b 96 -111 148 -138 120 -128 z',
        },
        noteheadCircleXHalf: {
            x_min: 0,
            x_max: 250,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 179 180 b 0 0 81 180 0 101 b 179 -180 0 -99 81 -180 b 360 0 278 -180 360 -99 b 179 180 360 101 278 180 z m 186 37 l 131 92 b 220 124 153 109 189 124 b 262 112 236 124 249 121 z m 215 7 l 291 84 b 304 42 300 71 304 58 b 271 -49 304 10 288 -26 z m 145 -6 l 68 -82 b 56 -42 59 -71 56 -58 b 89 52 56 -9 72 27 z m 174 -33 l 230 -89 b 140 -124 206 -108 171 -124 b 96 -111 122 -124 109 -121 z',
        },
        noteheadCircleX: {
            x_min: 0,
            x_max: 249,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 179 180 b 0 0 81 180 0 99 b 179 -180 0 -99 81 -180 b 359 0 278 -180 359 -99 b 179 180 359 99 278 180 z m 261 112 l 180 30 l 98 112 b 179 138 121 128 148 138 b 261 112 210 138 238 128 z m 317 0 b 292 -82 317 -30 308 -59 l 209 1 l 291 84 b 317 0 307 60 317 30 z m 40 0 b 69 84 40 32 50 60 l 151 1 l 68 -84 b 40 0 49 -60 40 -30 z m 95 -111 l 180 -27 l 262 -111 b 179 -138 239 -128 210 -138 b 95 -111 148 -138 120 -128 z',
        },
        noteheadCircledDoubleWhole: {
            x_min: 0,
            x_max: 603,
            y_min: -218,
            y_max: 213,
            ha: 431,
            o: 'm 770 223 l 752 223 b 737 213 744 223 737 219 l 737 59 b 435 307 710 203 582 307 b 128 48 281 307 156 197 l 128 213 b 115 223 128 219 122 223 l 96 223 b 84 213 89 223 84 219 l 84 -215 b 96 -223 84 -220 89 -223 l 115 -223 b 128 -215 122 -223 128 -220 l 128 -56 b 435 -314 156 -206 282 -314 b 654 -223 517 -314 595 -282 b 737 -66 697 -180 726 -125 l 737 -215 b 752 -223 737 -220 744 -223 l 770 -223 b 785 -215 778 -223 785 -220 l 785 213 b 770 223 785 219 778 223 z m 435 274 b 698 85 556 274 661 194 b 439 180 641 143 534 180 b 176 99 320 180 228 148 b 435 274 217 203 318 274 z m 32 223 l 13 223 b 0 213 6 223 0 219 l 0 -215 b 13 -223 0 -220 6 -223 l 32 -223 b 45 -215 40 -223 45 -220 l 45 213 b 32 223 45 219 40 223 z m 852 223 l 835 223 b 819 213 828 223 819 219 l 819 -215 b 835 -223 819 -220 828 -223 l 852 -223 b 868 -215 861 -223 868 -220 l 868 213 b 852 223 868 219 861 223 z m 580 -46 b 514 -143 580 -91 562 -131 b 472 -148 501 -147 487 -148 b 364 -105 433 -148 395 -131 l 334 -73 b 285 58 307 -39 285 10 b 289 91 285 69 287 79 b 403 145 305 140 357 145 b 580 -46 501 145 580 42 z m 435 -282 b 176 -108 318 -282 217 -209 b 425 -180 222 -151 301 -180 b 691 -109 563 -180 647 -153 b 435 -282 651 -210 550 -282 z',
        },
        noteheadCircledWhole: {
            x_min: 0,
            x_max: 437,
            y_min: -225,
            y_max: 211,
            ha: 436,
            o: 'm 314 304 b 0 -10 140 304 0 164 b 314 -324 0 -183 141 -324 b 629 -10 487 -324 629 -183 b 314 304 629 164 488 304 z m 314 275 b 588 73 441 275 549 193 b 321 180 536 137 420 180 b 48 88 190 180 95 143 b 314 275 85 199 199 275 z m 393 -141 b 350 -147 379 -145 364 -147 b 314 -141 337 -147 325 -145 b 167 55 235 -120 167 -26 b 173 91 167 66 168 79 b 284 145 187 138 239 145 b 459 -48 382 145 459 39 b 393 -141 459 -91 438 -131 z m 314 -294 b 40 -86 187 -294 75 -207 b 305 -180 81 -141 164 -180 b 588 -86 464 -180 550 -143 b 314 -294 554 -209 442 -294 z',
        },
        noteheadCircledHalf: {
            x_min: -18,
            x_max: 311,
            y_min: -162,
            y_max: 167,
            ha: 329,
            o: 'm 212 240 b -26 3 81 240 -26 134 b 212 -233 -26 -127 81 -233 b 448 3 341 -233 448 -127 b 212 240 448 134 341 240 z m 212 220 b 363 160 271 220 324 197 b 281 180 341 173 312 180 b 0 -52 76 180 6 26 b -6 3 -4 -35 -6 -16 b 212 220 -6 122 92 220 z m 50 -92 b 42 -63 46 -84 42 -73 b 173 63 42 -33 73 7 b 317 120 243 105 288 120 b 369 89 344 120 359 107 b 377 62 374 81 377 72 b 248 -66 377 33 348 -1 b 108 -125 183 -109 138 -125 b 50 -92 78 -125 60 -109 z m 212 -215 b 84 -171 164 -215 120 -199 b 138 -180 101 -179 120 -180 b 422 56 372 -180 420 7 b 429 3 426 40 429 22 b 212 -215 429 -117 333 -215 z',
        },
        noteheadCircledBlack: {
            x_min: -21,
            x_max: 321,
            y_min: -171,
            y_max: 167,
            ha: 338,
            o: 'm 216 240 b -30 -3 82 240 -30 131 b 216 -246 -30 -137 82 -246 b 462 -3 351 -246 462 -137 b 216 240 462 131 351 240 z m 216 220 b 372 160 276 220 331 197 b 284 180 348 174 317 180 b 0 -59 127 180 0 65 l 0 -66 b -10 -3 -6 -45 -10 -24 b 216 220 -10 120 92 220 z m 216 -226 b 56 -158 153 -226 96 -200 b 140 -180 79 -171 107 -180 b 425 60 268 -180 425 -60 b 422 88 425 71 425 79 b 442 -3 435 60 442 29 b 216 -226 442 -125 341 -226 z',
        },
        noteheadDoubleWholeSquare: {
            x_min: 0,
            x_max: 416,
            y_min: -190,
            y_max: 198,
            ha: 388,
            o: 'm 563 217 b 528 180 563 192 544 180 l 62 180 b 36 215 52 180 36 192 l 36 268 b 17 285 36 278 27 285 b 0 268 7 285 0 278 l 0 -255 b 17 -274 0 -264 7 -274 b 36 -255 27 -274 36 -264 l 36 -213 b 66 -180 36 -197 53 -180 l 528 -180 b 563 -209 549 -180 563 -196 l 563 -255 b 580 -274 563 -264 570 -274 b 599 -255 590 -274 599 -264 l 599 268 b 580 285 599 278 590 285 b 563 268 570 285 563 278 z m 36 23 b 111 71 36 55 58 71 l 487 71 b 563 30 533 71 563 53 l 563 -22 b 487 -68 563 -53 533 -68 l 117 -68 b 36 -22 66 -68 36 -49 z',
        },
        noteheadSquareWhite: {
            x_min: 0,
            x_max: 313,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 451 -180 l 451 180 l 0 180 l 0 -180 z m 40 -138 l 40 140 l 410 140 l 410 -138 z',
        },
        noteheadSquareBlack: {
            x_min: 0,
            x_max: 313,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 451 -180 l 451 180 l 0 180 l 0 -180 z',
        },
        noteheadTriangleDownDoubleWhole: {
            x_min: 0,
            x_max: 483,
            y_min: -155,
            y_max: 155,
            ha: 310,
            o: 'm 696 213 b 681 223 696 219 690 223 l 662 223 b 648 213 655 223 648 219 l 648 -213 b 662 -223 648 -217 655 -223 l 681 -223 b 696 -213 690 -223 696 -217 z m 619 213 b 605 223 619 219 613 223 l 588 223 b 573 213 580 223 573 219 l 573 174 b 562 180 570 177 566 180 l 134 180 b 122 174 130 180 125 177 l 122 213 b 108 223 122 219 117 223 l 91 223 b 76 213 84 223 76 219 l 76 -213 b 91 -223 76 -217 84 -223 l 108 -223 b 122 -213 117 -223 122 -217 l 122 154 l 334 -173 b 346 -180 337 -177 341 -180 b 357 -173 351 -180 354 -177 l 573 154 l 573 -213 b 588 -223 573 -217 580 -223 l 605 -223 b 619 -213 613 -223 619 -217 z m 32 -223 b 46 -213 40 -223 46 -217 l 46 213 b 32 223 46 219 40 223 l 14 223 b 0 213 7 223 0 219 l 0 -213 b 14 -223 0 -217 7 -223 z m 428 98 b 346 -107 428 17 377 -53 b 265 96 315 -55 265 17 b 289 137 265 109 275 137 l 406 137 b 428 98 419 137 428 111 z',
        },
        noteheadTriangleDownWhole: {
            x_min: 0,
            x_max: 319,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 14 180 b 0 166 6 180 0 173 b 1 158 0 163 1 160 l 216 -173 b 228 -180 219 -177 225 -180 b 239 -173 233 -180 238 -177 l 458 158 b 459 166 458 160 459 163 b 445 180 459 173 454 180 z m 288 137 b 310 98 301 137 310 111 b 228 -108 310 17 259 -55 b 145 96 197 -56 145 17 b 170 137 145 109 157 137 z',
        },
        noteheadTriangleDownHalf: {
            x_min: 0,
            x_max: 285,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 196 -180 b 209 -173 200 -180 206 -177 l 408 157 b 410 166 409 160 410 163 b 396 180 410 173 403 180 l 14 180 b 0 166 4 180 0 173 b 1 158 0 163 0 161 l 183 -173 b 196 -180 184 -174 190 -180 z m 164 138 l 295 138 l 179 -76 l 114 37 z',
        },
        noteheadTriangleDownBlack: {
            x_min: 0,
            x_max: 292,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 207 -180 l 420 180 l 0 180 z',
        },
        noteheadTriangleUpDoubleWhole: {
            x_min: 0,
            x_max: 483,
            y_min: -155,
            y_max: 155,
            ha: 310,
            o: 'm 696 213 b 681 223 696 217 690 223 l 662 223 b 648 213 655 223 648 217 l 648 -213 b 662 -223 648 -219 655 -223 l 681 -223 b 696 -213 690 -223 696 -219 z m 619 213 b 605 223 619 217 613 223 l 588 223 b 573 213 580 223 573 217 l 573 -154 l 357 173 b 346 180 354 177 351 180 b 334 173 341 180 337 177 l 122 -154 l 122 213 b 108 223 122 217 117 223 l 91 223 b 76 213 84 223 76 217 l 76 -213 b 91 -223 76 -219 84 -223 l 108 -223 b 122 -213 117 -223 122 -219 l 122 -174 b 134 -180 125 -177 130 -180 l 562 -180 b 573 -174 566 -180 570 -177 l 573 -213 b 588 -223 573 -219 580 -223 l 605 -223 b 619 -213 613 -223 619 -219 z m 32 223 l 14 223 b 0 213 7 223 0 217 l 0 -213 b 14 -223 0 -219 7 -223 l 32 -223 b 46 -213 40 -223 46 -219 l 46 213 b 32 223 46 217 40 223 z m 428 -98 b 406 -137 428 -111 419 -137 l 289 -137 b 265 -96 275 -137 265 -109 b 346 107 265 -17 315 55 b 428 -98 377 53 428 -17 z',
        },
        noteheadTriangleUpWhole: {
            x_min: 0,
            x_max: 319,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 445 -180 b 459 -166 454 -180 459 -173 b 458 -158 459 -163 458 -160 l 239 173 b 228 180 238 177 233 180 b 216 173 225 180 219 177 l 1 -158 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 6 -180 z m 170 -137 b 145 -96 157 -137 145 -109 b 228 108 145 -17 197 56 b 310 -98 259 55 310 -17 b 288 -137 310 -111 301 -137 z',
        },
        noteheadTriangleUpHalf: {
            x_min: 0,
            x_max: 285,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 215 180 b 202 173 210 180 204 177 l 3 -157 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 7 -180 l 396 -180 b 410 -166 406 -180 410 -173 b 409 -158 410 -163 410 -161 l 228 173 b 215 180 226 174 220 180 z m 246 -138 l 115 -138 l 232 76 l 297 -37 z',
        },
        noteheadTriangleUpBlack: {
            x_min: 0,
            x_max: 293,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 422 -180 l 207 180 l 0 -180 z',
        },
        noteheadSlashedDoubleWhole1: {
            x_min: 0,
            x_max: 596,
            y_min: -179,
            y_max: 168,
            ha: 347,
            o: 'm 618 135 l 697 206 b 704 222 703 210 704 216 b 698 236 704 226 703 232 b 683 242 694 239 688 242 b 670 238 677 242 674 240 l 575 153 b 435 180 531 168 481 180 b 128 0 246 180 128 98 b 236 -148 128 -58 160 -114 l 153 -222 b 145 -238 148 -226 145 -232 b 151 -252 145 -242 148 -248 b 167 -258 156 -256 161 -258 b 181 -253 171 -258 177 -256 l 282 -164 b 420 -180 320 -173 366 -180 b 729 0 654 -180 729 -98 b 618 135 729 55 681 104 z m 114 223 l 95 223 b 82 212 88 223 82 217 l 82 -215 b 95 -223 82 -219 88 -223 l 114 -223 b 127 -215 121 -223 127 -219 l 127 212 b 114 223 127 217 121 223 z m 32 223 l 13 223 b 0 212 6 223 0 217 l 0 -215 b 13 -223 0 -219 6 -223 l 32 -223 b 45 -215 39 -223 45 -219 l 45 212 b 32 223 45 217 39 223 z m 844 223 l 825 223 b 811 212 819 223 811 217 l 811 -215 b 825 -223 811 -219 819 -223 l 844 -223 b 858 -215 851 -223 858 -219 l 858 212 b 844 223 858 217 851 223 z m 763 223 l 743 223 b 730 212 736 223 730 217 l 730 -215 b 743 -223 730 -219 736 -223 l 763 -223 b 776 -215 769 -223 776 -219 l 776 212 b 763 223 776 217 769 223 z m 282 56 b 285 89 282 68 284 79 b 399 144 301 137 354 144 b 510 95 441 144 480 124 l 327 -68 b 282 56 301 -35 282 13 z m 572 -72 b 508 -141 564 -108 544 -132 b 467 -147 495 -145 481 -147 b 360 -104 428 -147 389 -128 l 356 -98 l 537 63 b 575 -46 560 30 575 -9 b 572 -72 575 -55 573 -65 z',
        },
        noteheadSlashedWhole1: {
            x_min: -22,
            x_max: 433,
            y_min: -157,
            y_max: 148,
            ha: 305,
            o: 'm 484 140 b 308 180 431 166 367 180 b 0 1 118 180 0 99 b 73 -128 0 -48 22 -95 l -22 -190 b -32 -206 -27 -194 -32 -200 b -27 -217 -32 -210 -30 -215 b -12 -226 -23 -223 -17 -226 b 0 -223 -7 -226 -4 -225 l 112 -150 b 294 -180 157 -168 217 -180 b 602 1 526 -180 602 -98 b 523 118 602 48 570 86 l 613 177 b 624 193 619 181 624 187 b 619 204 624 197 622 200 b 603 213 615 209 609 213 b 592 209 599 213 596 212 z m 190 -52 b 154 56 170 -20 154 19 b 160 91 154 68 156 79 b 271 147 174 138 226 147 b 396 82 321 147 364 121 z m 419 50 b 446 -48 436 19 446 -14 b 337 -147 446 -120 402 -147 b 301 -141 327 -147 314 -144 b 235 -104 276 -134 253 -120 b 215 -84 226 -98 220 -91 z',
        },
        noteheadSlashedHalf1: {
            x_min: -67,
            x_max: 386,
            y_min: -142,
            y_max: 160,
            ha: 302,
            o: 'm 552 222 b 536 230 549 228 543 230 b 524 228 533 230 528 230 l 389 140 b 281 180 364 164 327 180 b 0 -60 65 180 0 13 b 7 -105 0 -78 3 -92 l -88 -167 b -96 -184 -94 -171 -96 -177 b -94 -194 -96 -187 -95 -192 b -76 -204 -89 -202 -84 -204 b -66 -202 -73 -204 -69 -203 l 29 -140 b 137 -180 55 -167 92 -180 b 420 59 374 -180 420 13 b 412 107 420 76 419 92 l 546 194 b 556 210 552 197 556 204 b 552 222 556 213 554 217 z m 315 120 b 347 112 328 120 338 117 l 46 -82 b 42 -63 43 -76 42 -69 b 315 120 42 6 248 120 z m 108 -124 b 69 -114 91 -124 79 -120 l 372 81 b 376 63 374 75 376 69 b 108 -124 376 0 174 -124 z',
        },
        noteheadSlashedBlack1: {
            x_min: -80,
            x_max: 375,
            y_min: -165,
            y_max: 167,
            ha: 332,
            o: 'm 518 240 b 507 236 514 240 510 239 l 384 148 b 284 180 359 168 324 180 b 0 -62 127 180 0 63 b 13 -115 0 -82 4 -99 l -107 -202 b -115 -217 -111 -204 -115 -212 b -111 -229 -115 -222 -114 -225 b -95 -238 -108 -235 -101 -238 b -84 -235 -91 -238 -86 -236 l 39 -148 b 140 -180 63 -170 99 -180 b 425 59 268 -180 425 -62 b 410 117 425 81 420 101 l 530 203 b 540 219 536 207 540 213 b 518 240 540 229 528 240 z',
        },
        noteheadSlashedDoubleWhole2: {
            x_min: 0,
            x_max: 596,
            y_min: -178,
            y_max: 169,
            ha: 347,
            o: 'm 729 0 b 435 180 729 102 569 180 b 278 156 374 180 321 170 l 184 239 b 170 243 181 242 176 243 b 154 238 166 243 158 240 b 150 223 151 233 150 228 b 156 207 150 217 153 212 l 233 138 b 128 0 167 107 128 56 b 420 -180 128 -94 210 -180 b 575 -164 482 -180 533 -174 l 672 -252 b 687 -256 677 -255 681 -256 b 703 -251 691 -256 698 -255 b 707 -236 706 -246 707 -240 b 701 -220 707 -230 706 -225 l 619 -150 b 729 0 700 -117 729 -62 z m 114 223 l 95 223 b 82 213 88 223 82 217 l 82 -213 b 95 -223 82 -219 88 -223 l 114 -223 b 127 -213 121 -223 127 -219 l 127 213 b 114 223 127 217 121 223 z m 32 223 l 13 223 b 0 213 6 223 0 217 l 0 -213 b 13 -223 0 -219 6 -223 l 32 -223 b 45 -213 39 -223 45 -219 l 45 213 b 32 223 45 217 39 223 z m 844 223 l 825 223 b 811 213 819 223 811 217 l 811 -213 b 825 -223 811 -219 819 -223 l 844 -223 b 858 -213 851 -223 858 -219 l 858 213 b 844 223 858 217 851 223 z m 763 223 l 743 223 b 730 213 736 223 730 217 l 730 -213 b 743 -223 730 -219 736 -223 l 763 -223 b 776 -213 769 -223 776 -219 l 776 213 b 763 223 776 217 769 223 z m 312 124 b 399 144 336 141 369 144 b 575 -46 495 144 575 40 b 563 -98 575 -65 570 -81 z m 508 -141 b 467 -147 495 -145 481 -147 b 360 -104 428 -147 389 -128 b 330 -72 350 -95 340 -82 b 282 56 304 -37 282 10 b 285 89 282 68 284 79 b 536 -130 287 89 304 75 z',
        },
        noteheadSlashedWhole2: {
            x_min: -18,
            x_max: 436,
            y_min: -154,
            y_max: 151,
            ha: 305,
            o: 'm 531 -128 b 602 1 582 -96 602 -49 b 308 180 602 104 441 180 b 114 144 230 180 164 166 l 4 215 b -6 217 1 217 -3 217 b -22 209 -13 217 -19 215 b -26 197 -24 204 -26 200 b -16 181 -26 192 -22 184 l 75 121 b 0 1 27 91 0 49 b 294 -180 0 -94 82 -180 b 491 -150 379 -180 444 -168 l 598 -219 b 608 -222 600 -222 605 -222 b 624 -213 615 -222 621 -219 b 628 -202 626 -209 628 -206 b 618 -186 628 -196 624 -189 z m 168 108 b 271 147 190 141 233 147 b 446 -48 369 147 446 40 b 445 -72 446 -56 446 -63 z m 154 69 l 429 -109 b 382 -141 419 -125 402 -135 b 337 -147 367 -144 351 -147 b 301 -141 327 -147 314 -144 b 235 -104 276 -134 253 -120 b 203 -72 223 -94 213 -82 b 154 58 177 -39 154 12 z',
        },
        noteheadSlashedHalf2: {
            x_min: -73,
            x_max: 380,
            y_min: -134,
            y_max: 168,
            ha: 302,
            o: 'm 537 -156 l 383 -58 b 422 60 413 -9 422 39 b 281 180 422 134 364 180 b 101 127 203 180 144 157 l -75 239 b -85 242 -78 242 -82 242 b -102 233 -92 242 -98 239 b -105 222 -104 229 -105 225 b -95 206 -105 216 -102 209 l 69 99 b 0 -59 19 46 0 -20 b 138 -180 0 -135 60 -180 b 359 -88 248 -180 317 -138 l 516 -190 b 527 -193 520 -192 524 -193 b 543 -183 534 -193 540 -190 b 547 -173 546 -180 547 -176 b 537 -156 547 -166 543 -160 z m 367 92 b 377 63 374 82 377 73 b 318 -14 377 43 361 20 l 184 72 b 317 121 248 108 289 121 b 367 92 344 121 357 109 z m 248 -66 b 108 -124 181 -108 138 -124 b 50 -92 78 -124 60 -109 b 42 -63 46 -84 42 -73 b 145 49 42 -35 68 0 l 285 -40 b 248 -66 274 -49 261 -56 z',
        },
        noteheadSlashedBlack2: {
            x_min: -79,
            x_max: 376,
            y_min: -164,
            y_max: 168,
            ha: 332,
            o: 'm 531 -200 l 363 -78 b 425 59 402 -37 425 10 b 285 180 425 132 367 180 b 92 114 210 180 144 154 l -81 238 b -94 242 -85 240 -89 242 b -111 232 -99 242 -107 238 b -114 220 -112 229 -114 225 b -105 204 -114 215 -111 207 l 62 85 b 0 -62 23 43 0 -9 b 140 -180 0 -137 62 -180 b 331 -108 204 -180 275 -153 l 507 -233 b 520 -236 511 -236 517 -236 b 537 -228 527 -236 533 -233 b 541 -216 540 -225 541 -220 b 531 -200 541 -210 537 -203 z',
        },
        noteheadDiamondDoubleWhole: {
            x_min: 0,
            x_max: 432,
            y_min: -155,
            y_max: 155,
            ha: 310,
            o: 'm 592 223 b 580 215 585 223 580 219 l 580 -215 b 592 -223 580 -219 585 -223 l 608 -223 b 622 -215 615 -223 622 -219 l 622 215 b 608 223 622 219 615 223 z m 517 223 b 504 215 510 223 504 219 l 504 -215 b 517 -223 504 -219 510 -223 l 533 -223 b 544 -215 540 -223 544 -219 l 544 215 b 533 223 544 219 540 223 z m 246 179 b 240 180 243 179 242 180 b 232 176 236 180 233 179 l 118 22 b 117 17 117 20 117 19 l 117 215 b 104 223 117 219 111 223 l 88 223 b 75 215 81 223 75 219 l 75 -215 b 88 -223 75 -219 81 -223 l 104 -223 b 117 -215 111 -223 117 -219 l 117 14 l 118 14 b 122 7 118 12 120 10 l 374 -179 b 382 -180 376 -180 379 -180 b 390 -177 384 -180 387 -180 l 503 -23 l 503 -17 b 500 -9 503 -13 503 -10 z m 12 223 b 0 215 4 223 0 219 l 0 -215 b 12 -223 0 -219 4 -223 l 29 -223 b 40 -215 36 -223 40 -219 l 40 215 b 29 223 40 219 36 223 z m 183 39 b 179 46 181 39 179 43 b 229 112 226 112 228 112 b 236 109 229 112 233 111 l 436 -39 b 439 -46 438 -39 439 -42 b 390 -112 393 -111 392 -112 b 383 -109 389 -112 386 -111 z',
        },
        noteheadDiamondWhole: {
            x_min: 0,
            x_max: 270,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 386 -23 b 389 -16 387 -20 389 -19 b 383 -7 389 -13 386 -9 l 130 179 b 122 180 128 180 125 180 b 115 177 120 180 117 180 l 3 23 b 0 17 1 20 0 19 b 4 7 0 16 3 10 l 258 -179 b 264 -180 261 -179 262 -180 b 272 -176 268 -180 271 -179 z m 66 40 b 62 48 65 42 62 45 l 109 111 b 112 112 109 112 111 112 b 118 111 115 112 117 111 l 320 -37 b 324 -46 323 -39 324 -42 b 275 -111 278 -111 276 -111 b 268 -108 272 -111 271 -109 z',
        },
        noteheadDiamondHalf: {
            x_min: 0,
            x_max: 251,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 359 -7 b 361 0 360 -6 361 -3 b 359 7 361 3 360 4 l 189 177 b 180 180 186 179 183 180 b 174 177 179 180 176 179 l 4 7 b 0 0 1 4 0 3 b 4 -7 0 -3 1 -6 l 174 -177 b 180 -180 176 -180 179 -180 b 189 -177 183 -180 186 -180 z m 266 26 b 138 -71 266 -12 176 -71 b 96 -50 121 -71 108 -63 b 88 -24 89 -43 88 -32 b 215 73 88 13 177 73 b 266 26 238 73 266 50 z',
        },
        noteheadDiamondBlack: {
            x_min: 0,
            x_max: 250,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 357 -6 b 360 1 359 -4 360 -1 b 357 9 360 4 359 7 l 189 177 b 180 180 187 179 184 180 b 171 177 177 180 173 179 l 3 9 b 0 1 0 6 0 4 b 4 -7 0 -1 1 -4 l 173 -177 b 180 -180 176 -180 177 -180 b 187 -177 181 -180 184 -180 z',
        },
        noteheadParenthesis: {
            x_min: -73,
            x_max: 368,
            y_min: -180,
            y_max: 182,
            ha: 362,
            o: 'm 52 -249 b -30 -144 3 -212 -14 -190 b -52 4 -45 -102 -52 -56 b 52 252 -52 118 -36 179 l 46 262 b -105 3 -49 197 -105 124 b 45 -259 -105 -109 -48 -200 z m 382 -259 b 530 3 474 -202 530 -108 b 379 262 530 122 474 200 l 373 252 b 478 4 462 180 478 118 b 456 -144 478 -56 471 -102 b 373 -249 439 -190 422 -212 z',
        },
        noteheadParenthesisRight: {
            x_min: -36,
            x_max: 73,
            y_min: -181,
            y_max: 181,
            ha: 362,
            o: 'm -43 -261 b 105 1 49 -203 105 -109 b -46 261 105 121 49 199 l -52 251 b 53 3 37 179 53 117 b 32 -145 53 -58 46 -104 b -52 -251 14 -192 -3 -213 z',
        },
        noteheadParenthesisLeft: {
            x_min: 0,
            x_max: 109,
            y_min: -181,
            y_max: 181,
            ha: 362,
            o: 'm 157 -251 b 75 -145 108 -213 91 -192 b 53 3 60 -104 53 -58 b 157 251 53 117 69 177 l 151 261 b 0 1 56 196 0 122 b 150 -261 0 -111 58 -202 z',
        },
        noteheadMoonBlack: {
            x_min: 0,
            x_max: 315,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 228 -180 b 454 0 343 -180 454 -130 l 454 180 l 0 180 l 0 0 b 228 -180 0 -131 112 -180 z',
        },
        noteheadTriangleLeftBlack: {
            x_min: 0,
            x_max: 339,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 488 -180 l 0 180 l 0 -180 z',
        },
        noteheadTriangleRightBlack: {
            x_min: 0,
            x_max: 339,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 488 180 l 0 -180 l 488 -180 z',
        },
        noteheadTriangleRoundDownBlack: {
            x_min: 0,
            x_max: 278,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 200 -180 l 400 112 l 383 124 b 199 180 327 161 264 180 b 16 124 135 180 73 161 l 0 112 z',
        },
        augmentationDot: {
            x_min: 0,
            x_max: 100,
            y_min: -50,
            y_max: 50,
            ha: 100,
            o: 'm 144 0 b 72 72 144 40 112 72 b 0 0 32 72 0 40 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 z',
        },
        tremolo1: {
            x_min: -150,
            x_max: 150,
            y_min: -93,
            y_max: 94,
            ha: 187,
            o: 'm 216 -45 l 216 135 l -216 46 l -216 -134 z',
        },
        flag8thUp: {
            x_min: 0,
            x_max: 264,
            y_min: -810.1921176545985,
            y_max: 9,
            ha: 819.1921176545985,
            o: 'm 343 -1138 b 380 -888 343 -1138 380 -1001 b 215 -395 380 -708 305 -539 b 58 -19 141 -281 81 -157 b 27 13 53 4 42 13 b 0 -9 12 13 0 9 l 0 -353 b 284 -688 95 -370 232 -566 b 318 -904 305 -737 318 -819 b 284 -1102 318 -969 308 -1037 b 279 -1123 281 -1110 279 -1117 b 302 -1165 279 -1146 294 -1159 b 343 -1138 311 -1171 336 -1162 z',
        },
        flag8thDown: {
            x_min: 0,
            x_max: 306,
            y_min: -14,
            y_max: 808,
            ha: 822,
            o: 'm 346 1094 b 376 897 366 1034 376 962 b 318 642 376 812 340 691 b 0 340 265 521 193 405 l 0 1 b 23 -20 0 -13 12 -20 b 58 12 36 -20 55 -12 b 262 387 82 148 189 274 b 441 881 353 530 441 701 b 400 1142 441 994 412 1096 b 377 1164 396 1158 387 1164 b 346 1094 356 1164 331 1136 z',
        },
        flag16thUp: {
            x_min: 0,
            x_max: 279,
            y_min: -813,
            y_max: 2,
            ha: 815,
            o: 'm 392 -1146 b 402 -988 397 -1139 402 -1057 l 402 -956 b 360 -783 402 -896 386 -837 b 359 -770 360 -779 359 -776 b 360 -760 359 -768 359 -765 b 396 -577 364 -752 396 -665 b 392 -526 396 -559 395 -543 b 236 -275 377 -428 340 -387 b 53 -16 158 -192 78 -168 b 24 3 50 0 33 3 b 0 -12 16 3 0 -1 l 0 -570 l 7 -570 b 298 -778 96 -573 199 -576 b 344 -992 331 -847 344 -917 b 333 -1120 344 -1034 340 -1077 b 331 -1133 331 -1126 331 -1129 b 363 -1171 331 -1152 343 -1171 b 392 -1146 373 -1171 383 -1165 z m 301 -661 b 223 -562 278 -625 253 -596 b 59 -331 156 -484 89 -449 b 58 -327 58 -330 58 -328 b 78 -312 58 -321 66 -312 l 89 -312 b 302 -464 177 -312 255 -393 b 341 -592 328 -501 341 -546 b 340 -621 341 -602 341 -611 b 330 -658 337 -632 337 -647 b 311 -667 328 -662 318 -667 b 301 -661 307 -667 304 -665 z',
        },
        flag16thDown: {
            x_min: 0,
            x_max: 290.8951581511223,
            y_min: -9,
            y_max: 812.0064,
            ha: 821.0064,
            o: 'm 346 1132 b 312 768 367 1011 367 880 b 7 559 213 566 96 562 l 0 559 l 0 1 b 24 -13 0 -6 10 -13 b 53 6 35 -13 50 -10 b 406 516 88 228 372 289 b 410 567 409 531 410 549 b 374 750 410 655 379 742 b 373 760 373 753 373 756 b 374 773 373 766 374 769 b 405 1138 426 881 428 1022 b 370 1169 397 1171 387 1169 b 346 1132 353 1168 341 1156 z m 325 657 b 344 647 333 657 343 652 b 354 611 351 636 351 622 b 356 582 356 600 356 590 b 317 454 356 534 343 491 b 89 302 269 383 177 302 l 78 302 b 58 317 66 302 58 310 b 59 321 58 318 58 320 b 238 552 89 439 170 472 b 315 651 268 585 292 613 b 325 657 318 655 321 657 z',
        },
        flag32ndUp: {
            x_min: 0,
            x_max: 261,
            y_min: -812,
            y_max: 149,
            ha: 961,
            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 366 -289 369 -315 369 -302 b 220 -58 350 -202 317 -163 b 46 187 148 20 71 43 b 20 215 45 200 35 215 b 0 197 12 215 0 207 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 56 -390 147 -527 88 -495 b 73 -367 53 -380 60 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',
        },
        flag32ndDown: {
            x_min: 0,
            x_max: 273,
            y_min: -172,
            y_max: 812,
            ha: 984,
            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -229 b 20 -248 0 -242 9 -248 b 48 -219 35 -248 46 -232 b 229 36 72 -69 154 -46 b 380 278 330 145 364 186 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z',
        },
        flag64thUp: {
            x_min: 0,
            x_max: 261,
            y_min: -812,
            y_max: 347,
            ha: 1159,
            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 220 228 350 84 317 122 b 46 472 148 305 71 328 b 20 500 45 485 32 500 b 0 482 10 500 0 492 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 58 187 148 20 82 43 b 56 193 58 189 58 192 b 300 24 138 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 b 73 -367 52 -376 63 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',
        },
        flag64thDown: {
            x_min: 0,
            x_max: 273,
            y_min: -376,
            y_max: 812,
            ha: 1188,
            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -523 b 20 -541 0 -534 9 -541 b 48 -513 35 -541 46 -526 b 229 -258 72 -363 154 -340 b 380 -16 330 -148 364 -108 b 384 27 383 -1 384 13 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z m 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 z',
        },
        flag128thUp: {
            x_min: 0,
            x_max: 261,
            y_min: -812,
            y_max: 533,
            ha: 1345,
            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 341 75 360 26 353 50 b 369 222 354 111 369 167 b 366 264 369 236 369 251 b 220 495 350 351 317 390 b 46 740 148 573 71 596 b 22 768 45 753 35 768 b 0 750 10 768 0 760 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 292 b 321 223 315 264 321 242 b 317 193 321 212 318 203 b 301 135 314 180 308 158 b 220 228 281 161 255 190 b 55 461 151 304 79 327 b 300 292 134 461 220 426 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 56 187 148 20 81 43 b 55 193 56 189 56 192 b 300 24 137 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 b 73 -367 53 -376 62 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',
        },
        flag128thDown: {
            x_min: 0,
            x_max: 273,
            y_min: -580,
            y_max: 812,
            ha: 1392,
            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -816 b 20 -835 0 -828 7 -835 b 48 -806 33 -835 46 -819 b 229 -552 72 -657 154 -634 b 380 -310 330 -442 364 -402 b 384 -266 383 -295 384 -281 b 351 -105 384 -206 366 -143 b 384 27 372 -66 384 -16 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z m 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 z m 330 -238 b 334 -268 331 -248 334 -256 b 311 -340 334 -287 328 -310 b 56 -516 229 -478 137 -516 b 229 -258 75 -380 145 -348 b 311 -166 264 -220 289 -192 z',
        },
        accidentalFlat: {
            x_min: 0,
            x_max: 226,
            y_min: -175,
            y_max: 439,
            ha: 614,
            o: 'm 17 -245 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 82 -225 117 -186 b 325 82 281 -72 325 16 b 196 220 325 164 262 216 b 117 196 171 220 137 209 b 85 176 108 189 92 176 b 78 177 82 176 81 176 b 62 202 68 181 62 192 b 72 608 63 233 72 579 b 45 632 72 624 59 632 b 0 592 24 632 1 618 b 17 -245 0 592 6 -230 z m 68 -117 b 63 27 68 -117 63 -30 b 66 73 63 50 65 68 b 167 144 76 102 134 144 b 226 60 209 144 226 96 b 98 -134 226 -17 160 -95 b 84 -138 92 -137 88 -138 b 68 -117 71 -138 68 -124 z',
        },
        accidentalNatural: {
            x_min: 0,
            x_max: 168,
            y_min: -335,
            y_max: 341,
            ha: 676,
            o: 'm 203 261 b 197 259 200 261 199 259 b 68 226 197 259 105 226 b 53 233 59 226 53 228 l 53 474 b 36 491 53 484 45 491 l 17 491 b 0 474 7 491 0 484 l 0 -268 b 13 -281 0 -276 4 -281 l 16 -279 b 22 -278 17 -279 20 -279 b 164 -235 42 -269 122 -235 b 189 -251 179 -235 189 -239 l 189 -465 b 206 -482 189 -475 196 -482 l 225 -482 b 242 -465 233 -482 242 -475 l 242 258 b 230 269 242 265 236 269 b 225 268 229 269 226 269 z m 53 56 b 176 114 53 76 141 114 b 189 107 184 114 189 112 l 189 -42 b 71 -101 189 -68 107 -101 b 53 -92 60 -101 53 -98 z',
        },
        accidentalSharp: {
            x_min: 0,
            x_max: 249,
            y_min: -348,
            y_max: 350,
            ha: 698,
            o: 'm 341 170 b 359 194 351 174 359 186 l 359 297 b 348 308 359 304 354 308 b 341 307 346 308 344 308 b 305 294 341 307 312 295 b 285 312 295 294 285 301 l 285 488 b 265 504 285 497 276 504 b 242 488 251 504 242 497 l 242 301 b 223 259 240 287 236 268 b 132 223 206 249 157 229 b 115 252 120 223 115 240 l 115 425 b 95 441 115 433 105 441 b 72 425 81 441 72 433 l 72 230 b 55 192 72 210 63 196 b 17 176 46 187 17 176 b 0 153 7 173 0 161 l 0 50 b 13 37 0 42 4 37 l 16 39 b 50 53 17 39 39 48 l 52 55 b 72 29 63 55 72 40 l 72 -114 b 56 -147 72 -130 65 -143 b 17 -163 48 -150 17 -163 b 0 -186 7 -166 0 -177 l 0 -288 b 13 -301 0 -297 4 -301 l 16 -300 b 50 -287 17 -300 37 -291 b 55 -285 52 -285 53 -285 b 72 -308 65 -285 72 -301 l 72 -485 b 91 -501 72 -494 81 -501 b 115 -485 105 -501 115 -494 l 115 -285 b 130 -253 115 -266 122 -256 l 217 -217 b 219 -217 217 -217 219 -217 l 222 -216 b 242 -242 235 -216 242 -233 l 242 -422 b 261 -438 242 -431 251 -438 b 285 -422 276 -438 285 -431 l 285 -217 b 301 -184 285 -206 291 -189 b 341 -168 311 -180 341 -168 b 359 -144 351 -164 359 -153 l 359 -42 b 348 -30 359 -35 354 -30 b 341 -32 346 -30 344 -30 l 304 -46 b 285 -20 295 -46 285 -37 l 285 114 b 304 156 285 124 292 151 z m 242 -65 b 132 -122 233 -94 166 -122 b 115 -115 124 -122 117 -120 b 111 -43 112 -109 111 -78 b 115 63 111 1 112 52 b 220 118 118 88 184 118 b 242 109 230 118 239 115 b 248 27 245 102 248 66 b 242 -65 248 -12 245 -52 z',
        },
        accidentalDoubleSharp: {
            x_min: 0,
            x_max: 247,
            y_min: -125,
            y_max: 127,
            ha: 252,
            o: 'm 274 -46 b 206 1 258 -37 206 -9 b 274 50 206 22 253 43 b 278 50 275 50 276 50 l 287 49 b 346 63 304 49 331 52 b 356 115 353 71 356 92 b 292 183 356 174 351 183 b 233 173 266 183 240 180 b 226 117 228 168 226 143 b 179 49 219 101 196 49 b 130 117 158 49 135 96 b 118 173 130 141 125 167 b 66 183 112 180 89 183 b 7 173 42 183 16 180 b 0 120 3 170 0 145 b 7 63 0 94 3 68 b 68 49 17 55 43 49 b 82 50 73 49 78 50 b 150 3 98 42 150 13 b 84 -46 150 -16 104 -39 l 69 -46 b 7 -56 43 -46 16 -49 b 0 -111 3 -60 0 -85 b 7 -166 0 -137 3 -163 b 65 -180 17 -174 40 -180 b 118 -166 86 -180 109 -176 b 130 -111 127 -158 130 -134 b 132 -105 130 -109 131 -107 b 177 -45 141 -85 158 -45 b 226 -111 196 -45 220 -91 b 233 -166 226 -137 228 -161 b 291 -180 243 -174 266 -180 b 356 -114 346 -180 356 -166 b 346 -56 356 -89 351 -63 b 288 -46 338 -49 312 -46 z',
        },
        accidentalDoubleFlat: {
            x_min: 0,
            x_max: 411,
            y_min: -175,
            y_max: 437,
            ha: 612,
            o: 'm 452 217 b 384 194 426 217 408 207 b 350 176 374 189 363 176 b 343 177 347 176 344 176 b 328 202 333 180 328 190 b 337 606 328 232 337 579 b 310 629 337 622 324 629 b 265 592 291 629 268 616 b 269 194 265 592 266 395 b 196 217 248 209 223 217 l 187 217 b 120 194 160 217 143 207 b 85 176 108 189 98 176 b 78 177 82 176 81 176 b 62 202 68 180 62 190 b 72 606 62 232 72 579 b 45 629 72 622 59 629 b 0 592 24 629 1 616 b 17 -245 0 592 7 -232 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 84 -226 120 -186 b 274 -50 206 -124 246 -85 b 284 -245 276 -158 279 -240 b 295 -252 288 -251 292 -252 b 304 -249 300 -252 304 -249 b 416 -163 348 -226 383 -186 b 592 82 546 -72 592 16 b 461 217 592 163 528 216 z m 96 -134 b 84 -138 92 -137 86 -138 b 68 -115 72 -138 68 -124 b 63 26 68 -115 63 -30 b 66 72 63 49 65 66 b 168 144 75 101 134 144 b 226 59 212 144 226 95 b 96 -134 226 -22 161 -94 z m 361 -134 b 348 -138 356 -137 351 -138 b 333 -115 337 -138 333 -124 b 328 39 333 -115 328 -16 b 330 72 328 55 328 68 b 433 144 338 101 399 144 b 468 130 448 144 459 140 b 490 59 481 112 490 88 b 361 -134 490 -22 426 -94 z',
        },
        accidentalParensLeft: {
            x_min: 0,
            x_max: 141,
            y_min: -248,
            y_max: 247,
            ha: 495,
            o: 'm 203 331 l 203 351 b 202 356 203 354 203 356 b 0 0 60 281 0 140 b 199 -357 0 -144 60 -269 b 203 -354 200 -357 203 -356 l 203 -333 b 200 -327 203 -330 202 -328 b 86 0 118 -253 86 -160 b 200 324 86 158 120 251 b 203 331 202 325 203 327 z',
        },
        accidentalParensRight: {
            x_min: 0,
            x_max: 141,
            y_min: -248,
            y_max: 247,
            ha: 495,
            o: 'm 0 331 b 3 324 0 327 1 325 b 117 0 84 251 117 158 b 3 -327 117 -160 85 -253 b 0 -333 1 -328 0 -330 l 0 -354 b 4 -357 0 -356 3 -357 b 203 0 143 -269 203 -144 b 1 356 203 140 143 281 b 0 351 0 356 0 354 z',
        },
        accidentalQuarterToneFlatStein: {
            x_min: 1,
            x_max: 227,
            y_min: -175,
            y_max: 439,
            ha: 614,
            o: 'm 310 -245 b 327 592 321 -230 327 592 b 282 632 325 618 302 632 b 255 608 268 632 255 624 b 265 202 255 579 264 233 b 249 177 265 192 259 181 b 242 176 246 176 245 176 b 210 196 235 176 219 189 b 131 220 190 209 156 220 b 1 85 65 216 1 164 b 174 -161 1 16 46 -72 b 288 -249 210 -186 245 -225 b 297 -252 288 -249 292 -252 b 310 -245 301 -252 305 -251 z m 259 -117 b 243 -138 259 -124 256 -138 b 229 -134 239 -138 235 -137 b 101 60 167 -95 101 -17 b 160 144 101 96 118 144 b 261 73 193 144 251 102 b 264 27 262 68 264 50 b 259 -117 264 -30 259 -117 z',
        },
        accidentalThreeQuarterTonesFlatZimmermann: {
            x_min: 1,
            x_max: 466,
            y_min: -175,
            y_max: 439,
            ha: 614,
            o: 'm 363 -245 b 376 -252 367 -251 372 -252 b 384 -249 380 -252 384 -249 b 497 -161 428 -226 464 -186 b 671 84 625 -72 671 16 b 541 220 671 164 606 217 b 513 217 531 220 523 219 b 464 196 495 212 480 206 b 431 176 452 189 442 176 b 423 177 428 176 426 176 b 408 202 413 180 408 190 l 419 608 b 392 632 419 625 406 632 b 346 592 372 632 347 618 b 363 -245 346 592 351 -230 z m 289 -249 b 297 -252 289 -249 292 -252 b 310 -245 300 -252 305 -251 b 328 592 321 -230 328 592 b 282 631 327 618 302 631 b 255 608 268 631 255 624 l 266 202 b 251 177 266 190 261 180 b 243 176 248 176 246 176 b 210 196 232 176 222 189 b 164 216 196 204 180 210 l 163 217 b 132 220 151 219 143 220 b 1 84 65 217 1 163 b 177 -163 1 16 48 -72 b 289 -249 210 -186 245 -226 z m 262 72 b 265 26 264 66 265 49 b 261 -115 265 -30 261 -115 b 245 -138 261 -124 258 -138 b 230 -134 240 -138 236 -137 b 102 60 166 -92 102 -20 b 124 128 102 88 111 112 b 161 144 134 138 147 144 b 199 134 173 144 184 141 b 262 72 219 122 256 92 z m 413 -115 b 409 26 413 -115 409 -30 b 412 72 409 49 410 66 b 514 144 420 102 480 144 b 570 60 557 144 570 96 b 442 -134 570 -23 508 -91 b 429 -138 436 -137 433 -138 b 413 -115 418 -138 413 -124 z',
        },
        accidentalQuarterToneSharpStein: {
            x_min: 0,
            x_max: 179,
            y_min: -353,
            y_max: 307,
            ha: 660,
            o: 'm 258 240 b 246 252 258 248 252 252 b 240 251 245 252 242 252 b 168 225 240 251 171 225 b 150 253 156 225 150 240 l 150 426 b 130 442 150 435 141 442 b 105 418 108 442 105 429 l 105 230 b 91 193 105 219 101 202 b 17 161 65 183 42 171 b 0 138 9 158 0 147 l 0 36 b 13 23 0 27 4 23 l 16 24 b 86 53 17 24 73 49 l 88 55 b 107 30 98 55 107 42 l 107 -114 b 92 -145 107 -130 101 -143 l 17 -177 b 0 -200 9 -180 0 -192 l 0 -302 b 13 -315 0 -311 4 -315 l 16 -314 b 85 -285 17 -314 72 -291 b 105 -312 92 -282 105 -301 l 105 -492 b 125 -508 105 -501 114 -508 b 150 -484 147 -508 150 -498 l 150 -285 b 151 -274 150 -281 150 -278 b 164 -253 153 -265 158 -256 b 240 -225 176 -251 240 -225 b 258 -202 249 -222 258 -210 l 258 -99 b 245 -86 258 -91 253 -86 l 242 -88 b 240 -88 242 -88 240 -88 l 240 -86 b 168 -115 240 -86 174 -114 b 148 -91 158 -115 148 -107 l 148 43 b 167 85 148 55 156 81 b 240 114 180 91 240 114 b 258 138 249 118 258 128 z',
        },
        accidentalThreeQuarterTonesSharpStein: {
            x_min: 3,
            x_max: 317,
            y_min: -347,
            y_max: 369,
            ha: 716,
            o: 'm 456 324 b 448 336 456 330 454 336 b 393 317 445 336 400 320 b 389 315 392 315 390 315 b 383 325 386 315 383 318 l 383 508 b 360 531 383 528 379 531 b 337 508 341 531 337 527 l 337 318 b 325 291 337 300 334 294 b 268 268 320 288 287 276 b 253 281 256 268 253 274 l 253 464 b 230 487 253 484 249 487 b 207 464 212 487 207 482 l 207 264 b 194 240 207 253 204 245 l 132 217 b 131 217 132 217 132 217 l 130 216 b 118 229 122 216 118 220 l 118 420 b 95 444 118 439 114 444 b 72 420 76 444 72 439 l 72 212 b 60 190 72 197 68 193 l 16 173 b 4 161 9 170 4 167 l 4 50 b 13 39 4 45 9 39 b 58 55 16 39 46 49 b 63 56 60 56 62 56 b 72 42 71 56 72 50 l 72 -125 b 58 -150 72 -137 65 -147 l 16 -166 b 4 -177 9 -168 4 -171 l 4 -289 b 14 -301 4 -295 9 -301 b 53 -287 16 -301 40 -291 b 62 -285 56 -285 59 -285 b 72 -298 69 -285 72 -289 l 72 -477 b 95 -500 72 -495 76 -500 b 118 -477 114 -500 118 -495 l 118 -278 b 127 -259 118 -269 121 -261 l 196 -232 b 207 -243 204 -232 207 -235 l 207 -432 b 230 -455 207 -452 212 -455 b 253 -432 249 -455 253 -451 l 253 -228 b 268 -204 253 -216 259 -207 l 320 -186 b 328 -183 323 -184 325 -183 b 337 -194 334 -183 337 -187 l 337 -387 b 360 -410 337 -408 341 -410 b 383 -387 379 -410 383 -406 l 383 -174 b 395 -157 383 -166 390 -158 l 445 -138 b 456 -127 452 -135 456 -132 l 456 -14 b 448 -3 456 -10 454 -3 b 397 -22 445 -3 408 -17 l 396 -23 b 383 -6 387 -23 383 -16 l 383 163 b 392 181 383 173 384 179 b 445 202 397 183 445 202 b 456 213 452 203 456 207 z m 337 -45 b 266 -78 333 -56 287 -78 b 258 -75 262 -78 259 -76 b 253 19 255 -71 253 -27 b 258 130 253 69 255 122 b 333 163 264 141 315 163 b 337 161 334 163 337 161 b 341 78 340 157 341 120 b 337 -45 341 24 340 -37 z m 118 -127 b 114 -48 114 -121 114 -86 b 118 78 114 6 115 68 b 200 114 122 91 180 114 b 207 111 204 114 206 112 b 212 22 210 107 212 66 b 207 -94 212 -29 210 -85 b 127 -130 203 -108 148 -130 b 118 -127 122 -130 120 -128 z',
        },
        accidentalBuyukMucennebFlat: {
            x_min: 1,
            x_max: 287,
            y_min: -174,
            y_max: 438,
            ha: 612,
            o: 'm 379 452 b 370 464 379 458 377 464 b 164 389 366 464 170 392 b 156 396 163 389 156 393 b 157 436 157 409 157 428 b 167 452 157 445 161 449 b 366 526 173 455 366 526 b 379 540 374 528 379 534 l 379 611 b 370 622 379 616 377 622 b 170 550 366 622 174 552 b 160 557 163 550 160 554 b 161 608 160 585 161 602 b 134 631 161 624 148 631 b 89 590 114 631 91 616 l 89 528 b 81 517 89 526 88 518 b 16 491 76 514 16 491 b 1 480 6 490 1 485 l 1 406 b 13 395 1 400 4 395 l 14 396 b 79 419 16 396 72 415 b 89 412 86 419 89 415 b 91 376 89 399 89 386 b 82 359 91 364 89 361 b 16 331 76 356 16 331 b 1 321 6 331 1 328 l 1 248 b 13 236 1 242 4 236 b 79 262 16 236 71 258 b 92 251 89 262 92 256 b 107 -242 95 23 101 -236 b 120 -251 111 -249 115 -251 b 128 -248 124 -251 128 -248 b 240 -160 171 -225 207 -184 b 413 84 367 -71 413 16 b 284 220 413 166 350 216 b 207 196 259 220 229 209 b 170 176 196 190 184 176 l 168 177 b 151 203 157 181 151 192 b 153 269 151 210 151 236 b 163 292 153 275 153 289 b 366 367 173 297 366 367 b 379 383 374 370 379 376 z m 186 -132 b 173 -137 180 -135 176 -137 b 157 -114 161 -137 157 -122 b 153 35 157 -114 153 -22 b 154 73 153 53 153 68 b 219 135 160 92 197 124 b 255 144 232 141 243 144 b 292 130 269 144 282 140 b 314 62 305 114 314 91 b 186 -132 314 -17 251 -94 z',
        },
        accidentalBakiyeFlat: {
            x_min: -1,
            x_max: 286,
            y_min: -175,
            y_max: 439,
            ha: 614,
            o: 'm 377 454 b 369 467 377 458 376 467 b 363 465 367 467 364 467 b 161 390 363 465 167 393 b 153 399 154 390 153 395 b 157 608 154 494 157 593 b 130 632 157 624 144 632 b 86 592 111 632 88 618 b 88 377 86 592 86 501 b 76 356 88 373 88 360 l 12 331 b -1 320 3 330 -1 327 l -1 248 b 9 236 -1 242 1 236 b 81 264 12 236 78 261 b 89 258 86 264 89 261 b 104 -245 92 30 96 -236 b 115 -252 108 -251 112 -252 b 124 -249 120 -252 124 -249 b 239 -161 167 -226 203 -186 b 412 84 367 -72 412 17 b 282 220 412 166 348 216 b 255 216 274 220 264 219 b 203 196 238 212 222 206 b 171 177 193 189 177 177 b 163 179 168 177 166 177 b 147 202 153 181 147 192 b 147 216 147 204 147 209 l 150 262 b 150 276 150 269 150 275 b 158 291 150 287 154 289 b 363 370 163 292 363 370 b 377 384 373 373 377 379 z m 181 -134 b 167 -138 176 -137 171 -138 b 153 -117 156 -138 153 -125 b 148 27 153 -117 148 -30 b 151 73 148 50 150 68 b 255 144 161 105 219 144 b 312 62 298 144 312 99 b 181 -134 312 -19 249 -96 z',
        },
        accidentalKomaSharp: {
            x_min: 0,
            x_max: 229,
            y_min: -337,
            y_max: 322,
            ha: 659,
            o: 'm 312 151 b 330 176 323 156 330 166 l 330 278 b 320 289 330 285 327 289 b 312 288 318 289 315 289 b 200 246 312 288 203 248 b 181 275 187 246 181 264 l 181 448 b 163 464 181 456 173 464 b 138 441 140 464 138 452 l 138 253 b 122 215 137 240 132 225 b 17 177 92 203 45 177 b 0 153 7 173 0 163 l 0 50 b 10 39 0 43 4 39 b 17 40 13 39 14 39 l 128 81 b 138 52 138 81 138 63 l 138 -91 b 124 -124 138 -107 132 -120 b 17 -167 115 -127 17 -167 b 0 -192 7 -171 0 -181 l 0 -294 b 10 -305 0 -301 4 -305 b 17 -304 13 -305 14 -305 b 128 -261 17 -304 117 -264 l 130 -259 b 138 -276 137 -259 138 -268 l 138 -469 b 157 -485 138 -478 147 -485 b 181 -462 179 -485 181 -475 l 181 -262 b 183 -252 181 -258 181 -255 b 197 -232 186 -243 190 -235 b 312 -187 207 -228 312 -187 b 330 -163 323 -183 330 -173 l 330 -60 b 320 -49 330 -53 327 -49 b 312 -50 318 -49 315 -49 l 200 -94 b 193 -95 197 -95 194 -95 b 181 -68 183 -95 181 -85 l 181 66 b 200 108 181 92 189 104 z',
        },
        accidentalKucukMucennebSharp: {
            x_min: -1,
            x_max: 339,
            y_min: -338,
            y_max: 321,
            ha: 659,
            o: 'm 264 92 b 271 102 264 98 265 99 l 395 150 b 412 174 405 154 412 164 l 412 276 b 402 288 412 284 409 288 b 395 287 400 288 397 288 b 282 245 395 287 285 246 b 264 274 269 245 264 262 l 264 446 b 245 462 264 455 255 462 b 220 439 222 462 220 451 l 220 252 b 204 213 219 239 215 223 b 99 176 174 202 127 176 b 82 151 89 171 82 161 l 82 49 b 92 37 82 42 86 37 b 99 39 95 37 96 37 l 210 79 b 216 81 212 81 215 81 b 220 78 219 81 220 79 l 220 56 b 216 46 220 52 220 48 b 16 -29 210 45 16 -29 b -1 -45 4 -32 -1 -36 l -1 -138 b 12 -154 -1 -145 3 -154 l 215 -79 b 220 -84 219 -79 220 -81 l 220 -105 b 210 -122 220 -115 219 -120 b 99 -168 202 -127 99 -168 b 82 -193 89 -173 82 -183 l 82 -295 b 92 -307 82 -302 86 -307 b 99 -305 95 -307 96 -307 b 210 -262 99 -305 199 -265 l 212 -261 b 220 -278 219 -261 220 -269 l 220 -471 b 239 -487 220 -480 229 -487 b 264 -464 261 -487 264 -477 l 264 -264 b 265 -253 264 -259 264 -256 b 279 -233 268 -245 272 -236 b 395 -189 289 -229 395 -189 b 412 -164 405 -184 412 -174 l 412 -62 b 402 -50 412 -55 409 -50 b 395 -52 400 -50 397 -50 l 278 -96 b 264 -86 268 -96 264 -94 l 264 -68 b 269 -59 264 -62 265 -60 b 471 17 274 -58 471 17 b 488 36 484 22 488 27 l 488 127 b 475 144 488 134 487 144 l 472 141 b 471 141 472 141 471 141 l 471 143 b 272 68 471 143 282 71 l 269 66 b 264 71 264 66 264 69 z',
        },
        accidentalKoron: {
            x_min: 0,
            x_max: 300,
            y_min: -472,
            y_max: 157,
            ha: 629,
            o: 'm 432 -4 b 415 10 432 1 418 9 l 4 226 b 0 223 1 226 0 225 l 0 -672 b 7 -680 0 -677 3 -680 l 45 -680 b 52 -672 49 -680 52 -677 l 52 -193 l 415 -22 b 432 -4 418 -20 432 -13 z m 52 -137 l 52 144 l 327 -7 z',
        },
        accidentalSori: {
            x_min: 0,
            x_max: 421,
            y_min: -318,
            y_max: 328,
            ha: 646,
            o: 'm 606 10 b 589 23 606 16 592 22 l 382 109 l 382 465 b 374 472 382 469 379 472 l 337 472 b 330 465 333 472 330 469 l 330 132 l 183 194 l 183 425 b 176 432 183 429 180 432 l 138 432 b 131 425 134 432 131 429 l 131 216 l 3 269 b 0 265 0 269 0 266 l 0 223 b 3 213 0 216 0 215 l 131 160 l 131 -150 l 3 -203 b 0 -212 0 -204 0 -206 l 0 -255 b 3 -259 0 -258 1 -259 l 131 -204 l 131 -451 b 138 -458 131 -455 134 -458 l 176 -458 b 183 -451 180 -458 183 -455 l 183 -183 l 330 -120 l 330 -410 b 337 -418 330 -415 333 -418 l 374 -418 b 382 -410 379 -418 382 -415 l 382 -98 l 589 -9 b 606 10 592 -9 606 0 z m 183 -128 l 183 138 l 330 76 l 330 -66 z m 382 -45 l 382 55 l 501 6 z',
        },
        articAccentAbove: {
            x_min: 0,
            x_max: 339,
            y_min: 1,
            y_max: 245,
            ha: 244,
            o: 'm 469 151 b 488 177 488 156 488 166 b 469 203 488 189 488 197 l 37 350 b 24 353 32 351 26 353 b 3 333 12 353 7 344 b 0 318 1 327 0 323 b 20 298 0 311 4 304 b 346 187 20 298 331 193 b 356 177 353 186 356 181 b 344 167 356 173 353 170 b 20 58 328 163 20 58 b 0 36 4 50 0 43 b 3 23 0 32 1 27 b 23 1 7 13 13 1 b 29 3 24 1 27 1 z',
        },
        articAccentBelow: {
            x_min: 0,
            x_max: 339,
            y_min: -244,
            y_max: 0,
            ha: 244,
            o: 'm 469 -202 b 488 -176 488 -197 488 -187 b 469 -150 488 -164 488 -156 l 37 -3 b 24 0 32 -1 26 0 b 3 -20 12 0 7 -9 b 0 -35 1 -26 0 -30 b 20 -55 0 -42 4 -49 b 346 -166 20 -55 331 -160 b 356 -176 353 -167 356 -171 b 344 -186 356 -180 353 -183 b 20 -295 328 -190 20 -295 b 0 -317 4 -302 0 -310 b 3 -330 0 -321 1 -325 b 23 -351 7 -340 13 -351 b 29 -350 24 -351 27 -351 z',
        },
        articTenutoAbove: {
            x_min: -1,
            x_max: 338,
            y_min: 0,
            y_max: 48,
            ha: 48,
            o: 'm 452 0 b 487 35 485 0 487 16 b 452 69 487 53 487 69 l 33 69 b -1 35 -1 69 -1 53 b 33 0 -1 16 -1 0 z',
        },
        articTenutoBelow: {
            x_min: -1,
            x_max: 338,
            y_min: -48,
            y_max: 0,
            ha: 48,
            o: 'm 452 -69 b 487 -35 485 -69 487 -53 b 452 0 487 -16 487 0 l 33 0 b -1 -35 -1 0 -1 -16 b 33 -69 -1 -53 -1 -69 z',
        },
        articStaccatoAbove: {
            x_min: 0,
            x_max: 84,
            y_min: 0,
            y_max: 84,
            ha: 84,
            o: 'm 121 60 b 60 121 121 94 94 121 b 0 60 27 121 0 94 b 60 0 0 27 27 0 b 121 60 94 0 121 27 z',
        },
        articStaccatoBelow: {
            x_min: 0,
            x_max: 84,
            y_min: -84,
            y_max: 0,
            ha: 84,
            o: 'm 121 -60 b 60 0 121 -27 94 0 b 0 -60 27 0 0 -27 b 60 -121 0 -94 27 -121 b 121 -60 94 -121 121 -94 z',
        },
        articStaccatissimoAbove: {
            x_min: 1,
            x_max: 100,
            y_min: -2,
            y_max: 293,
            ha: 295,
            o: 'm 72 422 b 1 390 35 422 3 409 b 72 -3 1 369 39 -3 b 144 389 108 -3 144 356 b 72 422 144 410 111 422 z',
        },
        articStaccatissimoBelow: {
            x_min: 1,
            x_max: 100,
            y_min: -295,
            y_max: 0,
            ha: 295,
            o: 'm 72 -425 b 144 -392 111 -425 144 -413 b 72 0 144 -359 108 0 b 1 -393 39 0 1 -372 b 72 -425 3 -412 35 -425 z',
        },
        articMarcatoAbove: {
            x_min: -1,
            x_max: 235,
            y_min: -1,
            y_max: 253,
            ha: 254,
            o: 'm 181 356 b 167 364 177 361 173 364 b 153 356 157 364 153 356 l 0 23 b -1 16 -1 20 -1 19 b 9 0 -1 9 1 1 b 16 -1 10 -1 14 -1 b 32 9 22 -1 29 1 b 112 186 32 9 109 180 b 118 190 114 189 115 190 b 127 186 121 190 124 189 b 209 9 128 180 209 9 b 225 0 213 3 219 0 l 323 0 b 338 16 333 1 338 7 b 337 23 338 19 338 22 z',
        },
        articMarcatoBelow: {
            x_min: -1,
            x_max: 235,
            y_min: -254,
            y_max: 0,
            ha: 254,
            o: 'm 156 -357 b 170 -366 160 -363 164 -366 b 184 -357 180 -366 184 -357 l 337 -24 b 338 -17 338 -22 338 -20 b 328 -1 338 -10 336 -3 b 321 0 327 0 323 0 b 305 -10 315 0 308 -3 b 225 -187 305 -10 228 -181 b 219 -192 223 -190 222 -192 b 210 -187 216 -192 213 -190 b 128 -10 209 -181 128 -10 b 112 -1 124 -4 118 -1 l 14 -1 b -1 -17 4 -3 -1 -9 b 0 -24 -1 -20 -1 -23 z',
        },
        fermataAbove: {
            x_min: 3,
            x_max: 605,
            y_min: -3,
            y_max: 329,
            ha: 332,
            o: 'm 435 318 b 818 36 742 318 804 91 b 821 26 819 32 819 27 b 851 -4 831 6 837 -4 b 871 16 864 -4 871 1 b 870 30 871 20 871 24 b 438 474 780 471 480 474 b 6 30 392 474 94 471 b 4 14 4 24 4 19 b 23 -4 4 0 12 -4 b 52 26 36 -4 43 6 b 56 39 53 27 55 33 b 435 318 73 98 138 318 z m 516 75 b 436 153 516 117 480 153 b 359 75 395 153 359 117 b 436 -4 359 32 395 -4 b 516 75 480 -4 516 32 z',
        },
        fermataBelow: {
            x_min: 3,
            x_max: 605,
            y_min: -332,
            y_max: 0,
            ha: 332,
            o: 'm 435 -323 b 56 -43 138 -323 73 -102 b 52 -30 55 -37 53 -32 b 23 0 43 -10 36 0 b 4 -19 12 0 4 -4 b 6 -35 4 -23 4 -29 b 438 -478 94 -475 392 -478 b 870 -35 480 -478 780 -475 b 871 -20 871 -29 871 -24 b 851 0 871 -6 864 0 b 821 -30 837 0 831 -10 b 818 -40 819 -32 819 -36 b 435 -323 804 -95 742 -323 z m 516 -79 b 436 0 516 -36 480 0 b 359 -79 395 0 359 -36 b 436 -157 359 -121 395 -157 b 516 -79 480 -157 516 -121 z',
        },
        fermataLongAbove: {
            x_min: 0,
            x_max: 603,
            y_min: -1,
            y_max: 333,
            ha: 334,
            o: 'm 72 480 b 0 441 32 480 0 462 l 0 19 b 35 0 0 9 16 0 b 71 19 55 0 71 9 l 71 289 b 433 315 71 307 252 315 b 798 289 615 315 798 307 l 798 19 b 832 0 798 9 814 0 b 868 19 852 0 868 9 l 868 441 b 796 480 868 462 837 480 z m 513 78 b 433 156 513 121 478 156 b 356 78 390 156 356 121 b 433 -1 356 35 390 -1 b 513 78 478 -1 513 35 z',
        },
        fermataLongBelow: {
            x_min: 0,
            x_max: 603,
            y_min: -333,
            y_max: 1,
            ha: 334,
            o: 'm 513 -78 b 433 1 513 -35 478 1 b 356 -78 390 1 356 -35 b 433 -156 356 -121 390 -156 b 513 -78 478 -156 513 -121 z m 796 -480 b 868 -441 837 -480 868 -462 l 868 -19 b 832 0 868 -9 852 0 b 798 -19 814 0 798 -9 l 798 -289 b 433 -315 798 -307 615 -315 b 71 -289 252 -315 71 -307 l 71 -19 b 35 0 71 -9 55 0 b 0 -19 16 0 0 -9 l 0 -441 b 72 -480 0 -462 32 -480 z',
        },
        fermataVeryLongAbove: {
            x_min: 0,
            x_max: 715,
            y_min: 0,
            y_max: 408,
            ha: 408,
            o: 'm 76 588 b 0 546 35 588 0 569 l 0 22 b 37 1 0 10 17 1 b 75 22 59 1 75 10 l 75 431 b 514 458 75 449 294 458 b 955 431 734 458 955 449 l 955 22 b 991 1 955 10 971 1 b 1030 22 1012 1 1030 10 l 1030 546 b 953 588 1030 569 995 588 z m 215 389 b 138 347 171 389 138 370 l 138 22 b 174 1 138 10 154 1 b 213 22 196 1 213 10 l 213 217 b 514 245 213 235 363 245 b 816 217 665 245 816 235 l 816 22 b 854 1 816 10 834 1 b 891 22 876 1 891 10 l 891 347 b 815 389 891 370 858 389 z m 606 84 b 521 167 606 130 569 167 b 439 84 475 167 439 130 b 521 0 439 39 475 0 b 606 84 569 0 606 39 z',
        },
        fermataVeryLongBelow: {
            x_min: 0,
            x_max: 715,
            y_min: -408,
            y_max: 0,
            ha: 408,
            o: 'm 606 -84 b 521 0 606 -39 569 0 b 439 -84 475 0 439 -39 b 521 -167 439 -130 475 -167 b 606 -84 569 -167 606 -130 z m 815 -389 b 891 -347 858 -389 891 -370 l 891 -22 b 854 -1 891 -10 876 -1 b 816 -22 834 -1 816 -10 l 816 -217 b 514 -245 816 -235 665 -245 b 213 -217 363 -245 213 -235 l 213 -22 b 174 -1 213 -10 196 -1 b 138 -22 154 -1 138 -10 l 138 -347 b 215 -389 138 -370 171 -389 z m 953 -588 b 1030 -546 995 -588 1030 -569 l 1030 -22 b 991 -1 1030 -10 1012 -1 b 955 -22 971 -1 955 -10 l 955 -431 b 514 -458 955 -449 734 -458 b 75 -431 294 -458 75 -449 l 75 -22 b 37 -1 75 -10 59 -1 b 0 -22 17 -1 0 -10 l 0 -546 b 76 -588 0 -569 35 -588 z',
        },
        fermataShortAbove: {
            x_min: 0,
            x_max: 604,
            y_min: 0,
            y_max: 341,
            ha: 341,
            o: 'm 78 0 b 88 6 81 0 82 3 b 435 328 134 45 412 328 b 783 3 458 328 742 39 b 793 0 786 1 793 0 l 865 0 b 870 4 865 0 870 1 b 867 10 870 6 868 9 b 435 491 805 69 474 491 b 3 10 397 491 69 75 b 0 4 1 9 0 6 b 4 0 0 1 4 0 z m 513 94 b 433 171 513 135 477 171 b 354 94 390 171 354 135 b 433 13 354 49 390 13 b 513 94 477 13 513 49 z',
        },
        fermataShortBelow: {
            x_min: 0,
            x_max: 604,
            y_min: -341,
            y_max: 0,
            ha: 341,
            o: 'm 4 0 b 0 -4 4 0 0 -1 b 3 -10 0 -6 1 -9 b 435 -491 69 -75 397 -491 b 867 -10 474 -491 805 -69 b 870 -4 868 -9 870 -6 b 865 0 870 -1 865 0 l 793 0 b 783 -3 793 0 786 -1 b 435 -328 742 -39 458 -328 b 88 -6 412 -328 134 -45 b 78 0 82 -3 81 0 z m 513 -94 b 433 -13 513 -49 477 -13 b 354 -94 390 -13 354 -49 b 433 -171 354 -135 390 -171 b 513 -94 477 -171 513 -135 z',
        },
        breathMarkComma: {
            x_min: 1,
            x_max: 152,
            y_min: 2,
            y_max: 251,
            ha: 249,
            o: 'm 104 361 b 1 271 42 361 1 321 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 17 32 29 26 26 l 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 z',
        },
        breathMarkUpbow: {
            x_min: 1,
            x_max: 249,
            y_min: 1,
            y_max: 495,
            ha: 494,
            o: 'm 181 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 z',
        },
        caesura: {
            x_min: 0,
            x_max: 384,
            y_min: -1,
            y_max: 532,
            ha: 533,
            o: 'm 40 -1 b 78 26 58 -1 72 9 l 321 713 b 323 726 323 717 323 721 b 282 766 323 747 304 766 b 245 739 265 766 251 756 l 3 52 b 0 37 1 48 0 42 b 27 1 0 22 10 7 b 40 -1 32 -1 36 -1 z m 308 26 l 552 713 b 553 726 553 717 553 721 b 513 766 553 747 534 766 b 475 739 495 766 481 756 l 232 52 b 230 39 230 48 230 43 b 258 1 230 23 240 7 b 271 -1 262 -1 266 -1 b 308 26 287 -1 302 9 z',
        },
        caesuraCurved: {
            x_min: 0,
            x_max: 373,
            y_min: 0,
            y_max: 530,
            ha: 530,
            o: 'm 491 763 b 445 719 468 763 446 744 b 252 98 432 507 340 295 l 226 39 b 223 27 225 35 223 32 b 252 0 223 13 233 0 b 276 16 262 0 272 6 b 537 716 386 230 537 478 b 491 763 537 742 518 763 z m 29 0 b 53 16 39 0 48 6 l 82 69 b 314 716 187 264 314 498 b 268 763 314 742 295 763 b 222 719 245 763 223 744 b 29 98 209 507 117 295 l 3 39 b 0 29 1 36 0 33 b 29 0 0 14 12 0 z',
        },
        restMaxima: {
            x_min: 0,
            x_max: 381,
            y_min: -249,
            y_max: 250,
            ha: 499,
            o: 'm 180 -330 l 180 331 b 156 360 180 356 170 360 l 23 360 b 0 331 10 360 0 356 l 0 -330 b 23 -359 0 -354 10 -359 l 156 -359 b 180 -330 170 -359 180 -354 z m 549 -330 l 549 331 b 524 360 549 356 539 360 l 392 360 b 369 331 379 360 369 356 l 369 -330 b 392 -359 369 -354 379 -359 l 524 -359 b 549 -330 539 -359 549 -354 z',
        },
        restDoubleWhole: {
            x_min: 0,
            x_max: 125,
            y_min: 0,
            y_max: 250,
            ha: 250,
            o: 'm 180 22 l 180 338 b 156 360 180 350 170 360 l 23 360 b 0 338 10 360 0 350 l 0 22 b 23 0 0 10 10 0 l 156 0 b 180 22 170 0 180 10 z',
        },
        restWhole: {
            x_min: 0,
            x_max: 282,
            y_min: -135,
            y_max: 9,
            ha: 144,
            o: 'm 406 -157 l 406 -24 b 369 13 406 -3 389 13 l 37 13 b 0 -24 16 13 0 -3 l 0 -157 b 37 -194 0 -177 16 -194 l 369 -194 b 406 -157 389 -194 406 -177 z',
        },
        restWholeLegerLine: {
            x_min: -117,
            x_max: 399,
            y_min: -135,
            y_max: 20,
            ha: 155,
            o: 'm -143 29 b -168 3 -157 29 -168 17 b -143 -23 -168 -12 -157 -23 l 0 -23 l 0 -157 b 37 -194 0 -177 16 -194 l 369 -194 b 406 -157 389 -194 406 -177 l 406 -24 b 549 -23 406 -23 406 -23 b 575 3 563 -23 575 -12 b 549 29 575 17 563 29 z',
        },
        restHalf: {
            x_min: 0,
            x_max: 282,
            y_min: -2,
            y_max: 142,
            ha: 144,
            o: 'm 406 35 l 406 167 b 369 204 406 189 389 204 l 37 204 b 0 167 16 204 0 189 l 0 35 b 37 -3 0 14 16 -3 l 369 -3 b 406 35 389 -3 406 14 z',
        },
        restHalfLegerLine: {
            x_min: -117,
            x_max: 399,
            y_min: -13,
            y_max: 142,
            ha: 155,
            o: 'm 549 -19 b 575 7 563 -19 575 -7 b 549 33 575 22 563 33 b 406 35 406 33 406 33 l 406 167 b 369 204 406 187 389 204 l 37 204 b 0 167 16 204 0 187 l 0 33 l -143 33 b -168 7 -157 33 -168 22 b -143 -19 -168 -7 -157 -19 z',
        },
        restQuarter: {
            x_min: 1,
            x_max: 270,
            y_min: -375,
            y_max: 373,
            ha: 748,
            o: 'm 112 -55 b 174 -141 135 -84 156 -111 b 183 -161 177 -147 183 -158 b 181 -167 183 -163 183 -166 b 166 -174 179 -173 173 -174 b 143 -170 160 -174 148 -171 b 137 -170 141 -170 138 -170 l 125 -166 b 1 -304 50 -166 1 -233 b 168 -527 1 -376 63 -446 b 206 -540 180 -536 194 -540 b 228 -531 216 -540 226 -537 b 230 -521 229 -527 230 -524 b 207 -487 230 -508 219 -497 b 170 -435 189 -487 173 -448 b 164 -397 166 -423 164 -410 b 255 -292 164 -338 194 -292 b 369 -317 297 -292 344 -308 l 370 -318 b 382 -320 376 -320 379 -320 b 389 -314 386 -320 389 -318 b 336 -232 389 -297 351 -249 b 236 -32 281 -166 236 -112 b 236 -27 236 -30 236 -29 l 238 -17 b 238 -13 238 -16 238 -14 b 333 199 243 71 295 140 b 338 220 337 206 338 213 b 333 248 338 235 333 248 b 95 526 333 248 120 501 b 69 537 88 533 78 537 b 40 507 55 537 40 527 b 46 484 40 500 42 492 b 134 291 52 468 134 395 b 48 108 134 238 112 176 b 27 66 33 94 27 78 b 42 32 27 46 42 32 z',
        },
        rest8th: {
            x_min: 0,
            x_max: 247,
            y_min: -251,
            y_max: 174,
            ha: 425,
            o: 'm 193 154 b 96 251 193 207 150 251 b 0 154 43 251 0 207 b 39 81 0 124 17 98 b 117 56 62 65 89 56 b 173 66 137 56 157 60 b 225 88 193 72 206 78 b 232 89 228 89 230 89 b 239 76 238 89 239 84 b 238 60 239 72 239 66 b 104 -343 233 39 130 -248 b 145 -361 104 -360 137 -361 b 196 -347 161 -361 181 -359 b 341 161 200 -344 341 161 b 356 217 347 187 354 210 b 338 240 356 232 341 239 b 323 235 336 240 331 240 b 193 140 312 226 240 140 z',
        },
        rest16th: {
            x_min: 0,
            x_max: 320,
            y_min: -500,
            y_max: 179,
            ha: 679,
            o: 'm 300 160 b 202 258 300 215 256 258 b 104 160 148 258 104 215 b 219 62 104 101 164 62 b 331 94 258 62 298 75 b 341 96 336 95 338 96 b 348 86 346 96 348 94 b 265 -173 348 63 275 -151 b 194 -217 253 -200 215 -217 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 151 -105 b 0 -203 43 -105 0 -148 b 115 -301 0 -262 60 -301 b 223 -271 153 -301 190 -288 b 229 -279 226 -271 229 -274 l 228 -281 b 228 -282 228 -282 228 -282 l 91 -690 b 91 -691 91 -690 91 -691 l 89 -693 b 134 -720 89 -706 102 -720 b 189 -687 176 -720 183 -703 l 356 -138 b 420 81 393 -16 420 81 b 459 226 420 81 456 207 b 461 232 459 229 461 230 b 446 248 461 240 449 246 b 431 242 439 248 435 245 b 300 145 420 233 348 147 z',
        },
        rest32nd: {
            x_min: 0,
            x_max: 363,
            y_min: -500,
            y_max: 426,
            ha: 926,
            o: 'm 508 603 b 492 598 501 603 497 600 b 361 503 482 590 410 503 l 361 516 b 264 613 361 570 318 613 b 166 516 210 613 166 570 b 206 444 166 487 183 461 b 246 423 217 433 232 428 b 284 418 258 420 269 418 b 393 449 321 418 360 432 b 399 451 395 451 397 451 b 415 426 409 451 415 436 l 413 423 b 413 422 413 423 413 422 l 357 192 b 279 140 350 168 302 140 b 281 153 281 144 281 148 b 183 251 281 207 236 251 b 85 153 128 251 85 207 b 125 81 85 124 102 98 b 164 60 137 71 150 65 b 203 55 176 58 189 55 b 311 86 240 55 278 69 b 315 88 312 88 314 88 b 325 69 323 88 325 76 l 268 -167 b 194 -217 261 -197 216 -216 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 153 -105 b 0 -203 45 -105 0 -148 b 115 -301 0 -262 60 -301 b 228 -269 154 -301 194 -288 b 232 -268 229 -268 230 -268 b 240 -276 236 -268 240 -272 b 138 -688 240 -282 141 -678 b 137 -697 137 -691 137 -694 b 176 -720 137 -708 145 -720 b 232 -690 222 -720 226 -706 b 484 436 236 -672 484 436 b 521 582 484 436 518 564 b 523 588 521 585 523 586 b 508 603 523 600 511 603 z',
        },
        rest64th: {
            x_min: 0,
            x_max: 423,
            y_min: -753,
            y_max: 430,
            ha: 1183,
            o: 'm 596 609 b 580 603 589 609 585 606 b 448 507 569 595 497 507 b 449 521 449 511 449 516 b 351 619 449 575 405 619 b 253 521 297 619 253 575 b 372 422 253 461 317 422 b 481 454 410 422 446 438 b 491 456 484 455 488 456 b 504 441 498 456 504 451 b 501 426 504 436 503 432 b 445 202 500 422 451 217 b 359 144 435 174 383 144 l 359 158 b 261 256 359 212 315 256 b 163 158 207 256 163 212 b 243 65 163 112 202 78 b 279 60 255 62 266 60 b 397 91 320 60 360 73 b 403 92 400 92 402 92 b 412 79 409 92 412 86 b 410 72 412 76 412 75 b 351 -161 408 59 356 -150 b 281 -212 340 -199 301 -212 l 281 -197 b 183 -99 281 -144 238 -99 b 85 -197 130 -99 85 -144 b 125 -271 85 -228 102 -253 b 166 -291 138 -279 151 -287 b 204 -297 177 -294 192 -297 b 262 -287 225 -297 245 -292 b 305 -265 282 -279 287 -274 b 310 -264 307 -264 308 -264 b 318 -284 317 -264 318 -275 b 317 -295 318 -288 317 -294 b 259 -524 315 -302 265 -508 b 194 -567 251 -554 213 -567 b 196 -554 196 -563 196 -559 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 40 -626 0 -583 17 -609 b 118 -652 60 -644 92 -652 b 210 -629 145 -652 186 -642 b 216 -628 213 -628 215 -628 b 228 -647 226 -628 228 -639 l 226 -651 b 226 -652 226 -651 226 -652 l 122 -1054 b 121 -1064 121 -1058 121 -1061 b 167 -1084 121 -1077 134 -1084 b 215 -1060 202 -1084 209 -1076 b 402 -278 217 -1047 229 -1021 b 436 -135 403 -278 431 -161 l 570 441 b 609 588 570 441 605 569 b 596 609 609 603 602 608 z',
        },
        rest128th: {
            x_min: 0,
            x_max: 485,
            y_min: -750,
            y_max: 689,
            ha: 1439,
            o: 'm 537 894 b 439 992 537 949 494 992 b 341 894 386 992 341 949 b 382 822 341 865 359 840 b 459 796 402 805 433 796 b 518 806 480 796 501 801 l 520 808 b 569 828 539 814 552 819 b 580 831 572 829 577 831 b 598 812 589 831 598 825 b 596 801 598 809 598 805 b 540 575 590 773 546 595 b 448 510 534 553 475 510 l 448 524 b 350 622 448 577 405 622 b 252 524 297 622 252 577 b 292 451 252 494 269 468 b 369 426 318 433 337 426 b 429 435 389 426 412 429 b 494 464 449 442 475 455 b 498 465 495 465 497 465 b 505 446 504 465 505 456 b 503 426 505 439 504 432 l 446 202 b 366 144 439 173 389 144 l 366 158 b 268 256 366 212 323 256 b 170 158 215 256 170 212 b 289 59 170 98 235 59 b 347 69 310 59 330 63 b 397 91 367 76 379 82 b 406 94 400 92 403 94 b 415 79 412 94 415 88 b 412 63 415 75 413 69 b 357 -157 408 42 364 -134 b 281 -212 346 -196 302 -212 b 282 -197 281 -207 282 -203 b 184 -99 282 -144 238 -99 b 86 -197 130 -99 86 -144 b 204 -297 86 -258 150 -297 b 262 -287 225 -297 245 -292 b 312 -265 282 -279 294 -274 b 318 -264 314 -264 317 -264 b 327 -275 324 -264 327 -269 b 266 -517 324 -287 278 -490 b 200 -569 248 -566 220 -567 l 196 -554 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 118 -652 0 -615 63 -652 b 177 -642 138 -652 160 -648 l 179 -641 b 229 -621 197 -635 210 -629 l 230 -619 b 239 -626 236 -619 239 -622 b 238 -632 239 -628 239 -631 b 131 -1057 235 -642 134 -1050 b 173 -1080 131 -1071 140 -1080 b 230 -1057 219 -1080 225 -1074 l 658 815 b 697 960 658 815 694 942 b 698 966 697 963 698 965 b 684 982 698 975 687 981 b 668 976 677 982 672 979 b 537 880 658 969 586 881 z',
        },
        dynamicPiano: {
            x_min: -89,
            x_max: 366,
            y_min: -142,
            y_max: 274,
            ha: 416,
            o: 'm 395 395 b 292 357 350 395 318 380 b 262 328 272 340 268 328 b 246 363 255 328 259 338 b 177 393 236 380 215 393 b 1 251 92 393 46 333 b -9 223 -6 238 -9 230 b 7 207 -9 213 -1 207 b 30 229 17 207 23 216 b 127 338 72 301 101 338 b 143 321 138 338 143 331 b 134 285 143 310 138 295 l -43 -154 b -65 -168 -48 -166 -50 -168 l -109 -168 b -128 -187 -122 -168 -128 -174 b -111 -204 -128 -199 -122 -204 l 167 -204 b 186 -186 180 -204 186 -199 b 168 -168 186 -174 180 -168 l 111 -168 b 98 -164 102 -168 98 -168 b 101 -154 98 -163 99 -158 l 166 7 b 179 24 168 14 171 24 b 213 -1 186 24 190 10 b 276 -14 233 -12 252 -14 b 527 266 415 -14 527 130 b 395 395 527 350 475 395 z m 356 341 b 389 288 380 341 389 320 b 243 35 389 217 312 35 b 207 81 219 35 207 50 b 235 180 207 111 219 140 l 264 251 b 356 341 284 300 321 341 z',
        },
        dynamicMezzo: {
            x_min: -20,
            x_max: 446,
            y_min: -10,
            y_max: 274,
            ha: 284,
            o: 'm 528 395 b 431 350 487 395 454 374 b 409 330 416 336 415 330 b 397 360 402 330 406 341 b 334 395 389 379 370 395 b 236 350 292 395 259 374 b 215 330 222 336 220 330 b 203 360 207 330 212 340 b 147 393 194 379 174 393 b -19 251 71 393 26 331 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 b 9 226 -3 207 1 215 b 107 338 52 300 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 287 323 225 292 255 323 b 308 302 304 323 308 314 b 294 249 308 285 302 269 b 203 24 294 248 292 248 b 199 9 200 17 199 13 b 215 0 199 3 203 0 l 285 0 b 308 17 298 0 302 3 l 402 251 b 481 323 419 292 449 323 b 503 302 498 323 503 314 b 413 43 503 252 413 104 b 478 -14 413 6 436 -14 b 629 102 533 -14 583 26 b 642 132 638 117 642 125 b 629 145 642 141 636 145 b 608 127 619 145 615 138 b 534 49 580 84 553 49 b 523 62 526 49 523 53 b 606 317 523 112 606 238 b 528 395 606 353 588 395 z',
        },
        dynamicForte: {
            x_min: -141,
            x_max: 364,
            y_min: -152,
            y_max: 444,
            ha: 596,
            o: 'm 23 380 b 0 357 7 380 0 373 b 22 336 0 343 7 336 l 105 336 b 117 330 114 336 117 336 b 114 315 117 327 115 323 l 23 0 b -101 -187 -17 -141 -43 -187 b -127 -174 -120 -187 -127 -181 b -92 -156 -127 -163 -114 -170 b -63 -102 -75 -144 -63 -125 b -128 -43 -63 -65 -89 -43 b -203 -122 -171 -43 -203 -78 b -95 -219 -203 -186 -156 -219 b 161 17 14 -219 82 -145 b 269 317 203 105 235 194 l 271 318 b 289 336 271 323 282 336 l 383 336 b 406 359 399 336 406 343 b 384 380 406 373 399 380 l 298 380 b 284 387 288 380 284 380 b 287 405 284 392 285 396 b 419 606 315 530 347 606 b 442 595 431 606 442 603 b 419 580 442 586 435 588 b 389 526 400 572 389 552 b 454 465 389 485 418 465 b 524 543 491 465 524 490 b 400 639 524 596 491 639 b 135 402 261 639 183 540 b 107 380 128 380 127 380 z',
        },
        dynamicRinforzando: {
            x_min: -20,
            x_max: 277,
            y_min: 0,
            y_max: 274,
            ha: 274,
            o: 'm 324 395 b 235 350 287 395 256 374 b 215 330 222 336 220 330 b 203 360 207 330 213 337 b 145 393 194 379 174 393 b -19 251 75 393 27 337 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 b 9 226 -3 207 3 215 b 107 338 52 301 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 304 351 226 298 272 351 b 318 343 312 351 318 348 b 287 285 318 330 287 325 b 338 239 287 256 308 239 b 399 318 373 239 399 268 b 324 395 399 360 377 395 z',
        },
        dynamicSforzando: {
            x_min: 0,
            x_max: 229,
            y_min: -10,
            y_max: 273,
            ha: 283,
            o: 'm 212 393 b 68 274 127 393 68 350 b 145 161 68 223 95 196 b 200 85 187 132 200 114 b 127 20 200 53 173 20 b 66 42 91 20 66 32 b 91 56 66 49 75 46 b 111 98 104 65 111 79 b 59 145 111 127 86 145 b 0 78 24 145 0 117 b 125 -14 0 30 49 -14 b 291 120 219 -14 291 36 b 220 232 291 160 276 190 b 151 314 168 271 151 287 b 213 361 151 337 168 361 b 258 346 238 361 258 356 b 240 333 258 340 251 340 b 226 298 232 325 226 314 b 276 252 226 269 248 252 b 330 307 311 252 330 279 b 212 393 330 360 285 393 z',
        },
        dynamicZ: {
            x_min: -30,
            x_max: 244,
            y_min: -10,
            y_max: 268,
            ha: 278,
            o: 'm 333 386 b 298 377 321 386 314 382 b 239 370 282 373 259 370 b 94 383 153 370 111 383 b 68 364 79 383 72 377 l 33 264 b 29 242 30 255 29 248 b 45 228 29 232 36 228 b 66 249 55 228 60 236 l 81 279 b 96 297 85 288 88 297 b 168 292 102 297 127 292 b 223 302 194 292 215 302 b 196 269 229 302 197 271 l -26 45 b -43 16 -37 33 -43 27 b -24 -1 -43 6 -36 -1 b 4 16 -12 -1 -3 10 b 39 30 16 24 27 30 b 179 -14 79 30 108 -14 b 297 102 259 -14 297 43 b 245 166 297 147 271 166 b 197 115 219 166 197 145 b 236 72 197 88 216 72 b 259 79 251 72 255 79 b 264 75 262 79 264 78 b 258 60 264 72 261 66 b 229 45 252 50 242 45 b 117 95 186 45 173 95 b 85 86 98 95 89 86 b 102 111 85 86 95 104 l 333 338 b 351 370 344 350 351 359 b 333 386 351 380 343 386 z',
        },
        ornamentTrill: {
            x_min: 0,
            x_max: 521,
            y_min: -10,
            y_max: 390,
            ha: 400,
            o: 'm 383 562 b 364 557 377 562 369 559 l 294 534 b 269 511 281 530 275 526 l 217 384 b 206 367 212 370 210 367 b 179 380 200 367 192 374 b 118 393 158 389 140 393 b 0 292 50 393 0 353 b 95 210 0 248 30 210 b 140 213 112 210 131 213 b 144 209 143 213 144 212 b 140 194 144 206 143 202 l 124 156 b 96 58 108 117 96 88 b 179 -14 96 17 124 -14 b 325 153 253 -14 325 46 b 307 251 325 187 320 219 b 302 265 304 258 302 261 b 334 294 302 274 311 281 l 343 298 b 455 348 393 328 428 348 b 474 327 468 348 474 344 b 465 285 474 312 469 295 l 360 24 b 356 9 357 17 356 13 b 372 0 356 3 360 0 l 442 0 b 465 17 455 0 459 3 l 559 251 b 655 351 577 298 624 351 b 670 343 664 351 670 348 b 638 285 670 330 638 325 b 690 239 638 256 660 239 b 750 318 724 239 750 268 b 675 395 750 360 729 395 b 586 350 638 395 608 374 b 566 330 573 336 572 330 b 553 361 559 330 564 340 b 490 393 543 380 521 393 b 347 348 432 393 377 364 b 312 333 328 338 320 333 b 308 337 310 333 308 334 b 315 359 308 343 312 351 l 387 537 b 392 553 390 544 392 549 b 383 562 392 559 389 562 z m 118 360 b 192 325 134 360 192 347 b 186 307 192 321 189 314 l 180 292 b 148 265 173 274 167 269 b 98 258 130 261 112 258 b 39 301 50 258 39 281 b 118 360 39 327 60 360 z m 272 240 b 292 151 285 240 292 164 b 212 30 292 88 253 30 b 196 48 200 30 196 37 b 207 92 196 59 202 78 b 264 230 207 94 209 94 b 272 240 266 238 268 240 z',
        },
        ornamentTurn: {
            x_min: 0,
            x_max: 460,
            y_min: 0,
            y_max: 218,
            ha: 218,
            o: 'm 534 314 b 454 251 490 314 454 294 b 505 199 454 219 475 199 b 579 232 547 199 549 232 b 626 164 603 232 626 202 b 533 72 626 102 583 72 b 377 180 487 72 439 111 b 150 312 307 258 243 312 b 0 148 55 312 0 240 b 128 0 0 45 66 0 b 209 63 173 0 209 20 b 157 115 209 95 187 115 b 84 82 115 115 114 82 b 36 150 59 82 36 112 b 130 242 36 212 79 242 b 285 134 176 242 223 203 b 513 1 356 56 419 1 b 662 166 608 1 662 73 b 534 314 662 269 596 314 z',
        },
        ornamentTurnSlash: {
            x_min: 0,
            x_max: 460,
            y_min: -90,
            y_max: 306,
            ha: 396,
            o: 'm 333 441 b 310 418 315 441 310 433 l 310 274 b 302 252 310 258 308 252 b 261 278 294 252 287 262 b 150 311 228 298 192 311 b 0 147 55 311 0 239 b 128 -1 0 43 66 -1 b 209 62 173 -1 209 19 b 157 114 209 94 187 114 b 84 81 115 114 114 81 b 36 148 59 81 36 111 b 130 240 36 210 79 240 b 285 128 176 240 222 197 b 307 79 304 108 307 105 l 307 -107 b 330 -130 307 -122 312 -130 b 353 -107 347 -130 353 -122 l 353 37 b 360 59 353 53 353 59 b 402 33 369 59 376 49 b 513 0 435 13 471 0 b 662 164 608 0 662 72 b 534 312 662 268 596 312 b 454 249 490 312 454 292 b 505 197 454 217 475 197 b 579 230 547 197 549 230 b 626 163 603 230 626 200 b 533 71 626 101 583 71 b 377 183 487 71 441 114 b 356 232 359 203 356 206 l 356 418 b 333 441 356 433 350 441 z',
        },
        ornamentMordent: {
            x_min: 1,
            x_max: 729,
            y_min: -73,
            y_max: 319,
            ha: 392,
            o: 'm 546 265 l 546 459 l 501 459 l 501 216 l 459 167 b 439 167 454 160 445 160 b 302 327 387 228 310 317 b 258 353 291 338 282 351 b 226 340 245 353 238 348 l 20 107 b 1 73 12 98 1 84 b 30 59 1 65 9 59 b 88 94 53 59 73 79 b 144 143 107 109 124 127 b 176 161 158 154 168 161 b 197 144 183 161 189 156 l 323 10 b 351 0 328 3 340 0 b 377 9 361 0 372 3 b 498 114 392 17 475 94 l 498 -105 l 544 -105 l 544 153 b 562 160 550 157 556 160 b 585 144 569 160 576 156 b 710 10 590 135 697 24 b 737 0 716 3 727 0 b 765 9 749 0 759 3 b 1030 295 776 17 1011 274 l 1032 300 b 1050 328 1041 308 1050 318 b 1012 353 1050 343 1024 353 b 986 343 1002 353 994 348 b 854 190 971 330 871 206 b 828 176 842 180 835 176 b 802 190 818 176 809 183 b 681 333 791 202 696 320 b 645 353 668 344 657 353 b 613 340 634 353 626 350 b 580 304 600 330 590 315 z',
        },
        ornamentShortTrill: {
            x_min: 0,
            x_max: 725,
            y_min: 0,
            y_max: 245,
            ha: 245,
            o: 'm 429 167 l 301 325 b 256 353 291 338 282 350 b 225 340 246 353 238 350 b 16 105 158 268 88 186 b 0 72 9 96 0 86 b 29 58 0 63 7 58 b 71 76 42 58 55 62 l 158 154 b 174 160 163 158 168 160 b 197 143 181 160 187 154 b 321 10 203 135 310 24 b 350 0 327 3 338 0 b 377 7 361 0 372 3 l 533 148 b 554 160 543 158 550 160 b 577 143 562 160 566 156 b 703 10 585 135 690 24 b 732 0 708 3 720 0 b 759 7 743 0 753 3 b 1024 294 769 16 1005 272 b 1044 327 1032 305 1044 321 b 1005 353 1044 341 1018 353 b 979 343 996 353 988 348 b 848 189 963 330 864 204 b 821 174 837 179 828 174 b 796 189 811 174 804 181 b 674 331 783 202 688 318 b 641 351 662 343 651 351 b 606 340 628 351 619 350 b 573 304 593 328 583 315 b 444 167 533 259 491 213 b 429 167 439 161 433 161 z',
        },
        ornamentTremblement: {
            x_min: 1,
            x_max: 985,
            y_min: 0,
            y_max: 244,
            ha: 244,
            o: 'm 678 325 b 634 351 667 338 657 350 b 602 338 621 351 613 348 l 448 167 b 439 167 446 164 441 164 l 302 325 b 258 351 291 338 281 350 b 228 338 245 351 238 348 b 193 304 215 328 204 315 l 19 107 b 1 72 13 96 1 76 b 30 58 1 63 9 58 b 89 92 52 58 73 78 l 144 141 b 148 144 145 143 147 143 b 176 160 160 153 170 160 b 199 143 183 160 189 154 b 324 10 204 134 311 23 b 351 0 330 3 340 0 b 379 7 363 0 373 3 l 530 148 b 552 160 536 154 546 160 b 575 143 559 160 564 154 b 698 10 580 134 687 23 b 727 0 704 3 716 0 b 755 7 739 0 749 3 l 907 147 b 930 160 922 158 923 160 b 952 143 937 160 943 154 l 1077 10 b 1107 0 1084 3 1096 0 b 1133 7 1117 0 1128 3 b 1398 294 1143 16 1380 272 b 1418 327 1407 305 1418 321 b 1381 351 1418 343 1394 351 b 1354 341 1371 351 1362 348 b 1223 189 1338 328 1238 204 b 1195 174 1211 179 1202 174 b 1171 189 1185 174 1178 181 b 1048 331 1158 200 1063 318 b 1012 351 1035 343 1024 351 b 981 338 1002 351 994 350 b 948 304 968 328 958 315 b 827 166 907 258 865 212 b 815 166 824 163 818 163 b 678 325 760 226 732 264 z',
        },
        ornamentPrecompAppoggTrill: {
            x_min: 0,
            x_max: 1119,
            y_min: 0,
            y_max: 481,
            ha: 481,
            o: 'm 1015 163 b 873 328 963 223 880 318 b 828 354 860 344 847 353 b 796 341 816 354 809 351 b 763 305 783 331 773 317 b 642 168 721 261 681 215 b 636 163 641 167 639 164 b 494 328 585 223 501 318 b 449 354 481 344 468 353 b 418 341 438 354 431 351 b 384 305 405 331 395 317 b 264 168 343 261 302 215 l 242 144 b 144 88 232 124 171 88 b 79 197 81 88 79 189 l 79 648 b 60 693 79 683 71 693 b 52 691 58 693 55 693 b 0 616 3 672 0 625 l 0 207 b 121 0 0 40 68 0 b 249 68 168 0 232 53 b 279 94 262 75 271 86 b 336 144 298 111 315 128 b 367 163 350 156 360 163 b 389 145 374 163 380 157 b 514 12 395 137 501 26 b 543 1 520 4 531 1 b 569 9 553 1 563 4 b 636 73 576 14 605 43 l 658 94 b 714 144 677 111 694 128 b 746 163 729 156 739 163 b 768 145 753 163 759 157 b 893 12 773 137 880 26 b 922 1 899 4 910 1 b 948 9 932 1 942 4 l 1012 71 b 1037 94 1022 78 1030 86 b 1092 144 1054 111 1073 128 b 1123 161 1106 156 1115 161 b 1146 145 1130 161 1136 157 b 1270 12 1152 137 1259 26 b 1299 1 1276 4 1287 1 b 1326 9 1310 1 1320 4 b 1591 297 1336 19 1572 275 b 1611 328 1600 307 1611 320 b 1574 354 1611 343 1585 354 b 1548 344 1565 354 1555 350 b 1416 192 1532 331 1431 206 b 1388 177 1404 181 1395 177 b 1365 190 1380 177 1371 184 b 1243 333 1352 203 1256 321 b 1205 354 1228 346 1217 354 b 1174 341 1195 354 1187 351 b 1140 305 1161 330 1152 317 z',
        },
        ornamentPrecompSlideTrillDAnglebert: {
            x_min: 2,
            x_max: 1150,
            y_min: -367,
            y_max: 245,
            ha: 612,
            o: 'm 1058 160 b 916 327 1007 220 923 317 b 871 353 903 343 890 351 b 840 340 860 353 852 350 b 806 304 827 330 816 315 b 685 167 765 259 724 213 l 680 160 l 615 235 b 419 344 582 275 523 344 b 3 -144 258 344 3 26 b 4 -168 3 -153 3 -160 b 246 -482 24 -315 99 -422 b 458 -528 340 -521 410 -528 b 514 -526 485 -528 504 -526 b 552 -508 531 -526 552 -517 b 514 -497 552 -503 541 -498 l 503 -497 b 194 -390 432 -494 298 -488 b 69 -151 194 -390 69 -279 b 184 96 69 -60 128 27 b 328 183 202 118 258 183 b 477 96 413 183 454 118 b 559 10 510 62 552 19 b 588 0 566 3 576 0 b 613 7 598 0 609 3 b 723 112 622 14 681 73 b 789 161 733 122 776 161 b 811 144 796 161 802 156 b 936 10 816 135 923 24 b 965 0 942 3 953 0 b 991 7 975 0 985 3 b 1051 66 996 12 1022 37 b 1081 92 1063 73 1073 84 b 1136 143 1099 109 1117 127 b 1168 160 1151 154 1159 160 b 1191 144 1175 160 1181 156 b 1315 10 1197 135 1303 24 b 1344 0 1320 3 1332 0 b 1371 7 1355 0 1365 3 b 1636 295 1381 17 1617 274 b 1656 327 1644 305 1656 318 b 1619 353 1656 341 1630 353 b 1593 343 1610 353 1600 348 b 1460 190 1577 330 1476 204 b 1433 176 1449 180 1440 176 b 1410 189 1424 176 1416 183 b 1287 331 1397 202 1300 320 b 1250 353 1273 344 1261 353 b 1218 340 1240 353 1231 350 b 1185 304 1205 328 1197 315 z',
        },
        ornamentPrecompSlideTrillBach: {
            x_min: 0,
            x_max: 1048,
            y_min: -367,
            y_max: 331,
            ha: 698,
            o: 'm 1038 477 l 979 477 l 979 238 l 912 160 b 769 327 858 220 775 317 b 724 353 756 343 743 351 b 693 340 713 353 706 350 b 660 304 680 330 670 315 b 539 167 618 259 577 213 b 533 161 536 166 534 163 b 390 327 480 220 396 317 b 346 353 377 343 364 351 l 340 353 b 308 340 330 353 321 350 b 275 304 295 330 285 315 b 117 122 220 243 168 186 b 0 -144 68 62 0 -48 b 1 -168 0 -153 0 -160 b 243 -482 22 -315 96 -422 b 455 -528 337 -521 408 -528 b 511 -526 482 -528 501 -526 b 549 -508 528 -526 549 -517 b 511 -497 549 -503 539 -498 l 500 -497 b 192 -390 429 -494 295 -488 b 68 -177 192 -390 84 -298 b 66 -151 66 -168 66 -160 b 189 105 66 -58 127 35 b 232 143 203 118 216 131 b 264 161 246 154 256 161 b 285 144 271 161 276 156 b 410 10 291 135 397 24 b 439 0 416 3 428 0 b 465 7 449 0 459 3 l 531 72 b 554 92 540 78 547 86 b 611 143 573 109 590 127 b 642 161 625 154 635 161 b 664 144 649 161 655 156 b 789 10 670 135 776 24 b 818 0 795 3 806 0 b 844 7 828 0 838 3 b 904 66 850 12 876 37 b 935 92 916 73 924 84 b 979 134 949 107 963 121 l 979 -88 l 1037 -88 l 1037 151 l 1044 144 b 1168 10 1050 135 1156 24 b 1197 0 1174 3 1185 0 b 1224 7 1208 0 1218 3 b 1489 295 1234 17 1470 274 b 1509 327 1498 305 1509 318 b 1472 353 1509 341 1483 353 b 1446 343 1463 353 1453 348 b 1313 190 1430 330 1329 204 b 1286 176 1302 180 1293 176 b 1263 189 1277 176 1269 183 b 1140 331 1250 202 1153 320 b 1103 353 1126 344 1115 353 b 1071 340 1093 353 1084 350 b 1038 304 1058 328 1050 315 z',
        },
        ornamentPrecompTrillSuffixDandrieu: {
            x_min: 0,
            x_max: 949,
            y_min: 0,
            y_max: 381,
            ha: 381,
            o: 'm 1367 314 b 1250 521 1367 419 1318 482 b 1107 549 1211 537 1145 549 b 1083 546 1096 549 1087 549 b 1066 528 1071 540 1066 534 b 1079 520 1066 524 1070 520 b 1323 351 1187 517 1323 487 b 1201 171 1323 269 1260 219 b 1194 166 1201 171 1198 168 b 1056 327 1142 226 1063 317 b 1011 353 1043 343 1030 351 b 979 340 999 353 992 350 b 946 304 966 330 956 315 b 825 167 904 259 864 213 l 821 161 b 678 327 768 222 685 317 b 634 353 665 343 652 351 b 602 340 622 353 615 350 b 569 304 589 330 579 315 b 448 167 527 259 487 213 l 444 161 b 301 327 390 222 308 317 b 256 353 288 343 275 351 b 225 340 245 353 238 350 b 192 304 212 330 202 315 b 71 167 150 259 109 213 b 17 105 52 147 36 127 b 0 73 10 98 0 84 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 174 161 157 154 167 161 b 196 144 181 161 187 156 b 321 10 202 135 308 24 b 350 0 327 3 338 0 b 376 7 360 0 370 3 b 485 112 384 14 444 73 b 552 161 495 122 539 161 b 573 144 559 161 564 156 b 698 10 579 135 685 24 b 727 0 704 3 716 0 b 753 7 737 0 747 3 b 863 112 762 14 821 73 b 929 161 873 122 916 161 b 950 144 936 161 942 156 b 1076 10 956 135 1063 24 b 1104 0 1081 3 1093 0 b 1130 7 1115 0 1125 3 b 1236 108 1139 14 1195 69 b 1367 314 1297 160 1367 233 z',
        },
        ornamentPrecompDoubleCadenceUpperPrefix: {
            x_min: 0,
            x_max: 1278,
            y_min: 0,
            y_max: 247,
            ha: 247,
            o: 'm 1801 356 b 1776 346 1793 356 1783 351 b 1642 192 1760 333 1659 206 b 1614 177 1630 181 1621 177 b 1591 190 1606 177 1597 184 b 1469 334 1578 203 1482 323 b 1430 356 1453 347 1441 356 b 1398 343 1420 356 1411 353 b 1365 307 1385 331 1377 318 l 1240 164 b 1097 330 1187 226 1104 320 b 1053 356 1084 346 1071 354 b 1021 343 1041 356 1034 353 b 988 307 1008 333 998 318 b 865 168 946 262 904 216 l 861 163 b 717 330 808 223 724 320 b 672 356 704 346 691 354 b 641 343 661 356 654 353 b 608 307 628 333 618 318 b 485 168 566 262 524 216 l 455 134 b 284 46 409 88 351 46 b 16 285 148 46 32 265 b 3 295 9 292 4 295 b 0 291 1 295 0 292 b 1 285 0 288 1 285 b 308 0 42 190 157 0 b 530 120 415 1 482 63 b 559 144 539 128 549 137 b 590 163 573 156 583 163 b 612 145 598 163 603 157 b 739 10 618 137 724 24 b 768 0 744 3 756 0 b 793 7 778 0 788 3 b 903 114 802 14 861 75 l 939 144 b 971 163 953 156 963 163 b 992 145 978 163 984 157 b 1119 10 998 137 1106 24 b 1148 0 1125 3 1136 0 b 1174 7 1158 0 1168 3 b 1284 114 1182 14 1241 75 b 1316 144 1282 115 1312 141 b 1348 161 1331 156 1339 161 b 1371 145 1355 161 1361 157 b 1496 10 1377 137 1485 24 b 1525 0 1502 3 1513 0 b 1552 7 1536 0 1547 3 b 1819 298 1562 17 1800 276 b 1840 330 1829 308 1840 320 b 1832 344 1840 334 1837 340 b 1801 356 1820 351 1810 356 z',
        },
        ornamentPrecompDoubleCadenceUpperPrefixTurn: {
            x_min: 0,
            x_max: 1277,
            y_min: -62,
            y_max: 333,
            ha: 395,
            o: 'm 1273 202 l 1273 480 l 1230 480 l 1230 174 l 1097 328 b 1053 354 1084 344 1071 353 b 1021 341 1041 354 1034 351 b 988 305 1008 331 998 317 b 865 167 945 261 904 215 l 861 161 b 717 328 808 222 724 318 b 672 354 704 344 691 353 b 641 341 661 354 654 351 b 608 305 628 331 618 317 b 485 167 564 261 524 215 b 455 132 474 156 465 144 b 284 45 410 88 350 45 b 14 284 148 45 30 264 b 3 294 9 291 4 294 b 0 289 1 294 0 291 b 1 284 0 287 1 284 b 308 -1 42 189 157 -1 b 530 118 415 0 481 62 b 557 143 539 127 547 135 b 590 161 572 154 582 161 b 612 144 598 161 603 156 b 737 9 618 135 724 24 b 768 -1 743 1 755 -1 b 793 6 778 -1 788 1 b 903 112 802 13 861 73 l 937 143 b 971 161 953 154 963 161 b 992 144 978 161 984 156 b 1117 9 998 135 1104 24 b 1148 -1 1123 1 1136 -1 b 1174 6 1158 -1 1168 1 l 1230 60 l 1230 -89 l 1273 -89 l 1273 102 l 1283 112 b 1348 160 1295 125 1332 160 b 1371 144 1355 160 1361 156 b 1496 9 1377 135 1483 24 b 1525 -1 1502 1 1513 -1 b 1552 6 1536 -1 1547 1 b 1819 297 1562 16 1800 275 b 1839 328 1827 307 1839 320 b 1801 354 1839 343 1813 354 b 1776 344 1793 354 1783 350 b 1642 190 1760 331 1657 206 b 1614 176 1630 180 1621 176 b 1591 189 1606 176 1597 183 b 1467 333 1578 203 1480 321 b 1430 354 1453 346 1441 354 b 1398 341 1420 354 1411 351 b 1365 305 1385 330 1377 317 z',
        },
        ornamentPrecompTrillLowerSuffix: {
            x_min: 0,
            x_max: 859,
            y_min: -222,
            y_max: 246,
            ha: 468,
            o: 'm 1164 217 b 1031 351 1138 259 1063 351 b 1011 337 1020 351 1024 347 b 828 167 952 291 886 217 l 824 164 b 683 328 772 225 690 318 b 638 354 670 344 657 353 b 606 341 626 354 619 351 b 573 305 593 331 583 317 b 451 167 530 261 490 215 l 446 161 b 302 328 393 222 310 318 b 258 354 289 344 276 353 b 226 341 246 354 239 351 b 193 305 213 331 203 317 b 71 167 150 261 109 215 b 17 105 52 147 36 127 b 0 73 10 98 0 84 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 176 161 157 154 168 161 b 197 144 183 161 189 156 b 323 9 203 135 310 23 b 353 -1 328 1 340 -1 b 379 6 363 -1 373 1 b 488 112 387 13 446 73 l 523 143 b 556 161 539 154 549 161 b 577 144 563 161 569 156 b 703 9 583 135 690 23 b 733 -1 708 1 721 -1 b 759 6 743 -1 753 1 b 868 112 768 13 827 73 b 955 183 878 122 943 183 b 1081 107 965 183 1031 153 b 1156 -89 1128 63 1156 6 l 1156 -102 b 948 -297 1156 -204 1048 -297 b 806 -271 904 -297 850 -282 l 792 -266 b 801 -288 792 -268 795 -282 b 948 -320 809 -297 880 -320 b 1237 -50 1092 -320 1237 -199 b 1164 217 1237 75 1218 122 z',
        },
        brassScoop: {
            x_min: 1,
            x_max: 320,
            y_min: -373,
            y_max: 13,
            ha: 386,
            o: 'm 35 -537 b 461 -12 194 -518 461 -289 b 438 19 461 13 451 19 b 410 -9 425 19 413 9 b 35 -425 357 -366 92 -403 b 1 -482 13 -433 1 -438 l 1 -505 b 26 -537 1 -526 3 -537 z',
        },
        brassDoitMedium: {
            x_min: 0,
            x_max: 489,
            y_min: -40,
            y_max: 346,
            ha: 386,
            o: 'm 33 -58 b 704 468 255 -58 683 186 b 681 498 704 494 693 498 b 654 471 668 498 658 488 b 33 55 550 118 91 76 b 0 -3 12 46 0 42 l 0 -26 b 24 -58 0 -46 1 -58 z',
        },
        brassFallLipShort: {
            x_min: 1,
            x_max: 293,
            y_min: -345,
            y_max: 42,
            ha: 387,
            o: 'm 22 60 b 1 35 4 60 1 52 l 1 6 b 26 -50 3 -40 10 -43 b 32 -52 27 -50 30 -50 b 376 -469 85 -73 327 -111 b 400 -497 379 -487 387 -497 b 422 -467 412 -497 422 -491 b 32 60 422 -187 177 40 z',
        },
        brassLiftMedium: {
            x_min: 0,
            x_max: 811,
            y_min: 0,
            y_max: 852,
            ha: 852,
            o: 'm 1138 1220 b 1135 1225 1135 1223 1135 1224 b 1129 1227 1133 1227 1130 1227 b 1117 1207 1122 1227 1117 1212 l 1117 1201 b 1109 1164 1117 1187 1117 1172 b 1100 1156 1107 1161 1104 1158 b 959 1104 1058 1128 995 1140 b 929 1032 936 1081 929 1056 b 932 1007 929 1024 930 1015 b 923 976 932 995 930 985 l 914 971 b 773 919 873 942 809 955 b 743 847 750 896 743 870 b 746 821 743 838 744 829 b 737 791 746 809 744 799 l 729 783 b 588 733 687 756 624 769 b 557 661 564 710 557 684 b 560 635 557 652 559 644 b 552 605 560 624 559 612 l 543 598 b 402 547 501 570 438 583 b 372 475 379 524 372 498 b 374 449 372 467 373 458 b 366 419 374 438 373 426 l 357 412 b 216 361 315 384 252 397 b 186 289 193 338 186 312 b 189 264 186 281 187 272 b 180 233 189 252 187 240 b 171 226 177 232 174 229 b 30 176 130 199 66 212 b 0 104 7 153 0 128 b 33 0 0 88 14 0 b 49 17 40 0 49 10 b 71 63 52 35 56 49 b 212 115 102 95 154 59 b 239 186 230 134 239 160 b 236 210 239 194 238 202 b 256 249 239 225 243 236 b 397 301 288 281 340 245 b 425 372 416 320 425 346 b 422 396 425 380 423 387 b 442 435 425 410 429 422 b 583 487 474 467 526 431 b 611 557 602 505 611 531 b 608 582 611 566 609 573 b 628 621 611 596 615 608 b 769 672 660 652 711 618 b 796 743 788 691 796 717 b 793 768 796 752 795 759 b 814 806 796 782 801 793 b 955 858 845 838 897 804 b 982 929 973 877 982 903 b 979 953 982 937 981 945 b 999 992 982 968 986 979 b 1140 1045 1031 1024 1083 989 b 1168 1116 1161 1066 1168 1090 b 1138 1220 1168 1162 1145 1207 z',
        },
        brassFallRoughMedium: {
            x_min: 0,
            x_max: 811,
            y_min: 0,
            y_max: 852,
            ha: 852,
            o: 'm 30 1220 b 0 1116 23 1207 0 1162 b 27 1045 0 1090 7 1066 b 168 992 85 989 137 1024 b 189 953 181 979 186 968 b 186 929 187 945 186 937 b 213 858 186 903 194 877 b 354 806 271 804 323 838 b 374 768 367 793 372 782 b 372 743 373 759 372 752 b 399 672 372 717 380 691 b 540 621 456 618 508 652 b 560 582 553 608 557 596 b 557 557 559 573 557 566 b 585 487 557 531 566 505 b 726 435 642 431 694 467 b 746 396 739 422 743 410 b 743 372 744 387 743 380 b 770 301 743 346 752 320 b 912 249 828 245 880 281 b 932 210 924 236 929 225 b 929 186 930 202 929 194 b 956 115 929 160 937 134 b 1097 63 1014 59 1066 95 b 1119 17 1112 49 1116 35 b 1135 0 1119 10 1128 0 b 1168 104 1153 0 1168 91 b 1138 176 1168 128 1161 153 b 996 226 1102 212 1038 199 b 988 233 994 229 991 232 b 979 264 981 240 979 252 b 982 289 981 272 982 281 b 952 361 982 312 975 338 b 811 412 916 397 852 384 l 802 419 b 793 449 795 426 793 438 b 796 475 795 458 796 467 b 766 547 796 498 789 524 b 625 598 730 583 667 570 l 616 605 b 608 635 609 612 608 624 b 611 661 609 644 611 652 b 580 733 611 684 603 710 b 439 783 544 769 481 756 l 431 791 b 422 821 423 799 422 809 b 425 847 423 829 425 838 b 395 919 425 870 418 896 b 253 971 359 955 295 942 l 245 976 b 236 1007 238 985 236 995 b 239 1032 238 1015 239 1024 b 209 1104 239 1056 232 1081 b 68 1156 173 1140 109 1128 b 59 1164 63 1158 60 1161 b 50 1201 50 1172 50 1187 l 50 1207 b 39 1227 50 1212 46 1227 b 33 1225 37 1227 35 1227 b 30 1220 33 1224 33 1223 z',
        },
        brassBend: {
            x_min: 0,
            x_max: 392,
            y_min: 0,
            y_max: 282,
            ha: 282,
            o: 'm 282 0 b 552 72 369 0 456 23 b 564 92 560 75 564 84 l 564 383 b 541 406 564 395 554 406 b 518 383 528 406 518 395 l 518 107 b 282 46 435 65 357 46 b 46 107 207 46 130 65 l 46 383 b 23 406 46 395 36 406 b 0 383 10 406 0 395 l 0 92 b 13 72 0 84 4 75 b 282 0 108 23 196 0 z',
        },
        brassMuteClosed: {
            x_min: 0,
            x_max: 272,
            y_min: 0,
            y_max: 272,
            ha: 272,
            o: 'm 392 219 l 219 219 l 219 392 l 173 392 l 173 219 l 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 z',
        },
        brassMuteOpen: {
            x_min: 0,
            x_max: 304,
            y_min: 0,
            y_max: 304,
            ha: 304,
            o: 'm 219 0 b 438 219 340 0 438 98 b 219 438 438 340 340 438 b 0 219 98 438 0 340 b 219 0 0 98 98 0 z m 219 392 b 392 219 314 392 392 314 b 219 46 392 124 314 46 b 46 219 124 46 46 124 b 219 392 46 314 124 392 z',
        },
        brassFlip: {
            x_min: 0,
            x_max: 379,
            y_min: 0,
            y_max: 282,
            ha: 282,
            o: 'm 523 0 b 541 9 530 0 536 3 b 546 22 544 13 546 17 b 536 42 546 29 541 36 l 36 402 b 23 406 33 405 27 406 b 0 383 12 406 0 395 l 0 23 b 23 0 0 10 10 0 b 46 23 36 0 46 10 l 46 337 l 508 4 b 523 0 513 1 517 0 z',
        },
        brassJazzTurn: {
            x_min: 0,
            x_max: 620,
            y_min: 0,
            y_max: 245,
            ha: 245,
            o: 'm 792 190 b 765 176 780 179 772 176 b 740 190 755 176 747 183 b 629 325 727 202 644 312 b 593 347 616 338 605 347 b 562 334 583 346 575 344 b 528 298 549 323 539 310 l 406 176 b 389 168 406 176 399 168 b 374 176 384 168 379 170 b 245 325 360 192 245 325 b 200 353 232 343 219 351 b 168 340 190 353 181 350 l 17 156 b 0 121 10 147 0 132 b 16 107 0 114 4 108 b 84 143 26 107 76 137 b 118 160 92 150 108 160 b 141 143 125 160 131 154 b 265 10 147 135 253 24 b 294 0 271 3 282 0 b 321 7 305 0 315 3 b 498 160 321 7 478 158 b 521 143 505 160 513 154 b 647 10 528 135 635 24 b 675 0 652 3 664 0 b 703 7 687 0 697 3 b 874 186 713 16 855 164 b 893 220 881 196 893 212 b 873 245 890 235 883 243 b 796 194 847 245 815 213 z',
        },
        brassSmear: {
            x_min: 1,
            x_max: 306,
            y_min: 0,
            y_max: 170,
            ha: 170,
            o: 'm 193 79 b 308 0 219 50 264 0 b 439 117 396 0 438 102 b 439 120 439 118 439 118 l 441 125 b 441 128 441 127 441 127 b 433 141 441 135 439 141 b 416 130 429 141 423 137 b 343 94 390 107 370 94 b 269 153 315 94 294 121 l 265 158 b 144 245 239 190 180 245 b 6 134 62 245 10 143 b 1 114 3 125 1 118 b 7 107 1 108 4 107 b 36 122 13 107 22 112 b 92 151 55 137 65 151 b 183 89 125 151 161 112 b 189 84 184 88 187 86 z',
        },
        stringsDownBow: {
            x_min: 0,
            x_max: 312,
            y_min: 0,
            y_max: 318,
            ha: 318,
            o: 'm 37 458 b 0 420 17 458 0 441 l 0 17 b 17 0 0 7 9 0 l 37 0 b 55 17 46 0 55 7 l 55 253 b 225 278 55 269 140 278 b 395 253 310 278 395 269 l 395 17 b 413 0 395 7 403 0 l 432 0 b 449 17 441 0 449 7 l 449 420 b 412 458 449 441 432 458 z',
        },
        stringsUpBow: {
            x_min: 1,
            x_max: 249,
            y_min: 1,
            y_max: 495,
            ha: 494,
            o: 'm 181 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 z',
        },
        stringsHarmonic: {
            x_min: 0,
            x_max: 200,
            y_min: 0,
            y_max: 200,
            ha: 200,
            o: 'm 288 144 b 144 288 288 225 223 288 b 0 144 65 288 0 225 b 144 0 0 65 65 0 b 288 144 223 0 288 65 z m 144 249 b 249 144 203 249 249 203 b 144 39 249 86 203 39 b 39 144 86 39 39 86 b 144 249 39 203 86 249 z',
        },
        pluckedSnapPizzicatoAbove: {
            x_min: 0,
            x_max: 200,
            y_min: 0,
            y_max: 300,
            ha: 300,
            o: 'm 0 144 b 144 0 0 63 65 0 b 288 144 223 0 288 63 b 167 285 288 215 235 275 l 167 432 l 121 432 l 121 285 b 0 144 52 275 0 215 z m 121 246 l 121 144 l 167 144 l 167 246 b 249 144 213 236 249 193 b 144 39 249 85 202 39 b 39 144 85 39 39 85 b 121 246 39 193 73 236 z',
        },
        pluckedSnapPizzicatoBelow: {
            x_min: 0,
            x_max: 200,
            y_min: 0,
            y_max: 300,
            ha: 300,
            o: 'm 288 288 b 144 432 288 369 223 432 b 0 288 65 432 0 369 b 121 145 0 216 52 157 l 121 0 l 167 0 l 167 145 b 288 288 235 157 288 216 z m 167 186 l 167 288 l 121 288 l 121 186 b 39 288 75 196 39 238 b 144 393 39 347 86 393 b 249 288 203 393 249 347 b 167 186 249 238 215 196 z',
        },
        pluckedLeftHandPizzicato: {
            x_min: 0,
            x_max: 272,
            y_min: 0,
            y_max: 272,
            ha: 272,
            o: 'm 392 219 l 219 219 l 219 392 l 173 392 l 173 219 l 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 z',
        },
        keyboardPedalPed: {
            x_min: 0,
            x_max: 1019,
            y_min: -8,
            y_max: 555,
            ha: 563,
            o: 'm 413 799 b 179 749 327 798 261 789 b 0 517 107 713 0 632 b 122 376 0 454 37 376 b 240 540 189 376 240 452 b 225 586 240 579 233 586 b 204 549 213 586 212 573 b 138 480 199 527 181 480 b 85 549 96 480 85 517 l 85 554 b 353 762 89 690 230 762 b 373 752 364 762 373 760 b 351 708 373 740 360 723 b 274 546 330 675 274 585 b 353 416 274 508 333 444 b 412 304 372 390 412 351 b 382 228 412 275 403 256 b 334 190 363 202 361 200 b 147 29 271 167 147 88 b 196 -12 147 4 171 -12 b 343 108 239 -12 279 33 l 363 132 b 387 150 370 141 376 150 b 543 -4 445 150 467 -4 b 631 42 567 -4 586 0 l 668 78 b 685 89 674 84 680 89 b 696 75 688 89 690 86 b 809 -9 717 29 753 -9 b 946 66 854 -9 894 13 b 988 107 971 92 981 107 b 1002 89 994 107 996 99 b 1152 -4 1030 36 1077 -4 b 1329 248 1238 -4 1329 82 b 792 717 1329 556 1047 665 b 766 720 785 719 775 720 b 747 703 752 720 747 711 b 780 680 747 693 756 685 b 1223 222 1028 621 1223 504 b 1152 39 1223 122 1205 39 b 1073 229 1104 39 1073 132 b 1132 423 1073 314 1086 377 b 1142 442 1140 432 1142 436 b 1126 458 1142 451 1136 458 b 1093 446 1119 458 1109 455 b 975 216 1022 408 975 337 l 975 190 b 943 121 975 160 972 150 b 852 69 899 76 877 69 b 776 148 816 69 786 117 b 773 163 775 154 773 158 b 786 177 773 167 776 170 l 801 187 b 937 366 867 235 937 284 b 844 454 937 422 900 454 b 665 217 711 454 665 331 b 671 153 665 197 667 176 l 671 147 b 662 134 671 143 670 140 b 605 111 639 118 625 111 b 521 160 572 111 546 135 b 451 203 497 184 474 197 b 426 212 435 207 426 206 b 436 230 426 216 429 220 b 510 389 464 269 510 340 b 429 521 510 435 480 462 b 369 629 387 570 369 599 b 402 720 369 648 384 691 b 462 763 425 759 446 763 b 611 624 540 763 611 704 b 564 575 611 592 590 575 b 501 602 540 575 520 582 b 474 622 492 611 487 622 b 459 603 465 622 459 615 b 603 471 459 570 510 471 b 711 588 670 471 711 524 b 422 799 711 742 554 799 z m 815 403 b 848 343 838 403 848 383 b 780 226 848 295 824 261 b 765 217 773 220 768 217 b 759 228 762 217 759 220 b 756 282 757 245 756 262 b 815 403 756 346 772 403 z m 1405 124 b 1344 62 1369 124 1344 98 b 1405 0 1344 26 1369 0 b 1467 62 1441 0 1467 26 b 1405 124 1467 98 1441 124 z',
        },
        keyboardPedalUp: {
            x_min: 0,
            x_max: 450,
            y_min: 0,
            y_max: 450,
            ha: 450,
            o: 'm 582 396 b 516 367 554 396 533 384 b 465 340 495 347 487 340 l 458 340 b 412 377 432 340 412 348 b 432 409 412 387 419 396 l 438 415 b 490 429 451 428 464 429 b 575 501 534 429 575 452 b 501 575 575 541 541 575 b 429 490 452 575 429 534 b 415 438 429 464 428 451 l 409 432 b 377 412 396 419 387 412 b 340 458 348 412 340 432 l 340 465 b 367 516 340 487 347 495 b 396 582 384 533 396 554 b 324 648 396 625 363 648 b 252 582 285 648 252 625 b 281 516 252 554 264 533 b 308 465 301 495 308 487 l 308 458 b 271 412 308 432 300 412 b 239 432 261 412 252 419 l 233 438 b 219 490 220 451 219 464 b 147 575 219 534 196 575 b 73 501 107 575 73 541 b 158 429 73 452 114 429 b 210 415 184 429 197 428 l 216 409 b 236 377 229 396 236 387 b 190 340 236 348 216 340 l 183 340 b 132 367 161 340 153 347 b 66 396 115 384 94 396 b 0 324 23 396 0 363 b 66 252 0 285 23 252 b 132 281 94 252 115 264 b 183 308 153 301 161 308 l 190 308 b 236 271 216 308 236 300 b 216 239 236 261 229 252 l 210 233 b 158 219 197 220 184 219 b 73 147 114 219 73 196 b 147 73 73 107 107 73 b 219 158 196 73 219 114 b 233 210 219 184 220 197 l 239 216 b 271 236 252 229 261 236 b 308 190 300 236 308 216 l 308 183 b 281 132 308 161 301 153 b 252 66 264 115 252 94 b 324 0 252 23 285 0 b 396 66 363 0 396 23 b 367 132 396 94 384 115 b 340 183 347 153 340 161 l 340 190 b 377 236 340 216 348 236 b 409 216 387 236 396 229 l 415 210 b 429 158 428 197 429 184 b 501 73 429 114 452 73 b 575 147 541 73 575 107 b 490 219 575 196 534 219 b 438 233 464 219 451 220 l 432 239 b 412 271 419 252 412 261 b 458 308 412 300 432 308 l 465 308 b 516 281 487 308 495 301 b 582 252 533 264 554 252 b 648 324 625 252 648 285 b 582 396 648 363 625 396 z m 324 271 b 271 324 291 271 271 291 b 324 377 271 357 291 377 b 377 324 357 377 377 357 b 324 271 377 291 357 271 z',
        },
        pictChokeCymbal: {
            x_min: 1,
            x_max: 152,
            y_min: 2,
            y_max: 251,
            ha: 249,
            o: 'm 104 361 b 1 271 42 361 1 321 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 17 32 29 26 26 l 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 z',
        },
        wiggleArpeggiatoUp: {
            x_min: -33,
            x_max: 292,
            y_min: 0,
            y_max: 119,
            ha: 119,
            o: 'm 130 171 b -39 68 16 171 -14 91 b -48 53 -45 62 -48 58 b -29 42 -48 46 -39 42 b -10 46 -23 42 -16 43 b 56 63 12 56 29 63 b 248 0 121 63 135 0 b 419 127 361 0 410 104 b 420 132 420 130 420 131 b 412 140 420 137 416 140 b 386 130 403 140 392 134 b 334 107 367 117 353 107 b 318 108 330 107 324 107 b 240 138 289 112 265 128 b 130 171 209 153 168 171 z',
        },
        arrowheadBlackUp: {
            x_min: 0,
            x_max: 228,
            y_min: 0,
            y_max: 299,
            ha: 299,
            o: 'm 166 431 b 0 20 111 274 0 30 b 16 0 0 12 6 0 l 17 1 b 166 50 43 16 160 50 b 310 1 171 50 289 13 l 311 0 b 328 20 321 0 328 12 b 166 431 328 30 220 274 z',
        },
        arrowheadBlackDown: {
            x_min: 0,
            x_max: 228,
            y_min: 0,
            y_max: 299,
            ha: 299,
            o: 'm 166 0 b 328 410 220 157 328 400 b 311 431 328 419 321 431 l 310 429 b 166 380 289 418 171 380 b 17 429 160 380 43 415 l 16 431 b 0 410 6 431 0 419 b 166 0 0 400 111 157 z',
        },
        arpeggiatoUp: {
            x_min: 1,
            x_max: 229,
            y_min: 7,
            y_max: 1511,
            ha: 1504,
            o: 'm 219 1848 l 330 1848 l 164 2176 l 1 1848 l 121 1848 b 92 1778 115 1822 101 1800 l 89 1773 b 59 1668 75 1741 59 1702 b 96 1555 59 1614 76 1580 b 99 1551 98 1554 99 1551 l 102 1547 b 124 1496 115 1531 124 1515 b 122 1482 124 1492 124 1488 b 92 1404 118 1453 102 1428 b 59 1293 78 1372 59 1332 b 105 1172 59 1234 81 1198 b 124 1120 118 1155 124 1143 l 122 1113 b 122 1110 122 1113 122 1112 b 92 1032 118 1081 102 1057 b 59 922 78 1001 59 960 b 115 792 59 855 86 816 b 124 760 121 782 124 773 b 122 744 124 756 124 750 b 92 667 118 716 102 693 b 59 556 78 635 59 595 b 108 433 59 495 82 458 b 124 389 117 420 124 408 b 122 374 124 384 124 379 b 92 298 118 346 102 323 l 89 292 b 59 186 75 261 59 222 b 163 19 59 73 140 42 b 177 10 168 13 173 10 b 189 29 184 10 189 19 b 184 48 189 35 187 42 b 167 114 174 69 167 85 b 230 305 167 179 229 193 b 181 423 230 357 209 396 b 167 484 173 442 167 458 b 230 675 167 547 229 563 b 179 796 230 729 206 769 b 167 850 171 812 167 827 b 230 1040 167 913 229 929 b 183 1158 230 1092 209 1130 b 167 1220 173 1178 167 1194 b 230 1411 167 1284 229 1300 b 186 1526 230 1462 210 1499 b 167 1594 176 1529 167 1584 b 230 1786 167 1659 229 1673 b 219 1848 230 1809 226 1829 z',
        },
        arpeggiatoDown: {
            x_min: 1,
            x_max: 229,
            y_min: -4,
            y_max: 1500,
            ha: 1504,
            o: 'm 219 323 b 230 384 226 341 230 361 b 167 576 229 497 167 511 b 186 644 167 586 176 641 b 230 759 210 671 230 708 b 167 950 229 870 167 886 b 183 1012 167 976 173 992 b 230 1130 209 1040 230 1079 b 167 1320 229 1241 167 1257 b 179 1374 167 1344 171 1358 b 230 1495 206 1401 230 1441 b 167 1686 229 1607 167 1623 b 181 1747 167 1712 173 1728 b 230 1865 209 1774 230 1813 b 167 2056 229 1977 167 1992 b 184 2123 167 2085 174 2101 b 189 2141 187 2128 189 2136 b 177 2160 189 2151 184 2160 b 163 2151 173 2160 168 2157 b 59 1984 140 2128 59 2097 b 89 1878 59 1948 75 1909 l 92 1872 b 122 1796 102 1848 118 1824 b 124 1781 124 1791 124 1786 b 108 1737 124 1763 117 1750 b 59 1614 82 1712 59 1675 b 92 1503 59 1575 78 1535 b 122 1426 102 1477 118 1454 b 124 1410 124 1420 124 1414 b 115 1378 124 1397 121 1388 b 59 1248 86 1354 59 1315 b 92 1138 59 1210 78 1169 b 122 1060 102 1113 118 1089 b 122 1057 122 1058 122 1058 l 124 1050 b 105 998 124 1027 118 1015 b 59 877 81 972 59 936 b 92 766 59 838 78 798 b 122 688 102 742 118 717 b 124 674 124 683 124 678 b 102 624 124 655 115 639 l 99 619 b 96 615 99 619 98 616 b 59 503 76 590 59 556 b 89 397 59 468 75 429 l 92 392 b 121 323 101 370 115 348 l 1 323 l 164 -6 l 330 323 z',
        },
        repeat1Bar: {
            x_min: 0,
            x_max: 532,
            y_min: -250,
            y_max: 279,
            ha: 529,
            o: 'm 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 675 -71 b 586 -161 626 -71 586 -111 b 675 -251 586 -210 626 -251 b 766 -161 726 -251 766 -210 b 675 -71 766 -111 726 -71 z',
        },
        repeat2Bars: {
            x_min: 0,
            x_max: 762,
            y_min: -250,
            y_max: 279,
            ha: 529,
            o: 'm 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 z m 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 1007 -71 b 917 -161 958 -71 917 -111 b 1007 -251 917 -210 958 -251 b 1097 -161 1057 -251 1097 -210 b 1007 -71 1097 -111 1057 -71 z',
        },
        repeat4Bars: {
            x_min: 0,
            x_max: 1232,
            y_min: -250,
            y_max: 279,
            ha: 529,
            o: 'm 1767 380 b 1774 395 1771 386 1774 390 b 1765 402 1774 399 1771 402 l 1613 402 b 1587 380 1604 402 1597 393 l 1012 -340 b 1008 -350 1009 -343 1008 -347 b 1020 -360 1008 -356 1012 -360 l 1162 -360 b 1192 -340 1175 -360 1185 -348 z m 1436 380 b 1443 395 1440 386 1443 390 b 1434 402 1443 399 1440 402 l 1282 402 b 1256 380 1273 402 1266 393 l 681 -340 b 677 -350 678 -343 677 -347 b 688 -360 677 -356 681 -360 l 831 -360 b 861 -340 844 -360 854 -348 z m 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 z m 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 1683 -71 b 1594 -161 1634 -71 1594 -111 b 1683 -251 1594 -210 1634 -251 b 1774 -161 1734 -251 1774 -210 b 1683 -71 1774 -111 1734 -71 z',
        },
        repeatBarSlash: {
            x_min: 0,
            x_max: 532,
            y_min: -250,
            y_max: 279,
            ha: 529,
            o: 'm 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z',
        },
        csymDiminished: {
            x_min: 0,
            x_max: 473,
            y_min: 0,
            y_max: 473,
            ha: 473,
            o: 'm 341 681 b 0 341 153 681 0 530 b 341 0 0 153 153 0 b 681 341 530 0 681 153 b 341 681 681 530 530 681 z m 341 618 b 618 341 495 618 618 495 b 341 63 618 189 494 63 b 63 341 187 63 63 187 b 341 618 63 494 189 618 z',
        },
        csymHalfDiminished: {
            x_min: -16,
            x_max: 488,
            y_min: -15,
            y_max: 489,
            ha: 504,
            o: 'm 703 660 l 658 704 l 557 603 b 340 681 498 652 422 681 b -1 341 151 681 -1 530 b 78 124 -1 259 29 183 l -23 23 l 22 -22 l 122 79 b 340 0 181 30 258 0 b 680 341 528 0 680 153 b 602 559 680 423 651 500 z m 62 341 b 340 618 62 494 187 618 b 513 559 403 618 464 598 l 122 168 b 62 341 84 217 62 278 z m 616 341 b 340 63 616 189 492 63 b 167 124 276 63 216 85 l 557 514 b 616 341 596 465 616 405 z',
        },
        csymAugmented: {
            x_min: 0,
            x_max: 395,
            y_min: 1,
            y_max: 396,
            ha: 395,
            o: 'm 569 318 l 317 318 l 317 570 l 253 570 l 253 318 l 0 318 l 0 255 l 253 255 l 253 1 l 317 1 l 317 255 l 569 255 z',
        },
        csymMajorSeventh: {
            x_min: 0,
            x_max: 558,
            y_min: 1,
            y_max: 477,
            ha: 476,
            o: 'm 402 687 l 0 1 l 804 1 z m 402 562 l 693 65 l 111 65 z',
        },
        csymMinor: {
            x_min: 0,
            x_max: 325,
            y_min: 216,
            y_max: 260,
            ha: 44,
            o: 'm 468 374 l 0 374 l 0 311 l 468 311 z',
        },
        csymParensLeftTall: {
            x_min: 1,
            x_max: 185,
            y_min: 0,
            y_max: 997,
            ha: 997,
            o: 'm 266 48 b 261 65 266 55 264 62 b 92 719 157 212 92 400 b 262 1371 92 1037 154 1228 b 266 1394 266 1378 266 1394 l 266 1424 b 264 1436 266 1431 266 1436 b 259 1434 262 1436 259 1434 b 1 719 84 1261 1 1011 b 259 1 1 429 79 177 b 264 0 261 0 262 0 b 266 9 265 0 266 6 z',
        },
        csymParensRightTall: {
            x_min: -20,
            x_max: 164,
            y_min: 0,
            y_max: 997,
            ha: 997,
            o: 'm -29 9 b -26 0 -29 6 -27 0 b -22 1 -24 0 -23 0 b 236 719 158 177 236 429 b -22 1434 236 1011 154 1261 b -26 1436 -22 1434 -24 1436 b -29 1424 -29 1436 -29 1431 l -29 1394 b -24 1371 -29 1394 -29 1378 b 145 719 84 1228 145 1037 b -23 65 145 400 81 212 b -29 48 -26 62 -29 55 z',
        },
        csymBracketLeftTall: {
            x_min: 0,
            x_max: 155,
            y_min: 0,
            y_max: 1000,
            ha: 1000,
            o: 'm 217 0 b 223 9 220 0 223 4 l 223 37 b 217 46 223 42 220 46 l 92 46 l 92 1394 l 217 1394 b 223 1403 220 1394 223 1398 l 223 1431 b 217 1440 223 1436 220 1440 l 6 1440 b 0 1436 3 1440 0 1439 l 0 4 b 6 0 0 1 3 0 z',
        },
        csymBracketRightTall: {
            x_min: 1,
            x_max: 156,
            y_min: 0,
            y_max: 1000,
            ha: 1000,
            o: 'm 219 0 b 225 4 222 0 225 1 l 225 1436 b 219 1440 225 1439 222 1440 l 7 1440 b 1 1431 4 1440 1 1436 l 1 1403 b 7 1394 1 1398 4 1394 l 132 1394 l 132 46 l 7 46 b 1 37 4 46 1 42 l 1 9 b 7 0 1 4 4 0 z',
        },
        csymParensLeftVeryTall: {
            x_min: 0,
            x_max: 122,
            y_min: 0,
            y_max: 993,
            ha: 993,
            o: 'm 176 32 b 171 49 176 39 174 46 b 60 716 104 194 60 399 b 173 1382 60 1032 101 1241 b 176 1405 176 1390 176 1405 l 176 1427 b 173 1430 176 1428 174 1430 b 0 716 40 1297 0 978 b 170 3 0 428 50 179 b 171 0 170 1 170 0 b 176 6 173 0 176 4 z',
        },
        csymParensRightVeryTall: {
            x_min: -15,
            x_max: 107,
            y_min: 0,
            y_max: 993,
            ha: 993,
            o: 'm -22 6 b -17 0 -22 4 -19 0 b -16 3 -16 0 -16 1 b 154 716 104 179 154 428 b -19 1430 154 978 114 1297 b -22 1427 -20 1430 -22 1428 l -22 1405 b -19 1382 -22 1405 -22 1390 b 94 716 53 1241 94 1032 b -17 49 94 399 50 194 b -22 32 -20 46 -22 39 z',
        },
        csymDiagonalArrangementSlash: {
            x_min: 0,
            x_max: 999,
            y_min: 0,
            y_max: 1000,
            ha: 1000,
            o: 'm 1439 1380 l 1377 1440 l 0 60 l 62 0 z',
        },
        accSagittal5v7KleismaUp: {
            x_min: 0,
            x_max: 156,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 -35 b 135 -112 68 -86 99 -112 b 225 68 194 -112 225 -53 l 180 68 b 144 -4 180 20 168 -4 b 122 0 138 -4 131 -3 b 23 248 86 14 52 96 l 0 248 z',
        },
        accSagittal5v7KleismaDown: {
            x_min: 0,
            x_max: 156,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 23 -248 b 122 0 52 -96 86 -14 b 144 4 131 3 138 4 b 180 -68 168 4 180 -20 l 225 -68 b 135 112 225 53 194 112 b 45 35 99 112 68 86 l 45 517 l 0 517 z',
        },
        accSagittal5CommaUp: {
            x_min: 0,
            x_max: 156,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 225 -517 l 225 248 l 203 248 l 0 -112 l 0 -284 l 180 33 l 180 -517 z',
        },
        accSagittal5CommaDown: {
            x_min: 0,
            x_max: 156,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 180 517 l 180 -33 l 0 284 l 0 112 l 203 -248 l 225 -248 l 225 517 z',
        },
        accSagittal7CommaUp: {
            x_min: 0,
            x_max: 156,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 248 l 0 -517 l 45 -517 l 45 112 l 89 112 b 180 -68 150 112 180 53 l 180 -248 l 225 -248 l 225 68 b 135 248 225 187 194 248 z',
        },
        accSagittal7CommaDown: {
            x_min: 0,
            x_max: 156,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 135 -248 b 225 -68 194 -248 225 -187 l 225 248 l 180 248 l 180 68 b 89 -112 180 -53 150 -112 l 45 -112 l 45 517 l 0 517 l 0 -248 z',
        },
        accSagittal25SmallDiesisUp: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -157 l 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 68 l 0 -33 l 315 135 l 315 10 z',
        },
        accSagittal25SmallDiesisDown: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 315 -10 l 315 -135 l 0 33 l 0 -68 l 337 -248 l 360 -248 l 360 517 l 315 517 l 315 89 l 0 259 l 0 157 z',
        },
        accSagittal35MediumDiesisUp: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 l 0 -112 z',
        },
        accSagittal35MediumDiesisDown: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 203 -248 l 315 -248 b 405 -68 374 -248 405 -187 l 405 248 l 360 248 l 360 68 b 271 -112 360 -53 330 -112 l 225 -112 l 225 517 l 180 517 l 180 -33 l 0 284 z',
        },
        accSagittal11MediumDiesisUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 l 0 -89 l 0 -248 z',
        },
        accSagittal11MediumDiesisDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 248 l 0 89 l 248 -248 l 495 89 l 495 248 l 271 -53 l 271 517 l 225 517 l 225 -53 z',
        },
        accSagittal11LargeDiesisUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 112 l 315 112 b 449 -68 405 112 449 53 l 449 -248 l 495 -248 l 495 68 b 360 248 495 187 449 248 l 135 248 b 0 68 45 248 0 187 z',
        },
        accSagittal11LargeDiesisDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 360 -248 b 495 -68 449 -248 495 -187 l 495 248 l 449 248 l 449 68 b 315 -112 449 -53 405 -112 l 271 -112 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',
        },
        accSagittal35LargeDiesisUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 l 540 112 l 540 274 l 271 -58 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',
        },
        accSagittal35LargeDiesisDown: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 l 540 112 l 540 274 l 269 -58 l 269 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',
        },
        accSagittalSharp25SDown: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 112 -112 0 -53 36 -112 l 135 -112 l 135 -517 l 180 -517 l 180 -89 b 248 26 206 -65 229 -27 b 315 -89 264 -27 287 -65 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 122 0 216 96 176 14 b 94 -4 112 -3 102 -4 b 45 68 60 -4 45 20 z',
        },
        accSagittalFlat25SUp: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 94 4 45 -20 60 4 b 122 0 102 4 112 3 b 248 -248 176 -14 216 -96 b 399 4 261 -171 297 4 b 449 -68 433 4 449 -20 l 495 -68 b 383 112 495 53 458 112 l 360 112 l 360 517 l 315 517 l 315 89 b 248 -26 287 65 264 27 b 180 89 229 27 206 65 l 180 517 l 135 517 l 135 112 l 112 112 b 0 -68 36 112 0 53 z',
        },
        accSagittalSharp7CDown: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 112 l 89 112 b 180 104 124 112 154 109 l 180 -517 l 225 -517 l 225 89 b 315 -68 285 60 315 9 l 315 -248 l 360 -248 l 360 68 b 135 248 360 187 285 248 l 0 248 z',
        },
        accSagittalFlat7CUp: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 135 -248 b 360 -68 285 -248 360 -187 l 360 248 l 315 248 l 315 68 b 225 -89 315 -9 285 -60 l 225 517 l 180 517 l 180 -104 b 89 -112 154 -109 124 -112 l 45 -112 l 45 517 l 0 517 z',
        },
        accSagittalSharp5CDown: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -517 l 45 71 l 180 -56 l 180 -517 l 225 -517 l 225 -98 l 405 -268 l 405 -112 l 23 248 l 0 248 l 0 -517 z',
        },
        accSagittalFlat5CUp: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 517 l 0 -248 l 23 -248 l 405 112 l 405 268 l 225 98 l 225 517 l 180 517 l 180 56 l 45 -71 l 45 517 z',
        },
        accSagittalSharp5v7kDown: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -112 l 0 -276 l 135 -82 l 135 -517 l 180 -517 l 180 -17 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 z',
        },
        accSagittalFlat5v7kUp: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 248 -248 l 360 -248 b 495 -68 449 -248 495 -189 l 495 248 l 449 248 l 449 68 b 360 -107 449 -30 420 -89 l 360 517 l 315 517 l 315 -112 l 271 -112 l 180 17 l 180 517 l 135 517 l 135 82 l 0 276 l 0 112 z',
        },
        accSagittalSharp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 180 -53 l 180 -517 l 225 -517 l 225 0 l 292 85 l 360 0 l 360 -517 l 405 -517 l 405 -53 l 585 -274 l 585 -112 l 292 248 l 0 -112 l 0 -274 z',
        },
        accSagittalFlat: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 274 l 0 112 l 292 -248 l 585 112 l 585 274 l 405 53 l 405 517 l 360 517 l 360 0 l 292 -85 l 225 0 l 225 517 l 180 517 l 180 53 z',
        },
        accSagittalSharp5v7kUp: {
            x_min: 0,
            x_max: 312,
            y_min: -361,
            y_max: 172,
            ha: 533,
            o: 'm 45 -517 l 45 -10 b 135 -92 68 -48 98 -75 l 135 -520 l 180 -520 l 180 -108 b 248 -115 203 -112 225 -115 b 271 -112 256 -115 264 -115 l 271 -517 l 315 -517 l 315 -107 b 449 68 405 -89 449 -30 l 405 68 b 297 -4 405 19 369 -4 b 23 248 131 -4 56 85 l 0 248 l 0 -517 z',
        },
        accSagittalFlat5v7kDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 361,
            ha: 533,
            o: 'm 0 517 l 0 -248 l 23 -248 b 297 4 56 -85 131 4 b 405 -68 369 4 405 -19 l 449 -68 b 315 107 449 30 405 89 l 315 517 l 271 517 l 271 112 b 248 115 264 115 256 115 b 180 108 225 115 203 112 l 180 520 l 135 520 l 135 92 b 45 10 98 75 68 48 l 45 517 z',
        },
        accSagittalSharp5CUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 -112 z',
        },
        accSagittalFlat5CDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 428 -248 l 449 -248 l 449 517 l 405 517 l 405 -75 l 315 0 l 315 517 l 271 517 l 271 39 l 180 115 l 180 517 l 135 517 l 135 153 l 0 266 z',
        },
        accSagittalSharp7CUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 112 l 135 112 l 135 -517 l 180 -517 l 180 108 b 271 89 213 105 243 99 l 271 -517 l 315 -517 l 315 73 b 405 -68 374 45 405 -3 l 405 -248 l 449 -248 l 449 68 b 135 248 449 187 346 248 l 0 248 z',
        },
        accSagittalFlat7CDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 135 -248 b 449 -68 346 -248 449 -187 l 449 248 l 405 248 l 405 68 b 315 -73 405 3 374 -45 l 315 517 l 271 517 l 271 -89 b 180 -108 243 -99 213 -105 l 180 517 l 135 517 l 135 -112 l 45 -112 l 45 517 l 0 517 z',
        },
        accSagittalSharp25SUp: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -30 l 495 143 l 495 14 l 0 -157 l 0 -255 l 225 -177 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 l 0 68 z',
        },
        accSagittalFlat25SDown: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 l 517 -248 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 115 l 405 517 l 360 517 l 360 130 l 271 161 l 271 517 l 225 517 l 225 177 l 0 255 l 0 157 l 495 -14 l 495 -143 l 0 30 z',
        },
        accSagittalSharp35MUp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -112 l 0 -274 l 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 z',
        },
        accSagittalFlat35MDown: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 292 -248 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 449 -96 540 -17 510 -72 l 449 517 l 405 517 l 405 -109 b 360 -112 390 -112 376 -112 l 315 -112 l 315 517 l 271 517 l 271 -58 l 180 53 l 180 517 l 135 517 l 135 108 l 0 274 l 0 112 z',
        },
        accSagittalSharp11MUp: {
            x_min: 0,
            x_max: 469,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -112 l 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 z',
        },
        accSagittalFlat11MDown: {
            x_min: 0,
            x_max: 469,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 337 -248 l 675 112 l 675 271 l 495 79 l 495 517 l 449 517 l 449 30 l 360 -65 l 360 517 l 315 517 l 315 -65 l 225 30 l 225 517 l 180 517 l 180 79 l 0 271 l 0 112 z',
        },
        accSagittalSharp11LUp: {
            x_min: 0,
            x_max: 469,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 112 l 449 112 l 449 -517 l 495 -517 l 495 104 b 631 -68 585 82 631 26 l 631 -248 l 675 -248 l 675 68 b 449 248 675 187 600 248 l 225 248 b 0 68 75 248 0 187 z',
        },
        accSagittalFlat11LDown: {
            x_min: 0,
            x_max: 469,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 449 -248 b 675 -68 600 -248 675 -187 l 675 248 l 631 248 l 631 68 b 495 -104 631 -26 585 -82 l 495 517 l 449 517 l 449 -112 l 360 -112 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',
        },
        accSagittalSharp35LUp: {
            x_min: 0,
            x_max: 500,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 71 l 452 -17 l 452 -517 l 495 -517 l 495 -56 l 720 -268 l 720 -112 l 337 248 l 225 248 b 0 68 75 248 0 187 z',
        },
        accSagittalFlat35LDown: {
            x_min: 0,
            x_max: 500,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 l 720 112 l 720 268 l 495 56 l 495 517 l 452 517 l 452 17 l 360 -71 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',
        },
        accSagittalDoubleSharp25SDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 135 -112 0 -53 45 -112 b 243 -62 180 -112 215 -95 l 89 -503 l 143 -517 l 292 -82 l 445 -517 l 495 -503 l 343 -62 b 449 -112 372 -95 408 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 z',
        },
        accSagittalDoubleFlat25SUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 112 4 45 -20 68 4 b 292 -248 236 4 274 -148 b 475 4 315 -148 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 b 343 62 408 112 372 95 l 495 503 l 445 517 l 292 82 l 143 517 l 89 503 l 243 62 b 135 112 215 95 180 112 b 0 -68 45 112 0 53 z',
        },
        accSagittalDoubleSharp7CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -503 l 52 -517 l 203 -82 l 354 -517 l 405 -503 l 230 0 l 271 108 b 495 -68 420 92 495 35 l 495 -248 l 540 -248 l 540 68 b 225 248 540 187 435 248 l 89 248 l 89 112 l 135 112 l 174 0 z m 213 112 l 203 82 l 192 112 z',
        },
        accSagittalDoubleFlat7CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 174 0 l 135 -112 l 89 -112 l 89 -248 l 225 -248 b 540 -68 435 -248 540 -187 l 540 248 l 495 248 l 495 68 b 271 -108 495 -35 420 -92 l 230 0 l 405 503 l 354 517 l 203 82 l 52 517 l 0 503 z m 192 -112 l 203 -82 l 213 -112 z',
        },
        accSagittalDoubleSharp5CDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 405 -503 l 230 0 l 232 4 l 585 -264 l 585 -112 l 112 248 l 89 248 l 89 112 l 151 68 l 174 0 l 0 -503 l 52 -517 l 203 -82 l 354 -517 z',
        },
        accSagittalDoubleFlat5CUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 354 517 l 203 82 l 52 517 l 0 503 l 174 0 l 151 -68 l 89 -112 l 89 -248 l 112 -248 l 585 112 l 585 264 l 232 -4 l 230 0 l 405 503 z',
        },
        accSagittalDoubleSharp5v7kDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -274 l 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 l 0 -112 z',
        },
        accSagittalDoubleFlat5v7kUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 292 -248 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 360 -112 540 -53 480 -112 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 252 -35 l 0 274 z',
        },
        accSagittalDoubleSharp: {
            x_min: 0,
            x_max: 469,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 540 -503 l 366 0 l 380 45 l 675 -271 l 675 -112 l 337 248 l 0 -112 l 0 -271 l 295 45 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 z',
        },
        accSagittalDoubleFlat: {
            x_min: 0,
            x_max: 469,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 295 -45 l 0 271 l 0 112 l 337 -248 l 675 112 l 675 271 l 380 -45 l 366 0 l 540 503 z',
        },
        accSagittal7v11KleismaUp: {
            x_min: 0,
            x_max: 219,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -45 b 248 -112 200 -89 225 -112 b 315 68 292 -112 315 -53 l 271 68 b 248 -4 271 20 264 -4 b 236 0 245 -4 240 -3 b 157 248 213 14 187 96 b 78 0 127 96 101 14 b 65 -4 73 -3 68 -4 b 45 68 50 -4 45 20 l 0 68 b 68 -112 0 -53 23 -112 z',
        },
        accSagittal7v11KleismaDown: {
            x_min: 0,
            x_max: 219,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 68 112 b 0 -68 23 112 0 53 l 45 -68 b 65 4 45 -20 50 4 b 78 0 68 4 73 3 b 157 -248 101 -14 127 -96 b 236 0 187 -96 213 -14 b 248 4 240 3 245 4 b 271 -68 264 4 271 -20 l 315 -68 b 248 112 315 53 292 112 b 180 45 225 112 200 89 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 z',
        },
        accSagittal17CommaUp: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 -40 b 315 -118 248 -92 279 -118 b 405 62 374 -118 405 -59 l 360 62 b 324 -10 360 14 348 -10 b 302 -6 318 -10 311 -9 b 206 217 268 9 235 84 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',
        },
        accSagittal17CommaDown: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 206 -217 b 302 6 235 -84 268 -9 b 324 10 311 9 318 10 b 360 -62 348 10 360 -14 l 405 -62 b 315 118 405 59 374 118 b 225 40 279 118 248 92 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',
        },
        accSagittal55CommaUp: {
            x_min: 0,
            x_max: 219,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 248 l 0 -517 l 45 -517 l 45 58 l 315 -274 l 315 -112 l 23 248 z',
        },
        accSagittal55CommaDown: {
            x_min: 0,
            x_max: 219,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 23 -248 l 315 112 l 315 274 l 45 -58 l 45 517 l 0 517 l 0 -248 z',
        },
        accSagittal7v11CommaUp: {
            x_min: 0,
            x_max: 188,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 248 l 135 248 b 0 68 45 248 0 187 z',
        },
        accSagittal7v11CommaDown: {
            x_min: 0,
            x_max: 188,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 271 -248 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',
        },
        accSagittal5v11SmallDiesisUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 73 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -40 b 360 -118 295 -92 325 -118 b 449 62 420 -118 449 -59 l 405 62 b 369 -10 405 14 393 -10 b 348 -6 363 -10 356 -9 b 251 217 312 9 279 84 l 248 248 l 135 248 b 0 73 45 248 0 189 z',
        },
        accSagittal5v11SmallDiesisDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -73 b 135 -248 0 -189 45 -248 l 248 -248 l 251 -217 b 348 6 279 -84 312 -9 b 369 10 356 9 363 10 b 405 -62 393 10 405 -14 l 449 -62 b 360 118 449 59 420 118 b 271 40 325 118 295 92 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',
        },
        accSagittalSharp5v11SDown: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 242 37 203 -23 225 -3 b 315 -89 262 -23 285 -63 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z',
        },
        accSagittalFlat5v11SUp: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -127 b 399 4 261 -171 297 4 b 449 -68 433 4 449 -20 l 495 -68 b 383 112 495 53 458 112 l 360 112 l 360 517 l 315 517 l 315 89 b 242 -37 285 63 262 23 b 180 23 225 3 203 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',
        },
        accSagittalSharp7v11CDown: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 89 -112 l 89 -517 l 135 -517 l 135 -95 b 206 37 163 -73 187 -30 b 271 -23 225 -3 248 -23 l 271 -517 l 315 -517 l 315 -23 l 383 -23 b 449 -203 428 -23 449 -84 l 495 -203 b 405 68 495 -23 465 68 l 292 68 b 203 248 258 68 228 127 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 l 0 68 b 89 -112 0 -52 30 -112 z',
        },
        accSagittalFlat7v11CUp: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 89 112 b 0 -68 30 112 0 52 l 45 -68 b 81 3 45 -20 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 b 292 -68 228 -127 258 -68 l 405 -68 b 495 203 465 -68 495 23 l 449 203 b 383 23 449 84 428 23 l 315 23 l 315 517 l 271 517 l 271 23 b 206 -37 248 23 225 3 b 135 95 187 30 163 73 l 135 517 l 89 517 z',
        },
        accSagittalSharp55CDown: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 -112 z',
        },
        accSagittalFlat55CUp: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 337 -248 l 360 -248 l 360 517 l 315 517 l 315 -65 l 180 78 l 180 517 l 135 517 l 135 125 l 0 271 z',
        },
        accSagittalSharp17CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -89 292 13 321 -55 l 360 -517 l 405 -517 l 405 -112 l 428 -112 b 540 68 504 -112 540 -53 l 495 68 b 445 -4 495 20 480 -4 b 292 248 343 -4 307 171 l 180 248 b 0 68 60 248 0 187 l 0 -248 z',
        },
        accSagittalFlat17CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 248 l 0 -68 b 180 -248 0 -187 60 -248 l 292 -248 b 445 4 307 -171 343 4 b 495 -68 480 4 495 -20 l 540 -68 b 428 112 540 53 504 112 l 405 112 l 405 517 l 360 517 l 360 89 b 271 -112 321 55 292 -13 l 225 -112 l 225 517 l 180 517 l 180 -109 b 45 68 89 -95 45 -36 l 45 248 z',
        },
        accSagittalSharp7v11kDown: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -32 l 405 138 l 405 13 l 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 68 z',
        },
        accSagittalFlat7v11kUp: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 l 428 -248 l 449 -248 l 449 517 l 405 517 l 405 86 l 271 144 l 271 517 l 225 517 l 225 161 l 0 256 l 0 157 l 405 -13 l 405 -138 l 0 32 z',
        },
        accSagittalSharp7v11kUp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 135 -112 l 135 -517 l 180 -517 l 180 -105 b 271 -23 217 -94 248 -65 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 l 0 68 b 135 -112 0 -53 45 -112 z',
        },
        accSagittalFlat7v11kDown: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 135 112 b 0 -68 45 112 0 53 l 45 -68 b 112 4 45 -20 68 4 b 292 -248 236 4 274 -148 b 475 4 315 -148 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 l 449 517 l 405 517 l 405 105 b 315 23 369 94 337 65 l 315 517 l 271 517 l 271 23 b 180 105 248 65 217 94 l 180 517 l 135 517 z',
        },
        accSagittalSharp17CUp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalFlat17CDown: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 b 475 4 312 -150 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 l 449 517 l 405 517 l 405 105 b 315 23 369 94 337 65 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalSharp55CUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -517 l 45 78 l 135 10 l 135 -517 l 180 -517 l 180 -23 l 271 -92 l 271 -517 l 315 -517 l 315 -127 l 495 -264 l 495 -112 l 23 248 l 0 248 l 0 -517 z',
        },
        accSagittalFlat55CDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 517 l 0 -248 l 23 -248 l 495 112 l 495 264 l 315 127 l 315 517 l 271 517 l 271 92 l 180 23 l 180 517 l 135 517 l 135 -10 l 45 -78 l 45 517 z',
        },
        accSagittalSharp7v11CUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 86 45 6 89 58 l 180 -517 l 225 -517 l 225 98 b 315 109 252 104 282 108 l 315 -517 l 360 -517 l 360 112 l 449 112 l 449 -517 l 495 -517 l 495 248 l 360 248 b 0 68 121 248 0 189 z',
        },
        accSagittalFlat7v11CDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 360 -248 0 -189 121 -248 l 495 -248 l 495 517 l 449 517 l 449 -112 l 360 -112 l 360 517 l 315 517 l 315 -109 b 225 -98 282 -108 252 -104 l 225 517 l 180 517 l 180 -86 b 45 68 89 -58 45 -6 l 45 248 l 0 248 z',
        },
        accSagittalSharp5v11SUp: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 -23 b 449 -105 383 -65 415 -94 l 449 -517 l 495 -517 l 495 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 z',
        },
        accSagittalFlat5v11SDown: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 225 -248 0 -187 76 -248 l 337 -248 b 520 4 360 -150 396 4 b 585 -68 563 4 585 -20 l 631 -68 b 495 112 631 53 585 112 l 495 517 l 449 517 l 449 105 b 360 23 415 94 383 65 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',
        },
        accSagittalDoubleSharp5v11SDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 341 -60 b 449 -112 370 -95 405 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalDoubleFlat5v11SUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 b 475 4 312 -150 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 b 341 60 405 112 370 95 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalDoubleSharp7v11CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 112 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -503 l 275 0 l 278 4 b 337 -23 295 -13 315 -23 l 405 -23 b 495 -203 465 -23 495 -84 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 127 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 112 -112 0 -52 36 -112 z',
        },
        accSagittalDoubleFlat7v11CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 112 112 b 0 -68 36 112 0 52 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 b 360 -68 271 -127 310 -68 l 428 -68 b 540 203 503 -68 540 23 l 495 203 b 405 23 495 84 465 23 l 337 23 b 278 -4 315 23 295 13 l 275 0 l 449 503 l 397 517 l 248 81 l 95 517 l 45 501 l 193 73 b 112 112 170 99 143 112 z',
        },
        accSagittalDoubleSharp55CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 428 248 l 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 z',
        },
        accSagittalDoubleFlat55CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 449 -248 l 449 -112 l 386 -59 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 307 7 l 0 266 l 0 112 l 428 -248 z',
        },
        accSagittalDoubleSharp17CDown: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 387 -62 b 495 -112 416 -95 452 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 l 0 -248 z',
        },
        accSagittalDoubleFlat17CUp: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 248 l 0 -68 b 225 -248 0 -187 76 -248 l 337 -248 b 520 4 360 -150 396 4 b 585 -68 563 4 585 -20 l 631 -68 b 495 112 631 53 585 112 b 387 62 452 112 416 95 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 271 -112 b 45 68 120 -112 45 -53 l 45 248 z',
        },
        accSagittalDoubleSharp7v11kDown: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 l 0 -30 l 366 96 l 399 0 l 392 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 276 -517 l 428 -82 l 579 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 z m 416 115 l 442 124 l 428 82 z',
        },
        accSagittalDoubleFlat7v11kUp: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 517 -248 l 540 -248 l 540 -157 l 507 -145 l 455 0 l 631 503 l 579 517 l 428 82 l 276 517 l 225 503 l 353 135 l 0 255 l 0 157 l 392 23 l 399 0 l 366 -96 l 0 30 l 0 -68 z m 428 -82 l 442 -124 l 416 -115 z',
        },
        accSagittal23CommaUp: {
            x_min: 0,
            x_max: 188,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 -4 b 68 -23 53 -17 60 -23 l 180 -23 b 225 -203 210 -23 225 -82 l 271 -203 b 206 68 271 -23 248 68 l 89 68 b 23 248 71 68 48 127 l 0 248 z',
        },
        accSagittal23CommaDown: {
            x_min: 0,
            x_max: 188,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 23 -248 b 89 -68 48 -127 71 -68 l 206 -68 b 271 203 248 -68 271 23 l 225 203 b 180 23 225 82 210 23 l 68 23 b 45 4 60 23 53 17 l 45 517 l 0 517 z',
        },
        accSagittal5v19CommaUp: {
            x_min: 0,
            x_max: 156,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 248 l 203 248 b 86 112 151 157 112 112 b 45 157 59 112 45 127 l 0 157 b 76 23 0 72 26 27 l 0 -112 z',
        },
        accSagittal5v19CommaDown: {
            x_min: 0,
            x_max: 156,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 76 -23 b 0 -157 26 -27 0 -72 l 45 -157 b 86 -112 45 -127 59 -112 b 203 -248 112 -112 151 -157 l 225 -248 l 225 517 l 180 517 l 180 -33 l 0 284 z',
        },
        accSagittal5v23SmallDiesisUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 -4 b 248 -23 233 -17 240 -23 l 360 -23 b 405 -203 390 -23 405 -82 l 449 -203 b 386 68 449 -23 428 68 l 271 68 b 203 248 251 68 228 127 l 0 -112 z',
        },
        accSagittal5v23SmallDiesisDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 203 -248 b 271 -68 228 -127 251 -68 l 386 -68 b 449 203 428 -68 449 23 l 405 203 b 360 23 405 82 390 23 l 248 23 b 225 4 240 23 233 17 l 225 517 l 180 517 l 180 -33 l 0 284 z',
        },
        accSagittalSharp5v23SDown: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 6 b 89 -23 59 -13 73 -23 l 180 -23 l 180 -517 l 225 -517 l 225 -23 l 292 -23 b 360 -203 337 -23 360 -84 l 405 -203 b 315 68 405 -23 374 68 l 112 68 b 23 248 78 68 48 127 l 0 248 z',
        },
        accSagittalFlat5v23SUp: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 23 -248 b 112 -68 48 -127 78 -68 l 315 -68 b 405 203 374 -68 405 23 l 360 203 b 292 23 360 84 337 23 l 225 23 l 225 517 l 180 517 l 180 23 l 89 23 b 45 -6 73 23 59 13 l 45 517 l 0 517 z',
        },
        accSagittalSharp5v19CDown: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 89 -112 0 -52 30 -112 l 89 -517 l 135 -517 l 135 -95 b 225 112 173 -65 203 4 l 271 112 l 271 -517 l 315 -517 l 315 107 b 405 -68 374 89 405 30 l 405 -248 l 449 -248 l 449 68 b 315 248 449 189 405 248 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 23 z',
        },
        accSagittalFlat5v19CUp: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 81 3 45 -23 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 l 315 -248 b 449 -68 405 -248 449 -189 l 449 248 l 405 248 l 405 68 b 315 -107 405 -30 374 -89 l 315 517 l 271 517 l 271 -112 l 225 -112 b 135 95 203 -4 173 65 l 135 517 l 89 517 l 89 112 b 0 -68 30 112 0 52 z',
        },
        accSagittalSharp23CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 135 -82 l 135 -517 l 180 -517 l 180 -17 l 239 68 b 315 -23 261 7 287 -23 l 315 -517 l 360 -517 l 360 -23 l 428 -23 b 495 -203 472 -23 495 -84 l 540 -203 b 449 68 540 -23 510 68 l 337 68 b 248 248 302 68 271 127 l 0 -112 l 0 -276 z',
        },
        accSagittalFlat23CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 276 l 0 112 l 248 -248 b 337 -68 271 -127 302 -68 l 449 -68 b 540 203 510 -68 540 23 l 495 203 b 428 23 495 84 472 23 l 360 23 l 360 517 l 315 517 l 315 23 b 239 -68 287 23 261 -7 l 180 17 l 180 517 l 135 517 l 135 82 z',
        },
        accSagittalSharp23CUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 14 b 112 -23 63 -10 86 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 360 -23 b 449 -203 420 -23 449 -84 l 495 -203 b 383 68 495 -23 458 68 l 135 68 b 23 248 85 68 48 127 l 0 248 z',
        },
        accSagittalFlat23CDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 23 -248 b 135 -68 48 -127 85 -68 l 383 -68 b 495 203 458 -68 495 23 l 449 203 b 360 23 449 84 420 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 -14 86 23 63 10 l 45 517 l 0 517 z',
        },
        accSagittalSharp5v19CUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -112 l 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z',
        },
        accSagittalFlat5v19CDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 112 20 b 0 -157 37 6 0 -53 l 45 -157 b 130 -68 45 -98 73 -68 b 428 -248 186 -68 285 -127 l 449 -248 l 449 517 l 405 517 l 405 -75 l 315 0 l 315 517 l 271 517 l 271 39 l 180 115 l 180 517 l 135 517 l 135 153 l 0 266 l 0 112 z',
        },
        accSagittalSharp5v23SUp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 14 b 383 -23 334 -10 357 -23 l 405 -23 l 405 -517 l 449 -517 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z',
        },
        accSagittalFlat5v23SDown: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 274 l 0 112 l 292 -248 b 405 -68 318 -127 356 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 449 517 l 405 517 l 405 23 l 383 23 b 315 -14 357 23 334 10 l 315 517 l 271 517 l 271 -58 l 180 53 l 180 517 l 135 517 l 135 108 z',
        },
        accSagittalDoubleSharp5v23SDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 52 -517 l 203 -81 l 354 -517 l 405 -503 l 239 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 225 68 b 112 248 176 68 138 127 l 89 248 l 89 112 b 170 -14 109 45 135 0 l 0 -501 z',
        },
        accSagittalDoubleFlat5v23SUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 501 l 170 14 b 89 -112 135 0 109 -45 l 89 -248 l 112 -248 b 225 -68 138 -127 176 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 239 23 l 405 503 l 354 517 l 203 81 l 52 517 z',
        },
        accSagittalDoubleSharp5v19CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 112 -112 0 -52 36 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -501 l 275 0 l 315 112 b 495 -68 435 112 495 53 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 z',
        },
        accSagittalDoubleFlat5v19CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 360 -248 b 540 -68 480 -248 540 -189 l 540 248 l 495 248 l 495 68 b 315 -112 495 -53 435 -112 l 275 0 l 449 501 l 397 517 l 248 81 l 95 517 l 45 501 l 193 73 b 112 112 170 99 143 112 b 0 -68 36 112 0 52 z',
        },
        accSagittalDoubleSharp23CDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 323 4 b 383 -23 340 -13 360 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z',
        },
        accSagittalDoubleFlat23CUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 274 l 0 112 l 292 -248 b 405 -68 318 -127 356 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 383 23 b 323 -4 360 23 340 13 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 252 -35 z',
        },
        accSagittal19SchismaUp: {
            x_min: 0,
            x_max: 125,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 l 0 68 b 68 -112 0 -52 23 -112 z',
        },
        accSagittal19SchismaDown: {
            x_min: 0,
            x_max: 125,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 68 112 b 0 -68 23 112 0 52 l 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 l 180 -248 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 z',
        },
        accSagittal17KleismaUp: {
            x_min: 0,
            x_max: 156,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',
        },
        accSagittal17KleismaDown: {
            x_min: 0,
            x_max: 156,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 225 -248 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',
        },
        accSagittal143CommaUp: {
            x_min: 0,
            x_max: 156,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 105 68 b 45 157 65 68 45 98 l 0 157 b 23 20 0 95 7 50 b 0 -203 7 -23 0 -98 z',
        },
        accSagittal143CommaDown: {
            x_min: 0,
            x_max: 156,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 23 -20 0 98 7 23 b 0 -157 7 -50 0 -95 l 45 -157 b 105 -68 45 -98 65 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 225 -248 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',
        },
        accSagittal11v49CommaUp: {
            x_min: 0,
            x_max: 188,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -292 b 89 -157 45 -203 60 -157 l 203 -157 b 225 -143 210 -157 217 -153 l 225 -517 l 271 -517 l 271 248 l 248 248 b 180 157 233 187 210 157 l 68 157 b 0 -68 23 157 0 82 l 45 -68 b 89 68 45 23 60 68 l 203 68 b 225 84 209 68 216 72 l 225 -36 b 180 -68 213 -58 199 -68 l 68 -68 b 0 -292 23 -68 0 -143 z',
        },
        accSagittal11v49CommaDown: {
            x_min: 0,
            x_max: 188,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 292 b 68 68 0 143 23 68 l 180 68 b 225 36 199 68 213 58 l 225 -84 b 203 -68 216 -72 209 -68 l 89 -68 b 45 68 60 -68 45 -23 l 0 68 b 68 -157 0 -82 23 -157 l 180 -157 b 248 -248 210 -157 233 -187 l 271 -248 l 271 517 l 225 517 l 225 143 b 203 157 217 153 210 157 l 89 157 b 45 292 60 157 45 203 z',
        },
        accSagittal19CommaUp: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -4 b 203 -23 187 -17 196 -23 l 315 -23 b 360 -203 346 -23 360 -82 l 405 -203 b 341 68 405 -23 383 68 l 225 68 b 157 248 206 68 183 127 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z',
        },
        accSagittal19CommaDown: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 b 225 -68 183 -127 206 -68 l 341 -68 b 405 203 383 -68 405 23 l 360 203 b 315 23 360 82 346 23 l 203 23 b 180 4 196 23 187 17 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 b 0 -68 23 112 0 52 z',
        },
        accSagittal7v19CommaUp: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 112 l 225 112 b 315 -68 285 112 315 53 l 315 -248 l 360 -248 l 360 68 b 271 248 360 187 330 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z',
        },
        accSagittal7v19CommaDown: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 l 271 -248 b 360 -68 330 -248 360 -187 l 360 248 l 315 248 l 315 68 b 225 -112 315 -53 285 -112 l 180 -112 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 b 0 -68 23 112 0 52 z',
        },
        accSagittal49SmallDiesisUp: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',
        },
        accSagittal49SmallDiesisDown: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 315 -248 b 405 -68 374 -248 405 -187 l 405 248 l 360 248 l 360 68 b 271 -112 360 -53 330 -112 l 225 -112 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',
        },
        accSagittal23SmallDiesisUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 58 l 495 -274 l 495 -112 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',
        },
        accSagittal23SmallDiesisDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 495 112 l 495 274 l 225 -58 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',
        },
        accSagittal5v13MediumDiesisUp: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 b 128 180 253 203 184 180 b 45 248 73 180 45 203 l 0 248 b 52 95 0 170 17 120 l 0 68 l 0 -33 l 315 135 l 315 10 l 0 -157 z',
        },
        accSagittal5v13MediumDiesisDown: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 157 l 315 -10 l 315 -135 l 0 33 l 0 -68 l 52 -95 b 0 -248 17 -120 0 -170 l 45 -248 b 128 -180 45 -203 73 -180 b 337 -248 184 -180 253 -203 l 360 -248 l 360 517 l 315 517 l 315 89 l 0 259 z',
        },
        accSagittal11v19MediumDiesisUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -4 b 292 -23 278 -17 285 -23 l 405 -23 b 449 -203 435 -23 449 -82 l 495 -203 b 431 68 495 -23 472 68 l 315 68 b 248 248 295 68 271 127 l 135 248 b 0 68 45 248 0 187 l 0 -248 z',
        },
        accSagittal11v19MediumDiesisDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 248 l 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 b 315 -68 271 -127 295 -68 l 431 -68 b 495 203 472 -68 495 23 l 449 203 b 405 23 449 82 435 23 l 292 23 b 271 4 285 23 278 17 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 z',
        },
        accSagittal49MediumDiesisUp: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -68 l 0 -248 l 45 -248 l 315 -94 l 315 -517 l 360 -517 l 360 248 l 225 248 b 0 -68 75 248 0 143 z m 45 -68 b 225 112 45 53 105 112 l 315 112 l 315 10 l 45 -145 z',
        },
        accSagittal49MediumDiesisDown: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 68 b 225 -248 0 -143 75 -248 l 360 -248 l 360 517 l 315 517 l 315 94 l 45 248 l 0 248 z m 45 145 l 315 -10 l 315 -112 l 225 -112 b 45 68 105 -112 45 -53 z',
        },
        accSagittal5v49MediumDiesisUp: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -89 l 0 -248 l 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 b 89 89 170 143 118 89 b 45 157 60 89 45 112 l 0 157 b 68 3 0 68 23 16 z',
        },
        accSagittal5v49MediumDiesisDown: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 68 -3 b 0 -157 23 -16 0 -68 l 45 -157 b 89 -89 45 -112 60 -89 b 248 -248 118 -89 170 -143 l 495 89 l 495 248 l 271 -53 l 271 517 l 225 517 l 225 -53 l 0 248 l 0 89 z',
        },
        accSagittal49LargeDiesisUp: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 -89 l 360 -248 l 405 -248 l 405 -68 b 180 248 405 143 330 248 l 0 248 z m 45 12 l 45 112 l 180 112 b 360 -68 300 112 360 53 l 360 -147 z',
        },
        accSagittal49LargeDiesisDown: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 180 -248 b 405 68 330 -248 405 -143 l 405 248 l 360 248 l 45 89 l 45 517 l 0 517 z m 360 147 l 360 68 b 180 -112 360 -53 300 -112 l 45 -112 l 45 -12 z',
        },
        accSagittal11v19LargeDiesisUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 -86 l 449 -256 l 449 -157 l 45 13 l 45 138 l 449 -30 l 449 68 l 23 248 l 0 248 z',
        },
        accSagittal11v19LargeDiesisDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 23 -248 l 449 -68 l 449 30 l 45 -138 l 45 -13 l 449 157 l 449 256 l 45 86 l 45 517 l 0 517 z',
        },
        accSagittal5v13LargeDiesisUp: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 b 89 -112 0 -52 30 -112 b 180 -35 125 -112 157 -86 l 180 -517 l 225 -517 l 225 -86 l 631 -256 l 631 -157 l 225 13 l 225 138 l 631 -30 l 631 68 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 z',
        },
        accSagittal5v13LargeDiesisDown: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -68 b 81 3 45 -20 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 l 631 -68 l 631 30 l 225 -138 l 225 -13 l 631 157 l 631 256 l 225 86 l 225 517 l 180 517 l 180 35 b 89 112 157 86 125 112 b 0 -68 30 112 0 52 z',
        },
        accSagittalSharp23SDown: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -203 l 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 b 315 6 287 -23 301 -13 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 68 312 127 282 68 l 194 68 b 89 157 125 68 89 98 l 45 157 b 60 59 45 118 50 85 b 0 -203 20 30 0 -56 z',
        },
        accSagittalFlat23SUp: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 60 -59 0 56 20 -30 b 45 -157 50 -85 45 -118 l 89 -157 b 194 -68 89 -98 125 -68 l 248 -68 b 337 -248 282 -68 312 -127 l 360 -248 l 360 517 l 315 517 l 315 -6 b 271 23 301 13 287 23 l 180 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',
        },
        accSagittalSharp49SDown: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 135 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 b 315 -135 285 -157 300 -150 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 157 323 187 292 157 l 89 157 b 0 -68 30 157 0 82 l 45 -68 b 112 68 45 23 68 68 l 271 68 b 315 89 284 68 300 75 l 315 -32 b 248 -68 298 -56 275 -68 l 89 -68 b 0 -292 29 -68 0 -143 z',
        },
        accSagittalFlat49SUp: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 292 b 89 68 0 143 29 68 l 248 68 b 315 32 275 68 298 56 l 315 -89 b 271 -68 300 -75 284 -68 l 112 -68 b 45 68 68 -68 45 -23 l 0 68 b 89 -157 0 -82 30 -157 l 248 -157 b 337 -248 292 -157 323 -187 l 360 -248 l 360 517 l 315 517 l 315 135 b 271 157 300 150 285 157 l 180 157 l 180 517 l 135 517 l 135 157 l 112 157 b 45 292 68 157 45 203 z',
        },
        accSagittalSharp7v19CDown: {
            x_min: 0,
            x_max: 250,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -112 l 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 89 -20 0 53 29 -6 z',
        },
        accSagittalFlat7v19CUp: {
            x_min: 0,
            x_max: 250,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 89 20 b 0 -157 29 6 0 -53 l 45 -157 b 118 -89 45 -112 68 -89 b 337 -248 166 -89 239 -143 l 360 -248 l 360 517 l 315 517 l 315 -65 l 180 78 l 180 517 l 135 517 l 135 125 l 0 271 l 0 112 z',
        },
        accSagittalSharp19CDown: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 96 45 17 89 72 l 180 -517 l 225 -517 l 225 107 b 315 112 252 112 282 112 l 360 112 l 360 -517 l 405 -517 l 405 248 l 271 248 b 0 68 89 248 0 187 z',
        },
        accSagittalFlat19CUp: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 271 -248 0 -187 89 -248 l 405 -248 l 405 517 l 360 517 l 360 -112 l 315 -112 b 225 -107 282 -112 252 -112 l 225 517 l 180 517 l 180 -96 b 45 68 89 -72 45 -17 l 45 248 l 0 248 z',
        },
        accSagittalSharp11v49CDown: {
            x_min: 0,
            x_max: 344,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 112 -23 45 -82 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 271 112 215 -23 245 23 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 b 157 68 222 128 192 68 l 89 68 b 0 -203 30 68 0 -23 z',
        },
        accSagittalFlat11v49CUp: {
            x_min: 0,
            x_max: 344,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -128 l 360 -248 b 495 -68 449 -248 495 -189 l 495 248 l 449 248 l 449 68 b 360 -107 449 -30 420 -89 l 360 517 l 315 517 l 315 -112 l 271 -112 b 180 23 245 -23 215 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 82 z',
        },
        accSagittalSharp143CDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 259 76 210 -23 236 10 l 315 17 l 315 -517 l 360 -517 l 360 -30 l 585 -271 l 585 -112 l 248 248 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z',
        },
        accSagittalFlat143CUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -127 l 585 112 l 585 271 l 360 30 l 360 517 l 315 517 l 315 -17 l 259 -76 b 180 23 236 -10 210 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',
        },
        accSagittalSharp17kDown: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 b 145 171 305 196 210 171 b 45 248 78 171 45 196 l 0 248 b 79 101 0 170 26 121 l 0 68 l 0 -32 l 405 138 l 405 13 z',
        },
        accSagittalFlat17kUp: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 405 -13 l 405 -138 l 0 32 l 0 -68 l 79 -101 b 0 -248 26 -121 0 -170 l 45 -248 b 145 -171 45 -196 78 -171 b 428 -248 210 -171 305 -196 l 449 -248 l 449 517 l 405 517 l 405 86 l 271 144 l 271 517 l 225 517 l 225 161 l 0 256 l 0 157 z',
        },
        accSagittalSharp19sDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -23 295 23 325 -23 l 360 -517 l 405 -517 l 405 -23 l 472 -23 b 540 -203 517 -23 540 -84 l 585 -203 b 495 68 585 -23 554 68 l 383 68 b 292 248 348 68 318 127 l 180 248 b 0 68 60 248 0 187 z',
        },
        accSagittalFlat19sUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 180 -248 0 -187 60 -248 l 292 -248 b 383 -68 318 -127 348 -68 l 495 -68 b 585 203 554 -68 585 23 l 540 203 b 472 23 540 84 517 23 l 405 23 l 405 517 l 360 517 l 360 23 b 271 -112 325 23 295 -23 l 225 -112 l 225 517 l 180 517 l 180 -109 b 45 68 89 -95 45 -36 l 45 248 l 0 248 z',
        },
        accSagittalSharp19sUp: {
            x_min: 0,
            x_max: 281,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 89 -96 l 89 -517 l 135 -517 l 135 -108 b 180 -112 148 -112 163 -112 b 225 -108 196 -112 210 -112 l 225 -517 l 271 -517 l 271 -94 b 360 -12 305 -78 337 -50 l 360 -517 l 405 -517 l 405 248 l 383 248 b 190 0 353 98 288 16 b 138 -3 171 0 153 -3 b 45 68 75 -3 45 20 l 0 68 b 89 -96 0 -17 30 -72 z',
        },
        accSagittalFlat19sDown: {
            x_min: 0,
            x_max: 281,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 89 96 b 0 -68 30 72 0 17 l 45 -68 b 138 3 45 -20 75 3 b 190 0 153 3 171 0 b 383 -248 288 -16 353 -98 l 405 -248 l 405 517 l 360 517 l 360 12 b 271 94 337 50 305 78 l 271 517 l 225 517 l 225 108 b 180 112 210 112 196 112 b 135 108 163 112 148 112 l 135 517 l 89 517 z',
        },
        accSagittalSharp17kUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalFlat17kDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 517 l 405 517 l 405 -14 b 337 23 386 10 363 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalSharp143CUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z',
        },
        accSagittalFlat143CDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 68 -53 0 63 23 -23 b 45 -157 52 -81 45 -115 l 89 -157 b 240 -68 89 -98 140 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 517 l 405 517 l 405 -14 b 337 23 386 10 363 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalSharp11v49CUp: {
            x_min: 0,
            x_max: 312,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -68 b 135 68 45 23 76 68 l 337 68 b 405 95 363 68 386 76 l 405 -27 b 315 -68 386 -55 356 -68 l 112 -68 b 0 -292 37 -68 0 -143 l 45 -292 b 135 -157 45 -203 75 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 l 271 -517 l 315 -517 l 315 -157 l 337 -157 b 405 -130 360 -157 383 -148 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 37 157 0 82 z',
        },
        accSagittalFlat11v49CDown: {
            x_min: 0,
            x_max: 312,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 68 b 112 -157 0 -82 37 -157 l 315 -157 b 428 -248 376 -157 413 -187 l 449 -248 l 449 517 l 405 517 l 405 130 b 337 157 383 148 360 157 l 315 157 l 315 517 l 271 517 l 271 157 l 180 157 l 180 517 l 135 517 l 135 157 b 45 292 75 157 45 203 l 0 292 b 112 68 0 143 37 68 l 315 68 b 405 27 356 68 386 55 l 405 -95 b 337 -68 386 -76 363 -68 l 135 -68 b 45 68 76 -68 45 -23 z',
        },
        accSagittalSharp19CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 14 b 337 -23 289 -10 311 -23 l 360 -23 l 360 -517 l 405 -517 l 405 -23 b 495 -203 465 -23 495 -82 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 128 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',
        },
        accSagittalFlat19CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 b 360 -68 271 -128 310 -68 l 428 -68 b 540 203 503 -68 540 23 l 495 203 b 405 23 495 82 465 23 l 405 517 l 360 517 l 360 23 l 337 23 b 271 -14 311 23 289 10 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',
        },
        accSagittalSharp7v19CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 112 l 315 112 b 360 109 331 112 346 112 l 360 -517 l 405 -517 l 405 98 b 495 -68 465 73 495 19 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',
        },
        accSagittalFlat7v19CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 360 -248 b 540 -68 480 -248 540 -189 l 540 248 l 495 248 l 495 68 b 405 -98 495 -19 465 -73 l 405 517 l 360 517 l 360 -109 b 315 -112 346 -112 331 -112 l 271 -112 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',
        },
        accSagittalSharp49SUp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalFlat49SDown: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 449 -96 540 -17 510 -72 l 449 517 l 405 517 l 405 -109 b 360 -112 390 -112 376 -112 l 315 -112 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalSharp23SUp: {
            x_min: 0,
            x_max: 469,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 71 l 405 -14 l 405 -517 l 449 -517 l 449 -56 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalFlat23SDown: {
            x_min: 0,
            x_max: 469,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 675 112 l 675 268 l 449 56 l 449 517 l 405 517 l 405 14 l 315 -71 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalSharp5v13MUp: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 495 141 l 495 14 l 0 -157 l 0 -256 l 225 -180 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 l 0 248 b 95 99 0 170 30 120 l 0 68 l 0 -30 z',
        },
        accSagittalFlat5v13MDown: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 30 l 0 -68 l 95 -99 b 0 -248 30 -120 0 -170 l 45 -248 b 167 -168 45 -194 85 -168 b 517 -248 248 -168 366 -194 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 115 l 405 517 l 360 517 l 360 130 l 271 161 l 271 517 l 225 517 l 225 180 l 0 256 l 0 157 l 495 -14 l 495 -141 z',
        },
        accSagittalSharp11v19MUp: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 14 b 428 -23 379 -10 402 -23 l 449 -23 l 449 -517 l 495 -517 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z',
        },
        accSagittalFlat11v19MDown: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 b 449 -68 363 -127 400 -68 l 517 -68 b 631 203 593 -68 631 23 l 585 203 b 495 23 585 84 554 23 l 495 517 l 449 517 l 449 23 l 428 23 b 360 -14 402 23 379 10 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',
        },
        accSagittalSharp49MUp: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 225 -180 l 225 -517 l 271 -517 l 271 -166 l 360 -132 l 360 -517 l 405 -517 l 405 -117 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 360 248 b 0 -68 120 248 0 143 z m 45 -145 l 45 -68 b 360 112 45 53 150 112 l 495 112 l 495 14 z',
        },
        accSagittalFlat49MDown: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 68 b 360 -248 0 -143 120 -248 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 117 l 405 517 l 360 517 l 360 132 l 271 166 l 271 517 l 225 517 l 225 180 l 45 248 l 0 248 z m 495 -14 l 495 -112 l 360 -112 b 45 68 150 -112 45 -53 l 45 145 z',
        },
        accSagittalSharp5v49MUp: {
            x_min: 0,
            x_max: 469,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 107 0 0 62 36 10 l 0 -112 z',
        },
        accSagittalFlat5v49MDown: {
            x_min: 0,
            x_max: 469,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 112 l 107 0 b 0 -157 36 -10 0 -62 l 45 -157 b 118 -89 45 -112 68 -89 b 337 -248 166 -89 239 -143 l 675 112 l 675 271 l 495 79 l 495 517 l 449 517 l 449 30 l 360 -65 l 360 517 l 315 517 l 315 -65 l 225 30 l 225 517 l 180 517 l 180 79 l 0 271 z',
        },
        accSagittalSharp49LUp: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 -82 l 135 -112 l 135 -517 l 180 -517 l 180 -127 l 271 -157 l 271 -517 l 315 -517 l 315 -173 l 540 -248 l 585 -248 l 585 -68 b 180 248 585 143 449 248 l 0 248 z m 45 112 l 180 112 b 540 -68 420 112 540 53 l 540 -145 l 45 16 z',
        },
        accSagittalFlat49LDown: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 180 -248 b 585 68 449 -248 585 -143 l 585 248 l 540 248 l 315 173 l 315 517 l 271 517 l 271 157 l 180 127 l 180 517 l 135 517 l 135 112 l 45 82 l 45 517 l 0 517 z m 45 -16 l 540 145 l 540 68 b 180 -112 540 -53 420 -112 l 45 -112 z',
        },
        accSagittalSharp11v19LUp: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -517 l 45 -517 l 45 -81 l 135 -108 l 135 -517 l 180 -517 l 180 -121 l 271 -148 l 271 -517 l 315 -517 l 315 -161 l 631 -255 l 631 -157 l 45 16 l 45 144 l 631 -30 l 631 68 l 23 248 l 0 248 z',
        },
        accSagittalFlat11v19LDown: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -248 l 23 -248 l 631 -68 l 631 30 l 45 -144 l 45 -16 l 631 157 l 631 255 l 315 161 l 315 517 l 271 517 l 271 148 l 180 121 l 180 517 l 135 517 l 135 108 l 45 81 l 45 517 l 0 517 z',
        },
        accSagittalSharp5v13LUp: {
            x_min: 0,
            x_max: 500,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 -85 l 360 -120 l 360 -517 l 405 -517 l 405 -135 l 720 -256 l 720 -157 l 271 14 l 271 141 l 720 -30 l 720 68 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',
        },
        accSagittalFlat5v13LDown: {
            x_min: 0,
            x_max: 500,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 720 -68 l 720 30 l 271 -141 l 271 -14 l 720 157 l 720 256 l 405 135 l 405 517 l 360 517 l 360 120 l 271 85 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',
        },
        accSagittalDoubleSharp23SDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -203 l 45 -203 b 135 -23 45 -82 76 -23 l 301 -23 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 370 -14 b 449 112 423 10 449 53 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z',
        },
        accSagittalDoubleFlat23SUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 68 -53 0 63 23 -23 b 45 -157 52 -81 45 -115 l 89 -157 b 240 -68 89 -98 140 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 -112 b 370 14 449 -53 423 -10 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 301 23 l 135 23 b 45 203 76 23 45 82 z',
        },
        accSagittalDoubleSharp49SDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 256 -157 l 135 -503 l 187 -517 l 337 -82 l 490 -517 l 540 -503 l 366 0 l 396 89 b 449 157 416 102 435 125 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 39 157 0 82 l 45 -68 b 135 68 45 23 76 68 l 287 68 l 311 0 l 288 -68 l 89 -68 b 0 -292 32 -68 0 -144 z',
        },
        accSagittalDoubleFlat49SUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 292 b 89 68 0 144 32 68 l 288 68 l 311 0 l 287 -68 l 135 -68 b 45 68 76 -68 45 -23 l 0 68 b 112 -157 0 -82 39 -157 l 315 -157 b 428 -248 376 -157 413 -187 l 449 -248 l 449 -157 b 396 -89 435 -125 416 -102 l 366 0 l 540 503 l 490 517 l 337 82 l 187 517 l 135 503 l 256 157 l 112 157 b 45 292 68 157 45 203 z',
        },
        accSagittalDoubleSharp7v19CDown: {
            x_min: 0,
            x_max: 375,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z',
        },
        accSagittalDoubleFlat7v19CUp: {
            x_min: 0,
            x_max: 375,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 112 20 b 0 -157 37 6 0 -53 l 45 -157 b 130 -68 45 -98 73 -68 b 428 -248 186 -68 285 -127 l 449 -248 l 449 -112 l 386 -59 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 307 7 l 0 266 l 0 112 z',
        },
        accSagittalDoubleSharp19CDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 315 109 45 36 135 95 l 354 0 l 180 -503 l 232 -517 l 383 -82 l 534 -517 l 585 -503 l 410 0 l 449 112 l 495 112 l 495 248 l 360 248 b 0 68 120 248 0 187 z m 372 112 l 393 112 l 383 82 z',
        },
        accSagittalDoubleFlat19CUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 360 -248 0 -187 120 -248 l 495 -248 l 495 -112 l 449 -112 l 410 0 l 585 503 l 534 517 l 383 82 l 232 517 l 180 503 l 354 0 l 315 -109 b 45 68 135 -95 45 -36 l 45 248 l 0 248 z m 383 -82 l 393 -112 l 372 -112 z',
        },
        accSagittalDoubleSharp11v49CDown: {
            x_min: 0,
            x_max: 406,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalDoubleFlat11v49CUp: {
            x_min: 0,
            x_max: 406,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 360 -112 540 -53 480 -112 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalDoubleSharp143CDown: {
            x_min: 0,
            x_max: 469,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 337 49 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',
        },
        accSagittalDoubleFlat143CUp: {
            x_min: 0,
            x_max: 469,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 675 112 l 675 268 l 337 -49 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',
        },
        accSagittalDoubleSharp17kDown: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 248 b 95 101 0 170 30 121 l 0 68 l 0 -30 l 364 96 l 399 0 l 390 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 275 -517 l 428 -82 l 577 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 z m 416 115 l 442 124 l 428 82 z',
        },
        accSagittalDoubleFlat17kUp: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 45 -248 b 167 -168 45 -194 85 -168 b 517 -248 248 -168 366 -194 l 540 -248 l 540 -157 l 507 -145 l 455 0 l 631 503 l 577 517 l 428 82 l 275 517 l 225 503 l 353 135 l 0 255 l 0 157 l 390 23 l 399 0 l 364 -96 l 0 30 l 0 -68 l 95 -101 b 0 -248 30 -121 0 -170 z m 428 -82 l 442 -124 l 416 -115 z',
        },
        accSagittalDoubleSharp19sDown: {
            x_min: 0,
            x_max: 438,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 -248 l 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 367 4 b 428 -23 386 -13 405 -23 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z',
        },
        accSagittalDoubleFlat19sUp: {
            x_min: 0,
            x_max: 438,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 b 449 -68 363 -127 400 -68 l 517 -68 b 631 203 593 -68 631 23 l 585 203 b 495 23 585 84 554 23 l 428 23 b 367 -4 405 23 386 13 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 271 -112 b 45 68 120 -112 45 -53 l 45 248 l 0 248 z',
        },
        accSagittalShaftUp: {
            x_min: 0,
            x_max: 31,
            y_min: -359,
            y_max: 172,
            ha: 531,
            o: 'm 0 112 l 0 -517 l 45 -517 l 45 112 l 23 248 z',
        },
        accSagittalShaftDown: {
            x_min: 0,
            x_max: 31,
            y_min: -172,
            y_max: 359,
            ha: 531,
            o: 'm 23 -248 l 45 -112 l 45 517 l 0 517 l 0 -112 z',
        },
        accSagittalAcute: {
            x_min: 0,
            x_max: 125,
            y_min: -62,
            y_max: 125,
            ha: 187,
            o: 'm 0 0 l 0 -89 l 180 89 l 180 180 z',
        },
        accSagittalGrave: {
            x_min: 0,
            x_max: 125,
            y_min: -125,
            y_max: 62,
            ha: 187,
            o: 'm 180 -180 l 180 -89 l 0 89 l 0 0 z',
        },
        accSagittal1MinaUp: {
            x_min: -7,
            x_max: 124,
            y_min: 16,
            y_max: 106.31676725154982,
            ha: 90.31676725154982,
            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 134 150 179 112 163 135 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',
        },
        accSagittal1MinaDown: {
            x_min: -7,
            x_max: 124,
            y_min: -106.31676725154983,
            y_max: -16,
            ha: 90.31676725154983,
            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 179 -23 163 -135 179 -112 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',
        },
        accSagittal2MinasUp: {
            x_min: -7,
            x_max: 218,
            y_min: 16,
            y_max: 106.31676725154982,
            ha: 90.31676725154982,
            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 269 150 314 112 298 135 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',
        },
        accSagittal2MinasDown: {
            x_min: -7,
            x_max: 218,
            y_min: -106.31676725154983,
            y_max: -16,
            ha: 90.31676725154983,
            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',
        },
        accSagittal1TinaUp: {
            x_min: 0,
            x_max: 93,
            y_min: 16,
            y_max: 107,
            ha: 91,
            o: 'm 134 154 l 91 154 b 81 76 91 101 91 86 b 0 68 73 69 48 68 l 0 23 b 134 154 122 23 134 36 z',
        },
        accSagittal1TinaDown: {
            x_min: 0,
            x_max: 93,
            y_min: -107,
            y_max: -16,
            ha: 91,
            o: 'm 134 -154 b 0 -23 134 -36 122 -23 l 0 -68 b 81 -76 48 -68 73 -69 b 91 -154 91 -86 91 -101 z',
        },
        accSagittal2TinasUp: {
            x_min: 0,
            x_max: 94,
            y_min: 16,
            y_max: 107,
            ha: 91,
            o: 'm 135 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',
        },
        accSagittal2TinasDown: {
            x_min: 0,
            x_max: 94,
            y_min: -107,
            y_max: -16,
            ha: 91,
            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 z',
        },
        accSagittal3TinasUp: {
            x_min: -7,
            x_max: 124,
            y_min: 16,
            y_max: 106.31676725154982,
            ha: 90.31676725154982,
            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 134 150 179 112 163 135 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',
        },
        accSagittal3TinasDown: {
            x_min: -7,
            x_max: 124,
            y_min: -106.31676725154983,
            y_max: -16,
            ha: 90.31676725154983,
            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 179 -23 163 -135 179 -112 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',
        },
        accSagittal4TinasUp: {
            x_min: 0,
            x_max: 187,
            y_min: 16,
            y_max: 106.69999999999997,
            ha: 90.69999999999997,
            o: 'm 0 68 l 0 23 b 143 45 105 23 124 26 b 203 107 153 55 183 107 b 226 23 216 107 226 86 l 269 23 b 225 150 269 112 253 135 b 160 132 207 158 181 153 b 115 81 138 112 124 88 b 0 68 104 71 94 68 z',
        },
        accSagittal4TinasDown: {
            x_min: 0,
            x_max: 187,
            y_min: -106.69999999999999,
            y_max: -16,
            ha: 90.69999999999999,
            o: 'm 0 -68 b 115 -81 94 -68 104 -71 b 160 -132 124 -88 138 -112 b 225 -150 181 -153 207 -158 b 269 -23 253 -135 269 -112 l 226 -23 b 203 -107 226 -86 216 -107 b 143 -45 183 -107 153 -55 b 0 -23 124 -26 105 -23 z',
        },
        accSagittal5TinasUp: {
            x_min: 0,
            x_max: 218,
            y_min: 16,
            y_max: 107,
            ha: 91,
            o: 'm 135 23 b 187 45 156 23 168 26 b 249 107 197 55 228 107 b 271 23 262 107 271 86 l 314 23 b 269 150 314 112 298 135 b 204 132 252 158 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',
        },
        accSagittal5TinasDown: {
            x_min: 0,
            x_max: 218,
            y_min: -107,
            y_max: -16,
            ha: 91,
            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 b 160 -81 147 -68 148 -71 b 204 -132 168 -88 183 -112 b 269 -150 226 -153 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 249 -107 271 -86 262 -107 b 187 -45 228 -107 197 -55 b 135 -23 168 -26 156 -23 z',
        },
        accSagittal6TinasUp: {
            x_min: -7,
            x_max: 218,
            y_min: 16,
            y_max: 106.31676725154982,
            ha: 90.31676725154982,
            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 269 150 314 112 298 135 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',
        },
        accSagittal6TinasDown: {
            x_min: -7,
            x_max: 218,
            y_min: -106.31676725154983,
            y_max: -16,
            ha: 90.31676725154983,
            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',
        },
        accSagittal7TinasUp: {
            x_min: 0,
            x_max: 281,
            y_min: 16,
            y_max: 106.69999999999997,
            ha: 90.69999999999997,
            o: 'm 0 68 l 0 23 b 143 45 105 23 124 26 b 203 107 153 55 183 107 b 226 23 216 107 226 86 l 269 23 b 298 65 269 23 291 55 b 343 107 314 86 331 107 b 361 23 354 107 363 86 l 405 23 b 360 150 405 112 389 135 b 294 130 343 158 311 150 b 264 92 281 115 272 104 b 225 150 258 127 245 140 b 160 132 207 158 181 153 b 115 81 138 112 124 88 b 0 68 104 71 94 68 z',
        },
        accSagittal7TinasDown: {
            x_min: 0,
            x_max: 281,
            y_min: -106.69999999999999,
            y_max: -16,
            ha: 90.69999999999999,
            o: 'm 0 -68 b 115 -81 94 -68 104 -71 b 160 -132 124 -88 138 -112 b 225 -150 181 -153 207 -158 b 264 -92 245 -140 258 -127 b 294 -130 272 -104 281 -115 b 360 -150 311 -150 343 -158 b 405 -23 389 -135 405 -112 l 361 -23 b 343 -107 363 -86 354 -107 b 298 -65 331 -107 314 -86 b 269 -23 291 -55 269 -23 l 226 -23 b 203 -107 226 -86 216 -107 b 143 -45 183 -107 153 -55 b 0 -23 124 -26 105 -23 z',
        },
        accSagittal8TinasUp: {
            x_min: 0,
            x_max: 312,
            y_min: 16,
            y_max: 107,
            ha: 91,
            o: 'm 135 23 b 187 45 156 23 168 26 b 249 107 197 55 228 107 b 271 23 262 107 271 86 l 314 23 b 343 65 314 23 336 55 b 387 107 359 86 376 107 b 406 23 399 107 408 86 l 449 23 b 405 150 449 112 433 135 b 338 130 387 158 356 150 b 308 92 325 115 317 104 b 269 150 302 127 289 140 b 204 132 252 158 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',
        },
        accSagittal8TinasDown: {
            x_min: 0,
            x_max: 312,
            y_min: -107,
            y_max: -16,
            ha: 91,
            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 b 160 -81 147 -68 148 -71 b 204 -132 168 -88 183 -112 b 269 -150 226 -153 252 -158 b 308 -92 289 -140 302 -127 b 338 -130 317 -104 325 -115 b 405 -150 356 -150 387 -158 b 449 -23 433 -135 449 -112 l 406 -23 b 387 -107 408 -86 399 -107 b 343 -65 376 -107 359 -86 b 314 -23 336 -55 314 -23 l 271 -23 b 249 -107 271 -86 262 -107 b 187 -45 228 -107 197 -55 b 135 -23 168 -26 156 -23 z',
        },
        accSagittal9TinasUp: {
            x_min: -7,
            x_max: 312,
            y_min: 16,
            y_max: 106.31676725154982,
            ha: 90.31676725154982,
            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 343 65 314 23 336 55 b 387 107 359 86 376 107 b 406 23 399 107 408 86 l 449 23 b 405 150 449 112 433 135 b 338 130 387 158 356 150 b 308 92 325 115 317 104 b 269 150 302 127 289 140 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',
        },
        accSagittal9TinasDown: {
            x_min: -7,
            x_max: 312,
            y_min: -106.31676725154983,
            y_max: -16,
            ha: 90.31676725154983,
            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 308 -92 289 -140 302 -127 b 338 -130 317 -104 325 -115 b 405 -150 356 -150 387 -158 b 449 -23 433 -135 449 -112 l 406 -23 b 387 -107 408 -86 399 -107 b 343 -65 376 -107 359 -86 b 314 -23 336 -55 314 -23 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',
        },
        accSagittalFractionalTinaUp: {
            x_min: -3,
            x_max: 35,
            y_min: 73,
            y_max: 111,
            ha: 38,
            o: 'm -4 132 b 23 105 -4 118 9 105 b 50 132 37 105 50 118 b 23 160 50 147 37 160 b -4 132 9 160 -4 147 z',
        },
        accSagittalFractionalTinaDown: {
            x_min: -3,
            x_max: 35,
            y_min: -111,
            y_max: -73,
            ha: 38,
            o: 'm -4 -132 b 23 -160 -4 -147 9 -160 b 50 -132 37 -160 50 -147 b 23 -105 50 -118 37 -105 b -4 -132 9 -105 -4 -118 z',
        },
        accidentalNarrowReversedFlat: {
            x_min: 0,
            x_max: 164,
            y_min: -194,
            y_max: 421,
            ha: 615,
            o: 'm 236 -279 l 236 606 l 192 606 l 192 179 b 85 243 150 222 114 243 b 0 84 23 243 0 134 b 112 -158 0 3 37 -78 z m 192 112 l 192 -163 l 135 -98 b 82 40 101 -50 82 -3 b 138 144 82 73 96 144 b 192 112 153 144 170 132 z',
        },
        accidentalNarrowReversedFlatAndFlat: {
            x_min: 0,
            x_max: 414,
            y_min: -194,
            y_max: 421,
            ha: 615,
            o: 'm 281 606 l 281 -268 l 438 -158 b 596 84 547 -82 596 3 b 475 243 596 154 556 243 b 325 179 435 243 384 222 l 325 606 z m 235 -279 l 235 606 l 190 606 l 190 179 b 85 243 148 222 114 243 b 12 158 52 243 27 215 b 0 84 3 134 0 108 b 112 -158 0 3 37 -78 z m 325 111 b 410 144 359 132 386 144 b 498 36 462 144 498 84 b 413 -107 498 -9 469 -58 l 325 -173 z m 192 112 l 192 -163 l 135 -98 b 81 40 99 -50 81 -3 b 91 94 81 59 84 76 b 137 144 102 127 118 144 b 192 112 153 144 170 132 z',
        },
        accidentalWilsonPlus: {
            x_min: 0,
            x_max: 281,
            y_min: -203,
            y_max: 203,
            ha: 406,
            o: 'm 405 268 l 225 98 l 225 292 l 180 292 l 180 56 l 0 -112 l 0 -268 l 180 -98 l 180 -292 l 225 -292 l 225 -56 l 405 112 z',
        },
        accidentalWilsonMinus: {
            x_min: 0,
            x_max: 281,
            y_min: -186,
            y_max: 186,
            ha: 372,
            o: 'm 0 112 l 405 -268 l 405 -112 l 0 268 z',
        },
    },
    fontFamily: 'Bravura',
    resolution: 1000,
    generatedOn: '2022-06-26T17:36:54.186Z',
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/bravura_metrics.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/bravura_metrics.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BravuraMetrics: () => (/* binding */ BravuraMetrics)
/* harmony export */ });
const BravuraMetrics = {
    name: 'Bravura',
    smufl: true,
    stave: {
        padding: 12,
        endPaddingMax: 10,
        endPaddingMin: 5,
        unalignedNotePadding: 10,
    },
    accidental: {
        noteheadAccidentalPadding: 1,
        leftPadding: 2,
        accidentalSpacing: 3,
    },
    clef: {
        default: {
            point: 32,
            width: 26,
        },
        small: {
            point: 26,
            width: 20,
        },
        annotations: {
            '8va': {
                smuflCode: 'timeSig8',
                default: {
                    point: 18,
                    treble: {
                        line: -1.4,
                        shiftX: 12,
                    },
                },
                small: {
                    point: 16,
                    treble: {
                        line: -0.2,
                        shiftX: 8,
                    },
                },
            },
            '8vb': {
                smuflCode: 'timeSig8',
                default: {
                    point: 18,
                    treble: {
                        line: 6,
                        shiftX: 10,
                    },
                    bass: {
                        line: 3.5,
                        shiftX: 1,
                    },
                },
                small: {
                    point: 16,
                    treble: {
                        line: 5.3,
                        shiftX: 6,
                    },
                    bass: {
                        line: 3.1,
                        shiftX: 0.5,
                    },
                },
            },
        },
        lineCount: {
            '8': { point: 55, shiftY: 14 },
            '7': { point: 47, shiftY: 8 },
            '6': { point: 32, shiftY: 1 },
            '5': { point: 30, shiftY: -6 },
            '4': { point: 23, shiftY: -12 },
        },
    },
    parenthesis: {
        default: {
            point: 39,
            width: 7,
        },
        gracenote: {
            point: (39 * 3) / 5,
            width: 3,
        },
    },
    pedalMarking: {
        up: {
            point: 40,
        },
        down: {
            point: 34,
        },
    },
    digits: {
        shiftLine: -1,
        point: 34,
        tupletPoint: 22,
        shiftY: -6,
    },
    articulation: {
        articStaccatissimoAbove: {
            padding: 2,
        },
        articStaccatissimoBelow: {
            padding: 2,
        },
    },
    tremolo: {
        default: {
            point: 25,
            spacing: 5,
            offsetYStemUp: -5,
            offsetYStemDown: 5,
            offsetXStemUp: 11,
            offsetXStemDown: 1,
        },
        grace: {
            point: 18,
            spacing: 4,
            offsetYStemUp: -5,
            offsetYStemDown: 5,
            offsetXStemUp: 7,
            offsetXStemDown: 1,
        },
    },
    staveRepetition: {
        symbolText: {
            offsetX: 12,
            offsetY: 25,
            spacing: 5,
        },
        coda: {
            offsetY: 25,
        },
        segno: {
            offsetY: 10,
        },
    },
    stem: {
        heightAdjustmentForFlag: -3,
        noteHead: {
            noteheadTriangleUpHalf: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpBlack: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpWhole: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadXHalf: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXBlack: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXWhole: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadHalf: {
                offsetYBaseStemUp: -2.55,
                offsetYBaseStemDown: 2.65,
            },
            noteheadBlack: {
                offsetYBaseStemUp: -2,
                offsetYBaseStemDown: 2,
            },
            noteheadSquareWhite: {
                offsetYBaseStemDown: -5,
                offsetYBaseStemUp: 5,
            },
        },
    },
    glyphs: {
        coda: {
            point: 20,
            shiftX: -7,
            shiftY: 8,
        },
        segno: {
            shiftX: -7,
        },
        flag: {
            shiftX: -0.75,
            staveTempo: {
                shiftX: -1,
            },
        },
        clef: {
            gClef: {
                default: { scale: 1.1, shiftY: 1 },
                small: { shiftY: 1.5 },
            },
            fClef: {
                default: { shiftY: -0.5 },
            },
        },
        ornament: {
            ornamentTurn: {
                scale: 1.2,
            },
            ornamentTurnSlash: {
                scale: 1.2,
            },
        },
        stringNumber: {
            verticalPadding: 8,
            stemPadding: 2,
            leftPadding: 5,
            rightPadding: 6,
        },
        stroke: {
            arrowheadBlackDown: {
                straight: {
                    shiftX: -4.5,
                },
                wiggly: {
                    shiftX: -1,
                    shiftY: 1,
                },
            },
            arrowheadBlackUp: {
                straight: {
                    shiftX: -0.85,
                },
                wiggly: {
                    shiftX: -1,
                    shiftY: 1,
                },
            },
        },
        textNote: {
            point: 34,
            breathMarkTick: {
                point: 36,
                shiftY: 9,
            },
            breathMarkComma: {
                point: 36,
            },
            segno: {
                point: 30,
                shiftX: -7,
                shiftY: 8,
            },
            coda: {
                point: 20,
                shiftX: -7,
                shiftY: 8,
            },
            ornamentTrill: {
                shiftX: -8,
                shiftY: 8,
            },
            ornamentTurn: {
                point: 42,
            },
            ornamentTurnSlash: {
                point: 42,
            },
            ornamentMordent: {
                shiftX: -8,
            },
            ornamentShortTrill: {
                shiftX: -8,
            },
        },
        noteHead: {
            minPadding: 2,
            standard: {
                restQuarterStemUp: {
                    point: 35,
                },
                restQuarterStemDown: {
                    point: 35,
                },
            },
            custom: {
                noteheadCircleXStemUp: {
                    shiftX: 1.5,
                },
                noteheadCircleXStemDown: {
                    shiftX: 0.25,
                },
                noteheadDiamondHalfStemUp: {
                    shiftX: 1.5,
                },
                noteheadDiamondBlackStemUp: {
                    shiftX: 1.5,
                },
                noteheadDiamondWholeStemUp: {
                    shiftX: 1,
                },
                noteheadXHalfStemUp: {
                    shiftX: -2,
                },
                noteheadXHalfStemDown: {
                    shiftX: 1,
                },
                noteheadXWholeStemUp: {
                    shiftX: -4,
                },
                noteheadXWholeStemDown: {
                    shiftX: 1,
                },
                noteheadXDoubleWholeStemUp: {
                    shiftX: -4,
                },
                noteheadXDoubleWholeStemDown: {
                    shiftX: 1,
                },
                noteheadSquareWhiteStemDown: {
                    shiftX: 0.25,
                },
                noteheadSquareWhiteStemUp: {
                    shiftX: -0.75,
                },
                noteheadSquareBlackStemUp: {
                    shiftX: -0.75,
                },
                noteheadTriangleUpWholeStemUp: {
                    shiftX: -0.75,
                },
            },
        },
        chordSymbol: {
            global: {
                superscriptOffset: -400,
                subscriptOffset: 300,
                kerningOffset: -250,
                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],
                upperKerningText: ['A', 'L'],
                spacing: 100,
                superSubRatio: 0.66,
            },
            csymDiminished: {
                scale: 0.8,
                leftSideBearing: -32,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymHalfDiminished: {
                scale: 0.8,
                leftSideBearing: -32,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymAugmented: {
                scale: 1,
                leftSideBearing: 0,
                advanceWidth: 530,
                yOffset: 0,
            },
            csymParensLeftTall: {
                scale: 0.8,
                leftSideBearing: -20,
                advanceWidth: 184,
                yOffset: 250,
            },
            csymParensRightTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 189,
                yOffset: 250,
            },
            csymBracketLeftTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 328,
                yOffset: 0,
            },
            csymBracketRightTall: {
                scale: 0.8,
                leftSideBearing: 1,
                advanceWidth: 600,
                yOffset: 0,
            },
            csymParensLeftVeryTall: {
                scale: 0.9,
                leftSideBearing: 50,
                advanceWidth: 121,
                yOffset: 350,
            },
            csymParensRightVeryTall: {
                scale: 0.9,
                leftSideBearing: 0,
                advanceWidth: 111,
                yOffset: 350,
            },
            csymDiagonalArrangementSlash: {
                scale: 0.6,
                leftSideBearing: -1,
                advanceWidth: 990,
                yOffset: 0,
            },
            csymMinor: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 482,
                yOffset: 0,
            },
            csymMajorSeventh: {
                scale: 0.9,
                leftSideBearing: 200,
                yOffset: 0,
                advanceWidth: 600,
            },
            accidentalSharp: {
                scale: 0.75,
                leftSideBearing: 20,
                advanceWidth: 250,
                yOffset: -302,
            },
            accidentalFlat: {
                scale: 0.9,
                leftSideBearing: -20,
                advanceWidth: 226,
                yOffset: -184,
            },
        },
        jazzOrnaments: {
            brassScoop: {
                scale: 1.0,
                xOffset: -12,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 20,
            },
            brassDoitMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 22,
            },
            brassFallLipShort: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 15,
            },
            brassLiftMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 5,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassFallRoughMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 28,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassBend: {
                scale: 1.0,
                xOffset: 2,
                yOffset: -8,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassMuteClosed: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -8,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassMuteOpen: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -7,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassFlip: {
                scale: 1.0,
                xOffset: 10,
                yOffset: 0,
                stemUpYOffset: 7,
                reportedWidth: 10,
            },
            brassJazzTurn: {
                scale: 1.0,
                xOffset: 0,
                yOffset: 0,
                stemUpYOffset: 8,
                reportedWidth: 31,
            },
            brassSmear: {
                scale: 1.0,
                xOffset: 10,
                yOffset: 0,
                stemUpYOffset: 8,
                reportedWidth: 5,
            },
        },
        tuplet: {
            noteHeadOffset: 20,
            stemOffset: 10,
            bottomLine: 4,
            topModifierOffset: 15,
        },
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/custom_glyphs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/custom_glyphs.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomFont: () => (/* binding */ CustomFont)
/* harmony export */ });
const CustomFont = {
    resolution: 1000,
    fontFamily: 'VexFlowCustom',
    glyphs: {
        noteheadSquareWhite: {
            x_min: 0,
            x_max: 430.75,
            ha: 386,
            o: 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 ',
        },
        noteheadSquareBlack: {
            x_min: 0,
            x_max: 430.75,
            ha: 386,
            o: 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 ',
        },
        accidentalBuyukMucennebFlat: {
            x_min: -171.5,
            x_max: 251.8125,
            ha: 257,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',
        },
        accidentalBakiyeFlat: {
            x_min: -176.9375,
            x_max: 251.8125,
            ha: 257,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',
        },
        accidentalKucukMucennebSharp: {
            x_min: -1.359375,
            x_max: 255.890625,
            ha: 261,
            o: 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ',
        },
        accidentalKoron: {
            x_min: -20,
            x_max: 320,
            ha: 257,
            o: 'm -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 ',
        },
        accidentalSori: {
            x_min: -10.890625,
            x_max: 299.4375,
            ha: 294,
            o: 'm 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 ',
        },
        vexAccidentalMicrotonal2: {
            x_min: -1.359375,
            x_max: 386.5625,
            ha: 394,
            o: 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ',
        },
        vexAccidentalMicrotonal3: {
            x_min: 0,
            x_max: 430.75,
            ha: 360,
            o: 'm -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z ',
        },
        vexAccidentalMicrotonal4: {
            x_min: 0,
            x_max: 430.75,
            ha: 360,
            o: 'm 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z ',
        },
        vexNoteHeadRectBlack: {
            x_min: 0,
            x_max: 430.75,
            ha: 360,
            o: 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 ',
        },
        vexNoteHeadRectWhite: {
            x_min: 0,
            x_max: 430.75,
            ha: 360,
            o: 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100',
        },
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/custom_metrics.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/custom_metrics.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomMetrics: () => (/* binding */ CustomMetrics)
/* harmony export */ });
const CustomMetrics = {
    name: 'VexFlowCustom',
    smufl: false,
    glyphs: {},
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/gonville_glyphs.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/gonville_glyphs.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GonvilleFont: () => (/* binding */ GonvilleFont)
/* harmony export */ });
const GonvilleFont = {
    glyphs: {
        bracketTop: {
            x_min: 0,
            x_max: 559.421875,
            ha: 571,
            o: 'm 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 ',
        },
        bracketBottom: {
            x_min: 0,
            x_max: 559.421875,
            ha: 571,
            o: 'm 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 ',
        },
        barlineTick: {
            x_min: -80.3125,
            x_max: 78.9375,
            ha: 81,
            o: 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ',
        },
        breathMarkTick: {
            x_min: -80.3125,
            x_max: 78.9375,
            ha: 81,
            o: 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ',
        },
        segno: {
            x_min: -330.75,
            x_max: 329.390625,
            ha: 336,
            o: 'm -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 ',
        },
        coda: {
            x_min: -311.6875,
            x_max: 310.328125,
            ha: 317,
            o: 'm -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 ',
        },
        gClef: {
            x_min: -1.359375,
            x_max: 847.96875,
            ha: 865,
            o: 'm 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 ',
        },
        cClef: {
            x_min: 0,
            x_max: 873.828125,
            ha: 892,
            o: 'm 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 ',
        },
        fClef: {
            x_min: -1.359375,
            x_max: 899.703125,
            ha: 918,
            o: 'm 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 ',
        },
        unpitchedPercussionClef1: {
            x_min: 0,
            x_max: 464.140625,
            ha: 474,
            o: 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ',
        },
        '6stringTabClef': {
            x_min: -1.359375,
            x_max: 680.5625,
            ha: 694,
            o: 'm 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 ',
        },
        timeSig0: {
            x_min: 0,
            x_max: 514.5,
            ha: 525,
            o: 'm 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 ',
        },
        timeSig1: {
            x_min: -1.359375,
            x_max: 344.359375,
            ha: 351,
            o: 'm 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 ',
        },
        timeSig2: {
            x_min: -1.359375,
            x_max: 458.6875,
            ha: 468,
            o: 'm 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 ',
        },
        timeSig3: {
            x_min: -1.359375,
            x_max: 409.6875,
            ha: 418,
            o: 'm 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ',
        },
        timeSig4: {
            x_min: 0,
            x_max: 468.21875,
            ha: 478,
            o: 'm 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 ',
        },
        timeSig5: {
            x_min: 0,
            x_max: 409.6875,
            ha: 418,
            o: 'm 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ',
        },
        timeSig6: {
            x_min: 0,
            x_max: 475.03125,
            ha: 485,
            o: 'm 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ',
        },
        timeSig7: {
            x_min: 0,
            x_max: 442.359375,
            ha: 451,
            o: 'm 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 ',
        },
        timeSig8: {
            x_min: 0,
            x_max: 488.640625,
            ha: 499,
            o: 'm 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 ',
        },
        timeSig9: {
            x_min: 0,
            x_max: 475.03125,
            ha: 485,
            o: 'm 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ',
        },
        timeSigCommon: {
            x_min: -1.359375,
            x_max: 556.6875,
            ha: 568,
            o: 'm 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 ',
        },
        timeSigCutCommon: {
            x_min: 0,
            x_max: 556.6875,
            ha: 568,
            o: 'm 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 ',
        },
        timeSigPlus: {
            x_min: 0,
            x_max: 319.859375,
            ha: 326,
            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',
        },
        timeSigPlusSmall: {
            x_min: 0,
            x_max: 319.859375,
            ha: 326,
            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',
        },
        timeSigMinus: {
            x_min: 0,
            x_max: 318.5,
            ha: 325,
            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',
        },
        timeSigParensRight: {
            x_min: 25.859375,
            x_max: 164.6875,
            ha: 168,
            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',
        },
        timeSigParensRightSmall: {
            x_min: 25.859375,
            x_max: 164.6875,
            ha: 168,
            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',
        },
        timeSigParensLeft: {
            x_min: -166.0625,
            x_max: -25.859375,
            ha: 0,
            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',
        },
        timeSigParensLeftSmall: {
            x_min: -166.0625,
            x_max: -25.859375,
            ha: 0,
            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',
        },
        noteheadDoubleWhole: {
            x_min: 0,
            x_max: 902.421875,
            ha: 921,
            o: 'm 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 ',
        },
        noteheadWhole: {
            x_min: 0,
            x_max: 619.3125,
            ha: 632,
            o: 'm 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 ',
        },
        noteheadHalf: {
            x_min: 0,
            x_max: 428.75,
            ha: 438,
            o: 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 ',
        },
        noteheadBlack: {
            x_min: 0,
            x_max: 428.75,
            ha: 438,
            o: 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 ',
        },
        noteheadXWhole: {
            x_min: 0,
            x_max: 598.890625,
            ha: 611,
            o: 'm 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 ',
        },
        noteheadXHalf: {
            x_min: 0,
            x_max: 406.96875,
            ha: 415,
            o: 'm 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 ',
        },
        noteheadXBlack: {
            x_min: 0,
            x_max: 406.96875,
            ha: 415,
            o: 'm 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 ',
        },
        noteheadTriangleUpWhole: {
            x_min: 0,
            x_max: 630.203125,
            ha: 643,
            o: 'm 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 ',
        },
        noteheadTriangleUpHalf: {
            x_min: 0,
            x_max: 438.28125,
            ha: 447,
            o: 'm 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 ',
        },
        noteheadTriangleUpBlack: {
            x_min: -1.359375,
            x_max: 436.921875,
            ha: 446,
            o: 'm 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 ',
        },
        noteheadDiamondWhole: {
            x_min: 0,
            x_max: 432.828125,
            ha: 442,
            o: 'm 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 ',
        },
        noteheadDiamondHalf: {
            x_min: 0,
            x_max: 438.28125,
            ha: 447,
            o: 'm 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 ',
        },
        noteheadDiamondBlack: {
            x_min: 0,
            x_max: 432.828125,
            ha: 442,
            o: 'm 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 ',
        },
        augmentationDot: {
            x_min: 0,
            x_max: 133.390625,
            ha: 136,
            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',
        },
        tremolo1: {
            x_min: -206.890625,
            x_max: 428.75,
            ha: 438,
            o: 'm 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 ',
        },
        flag8thUp: {
            x_min: -24.5,
            x_max: 317.140625,
            ha: 324,
            o: 'm -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 ',
        },
        flag8thDown: {
            x_min: -21.78125,
            x_max: 367.5,
            ha: 375,
            o: 'm 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 ',
        },
        flag16thUp: {
            x_min: -24.5,
            x_max: 317.140625,
            ha: 324,
            o: 'm -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 ',
        },
        flag16thDown: {
            x_min: -21.78125,
            x_max: 362.0625,
            ha: 369,
            o: 'm 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 ',
        },
        flag32ndUp: {
            x_min: -24.5,
            x_max: 315.78125,
            ha: 322,
            o: 'm -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 ',
        },
        flag32ndDown: {
            x_min: -21.78125,
            x_max: 366.140625,
            ha: 374,
            o: 'm 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 ',
        },
        flag64thUp: {
            x_min: -24.5,
            x_max: 314.421875,
            ha: 321,
            o: 'm -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 ',
        },
        flag64thDown: {
            x_min: -21.78125,
            x_max: 367.5,
            ha: 375,
            o: 'm 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 ',
        },
        flag128thUp: {
            x_min: -24.5,
            x_max: 313.0625,
            ha: 319,
            o: 'm -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 ',
        },
        flag128thDown: {
            x_min: -21.78125,
            x_max: 367.5,
            ha: 375,
            o: 'm 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 ',
        },
        accidentalFlat: {
            x_min: -21.78125,
            x_max: 251.8125,
            ha: 257,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',
        },
        accidentalNatural: {
            x_min: 0,
            x_max: 239.5625,
            ha: 244,
            o: 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 ',
        },
        accidentalSharp: {
            x_min: 0,
            x_max: 323.9375,
            ha: 331,
            o: 'm 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 ',
        },
        accidentalDoubleSharp: {
            x_min: 0,
            x_max: 367.5,
            ha: 375,
            o: 'm 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 ',
        },
        accidentalDoubleFlat: {
            x_min: -21.78125,
            x_max: 483.1875,
            ha: 493,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ',
        },
        accidentalParensLeft: {
            x_min: -166.0625,
            x_max: -25.859375,
            ha: 0,
            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',
        },
        accidentalParensRight: {
            x_min: 25.859375,
            x_max: 164.6875,
            ha: 168,
            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',
        },
        accidentalQuarterToneFlatStein: {
            x_min: 0,
            x_max: 272.21875,
            ha: 278,
            o: 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 ',
        },
        accidentalThreeQuarterTonesFlatZimmermann: {
            x_min: 0,
            x_max: 607.0625,
            ha: 619,
            o: 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 ',
        },
        accidentalQuarterToneSharpStein: {
            x_min: 0,
            x_max: 193.28125,
            ha: 197,
            o: 'm 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 ',
        },
        accidentalThreeQuarterTonesSharpStein: {
            x_min: -1.359375,
            x_max: 455.96875,
            ha: 465,
            o: 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ',
        },
        accidentalBuyukMucennebFlat: {
            x_min: -171.5,
            x_max: 251.8125,
            ha: 257,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',
        },
        accidentalBakiyeFlat: {
            x_min: -176.9375,
            x_max: 251.8125,
            ha: 257,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',
        },
        accidentalKomaSharp: {
            x_min: -1.359375,
            x_max: 455.96875,
            ha: 465,
            o: 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ',
        },
        accidentalKucukMucennebSharp: {
            x_min: -1.359375,
            x_max: 255.890625,
            ha: 261,
            o: 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ',
        },
        articAccentAbove: {
            x_min: -348.4375,
            x_max: 24.5,
            ha: 25,
            o: 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ',
        },
        articAccentBelow: {
            x_min: -348.4375,
            x_max: 24.5,
            ha: 25,
            o: 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ',
        },
        articTenutoAbove: {
            x_min: 0,
            x_max: 318.5,
            ha: 325,
            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',
        },
        articTenutoBelow: {
            x_min: 0,
            x_max: 318.5,
            ha: 325,
            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',
        },
        articStaccatoAbove: {
            x_min: 0,
            x_max: 133.390625,
            ha: 136,
            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',
        },
        articStaccatoBelow: {
            x_min: 0,
            x_max: 133.390625,
            ha: 136,
            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',
        },
        articStaccatissimoAbove: {
            x_min: -73.5,
            x_max: 72.140625,
            ha: 74,
            o: 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ',
        },
        articStaccatissimoBelow: {
            x_min: -73.5,
            x_max: 72.140625,
            ha: 74,
            o: 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ',
        },
        articMarcatoAbove: {
            x_min: -149.71875,
            x_max: 148.359375,
            ha: 151,
            o: 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ',
        },
        articMarcatoBelow: {
            x_min: -149.71875,
            x_max: 148.359375,
            ha: 151,
            o: 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ',
        },
        fermataAbove: {
            x_min: -442.359375,
            x_max: 441,
            ha: 450,
            o: 'm -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 ',
        },
        fermataBelow: {
            x_min: -441,
            x_max: 439.640625,
            ha: 449,
            o: 'm -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',
        },
        fermataLongAbove: {
            x_min: -390.640625,
            x_max: 389.28125,
            ha: 397,
            o: 'm -378 502 l -374 503 l 0 503 l 372 503 l 377 502 b 387 491 381 499 385 496 l 389 488 l 389 251 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 174 l 347 335 l 0 335 l -348 335 l -348 174 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 251 l -390 488 l -389 491 b -378 502 -386 496 -382 499 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ',
        },
        fermataLongBelow: {
            x_min: -390.640625,
            x_max: 389.28125,
            ha: 397,
            o: 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -176 l -348 -337 l 0 -337 l 347 -337 l 347 -176 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -252 l 389 -489 l 387 -492 b 377 -503 385 -498 381 -501 l 372 -505 l 0 -505 l -374 -505 l -378 -503 b -389 -492 -382 -501 -386 -498 l -390 -489 l -390 -252 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',
        },
        fermataVeryLongAbove: {
            x_min: -390.640625,
            x_max: 389.28125,
            ha: 397,
            o: 'm -378 573 l -374 576 l 0 576 l 372 576 l 377 573 b 387 563 381 571 385 567 l 389 559 l 389 287 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 210 l 347 406 l 0 406 l -348 406 l -348 210 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 287 l -390 559 l -389 563 b -378 573 -386 567 -382 571 m -274 337 l -270 338 l 0 338 l 269 338 l 273 337 b 284 326 279 334 281 330 l 285 323 l 285 169 l 285 15 l 284 12 b 265 -1 280 4 272 -1 b 245 12 257 -1 249 4 l 245 15 l 243 108 l 243 201 l 0 201 l -245 201 l -245 108 l -245 15 l -246 12 b -266 -1 -250 4 -258 -1 b -285 12 -273 -1 -281 4 l -287 15 l -287 169 l -287 323 l -285 326 b -274 337 -283 330 -280 334 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ',
        },
        fermataVeryLongBelow: {
            x_min: -390.640625,
            x_max: 389.28125,
            ha: 397,
            o: 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -212 l -348 -408 l 0 -408 l 347 -408 l 347 -212 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -288 l 389 -560 l 387 -564 b 377 -574 385 -569 381 -573 l 372 -577 l 0 -577 l -374 -577 l -378 -574 b -389 -564 -382 -573 -386 -569 l -390 -560 l -390 -288 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -274 -2 b -266 -1 -272 -1 -270 -1 b -246 -13 -257 -1 -250 -5 l -245 -16 l -245 -109 l -245 -202 l 0 -202 l 243 -202 l 243 -109 l 245 -16 l 245 -13 b 265 0 249 -5 257 0 b 284 -13 272 0 280 -5 l 285 -16 l 285 -170 l 285 -324 l 284 -327 b 273 -338 281 -331 279 -335 l 269 -340 l 0 -340 l -270 -340 l -274 -338 b -285 -327 -280 -335 -283 -331 l -287 -324 l -287 -170 l -287 -16 l -285 -13 b -274 -2 -283 -8 -280 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',
        },
        fermataShortAbove: {
            x_min: -390.640625,
            x_max: 389.28125,
            ha: 397,
            o: 'm -9 650 b -1 652 -6 650 -4 652 b 19 639 6 652 13 648 l 23 631 b 28 623 24 628 27 626 l 34 614 l 39 606 l 43 598 l 49 588 l 54 580 l 59 571 l 65 563 l 69 555 l 74 546 l 80 537 l 85 528 b 89 520 87 526 89 523 l 95 512 l 100 503 l 106 494 l 111 487 l 115 478 l 121 470 l 126 462 l 130 453 l 136 445 l 141 437 l 147 427 l 151 419 l 156 410 l 161 402 l 167 394 l 172 385 l 176 376 b 182 367 179 374 181 370 l 187 359 l 193 351 l 198 342 l 202 334 l 208 326 l 212 317 l 217 309 l 223 301 l 228 292 l 234 284 l 238 274 l 243 266 l 249 258 l 254 249 l 259 241 l 264 233 l 269 224 b 274 216 270 222 273 217 l 280 206 l 285 198 l 295 180 l 299 174 l 304 165 l 310 156 l 315 148 l 321 140 l 325 131 l 330 123 l 336 113 l 341 105 l 347 97 l 351 88 l 356 80 l 360 72 b 364 66 362 70 363 68 b 370 58 366 65 368 61 l 379 41 b 389 19 386 31 389 24 b 382 4 389 13 386 8 b 347 0 377 0 378 0 b 337 0 344 0 340 0 b 336 0 336 0 336 0 b 287 11 294 0 294 0 l 281 19 l 276 27 l 272 37 l 266 45 l 261 54 l 255 62 l 250 70 l 246 79 l 240 87 l 235 97 l 230 105 l 224 113 l 220 122 l 215 130 l 209 140 l 204 148 l 200 155 l 194 163 b 189 172 193 165 191 169 l 185 180 l 179 188 l 174 198 l 168 206 l 163 215 l 159 223 l 153 231 l 148 240 l 142 249 l 138 258 l 133 266 l 127 274 l 122 283 l 117 292 l 111 301 l 107 308 l 102 316 b 98 324 102 317 99 322 l 92 333 l 87 341 l 81 349 l 77 359 l 72 367 l 66 376 l 61 384 l 55 392 l 51 401 l 46 410 l 40 419 l 35 427 l 31 435 l 24 444 l 20 453 l 14 460 l 10 469 b 5 477 9 470 6 474 l 0 485 l -5 494 l -9 502 l -14 512 b -20 519 -16 513 -19 517 l -24 526 l -28 534 b -31 537 -29 535 -31 537 b -35 533 -32 537 -32 535 l -88 444 l -187 280 l -285 117 l -343 23 b -362 1 -352 6 -356 2 b -368 0 -364 0 -367 0 b -390 20 -381 0 -390 8 l -390 20 b -359 77 -390 27 -390 27 l -80 539 l -25 631 b -9 650 -17 644 -13 648 m -13 133 b -1 134 -9 133 -5 134 b 50 105 19 134 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 70 -57 40 -62 55 b -13 133 -62 98 -44 126 ',
        },
        fermataShortBelow: {
            x_min: -390.640625,
            x_max: 389.28125,
            ha: 397,
            o: 'm -377 -1 b -368 0 -375 -1 -372 0 b -362 -1 -366 0 -363 -1 b -343 -24 -356 -4 -352 -8 l -285 -119 l -187 -280 l -88 -444 l -35 -533 b -31 -538 -32 -537 -32 -538 b -28 -534 -31 -538 -29 -537 l -23 -526 l -19 -517 l -13 -509 l -8 -501 l -2 -492 l 2 -483 l 6 -476 l 17 -458 l 23 -449 l 32 -433 l 38 -424 l 42 -416 l 47 -408 l 53 -399 l 58 -391 l 63 -381 l 68 -373 l 73 -365 l 78 -356 l 84 -348 l 89 -340 l 93 -330 l 99 -322 l 104 -315 l 114 -297 l 125 -280 l 129 -272 l 134 -263 l 140 -255 l 145 -247 l 151 -238 l 155 -230 l 160 -220 l 166 -212 l 171 -204 l 176 -195 l 181 -187 l 186 -177 l 191 -169 l 196 -162 l 201 -154 l 206 -144 l 217 -127 l 221 -119 l 227 -111 l 232 -102 l 238 -94 l 242 -86 l 247 -77 l 253 -69 l 258 -59 l 262 -51 l 268 -43 l 273 -34 l 279 -26 l 283 -18 b 321 -1 292 -2 292 -1 b 338 -1 326 -1 332 -1 b 382 -6 378 -1 375 -1 b 389 -20 386 -9 389 -15 b 382 -38 389 -26 386 -31 l 378 -47 l 372 -55 l 367 -63 l 362 -72 l 356 -80 l 351 -90 l 347 -98 l 341 -106 l 336 -115 l 330 -123 l 325 -131 l 321 -141 l 315 -149 l 310 -158 l 304 -166 l 299 -174 b 295 -183 298 -177 296 -181 l 289 -191 l 285 -199 l 280 -208 l 274 -216 l 269 -224 l 264 -233 l 259 -242 l 254 -251 l 249 -259 l 243 -267 l 238 -276 l 234 -284 l 228 -292 l 223 -302 l 217 -310 l 213 -319 l 208 -327 b 202 -335 206 -330 204 -334 l 197 -344 l 193 -351 l 187 -360 l 182 -369 l 176 -377 l 172 -385 l 167 -394 l 161 -403 l 156 -412 l 152 -420 l 147 -428 l 141 -437 l 136 -445 l 130 -455 l 126 -463 l 121 -471 l 115 -480 b 110 -488 114 -483 111 -487 l 106 -496 l 100 -503 l 96 -512 l 89 -521 l 85 -530 l 80 -538 l 74 -546 l 69 -555 l 65 -564 l 59 -573 l 54 -581 l 49 -589 l 43 -598 l 39 -606 l 34 -616 l 28 -624 l 23 -632 b 19 -641 21 -635 20 -638 b 0 -653 14 -649 8 -653 b -25 -631 -10 -653 -14 -649 l -80 -541 l -359 -79 b -389 -29 -375 -52 -389 -30 b -390 -22 -389 -26 -390 -24 b -377 -1 -390 -13 -385 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 51 -36 19 -8 39 -19 b 61 -72 58 -47 61 -59 b 51 -106 61 -84 58 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -127 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',
        },
        breathMarkComma: {
            x_min: -1.359375,
            x_max: 193.28125,
            ha: 197,
            o: 'm 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 ',
        },
        breathMarkUpbow: {
            x_min: -170.140625,
            x_max: 168.78125,
            ha: 172,
            o: 'm -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 ',
        },
        caesura: {
            x_min: 0,
            x_max: 622.03125,
            ha: 635,
            o: 'm 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 ',
        },
        caesuraCurved: {
            x_min: 0,
            x_max: 503.609375,
            ha: 514,
            o: 'm 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 ',
        },
        restMaxima: {
            x_min: 0,
            x_max: 464.140625,
            ha: 474,
            o: 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ',
        },
        restDoubleWhole: {
            x_min: 0,
            x_max: 386.5625,
            ha: 394,
            o: 'm 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 ',
        },
        restWhole: {
            x_min: 0,
            x_max: 447.8125,
            ha: 457,
            o: 'm 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 ',
        },
        restWholeLegerLine: {
            x_min: 0,
            x_max: 737.71875,
            ha: 753,
            o: 'm 9 13 b 208 15 10 15 51 15 b 368 15 251 15 304 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 660 -16 l 592 -16 l 592 -95 l 592 -174 l 368 -174 l 144 -174 l 144 -95 l 144 -16 l 77 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 9 13 0 5 2 11 ',
        },
        restHalf: {
            x_min: 0,
            x_max: 447.8125,
            ha: 457,
            o: 'm 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 ',
        },
        restHalfLegerLine: {
            x_min: 0,
            x_max: 737.71875,
            ha: 753,
            o: 'm 144 94 l 144 173 l 368 173 l 592 173 l 592 94 l 592 15 l 660 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 368 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 6 12 0 4 1 9 l 9 15 l 77 15 l 144 15 l 144 94 ',
        },
        restQuarter: {
            x_min: 0,
            x_max: 300.8125,
            ha: 307,
            o: 'm 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 ',
        },
        rest8th: {
            x_min: 0,
            x_max: 349.8125,
            ha: 357,
            o: 'm 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 ',
        },
        rest16th: {
            x_min: 0,
            x_max: 450.53125,
            ha: 460,
            o: 'm 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 ',
        },
        rest32nd: {
            x_min: 0,
            x_max: 551.25,
            ha: 563,
            o: 'm 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 ',
        },
        rest64th: {
            x_min: -1.359375,
            x_max: 651.96875,
            ha: 665,
            o: 'm 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 ',
        },
        rest128th: {
            x_min: -1.359375,
            x_max: 752.703125,
            ha: 768,
            o: 'm 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 ',
        },
        dynamicPiano: {
            x_min: -53.078125,
            x_max: 513.140625,
            ha: 485,
            o: 'm 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 ',
        },
        dynamicMezzo: {
            x_min: 46.28125,
            x_max: 669.671875,
            ha: 563,
            o: 'm 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 ',
        },
        dynamicForte: {
            x_min: -118.421875,
            x_max: 597.53125,
            ha: 381,
            o: 'm 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 ',
        },
        dynamicRinforzando: {
            x_min: 78.9375,
            x_max: 485.921875,
            ha: 417,
            o: 'm 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 ',
        },
        dynamicSforzando: {
            x_min: 70.78125,
            x_max: 378.390625,
            ha: 315,
            o: 'm 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 ',
        },
        dynamicZ: {
            x_min: 29.9375,
            x_max: 420.578125,
            ha: 371,
            o: 'm 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 ',
        },
        ornamentTrill: {
            x_min: -340.28125,
            x_max: 338.921875,
            ha: 346,
            o: 'm -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 ',
        },
        ornamentTurn: {
            x_min: -423.3125,
            x_max: 421.9375,
            ha: 431,
            o: 'm -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 ',
        },
        ornamentTurnSlash: {
            x_min: -423.3125,
            x_max: 421.9375,
            ha: 431,
            o: 'm -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 ',
        },
        ornamentMordent: {
            x_min: -402.890625,
            x_max: 401.53125,
            ha: 410,
            o: 'm -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 ',
        },
        ornamentShortTrill: {
            x_min: -402.890625,
            x_max: 401.53125,
            ha: 410,
            o: 'm -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 ',
        },
        ornamentTremblement: {
            x_min: -571.671875,
            x_max: 570.3125,
            ha: 582,
            o: 'm -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 ',
        },
        ornamentPrecompAppoggTrill: {
            x_min: -571.671875,
            x_max: 570.3125,
            ha: 582,
            o: 'm -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 ',
        },
        ornamentPrecompSlideTrillDAnglebert: {
            x_min: -590.71875,
            x_max: 589.359375,
            ha: 601,
            o: 'm -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 ',
        },
        ornamentPrecompSlideTrillBach: {
            x_min: -590.71875,
            x_max: 589.359375,
            ha: 601,
            o: 'm 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 ',
        },
        ornamentPrecompTrillSuffixDandrieu: {
            x_min: -590.71875,
            x_max: 589.359375,
            ha: 601,
            o: 'm 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 ',
        },
        ornamentPrecompDoubleCadenceUpperPrefix: {
            x_min: -597.53125,
            x_max: 596.171875,
            ha: 608,
            o: 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ',
        },
        ornamentPrecompDoubleCadenceUpperPrefixTurn: {
            x_min: -597.53125,
            x_max: 596.171875,
            ha: 608,
            o: 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ',
        },
        ornamentPrecompTrillLowerSuffix: {
            x_min: -597.53125,
            x_max: 596.171875,
            ha: 608,
            o: 'm -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 ',
        },
        stringsDownBow: {
            x_min: -228.671875,
            x_max: 227.3125,
            ha: 232,
            o: 'm -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 ',
        },
        stringsUpBow: {
            x_min: -149.71875,
            x_max: 148.359375,
            ha: 151,
            o: 'm -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 ',
        },
        stringsHarmonic: {
            x_min: -122.5,
            x_max: 121.140625,
            ha: 124,
            o: 'm -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 ',
        },
        pluckedSnapPizzicatoAbove: {
            x_min: -149.71875,
            x_max: 148.359375,
            ha: 151,
            o: 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ',
        },
        pluckedSnapPizzicatoBelow: {
            x_min: -149.71875,
            x_max: 148.359375,
            ha: 151,
            o: 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ',
        },
        pluckedLeftHandPizzicato: {
            x_min: 0,
            x_max: 319.859375,
            ha: 326,
            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',
        },
        keyboardPedalPed: {
            x_min: -1.359375,
            x_max: 1064.390625,
            ha: 1086,
            o: 'm 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 ',
        },
        keyboardPedalUp: {
            x_min: -1.359375,
            x_max: 592.078125,
            ha: 604,
            o: 'm 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 ',
        },
        pictChokeCymbal: {
            x_min: 0,
            x_max: 227.3125,
            ha: 232,
            o: 'm 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 ',
        },
        wiggleArpeggiatoUp: {
            x_min: 58.53125,
            x_max: 228.671875,
            ha: 294,
            o: 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ',
        },
        arrowheadBlackUp: {
            x_min: -10.890625,
            x_max: 299.4375,
            ha: 294,
            o: 'm 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 ',
        },
        arrowheadBlackDown: {
            x_min: -10.890625,
            x_max: 298.078125,
            ha: 294,
            o: 'm 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 ',
        },
        vexAccidentalMicrotonal1: {
            x_min: -171.5,
            x_max: 483.1875,
            ha: 493,
            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ',
        },
        vexAccidentalMicrotonal2: {
            x_min: -1.359375,
            x_max: 386.5625,
            ha: 394,
            o: 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ',
        },
        vexWiggleArpeggioUp: {
            x_min: 58.53125,
            x_max: 228.671875,
            ha: 294,
            o: 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ',
        },
        vexNoteHeadMutedBreve: {
            x_min: 0,
            x_max: 370.21875,
            ha: 378,
            o: 'm 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 ',
        },
    },
    cssFontWeight: 'normal',
    ascender: 1903,
    underlinePosition: -125,
    cssFontStyle: 'normal',
    boundingBox: {
        yMin: -2065.375,
        xMin: -695.53125,
        yMax: 1901.578125,
        xMax: 1159.671875,
    },
    resolution: 1000,
    original_font_information: {
        postscript_name: 'Gonville-18',
        version_string: 'Version 0.1.8904 ',
        vendor_url: '',
        full_font_name: 'Gonville-18',
        font_family_name: 'Gonville-18',
        copyright: 'No copyright is claimed on this font file.',
        description: '',
        trademark: '',
        designer: '',
        designer_url: '',
        unique_font_identifier: 'FontForge 2.0 : Gonville-18 : 17-3-2010',
        license_url: '',
        license_description: '',
        manufacturer_name: '',
        font_sub_family_name: '18',
    },
    descender: -2066,
    fontFamily: 'Gonville-18',
    lineHeight: 4093,
    underlineThickness: 50,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/gonville_metrics.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/gonville_metrics.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GonvilleMetrics: () => (/* binding */ GonvilleMetrics)
/* harmony export */ });
const GonvilleMetrics = {
    name: 'Gonville',
    smufl: false,
    stave: {
        padding: 12,
        endPaddingMax: 10,
        endPaddingMin: 5,
        unalignedNotePadding: 10,
    },
    accidental: {
        noteheadAccidentalPadding: 1,
        leftPadding: 2,
        accidentalSpacing: 3,
    },
    clef: {
        default: {
            point: 40,
            width: 26,
        },
        small: {
            point: 32,
            width: 20,
        },
        annotations: {
            '8va': {
                smuflCode: 'timeSig8',
                default: {
                    point: 20,
                    treble: {
                        line: -1.2,
                        shiftX: 11,
                    },
                },
                small: {
                    point: 18,
                    treble: {
                        line: -0.4,
                        shiftX: 8,
                    },
                },
            },
            '8vb': {
                smuflCode: 'timeSig8',
                default: {
                    point: 20,
                    treble: {
                        line: 6.3,
                        shiftX: 10,
                    },
                    bass: {
                        line: 4,
                        shiftX: 1,
                    },
                },
                small: {
                    point: 18,
                    treble: {
                        line: 5.8,
                        shiftX: 6,
                    },
                    bass: {
                        line: 3.5,
                        shiftX: 0.5,
                    },
                },
            },
        },
        lineCount: {
            '8': { point: 55, shiftY: 14 },
            '7': { point: 47, shiftY: 8 },
            '6': { point: 40, shiftY: 1 },
            '5': { point: 30, shiftY: -6 },
            '4': { point: 23, shiftY: -12 },
        },
    },
    parenthesis: {
        default: {
            point: 39,
            width: 7,
        },
        gracenote: {
            point: (39 * 3) / 5,
            width: 3,
        },
    },
    pedalMarking: {
        up: {
            point: 40,
        },
        down: {
            point: 40,
        },
    },
    digits: {
        point: 40,
        tupletPoint: 28,
    },
    tremolo: {
        default: {
            point: 25,
            spacing: 4,
            offsetYStemUp: -7,
            offsetYStemDown: 7,
            offsetXStemUp: 9,
            offsetXStemDown: -0.5,
        },
        grace: {
            point: 15,
            spacing: 4,
            offsetYStemUp: -7,
            offsetYStemDown: 7,
            offsetXStemUp: 6.5,
            offsetXStemDown: -0.5,
        },
    },
    staveRepetition: {
        symbolText: {
            offsetX: 12,
            offsetY: 25,
            spacing: 5,
        },
        coda: {
            offsetY: 25,
        },
        segno: {
            offsetY: 0,
        },
    },
    stem: {
        heightAdjustmentForFlag: -3,
        noteHead: {
            noteheadTriangleUpHalf: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpBlack: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpWhole: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadXHalf: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXBlack: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXWhole: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadHalf: {
                offsetYBaseStemUp: -1.5,
                offsetYBaseStemDown: 1.5,
            },
            noteheadBlack: {
                offsetYBaseStemUp: -1.5,
                offsetYBaseStemDown: 1.5,
            },
            noteheadSquareWhite: {
                offsetYBaseStemDown: -5,
                offsetYBaseStemUp: 5,
            },
        },
    },
    glyphs: {
        flag: {
            shiftX: -0.08,
            flag8thDown: {
                shiftX: -0.16,
            },
            flag16thDown: {
                shiftX: -0.16,
            },
            flag32ndDown: {
                shiftX: -0.16,
                shiftY: 9,
            },
            flag64thDown: {
                shiftX: -0.16,
                shiftY: 13,
            },
            flag128thDown: {
                shiftX: -0.16,
                shiftY: 22,
            },
            flag32ndUp: {
                shiftY: -9,
            },
            flag64thUp: {
                shiftY: -13,
            },
            flag128thUp: {
                shiftY: -22,
            },
        },
        stringNumber: {
            verticalPadding: 8,
            stemPadding: 2,
            leftPadding: 5,
            rightPadding: 6,
        },
        textNote: {
            point: 40,
            default: {},
            ornamentTrill: {
                shiftX: -5,
                shiftY: 4,
            },
        },
        noteHead: {
            minPadding: 2,
            custom: {
                noteheadCircleXStemUp: {
                    shiftX: -1.5,
                },
                noteheadXWholeStemUp: {
                    shiftX: -5,
                },
                noteheadTriangleUpWholeStemUp: {
                    shiftX: -6,
                },
            },
        },
        chordSymbol: {
            global: {
                superscriptOffset: -400,
                subscriptOffset: 300,
                kerningOffset: -250,
                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],
                upperKerningText: ['A', 'L'],
                spacing: 100,
                superSubRatio: 0.66,
            },
            csymDiminished: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymHalfDiminished: {
                scale: 0.8,
                leftSideBearing: -32,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymAugmented: {
                scale: 1,
                leftSideBearing: 0,
                advanceWidth: 530,
                yOffset: 0,
            },
            csymParensLeftTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 155,
                yOffset: 250,
            },
            csymParensRightTall: {
                scale: 0.8,
                leftSideBearing: -40,
                advanceWidth: 189,
                yOffset: 250,
            },
            csymBracketLeftTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 328,
                yOffset: 0,
            },
            csymBracketRightTall: {
                scale: 0.8,
                leftSideBearing: 1,
                advanceWidth: 600,
                yOffset: 0,
            },
            csymParensLeftVeryTall: {
                scale: 0.9,
                leftSideBearing: 0,
                advanceWidth: 121,
                yOffset: 350,
            },
            csymParensRightVeryTall: {
                scale: 0.9,
                leftSideBearing: 50,
                advanceWidth: 111,
                yOffset: 350,
            },
            csymDiagonalArrangementSlash: {
                scale: 0.6,
                leftSideBearing: -1,
                advanceWidth: 990,
                yOffset: 0,
            },
            csymMinor: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 482,
                yOffset: 0,
            },
            csymMajorSeventh: {
                scale: 0.9,
                leftSideBearing: 200,
                yOffset: 0,
                advanceWidth: 600,
            },
            accidentalSharp: {
                scale: 0.75,
                leftSideBearing: 40,
                advanceWidth: 250,
                yOffset: -402,
            },
            accidentalFlat: {
                scale: 0.95,
                leftSideBearing: -50,
                advanceWidth: 208,
                yOffset: -184,
            },
        },
        jazzOrnaments: {
            brassScoop: {
                scale: 1.0,
                xOffset: -12,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 15,
            },
            brassDoitMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 22,
            },
            brassFallLipShort: {
                scale: 1.0,
                xOffset: 17,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 15,
            },
            brassLiftMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 5,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassFallRoughMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 28,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassBend: {
                scale: 1.0,
                xOffset: 2,
                yOffset: -8,
                stemUpYOffset: 24,
                reportedWidth: 5,
            },
            brassMuteClosed: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -9,
                stemUpYOffset: 24,
                reportedWidth: 5,
            },
            brassMuteOpen: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -7,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassFlip: {
                scale: 1.0,
                xOffset: 10,
                yOffset: -4,
                stemUpYOffset: 7,
                reportedWidth: 5,
            },
            brassJazzTurn: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -4,
                stemUpYOffset: 10,
                reportedWidth: 28,
            },
            brassSmear: {
                scale: 1.0,
                xOffset: 10,
                yOffset: -4,
                stemUpYOffset: 9,
                reportedWidth: 5,
            },
        },
        tremolo: {
            default: {
                shiftY: -10,
            },
            grace: {
                shiftY: -5,
            },
        },
        tuplet: {
            noteHeadOffset: 20,
            stemOffset: 10,
            bottomLine: 4,
            topModifierOffset: 15,
        },
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/leland_glyphs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/leland_glyphs.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LelandFont: () => (/* binding */ LelandFont)
/* harmony export */ });
const LelandFont = {
    glyphs: {
        bracketTop: {
            x_min: 0,
            x_max: 491,
            y_min: 0,
            y_max: 279,
            ha: 279,
            o: 'm 697 399 b 687 402 694 400 690 402 b 671 395 681 402 674 400 b 249 168 668 390 524 168 l 20 168 b 0 150 9 168 0 161 l 0 20 l 0 0 l 176 0 b 706 374 619 0 704 370 b 707 382 706 376 707 379 b 697 399 707 389 703 395 z',
        },
        bracketBottom: {
            x_min: 0,
            x_max: 491,
            y_min: -279,
            y_max: 0,
            ha: 279,
            o: 'm 697 -399 b 707 -382 703 -395 707 -389 b 706 -374 707 -379 706 -376 b 176 0 704 -370 619 0 l 0 0 l 0 -20 l 0 -150 b 20 -168 0 -161 9 -168 l 249 -168 b 671 -395 524 -168 668 -390 b 687 -402 674 -400 681 -402 b 697 -399 690 -402 694 -400 z',
        },
        segno: {
            x_min: 0,
            x_max: 654,
            y_min: 0,
            y_max: 869,
            ha: 869,
            o: 'm 546 690 l 838 1207 b 841 1215 840 1210 841 1212 b 832 1233 841 1221 837 1230 l 809 1248 b 798 1251 806 1250 801 1251 b 780 1241 792 1251 783 1247 l 487 721 l 217 860 b 99 995 147 897 99 924 b 236 1165 99 1120 179 1165 b 343 1073 288 1165 325 1130 b 454 988 357 1022 405 988 b 477 991 461 988 469 989 b 541 1076 526 1002 541 1045 b 540 1089 541 1080 541 1084 b 294 1225 534 1116 514 1225 b 0 939 72 1225 0 1053 b 125 706 0 825 42 753 l 397 563 l 104 45 b 102 35 102 42 102 37 b 111 19 102 29 107 22 l 132 3 b 144 0 135 1 141 0 b 148 0 145 0 147 0 b 161 10 153 1 158 6 l 456 531 l 704 403 b 842 256 780 361 842 318 b 706 86 842 131 763 86 b 599 177 654 86 616 120 b 488 262 585 228 537 262 b 465 259 481 262 472 261 b 402 177 418 248 402 206 b 403 163 402 171 402 167 b 649 26 409 135 429 26 b 942 312 871 26 942 199 b 821 549 942 426 901 507 z m 52 444 b 118 416 69 426 95 416 b 183 444 141 416 166 426 b 210 508 200 461 210 485 b 183 573 210 531 200 556 b 118 600 166 590 141 600 b 52 573 95 600 69 590 b 24 508 35 556 24 531 b 52 444 24 485 35 461 z m 760 730 b 825 703 778 713 802 703 b 890 730 848 703 873 713 b 917 795 907 747 917 772 b 890 861 917 818 907 844 b 825 888 873 878 848 888 b 760 861 802 888 778 878 b 733 795 743 844 733 818 b 760 730 733 772 743 747 z',
        },
        coda: {
            x_min: 0,
            x_max: 745,
            y_min: -113,
            y_max: 735,
            ha: 848,
            o: 'm 924 467 b 560 896 916 697 757 881 l 560 1038 b 540 1058 560 1050 552 1058 l 524 1058 b 505 1038 513 1058 505 1050 l 505 896 b 150 467 311 877 158 693 l 20 467 b 0 446 9 467 0 458 l 0 432 b 20 412 0 420 9 412 l 150 412 b 505 0 166 193 317 17 l 505 -143 b 524 -163 505 -154 513 -163 l 540 -163 b 560 -143 552 -163 560 -154 l 560 0 b 923 412 753 13 907 190 l 1054 412 b 1073 432 1066 412 1073 420 l 1073 446 b 1054 467 1073 458 1066 467 z m 560 467 l 560 852 b 773 467 716 837 773 671 z m 505 467 l 301 467 b 505 851 301 668 357 831 z m 505 412 l 505 45 b 301 412 366 65 301 219 z m 560 412 l 772 412 b 560 45 772 215 706 60 z',
        },
        gClef: {
            x_min: 0,
            x_max: 640,
            y_min: -666,
            y_max: 1112,
            ha: 1778,
            o: 'm 809 -30 b 665 -279 809 -132 768 -238 b 586 186 635 -107 596 122 b 809 -30 716 186 809 98 z m 605 -297 b 521 -305 576 -302 549 -305 b 140 56 315 -305 140 -161 b 390 498 140 232 264 389 b 459 562 415 520 438 540 b 492 357 472 484 482 416 b 272 45 361 318 272 180 b 467 -194 272 -56 351 -194 b 491 -176 478 -194 491 -189 b 459 -144 491 -163 477 -156 b 372 -1 403 -109 372 -72 b 521 177 372 86 436 157 z m 478 1184 b 632 1392 491 1241 557 1392 b 688 1223 654 1392 688 1322 b 478 863 688 1073 577 960 b 462 1037 469 920 462 976 b 478 1184 462 1090 467 1139 z m 176 -739 b 444 -959 176 -834 249 -959 b 622 -910 511 -959 570 -942 b 720 -670 700 -855 720 -760 b 697 -467 720 -613 711 -549 b 675 -338 693 -438 684 -395 b 922 3 816 -292 922 -145 b 557 367 922 220 768 367 b 516 619 543 454 528 539 b 773 1188 668 779 773 959 b 710 1477 773 1319 733 1426 b 608 1601 675 1551 634 1601 b 505 1528 598 1601 553 1584 b 387 1113 413 1418 387 1234 b 419 804 387 1035 395 965 b 312 701 418 802 343 726 b 0 117 181 579 0 405 b 503 -364 0 -153 235 -364 b 616 -354 544 -364 583 -360 b 660 -670 644 -492 660 -593 b 438 -899 660 -819 583 -899 b 370 -891 403 -899 373 -891 b 366 -887 369 -890 366 -888 b 373 -881 366 -884 369 -883 b 508 -721 441 -871 508 -814 b 341 -562 508 -644 449 -562 b 176 -739 240 -562 176 -644 z',
        },
        cClef: {
            x_min: 0,
            x_max: 627,
            y_min: -480,
            y_max: 482,
            ha: 962,
            o: 'm 19 675 b 0 657 9 675 0 667 l 0 -654 b 19 -672 0 -664 9 -672 l 122 -672 b 141 -654 132 -672 141 -664 l 141 657 b 122 675 141 667 132 675 z m 903 -376 b 619 -58 903 -197 808 -58 b 505 -95 586 -58 562 -60 b 426 1 503 -89 474 -32 b 505 98 474 35 503 92 b 641 60 560 65 579 60 b 903 379 816 60 903 223 b 580 694 903 580 755 694 b 318 517 472 694 318 649 b 438 400 318 446 367 400 b 546 510 501 400 546 446 b 425 615 546 589 494 615 b 547 651 458 638 503 651 b 723 400 698 651 723 530 b 593 128 723 289 720 128 b 438 279 467 128 441 265 b 418 300 438 281 438 300 b 396 279 397 300 396 281 b 264 29 383 200 344 62 l 264 657 b 246 675 264 667 256 675 b 228 657 236 675 228 667 l 228 -654 b 246 -672 228 -664 236 -672 b 264 -654 256 -672 264 -664 l 264 -26 b 396 -278 348 -60 380 -197 b 418 -297 396 -279 397 -297 b 438 -278 438 -297 438 -279 b 593 -125 441 -262 467 -125 b 723 -397 720 -125 723 -287 b 547 -648 723 -527 698 -648 b 425 -612 503 -648 458 -635 b 441 -613 426 -612 432 -613 b 546 -507 504 -613 546 -569 b 438 -397 546 -444 501 -397 b 318 -514 367 -397 318 -444 b 580 -691 318 -647 472 -691 b 903 -376 755 -691 903 -577 z',
        },
        fClef: {
            x_min: 0,
            x_max: 664,
            y_min: -617,
            y_max: 251,
            ha: 868,
            o: 'm 366 361 b 167 298 256 361 168 298 b 37 112 84 236 50 163 b 27 36 30 86 27 60 b 46 -58 27 1 33 -30 b 140 -138 63 -96 96 -124 b 194 -147 157 -144 176 -147 b 287 -122 226 -147 259 -138 b 359 10 331 -98 359 -46 b 289 134 359 60 333 107 b 206 160 259 154 230 160 b 160 153 189 160 173 157 b 109 122 145 147 121 132 b 147 215 114 150 131 192 b 219 279 163 238 194 266 b 351 308 255 300 301 308 b 570 -52 498 308 570 190 b 477 -399 570 -186 520 -314 b 310 -635 429 -494 366 -585 b 17 -837 160 -772 19 -837 b 0 -864 17 -837 0 -847 b 1 -871 0 -867 1 -868 b 27 -888 6 -886 19 -888 b 35 -887 29 -888 33 -887 b 331 -717 36 -887 200 -819 b 528 -544 405 -664 471 -606 b 661 -367 580 -488 625 -428 b 760 -50 724 -259 760 -147 b 670 239 760 69 729 168 b 366 361 602 320 500 361 z m 818 179 b 887 107 818 138 850 107 b 956 179 924 107 956 138 b 887 252 956 219 924 252 b 818 179 850 252 818 219 z m 818 -177 b 887 -251 818 -217 850 -251 b 956 -177 924 -251 956 -217 b 887 -104 956 -137 924 -104 b 818 -177 850 -104 818 -137 z',
        },
        unpitchedPercussionClef1: {
            x_min: 0,
            x_max: 352,
            y_min: -252,
            y_max: 252,
            ha: 504,
            o: 'm 19 363 b 0 344 9 363 0 354 l 0 -344 b 19 -363 0 -354 9 -363 l 177 -363 b 196 -344 187 -363 196 -354 l 196 344 b 177 363 196 354 187 363 z m 330 363 b 311 344 320 363 311 354 l 311 -344 b 330 -363 311 -354 320 -363 l 488 -363 b 507 -344 498 -363 507 -354 l 507 344 b 488 363 507 354 498 363 z',
        },
        '6stringTabClef': {
            x_min: 0,
            x_max: 439,
            y_min: -743,
            y_max: 746,
            ha: 1489,
            o: 'm 52 1074 l 52 958 l 249 958 l 249 419 l 387 419 l 387 958 l 583 958 l 583 1074 z m 0 -333 l 145 -333 l 192 -196 l 436 -196 l 481 -333 l 632 -333 l 396 334 l 238 334 z m 315 181 l 400 -81 l 229 -81 z m 566 -474 b 393 -402 531 -428 475 -403 l 71 -402 l 71 -1070 l 372 -1070 b 374 -1070 373 -1070 373 -1070 b 465 -1061 405 -1070 435 -1067 b 541 -1027 494 -1056 520 -1043 b 588 -975 560 -1012 575 -995 b 618 -868 608 -943 618 -907 b 592 -770 618 -829 609 -798 b 514 -711 575 -743 549 -724 b 566 -674 537 -700 554 -688 b 596 -576 586 -649 596 -616 b 566 -474 596 -536 586 -503 z m 348 -518 b 428 -528 380 -518 408 -521 b 464 -590 452 -539 464 -559 b 436 -649 464 -619 455 -638 b 366 -665 418 -661 395 -665 l 203 -665 l 203 -518 z m 367 -776 b 435 -788 396 -776 419 -780 b 477 -858 464 -801 477 -824 b 433 -942 477 -900 462 -927 b 366 -953 418 -949 395 -953 l 203 -953 l 203 -776 z',
        },
        timeSig0: {
            x_min: 15,
            x_max: 389,
            y_min: -254,
            y_max: 255,
            ha: 509,
            o: 'm 291 367 b 22 0 138 367 22 209 b 291 -366 22 -209 138 -366 b 560 0 444 -366 560 -209 b 291 367 560 209 444 367 z m 376 -200 b 291 -308 376 -252 353 -308 b 206 -200 229 -308 206 -252 l 206 200 b 291 308 206 252 229 308 b 376 200 353 308 376 252 z',
        },
        timeSig1: {
            x_min: 15,
            x_max: 336,
            y_min: -243,
            y_max: 245,
            ha: 488,
            o: 'm 359 -284 l 359 336 b 341 353 359 346 351 353 l 199 353 b 190 350 196 353 193 351 b 184 344 189 348 186 346 l 23 65 b 22 56 22 62 22 59 b 30 42 22 50 26 45 l 58 26 b 66 23 60 24 63 23 b 81 32 72 23 78 27 l 183 207 l 183 -284 l 73 -284 b 56 -301 63 -284 56 -291 l 56 -333 b 73 -350 56 -343 63 -350 l 468 -350 b 484 -333 478 -350 484 -343 l 484 -301 b 468 -284 484 -291 478 -284 z',
        },
        timeSig2: {
            x_min: 15,
            x_max: 377,
            y_min: -243,
            y_max: 245,
            ha: 488,
            o: 'm 492 -56 b 382 -192 481 -88 452 -192 b 190 -134 288 -192 268 -134 b 153 -138 179 -134 167 -135 b 341 -36 153 -138 189 -84 b 533 173 494 12 533 86 b 288 353 533 233 505 353 b 30 156 71 353 30 222 b 138 49 30 96 79 49 b 245 156 197 49 245 96 b 179 255 245 196 216 240 b 168 271 174 256 168 264 b 202 297 168 279 176 289 b 251 304 209 300 229 304 b 311 288 271 304 294 300 b 348 180 338 271 348 245 b 65 -150 348 12 148 -24 b 22 -278 65 -150 22 -210 b 73 -350 22 -346 56 -350 b 121 -305 96 -350 121 -331 b 117 -287 121 -300 120 -294 b 105 -239 108 -266 105 -251 b 107 -226 105 -235 105 -230 b 154 -203 108 -217 120 -203 b 238 -289 196 -203 212 -252 b 350 -350 264 -327 304 -350 b 484 -264 396 -350 458 -317 b 543 -63 510 -210 543 -102 b 518 -36 543 -45 531 -36 b 492 -56 508 -36 498 -42 z',
        },
        timeSig3: {
            x_min: 14.984905204685425,
            x_max: 364,
            y_min: -244,
            y_max: 244,
            ha: 488,
            o: 'm 392 23 b 514 168 507 68 514 143 b 514 176 514 171 514 174 b 262 351 514 189 510 351 b 22 176 14 351 22 176 l 23 176 l 22 173 b 115 81 22 121 63 81 b 207 173 167 81 207 121 b 135 264 207 215 176 255 b 140 268 137 265 138 266 b 215 289 160 282 187 289 b 340 176 275 289 340 253 b 255 69 340 85 272 72 b 140 60 238 66 157 60 b 121 40 122 60 121 40 l 121 12 b 140 -6 121 12 124 -4 b 243 -14 164 -7 197 -7 b 340 -167 307 -23 340 -66 b 215 -289 340 -264 275 -289 b 121 -266 174 -289 137 -278 b 207 -174 168 -264 207 -222 b 115 -81 207 -122 167 -81 b 22 -174 63 -81 22 -122 b 22 -180 22 -174 22 -177 b 78 -298 22 -199 26 -251 b 236 -351 134 -350 204 -351 b 524 -147 374 -351 524 -304 b 389 23 524 -42 452 3 z',
        },
        timeSig4: {
            x_min: 14,
            x_max: 442,
            y_min: -248,
            y_max: 249,
            ha: 497,
            o: 'm 300 -183 l 300 -289 l 180 -289 b 160 -310 170 -289 160 -298 l 160 -337 b 180 -357 160 -348 170 -357 l 616 -357 b 636 -337 628 -357 636 -348 l 636 -310 b 616 -289 636 -298 628 -289 l 487 -289 l 487 -183 l 616 -183 b 636 -161 628 -183 636 -173 l 636 -134 b 616 -114 636 -124 628 -114 l 487 -114 l 487 115 b 477 134 487 124 482 131 l 459 143 b 452 144 456 144 455 144 b 449 144 451 144 451 144 b 436 140 445 144 439 143 l 305 20 b 300 4 301 16 300 10 l 300 -114 l 132 -114 b 464 287 132 -114 294 59 b 471 307 469 294 471 301 b 467 321 471 314 468 320 l 435 353 b 420 359 431 356 426 359 b 206 359 412 359 217 359 b 187 341 196 359 189 350 b 143 118 187 341 180 235 b 24 -124 105 1 62 -71 b 20 -140 24 -124 20 -131 b 22 -148 20 -143 20 -145 b 36 -174 26 -158 36 -174 b 52 -183 36 -174 39 -183 z',
        },
        timeSig5: {
            x_min: 15,
            x_max: 362,
            y_min: -244,
            y_max: 246,
            ha: 490,
            o: 'm 39 314 b 46 170 39 314 46 245 b 46 151 46 164 46 157 b 39 -24 45 71 39 -24 b 39 -29 39 -24 39 -26 b 49 -48 39 -35 40 -46 b 99 -59 62 -50 92 -58 b 107 -59 102 -59 104 -59 b 121 -49 112 -59 118 -58 b 235 45 128 -30 144 45 b 356 -112 337 45 356 -43 b 238 -292 356 -184 333 -288 b 226 -292 233 -292 230 -292 b 166 -282 193 -292 174 -288 b 158 -274 161 -281 158 -276 b 164 -264 158 -269 160 -266 b 222 -168 177 -255 222 -239 b 117 -71 222 -98 173 -71 b 22 -171 60 -71 22 -122 b 111 -318 22 -220 36 -275 b 252 -351 147 -338 199 -351 b 456 -275 325 -351 405 -328 b 521 -109 503 -228 521 -167 b 433 79 521 -32 487 43 b 271 124 397 104 336 124 b 131 84 223 124 173 112 b 125 82 130 82 127 82 b 115 92 120 82 115 86 l 115 183 b 131 199 115 192 122 199 l 132 199 b 252 192 154 197 202 192 b 372 209 295 192 340 196 b 474 320 439 236 462 289 b 477 334 475 324 477 330 b 451 354 477 346 469 354 b 431 351 445 354 439 353 b 252 328 360 334 305 328 b 88 343 200 328 150 334 b 71 344 88 343 81 344 b 39 320 56 344 39 340 b 39 314 39 317 39 315 z',
        },
        timeSig6: {
            x_min: 15,
            x_max: 387,
            y_min: -244,
            y_max: 245,
            ha: 489,
            o: 'm 356 69 b 216 22 268 69 236 43 b 209 98 212 52 209 75 b 216 167 209 121 212 141 b 338 287 225 220 261 287 b 410 259 374 287 396 275 b 356 174 380 246 356 207 b 448 82 356 122 396 82 b 541 174 500 82 541 122 l 541 177 b 541 179 541 177 541 177 b 533 225 541 192 539 213 b 310 353 514 276 454 353 b 58 163 180 353 86 229 b 22 -23 43 128 22 58 b 131 -285 22 -111 46 -210 b 318 -351 215 -348 268 -351 b 557 -125 369 -351 557 -292 b 356 69 557 16 446 69 z m 302 -291 b 216 -145 255 -291 216 -226 b 302 1 216 -65 255 1 b 390 -145 350 1 390 -65 b 302 -291 390 -226 350 -291 z',
        },
        timeSig7: {
            x_min: 15,
            x_max: 366,
            y_min: -250,
            y_max: 251,
            ha: 501,
            o: 'm 233 -177 b 160 -336 202 -225 160 -282 b 180 -360 160 -351 164 -360 b 264 -351 203 -360 217 -354 b 278 -350 268 -351 274 -350 b 369 -360 320 -350 359 -360 b 405 -331 382 -360 406 -344 b 405 -327 405 -330 405 -328 b 396 -226 405 -324 396 -279 b 408 -130 396 -196 399 -161 b 503 151 425 -62 471 60 b 527 308 518 196 527 275 b 526 341 527 321 527 327 b 510 361 524 356 518 361 b 484 361 503 361 491 361 b 467 341 477 361 467 356 b 406 228 467 327 464 228 b 235 351 346 228 328 351 b 86 252 145 351 91 261 l 86 321 b 71 337 86 330 79 337 l 37 337 b 22 321 29 337 22 330 l 22 55 b 37 39 22 46 29 39 l 71 39 b 86 55 79 39 86 46 l 86 101 b 158 179 86 134 108 179 b 328 124 209 179 213 124 b 425 143 357 124 410 128 b 233 -177 413 120 266 -130 z',
        },
        timeSig8: {
            x_min: 15,
            x_max: 393,
            y_min: -248,
            y_max: 246,
            ha: 494,
            o: 'm 467 26 b 547 166 514 62 547 108 b 294 354 547 269 433 354 b 40 166 154 354 40 269 b 122 13 40 108 55 56 b 22 -147 58 -24 22 -78 b 294 -357 22 -264 144 -357 b 566 -147 444 -357 566 -264 b 467 26 566 -78 541 -13 z m 294 -276 b 122 -145 202 -276 122 -226 b 197 -26 122 -49 197 -26 b 435 -187 295 -59 435 -108 b 294 -276 435 -226 384 -276 z m 386 65 b 180 209 288 96 180 144 b 294 288 180 265 232 288 b 444 180 383 288 444 246 b 386 65 444 111 412 78 z',
        },
        timeSig9: {
            x_min: 15,
            x_max: 387,
            y_min: -244,
            y_max: 245,
            ha: 489,
            o: 'm 223 -68 b 363 -20 311 -68 343 -42 b 370 -96 367 -50 370 -73 b 363 -166 370 -120 367 -140 b 240 -285 354 -219 318 -285 b 168 -258 204 -285 183 -274 b 223 -173 199 -245 223 -206 b 131 -81 223 -121 183 -81 b 37 -173 79 -81 37 -121 l 37 -176 b 37 -177 37 -176 37 -176 b 46 -223 37 -190 40 -212 b 269 -351 65 -275 125 -351 b 521 -161 399 -351 492 -228 b 557 24 536 -127 557 -56 b 448 287 557 112 533 212 b 261 353 364 350 311 353 b 22 127 210 353 22 294 b 223 -68 22 -14 132 -68 z m 276 294 b 363 147 324 294 363 228 b 276 1 363 66 324 1 b 189 147 229 1 189 66 b 276 294 189 228 229 294 z',
        },
        timeSigCommon: {
            x_min: 0,
            x_max: 463,
            y_min: -256,
            y_max: 258,
            ha: 514,
            o: 'm 468 258 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 521 17 415 71 462 24 b 537 17 526 17 533 17 b 667 147 609 17 667 75 b 667 156 667 147 667 151 b 664 177 667 161 665 171 b 350 372 651 239 595 372 b 0 17 36 372 0 111 b 382 -369 0 -154 22 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 l 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 b 196 -128 256 -323 196 -255 l 196 147 b 356 320 196 228 228 320 b 469 271 423 320 454 295 b 471 264 471 268 471 266 b 468 258 471 262 471 259 z',
        },
        timeSigCutCommon: {
            x_min: 0,
            x_max: 463,
            y_min: -376,
            y_max: 388,
            ha: 764,
            o: 'm 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 b 369 -323 377 -323 373 -323 l 369 320 b 469 269 428 317 455 292 b 471 264 471 266 471 265 b 468 258 471 261 471 259 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 523 17 415 71 464 24 b 537 17 527 17 533 17 b 667 147 609 17 667 75 b 667 156 667 147 667 151 b 664 177 667 161 665 171 b 369 370 651 236 598 364 l 369 543 b 353 559 369 552 361 559 l 314 559 b 298 543 305 559 298 552 l 298 369 b 0 17 32 341 0 105 b 298 -364 0 -140 17 -334 l 298 -526 b 314 -541 298 -534 305 -541 l 353 -541 b 369 -526 361 -541 369 -534 l 369 -369 b 382 -369 373 -369 377 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 z m 196 147 b 298 312 196 215 216 289 l 298 -310 b 196 -128 229 -285 196 -223 z',
        },
        timeSigPlus: {
            x_min: 0,
            x_max: 408,
            y_min: -204,
            y_max: 204,
            ha: 408,
            o: 'm 327 33 l 327 275 b 308 294 327 285 318 294 l 279 294 b 261 275 269 294 261 285 l 261 33 l 19 33 b 0 14 9 33 0 24 l 0 -13 b 19 -33 0 -23 9 -33 l 261 -33 l 261 -274 b 279 -294 261 -284 269 -294 l 308 -294 b 327 -274 318 -294 327 -284 l 327 -33 l 567 -33 b 588 -13 577 -33 588 -23 l 588 14 b 567 33 588 24 577 33 z',
        },
        noteheadDoubleWhole: {
            x_min: 0,
            x_max: 538,
            y_min: -178,
            y_max: 179,
            ha: 357,
            o: 'm 33 258 b 20 258 27 258 26 258 b 0 238 9 258 0 249 b 0 -236 0 226 0 -226 b 20 -256 0 -246 9 -256 b 33 -256 26 -256 27 -256 b 53 -236 43 -256 53 -245 b 53 238 53 -228 53 226 b 33 258 53 249 45 258 z m 649 258 b 636 258 644 258 642 258 b 616 238 625 258 616 249 b 616 125 616 235 616 187 b 389 196 573 167 500 196 b 160 125 276 196 203 167 b 160 238 160 187 160 235 b 140 258 160 249 151 258 b 127 258 134 258 132 258 b 107 238 115 258 107 249 b 107 -236 107 226 107 -226 b 127 -256 107 -246 115 -256 b 140 -256 132 -256 134 -256 b 160 -236 150 -256 160 -245 b 160 -122 160 -233 160 -186 b 389 -194 203 -166 276 -194 b 616 -122 500 -194 573 -166 b 616 -236 616 -186 616 -233 b 636 -256 616 -246 625 -256 b 649 -256 642 -256 644 -256 b 670 -236 660 -256 670 -245 b 670 238 670 -228 670 226 b 649 258 670 249 661 258 z m 462 -140 b 400 -148 445 -144 422 -148 b 314 -101 360 -148 333 -135 b 268 68 295 -65 269 29 b 268 76 268 71 268 73 b 314 141 268 109 282 130 b 377 150 331 145 354 150 b 462 102 416 150 442 140 b 510 -66 482 63 510 -29 b 462 -140 510 -104 497 -128 z m 755 258 b 742 258 749 258 747 258 b 721 238 730 258 721 249 b 721 -236 721 226 721 -226 b 742 -256 721 -246 730 -256 b 755 -256 747 -256 749 -256 b 775 -236 765 -256 775 -245 b 775 238 775 -228 775 226 b 755 258 775 249 766 258 z',
        },
        noteheadWhole: {
            x_min: 0,
            x_max: 373,
            y_min: -134,
            y_max: 136,
            ha: 270,
            o: 'm 269 196 b 0 1 71 196 0 95 b 269 -193 0 -92 71 -193 b 537 1 468 -193 537 -92 b 269 196 537 95 468 196 z m 343 -138 b 281 -147 325 -144 302 -147 b 194 -99 240 -147 213 -135 b 148 68 176 -63 150 29 b 194 141 145 107 160 130 b 256 150 212 147 235 150 b 343 102 297 150 323 141 b 389 -65 363 63 389 -29 b 343 -138 389 -102 377 -128 z',
        },
        noteheadHalf: {
            x_min: 0,
            x_max: 325,
            y_min: -133,
            y_max: 132,
            ha: 265,
            o: 'm 307 190 b 0 -60 167 190 0 73 b 161 -192 0 -122 45 -192 b 468 58 311 -192 468 -69 b 307 190 468 143 396 190 z m 268 -63 b 108 -124 264 -66 158 -124 b 50 -72 60 -124 50 -85 b 200 62 50 -12 194 59 b 360 122 206 65 308 122 b 418 71 395 122 418 102 b 268 -63 418 9 272 -60 z',
        },
        noteheadBlack: {
            x_min: 0,
            x_max: 325,
            y_min: -133,
            y_max: 132,
            ha: 265,
            o: 'm 0 -60 b 161 -192 0 -122 45 -192 b 468 58 311 -192 468 -69 b 307 190 468 143 396 190 b 0 -60 167 190 0 72 z',
        },
        noteheadXBlack: {
            x_min: 0,
            x_max: 325,
            y_min: -132,
            y_max: 132,
            ha: 264,
            o: 'm 461 138 b 468 153 465 141 468 147 l 468 154 b 462 167 468 160 465 164 l 445 184 b 431 190 441 187 436 190 b 418 186 426 190 420 189 l 235 40 l 50 186 b 37 190 48 189 42 190 b 24 184 32 190 29 187 l 6 167 b 0 153 3 164 0 158 b 7 138 0 147 3 141 l 183 0 l 7 -138 b 0 -153 3 -141 0 -147 b 6 -166 0 -157 3 -163 l 23 -184 b 37 -190 26 -189 32 -190 b 50 -186 42 -190 48 -189 l 235 -40 l 418 -186 b 431 -190 420 -189 426 -190 b 445 -184 436 -190 442 -189 l 462 -166 b 468 -153 465 -163 468 -157 b 461 -138 468 -147 465 -141 l 285 0 z',
        },
        noteheadCircleX: {
            x_min: 0,
            x_max: 325,
            y_min: -162,
            y_max: 163,
            ha: 325,
            o: 'm 265 0 l 395 105 b 426 0 415 75 426 39 b 387 -115 426 -43 412 -84 z m 233 -27 l 360 -145 b 235 -192 327 -174 282 -192 b 99 -137 183 -192 134 -171 z m 202 1 l 73 -105 b 42 0 53 -75 42 -39 b 81 115 42 43 56 84 z m 235 29 l 108 145 b 233 193 141 174 186 193 b 369 138 285 193 334 173 z m 233 235 b 0 0 104 235 0 130 b 233 -233 0 -130 104 -233 b 468 0 363 -233 468 -130 b 233 235 468 130 363 235 z',
        },
        noteheadDoubleWholeSquare: {
            x_min: 0,
            x_max: 432,
            y_min: -179,
            y_max: 177,
            ha: 356,
            o: 'm 590 255 b 570 235 579 255 570 246 l 570 203 l 53 203 l 53 235 b 33 255 53 246 45 255 l 20 255 b 0 235 9 255 0 246 l 0 -230 b 20 -251 0 -242 9 -251 l 33 -251 b 53 -230 45 -251 53 -242 l 53 -200 l 570 -200 l 570 -238 b 590 -258 570 -249 579 -258 l 603 -258 b 622 -238 615 -258 622 -249 l 622 235 b 603 255 622 246 615 255 z m 570 -101 l 53 -101 l 53 105 l 570 105 z',
        },
        noteheadSquareWhite: {
            x_min: 0,
            x_max: 310,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 395 128 l 395 -128 l 52 -128 l 52 128 z m 446 180 l 0 180 l 0 -180 l 446 -180 z',
        },
        noteheadSquareBlack: {
            x_min: 0,
            x_max: 310,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 446 180 l 0 180 l 0 -180 l 446 -180 z',
        },
        noteheadTriangleUpBlack: {
            x_min: 0,
            x_max: 310,
            y_min: -136,
            y_max: 122,
            ha: 258,
            o: 'm 223 176 l 0 -196 l 446 -196 z',
        },
        noteheadSlashedDoubleWhole1: {
            x_min: -66,
            x_max: 456,
            y_min: -213,
            y_max: 212,
            ha: 425,
            o: 'm 652 298 b 638 305 649 304 644 305 b 626 301 634 305 629 304 l 560 248 b 543 256 557 253 550 256 b 530 256 537 256 536 256 b 510 236 518 256 510 248 b 510 204 510 235 510 223 l 455 161 b 281 194 413 181 356 194 b 53 124 168 194 96 166 b 53 236 53 186 53 233 b 29 256 53 253 42 256 b 20 256 26 256 23 256 b 0 236 9 256 0 248 b 0 -204 0 228 0 -98 l -88 -272 b -95 -288 -92 -276 -95 -282 b -91 -300 -95 -291 -94 -295 b -76 -307 -86 -304 -82 -307 b -65 -302 -72 -307 -68 -305 l 3 -248 b 20 -258 6 -253 12 -258 b 53 -238 33 -258 52 -255 b 53 -206 53 -236 53 -225 l 107 -161 b 281 -196 148 -183 206 -196 b 510 -124 393 -196 465 -166 b 510 -238 510 -187 510 -235 b 530 -258 510 -248 518 -258 b 563 -238 543 -258 563 -255 b 563 204 563 -229 563 98 l 649 272 b 657 288 655 276 657 282 b 652 298 657 291 655 295 z m 160 75 b 269 148 160 138 219 148 b 356 101 310 148 334 140 b 363 85 357 96 360 91 l 189 -56 b 160 66 174 -14 161 40 b 160 75 160 69 160 72 z m 53 -163 b 53 -124 53 -151 53 -138 b 76 -144 60 -131 68 -138 z m 402 -68 b 292 -148 402 -138 351 -148 b 207 -101 252 -150 226 -137 b 199 -84 204 -96 202 -91 l 373 56 b 402 -68 389 13 402 -40 z m 510 124 b 485 144 503 131 494 137 l 510 163 b 510 124 510 151 510 137 z',
        },
        noteheadSlashedWhole1: {
            x_min: -75,
            x_max: 448,
            y_min: -211,
            y_max: 214,
            ha: 425,
            o: 'm 641 301 b 625 308 636 305 631 308 b 613 304 621 307 618 307 l 439 160 b 269 196 399 181 343 196 b 0 1 71 196 0 95 b 69 -138 0 -49 20 -101 l -101 -271 b -108 -287 -105 -275 -108 -281 b -104 -298 -107 -291 -107 -294 b -88 -304 -99 -302 -94 -304 b -76 -301 -85 -304 -81 -304 l 98 -157 b 269 -193 138 -179 194 -193 b 537 1 468 -193 537 -92 b 468 141 537 52 517 104 l 638 274 b 645 289 642 278 645 284 b 641 301 644 292 644 297 z m 148 68 b 148 78 148 72 148 75 b 194 141 148 111 163 131 b 256 150 212 147 235 150 b 343 102 297 150 323 141 b 350 86 346 98 348 92 l 177 -55 b 148 68 163 -12 150 42 z m 389 -65 b 343 -138 389 -102 377 -128 b 281 -147 325 -144 302 -147 b 194 -99 240 -147 213 -135 b 187 -82 192 -95 190 -89 l 279 -6 l 361 58 b 389 -65 376 16 389 -39 z',
        },
        noteheadSlashedHalf1: {
            x_min: -98,
            x_max: 424,
            y_min: -213,
            y_max: 212,
            ha: 425,
            o: 'm 606 298 b 592 305 602 302 598 305 b 580 301 588 305 583 304 l 412 163 b 307 190 383 180 347 190 b 153 148 258 190 204 176 b 0 -60 58 98 0 13 b 14 -120 0 -81 4 -101 b 32 -143 20 -128 26 -135 l -134 -274 b -141 -288 -138 -276 -141 -282 b -137 -300 -141 -292 -140 -297 b -122 -307 -134 -304 -128 -307 b -111 -302 -118 -307 -114 -305 l 56 -164 b 161 -192 85 -181 121 -192 b 315 -151 210 -192 264 -179 b 468 58 410 -101 468 -16 b 454 117 468 78 464 98 b 436 141 449 125 444 134 l 603 272 b 611 287 608 275 611 281 b 606 298 611 291 609 295 z m 56 -98 b 49 -73 52 -91 49 -82 b 75 -23 49 -58 59 -39 b 199 60 99 1 147 32 b 337 118 251 89 302 111 b 359 121 344 120 351 121 b 361 121 360 121 360 121 l 225 9 l 69 -114 b 56 -98 65 -109 60 -104 z m 410 94 b 416 69 415 86 416 78 b 392 19 416 53 408 36 b 266 -65 367 -6 318 -36 b 128 -122 215 -94 163 -115 b 107 -125 121 -124 114 -125 b 104 -125 107 -125 105 -125 l 245 -9 l 396 111 b 410 94 402 107 408 101 z',
        },
        noteheadSlashedBlack1: {
            x_min: -98,
            x_max: 424,
            y_min: -213,
            y_max: 212,
            ha: 425,
            o: 'm 606 298 b 592 305 602 302 598 305 b 580 301 588 305 583 304 l 412 161 b 307 190 383 180 347 190 b 0 -60 167 190 0 72 b 32 -144 0 -89 10 -120 l -134 -274 b -141 -288 -138 -278 -141 -284 b -137 -301 -141 -292 -140 -297 b -122 -307 -134 -305 -128 -307 b -111 -304 -118 -307 -114 -307 l 56 -164 b 161 -192 82 -181 117 -192 b 468 58 311 -192 468 -71 b 436 141 468 91 456 120 l 603 271 b 611 285 608 275 611 281 b 606 298 611 289 609 294 z',
        },
        noteheadSlashedDoubleWhole2: {
            x_min: -66,
            x_max: 456,
            y_min: -213,
            y_max: 212,
            ha: 425,
            o: 'm 563 -204 b 563 236 563 -98 563 228 b 543 256 563 249 554 256 b 530 256 537 256 536 256 b 510 236 518 256 510 248 b 510 124 510 233 510 187 b 281 194 467 166 393 194 b 107 161 207 194 150 181 l 53 204 b 53 236 53 223 53 235 b 33 256 53 249 45 256 b 20 256 27 256 26 256 b 3 246 12 256 6 253 l -63 301 b -76 305 -68 304 -72 305 b -91 298 -81 305 -86 304 b -95 287 -94 295 -95 291 b -88 272 -95 281 -92 276 l 0 204 b 0 -238 0 98 0 -229 b 20 -258 0 -248 9 -258 b 33 -258 26 -258 27 -258 b 53 -238 43 -258 53 -246 b 53 -124 53 -235 53 -187 b 281 -196 96 -166 170 -196 b 456 -161 356 -196 413 -183 l 510 -206 b 510 -238 510 -225 510 -236 b 530 -258 510 -248 518 -258 b 543 -258 536 -258 537 -258 b 560 -246 549 -258 556 -252 l 626 -302 b 638 -307 631 -305 634 -307 b 654 -300 645 -307 649 -304 b 657 -288 655 -295 657 -292 b 651 -272 657 -282 655 -276 z m 207 140 b 269 148 225 144 248 148 b 356 101 310 148 336 140 b 402 -68 376 62 402 -30 b 402 -78 402 -71 402 -75 l 292 9 l 168 109 b 207 140 176 124 189 134 z m 78 144 b 53 124 69 137 60 131 b 53 163 53 137 53 150 z m 356 -141 b 294 -148 338 -145 315 -148 b 207 -101 253 -148 226 -137 b 161 66 189 -66 163 27 b 160 72 161 69 160 71 b 161 78 160 75 160 76 l 271 -9 l 395 -109 b 356 -141 387 -124 374 -134 z m 485 -144 b 510 -124 494 -138 503 -131 b 510 -163 510 -138 510 -151 z',
        },
        noteheadSlashedWhole2: {
            x_min: -75,
            x_max: 448,
            y_min: -212,
            y_max: 214,
            ha: 426,
            o: 'm 468 -138 b 537 1 517 -101 537 -49 b 269 196 537 95 468 196 b 98 160 196 196 140 181 l -76 304 b -88 308 -81 307 -84 307 b -104 301 -94 308 -99 305 b -108 289 -107 297 -107 292 b -101 274 -108 284 -105 278 l 69 141 b 0 1 20 104 0 52 b 269 -193 0 -92 71 -193 b 441 -157 343 -193 399 -179 l 613 -301 b 625 -305 618 -304 622 -305 b 641 -298 631 -305 636 -302 b 645 -287 644 -294 644 -291 b 638 -271 645 -281 642 -275 z m 194 141 b 256 150 212 147 235 150 b 343 102 297 150 323 141 b 389 -65 363 63 389 -29 b 389 -76 389 -69 389 -73 l 279 10 l 156 112 b 194 141 163 125 176 135 z m 343 -138 b 281 -147 325 -144 302 -147 b 194 -99 240 -147 213 -135 b 148 68 176 -63 150 29 b 148 76 148 71 148 73 b 148 81 148 78 148 79 l 258 -6 l 382 -108 b 343 -138 374 -122 361 -132 z',
        },
        noteheadSlashedHalf2: {
            x_min: -98,
            x_max: 424,
            y_min: -213,
            y_max: 212,
            ha: 425,
            o: 'm 386 -102 b 468 58 438 -55 468 4 b 454 117 468 78 464 98 b 307 190 428 164 373 190 b 153 148 258 190 204 176 b 108 120 137 140 122 130 l -111 301 b -122 305 -114 304 -118 305 b -137 298 -128 305 -134 302 b -141 287 -140 295 -141 291 b -134 272 -141 281 -138 275 l 85 101 b 0 -60 32 53 0 -7 b 14 -120 0 -81 4 -101 b 161 -192 40 -167 95 -192 b 315 -151 210 -192 264 -179 b 361 -122 333 -143 347 -132 l 580 -302 b 592 -307 583 -305 588 -307 b 606 -300 598 -307 602 -304 b 611 -288 609 -297 611 -292 b 603 -274 611 -282 608 -276 z m 199 60 b 337 118 251 89 302 111 b 359 121 344 120 351 121 b 410 94 382 121 400 112 b 416 69 415 86 416 78 b 392 19 416 53 408 36 b 308 -42 374 0 343 -20 l 245 7 l 189 55 b 199 60 192 56 196 58 z m 266 -65 b 128 -122 215 -94 163 -115 b 107 -125 121 -124 114 -125 b 56 -98 84 -125 66 -117 b 49 -73 52 -91 49 -82 b 75 -23 49 -58 59 -39 b 163 39 94 -4 125 17 l 225 -9 l 282 -56 b 266 -65 276 -59 272 -62 z',
        },
        noteheadSlashedBlack2: {
            x_min: -98.44444444444443,
            x_max: 424,
            y_min: -213,
            y_max: 212,
            ha: 425,
            o: 'm 384 -102 b 468 58 435 -58 468 0 b 307 190 468 143 396 190 b 108 121 239 190 167 163 l -111 301 b -124 305 -115 304 -120 305 b -138 298 -128 305 -134 302 b -141 289 -140 295 -141 292 b -141 287 -141 288 -143 288 b -135 272 -141 281 -140 275 l 84 101 b 0 -60 35 56 0 0 b 161 -192 0 -122 45 -192 b 361 -122 232 -192 304 -164 l 579 -302 b 590 -307 583 -305 588 -307 b 606 -300 596 -307 602 -304 b 611 -288 609 -297 611 -292 b 603 -274 609 -282 608 -276 z',
        },
        noteheadDiamondDoubleWhole: {
            x_min: 0,
            x_max: 373,
            y_min: -178,
            y_max: 179,
            ha: 357,
            o: 'm 504 258 b 484 238 494 258 484 248 l 484 46 b 282 187 415 95 285 186 b 268 192 279 190 275 192 b 255 187 262 192 258 190 l 52 45 l 52 238 b 33 258 52 248 43 258 l 20 258 b 0 238 9 258 0 248 l 0 -236 b 20 -256 0 -248 9 -256 l 33 -256 b 52 -236 43 -256 52 -248 l 52 -45 l 249 -181 b 268 -190 258 -189 264 -190 b 282 -186 274 -190 279 -189 b 484 -43 285 -184 413 -94 l 484 -236 b 504 -256 484 -248 494 -256 l 517 -256 b 537 -236 528 -256 537 -248 l 537 238 b 517 258 537 248 528 258 z m 220 -115 l 102 -33 l 317 117 l 435 35 z',
        },
        noteheadDiamondWhole: {
            x_min: 0,
            x_max: 373,
            y_min: -133,
            y_max: 132,
            ha: 265,
            o: 'm 282 -187 b 530 -13 285 -186 530 -13 b 537 0 534 -10 537 -6 b 530 13 537 4 534 10 b 282 186 530 13 287 183 b 268 190 279 189 275 190 b 255 186 262 190 258 189 l 7 12 b 0 -1 3 9 0 4 b 4 -13 0 -6 1 -10 l 249 -183 b 268 -192 258 -190 264 -192 b 282 -187 274 -192 279 -190 z m 220 -117 l 102 -35 l 317 115 l 435 33 z',
        },
        noteheadDiamondHalf: {
            x_min: 0,
            x_max: 335,
            y_min: -132,
            y_max: 133,
            ha: 265,
            o: 'm 475 -13 b 482 0 480 -10 482 -6 b 475 13 482 4 480 10 l 253 187 b 240 192 251 190 246 192 b 229 187 236 192 232 190 l 7 13 b 0 0 3 10 0 6 b 7 -13 0 -4 3 -10 l 229 -186 b 240 -190 232 -189 236 -190 b 253 -186 246 -190 251 -189 z m 284 -115 l 92 33 l 199 117 l 390 -33 z',
        },
        noteheadDiamondBlack: {
            x_min: 0,
            x_max: 335,
            y_min: -132,
            y_max: 133,
            ha: 265,
            o: 'm 475 -14 b 482 -1 480 -10 482 -6 b 475 13 482 4 480 10 l 253 187 b 240 192 251 190 246 192 b 229 187 236 192 232 190 l 7 13 b 0 0 3 10 0 4 b 7 -14 0 -6 3 -10 l 229 -186 b 240 -190 232 -189 236 -190 b 253 -186 246 -190 251 -189 z',
        },
        noteheadParenthesisRight: {
            x_min: 0,
            x_max: 75,
            y_min: -209.4142135623731,
            y_max: 212,
            ha: 421.4142135623731,
            o: 'm 10 305 b 4 302 7 304 6 304 b 0 295 1 301 0 298 b 1 289 0 294 0 292 b 68 -10 1 288 68 160 b 1 -288 68 -95 50 -192 b 0 -292 0 -289 0 -291 b 4 -300 0 -295 1 -298 b 12 -301 7 -301 9 -302 b 17 -298 14 -301 16 -300 b 108 0 22 -292 108 -174 b 17 301 108 174 22 295 b 10 305 16 304 13 305 z',
        },
        noteheadParenthesisLeft: {
            x_min: 0,
            x_max: 75,
            y_min: -212,
            y_max: 209.4142135623731,
            ha: 421.4142135623731,
            o: 'm 98 -305 b 104 -302 101 -304 102 -304 b 108 -295 107 -301 108 -298 b 107 -289 108 -294 108 -292 b 40 10 107 -288 40 -160 b 107 288 40 95 58 192 b 108 292 108 289 108 291 b 104 300 108 295 107 298 b 96 301 101 301 99 302 b 91 298 94 301 92 300 b 0 0 86 292 0 174 b 91 -301 0 -174 86 -295 b 98 -305 92 -304 95 -305 z',
        },
        noteheadMoonBlack: {
            x_min: 0,
            x_max: 310,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 0 180 l 0 0 b 223 -180 0 -99 99 -180 b 446 0 347 -180 446 -99 l 446 180 z',
        },
        noteheadTriangleLeftBlack: {
            x_min: 0,
            x_max: 339,
            y_min: -136,
            y_max: 122,
            ha: 258,
            o: 'm 0 176 l 0 -196 l 488 -196 z',
        },
        noteheadTriangleRightBlack: {
            x_min: 0,
            x_max: 339,
            y_min: -136,
            y_max: 122,
            ha: 258,
            o: 'm 488 176 l 0 -196 l 488 -196 z',
        },
        noteheadTriangleRoundDownBlack: {
            x_min: 0,
            x_max: 310,
            y_min: -136,
            y_max: 122,
            ha: 258,
            o: 'm 226 -196 l 446 63 b 226 176 446 63 384 176 b 0 63 68 176 0 63 z',
        },
        augmentationDot: {
            x_min: 0,
            x_max: 100,
            y_min: -50,
            y_max: 50,
            ha: 100,
            o: 'm 0 0 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 b 72 72 144 40 112 72 b 0 0 32 72 0 40 z',
        },
        tremolo1: {
            x_min: 0,
            x_max: 290,
            y_min: -93,
            y_max: 96,
            ha: 189,
            o: 'm 0 48 l 0 -134 l 418 -43 l 418 138 z',
        },
        flag8thUp: {
            x_min: 0,
            x_max: 289.04376776750354,
            y_min: -817,
            y_max: 12,
            ha: 829,
            o: 'm 0 -327 b 12 -343 0 -331 1 -338 b 291 -600 73 -363 197 -441 b 359 -827 317 -645 359 -707 b 294 -1140 359 -930 331 -1037 b 289 -1162 291 -1149 288 -1156 b 297 -1175 289 -1168 291 -1172 b 304 -1176 300 -1176 302 -1176 b 327 -1161 314 -1176 321 -1171 b 416 -798 395 -1041 418 -888 b 416 -780 416 -791 416 -786 b 302 -458 409 -595 302 -458 b 131 -220 307 -458 170 -281 b 50 -50 78 -138 53 -56 b 36 6 49 -46 36 6 b 19 17 35 12 27 17 b 0 -1 9 17 0 9 z',
        },
        flag8thDown: {
            x_min: 0,
            x_max: 309,
            y_min: -12,
            y_max: 817,
            ha: 829,
            o: 'm 0 1 b 19 -17 0 -9 9 -17 b 36 -6 26 -17 35 -12 b 50 50 36 -4 49 46 b 117 196 52 56 65 111 b 331 458 173 289 259 357 b 445 780 402 559 445 654 b 338 1161 445 912 415 1021 b 317 1176 334 1171 325 1176 b 310 1175 314 1176 311 1176 b 300 1158 302 1172 300 1166 b 304 1140 300 1153 301 1146 b 384 827 361 1007 384 930 b 317 600 384 707 343 645 b 12 343 223 441 72 363 b 0 327 1 338 0 331 z',
        },
        flag16thUp: {
            x_min: 0,
            x_max: 279,
            y_min: -820,
            y_max: 12,
            ha: 832,
            o: 'm 301 -681 b 148 -514 262 -631 219 -585 b 56 -372 92 -458 66 -409 b 52 -343 55 -364 53 -354 b 271 -510 125 -343 219 -442 b 340 -696 327 -583 340 -641 b 337 -739 340 -710 338 -724 b 301 -681 325 -716 312 -697 z m 0 -549 b 22 -563 0 -553 12 -559 b 258 -776 59 -576 171 -648 b 318 -950 307 -850 318 -901 b 317 -975 318 -959 318 -966 b 285 -1140 317 -1009 307 -1083 b 279 -1164 284 -1148 279 -1156 b 289 -1179 279 -1169 282 -1175 b 297 -1181 292 -1181 294 -1181 b 318 -1161 307 -1181 312 -1169 b 382 -962 344 -1120 382 -1043 b 374 -855 382 -920 379 -886 b 402 -678 389 -802 402 -749 b 333 -471 402 -603 382 -536 b 137 -228 265 -382 192 -307 b 42 0 82 -148 42 0 b 22 17 39 10 37 17 b 0 0 4 17 0 10 z',
        },
        flag16thDown: {
            x_min: 0,
            x_max: 309,
            y_min: -26,
            y_max: 803,
            ha: 829,
            o: 'm 53 346 b 56 363 55 353 56 359 b 163 517 66 399 78 452 b 384 732 246 582 346 662 b 317 503 382 621 354 552 b 53 346 229 395 122 364 z m 0 -14 b 22 -37 0 -26 10 -37 b 43 -14 33 -37 40 -26 b 167 232 65 134 109 177 b 445 683 243 305 445 416 b 432 837 445 730 441 783 b 441 919 438 855 441 881 b 327 1149 441 1032 374 1112 b 304 1156 321 1153 312 1156 b 287 1152 298 1156 292 1155 b 279 1145 281 1149 279 1148 b 294 1129 279 1140 288 1135 b 382 930 344 1076 382 1027 b 374 876 382 912 380 893 l 373 871 b 373 871 373 871 373 871 b 327 789 366 842 350 815 b 22 598 226 672 86 612 b 0 559 12 593 0 562 z',
        },
        flag32ndUp: {
            x_min: 0,
            x_max: 279,
            y_min: -821,
            y_max: 186,
            ha: 1007,
            o: 'm 301 -683 b 148 -516 262 -632 219 -588 b 56 -373 92 -459 66 -410 b 50 -343 55 -366 53 -354 b 271 -500 125 -343 219 -432 b 340 -687 327 -575 340 -632 b 337 -739 340 -704 338 -721 b 301 -683 325 -716 312 -698 z m 271 -259 b 340 -446 327 -333 340 -392 b 338 -469 340 -455 338 -462 b 333 -461 337 -467 334 -464 b 91 -192 265 -372 145 -271 b 50 -92 69 -160 58 -124 b 271 -259 124 -92 219 -192 z m 0 -550 b 22 -564 0 -554 12 -560 b 258 -778 59 -577 171 -649 b 318 -952 307 -851 318 -903 b 317 -976 318 -960 318 -968 b 285 -1142 317 -1011 307 -1084 b 279 -1165 284 -1149 279 -1158 b 289 -1181 279 -1171 282 -1176 b 297 -1182 292 -1182 294 -1182 b 318 -1162 307 -1182 312 -1171 b 382 -963 344 -1122 382 -1044 b 374 -857 382 -922 379 -887 b 402 -668 389 -802 402 -740 b 386 -563 402 -632 396 -596 b 402 -441 395 -526 402 -487 b 402 -428 402 -436 402 -432 b 333 -220 402 -353 382 -285 b 137 23 265 -131 192 -56 b 42 251 82 102 42 251 b 22 268 39 261 37 268 b 0 251 4 268 0 261 z',
        },
        flag32ndDown: {
            x_min: 0,
            x_max: 309,
            y_min: -216,
            y_max: 803,
            ha: 1019,
            o: 'm 50 73 b 91 171 58 105 71 141 b 347 402 145 251 272 317 b 384 454 361 418 374 435 b 324 239 384 347 361 287 b 50 73 235 130 122 94 z m 163 517 b 366 693 248 589 327 642 b 382 716 372 700 377 708 b 383 693 383 708 383 700 b 314 505 383 621 359 562 b 53 343 258 436 179 390 b 56 363 55 351 56 359 b 163 517 66 400 81 449 z m 0 -288 b 22 -311 0 -298 10 -311 b 43 -288 33 -311 40 -300 b 167 -40 65 -138 109 -95 b 445 409 243 32 445 143 b 431 577 445 462 439 520 b 441 651 435 602 439 626 b 441 675 441 658 441 667 b 441 687 441 680 441 684 b 425 808 441 730 433 772 b 441 919 435 840 441 876 b 327 1149 441 1032 374 1112 b 305 1156 321 1153 314 1156 b 287 1152 300 1156 292 1155 b 279 1145 281 1149 279 1148 b 294 1129 279 1140 288 1136 b 382 930 344 1076 382 1027 b 327 789 382 877 364 832 b 22 598 226 672 86 612 b 0 559 12 593 0 562 z',
        },
        flag64thUp: {
            x_min: 0,
            x_max: 279,
            y_min: -822,
            y_max: 373,
            ha: 1195,
            o: 'm 333 -461 b 91 -192 265 -372 145 -271 b 50 -92 69 -161 58 -125 b 271 -251 125 -92 219 -183 b 340 -438 327 -324 340 -383 b 338 -469 340 -448 338 -459 b 333 -461 337 -467 334 -464 z m 301 -683 b 148 -517 262 -632 219 -588 b 56 -374 92 -461 66 -410 b 50 -343 55 -366 53 -356 b 271 -501 125 -343 219 -433 b 340 -688 327 -575 340 -634 b 337 -739 340 -706 338 -721 b 301 -683 325 -717 312 -698 z m 271 10 b 340 -176 327 -63 340 -121 b 337 -217 340 -190 338 -204 b 333 -212 336 -216 334 -213 b 91 65 265 -122 145 -16 b 48 177 66 101 53 143 l 50 177 b 271 10 124 177 217 78 z m 0 -552 b 22 -564 0 -554 12 -562 b 258 -778 59 -579 171 -649 b 318 -952 307 -851 317 -903 b 317 -976 318 -960 318 -968 b 285 -1142 317 -1012 307 -1084 b 279 -1165 284 -1149 279 -1158 b 289 -1181 279 -1172 282 -1178 b 297 -1184 292 -1182 295 -1184 b 318 -1164 307 -1182 312 -1172 b 382 -963 344 -1122 382 -1044 b 374 -857 382 -923 379 -887 b 402 -668 389 -804 402 -740 b 386 -563 402 -632 396 -596 b 402 -432 395 -523 402 -480 b 402 -418 402 -428 402 -423 b 383 -304 402 -379 396 -341 b 402 -170 393 -264 402 -222 b 402 -158 402 -166 402 -163 b 333 49 402 -84 382 -16 b 137 292 265 138 192 213 b 42 520 82 372 42 520 b 22 537 39 530 37 537 b 0 520 4 537 0 530 z',
        },
        flag64thDown: {
            x_min: 0,
            x_max: 309,
            y_min: -403,
            y_max: 804,
            ha: 1207,
            o: 'm 52 -196 b 91 -102 59 -166 71 -131 b 347 128 145 -23 272 45 b 384 180 361 145 374 163 b 324 -30 384 76 361 16 b 52 -196 235 -140 124 -176 z m 163 517 b 366 693 248 589 327 644 b 382 717 372 701 377 708 b 383 693 383 708 383 701 b 314 505 383 621 359 562 b 53 343 258 438 179 390 b 56 363 55 351 56 359 b 163 517 66 400 81 449 z m 314 232 b 50 69 258 163 179 117 b 91 171 56 102 69 140 b 347 402 145 251 272 318 b 382 449 360 416 372 432 b 383 420 383 439 383 429 b 314 232 383 348 359 288 z m 0 -557 b 22 -580 0 -567 10 -580 b 43 -557 33 -580 40 -567 b 167 -310 65 -408 109 -364 b 445 140 243 -238 445 -125 b 431 307 445 192 439 249 b 441 377 436 331 439 354 b 441 406 441 387 441 397 b 441 418 441 410 441 413 b 423 546 441 464 432 507 b 441 651 432 582 438 618 b 441 675 441 660 441 667 b 441 688 441 680 441 684 b 425 808 441 730 433 772 b 441 919 435 840 441 876 b 327 1149 441 1032 374 1112 b 305 1158 321 1153 314 1156 b 287 1152 300 1158 292 1156 b 279 1145 281 1151 279 1148 b 294 1129 279 1140 288 1136 b 382 930 344 1076 382 1027 b 327 789 382 877 364 832 b 22 598 226 672 86 612 b 0 559 12 593 0 563 z',
        },
        flag128thUp: {
            x_min: 0,
            x_max: 279,
            y_min: -821,
            y_max: 573,
            ha: 1394,
            o: 'm 0 -550 b 22 -563 0 -553 12 -560 b 258 -776 59 -576 171 -648 b 318 -950 307 -850 318 -901 b 317 -975 318 -959 318 -966 b 285 -1140 317 -1011 307 -1083 b 279 -1164 284 -1148 279 -1156 b 289 -1179 279 -1171 282 -1176 b 297 -1182 292 -1181 294 -1181 b 318 -1162 307 -1182 312 -1169 b 382 -962 344 -1120 382 -1043 b 374 -857 382 -922 379 -887 b 402 -668 389 -802 402 -740 b 383 -554 402 -629 396 -590 b 402 -399 396 -503 402 -452 b 382 -284 402 -359 396 -321 b 402 -125 396 -230 402 -180 b 383 -14 402 -86 396 -49 b 402 130 396 35 402 81 b 333 348 402 204 382 284 b 137 592 265 438 192 513 b 42 808 82 671 46 793 b 22 825 39 818 37 825 b 0 808 4 825 0 818 z m 271 310 b 340 111 328 235 340 170 b 338 73 340 98 338 86 b 333 81 336 76 334 79 b 91 357 265 170 145 276 b 48 469 66 393 53 435 l 50 469 b 271 310 124 469 217 377 z m 301 -681 b 148 -523 262 -631 219 -593 b 56 -383 92 -465 66 -420 b 49 -343 55 -374 52 -359 l 50 -343 b 271 -500 124 -343 217 -432 b 340 -688 327 -575 340 -634 b 337 -737 340 -706 338 -721 b 301 -681 325 -716 312 -697 z m 333 -461 b 91 -192 265 -372 145 -271 b 48 -73 66 -154 53 -111 l 48 -73 l 50 -73 b 271 -232 124 -73 217 -163 b 340 -419 327 -305 340 -364 b 337 -468 340 -435 338 -452 b 333 -461 336 -465 334 -464 z m 333 -192 b 91 84 265 -102 145 4 b 48 200 65 121 53 164 l 48 200 l 50 200 b 271 42 124 200 217 109 b 340 -147 327 -32 340 -92 b 337 -197 340 -164 338 -181 b 333 -192 336 -196 334 -194 z',
        },
        flag128thDown: {
            x_min: 0,
            x_max: 309,
            y_min: -591,
            y_max: 803,
            ha: 1394,
            o: 'm 0 -828 b 22 -851 0 -838 10 -851 b 43 -828 33 -851 40 -840 b 167 -580 65 -678 109 -635 b 445 -131 243 -508 445 -397 b 431 36 445 -79 439 -22 b 441 108 436 60 439 85 b 441 137 441 117 441 127 b 441 147 441 140 441 144 b 423 275 441 193 432 236 b 441 377 433 310 438 344 b 441 406 441 387 441 396 b 441 418 441 410 441 413 b 423 546 441 464 432 507 b 441 649 432 582 438 616 b 441 675 441 658 441 667 b 441 687 441 680 441 684 b 425 808 441 730 433 772 b 441 919 435 840 441 876 b 327 1149 441 1032 374 1112 b 304 1156 321 1153 312 1156 b 287 1152 298 1156 292 1155 b 279 1145 281 1149 279 1148 b 294 1129 279 1140 288 1135 b 382 930 344 1076 382 1027 b 327 789 382 877 364 832 b 22 598 226 672 86 612 b 0 559 12 593 0 562 z m 314 -37 b 50 -200 258 -107 179 -153 b 91 -102 58 -168 71 -132 b 347 128 145 -23 272 45 b 382 176 360 143 372 160 b 383 151 383 167 383 160 b 314 -37 383 79 359 19 z m 314 232 b 50 69 258 163 179 117 b 91 171 56 101 69 138 b 347 402 145 251 272 317 b 382 449 360 416 372 432 b 383 420 383 439 383 429 b 314 232 383 347 359 288 z m 163 517 b 366 693 248 589 327 642 b 382 716 372 700 377 708 b 383 693 383 708 383 700 b 314 505 382 621 359 560 b 53 343 258 436 179 390 b 56 363 55 350 56 357 b 163 517 66 399 81 449 z m 52 -467 b 91 -372 59 -435 71 -402 b 347 -141 145 -292 272 -225 b 384 -89 361 -125 374 -108 b 324 -301 382 -194 361 -255 b 52 -467 235 -410 122 -446 z',
        },
        accidentalFlat: {
            x_min: 0,
            x_max: 203,
            y_min: -176,
            y_max: 453,
            ha: 629,
            o: 'm 289 114 b 173 223 281 170 246 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -251 30 -253 36 -252 b 216 -114 45 -248 138 -202 b 292 78 271 -52 292 19 b 289 114 292 91 291 102 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 b 190 58 190 66 190 62 z',
        },
        accidentalNatural: {
            x_min: 0,
            x_max: 171,
            y_min: -323,
            y_max: 325,
            ha: 648,
            o: 'm 239 264 b 228 268 236 266 232 268 b 222 266 226 268 223 266 l 40 216 l 40 468 l 0 468 l 0 -245 b 20 -264 0 -256 9 -264 b 26 -264 22 -264 24 -264 l 207 -213 l 207 -465 l 246 -465 b 246 248 246 -226 246 1 b 239 264 246 253 243 261 z m 40 -140 l 40 96 l 207 144 l 207 -94 z',
        },
        accidentalSharp: {
            x_min: 0,
            x_max: 244,
            y_min: -333,
            y_max: 334,
            ha: 667,
            o: 'm 336 151 b 351 171 344 153 351 163 l 351 256 b 331 276 351 268 343 276 b 328 276 330 276 330 276 l 281 266 l 281 481 l 240 481 l 240 258 l 112 232 l 112 435 l 72 435 l 72 223 l 16 212 b 0 192 7 210 0 200 l 0 189 l 0 105 l 0 108 b 20 88 0 96 9 88 b 24 88 22 88 23 88 l 72 98 l 72 -140 l 16 -151 b 0 -171 7 -153 0 -163 l 0 -255 b 20 -275 0 -266 9 -275 b 24 -275 22 -275 23 -275 l 72 -265 l 72 -480 l 112 -480 l 112 -256 l 240 -230 l 240 -433 l 281 -433 l 281 -222 l 336 -212 b 351 -192 344 -210 351 -200 l 351 -107 b 331 -86 351 -95 343 -86 b 328 -86 330 -86 330 -86 l 281 -96 l 281 141 z m 112 107 l 240 132 l 240 -105 l 112 -132 z',
        },
        accidentalDoubleSharp: {
            x_min: 0,
            x_max: 275,
            y_min: -137,
            y_max: 138,
            ha: 275,
            o: 'm 360 73 l 376 73 b 396 94 387 73 396 82 l 396 179 b 376 199 396 190 387 199 l 291 199 b 271 179 279 199 271 190 l 271 161 l 271 102 l 200 30 l 196 30 l 124 102 l 124 179 b 105 199 124 190 117 199 l 20 199 b 0 179 9 199 0 190 l 0 94 b 20 73 0 82 9 73 l 35 73 l 36 73 l 96 73 l 167 3 l 167 -1 l 96 -73 l 36 -73 l 35 -73 l 20 -73 b 0 -92 9 -73 0 -81 l 0 -177 b 20 -197 0 -189 9 -197 l 105 -197 b 124 -177 117 -197 124 -189 l 124 -101 l 196 -32 l 200 -32 l 271 -101 l 271 -161 l 271 -163 l 271 -177 b 291 -197 271 -189 279 -197 l 376 -197 b 396 -177 387 -197 396 -189 l 396 -92 b 376 -73 396 -81 387 -73 l 361 -73 l 360 -73 l 300 -73 l 228 -1 l 228 1 l 300 73 z',
        },
        accidentalDoubleFlat: {
            x_min: 0,
            x_max: 371,
            y_min: -176,
            y_max: 453,
            ha: 629,
            o: 'm 531 115 b 415 223 523 171 488 223 b 294 171 343 223 301 180 l 300 632 b 279 652 300 644 291 652 l 262 652 b 242 632 251 652 242 644 l 246 199 b 173 223 228 213 204 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -249 30 -253 36 -251 b 216 -114 45 -246 138 -202 b 248 -69 226 -102 239 -82 l 249 -233 b 269 -253 249 -245 258 -253 b 281 -249 272 -253 278 -251 b 458 -112 287 -246 380 -200 b 534 79 513 -50 534 20 b 531 115 534 92 533 104 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 b 190 58 190 66 190 62 z m 432 58 b 390 -85 432 36 426 -30 b 289 -183 366 -122 317 -161 l 294 98 b 376 153 297 111 318 153 b 432 73 428 153 432 104 b 432 58 432 66 432 62 z',
        },
        accidentalParensLeft: {
            x_min: 0,
            x_max: 75,
            y_min: -212,
            y_max: 209.4142135623731,
            ha: 421.4142135623731,
            o: 'm 98 -305 b 104 -302 101 -304 102 -304 b 108 -295 107 -301 108 -298 b 107 -289 108 -294 108 -292 b 40 10 107 -288 40 -160 b 107 288 40 95 58 192 b 108 292 108 289 108 291 b 104 300 108 295 107 298 b 96 301 101 301 99 302 b 91 298 94 301 92 300 b 0 0 86 292 0 174 b 91 -301 0 -174 86 -295 b 98 -305 92 -304 95 -305 z',
        },
        accidentalParensRight: {
            x_min: 0,
            x_max: 75,
            y_min: -209.4142135623731,
            y_max: 212,
            ha: 421.4142135623731,
            o: 'm 10 305 b 4 302 7 304 6 304 b 0 295 1 301 0 298 b 1 289 0 294 0 292 b 68 -10 1 288 68 160 b 1 -288 68 -95 50 -192 b 0 -292 0 -289 0 -291 b 4 -300 0 -295 1 -298 b 12 -301 7 -301 9 -302 b 17 -298 14 -301 16 -300 b 108 0 22 -292 108 -174 b 17 301 108 174 22 295 b 10 305 16 304 13 305 z',
        },
        accidentalQuarterToneFlatStein: {
            x_min: 0,
            x_max: 193,
            y_min: -176,
            y_max: 452,
            ha: 628,
            o: 'm 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 b 92 75 92 62 92 68 b 148 154 92 105 96 154 z',
        },
        accidentalThreeQuarterTonesFlatZimmermann: {
            x_min: 0,
            x_max: 422,
            y_min: -176,
            y_max: 452,
            ha: 628,
            o: 'm 608 84 b 482 217 608 173 554 217 b 376 174 416 217 384 186 l 379 632 b 360 651 379 642 370 651 l 348 651 b 330 632 338 651 330 642 l 336 -235 b 354 -253 336 -245 344 -253 b 363 -249 359 -253 360 -251 b 501 -145 363 -249 442 -202 b 608 84 543 -105 608 -26 z m 459 154 b 516 75 511 154 516 105 b 516 58 516 68 516 62 b 474 -72 516 36 510 -17 b 373 -179 448 -111 400 -156 l 374 107 b 376 102 374 102 376 99 b 459 154 376 115 396 154 z m 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 b 92 75 92 62 92 68 b 148 154 92 105 96 154 z',
        },
        accidentalQuarterToneSharpStein: {
            x_min: 0,
            x_max: 180,
            y_min: -316,
            y_max: 320,
            ha: 636,
            o: 'm 243 144 b 259 164 252 145 259 156 l 259 249 b 239 269 259 261 251 269 b 235 268 238 269 236 268 l 150 251 l 150 461 l 109 461 l 109 242 l 16 222 b 0 203 7 220 0 212 l 0 120 b 20 99 0 108 9 99 b 24 99 22 99 23 99 l 109 117 l 109 -121 l 16 -141 b 0 -160 7 -143 0 -151 l 0 -243 b 20 -264 0 -255 9 -264 b 24 -264 22 -264 23 -264 l 109 -246 l 109 -455 l 150 -455 l 150 -238 l 243 -219 b 259 -199 252 -217 259 -207 l 259 -114 b 239 -95 259 -102 251 -95 b 235 -95 238 -95 236 -95 l 150 -112 l 150 125 z',
        },
        accidentalThreeQuarterTonesSharpStein: {
            x_min: 0,
            x_max: 290,
            y_min: -328,
            y_max: 339,
            ha: 667,
            o: 'm 400 158 b 416 179 409 160 416 170 l 416 264 b 397 284 416 275 409 284 b 393 284 396 284 395 284 l 348 274 l 348 488 l 308 488 l 308 265 l 223 248 l 223 465 l 184 465 l 184 240 l 108 225 l 108 442 l 69 442 l 69 216 l 16 204 b 0 186 7 203 0 194 l 0 102 b 20 82 0 91 9 82 b 24 82 22 82 23 82 l 69 92 l 69 -147 l 16 -158 b 0 -177 7 -160 0 -168 l 0 -261 b 20 -281 0 -272 9 -281 b 24 -281 22 -281 23 -281 l 69 -272 l 69 -472 l 108 -472 l 108 -264 l 184 -248 l 184 -451 l 223 -451 l 223 -240 l 308 -223 l 308 -426 l 348 -426 l 348 -215 l 400 -204 b 418 -184 409 -203 418 -193 l 418 -99 b 397 -79 418 -88 409 -79 b 393 -79 396 -79 395 -79 l 348 -89 l 348 148 z m 184 -122 l 108 -138 l 108 99 l 184 115 z m 223 122 l 308 140 l 308 -98 l 223 -115 z',
        },
        accidentalBuyukMucennebFlat: {
            x_min: 0,
            x_max: 277,
            y_min: -176,
            y_max: 454,
            ha: 630,
            o: 'm 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 160 317 l 336 419 l 336 482 l 161 380 l 161 488 l 336 590 l 336 654 l 163 552 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 108 520 l 0 456 l 0 393 l 108 456 l 109 350 l 0 285 l 0 222 l 109 287 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 141 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 154 -184 230 -122 181 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 b 297 58 297 66 297 62 z',
        },
        accidentalBakiyeFlat: {
            x_min: 0,
            x_max: 277,
            y_min: -176,
            y_max: 454,
            ha: 630,
            o: 'm 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 161 348 l 336 452 l 336 516 l 161 413 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 109 382 l 0 318 l 0 255 l 109 318 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 143 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 156 -184 230 -122 183 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 b 297 58 297 66 297 62 z',
        },
        accidentalKucukMucennebSharp: {
            x_min: 0,
            x_max: 348,
            y_min: -316,
            y_max: 318,
            ha: 634,
            o: 'm 494 121 b 482 125 491 124 487 125 b 478 124 481 125 480 124 l 269 68 l 269 127 l 412 164 b 425 181 420 167 425 173 l 425 266 b 418 282 425 272 422 279 b 406 285 415 285 410 285 b 402 285 405 285 403 285 l 269 249 l 269 458 l 232 458 l 232 239 l 89 200 b 76 181 81 197 76 190 l 76 98 b 84 84 76 92 79 86 b 95 79 86 81 91 79 b 99 81 96 79 98 81 l 232 115 l 232 58 l 14 -3 b 0 -20 6 -6 0 -12 l 0 -104 b 7 -118 0 -109 3 -115 b 19 -122 10 -121 14 -122 b 23 -122 20 -122 22 -122 l 232 -66 l 232 -124 l 89 -163 b 76 -180 81 -166 76 -171 l 76 -264 b 84 -279 76 -269 79 -276 b 95 -282 86 -282 91 -282 b 99 -282 96 -282 98 -282 l 232 -246 l 232 -455 l 269 -455 l 269 -236 l 412 -199 b 425 -180 420 -196 425 -189 l 425 -95 b 418 -81 425 -89 422 -84 b 406 -76 415 -78 410 -76 b 402 -78 405 -76 403 -78 l 269 -114 l 269 -55 l 487 4 b 501 22 495 7 501 13 l 501 107 b 494 121 501 112 498 118 z',
        },
        articAccentAbove: {
            x_min: 0,
            x_max: 361,
            y_min: 0,
            y_max: 235,
            ha: 235,
            o: 'm 26 337 b 20 338 24 337 22 338 b 0 318 9 338 0 330 l 0 285 b 14 266 0 276 7 269 l 323 170 l 14 72 b 0 53 7 69 0 62 l 0 20 b 20 0 0 9 9 0 b 26 1 22 0 24 1 l 505 150 b 520 170 513 153 520 161 b 505 189 520 179 513 186 z',
        },
        articAccentBelow: {
            x_min: 0,
            x_max: 361,
            y_min: -235,
            y_max: 0,
            ha: 235,
            o: 'm 26 -1 b 20 0 24 -1 22 0 b 0 -20 9 0 0 -9 l 0 -53 b 14 -72 0 -62 7 -69 l 323 -168 l 14 -266 b 0 -285 7 -269 0 -276 l 0 -318 b 20 -338 0 -330 9 -338 b 26 -337 22 -338 24 -337 l 505 -189 b 520 -168 513 -186 520 -177 b 505 -150 520 -160 513 -153 z',
        },
        articTenutoAbove: {
            x_min: 0,
            x_max: 316,
            y_min: 0,
            y_max: 46,
            ha: 46,
            o: 'm 20 66 b 0 46 9 66 0 58 l 0 20 b 20 0 0 9 9 0 l 435 0 b 455 20 446 0 455 9 l 455 46 b 435 66 455 58 446 66 z',
        },
        articTenutoBelow: {
            x_min: 0,
            x_max: 316,
            y_min: -46,
            y_max: 0,
            ha: 46,
            o: 'm 20 0 b 0 -20 9 0 0 -9 l 0 -46 b 20 -66 0 -58 9 -66 l 435 -66 b 455 -46 446 -66 455 -58 l 455 -20 b 435 0 455 -9 446 0 z',
        },
        articStaccatoAbove: {
            x_min: -0.25,
            x_max: 78.25,
            y_min: -0.25,
            y_max: 78,
            ha: 78.25,
            o: 'm 16 16 b 96 16 39 -6 73 -6 b 96 95 118 39 118 73 b 16 95 73 118 39 118 b 16 16 -6 73 -6 39 z',
        },
        articStaccatoBelow: {
            x_min: -0.25,
            x_max: 78.25,
            y_min: -78.25,
            y_max: 0,
            ha: 78.25,
            o: 'm 16 -96 b 96 -96 39 -118 73 -118 b 96 -17 118 -73 118 -39 b 16 -17 73 6 39 6 b 16 -96 -6 -39 -6 -73 z',
        },
        articStaccatissimoAbove: {
            x_min: 0,
            x_max: 127,
            y_min: 0,
            y_max: 248,
            ha: 248,
            o: 'm 163 357 b 150 353 154 357 150 353 l 99 300 b 92 295 96 297 95 295 b 85 300 89 295 88 297 l 35 353 b 22 357 35 353 30 357 b 0 338 13 357 0 351 b 73 22 0 323 73 22 b 92 0 75 16 78 0 b 111 22 107 0 109 16 b 183 338 111 22 183 323 b 163 357 183 351 171 357 z',
        },
        articStaccatissimoBelow: {
            x_min: 0,
            x_max: 127,
            y_min: -248,
            y_max: 0,
            ha: 248,
            o: 'm 20 -357 b 33 -353 29 -357 33 -353 l 84 -300 b 91 -295 86 -297 88 -295 b 98 -300 94 -295 95 -297 l 148 -353 b 161 -357 148 -353 153 -357 b 183 -338 170 -357 183 -351 b 109 -22 183 -323 109 -22 b 91 0 108 -16 105 0 b 72 -22 76 0 73 -16 b 0 -338 72 -22 0 -323 b 20 -357 0 -351 12 -357 z',
        },
        articMarcatoAbove: {
            x_min: 1,
            x_max: 296,
            y_min: 0,
            y_max: 253,
            ha: 253,
            o: 'm 36 10 l 173 239 l 298 10 b 317 0 301 4 310 0 l 408 0 b 426 20 419 0 426 9 b 425 30 426 23 426 27 l 230 356 b 213 364 226 361 222 363 b 196 356 207 364 199 361 l 1 30 z',
        },
        articMarcatoBelow: {
            x_min: 0,
            x_max: 295,
            y_min: -253,
            y_max: 0,
            ha: 253,
            o: 'm 390 -10 l 253 -239 l 128 -10 b 109 0 125 -4 117 0 l 19 0 b 0 -20 7 0 0 -9 b 1 -30 0 -23 0 -27 l 196 -356 b 213 -364 200 -361 204 -363 b 230 -356 219 -364 228 -361 l 425 -30 z',
        },
        fermataAbove: {
            x_min: 0,
            x_max: 622,
            y_min: 0,
            y_max: 368,
            ha: 368,
            o: 'm 778 374 b 448 530 642 521 523 530 b 120 374 373 530 255 521 b 0 65 49 297 0 143 b 20 19 0 37 6 19 b 161 265 60 19 40 143 b 445 373 268 372 410 373 b 448 373 446 373 446 373 b 451 373 449 373 449 373 b 734 265 485 373 628 372 b 876 19 855 143 835 19 b 896 65 890 19 896 36 b 778 374 896 143 848 298 z m 348 99 b 448 0 348 45 393 0 b 547 99 503 0 547 45 b 448 199 547 154 503 199 b 348 99 393 199 348 154 z',
        },
        fermataBelow: {
            x_min: 0,
            x_max: 622,
            y_min: -368,
            y_max: 0,
            ha: 368,
            o: 'm 778 -374 b 896 -65 848 -298 896 -143 b 876 -19 896 -36 890 -19 b 734 -265 835 -19 855 -143 b 451 -373 628 -372 485 -373 b 448 -373 449 -373 449 -373 b 445 -373 446 -373 446 -373 b 161 -265 410 -373 268 -372 b 20 -19 40 -143 60 -19 b 0 -65 6 -19 0 -37 b 120 -374 0 -143 49 -297 b 448 -530 255 -521 373 -530 b 778 -374 523 -530 642 -521 z m 348 -99 b 448 -199 348 -154 393 -199 b 547 -99 503 -199 547 -154 b 448 0 547 -45 503 0 b 348 -99 393 0 348 -45 z',
        },
        fermataLongAbove: {
            x_min: 0,
            x_max: 623,
            y_min: 0,
            y_max: 368,
            ha: 368,
            o: 'm 40 0 l 40 399 l 858 399 l 858 0 l 897 0 l 897 510 b 877 530 897 521 888 530 l 20 530 b 0 510 9 530 0 521 l 0 0 z m 350 148 b 449 49 350 94 395 49 b 547 148 504 49 547 94 b 449 248 547 203 504 248 b 350 148 395 248 350 203 z',
        },
        fermataLongBelow: {
            x_min: 0,
            x_max: 623,
            y_min: -368,
            y_max: 0,
            ha: 368,
            o: 'm 0 -510 b 20 -530 0 -521 9 -530 l 877 -530 b 897 -510 888 -530 897 -521 l 897 0 l 858 0 l 858 -399 l 40 -399 l 40 0 l 0 0 z m 350 -148 b 449 -248 350 -203 395 -248 b 547 -148 504 -248 547 -203 b 449 -49 547 -94 504 -49 b 350 -148 395 -49 350 -94 z',
        },
        fermataVeryLongAbove: {
            x_min: 0,
            x_max: 842,
            y_min: 0,
            y_max: 549,
            ha: 549,
            o: 'm 276 0 l 276 399 l 936 399 l 936 0 l 976 0 l 976 510 b 956 530 976 521 968 530 l 256 530 b 236 510 245 530 236 521 l 236 0 z m 507 148 b 606 49 507 94 552 49 b 706 148 661 49 706 94 b 606 248 706 203 661 248 b 507 148 552 248 507 203 z m 40 0 l 40 661 l 1172 661 l 1172 0 l 1212 0 l 1212 772 b 1192 791 1212 783 1204 791 l 20 791 b 0 772 9 791 0 783 l 0 0 z',
        },
        fermataVeryLongBelow: {
            x_min: 0,
            x_max: 842,
            y_min: -549,
            y_max: 0,
            ha: 549,
            o: 'm 236 -510 b 256 -530 236 -521 245 -530 l 956 -530 b 976 -510 968 -530 976 -521 l 976 0 l 936 0 l 936 -399 l 276 -399 l 276 0 l 236 0 z m 507 -148 b 606 -248 507 -203 552 -248 b 706 -148 661 -248 706 -203 b 606 -49 706 -94 661 -49 b 507 -148 552 -49 507 -94 z m 0 -772 b 20 -791 0 -783 9 -791 l 1192 -791 b 1212 -772 1204 -791 1212 -783 l 1212 0 l 1172 0 l 1172 -661 l 40 -661 l 40 0 l 0 0 z',
        },
        fermataShortAbove: {
            x_min: 0,
            x_max: 642,
            y_min: 0,
            y_max: 454,
            ha: 454,
            o: 'm 363 148 b 462 49 363 94 408 49 b 562 148 517 49 562 94 b 462 248 562 203 517 248 b 363 148 408 248 363 203 z m 477 645 b 461 654 474 649 467 654 b 445 645 455 654 448 649 l 4 32 b 0 20 3 29 0 23 b 20 0 0 9 9 0 l 82 0 b 98 9 88 0 95 4 l 461 514 l 827 9 b 842 0 829 4 837 0 l 904 0 b 924 20 916 0 924 9 b 920 32 924 23 922 29 z',
        },
        fermataShortBelow: {
            x_min: 0,
            x_max: 642,
            y_min: -454,
            y_max: 0,
            ha: 454,
            o: 'm 363 -148 b 462 -248 363 -203 408 -248 b 562 -148 517 -248 562 -203 b 462 -49 562 -94 517 -49 b 363 -148 408 -49 363 -94 z m 920 -32 b 924 -20 922 -29 924 -23 b 904 0 924 -9 916 0 l 842 0 b 827 -9 837 0 829 -4 l 461 -514 l 98 -9 b 82 0 95 -4 88 0 l 20 0 b 0 -20 9 0 0 -9 b 4 -32 0 -23 3 -29 l 445 -645 b 461 -654 448 -649 455 -654 b 477 -645 467 -654 474 -649 z',
        },
        breathMarkComma: {
            x_min: 0,
            x_max: 191,
            y_min: 0,
            y_max: 321,
            ha: 321,
            o: 'm 82 0 b 275 285 215 92 275 183 b 115 462 275 396 212 462 b 0 356 46 462 0 413 b 115 246 0 294 53 246 b 181 258 157 246 177 256 b 192 261 184 259 189 261 b 199 259 194 261 196 261 b 203 245 202 258 203 253 b 48 43 203 183 147 112 z',
        },
        caesura: {
            x_min: 0,
            x_max: 380,
            y_min: 0,
            y_max: 490,
            ha: 490,
            o: 'm 285 706 b 285 706 285 706 285 706 b 271 696 279 706 274 701 l 1 22 b 0 16 0 20 0 17 b 16 0 0 7 7 0 l 50 0 b 65 10 56 0 62 4 l 334 684 b 336 690 334 685 336 688 b 320 706 336 698 328 706 z m 213 22 b 212 16 213 20 212 17 b 228 0 212 7 219 0 l 262 0 b 276 10 268 0 274 4 l 546 684 b 547 690 547 685 547 688 b 531 706 547 698 540 706 l 497 706 b 482 696 491 706 485 701 z',
        },
        caesuraCurved: {
            x_min: 0,
            x_max: 368,
            y_min: 0,
            y_max: 491,
            ha: 491,
            o: 'm 262 707 b 245 693 253 707 246 701 b 1 26 233 603 177 348 b 0 17 0 23 0 20 b 16 0 0 9 6 0 b 30 7 22 0 27 3 b 318 687 259 341 304 602 b 318 690 318 688 318 688 b 301 707 318 698 310 707 z m 474 707 b 458 693 465 707 459 701 b 213 26 446 603 389 348 b 212 19 212 23 212 20 b 229 0 212 9 219 0 b 243 7 235 0 240 3 b 530 687 472 341 516 602 b 530 690 530 688 530 688 b 514 707 530 698 523 707 z',
        },
        restMaxima: {
            x_min: 0,
            x_max: 450,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 158 -360 b 180 -338 170 -360 180 -350 l 180 338 b 158 360 180 350 170 360 l 22 360 b 0 338 9 360 0 350 l 0 -338 b 22 -360 0 -350 9 -360 z m 626 -360 b 648 -338 638 -360 648 -350 l 648 338 b 626 360 648 350 638 360 l 490 360 b 468 338 477 360 468 350 l 468 -338 b 490 -360 468 -350 477 -360 z',
        },
        restDoubleWhole: {
            x_min: 0,
            x_max: 125,
            y_min: -11,
            y_max: 262,
            ha: 273,
            o: 'm 158 -16 b 180 6 171 -16 180 -6 l 180 356 b 158 377 180 367 171 377 l 22 377 b 0 356 10 377 0 367 l 0 6 b 22 -16 0 -6 10 -16 z',
        },
        restWhole: {
            x_min: 0,
            x_max: 325,
            y_min: -131,
            y_max: 5,
            ha: 136,
            o: 'm 20 7 b 0 -13 9 7 0 -1 l 0 -168 b 20 -189 0 -180 9 -189 l 448 -189 b 468 -168 459 -189 468 -180 l 468 -13 b 448 7 468 -1 459 7 z',
        },
        restWholeLegerLine: {
            x_min: -139,
            x_max: 464,
            y_min: -122,
            y_max: 14,
            ha: 136,
            o: 'm 449 20 l 19 20 l -200 20 l -200 -20 l 0 -20 l 0 -156 b 19 -176 0 -167 7 -176 l 449 -176 b 468 -156 461 -176 468 -167 l 468 -20 l 668 -20 l 668 20 z',
        },
        restHalf: {
            x_min: 0,
            x_max: 325,
            y_min: -4,
            y_max: 132,
            ha: 136,
            o: 'm 0 14 b 20 -6 0 -6 0 -6 l 448 -6 b 468 14 468 -6 468 -6 l 468 170 b 448 190 468 190 468 190 l 20 190 b 0 170 0 190 0 190 z',
        },
        restHalfLegerLine: {
            x_min: -139,
            x_max: 464,
            y_min: -14,
            y_max: 122,
            ha: 136,
            o: 'm 668 20 l 468 20 l 468 156 b 449 176 468 167 461 176 l 19 176 b 0 156 7 176 0 167 l 0 20 l -200 20 l -200 -20 l 19 -20 l 449 -20 l 668 -20 z',
        },
        restQuarter: {
            x_min: 0,
            x_max: 235,
            y_min: -331,
            y_max: 401,
            ha: 732,
            o: 'm 331 -239 b 323 -229 330 -238 327 -235 l 157 -24 b 154 -16 156 -23 154 -19 b 157 -3 154 -12 156 -6 l 304 219 b 307 229 305 222 307 226 l 307 242 b 302 253 307 246 305 251 l 69 569 b 55 577 69 569 63 577 b 43 573 50 577 48 576 b 36 559 37 569 36 563 b 40 543 36 550 40 543 l 150 393 b 154 376 153 389 154 383 b 150 359 154 370 153 363 l 4 137 b 1 125 3 134 1 128 l 1 112 b 6 101 1 108 3 104 l 167 -99 b 131 -95 161 -98 148 -95 b 49 -124 107 -95 75 -101 b 0 -229 17 -153 0 -193 b 16 -285 0 -249 4 -269 b 154 -468 46 -331 154 -468 b 171 -477 154 -468 161 -477 b 180 -474 174 -477 177 -477 b 190 -456 187 -468 190 -462 b 186 -444 190 -451 187 -446 b 135 -353 181 -436 135 -353 b 125 -307 135 -353 125 -333 b 150 -246 125 -288 131 -265 b 206 -223 167 -229 187 -223 b 252 -236 225 -223 240 -229 l 308 -272 b 320 -275 308 -272 314 -275 b 334 -268 325 -275 330 -274 b 338 -255 337 -262 338 -259 b 334 -243 338 -251 337 -248 z',
        },
        rest8th: {
            x_min: 0,
            x_max: 276,
            y_min: -255,
            y_max: 204,
            ha: 459,
            o: 'm 384 292 b 379 294 383 292 380 294 b 360 282 370 294 363 289 b 245 141 354 274 310 189 b 180 112 226 127 203 117 b 206 181 196 131 206 154 b 104 284 206 238 160 284 b 0 181 46 284 0 238 b 65 85 0 137 27 101 b 144 68 86 75 115 68 b 269 109 186 68 230 81 b 320 157 287 122 304 140 l 156 -356 l 194 -367 l 396 268 b 397 275 397 269 397 272 b 384 292 397 282 393 288 z',
        },
        rest16th: {
            x_min: 1,
            x_max: 344,
            y_min: -507,
            y_max: 204,
            ha: 711,
            o: 'm 494 268 b 495 275 495 271 495 272 b 482 292 495 282 491 289 b 475 294 480 294 477 294 b 456 282 467 294 461 289 b 285 115 422 213 364 135 b 310 184 302 135 310 158 b 203 284 310 240 259 284 b 104 177 145 281 104 233 b 171 84 105 134 134 98 b 252 69 197 72 225 69 b 423 164 324 72 380 108 l 423 164 l 359 -65 b 183 -245 338 -132 256 -226 b 207 -176 199 -225 207 -200 b 102 -76 207 -118 158 -76 b 1 -183 45 -76 1 -125 b 69 -275 1 -226 32 -262 b 150 -289 96 -287 121 -289 b 321 -194 222 -287 278 -251 l 174 -720 l 213 -730 z',
        },
        rest32nd: {
            x_min: 0,
            x_max: 391,
            y_min: -507,
            y_max: 460,
            ha: 967,
            o: 'm 217 71 b 408 171 348 71 402 161 l 354 -46 b 184 -240 323 -121 268 -217 b 204 -171 200 -220 204 -197 b 102 -76 204 -114 158 -76 b 0 -177 46 -76 0 -120 b 140 -288 0 -252 63 -288 b 320 -186 216 -288 276 -246 l 189 -721 l 228 -730 l 562 638 b 563 644 563 639 563 642 b 549 661 563 652 557 658 b 543 662 547 662 544 662 b 524 649 534 662 528 657 b 361 487 497 589 431 504 b 383 556 379 508 383 530 b 282 652 383 611 338 652 b 179 549 226 652 179 609 b 249 451 179 505 210 464 b 311 439 268 444 288 441 b 330 441 317 439 323 439 b 498 541 400 445 458 485 l 442 310 b 271 117 413 238 351 137 b 292 186 288 138 292 160 b 189 282 292 243 245 282 b 88 180 132 282 88 238 b 217 71 88 112 153 71 z',
        },
        rest64th: {
            x_min: 0,
            x_max: 423,
            y_min: -758,
            y_max: 464,
            ha: 1222,
            o: 'm 207 -1083 l 246 -1092 b 608 644 282 -919 605 634 b 609 649 608 647 609 648 b 595 667 609 658 603 665 b 589 668 593 668 592 668 b 569 654 577 668 575 664 b 474 521 563 644 530 573 b 412 487 456 505 435 494 b 432 546 425 503 432 526 b 328 649 432 606 382 649 b 226 546 275 649 226 608 b 360 438 226 465 300 438 b 501 492 419 438 474 465 b 546 546 527 518 533 526 l 547 547 l 500 323 b 399 161 491 300 452 209 b 337 125 382 144 360 132 b 357 184 350 143 357 134 b 253 288 357 235 317 288 b 151 187 190 288 151 236 b 285 76 151 138 183 76 b 471 184 412 76 465 173 l 423 -45 b 324 -204 413 -69 374 -158 b 262 -240 305 -222 284 -233 b 281 -180 274 -223 281 -212 b 177 -78 281 -147 258 -78 b 75 -180 98 -78 75 -153 b 209 -289 75 -207 88 -289 b 395 -181 330 -289 389 -193 l 350 -397 b 248 -564 337 -449 285 -530 b 186 -599 229 -580 207 -592 b 204 -540 197 -583 204 -563 b 102 -438 204 -501 174 -438 b 0 -540 29 -438 0 -501 b 132 -648 0 -579 24 -648 b 320 -540 266 -648 315 -552 z',
        },
        rest128th: {
            x_min: -1,
            x_max: 475,
            y_min: -759,
            y_max: 717,
            ha: 1476,
            o: 'm 677 1028 b 664 1032 672 1031 667 1032 b 644 1018 654 1032 649 1028 b 549 886 638 1008 605 937 b 487 851 531 870 510 858 b 507 910 500 868 507 890 b 403 1014 507 971 456 1014 b 301 910 350 1014 301 972 b 435 802 301 829 374 802 b 576 857 494 802 549 829 b 621 910 602 883 608 890 l 622 912 l 575 687 b 474 526 566 664 527 573 b 412 490 456 508 435 497 b 432 549 425 507 432 498 b 328 652 432 599 392 652 b 226 552 265 652 226 600 b 360 441 226 503 258 441 b 546 549 487 441 540 537 l 498 320 b 399 160 488 295 449 207 b 337 125 380 143 359 131 b 356 184 348 141 356 153 b 252 287 356 217 333 287 b 150 184 173 287 150 212 b 284 76 150 157 163 76 b 469 183 405 76 464 171 l 425 -33 b 323 -200 412 -85 360 -166 b 261 -235 304 -216 282 -228 b 279 -176 272 -219 279 -199 b 177 -72 279 -137 249 -72 b 75 -176 104 -72 75 -137 b 207 -284 75 -215 99 -284 b 395 -176 341 -284 390 -187 l 347 -409 b 248 -566 330 -461 282 -533 b 186 -600 229 -582 207 -593 b 204 -541 197 -583 204 -564 b 102 -438 204 -501 174 -438 b -1 -541 29 -438 -1 -503 b 132 -649 -1 -580 24 -649 b 318 -546 256 -649 307 -567 l 206 -1084 l 245 -1093 b 683 1008 281 -920 680 996 b 684 1015 683 1009 684 1014 b 677 1028 684 1020 683 1024 z',
        },
        dynamicPiano: {
            x_min: -95,
            x_max: 317,
            y_min: -163,
            y_max: 263,
            ha: 426,
            o: 'm 186 -235 l 186 -206 l 78 -206 l 161 26 l 166 16 b 229 -29 166 16 180 -16 b 256 -32 238 -32 248 -32 b 445 166 336 -32 415 49 b 456 246 454 197 456 223 b 374 373 456 343 396 367 b 356 376 369 374 361 376 b 242 314 311 376 266 338 l 238 310 l 235 315 b 154 377 235 315 204 370 b 138 379 148 377 144 379 b 0 226 91 379 42 346 l 26 213 b 63 301 32 232 46 278 b 102 328 72 314 89 325 b 108 328 104 328 107 328 b 120 325 112 328 117 327 b 127 304 125 321 127 314 b 94 192 127 269 101 206 l -49 -206 l -137 -206 l -137 -235 z m 226 17 b 215 19 223 17 217 17 b 187 81 193 27 187 53 b 204 180 187 125 203 177 b 297 317 217 235 259 295 b 324 325 307 323 315 325 b 336 324 328 325 333 325 b 350 311 341 323 347 317 b 356 278 354 302 356 291 b 333 161 356 239 341 187 b 242 20 314 105 278 37 b 226 17 238 17 230 17 z',
        },
        dynamicMezzo: {
            x_min: -7,
            x_max: 374,
            y_min: -2,
            y_max: 251,
            ha: 253,
            o: 'm 488 63 b 467 48 481 50 474 48 b 459 49 464 48 462 48 b 449 65 452 52 449 58 b 461 112 449 76 455 94 b 474 157 464 121 471 150 b 492 281 482 183 492 242 b 491 301 492 288 492 295 b 436 359 484 340 467 359 b 340 307 399 359 359 331 l 337 301 l 334 308 b 272 359 334 308 311 359 b 177 310 232 359 202 343 l 173 304 l 171 311 b 117 360 171 311 153 353 b 96 361 109 361 102 361 b 29 328 60 361 39 340 b -10 252 20 318 0 284 l 12 240 b 68 318 12 240 36 318 b 75 317 71 318 72 318 b 86 295 84 314 86 307 b 59 194 86 275 75 240 b 1 20 59 193 6 33 b 0 13 1 17 0 16 b 3 4 0 10 1 7 b 14 -1 6 1 9 -1 l 36 -1 b 91 -1 58 -1 86 -1 b 107 22 94 -1 101 -1 b 127 99 114 53 121 79 b 235 310 132 121 186 310 b 243 305 238 310 242 308 b 248 289 246 302 248 297 b 216 160 248 265 233 219 b 173 22 194 89 173 22 b 173 16 173 20 173 19 b 176 3 173 12 173 6 b 187 -1 179 0 183 -1 l 266 -1 b 282 16 272 -1 279 0 b 284 26 282 17 284 22 b 392 302 312 228 359 288 b 396 304 393 302 395 304 l 397 304 b 400 302 399 304 399 302 b 408 289 403 301 408 297 b 369 140 408 275 399 217 b 356 75 360 117 356 95 b 370 23 356 55 360 37 b 428 -3 382 6 408 -3 b 536 99 492 -3 517 49 b 539 108 537 102 537 105 l 514 120 b 488 63 514 120 498 81 z',
        },
        dynamicForte: {
            x_min: -137,
            x_max: 334,
            y_min: -193,
            y_max: 421,
            ha: 614,
            o: 'm -122 -86 b -197 -161 -161 -86 -197 -122 b -81 -278 -197 -236 -147 -278 b 35 -228 -35 -278 -1 -264 b 202 173 98 -164 167 50 b 238 297 215 219 228 264 l 238 300 l 341 300 b 356 314 350 300 356 305 l 356 346 b 341 360 356 354 350 360 l 256 360 l 256 364 b 330 554 297 511 308 537 b 359 566 341 563 351 566 b 366 564 361 566 364 564 b 380 553 373 563 377 559 b 382 546 382 550 382 549 b 373 528 382 539 379 531 b 351 478 359 517 351 498 b 354 458 351 471 353 465 b 384 426 359 445 370 432 b 410 420 390 423 400 420 b 445 431 420 420 432 423 b 478 472 459 438 474 456 b 481 497 481 480 481 488 b 467 550 481 514 477 533 b 376 605 455 572 422 598 b 351 606 369 606 360 606 b 225 553 317 606 272 595 b 122 363 187 520 154 456 l 122 360 l 13 360 b -1 346 4 360 -1 354 l -1 314 b 13 300 -1 305 4 300 l 102 300 l 102 294 b 66 140 88 236 76 187 b 24 -35 55 86 42 32 l 20 -52 b -53 -235 -10 -170 -19 -212 b -78 -242 -60 -239 -69 -242 b -98 -235 -85 -242 -92 -239 b -105 -222 -102 -232 -105 -228 b -105 -219 -105 -220 -105 -220 b -94 -204 -104 -213 -101 -207 b -58 -144 -66 -193 -58 -167 b -122 -86 -58 -124 -71 -86 z',
        },
        dynamicRinforzando: {
            x_min: -12,
            x_max: 230,
            y_min: 0,
            y_max: 254,
            ha: 254,
            o: 'm 272 364 b 200 341 239 364 212 348 b 168 310 187 333 177 321 l 164 304 b 109 363 164 304 151 353 b 88 366 102 364 95 366 b 22 331 52 366 32 343 b -17 255 13 321 -7 287 l 4 243 b 60 321 4 243 29 321 b 68 320 63 321 65 321 b 78 297 75 317 78 308 b 49 180 78 272 65 230 l 0 23 b 0 17 0 22 0 20 b 3 4 0 13 0 7 b 14 0 6 1 10 0 l 94 0 b 109 17 99 0 107 1 b 111 27 109 19 111 23 b 209 302 140 230 186 279 b 225 311 215 308 220 311 b 229 310 226 311 228 311 b 233 304 233 307 233 305 b 233 301 233 302 233 301 b 216 268 220 291 216 279 b 225 243 216 259 219 249 b 262 229 235 232 249 229 b 304 242 279 229 295 235 b 331 308 320 255 331 275 b 272 364 331 341 304 364 z',
        },
        dynamicSforzando: {
            x_min: 0,
            x_max: 208,
            y_min: -5,
            y_max: 263,
            ha: 268,
            o: 'm 242 328 b 217 289 222 317 217 300 b 258 249 217 274 230 249 b 298 284 285 249 295 269 b 300 295 300 287 300 291 b 189 379 300 328 272 379 b 49 259 92 379 49 315 b 99 173 49 229 59 196 b 164 137 117 163 140 151 b 194 88 189 122 194 102 b 124 24 194 73 177 24 b 72 46 82 24 72 39 b 73 49 72 48 72 49 b 96 96 78 52 96 62 b 50 150 96 134 72 150 b 0 91 29 150 0 134 b 124 -7 0 26 49 -7 b 282 111 199 -7 282 24 b 171 239 282 197 207 219 b 128 292 135 259 128 268 b 193 347 128 317 156 347 b 242 328 230 347 242 328 z',
        },
        dynamicZ: {
            x_min: -42,
            x_max: 239,
            y_min: -1,
            y_max: 258,
            ha: 259,
            o: 'm 229 292 b 235 288 232 292 233 291 b 236 284 236 285 236 285 b 233 278 236 281 235 279 b -42 55 232 276 -4 85 b -60 24 -56 43 -60 33 b -50 4 -60 12 -50 4 b -35 0 -45 1 -40 0 b 9 29 -14 0 1 19 b 50 69 17 43 26 69 b 89 35 75 69 81 50 b 170 -1 104 10 137 -1 b 243 22 197 -1 223 6 b 304 147 288 56 304 118 b 264 196 304 176 294 196 b 226 156 239 196 226 174 b 251 117 226 128 249 122 b 251 108 251 114 251 111 b 243 79 251 98 249 88 b 212 56 236 68 223 56 b 202 59 209 56 204 56 b 163 92 194 63 186 75 b 108 122 140 109 114 120 b 105 125 105 124 105 124 b 107 128 105 127 107 128 b 312 304 107 128 302 294 b 341 340 324 315 336 327 b 344 347 343 341 344 346 l 344 356 b 333 369 343 367 336 369 l 331 369 l 262 363 b 217 361 245 361 230 361 b 156 366 193 361 174 363 b 114 372 147 367 125 372 b 107 370 111 372 108 370 b 86 344 98 367 89 360 b 37 222 72 265 42 232 b 37 219 37 220 37 220 b 50 207 37 213 43 207 l 66 207 b 81 225 75 207 76 215 b 108 291 85 235 105 285 b 118 297 111 297 112 297 b 167 289 125 295 144 291 b 181 289 171 289 177 289 b 229 292 202 289 222 291 z',
        },
        ornamentTrill: {
            x_min: -12,
            x_max: 383,
            y_min: 0,
            y_max: 383,
            ha: 383,
            o: 'm 464 396 b 376 359 408 396 376 359 l 364 370 b 346 377 357 377 346 377 l 197 377 l 246 528 b 246 531 246 530 246 531 b 226 552 246 541 236 552 l 213 552 b 199 544 209 552 202 547 b 124 482 196 541 130 487 b 117 471 118 478 117 471 b 84 377 117 471 102 431 l 3 377 b -17 360 -14 377 -17 360 l -17 341 b 3 324 -17 325 3 324 l 66 324 b 0 85 35 229 0 117 b 92 0 0 16 48 0 b 186 35 137 0 186 35 b 194 13 186 35 190 24 b 212 0 199 1 212 0 l 276 0 b 298 16 295 0 298 16 l 298 43 b 321 147 298 75 321 147 l 382 284 b 412 325 382 284 396 311 b 446 341 425 336 438 341 b 452 340 448 341 451 341 b 428 288 432 327 428 305 b 485 233 428 271 446 233 b 552 308 534 233 552 264 b 464 396 552 353 520 396 z m 222 143 b 147 78 210 104 171 78 b 137 79 143 78 140 78 b 121 115 125 85 121 99 b 137 190 121 148 137 190 l 180 324 l 275 324 b 279 320 279 324 279 320 b 222 143 279 320 235 187 z',
        },
        ornamentTurn: {
            x_min: 0,
            x_max: 456,
            y_min: 0,
            y_max: 232,
            ha: 232,
            o: 'm 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 328 255 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 328 79 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z',
        },
        ornamentTurnSlash: {
            x_min: 0,
            x_max: 456,
            y_min: -80,
            y_max: 313,
            ha: 393,
            o: 'm 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 354 230 l 354 431 b 336 451 354 442 347 451 l 323 451 b 302 431 311 451 302 442 l 302 279 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 302 104 l 302 -96 b 323 -115 302 -108 311 -115 l 336 -115 b 354 -96 347 -115 354 -108 l 354 55 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z',
        },
        ornamentMordent: {
            x_min: 0,
            x_max: 473,
            y_min: -77,
            y_max: 316,
            ha: 393,
            o: 'm 647 302 l 562 166 l 446 347 b 429 357 444 353 435 357 b 413 347 423 357 416 353 l 363 262 l 363 435 b 343 455 363 446 354 455 l 331 455 b 311 435 320 455 311 446 l 311 173 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 171 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 311 95 l 311 -91 b 331 -111 311 -102 320 -111 l 343 -111 b 363 -91 354 -111 363 -102 l 363 184 l 366 189 l 478 10 b 495 0 481 4 490 0 b 513 10 501 0 510 4 l 681 281 z',
        },
        ornamentShortTrill: {
            x_min: 0,
            x_max: 473,
            y_min: 0,
            y_max: 248,
            ha: 248,
            o: 'm 647 302 l 562 166 l 446 347 b 431 357 444 353 436 357 b 413 347 425 357 416 353 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 173 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 366 189 l 478 9 b 495 0 481 3 490 0 b 513 10 501 0 510 4 l 681 281 z',
        },
        ornamentTremblement: {
            x_min: 0,
            x_max: 654,
            y_min: 0,
            y_max: 248,
            ha: 248,
            o: 'm 907 302 l 822 166 l 708 348 b 691 357 704 354 701 357 b 674 347 685 357 677 353 l 648 302 l 563 166 l 449 348 b 432 357 446 354 438 357 b 415 347 426 357 418 353 l 415 346 l 311 171 l 203 348 b 186 357 200 354 192 357 b 168 348 177 357 171 354 l 168 347 l 0 69 l 35 48 l 120 190 l 226 10 b 243 0 229 4 238 0 l 245 0 b 261 10 251 0 258 4 l 367 189 l 480 10 b 497 0 482 4 491 0 b 513 10 503 0 510 4 l 625 192 l 739 10 b 756 0 742 4 750 0 b 772 10 762 0 769 4 l 942 282 z',
        },
        ornamentPrecompAppoggTrill: {
            x_min: 0,
            x_max: 680,
            y_min: 0,
            y_max: 388,
            ha: 388,
            o: 'm 860 170 l 746 353 b 729 361 743 359 737 361 b 713 351 723 361 716 357 l 685 307 l 600 170 l 487 353 b 481 359 485 356 484 357 b 469 361 478 360 472 361 b 452 351 464 361 455 357 l 348 176 l 240 353 b 223 361 238 359 229 361 b 206 353 215 361 209 359 l 40 76 l 40 541 b 20 559 39 552 30 559 b 0 541 10 559 1 552 l 0 26 b 19 1 0 16 9 4 b 26 0 20 1 24 0 b 48 13 35 0 43 6 l 72 52 l 157 194 l 265 14 b 282 4 268 9 276 4 b 298 14 288 4 295 9 l 405 193 l 517 14 b 534 4 520 9 528 4 b 550 14 540 4 547 9 l 664 196 l 776 14 b 793 4 779 9 788 4 b 811 14 799 4 808 9 l 979 287 l 945 307 z',
        },
        ornamentPrecompSlideTrillDAnglebert: {
            x_min: 0,
            x_max: 662,
            y_min: -158,
            y_max: 248,
            ha: 406,
            o: 'm 834 166 l 720 348 b 704 357 717 354 713 357 b 687 348 697 357 690 353 l 661 302 l 660 302 l 575 166 l 461 348 b 455 354 459 350 456 353 b 444 357 452 356 448 357 b 428 347 438 357 431 353 l 323 171 l 215 347 b 213 350 215 348 215 350 b 213 350 213 350 213 350 l 213 351 l 212 351 l 212 353 l 210 353 l 210 353 l 209 354 b 207 354 209 354 207 354 b 197 357 206 356 200 357 b 197 357 197 357 197 357 b 194 357 196 357 196 357 b 180 347 187 357 183 353 l 180 346 l 69 164 b 0 -50 23 88 0 17 b 49 -219 0 -108 16 -163 b 66 -228 52 -223 59 -228 b 76 -225 69 -228 73 -226 b 86 -207 82 -222 86 -215 b 84 -197 86 -204 85 -200 b 40 -52 55 -150 40 -102 b 104 143 40 10 62 73 l 131 190 l 239 10 b 256 0 242 4 249 0 l 256 0 b 272 10 262 0 269 4 l 379 189 l 491 10 b 508 0 494 4 503 0 b 508 0 508 0 508 0 l 508 0 b 526 10 514 0 521 4 l 638 192 l 750 10 b 768 0 755 4 762 0 l 768 0 b 785 10 773 0 782 4 l 785 10 l 953 282 l 919 302 z',
        },
        ornamentPrecompSlideTrillBach: {
            x_min: 0,
            x_max: 662,
            y_min: -158,
            y_max: 321,
            ha: 479,
            o: 'm 834 166 l 720 348 b 704 357 716 354 713 357 b 687 348 698 357 690 354 l 660 304 l 660 302 l 632 259 l 632 442 b 612 462 632 454 624 462 l 599 462 b 579 442 588 462 579 454 l 579 173 l 575 166 l 461 348 b 455 356 459 351 458 354 b 445 359 452 357 448 359 b 428 348 439 359 431 354 l 323 171 l 215 347 b 213 350 215 348 213 350 l 213 351 l 212 353 l 210 353 l 210 354 l 207 354 b 197 357 204 356 200 357 b 180 348 189 357 183 354 l 179 346 l 69 164 b 0 -49 23 88 0 19 b 49 -217 0 -107 17 -163 b 66 -228 52 -223 60 -228 b 76 -225 69 -228 73 -226 b 86 -207 82 -222 86 -213 b 84 -197 86 -204 85 -200 b 42 -50 56 -148 42 -101 b 104 144 42 12 62 75 l 131 190 l 239 10 b 256 0 242 4 251 0 b 274 10 262 0 271 4 l 379 190 l 491 10 b 508 0 494 4 503 0 b 526 10 514 0 523 4 l 579 98 l 579 -84 b 599 -104 579 -95 588 -104 l 612 -104 b 632 -84 624 -104 632 -95 l 632 183 l 638 192 l 750 10 b 768 0 753 4 762 0 b 785 10 773 0 782 4 l 953 282 l 919 302 z',
        },
        ornamentPrecompTrillSuffixDandrieu: {
            x_min: 0,
            x_max: 662,
            y_min: 0,
            y_max: 406,
            ha: 406,
            o: 'm 904 575 b 887 585 901 580 893 585 b 877 582 884 585 880 583 b 867 564 871 579 867 570 b 870 554 867 562 868 557 b 912 408 897 505 912 458 b 850 213 912 346 891 282 l 822 167 l 714 348 b 697 357 711 354 703 357 b 680 348 691 357 683 354 l 575 168 l 462 348 b 445 357 459 354 451 357 b 428 348 439 357 431 354 l 315 167 l 203 348 b 186 357 200 354 192 357 b 168 348 180 357 171 354 l 0 76 l 35 55 l 120 192 l 233 10 b 249 0 238 4 240 0 b 266 10 255 0 264 4 l 294 55 l 379 192 l 492 9 b 498 3 494 6 495 4 b 508 0 501 1 505 0 b 526 10 514 0 523 4 l 631 186 l 737 13 b 746 3 739 10 743 4 b 756 0 749 1 753 0 b 773 9 762 0 770 3 l 884 193 b 953 406 930 269 953 338 b 904 575 953 464 936 520 z',
        },
        ornamentPrecompDoubleCadenceUpperPrefix: {
            x_min: 0,
            x_max: 857,
            y_min: 0,
            y_max: 248,
            ha: 248,
            o: 'm 383 140 b 413 189 399 166 412 187 b 520 10 423 171 516 16 b 537 0 523 4 530 0 b 554 10 543 0 550 4 b 660 189 557 16 649 171 b 772 10 671 173 766 19 b 791 0 778 1 785 0 b 806 10 796 0 802 4 b 919 192 809 16 907 174 l 1031 10 b 1048 0 1035 4 1043 0 l 1048 0 b 1066 10 1054 1 1063 4 l 1066 10 l 1234 282 l 1200 302 l 1115 166 l 1002 348 b 985 357 998 354 994 357 b 968 348 978 357 971 353 l 855 166 b 742 348 845 183 746 341 b 726 357 737 354 732 357 b 708 348 719 357 711 354 b 603 171 704 341 613 189 b 495 348 593 189 498 343 b 478 357 492 353 487 357 b 461 348 469 357 464 353 b 357 173 459 346 393 235 b 213 79 320 111 284 79 b 66 176 143 79 95 112 b 40 279 43 228 40 275 b 20 300 40 291 30 300 b 0 278 9 300 0 289 b 29 161 0 276 3 219 b 213 39 65 81 130 39 b 383 140 297 39 346 73 z',
        },
        ornamentPrecompTrillLowerSuffix: {
            x_min: 0,
            x_max: 565,
            y_min: -171,
            y_max: 249,
            ha: 420,
            o: 'm 347 168 l 235 348 b 217 359 230 354 226 359 b 200 348 209 359 203 353 b 3 30 197 344 6 35 b 0 20 0 26 0 24 b 22 0 0 9 10 0 b 37 9 27 0 35 3 l 151 192 b 265 10 161 174 262 13 b 281 0 268 6 272 0 b 298 10 289 0 295 3 l 403 186 l 511 10 b 528 0 516 4 521 0 b 546 10 537 0 541 4 l 698 265 b 775 22 744 202 775 112 b 700 -215 775 -60 752 -144 b 696 -226 697 -219 696 -222 b 704 -243 696 -232 700 -239 b 717 -246 708 -246 713 -246 b 733 -239 723 -246 729 -243 b 814 20 789 -160 814 -69 b 711 312 814 132 773 242 b 696 320 707 317 700 320 b 680 310 691 320 684 318 b 595 168 671 297 602 181 l 488 348 b 471 359 484 354 478 359 b 454 348 464 359 456 353 b 347 168 449 343 357 186 z',
        },
        brassMuteClosed: {
            x_min: 0,
            x_max: 312,
            y_min: 0,
            y_max: 312,
            ha: 312,
            o: 'm 22 256 b 0 225 7 256 0 240 b 22 193 0 209 7 193 l 193 193 l 193 22 b 225 0 193 7 209 0 b 256 22 240 0 256 7 l 256 193 l 428 193 b 449 225 442 193 449 209 b 428 256 449 240 442 256 l 256 256 l 256 428 b 225 449 256 442 240 449 b 193 428 209 449 193 442 l 193 256 z',
        },
        brassMuteOpen: {
            x_min: 0,
            x_max: 280,
            y_min: 0,
            y_max: 280,
            ha: 280,
            o: 'm 202 403 b 0 202 91 403 0 312 b 202 0 0 91 91 0 b 403 202 312 0 403 91 b 202 403 403 312 312 403 z m 202 40 b 40 202 112 40 40 112 b 202 363 40 291 112 363 b 363 202 291 363 363 291 b 202 40 363 112 291 40 z',
        },
        stringsDownBow: {
            x_min: 0,
            x_max: 315,
            y_min: 0,
            y_max: 293,
            ha: 293,
            o: 'm 40 0 l 40 291 l 413 291 l 413 0 l 454 0 l 454 402 b 433 422 454 413 445 422 l 20 422 b 0 402 9 422 0 402 l 0 0 z',
        },
        stringsUpBow: {
            x_min: 0,
            x_max: 262,
            y_min: 0,
            y_max: 343,
            ha: 343,
            o: 'm 374 485 b 357 494 372 490 363 494 l 337 494 b 318 481 330 494 321 488 l 189 118 l 59 481 b 40 494 56 488 48 494 l 20 494 b 0 474 9 494 0 485 b 1 467 0 472 1 468 l 170 13 b 189 0 173 6 181 0 b 207 13 196 0 204 6 l 376 467 b 377 474 376 468 377 472 b 374 485 377 477 376 482 z',
        },
        stringsHarmonic: {
            x_min: 0,
            x_max: 181,
            y_min: 0,
            y_max: 181,
            ha: 181,
            o: 'm 131 220 b 220 131 181 220 220 181 b 131 40 220 81 181 40 b 40 131 81 40 40 81 b 131 220 40 181 81 220 z m 131 261 b 0 131 59 261 0 203 b 131 0 0 59 59 0 b 261 131 203 0 261 59 b 131 261 261 203 203 261 z',
        },
        pluckedSnapPizzicatoAbove: {
            x_min: 0,
            x_max: 269,
            y_min: 0,
            y_max: 389,
            ha: 389,
            o: 'm 213 540 b 194 560 213 552 204 560 b 174 540 183 560 174 552 l 174 386 b 0 193 76 376 0 294 b 194 0 0 86 86 0 b 387 193 301 0 387 86 b 213 386 387 294 311 376 z m 194 40 b 40 193 109 40 40 109 b 174 346 40 271 98 336 l 174 193 b 194 173 174 183 183 173 b 213 193 204 173 213 183 l 213 346 b 347 193 289 336 347 271 b 194 40 347 109 278 40 z',
        },
        pluckedSnapPizzicatoBelow: {
            x_min: 0,
            x_max: 269,
            y_min: 0,
            y_max: 389,
            ha: 389,
            o: 'm 213 174 b 387 367 311 184 387 266 b 193 560 387 474 301 560 b 0 367 86 560 0 474 b 174 174 0 266 76 184 l 174 20 b 194 0 174 9 183 0 b 213 20 204 0 213 9 z m 194 520 b 347 367 278 520 347 452 b 213 215 347 289 289 225 l 213 367 b 194 387 213 377 204 387 b 174 367 183 387 174 377 l 174 215 b 40 367 98 225 40 289 b 194 520 40 452 109 520 z',
        },
        keyboardPedalPed: {
            x_min: 0,
            x_max: 981,
            y_min: -10,
            y_max: 545,
            ha: 555,
            o: 'm 1354 12 b 1413 78 1385 12 1413 42 b 1354 145 1413 115 1385 145 b 1293 78 1320 145 1293 115 b 1354 12 1293 42 1320 12 z m 1092 88 b 1080 86 1089 86 1084 86 b 1004 203 1037 86 1004 137 b 1107 376 1004 360 1097 374 b 1149 209 1129 336 1149 287 b 1092 88 1149 117 1130 95 z m 752 393 b 795 344 779 393 795 372 b 770 285 795 325 788 304 b 693 203 737 249 697 207 b 688 264 690 225 688 245 b 752 393 688 347 714 393 z m 245 507 b 220 544 245 533 235 544 b 217 544 219 544 219 544 b 186 510 206 546 192 537 b 143 464 179 478 163 464 b 134 465 140 464 137 464 b 102 516 117 467 102 487 b 141 613 102 541 112 576 b 347 721 212 711 315 721 b 356 721 351 721 354 721 b 275 560 344 701 297 616 b 259 495 274 557 259 528 b 272 452 259 480 264 465 b 373 323 297 416 350 354 b 387 284 382 311 387 298 b 350 222 387 265 376 245 b 230 140 301 180 252 154 b 128 39 215 130 128 92 b 134 12 128 30 130 22 b 173 -14 144 -7 157 -14 b 264 40 204 -14 243 17 b 333 98 281 58 302 98 b 389 39 357 98 373 60 b 478 -10 416 1 435 -10 b 622 96 527 -10 559 43 b 740 -10 626 86 667 -10 b 929 95 827 -10 917 85 b 1086 -12 950 37 1018 -12 b 1120 -7 1097 -12 1109 -10 b 1264 213 1212 17 1264 111 b 1263 248 1264 225 1263 236 b 815 664 1228 544 907 647 b 785 668 805 665 795 668 b 779 668 783 668 782 668 b 757 654 769 668 760 665 b 757 649 757 652 757 651 b 786 618 759 629 783 619 b 818 606 796 613 808 611 b 1071 435 1007 534 1066 445 b 909 181 930 386 909 256 b 910 141 909 164 909 151 b 786 78 899 127 844 78 b 708 151 726 78 710 144 b 799 230 711 154 742 181 b 864 350 845 271 864 312 b 757 456 864 410 815 456 b 599 222 644 456 599 328 b 609 141 599 192 602 164 b 563 104 608 140 595 122 b 540 98 556 99 549 98 b 459 140 513 98 480 118 b 397 184 413 189 399 184 b 475 279 403 189 454 226 b 482 311 480 289 482 300 b 449 410 482 359 452 405 b 361 533 442 419 383 503 b 354 560 356 541 354 550 b 386 651 353 588 372 622 b 429 713 405 693 426 710 b 557 592 521 688 557 628 b 549 569 557 582 554 573 b 523 559 540 562 531 559 b 459 592 495 559 469 583 b 425 613 451 600 438 613 b 409 608 419 613 415 612 b 399 586 402 602 399 595 b 399 583 397 585 399 585 b 409 552 399 573 405 562 b 541 458 441 487 492 458 b 608 480 564 458 588 465 b 648 572 632 497 648 531 b 429 778 648 649 589 749 b 351 785 402 782 376 785 b 0 507 130 785 0 615 b 127 366 0 399 68 366 b 245 507 186 366 245 429 z',
        },
        keyboardPedalUp: {
            x_min: 0,
            x_max: 473,
            y_min: 0,
            y_max: 473,
            ha: 473,
            o: 'm 99 99 b 164 69 120 79 143 69 b 199 82 177 69 190 73 b 210 114 206 89 210 102 b 206 137 210 122 209 130 b 200 160 203 145 200 154 b 210 179 200 166 203 171 l 245 215 b 285 213 255 225 272 219 l 287 213 l 288 212 b 318 183 301 206 318 196 l 318 134 b 291 102 318 112 308 112 b 258 58 274 92 258 76 b 340 0 258 26 294 0 b 423 58 386 0 423 26 b 390 102 423 76 408 92 b 361 134 373 112 361 112 l 361 183 b 392 212 361 196 379 206 b 395 213 393 212 393 213 b 436 215 408 219 426 225 l 471 179 b 480 161 478 171 480 167 b 474 137 480 154 477 147 b 471 115 472 130 471 122 b 482 82 471 102 474 91 b 517 69 491 73 504 69 b 582 99 539 69 562 79 b 612 164 602 120 612 143 b 599 199 612 177 608 190 b 567 210 592 206 579 210 b 544 206 559 210 552 209 b 521 200 536 203 528 200 b 501 210 514 200 508 203 l 467 245 b 468 285 456 255 462 272 l 468 287 b 469 288 468 287 469 287 b 498 318 475 301 485 318 l 547 318 b 579 291 569 318 569 308 b 624 258 589 274 605 258 b 681 340 655 258 681 294 b 624 423 681 386 655 423 b 579 390 605 423 589 408 b 547 361 569 373 569 361 l 498 361 b 469 392 485 361 475 379 b 468 395 469 393 468 393 b 467 436 462 408 456 426 l 501 471 b 520 480 508 478 514 480 b 544 474 527 480 534 477 b 566 471 552 472 559 471 b 599 482 579 471 590 474 b 612 516 608 491 612 503 b 582 580 612 536 602 560 b 516 612 562 600 537 612 b 482 599 503 612 491 608 b 471 566 474 590 471 579 b 474 544 471 559 472 552 b 480 520 477 534 480 527 b 471 501 480 514 478 508 l 436 467 b 395 468 426 456 408 462 b 392 469 393 468 393 469 b 361 498 379 475 361 485 l 361 547 b 390 579 361 569 373 569 b 423 624 408 589 423 605 b 340 681 423 655 386 681 b 258 624 294 681 258 655 b 291 579 258 605 274 589 b 318 547 308 569 318 569 l 318 498 b 288 469 318 485 301 475 l 287 468 l 285 468 b 245 467 272 462 255 456 l 210 501 b 200 521 203 508 200 514 b 206 544 200 528 203 536 b 210 567 209 552 210 559 b 199 599 210 579 206 592 b 164 612 190 608 177 612 b 99 582 143 612 120 602 b 69 517 79 562 69 539 b 82 482 69 504 73 491 b 115 471 91 474 102 471 b 137 474 122 471 130 472 b 161 480 147 477 154 480 b 180 471 167 480 173 478 l 215 436 b 213 395 225 426 219 408 b 212 392 213 393 212 393 b 183 361 206 379 196 361 l 134 361 b 102 390 112 361 112 373 b 58 423 92 408 76 423 b 0 340 26 423 0 386 b 58 258 0 294 26 258 b 102 291 76 258 92 274 b 134 318 112 308 112 318 l 183 318 b 212 288 196 318 206 301 b 213 287 212 287 213 288 l 213 285 b 215 245 219 272 225 255 l 179 210 b 160 200 171 203 166 200 b 137 206 154 200 145 203 b 114 210 130 209 122 210 b 82 199 102 210 89 206 b 69 164 73 190 69 177 b 99 99 69 143 79 120 z m 276 276 b 249 340 262 291 249 320 b 340 432 249 390 289 432 b 432 340 390 432 432 390 b 405 276 432 320 419 291 b 340 249 390 262 360 249 b 276 276 320 249 291 262 z',
        },
        wiggleArpeggiatoUp: {
            x_min: -22,
            x_max: 242,
            y_min: 0,
            y_max: 164,
            ha: 164,
            o: 'm 343 122 b 323 143 343 122 334 132 b 308 148 318 147 312 148 b 298 144 304 148 301 147 b 282 128 295 141 291 137 b 274 124 279 125 276 124 b 265 128 268 124 265 128 b 158 220 265 128 173 207 b 112 236 143 232 127 236 b 43 206 82 236 55 219 l -26 137 b -32 125 -30 132 -32 130 b -26 112 -32 118 -26 112 b -6 92 -26 112 -17 102 b 7 86 -1 88 3 86 b 17 91 12 86 14 88 b 33 107 20 94 24 98 b 42 111 36 109 39 111 b 52 107 48 111 52 107 b 158 16 52 107 144 29 b 204 0 174 4 190 0 b 274 30 235 0 262 17 l 343 99 b 348 111 347 104 348 108 b 343 122 348 118 343 122 z',
        },
        repeat1Bar: {
            x_min: 0,
            x_max: 481,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 183 180 b 92 271 183 230 141 271 b 1 180 42 271 1 230 b 92 89 1 130 42 89 b 183 180 141 89 183 130 z m 693 360 l 511 360 l 0 -360 l 181 -360 z m 693 -181 b 602 -91 693 -131 651 -91 b 511 -181 552 -91 511 -131 b 602 -272 511 -232 552 -272 b 693 -181 651 -272 693 -232 z',
        },
        repeat2Bars: {
            x_min: 0,
            x_max: 735,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 1058 -181 b 968 -91 1058 -131 1017 -91 b 877 -181 917 -91 877 -131 b 968 -272 877 -232 917 -272 b 1058 -181 1017 -272 1058 -232 z m 183 180 b 92 271 183 230 141 271 b 1 180 42 271 1 230 b 92 89 1 130 42 89 b 183 180 141 89 183 130 z m 693 360 l 511 360 l 0 -360 l 181 -360 z m 1058 360 l 877 360 l 366 -360 l 547 -360 z',
        },
        repeat4Bars: {
            x_min: 0,
            x_max: 1243,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 183 180 b 92 271 183 230 141 271 b 1 180 42 271 1 230 b 92 89 1 130 42 89 b 183 180 141 89 183 130 z m 693 360 l 511 360 l 0 -360 l 181 -360 z m 1058 360 l 877 360 l 366 -360 l 547 -360 z m 1424 360 l 1243 360 l 732 -360 l 913 -360 z m 1790 360 l 1608 360 l 1097 -360 l 1279 -360 z m 1790 -181 b 1699 -91 1790 -131 1748 -91 b 1608 -181 1649 -91 1608 -131 b 1699 -272 1608 -232 1649 -272 b 1790 -181 1748 -272 1790 -232 z',
        },
        repeatBarSlash: {
            x_min: 0,
            x_max: 481,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 693 360 l 511 360 l 0 -360 l 181 -360 z',
        },
        csymDiminished: {
            x_min: 0,
            x_max: 501,
            y_min: 0,
            y_max: 501,
            ha: 501,
            o: 'm 361 721 b 0 361 161 721 0 560 b 361 0 0 161 161 0 b 721 361 560 0 721 161 b 361 721 721 560 560 721 z m 557 164 b 361 82 505 111 435 82 b 164 164 287 82 216 111 b 82 361 111 216 82 287 b 164 557 82 436 111 505 b 361 639 216 611 287 639 b 557 557 436 639 505 611 b 639 361 611 505 639 436 b 557 164 639 287 609 216 z',
        },
        csymHalfDiminished: {
            x_min: -1,
            x_max: 502,
            y_min: -1,
            y_max: 502,
            ha: 503,
            o: 'm 723 684 l 684 723 l 596 634 b 361 721 533 688 451 721 b 0 361 161 721 0 560 b 88 125 0 271 33 189 l -1 36 l 36 -1 l 125 88 b 361 0 189 33 271 0 b 721 361 560 0 721 161 b 634 596 721 451 688 533 z m 82 361 b 164 557 82 436 111 505 b 361 639 216 611 287 639 b 537 576 426 639 488 616 l 145 184 b 82 361 105 233 82 295 z m 639 361 b 557 164 639 287 609 216 b 361 82 505 111 435 82 b 184 145 295 82 233 105 l 576 537 b 639 361 616 488 639 426 z',
        },
        csymAugmented: {
            x_min: 1,
            x_max: 321,
            y_min: 90,
            y_max: 410,
            ha: 320,
            o: 'm 462 400 l 272 400 l 272 590 l 192 590 l 192 400 l 1 400 l 1 320 l 192 320 l 192 130 l 272 130 l 272 320 l 462 320 z',
        },
        csymMajorSeventh: {
            x_min: 0,
            x_max: 500,
            y_min: 10,
            y_max: 490,
            ha: 480,
            o: 'm 360 528 l 585 96 l 135 96 z m 360 706 l 0 14 l 720 14 z',
        },
        accidentalNarrowReversedFlat: {
            x_min: 0,
            x_max: 160,
            y_min: -176,
            y_max: 452,
            ha: 628,
            o: 'm 0 84 b 101 -153 0 -26 65 -107 b 196 -249 153 -217 196 -249 b 206 -253 199 -251 202 -253 b 225 -235 216 -253 225 -245 l 230 632 b 212 651 230 642 222 651 l 199 651 b 180 632 189 651 180 642 l 184 204 b 125 217 184 204 171 217 b 0 84 53 217 0 173 z m 145 154 b 184 107 181 154 184 120 l 187 -179 b 114 -72 167 -158 132 -112 b 82 58 86 -13 82 36 b 145 154 82 79 82 154 z',
        },
        accidentalNarrowReversedFlatAndFlat: {
            x_min: 0,
            x_max: 416,
            y_min: -176,
            y_max: 452,
            ha: 628,
            o: 'm 462 217 b 330 174 374 217 338 181 l 334 632 b 315 651 334 642 325 651 l 302 651 b 284 632 292 651 284 642 l 289 -235 b 308 -253 289 -245 298 -253 b 320 -249 312 -253 317 -251 b 492 -138 320 -249 433 -194 b 599 84 534 -98 599 -26 b 462 217 599 173 534 217 z m 501 58 b 459 -72 501 36 498 -19 b 327 -179 431 -111 359 -164 l 330 85 l 330 91 b 422 154 330 125 359 154 b 501 58 503 154 501 79 z m 0 84 b 101 -153 0 -26 65 -107 b 196 -249 153 -217 196 -249 b 206 -253 199 -251 202 -253 b 225 -235 216 -253 225 -245 l 230 632 b 212 651 230 642 222 651 l 199 651 b 180 632 189 651 180 642 l 184 204 b 125 217 184 204 171 217 b 0 84 53 217 0 173 z m 145 154 b 184 107 181 154 184 120 l 187 -179 b 114 -72 167 -158 132 -112 b 82 58 86 -13 82 36 b 145 154 82 79 82 154 z',
        },
    },
    fontFamily: 'Leland',
    resolution: 1000,
    generatedOn: '2022-06-26T17:49:33.853Z',
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/leland_metrics.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/leland_metrics.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LelandMetrics: () => (/* binding */ LelandMetrics)
/* harmony export */ });
const LelandMetrics = {
    name: 'Leland',
    smufl: true,
    stave: {
        padding: 12,
        endPaddingMax: 10,
        endPaddingMin: 5,
        unalignedNotePadding: 10,
    },
    accidental: {
        noteheadAccidentalPadding: 1,
        leftPadding: 2,
        accidentalSpacing: 3,
    },
    clef: {
        default: {
            point: 32,
            width: 26,
        },
        small: {
            point: 26,
            width: 20,
        },
        annotations: {
            '8va': {
                smuflCode: 'timeSig8',
                default: {
                    point: 18,
                    treble: {
                        line: -1.4,
                        shiftX: 12,
                    },
                },
                small: {
                    point: 16,
                    treble: {
                        line: -0.2,
                        shiftX: 8,
                    },
                },
            },
            '8vb': {
                smuflCode: 'timeSig8',
                default: {
                    point: 18,
                    treble: {
                        line: 6,
                        shiftX: 10,
                    },
                    bass: {
                        line: 3.5,
                        shiftX: 1,
                    },
                },
                small: {
                    point: 16,
                    treble: {
                        line: 5.3,
                        shiftX: 6,
                    },
                    bass: {
                        line: 3.1,
                        shiftX: 0.5,
                    },
                },
            },
        },
        lineCount: {
            '8': { point: 55, shiftY: 14 },
            '7': { point: 47, shiftY: 8 },
            '6': { point: 32, shiftY: 1 },
            '5': { point: 30, shiftY: -6 },
            '4': { point: 23, shiftY: -12 },
        },
    },
    parenthesis: {
        default: {
            point: 39,
            width: 7,
        },
        gracenote: {
            point: (39 * 3) / 5,
            width: 3,
        },
    },
    pedalMarking: {
        up: {
            point: 40,
        },
        down: {
            point: 34,
        },
    },
    digits: {
        shiftLine: -1,
        point: 34,
        tupletPoint: 22,
        shiftY: -6,
    },
    articulation: {
        articStaccatissimoAbove: {
            padding: 2,
        },
        articStaccatissimoBelow: {
            padding: 2,
        },
    },
    tremolo: {
        default: {
            point: 25,
            spacing: 5,
            offsetYStemUp: -5,
            offsetYStemDown: 5,
            offsetXStemUp: 11,
            offsetXStemDown: 1,
        },
        grace: {
            point: 18,
            spacing: 4,
            offsetYStemUp: -5,
            offsetYStemDown: 5,
            offsetXStemUp: 7,
            offsetXStemDown: 1,
        },
    },
    staveRepetition: {
        symbolText: {
            offsetX: 12,
            offsetY: 25,
            spacing: 5,
        },
        coda: {
            offsetY: 25,
        },
        segno: {
            offsetY: 10,
        },
    },
    stem: {
        heightAdjustmentForFlag: -3,
        noteHead: {
            noteheadTriangleUpHalf: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpBlack: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpWhole: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadXHalf: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXBlack: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXWhole: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadHalf: {
                offsetYBaseStemUp: -2.55,
                offsetYBaseStemDown: 2.65,
            },
            noteheadBlack: {
                offsetYBaseStemUp: -2,
                offsetYBaseStemDown: 2,
            },
            noteheadSquareWhite: {
                offsetYBaseStemDown: -5,
                offsetYBaseStemUp: 5,
            },
        },
    },
    glyphs: {
        coda: {
            point: 20,
            shiftX: -7,
            shiftY: 8,
        },
        segno: {
            shiftX: -7,
        },
        flag: {
            shiftX: -0.75,
            staveTempo: {
                shiftX: -1,
            },
        },
        clef: {
            gClef: {
                default: { scale: 1.1, shiftY: 1 },
                small: { shiftY: 1.5 },
            },
            fClef: {
                default: { shiftY: -0.5 },
            },
        },
        ornament: {
            ornamentTurn: {
                scale: 1.2,
            },
            ornamentTurnSlash: {
                scale: 1.2,
            },
        },
        stringNumber: {
            verticalPadding: 8,
            stemPadding: 2,
            leftPadding: 5,
            rightPadding: 6,
        },
        stroke: {
            arrowheadBlackDown: {
                straight: {
                    shiftX: -4.5,
                },
                wiggly: {
                    shiftX: -1,
                    shiftY: 1,
                },
            },
            arrowheadBlackUp: {
                straight: {
                    shiftX: -0.85,
                },
                wiggly: {
                    shiftX: -1,
                    shiftY: 1,
                },
            },
        },
        textNote: {
            point: 34,
            breathMarkTick: {
                point: 36,
                shiftY: 9,
            },
            breathMarkComma: {
                point: 36,
            },
            segno: {
                point: 30,
                shiftX: -7,
                shiftY: 8,
            },
            coda: {
                point: 20,
                shiftX: -7,
                shiftY: 8,
            },
            ornamentTrill: {
                shiftX: -8,
                shiftY: 8,
            },
            ornamentTurn: {
                point: 42,
            },
            ornamentTurnSlash: {
                point: 42,
            },
            ornamentMordent: {
                shiftX: -8,
            },
            ornamentShortTrill: {
                shiftX: -8,
            },
        },
        noteHead: {
            minPadding: 2,
            standard: {
                restQuarterStemUp: {
                    point: 35,
                },
                restQuarterStemDown: {
                    point: 35,
                },
            },
            custom: {
                noteheadCircleXStemUp: {
                    shiftX: 1.5,
                },
                noteheadCircleXStemDown: {
                    shiftX: 0.25,
                },
                noteheadDiamondHalfStemUp: {
                    shiftX: 1.5,
                },
                noteheadDiamondBlackStemUp: {
                    shiftX: 1.5,
                },
                noteheadDiamondWholeStemUp: {
                    shiftX: 1,
                },
                noteheadXHalfStemUp: {
                    shiftX: -2,
                },
                noteheadXHalfStemDown: {
                    shiftX: 1,
                },
                noteheadXWholeStemUp: {
                    shiftX: -4,
                },
                noteheadXWholeStemDown: {
                    shiftX: 1,
                },
                noteheadSquareWhiteStemDown: {
                    shiftX: 0.25,
                },
                noteheadSquareWhiteStemUp: {
                    shiftX: -0.75,
                },
                noteheadSquareBlackStemUp: {
                    shiftX: -0.75,
                },
                noteheadTriangleUpWholeStemUp: {
                    shiftX: -0.75,
                },
            },
        },
        chordSymbol: {
            global: {
                superscriptOffset: -400,
                subscriptOffset: 300,
                kerningOffset: -250,
                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],
                upperKerningText: ['A', 'L'],
                spacing: 100,
                superSubRatio: 0.66,
            },
            csymDiminished: {
                scale: 0.8,
                leftSideBearing: -32,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymHalfDiminished: {
                scale: 0.8,
                leftSideBearing: -32,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymAugmented: {
                scale: 1,
                leftSideBearing: 0,
                advanceWidth: 530,
                yOffset: 0,
            },
            csymParensLeftTall: {
                scale: 0.8,
                leftSideBearing: -20,
                advanceWidth: 184,
                yOffset: 250,
            },
            csymParensRightTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 189,
                yOffset: 250,
            },
            csymBracketLeftTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 328,
                yOffset: 0,
            },
            csymBracketRightTall: {
                scale: 0.8,
                leftSideBearing: 1,
                advanceWidth: 600,
                yOffset: 0,
            },
            csymParensLeftVeryTall: {
                scale: 0.9,
                leftSideBearing: 50,
                advanceWidth: 121,
                yOffset: 350,
            },
            csymParensRightVeryTall: {
                scale: 0.9,
                leftSideBearing: 0,
                advanceWidth: 111,
                yOffset: 350,
            },
            csymDiagonalArrangementSlash: {
                scale: 0.6,
                leftSideBearing: -1,
                advanceWidth: 990,
                yOffset: 0,
            },
            csymMinor: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 482,
                yOffset: 0,
            },
            csymMajorSeventh: {
                scale: 0.9,
                leftSideBearing: 200,
                yOffset: 0,
                advanceWidth: 600,
            },
            accidentalSharp: {
                scale: 0.75,
                leftSideBearing: 20,
                advanceWidth: 250,
                yOffset: -302,
            },
            accidentalFlat: {
                scale: 0.9,
                leftSideBearing: -20,
                advanceWidth: 226,
                yOffset: -184,
            },
        },
        jazzOrnaments: {
            brassScoop: {
                scale: 1.0,
                xOffset: -12,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 20,
            },
            brassDoitMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 22,
            },
            brassFallLipShort: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 15,
            },
            brassLiftMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 5,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassFallRoughMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 28,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassBend: {
                scale: 1.0,
                xOffset: 2,
                yOffset: -8,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassMuteClosed: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -8,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassMuteOpen: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -7,
                stemUpYOffset: 25,
                reportedWidth: 5,
            },
            brassFlip: {
                scale: 1.0,
                xOffset: 10,
                yOffset: 0,
                stemUpYOffset: 7,
                reportedWidth: 10,
            },
            brassJazzTurn: {
                scale: 1.0,
                xOffset: 0,
                yOffset: 0,
                stemUpYOffset: 8,
                reportedWidth: 31,
            },
            brassSmear: {
                scale: 1.0,
                xOffset: 10,
                yOffset: 0,
                stemUpYOffset: 8,
                reportedWidth: 5,
            },
        },
        tuplet: {
            noteHeadOffset: 20,
            stemOffset: 10,
            bottomLine: 4,
            topModifierOffset: 15,
        },
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_all.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/load_all.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadAllMusicFonts: () => (/* binding */ loadAllMusicFonts)
/* harmony export */ });
/* harmony import */ var _load_bravura_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load_bravura.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_bravura.js");
/* harmony import */ var _load_custom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./load_custom.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_custom.js");
/* harmony import */ var _load_gonville_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./load_gonville.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_gonville.js");
/* harmony import */ var _load_leland_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./load_leland.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_leland.js");
/* harmony import */ var _load_petaluma_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./load_petaluma.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_petaluma.js");





function loadAllMusicFonts() {
    (0,_load_bravura_js__WEBPACK_IMPORTED_MODULE_0__.loadBravura)();
    (0,_load_gonville_js__WEBPACK_IMPORTED_MODULE_2__.loadGonville)();
    (0,_load_petaluma_js__WEBPACK_IMPORTED_MODULE_4__.loadPetaluma)();
    (0,_load_custom_js__WEBPACK_IMPORTED_MODULE_1__.loadCustom)();
    (0,_load_leland_js__WEBPACK_IMPORTED_MODULE_3__.loadLeland)();
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_bravura.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/load_bravura.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadBravura: () => (/* binding */ loadBravura)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _bravura_glyphs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bravura_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/bravura_glyphs.js");
/* harmony import */ var _bravura_metrics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bravura_metrics.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/bravura_metrics.js");



function loadBravura() {
    _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load('Bravura', _bravura_glyphs_js__WEBPACK_IMPORTED_MODULE_1__.BravuraFont, _bravura_metrics_js__WEBPACK_IMPORTED_MODULE_2__.BravuraMetrics);
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_custom.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/load_custom.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadCustom: () => (/* binding */ loadCustom)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _custom_glyphs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/custom_glyphs.js");
/* harmony import */ var _custom_metrics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_metrics.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/custom_metrics.js");



function loadCustom() {
    _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load('Custom', _custom_glyphs_js__WEBPACK_IMPORTED_MODULE_1__.CustomFont, _custom_metrics_js__WEBPACK_IMPORTED_MODULE_2__.CustomMetrics);
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_gonville.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/load_gonville.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadGonville: () => (/* binding */ loadGonville)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _gonville_glyphs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gonville_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/gonville_glyphs.js");
/* harmony import */ var _gonville_metrics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gonville_metrics.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/gonville_metrics.js");



function loadGonville() {
    _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load('Gonville', _gonville_glyphs_js__WEBPACK_IMPORTED_MODULE_1__.GonvilleFont, _gonville_metrics_js__WEBPACK_IMPORTED_MODULE_2__.GonvilleMetrics);
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_leland.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/load_leland.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadLeland: () => (/* binding */ loadLeland)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _leland_glyphs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./leland_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/leland_glyphs.js");
/* harmony import */ var _leland_metrics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./leland_metrics.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/leland_metrics.js");



function loadLeland() {
    _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load('Leland', _leland_glyphs_js__WEBPACK_IMPORTED_MODULE_1__.LelandFont, _leland_metrics_js__WEBPACK_IMPORTED_MODULE_2__.LelandMetrics);
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/load_petaluma.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/load_petaluma.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadPetaluma: () => (/* binding */ loadPetaluma)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _petaluma_glyphs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./petaluma_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/petaluma_glyphs.js");
/* harmony import */ var _petaluma_metrics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./petaluma_metrics.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/petaluma_metrics.js");



function loadPetaluma() {
    _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load('Petaluma', _petaluma_glyphs_js__WEBPACK_IMPORTED_MODULE_1__.PetalumaFont, _petaluma_metrics_js__WEBPACK_IMPORTED_MODULE_2__.PetalumaMetrics);
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/petaluma_glyphs.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/petaluma_glyphs.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PetalumaFont: () => (/* binding */ PetalumaFont)
/* harmony export */ });
const PetalumaFont = {
    glyphs: {
        bracketTop: {
            x_min: 0,
            x_max: 508,
            y_min: 0,
            y_max: 370,
            ha: 370,
            o: 'm 22 0 b 122 0 55 1 89 0 l 157 0 b 713 376 425 0 622 137 b 732 467 724 406 732 436 b 726 514 732 482 730 498 b 711 533 723 528 719 533 b 693 526 707 533 700 530 b 674 498 683 520 678 508 b 635 406 662 467 652 435 b 310 164 560 281 458 193 b 154 151 258 154 206 151 b 39 154 117 151 78 154 b 1 120 17 154 4 145 b 0 84 0 108 0 96 b 0 20 0 63 1 40 b 22 0 0 4 7 0 z',
        },
        bracketBottom: {
            x_min: 0,
            x_max: 496,
            y_min: -393,
            y_max: 0,
            ha: 393,
            o: 'm 696 -566 b 711 -539 713 -566 708 -549 b 714 -521 713 -533 714 -527 b 713 -508 714 -517 713 -513 b 661 -327 706 -445 688 -384 b 392 -42 603 -203 513 -109 b 206 0 331 -7 266 0 b 160 -1 190 0 174 -1 b 26 -1 107 -1 66 -3 b 0 -19 12 -1 0 -4 l 0 -23 b 3 -50 1 -32 3 -42 b 1 -86 3 -62 1 -73 b 4 -118 1 -96 1 -108 b 45 -151 10 -145 23 -154 b 180 -143 89 -144 135 -145 b 621 -419 392 -135 523 -236 b 662 -539 641 -456 655 -497 b 696 -566 667 -557 680 -566 z',
        },
        barlineTick: {
            x_min: 0,
            x_max: 56.036101509664164,
            y_min: 876.905249806889,
            y_max: 1121.5430338167066,
            ha: 244.63778400981766,
            o: 'm 42 1263 b 66 1287 62 1261 66 1272 b 81 1583 65 1387 72 1485 b 35 1614 82 1610 53 1610 b 14 1591 17 1619 16 1604 b 0 1408 7 1525 0 1459 l 0 1292 b 42 1263 1 1263 23 1266 z',
        },
        breathMarkTick: {
            x_min: 0,
            x_max: 568,
            y_min: 0,
            y_max: 621,
            ha: 621,
            o: 'm 258 0 b 278 39 276 0 274 24 b 279 56 279 45 279 50 l 279 73 b 278 117 279 88 278 102 b 281 148 278 127 279 138 b 536 600 312 330 387 487 b 744 719 600 651 670 690 b 815 779 775 730 808 740 b 818 824 818 793 818 808 b 815 868 818 838 818 852 b 796 894 814 881 808 894 b 779 888 791 894 786 893 b 719 864 760 878 739 871 b 372 602 580 806 459 724 b 229 252 298 498 251 383 b 220 268 225 262 222 264 b 209 302 217 279 213 291 b 75 527 181 387 143 467 b 16 563 58 543 39 573 b 0 539 3 557 0 549 b 12 492 0 524 9 507 b 56 400 19 459 22 425 b 163 269 104 367 138 323 b 238 36 197 194 216 115 b 258 0 242 22 243 0 z',
        },
        segno: {
            x_min: 0,
            x_max: 798,
            y_min: -65,
            y_max: 806,
            ha: 871,
            o: 'm 16 -94 b 66 -69 39 -92 53 -85 b 177 59 102 -26 138 17 b 543 456 298 192 420 324 b 726 300 615 420 680 373 b 753 217 744 271 753 243 b 655 112 753 170 719 131 b 599 104 636 107 618 104 b 461 173 544 104 495 128 b 432 190 454 183 444 190 b 409 179 425 190 418 187 b 359 118 390 160 373 141 b 341 72 347 101 341 86 b 373 24 341 56 351 40 b 409 6 384 17 396 10 b 550 -13 454 -12 501 -14 b 599 -6 566 -12 583 -10 b 864 213 720 27 806 104 b 886 300 878 242 886 271 b 857 395 886 331 877 363 b 799 467 840 420 821 445 b 648 572 755 513 704 546 b 1110 1083 802 743 955 914 b 1140 1129 1123 1097 1136 1110 b 1149 1148 1142 1135 1149 1142 b 1145 1153 1149 1149 1148 1152 b 1123 1161 1139 1158 1130 1161 b 1109 1156 1119 1161 1113 1159 b 1089 1138 1102 1151 1094 1145 b 946 988 1040 1089 989 1041 b 595 602 834 855 711 732 l 590 598 l 549 615 b 432 793 462 647 432 723 b 534 888 432 851 474 888 b 671 834 588 888 631 864 b 710 818 684 824 696 818 b 724 821 714 818 719 819 b 809 883 757 834 788 852 b 816 901 814 890 816 896 b 802 923 816 910 812 916 b 706 984 770 945 742 971 b 593 1011 668 998 631 1011 b 516 991 567 1011 541 1005 b 333 799 433 949 380 876 b 302 693 312 765 302 729 b 330 589 302 658 311 624 b 469 488 360 533 415 511 b 485 482 475 487 480 485 b 266 249 412 405 338 327 b 121 88 217 196 170 141 b 9 -65 78 40 37 -7 b 0 -85 4 -72 0 -79 b 16 -94 0 -91 4 -94 z m 861 536 b 927 575 890 539 909 557 b 965 628 952 598 965 613 b 926 680 965 644 952 658 b 865 713 900 701 883 713 b 805 667 845 713 828 698 b 768 611 791 649 770 631 b 812 564 766 589 798 582 b 861 536 824 550 840 537 z m 251 350 b 363 436 285 348 353 403 b 354 456 366 448 360 452 b 271 518 327 477 298 497 b 243 528 261 526 252 528 b 210 513 232 528 222 523 b 157 454 190 494 176 472 b 141 428 147 444 141 436 b 158 406 141 420 147 413 b 216 361 180 393 197 376 b 245 350 225 356 235 350 z',
        },
        coda: {
            x_min: 0,
            x_max: 1380,
            y_min: -196,
            y_max: 1037,
            ha: 1233,
            o: 'm 1028 -282 b 1057 -245 1045 -282 1053 -261 b 1060 -203 1060 -232 1060 -217 b 1063 9 1060 -132 1061 -62 b 1390 194 1192 22 1303 81 b 1531 543 1467 298 1512 415 b 1532 556 1531 547 1532 552 b 1904 559 1656 557 1780 559 b 1950 582 1920 559 1941 569 b 1987 674 1970 609 1987 638 b 1984 698 1987 681 1986 690 b 1950 700 1973 698 1961 700 l 1941 700 l 1545 696 b 1535 776 1545 723 1541 749 b 1103 1113 1477 996 1326 1107 b 1080 1115 1096 1115 1087 1115 b 1081 1322 1080 1184 1080 1253 b 1079 1467 1083 1371 1081 1418 b 1061 1493 1079 1476 1080 1493 l 1060 1493 b 1028 1467 1044 1490 1031 1485 b 1020 1403 1025 1446 1020 1424 b 1017 1110 1020 1305 1018 1208 l 962 1106 b 569 914 808 1087 671 1035 b 451 683 510 844 472 766 l 161 678 b 118 680 148 678 132 680 b 79 670 101 680 86 678 b 0 544 48 636 29 592 l 37 544 l 429 549 b 428 518 428 539 428 528 b 488 285 428 435 458 360 b 681 81 526 192 593 124 b 946 9 763 40 854 19 b 1008 6 966 7 988 6 b 1005 -137 1008 -42 1005 -89 b 1012 -243 1005 -173 1005 -209 b 1028 -282 1015 -258 1011 -282 z m 1074 690 b 1079 935 1077 772 1077 852 b 1326 855 1166 932 1250 909 b 1446 694 1385 814 1426 759 b 1269 693 1387 694 1328 693 b 1074 690 1204 693 1139 691 z m 577 684 b 766 874 618 763 678 828 b 989 932 837 912 913 923 b 1015 933 998 932 1007 933 b 1014 822 1015 896 1014 860 b 1011 688 1012 791 1012 743 z m 1067 184 b 1071 553 1070 307 1068 429 b 1439 556 1194 553 1316 554 b 1437 554 1439 554 1437 554 b 1341 337 1413 478 1387 402 b 1119 192 1286 261 1211 212 b 1067 184 1102 189 1084 186 z m 1008 180 b 660 264 886 181 770 212 b 524 471 570 305 524 374 b 528 524 524 488 526 505 l 533 549 b 792 552 619 550 706 550 b 1009 553 865 553 937 552 b 1008 180 1009 428 1008 288 z',
        },
        gClef: {
            x_min: 0,
            x_max: 664,
            y_min: -559,
            y_max: 1009,
            ha: 1568,
            o: 'm 343 -805 b 366 -801 350 -805 357 -804 b 409 -773 383 -795 397 -786 b 582 -328 528 -648 577 -497 b 583 -294 582 -315 583 -294 b 612 -279 583 -294 603 -282 b 747 -197 660 -256 706 -230 b 949 143 857 -109 920 10 b 956 206 955 164 956 186 b 791 384 956 297 906 363 b 704 393 762 390 733 393 b 498 336 632 393 563 374 b 481 325 490 331 481 325 l 444 465 b 442 485 442 472 442 485 b 609 880 442 485 589 746 b 619 996 616 919 619 958 b 613 1084 619 1027 618 1056 b 534 1387 599 1188 560 1286 b 482 1453 527 1417 517 1453 b 422 1407 456 1453 438 1428 b 305 1063 348 1305 312 1188 b 304 1002 304 1043 304 1022 b 338 654 304 886 323 769 b 343 629 338 645 341 636 b 144 356 278 537 206 451 b 23 144 101 288 53 220 b 0 20 7 107 0 63 b 82 -210 0 -69 30 -160 b 207 -288 112 -239 160 -271 b 410 -328 274 -312 340 -328 b 474 -324 431 -328 452 -327 l 491 -321 b 491 -341 491 -321 492 -334 b 402 -585 475 -428 454 -513 b 294 -668 374 -622 348 -664 b 271 -693 278 -670 271 -680 b 274 -708 271 -698 272 -703 b 302 -775 282 -730 292 -753 b 343 -805 311 -795 325 -805 z m 400 717 b 382 922 389 786 382 854 b 481 1286 382 1047 408 1169 b 507 1125 498 1233 507 1179 b 500 1040 507 1097 504 1068 b 400 717 481 927 455 818 z m 252 -135 b 196 -121 232 -134 215 -127 b 117 -69 158 -108 127 -94 b 111 -32 112 -58 111 -45 b 117 19 111 -16 114 1 b 130 56 118 27 127 52 b 324 337 186 156 253 246 l 384 416 l 395 384 b 416 291 406 348 416 291 b 350 213 416 291 376 239 b 243 -42 278 143 243 55 b 251 -117 243 -66 246 -91 b 252 -135 252 -122 252 -127 z m 563 -91 b 510 168 552 3 530 78 b 513 192 508 179 508 186 b 624 202 550 199 586 202 b 730 192 660 202 694 199 b 850 141 773 183 816 176 b 858 134 852 138 855 135 b 595 -121 801 19 716 -68 l 569 -131 z m 410 -160 b 311 -147 360 -160 311 -147 b 307 -98 311 -147 307 -127 b 314 -33 307 -79 308 -56 b 429 131 328 36 377 85 b 441 138 433 135 438 138 b 449 122 446 138 448 132 b 490 -131 462 37 484 -46 b 490 -153 491 -140 490 -153 b 410 -160 490 -153 452 -163 z',
        },
        cClef: {
            x_min: 0,
            x_max: 731,
            y_min: -543,
            y_max: 543,
            ha: 1086,
            o: 'm 131 -782 b 141 -755 138 -782 140 -773 b 147 -490 143 -667 145 -577 b 160 207 150 -258 153 -24 b 168 618 164 344 158 481 b 81 768 173 690 132 732 b 45 782 66 778 55 782 b 3 740 26 782 13 768 b 0 724 1 736 0 730 l 1 710 b 4 596 4 672 4 634 l 4 382 b 9 102 4 288 4 196 b 17 -301 13 -32 10 -166 l 17 -672 b 50 -736 17 -701 27 -720 b 109 -772 69 -749 91 -759 b 131 -782 120 -778 127 -782 z m 615 -770 b 881 -684 710 -770 801 -739 b 1020 -395 986 -612 1020 -510 b 1017 -334 1020 -374 1018 -354 b 769 -62 1007 -209 896 -75 b 746 -60 762 -60 755 -60 b 639 -73 710 -60 675 -69 b 524 -109 598 -79 560 -92 b 528 -36 526 -85 528 -60 b 527 -4 528 -26 528 -14 b 528 39 527 10 528 24 b 526 99 528 59 527 79 b 592 94 549 95 570 94 b 648 99 611 94 629 95 b 912 157 744 94 844 117 b 1053 377 1009 215 1053 284 b 1050 425 1053 393 1053 409 b 914 665 1037 521 986 602 b 717 753 855 717 791 753 b 626 734 688 753 658 747 l 462 665 b 347 500 374 628 347 580 b 350 449 347 484 348 468 b 392 419 353 428 367 416 b 492 438 425 425 459 428 b 541 498 524 448 541 468 b 540 514 541 503 541 508 b 537 546 537 524 537 536 b 573 639 537 580 550 611 b 606 657 582 649 593 657 l 609 657 b 716 622 647 652 684 647 b 834 372 801 556 834 469 b 831 323 834 356 832 338 b 743 187 825 266 795 217 b 710 176 732 180 720 176 b 694 179 704 176 700 177 b 527 223 638 193 582 206 b 495 229 516 228 505 229 b 454 220 481 229 468 225 b 395 189 432 213 415 200 b 363 180 384 186 374 181 b 348 168 356 179 348 176 b 340 161 343 167 340 164 b 347 150 340 157 343 154 b 356 147 348 148 353 147 b 364 92 361 130 363 111 b 369 -37 367 49 369 6 b 363 -154 369 -76 367 -115 b 357 -236 360 -183 357 -210 b 376 -264 357 -253 361 -259 b 456 -289 402 -284 429 -289 b 521 -282 478 -289 500 -285 b 549 -255 537 -279 546 -271 b 598 -177 556 -225 577 -202 b 622 -164 605 -168 613 -164 b 636 -167 626 -164 631 -166 b 749 -225 678 -177 714 -199 b 848 -405 814 -276 848 -337 b 824 -507 848 -436 840 -471 b 657 -657 792 -582 730 -625 b 608 -668 638 -664 622 -668 b 534 -602 572 -668 547 -645 b 513 -575 530 -589 523 -575 b 507 -576 510 -575 508 -575 b 478 -582 497 -580 488 -582 b 405 -570 454 -582 428 -570 b 389 -572 399 -570 395 -570 l 363 -572 b 321 -575 348 -572 333 -569 l 321 631 b 323 662 323 641 323 652 b 315 716 323 681 321 698 b 304 736 314 723 317 736 l 302 736 b 281 716 294 734 285 729 b 275 665 276 700 275 683 l 275 382 b 276 99 275 288 275 193 b 279 -170 278 10 276 -81 b 284 -399 282 -246 284 -323 b 282 -629 284 -475 282 -553 b 289 -721 282 -660 289 -690 b 300 -736 289 -727 291 -736 b 312 -724 307 -736 310 -730 b 321 -667 323 -706 321 -687 l 321 -632 l 328 -644 l 340 -657 b 510 -757 386 -707 445 -740 b 615 -770 546 -766 580 -770 z',
        },
        fClef: {
            x_min: 0,
            x_max: 776,
            y_min: -496,
            y_max: 216,
            ha: 712,
            o: 'm 402 -706 b 804 -405 592 -678 716 -566 b 876 -53 861 -298 874 -183 b 868 33 876 -32 873 1 b 560 311 845 217 723 311 b 524 310 549 311 536 311 b 131 134 373 297 239 242 b 17 -29 84 86 37 39 b 9 -89 12 -50 9 -71 b 112 -238 9 -154 43 -206 b 124 -243 117 -239 120 -242 b 186 -261 145 -255 166 -261 b 268 -228 215 -261 242 -249 b 351 -59 325 -181 351 -124 b 343 10 351 -36 348 -13 b 340 36 341 19 340 27 b 409 105 340 75 363 102 b 441 107 420 107 431 107 b 624 36 510 107 573 86 b 744 -200 688 -27 724 -109 b 747 -230 747 -210 747 -222 b 717 -323 747 -264 736 -292 b 608 -445 688 -370 654 -410 b 307 -541 518 -513 415 -541 l 213 -541 b 39 -521 154 -541 96 -539 b 0 -552 17 -514 0 -531 b 1 -564 0 -556 0 -560 b 17 -611 6 -580 10 -596 b 101 -694 35 -648 50 -684 b 288 -714 164 -707 225 -714 b 402 -706 325 -714 363 -711 z m 1018 92 b 1080 118 1041 91 1068 96 b 1117 219 1099 150 1117 180 b 1113 252 1117 229 1116 240 b 1045 288 1102 297 1068 276 b 1017 262 1028 297 1024 274 b 984 124 989 220 996 170 b 1008 91 979 108 986 91 z m 972 -281 b 1070 -148 1024 -279 1070 -210 b 1025 -105 1070 -105 1045 -112 b 989 -127 1004 -96 998 -114 b 949 -249 963 -164 963 -209 b 969 -281 943 -265 949 -281 z',
        },
        unpitchedPercussionClef1: {
            x_min: 0,
            x_max: 379.13761966945304,
            y_min: -250,
            y_max: 250,
            ha: 500,
            o: 'm 481 -360 b 507 -357 491 -360 500 -360 b 546 -295 541 -346 547 -325 b 536 79 543 -170 540 -46 b 523 311 533 157 534 235 b 475 359 518 340 508 359 b 425 360 459 359 442 360 b 400 359 416 360 409 360 b 337 294 348 353 340 347 l 337 -73 b 336 -264 337 -137 337 -200 b 343 -294 336 -274 338 -284 b 481 -360 359 -330 431 -360 z m 144 -341 b 207 -320 167 -341 189 -331 b 217 -301 215 -315 217 -308 b 210 -262 217 -289 210 -275 b 228 187 212 -112 209 37 b 228 287 228 220 229 253 b 174 353 228 336 222 343 b 120 359 157 357 138 359 b 48 357 96 359 72 356 b 17 323 29 357 19 344 b 7 120 16 255 9 187 b 6 -109 6 43 6 -33 l 6 -204 b 0 -251 6 -220 0 -235 b 3 -269 0 -256 0 -262 b 127 -340 24 -330 79 -328 b 144 -341 132 -341 138 -341 z',
        },
        '6stringTabClef': {
            x_min: 0,
            x_max: 438,
            y_min: -768,
            y_max: 767,
            ha: 1535,
            o: 'm 369 438 b 374 439 370 438 372 438 b 384 462 383 444 384 452 l 384 474 b 390 697 386 547 390 622 b 373 1002 390 799 390 901 l 533 1002 b 560 1001 541 1004 552 1001 b 573 1007 567 1001 572 1002 b 546 1050 579 1025 559 1038 b 536 1056 543 1053 539 1053 b 324 1104 472 1102 397 1104 b 72 1090 238 1104 154 1099 b 55 1093 66 1090 60 1092 b 37 1073 46 1093 37 1089 b 60 1045 37 1061 48 1051 b 203 1001 105 1022 151 1001 b 233 1004 213 1001 223 1002 b 246 1005 238 1004 243 1005 b 272 975 264 1005 272 996 l 272 965 b 258 596 264 842 265 719 b 315 474 253 540 272 504 l 343 455 b 369 438 351 448 357 438 z m 114 -320 b 127 -304 120 -320 124 -315 b 171 -174 141 -261 158 -219 b 222 -135 179 -147 196 -137 b 426 -122 289 -131 359 -128 b 498 -164 462 -120 482 -127 b 628 -301 521 -226 575 -264 b 631 -288 631 -295 631 -291 b 628 -269 631 -281 629 -276 b 569 -134 616 -220 589 -179 b 408 225 514 -14 462 107 b 314 357 384 274 351 318 b 278 380 298 372 288 379 b 251 351 268 380 261 372 b 4 -209 156 171 75 -17 b 0 -228 1 -215 0 -222 b 19 -258 0 -240 7 -249 b 102 -314 45 -279 75 -294 b 114 -320 107 -318 111 -320 z m 425 6 b 360 20 403 17 382 20 b 274 14 331 20 302 14 l 246 14 l 340 206 b 425 6 369 137 395 75 z m 245 -1106 b 281 -1104 256 -1106 269 -1106 b 511 -888 400 -1094 511 -1035 b 454 -688 511 -814 504 -744 b 448 -678 449 -685 448 -681 b 454 -667 448 -675 449 -671 b 504 -497 503 -619 507 -559 b 324 -288 500 -383 436 -308 b 295 -287 314 -287 304 -287 l 282 -287 b 115 -330 223 -287 168 -307 b 94 -366 102 -336 94 -348 l 94 -370 b 96 -435 96 -392 96 -413 b 73 -858 89 -576 71 -717 b 78 -919 73 -878 78 -899 b 72 -950 78 -930 76 -940 b 63 -992 66 -965 63 -978 b 66 -1015 63 -999 65 -1008 b 173 -1104 84 -1106 84 -1106 b 245 -1106 197 -1104 220 -1104 z m 161 -622 b 147 -618 156 -622 151 -621 b 140 -600 141 -612 140 -606 b 144 -564 140 -589 144 -575 b 143 -554 144 -560 144 -557 l 143 -546 b 220 -451 144 -467 143 -465 b 278 -445 239 -446 259 -444 b 418 -497 328 -445 376 -461 b 429 -516 426 -504 429 -510 b 415 -533 429 -521 423 -527 b 219 -608 357 -579 287 -590 b 215 -609 217 -608 216 -609 b 161 -622 197 -609 177 -622 z m 154 -953 b 130 -933 135 -953 130 -948 l 130 -865 l 128 -865 b 135 -788 130 -838 124 -808 b 203 -769 145 -769 180 -776 b 259 -762 223 -765 242 -762 b 441 -852 330 -762 386 -805 b 449 -867 446 -858 449 -863 b 436 -884 449 -874 444 -878 b 318 -942 402 -914 363 -935 b 154 -953 264 -950 209 -953 z',
        },
        timeSig0: {
            x_min: 20,
            x_max: 513,
            y_min: -358.159536277652,
            y_max: 359,
            ha: 717.159536277652,
            o: 'm 341 -516 b 420 -510 367 -516 395 -514 b 675 -338 533 -494 622 -448 b 737 -92 716 -256 734 -171 b 739 -35 739 -73 739 -53 b 680 305 739 86 720 207 b 400 517 622 449 537 517 b 337 514 380 517 359 517 b 289 507 321 511 305 513 b 91 317 192 477 127 412 b 29 9 50 212 29 108 b 217 -458 29 -157 88 -312 b 341 -516 251 -494 291 -518 z m 412 -452 b 359 -425 393 -452 376 -444 b 187 14 242 -301 179 -158 b 268 334 193 127 212 235 b 387 448 295 383 330 428 b 406 452 395 451 400 452 b 428 444 413 452 420 449 b 517 324 471 413 497 372 b 586 -29 560 222 586 86 b 556 -271 586 -112 585 -193 b 468 -422 536 -327 508 -377 b 412 -452 449 -442 431 -452 z',
        },
        timeSig1: {
            x_min: 20,
            x_max: 283,
            y_min: -364,
            y_max: 366,
            ha: 730,
            o: 'm 264 -524 b 357 -510 297 -524 325 -516 b 374 -490 369 -508 374 -501 b 380 -438 376 -472 380 -455 l 406 246 b 408 301 408 265 408 282 b 400 445 408 348 405 396 b 288 527 395 491 338 527 b 253 520 276 527 264 526 b 240 508 249 517 245 513 b 49 409 192 445 127 413 b 29 396 33 408 29 403 b 32 380 29 392 30 386 b 59 363 36 366 49 364 b 164 348 95 356 130 348 b 222 357 183 348 203 351 b 238 361 228 360 233 360 b 252 334 248 361 252 353 b 243 59 252 242 249 150 b 219 -490 229 -124 233 -307 b 264 -524 217 -516 232 -524 z',
        },
        timeSig2: {
            x_min: 20,
            x_max: 660.4636303241031,
            y_min: -378.7201231608281,
            y_max: 382,
            ha: 760.720123160828,
            o: 'm 99 -543 b 130 -533 111 -550 121 -540 b 255 -448 168 -501 213 -475 b 338 -425 282 -431 310 -425 b 392 -431 356 -425 374 -426 b 485 -462 423 -438 454 -451 b 648 -497 540 -482 595 -497 b 834 -441 711 -497 773 -480 b 950 -242 906 -395 958 -334 b 942 -210 950 -230 950 -215 b 912 -220 932 -204 920 -213 b 861 -264 894 -235 877 -248 b 775 -317 835 -289 808 -305 b 675 -334 742 -328 708 -334 b 510 -295 619 -334 563 -318 b 372 -264 465 -278 420 -264 b 305 -272 350 -264 328 -266 b 331 -242 318 -256 324 -249 b 490 -73 386 -187 438 -131 b 675 340 595 43 664 180 b 677 369 677 350 677 360 b 556 536 677 461 638 508 b 468 550 526 546 497 550 b 297 508 409 550 353 533 b 111 354 220 475 168 412 b 29 197 65 308 29 261 b 32 164 29 187 29 176 b 29 140 33 157 29 147 b 43 125 29 132 32 125 b 73 147 55 125 65 138 b 86 163 79 153 82 158 b 238 320 134 219 183 272 b 425 389 292 367 360 389 b 575 341 480 389 531 373 b 606 298 590 330 606 317 b 600 278 606 292 603 285 b 501 107 576 217 544 158 b 304 -104 439 33 372 -35 b 111 -356 230 -180 167 -265 b 84 -446 92 -386 84 -415 b 86 -481 84 -458 85 -469 b 88 -514 88 -491 88 -503 b 99 -543 89 -526 91 -537 z',
        },
        timeSig3: {
            x_min: 19.824321427094187,
            x_max: 540,
            y_min: -392,
            y_max: 392,
            ha: 784,
            o: 'm 216 -540 b 354 -564 264 -556 310 -564 b 605 -465 445 -564 530 -530 b 729 -161 697 -383 729 -275 b 724 -82 729 -135 727 -108 b 589 95 716 -1 670 62 b 523 114 567 102 546 108 b 750 418 606 213 677 315 b 778 503 769 444 778 472 b 773 540 778 514 776 527 b 750 564 769 557 762 564 b 736 562 746 564 742 563 b 641 552 704 553 672 552 b 402 554 562 552 481 554 l 346 554 b 84 546 258 554 170 554 b 36 501 55 543 40 531 b 29 412 30 472 32 442 b 52 384 27 393 32 384 l 56 384 b 210 392 107 389 158 392 l 602 392 b 354 108 523 285 445 192 b 246 -65 300 58 246 12 b 252 -108 246 -78 248 -92 l 252 -111 b 264 -141 251 -122 251 -135 b 291 -132 274 -145 284 -140 b 425 -72 328 -95 377 -84 b 475 -65 442 -68 459 -65 b 592 -108 517 -65 557 -79 b 645 -179 615 -125 645 -147 b 642 -194 645 -184 644 -189 b 485 -376 616 -278 569 -344 b 361 -399 444 -392 402 -399 b 151 -340 289 -399 219 -376 b 88 -275 122 -323 98 -310 b 71 -249 86 -268 85 -249 b 63 -251 68 -249 66 -249 b 36 -288 48 -255 36 -266 b 55 -423 33 -336 45 -377 b 101 -482 60 -448 78 -468 b 216 -540 138 -504 174 -526 z',
        },
        timeSig4: {
            x_min: 20,
            x_max: 633.0785282750762,
            y_min: -489.59088556716864,
            y_max: 491.18559127100053,
            ha: 980.7764768381692,
            o: 'm 608 -704 b 641 -684 622 -708 634 -696 b 667 -602 660 -660 662 -631 b 685 -190 683 -465 680 -327 l 685 -176 b 831 -127 736 -166 783 -148 b 912 0 901 -94 913 -76 b 886 53 912 36 904 52 b 848 40 877 53 864 49 l 838 36 b 687 -13 789 14 739 -3 b 681 177 687 50 684 114 b 672 338 678 230 677 285 b 654 373 671 350 672 373 b 622 340 636 373 624 361 b 615 262 621 314 613 288 b 619 -22 616 167 619 72 b 569 -22 602 -23 585 -23 b 305 -3 481 -16 395 -1 b 210 -9 274 -3 242 -4 b 301 163 242 52 268 108 b 513 552 377 288 459 412 b 536 652 526 585 536 618 b 533 683 536 662 534 672 b 520 707 531 691 531 707 b 487 693 508 708 494 704 b 474 668 482 684 477 677 b 384 490 454 603 418 547 b 253 281 343 419 295 351 b 73 -13 194 181 145 78 b 29 -108 50 -42 29 -72 b 37 -147 29 -121 32 -134 b 50 -186 43 -160 50 -173 b 68 -216 52 -207 56 -215 b 92 -207 73 -216 82 -213 b 288 -166 156 -180 220 -166 b 556 -186 377 -166 467 -180 b 586 -189 566 -187 576 -187 b 616 -186 596 -189 606 -189 b 606 -432 613 -268 612 -350 b 596 -625 603 -495 596 -559 b 598 -670 596 -641 596 -655 b 608 -704 598 -683 596 -700 z',
        },
        timeSig5: {
            x_min: 19.663871085403297,
            x_max: 583,
            y_min: -389,
            y_max: 389,
            ha: 778,
            o: 'm 132 -536 b 249 -560 168 -553 209 -559 b 507 -462 351 -560 454 -514 b 677 -183 588 -384 642 -289 b 694 -85 688 -150 694 -117 b 540 138 694 12 642 94 b 422 173 501 154 462 167 b 400 187 408 174 400 177 b 405 202 400 190 402 196 b 428 284 416 228 426 255 b 469 312 431 307 442 312 b 757 372 569 312 662 343 b 840 490 821 392 840 432 b 812 560 840 540 834 560 b 763 546 801 560 785 556 b 757 543 762 546 759 544 b 465 484 665 505 570 484 b 396 484 452 484 425 487 b 353 454 377 482 366 474 b 281 300 323 405 304 351 b 245 164 262 255 245 212 b 246 144 245 158 246 151 b 233 63 249 115 243 89 b 225 35 228 50 225 40 b 264 14 225 22 236 19 b 445 -26 325 7 387 0 b 569 -151 501 -52 547 -89 b 575 -180 573 -161 575 -170 b 527 -275 575 -217 547 -245 b 347 -367 484 -334 419 -367 b 261 -351 318 -367 289 -363 b 95 -300 206 -333 154 -307 b 55 -321 73 -297 65 -302 b 29 -468 29 -367 40 -419 b 56 -505 26 -482 36 -500 b 132 -536 82 -514 108 -524 z',
        },
        timeSig6: {
            x_min: 20,
            x_max: 565,
            y_min: -363,
            y_max: 363,
            ha: 726,
            o: 'm 390 -518 b 621 -458 469 -507 549 -494 b 814 -134 753 -390 814 -281 b 652 59 814 -16 750 58 b 580 48 629 59 606 55 b 233 -334 392 -9 276 -138 b 115 -228 181 -314 143 -278 b 98 -160 104 -206 98 -183 b 107 -109 98 -144 101 -127 b 167 37 124 -59 145 -12 b 508 340 236 189 347 292 b 575 353 530 347 553 353 b 648 327 600 353 625 346 b 665 320 654 321 661 320 b 687 336 674 320 681 325 b 703 405 697 359 703 382 b 684 472 703 429 697 451 b 593 523 664 504 631 521 b 576 521 588 523 582 523 b 297 403 472 508 380 465 b 115 177 217 344 164 264 b 29 -121 60 82 29 -17 b 53 -278 29 -173 36 -225 b 226 -497 82 -374 131 -454 b 347 -523 265 -514 305 -523 b 390 -518 361 -523 376 -521 z m 351 -357 b 312 -351 337 -356 320 -363 b 325 -315 304 -340 320 -327 b 543 -120 373 -222 448 -158 b 622 -104 570 -108 596 -102 b 717 -132 655 -104 687 -112 b 740 -167 732 -143 740 -153 b 730 -196 740 -176 737 -184 b 563 -321 690 -258 634 -300 b 359 -357 497 -341 428 -354 z',
        },
        timeSig7: {
            x_min: 20.3617407597707,
            x_max: 592,
            y_min: -345,
            y_max: 345,
            ha: 690,
            o: 'm 253 -497 b 318 -485 276 -497 297 -487 b 366 -441 348 -482 360 -468 b 487 -104 390 -323 433 -210 b 835 403 580 82 701 246 b 852 436 847 416 852 428 b 815 467 852 451 840 461 b 762 474 798 471 779 474 b 674 445 732 474 701 465 b 603 410 652 431 628 420 b 383 360 533 379 459 360 b 200 435 315 360 249 382 b 88 494 168 469 131 485 b 66 497 81 495 73 497 b 33 484 52 497 39 492 b 50 436 22 469 39 451 b 295 310 114 360 199 324 b 406 301 331 304 369 301 b 593 324 468 301 530 308 b 585 307 589 314 588 310 b 265 -249 451 137 338 -46 b 207 -442 242 -312 223 -377 b 204 -462 206 -449 204 -456 b 253 -497 204 -487 220 -497 z',
        },
        timeSig8: {
            x_min: 20,
            x_max: 504.15101530718516,
            y_min: -428,
            y_max: 428,
            ha: 856,
            o: 'm 265 -616 b 289 -615 274 -616 281 -616 b 710 -271 492 -592 657 -485 b 726 -148 721 -229 727 -187 b 585 108 726 -48 687 42 b 572 127 576 114 573 120 b 576 144 572 132 575 138 b 598 301 590 196 598 249 b 586 413 598 338 593 376 b 356 616 559 531 467 616 b 233 582 317 616 275 606 b 29 233 101 505 29 384 b 104 9 29 153 46 72 b 189 -48 127 -16 160 -27 b 92 -158 141 -73 114 -114 b 37 -343 63 -217 50 -279 b 33 -390 35 -359 33 -374 b 265 -616 33 -524 148 -616 z m 258 105 b 124 148 215 105 167 117 b 96 196 105 163 96 177 b 99 217 96 202 96 209 b 197 384 120 281 151 337 b 350 451 242 429 297 451 b 516 364 412 451 472 422 b 530 331 523 354 530 343 l 530 327 l 530 320 b 468 151 520 261 507 200 b 419 122 455 135 442 125 b 258 105 370 117 320 105 z m 328 -438 b 158 -276 233 -436 160 -359 b 166 -239 158 -264 161 -252 b 230 -157 176 -203 202 -179 b 367 -72 274 -125 320 -98 b 448 -49 396 -56 423 -49 b 562 -118 491 -49 528 -72 b 611 -251 590 -157 611 -199 b 569 -341 611 -288 595 -318 b 328 -438 500 -402 416 -432 z',
        },
        timeSig9: {
            x_min: 20,
            x_max: 494,
            y_min: -421,
            y_max: 421,
            ha: 842,
            o: 'm 235 -606 b 361 -564 275 -606 318 -593 b 619 -229 487 -482 566 -366 b 706 127 664 -114 694 4 b 711 233 708 163 711 197 b 700 346 711 271 708 308 b 389 606 658 517 530 606 b 351 605 376 606 364 606 b 56 272 171 586 56 441 b 96 98 56 216 69 156 b 334 -53 144 -3 238 -53 b 544 36 408 -53 484 -24 b 652 176 586 78 622 124 b 631 71 645 141 639 105 b 467 -302 599 -63 562 -196 b 271 -442 412 -364 354 -422 b 225 -448 255 -446 239 -448 b 95 -305 148 -448 98 -395 b 89 -255 95 -288 94 -271 b 73 -233 86 -246 85 -233 b 52 -248 65 -233 56 -239 b 29 -317 42 -271 30 -291 b 49 -448 29 -361 40 -405 b 235 -606 69 -541 144 -606 z m 340 104 b 144 209 264 108 194 141 b 127 258 132 225 127 240 b 137 297 127 271 130 284 b 366 449 184 396 269 449 b 517 408 415 449 467 436 b 595 348 546 392 572 372 b 616 305 608 336 616 321 b 609 281 616 298 613 289 b 340 104 557 184 477 104 z',
        },
        timeSigCommon: {
            x_min: 20,
            x_max: 585,
            y_min: -298,
            y_max: 294.49658092772603,
            ha: 592.496580927726,
            o: 'm 444 -405 b 829 -45 626 -346 740 -207 b 842 26 842 -23 842 1 b 821 58 842 39 841 58 b 795 40 811 58 802 48 b 765 3 785 29 773 16 b 469 -223 690 -104 596 -183 b 354 -242 431 -235 392 -242 b 180 -177 292 -242 235 -223 b 135 -99 154 -157 140 -131 b 132 -59 134 -85 132 -72 b 141 7 132 -37 135 -16 b 449 274 189 160 297 243 b 477 278 459 276 468 276 b 546 203 517 278 539 253 b 517 157 550 177 533 166 b 485 143 507 153 497 143 l 482 143 b 467 148 478 143 472 144 b 374 183 438 170 406 181 b 264 118 333 183 292 161 b 238 48 246 92 238 69 b 261 -9 238 29 245 10 b 383 -73 287 -39 337 -73 b 412 -68 392 -73 402 -72 b 631 164 526 -27 586 59 b 649 252 644 193 649 222 b 636 328 649 278 645 304 b 504 423 615 400 579 429 b 242 318 408 415 317 387 b 29 -158 104 190 29 33 b 30 -176 29 -164 29 -170 b 115 -364 42 -246 52 -315 b 307 -429 177 -410 240 -429 b 444 -405 351 -429 397 -420 z',
        },
        timeSigCutCommon: {
            x_min: 20,
            x_max: 695,
            y_min: -687.0379164869064,
            y_max: 687,
            ha: 1374.0379164869064,
            o: 'm 564 -989 b 595 -945 585 -991 589 -963 l 599 -922 b 605 -628 600 -824 603 -726 l 609 -399 b 878 -251 706 -363 798 -320 b 996 -85 932 -204 976 -153 b 1001 -63 998 -78 1001 -71 b 989 -46 1001 -56 998 -49 b 978 -43 985 -45 982 -43 b 950 -59 968 -43 959 -49 b 733 -216 894 -132 815 -177 b 611 -259 694 -235 652 -249 b 616 -20 612 -179 615 -99 b 680 29 642 -7 665 9 b 698 43 685 36 690 40 b 870 251 792 82 840 160 b 877 294 874 265 877 279 b 818 410 877 338 855 382 b 683 458 779 442 730 448 b 625 468 664 462 644 465 l 625 514 b 638 958 626 662 636 811 b 626 989 638 979 635 989 b 603 981 621 989 613 986 b 422 840 534 945 481 888 b 412 805 412 832 413 818 b 426 713 410 773 420 743 b 445 678 429 690 435 678 b 474 691 452 678 461 683 b 563 755 503 710 530 732 b 564 724 564 740 564 733 b 559 469 563 639 560 554 b 462 454 526 469 494 464 b 112 143 302 399 199 281 b 33 -94 66 71 45 -10 b 29 -148 30 -112 29 -131 b 105 -351 29 -223 52 -291 b 359 -455 171 -426 258 -451 b 517 -431 409 -451 464 -446 l 539 -422 l 539 -477 b 533 -739 536 -563 539 -651 b 530 -824 531 -768 530 -795 b 546 -948 530 -865 533 -907 b 564 -989 552 -962 543 -989 z m 410 -288 b 193 -197 328 -288 253 -264 b 141 -60 160 -161 141 -108 b 157 6 141 -35 147 -12 b 259 158 189 58 217 112 b 438 291 311 215 364 266 b 528 305 468 301 498 305 b 554 304 537 305 546 304 b 553 212 554 274 554 242 b 426 115 498 199 446 164 b 416 68 419 99 416 84 b 425 12 416 49 420 30 b 474 -39 432 -17 448 -32 b 513 -43 487 -42 498 -43 b 547 -40 524 -43 536 -42 l 543 -272 b 461 -285 516 -278 488 -281 b 410 -288 444 -287 426 -288 z m 694 197 b 668 203 685 197 677 199 b 621 216 654 210 638 215 b 622 294 622 242 622 268 b 706 268 651 287 678 278 b 746 235 721 261 734 249 b 752 222 749 230 752 226 b 743 213 752 219 749 215 b 694 197 727 206 711 197 z',
        },
        timeSigPlus: {
            x_min: 0,
            x_max: 661,
            y_min: -358,
            y_max: 358,
            ha: 716,
            o: 'm 605 -516 b 629 -490 624 -516 629 -507 b 628 -475 629 -485 628 -481 b 613 -131 624 -405 616 -174 b 612 -96 612 -114 612 -96 l 647 -98 b 897 -115 730 -99 814 -109 b 940 -89 919 -117 935 -109 b 952 -24 946 -69 952 -46 b 948 9 952 -14 950 -3 b 912 39 942 26 933 37 b 609 60 822 48 609 60 b 616 392 609 60 608 291 b 567 488 619 436 605 467 b 511 516 550 498 531 514 b 498 511 507 516 503 514 b 478 446 475 501 480 469 b 467 150 474 348 469 249 b 465 59 465 121 465 59 l 372 49 b 73 14 272 36 173 24 b 49 13 65 13 56 13 b 0 -33 9 13 0 6 b 60 -141 0 -117 6 -140 b 112 -135 73 -141 91 -140 b 413 -102 213 -125 314 -112 b 464 -98 441 -99 464 -98 l 464 -145 b 477 -456 464 -249 468 -353 b 526 -510 478 -488 491 -507 b 589 -513 546 -511 569 -510 b 605 -516 595 -514 600 -516 z',
        },
        timeSigPlusSmall: {
            x_min: 0,
            x_max: 418,
            y_min: -197,
            y_max: 199,
            ha: 396,
            o: 'm 301 -284 b 330 -238 320 -284 324 -255 b 348 -46 350 -176 341 -111 b 374 -20 351 -27 356 -23 b 481 -17 409 -16 445 -17 b 566 -9 510 -17 537 -16 b 602 3 579 -7 602 -16 b 566 29 602 19 582 24 b 526 33 553 32 539 33 b 384 39 478 36 432 39 b 356 62 363 39 356 42 l 356 68 b 359 177 359 104 359 141 l 359 251 b 341 287 359 264 361 285 b 311 255 324 287 314 272 b 310 228 311 246 310 236 l 301 69 b 275 39 301 49 295 39 l 271 39 b 210 40 251 40 230 40 b 167 39 196 40 181 40 b 89 40 141 37 115 40 b 24 30 68 40 46 37 b 0 17 17 27 0 30 l 0 13 b 27 -17 3 0 7 -13 b 91 -22 49 -22 71 -22 b 153 -22 115 -22 137 -20 l 275 -22 b 295 -40 289 -22 295 -27 l 295 -48 b 288 -235 288 -109 287 -171 b 287 -264 288 -243 287 -253 b 301 -284 287 -275 289 -284 z',
        },
        timeSigMinus: {
            x_min: 0,
            x_max: 662,
            y_min: -54,
            y_max: 55,
            ha: 109,
            o: 'm 39 -78 b 49 -76 42 -78 45 -76 b 452 -75 94 -75 272 -75 b 861 -76 632 -75 814 -76 b 953 -20 927 -79 953 -66 b 948 27 953 -7 950 9 b 946 37 948 30 948 35 b 896 79 940 63 929 79 b 471 78 827 78 648 78 l 42 78 b 0 37 14 78 0 69 b 23 -66 0 0 17 -32 b 39 -78 24 -75 32 -76 z',
        },
        timeSigParensRight: {
            x_min: 0,
            x_max: 274.26483738379414,
            y_min: -722.6326530612245,
            y_max: 725,
            ha: 1447.6326530612246,
            o: 'm 37 -1038 b 69 -1031 48 -1044 59 -1038 b 88 -1015 76 -1027 82 -1021 b 164 -886 120 -976 147 -933 b 333 -351 233 -711 292 -534 b 395 118 366 -204 399 -59 b 389 245 392 144 392 194 b 120 996 369 521 265 766 b 68 1044 99 1030 84 1044 b 19 988 50 1044 36 1024 b 0 922 7 965 0 945 b 20 858 0 901 6 881 b 259 215 141 660 236 449 b 271 -1 266 143 271 71 b 252 -239 271 -82 265 -161 b 148 -667 228 -384 183 -524 b 39 -1009 120 -785 66 -893 b 33 -1031 37 -1017 33 -1024 b 37 -1038 33 -1034 35 -1037 z',
        },
        timeSigParensRightSmall: {
            x_min: 0,
            x_max: 154.4025307335204,
            y_min: -422,
            y_max: 422,
            ha: 844,
            o: 'm 43 -608 b 60 -598 48 -608 53 -605 b 117 -511 82 -572 102 -543 b 222 23 193 -350 219 -177 b 213 166 225 55 216 109 b 115 531 206 294 174 416 b 45 603 99 562 76 588 b 30 608 39 606 35 608 b 10 598 23 608 17 603 b 0 546 3 590 0 570 b 23 451 0 507 9 458 b 102 351 66 429 84 390 b 167 42 150 252 167 148 b 163 -49 167 12 166 -19 b 35 -449 151 -192 121 -330 b 14 -504 22 -467 14 -485 b 17 -527 14 -511 16 -520 l 30 -590 b 43 -608 33 -603 37 -608 z',
        },
        timeSigParensLeft: {
            x_min: 0.5555555555555556,
            x_max: 399.6216117372966,
            y_min: -728,
            y_max: 728,
            ha: 1456,
            o: 'm 562 -1048 b 573 -1043 566 -1048 570 -1047 b 553 -988 582 -1025 564 -1004 b 472 -884 527 -952 497 -920 b 210 -354 366 -717 275 -541 b 148 -6 170 -240 148 -124 b 160 148 148 45 153 96 b 315 678 189 331 242 508 b 431 901 350 755 380 834 b 459 950 451 926 461 939 b 435 995 459 962 451 972 b 364 1048 405 1034 383 1048 b 305 996 343 1048 325 1028 b 127 624 226 881 174 753 b 1 30 56 432 9 235 b 1 -32 1 9 0 -12 b 180 -629 13 -245 92 -438 b 363 -936 230 -739 298 -835 b 526 -1041 402 -995 448 -1041 b 562 -1048 537 -1040 552 -1048 z',
        },
        timeSigParensLeftSmall: {
            x_min: 0,
            x_max: 173.45497224367904,
            y_min: -405,
            y_max: 404,
            ha: 809,
            o: 'm 197 -583 b 222 -553 212 -582 219 -566 b 229 -497 226 -534 229 -516 b 213 -425 229 -472 225 -448 b 102 -177 173 -344 132 -262 b 62 30 78 -111 58 -42 b 91 183 66 82 75 134 b 215 426 118 271 156 356 b 249 552 246 465 252 505 b 230 582 249 563 246 582 b 197 563 219 582 206 576 b 71 356 144 500 105 429 b 0 50 26 259 3 158 b 13 -112 4 -3 7 -58 b 176 -559 29 -275 105 -416 b 196 -583 180 -569 186 -583 z',
        },
        noteheadDoubleWhole: {
            x_min: -0.4444444444444444,
            x_max: 614.1875,
            y_min: -223.03296670127517,
            y_max: 223,
            ha: 446.0329667012752,
            o: 'm 35 -321 b 62 -266 58 -318 58 -288 l 62 -194 b 63 50 62 -114 63 -32 b 60 189 63 96 63 143 b 43 300 59 226 60 265 b 29 321 40 308 39 321 l 26 321 b 0 292 13 318 0 310 b 0 248 0 278 -1 262 b 6 147 4 215 6 181 b 4 48 6 114 4 81 b 6 0 4 32 6 16 b 7 -36 7 -12 7 -24 l 7 -52 b 6 -156 7 -86 6 -121 b 19 -275 6 -196 9 -236 b 35 -321 23 -291 16 -323 z m 847 -314 b 871 -288 860 -315 867 -300 b 884 -187 881 -255 886 -222 b 876 115 878 -86 876 14 b 877 255 876 161 876 209 b 868 291 877 268 873 279 b 855 304 867 301 863 304 b 844 301 852 304 848 304 b 822 265 825 292 822 278 b 824 251 822 259 822 255 b 822 170 822 225 822 197 l 822 -20 b 835 -284 827 -86 825 -186 b 847 -314 837 -295 835 -311 z m 757 -291 b 793 -171 796 -255 792 -212 b 795 -49 795 -131 795 -91 b 786 207 795 36 791 121 b 779 240 786 217 783 229 b 766 258 776 246 776 258 b 762 256 765 258 763 256 b 739 236 752 253 740 252 b 733 177 737 216 732 197 b 737 20 737 125 739 73 l 737 -107 b 740 -202 737 -138 739 -170 b 757 -291 740 -230 743 -261 z m 128 -261 b 144 -251 135 -264 141 -256 b 158 -203 156 -236 157 -220 b 161 -137 161 -181 161 -158 b 157 30 161 -81 157 -26 b 158 76 157 45 157 60 l 158 101 b 156 225 158 141 158 183 b 137 253 156 235 154 253 l 134 253 b 109 222 120 251 109 242 b 104 91 108 179 104 134 b 108 -58 104 42 109 -9 b 107 -105 108 -73 108 -89 b 105 -127 107 -112 107 -120 b 118 -245 105 -167 114 -204 b 128 -261 118 -252 121 -259 z m 488 -242 b 693 -79 595 -249 685 -166 l 693 -55 b 690 0 693 -36 691 -17 b 540 187 684 84 621 164 b 449 200 508 196 480 200 b 210 104 363 200 282 163 b 186 56 196 92 186 76 b 207 -82 186 9 192 -37 b 300 -204 225 -132 248 -181 b 488 -242 356 -229 415 -240 z m 490 -88 b 449 -86 477 -88 464 -88 b 287 -56 399 -85 341 -78 b 258 -33 275 -52 258 -48 b 282 -7 258 -20 272 -13 b 458 43 340 23 399 43 b 580 14 497 43 537 35 b 618 -20 606 1 619 -9 b 592 -58 618 -30 609 -42 b 490 -88 562 -82 528 -88 z',
        },
        noteheadWhole: {
            x_min: 0,
            x_max: 380.16649762501584,
            y_min: -186.17102907059297,
            y_max: 165,
            ha: 351.17102907059297,
            o: 'm 547 40 b 223 -268 543 -151 367 -259 b 102 -233 180 -271 143 -248 l 62 -216 b 0 -127 22 -197 0 -166 b 6 -91 0 -115 1 -104 b 122 141 33 -9 69 71 b 327 238 170 204 249 238 b 514 158 397 238 467 212 b 547 40 544 125 549 84 z m 248 -107 b 384 -63 295 -102 341 -88 b 426 -23 402 -53 415 -40 b 435 3 432 -14 435 -6 b 413 32 435 14 428 24 b 301 73 376 49 343 73 b 272 69 291 73 282 72 b 121 -35 207 53 157 20 b 111 -58 117 -42 111 -50 b 125 -75 111 -65 115 -71 b 248 -107 164 -89 202 -107 z',
        },
        noteheadHalf: {
            x_min: 0,
            x_max: 334,
            y_min: -174,
            y_max: 175,
            ha: 349,
            o: 'm 480 56 b 167 -251 478 -115 331 -251 b 94 -242 143 -251 118 -248 b 9 -141 43 -229 20 -192 b 0 -68 3 -115 0 -91 b 284 249 0 95 127 200 b 304 252 289 251 297 252 b 481 78 374 252 481 170 b 480 56 481 71 481 63 z m 213 -102 b 399 6 274 -81 341 -48 b 402 17 400 7 402 13 b 399 27 402 22 400 26 b 311 94 373 53 353 88 b 292 95 305 95 300 95 b 130 27 230 95 181 55 b 69 -62 98 9 62 -29 b 161 -98 76 -98 128 -91 b 213 -102 174 -101 186 -101 z',
        },
        noteheadBlack: {
            x_min: 0,
            x_max: 334.04644433966797,
            y_min: -164,
            y_max: 164,
            ha: 328,
            o: 'm 112 -233 b 141 -236 122 -235 131 -236 b 481 104 279 -236 485 -48 b 403 222 477 141 478 192 b 334 236 382 232 359 236 b 1 -59 180 236 13 59 b 0 -85 1 -68 0 -76 b 112 -233 0 -157 32 -215 z',
        },
        noteheadXDoubleWhole: {
            x_min: 0,
            x_max: 730,
            y_min: -266,
            y_max: 267,
            ha: 533,
            o: 'm 1018 -373 b 1032 -361 1025 -376 1028 -367 b 1051 -287 1047 -338 1051 -314 b 1050 -252 1051 -276 1051 -264 b 1030 186 1031 -107 1037 40 b 1031 266 1028 213 1031 239 b 1018 363 1031 300 1028 331 b 1005 384 1015 373 1017 384 l 1004 384 b 984 363 992 384 986 373 b 982 343 982 356 982 348 b 981 235 982 307 981 271 b 996 -285 981 60 986 -112 b 1009 -360 998 -311 1005 -336 b 1018 -373 1011 -364 1014 -373 z m 16 -383 b 49 -328 39 -367 48 -350 b 69 56 58 -202 62 -73 b 75 212 72 107 72 160 b 78 278 76 233 78 255 b 59 382 78 312 73 347 b 29 328 33 372 29 350 b 13 -29 29 209 23 88 b 3 -222 7 -95 10 -157 b 0 -265 1 -236 0 -252 b 16 -383 0 -304 6 -343 z m 923 -314 b 955 -240 948 -289 952 -265 b 965 -65 962 -181 965 -125 b 963 0 965 -45 965 -22 b 962 111 960 37 962 73 b 953 240 962 154 960 197 b 939 275 952 253 952 275 b 913 239 924 274 913 258 b 913 173 914 217 913 194 b 914 135 913 160 913 147 b 920 27 919 98 920 63 b 909 -128 920 -26 917 -78 b 906 -179 906 -147 906 -163 b 923 -314 906 -223 913 -266 z m 121 -301 b 143 -272 134 -301 138 -284 b 147 -255 145 -268 145 -261 b 173 160 161 -117 166 22 b 173 233 173 184 174 209 b 157 264 171 243 171 264 b 137 235 143 264 138 249 b 132 207 135 226 132 216 b 121 43 128 153 124 96 b 105 -186 117 -36 105 -111 b 111 -269 105 -215 107 -242 b 121 -301 114 -281 104 -300 z m 210 -238 b 376 -193 274 -239 327 -226 b 471 -134 406 -173 439 -154 b 534 -94 491 -120 513 -107 b 671 -192 579 -127 624 -161 b 733 -226 691 -204 708 -228 b 746 -225 737 -228 742 -226 b 845 -204 782 -226 814 -213 b 868 -194 854 -203 865 -203 b 852 -173 871 -183 860 -179 b 661 -40 789 -128 724 -84 b 642 -27 654 -36 648 -32 b 861 114 716 17 791 63 b 886 132 870 120 886 121 l 886 137 b 852 164 883 151 867 161 b 776 176 827 170 801 176 b 685 145 744 176 714 168 b 530 45 638 107 583 76 b 403 132 487 73 444 101 b 279 176 364 161 324 171 b 223 160 259 176 229 176 b 258 115 215 141 242 127 b 431 -17 314 71 372 26 b 173 -196 341 -73 253 -130 b 157 -209 168 -200 157 -203 b 158 -215 157 -212 157 -215 b 183 -236 166 -223 168 -235 b 210 -238 194 -236 206 -239 z m 768 -207 b 533 -40 687 -150 609 -94 b 321 -173 462 -85 392 -130 b 261 -194 304 -184 287 -196 b 239 -193 253 -196 246 -194 b 387 -95 294 -157 340 -125 b 505 -20 426 -71 465 -45 l 484 -4 b 353 89 441 27 396 56 b 320 115 341 96 330 107 b 297 141 311 124 297 132 b 300 148 297 144 298 145 b 336 135 311 164 324 143 b 528 -4 400 89 464 42 l 723 121 b 770 140 737 131 753 138 b 792 132 779 140 789 141 b 778 115 795 122 783 120 b 586 -6 714 75 651 35 b 557 -24 576 -13 567 -19 b 726 -147 613 -66 670 -109 b 768 -207 744 -161 765 -173 z',
        },
        noteheadXWhole: {
            x_min: 0,
            x_max: 506,
            y_min: -143.0823320899293,
            y_max: 144,
            ha: 287.0823320899293,
            o: 'm 53 -206 b 219 -163 117 -207 170 -196 b 314 -102 249 -141 282 -122 b 377 -63 334 -89 356 -76 b 514 -161 422 -96 468 -128 b 576 -196 534 -174 552 -196 b 589 -193 580 -196 585 -196 b 688 -174 625 -194 657 -181 b 711 -158 698 -171 711 -173 b 696 -143 711 -151 701 -147 b 503 -9 632 -98 567 -52 l 485 4 b 704 145 559 49 634 95 b 729 164 711 150 729 151 l 729 168 b 696 196 726 183 710 193 b 621 207 671 202 645 207 b 528 177 589 207 557 200 b 373 76 480 140 426 108 b 246 164 330 104 287 132 b 122 206 207 193 167 203 b 66 192 102 207 72 207 b 99 147 58 173 85 158 b 274 14 157 102 215 58 b 16 -164 184 -42 96 -98 b 0 -179 12 -168 0 -170 b 1 -183 0 -180 0 -183 b 26 -204 6 -193 12 -204 b 53 -206 37 -206 49 -206 z m 611 -177 b 376 -9 530 -118 452 -63 l 164 -143 b 104 -164 147 -154 130 -164 b 82 -161 96 -164 89 -164 b 230 -65 137 -125 183 -95 l 347 12 b 327 26 341 16 334 22 l 196 121 b 163 147 184 128 173 137 b 140 173 154 154 140 163 b 143 180 140 176 141 177 b 179 166 154 194 167 174 l 372 27 l 566 153 b 613 171 580 161 596 170 b 635 160 624 171 635 174 b 621 147 635 153 626 150 l 429 24 b 400 6 419 19 409 13 b 569 -117 456 -35 513 -75 b 611 -177 588 -130 608 -143 z',
        },
        noteheadXHalf: {
            x_min: 0,
            x_max: 421,
            y_min: -145.51844828189743,
            y_max: 151,
            ha: 296.51844828189746,
            o: 'm 490 -209 b 539 -207 505 -207 521 -207 b 606 -209 560 -207 583 -209 b 598 -196 602 -203 600 -199 l 406 -19 l 540 130 b 547 144 546 135 547 140 b 536 156 547 148 543 153 b 488 192 518 166 503 176 b 416 217 471 209 444 217 b 323 180 380 217 344 204 l 264 115 b 239 138 256 122 248 131 b 33 197 180 196 108 200 b 3 186 23 197 6 193 b 19 154 -1 174 10 163 b 171 12 69 107 120 59 b 19 -157 120 -45 69 -101 b 0 -177 14 -163 0 -166 b 1 -181 0 -179 0 -180 b 39 -203 9 -197 22 -203 l 186 -203 b 197 -202 190 -202 193 -200 l 213 -202 b 262 -180 228 -202 246 -199 l 314 -122 b 490 -209 363 -170 412 -216 z m 435 -148 b 291 -30 379 -112 337 -69 l 213 -118 b 190 -137 207 -125 202 -137 b 145 -111 173 -130 154 -127 b 160 -79 137 -98 151 -88 b 238 16 184 -48 212 -16 b 141 99 204 43 173 72 l 124 117 b 115 132 121 121 115 127 b 118 137 115 134 117 137 b 141 132 127 147 135 138 l 253 36 b 347 150 285 75 315 112 b 370 164 354 160 363 163 b 403 145 382 164 393 156 b 416 127 412 140 416 132 b 405 102 416 118 412 111 l 307 -10 b 413 -105 343 -42 379 -73 b 435 -148 425 -115 436 -125 z',
        },
        noteheadXBlack: {
            x_min: 0,
            x_max: 289,
            y_min: -156,
            y_max: 157,
            ha: 313,
            o: 'm 23 -225 b 69 -204 40 -223 56 -219 b 137 -131 92 -180 115 -157 l 209 -50 b 377 -197 264 -101 321 -148 b 403 -210 384 -203 393 -210 l 408 -210 b 416 -192 416 -207 416 -199 l 416 -186 b 403 -148 416 -171 413 -158 b 344 -81 384 -125 367 -101 b 252 -1 312 -55 282 -29 b 377 157 297 49 340 101 b 402 202 387 170 402 187 b 395 217 402 207 400 213 b 376 226 389 223 382 226 b 334 192 360 226 346 204 b 206 42 289 143 248 94 b 96 161 167 81 131 120 b 60 193 86 174 76 189 b 33 206 52 196 42 206 b 22 199 29 206 26 204 b 10 173 14 190 10 181 b 22 147 10 166 14 157 b 148 7 62 98 104 52 b 164 -7 154 1 158 -3 b 10 -189 111 -66 55 -122 b 0 -212 6 -197 0 -203 b 1 -217 0 -213 0 -216 b 23 -225 4 -226 14 -222 z',
        },
        noteheadCircleXDoubleWhole: {
            x_min: 0,
            x_max: 437,
            y_min: -220,
            y_max: 219.03988406941295,
            ha: 439.03988406941295,
            o: 'm 10 -304 b 40 -206 43 -275 37 -239 b 55 168 48 -81 50 45 b 53 269 56 202 55 236 b 33 315 52 287 46 314 b 3 269 9 317 4 291 b 0 239 1 259 0 249 l 0 -196 b 10 -304 1 -232 7 -268 z m 592 -317 b 621 -220 619 -287 621 -253 b 622 -121 622 -187 622 -154 b 625 -20 622 -88 622 -55 b 629 101 628 20 629 60 b 628 220 629 141 628 181 b 618 253 628 232 625 243 b 608 275 613 259 616 274 b 602 272 606 275 603 275 b 575 249 590 269 575 266 l 575 246 b 573 222 575 239 573 230 l 573 -50 b 592 -317 575 -137 570 -225 z m 79 -285 b 114 -6 96 -261 109 -131 b 117 -63 114 -24 114 -45 b 249 -242 124 -151 166 -212 b 324 -256 275 -252 300 -256 b 504 -137 406 -256 478 -209 b 505 -265 504 -180 505 -222 b 513 -282 505 -269 510 -275 b 533 -248 526 -272 528 -261 b 540 -174 539 -223 540 -199 l 540 -127 b 553 207 546 -16 549 95 b 543 232 553 216 554 232 b 518 207 530 233 518 222 b 511 118 520 177 510 148 l 511 92 b 330 216 488 174 420 223 b 301 215 320 216 311 216 b 122 65 202 204 151 163 b 114 9 117 46 114 27 b 115 75 114 32 115 53 b 101 248 115 157 109 228 b 76 206 78 242 76 225 l 76 91 b 75 -26 76 52 76 13 b 69 -189 72 -81 66 -134 b 79 -285 71 -219 76 -249 z m 317 4 b 219 109 285 40 252 75 l 209 120 b 331 153 248 141 289 151 b 420 137 360 153 390 147 b 446 120 435 131 442 127 l 436 108 l 328 -7 z m 215 -131 b 216 -101 215 -122 215 -114 b 219 -45 217 -82 219 -63 b 197 94 219 3 213 49 l 197 95 b 199 94 199 95 199 94 l 310 -27 b 233 -108 285 -55 259 -81 z m 442 -141 b 432 -122 441 -134 436 -128 l 344 -26 l 426 58 l 445 81 b 444 75 445 78 444 76 b 428 -13 433 46 428 16 b 446 -104 428 -45 433 -75 b 452 -122 449 -111 452 -117 b 442 -141 452 -131 448 -137 z m 323 -190 b 272 -180 305 -187 288 -184 b 217 -158 239 -173 225 -168 l 327 -45 b 330 -48 328 -46 328 -48 b 432 -150 363 -82 393 -121 b 323 -190 400 -174 364 -189 z',
        },
        noteheadCircleXWhole: {
            x_min: 0,
            x_max: 323,
            y_min: -190,
            y_max: 184.44625787787314,
            ha: 374.4462578778731,
            o: 'm 156 -258 b 240 -274 184 -268 213 -274 b 455 -101 347 -274 441 -202 b 465 19 462 -60 465 -22 b 464 71 465 36 465 52 b 246 265 455 194 370 274 b 216 264 236 265 226 264 b 12 94 102 251 45 203 b 0 13 3 66 1 40 b 4 -55 0 -10 3 -32 b 156 -258 14 -154 60 -222 z m 245 10 b 233 23 242 14 238 19 b 121 144 196 65 158 104 l 109 154 b 249 192 156 179 202 192 b 351 174 284 192 317 186 b 380 154 366 168 376 163 b 379 153 380 154 380 153 b 369 141 376 148 372 145 b 245 10 327 98 287 53 z m 115 -131 b 118 -96 117 -121 117 -111 b 121 -27 120 -73 121 -50 b 98 124 121 24 115 75 b 96 127 96 125 98 125 b 99 125 98 127 98 125 b 225 -12 140 79 181 33 l 138 -105 b 115 -131 131 -114 122 -121 z m 376 -143 b 363 -121 374 -134 369 -128 b 265 -12 331 -85 298 -48 l 357 85 b 379 111 364 94 372 101 b 377 102 379 108 377 105 b 359 4 364 71 359 37 b 382 -99 359 -32 366 -66 b 387 -121 384 -108 386 -115 b 376 -143 387 -130 382 -135 z m 239 -197 b 181 -187 220 -194 200 -192 b 121 -161 145 -177 128 -173 b 243 -33 161 -118 203 -75 l 248 -36 b 364 -153 285 -75 320 -118 b 239 -197 327 -180 287 -197 z',
        },
        noteheadCircleXHalf: {
            x_min: 0,
            x_max: 309,
            y_min: -179,
            y_max: 179,
            ha: 358,
            o: 'm 232 -258 b 435 -94 328 -258 412 -196 b 445 6 444 -60 445 -27 b 444 69 445 27 445 48 b 258 258 439 170 374 258 l 230 258 l 207 256 b 14 107 111 248 45 202 b 0 12 4 75 0 43 b 12 -82 0 -20 4 -50 b 144 -242 27 -160 69 -212 b 232 -258 174 -252 203 -258 z m 192 60 b 115 141 166 88 141 115 l 108 150 b 226 189 141 173 186 189 b 253 186 236 189 245 187 b 305 180 271 183 288 183 b 192 60 268 140 229 101 z m 56 -78 b 45 6 43 -56 45 -23 b 65 84 49 39 50 45 b 85 121 72 96 78 107 b 95 124 88 124 92 127 b 171 39 120 95 145 68 z m 360 -132 b 348 -112 359 -124 353 -118 l 300 -58 l 387 37 b 410 63 397 48 405 56 b 413 26 412 52 413 40 b 360 -132 413 -42 393 -95 z m 232 -183 b 184 -177 217 -183 202 -181 l 281 -78 b 348 -143 301 -101 323 -122 b 232 -183 318 -168 279 -183 z',
        },
        noteheadCircleX: {
            x_min: 0,
            x_max: 344,
            y_min: -179,
            y_max: 175.12551922594866,
            ha: 354.12551922594866,
            o: 'm 99 -210 b 236 -258 137 -242 186 -258 b 418 -183 305 -258 374 -230 b 495 33 475 -120 495 -48 b 494 66 495 45 494 55 b 302 252 487 183 405 256 b 181 243 262 249 222 248 b 46 171 128 236 79 219 b 0 19 14 127 0 73 b 99 -210 0 -68 35 -156 z m 245 42 l 124 156 b 200 176 145 166 170 173 b 337 183 245 181 291 184 b 377 176 351 183 364 180 b 245 42 333 131 288 86 z m 392 -99 l 285 3 l 400 121 b 418 154 409 131 418 140 b 465 50 448 130 465 94 b 405 -112 462 -17 439 -73 z m 89 -120 b 48 0 56 -82 48 -42 b 89 112 48 35 59 76 b 109 101 96 111 102 108 l 210 7 l 187 -17 b 89 -120 151 -53 125 -82 z m 176 -183 b 127 -163 158 -179 141 -171 l 252 -32 l 372 -144 b 233 -189 334 -173 285 -189 b 176 -183 215 -189 196 -187 z',
        },
        noteheadCircledDoubleWhole: {
            x_min: 0,
            x_max: 672,
            y_min: -291,
            y_max: 291,
            ha: 582,
            o: 'm 27 -419 b 43 -369 37 -403 43 -387 b 49 -82 45 -272 49 -177 b 50 370 50 69 50 219 b 30 419 50 389 50 419 b 7 369 7 419 7 389 b 0 -284 4 151 1 -66 b 16 -418 0 -328 10 -373 z m 945 -374 b 968 -282 963 -343 968 -312 b 966 -245 968 -269 968 -258 b 958 -45 959 -179 962 -111 b 948 262 949 56 952 160 b 936 377 946 301 946 340 b 922 399 933 386 933 399 l 919 397 b 897 374 909 396 899 389 b 894 308 897 353 893 331 b 904 120 899 246 903 183 b 913 -111 907 43 909 -35 b 927 -297 916 -173 919 -235 b 945 -374 930 -320 927 -347 z m 95 -347 b 120 -292 115 -325 117 -310 b 124 -223 122 -269 124 -246 b 122 -141 124 -196 122 -168 b 121 -85 121 -122 121 -104 b 462 -297 170 -209 300 -297 b 727 -219 543 -294 639 -271 b 828 -118 773 -190 808 -157 b 842 -268 831 -168 834 -219 b 851 -288 844 -275 840 -287 b 865 -272 861 -289 863 -279 b 873 -225 871 -256 873 -240 b 873 -171 873 -207 871 -190 b 858 196 868 -48 863 75 b 848 295 857 229 854 262 b 840 315 848 301 850 315 l 837 315 b 816 295 827 314 816 307 b 809 216 815 268 808 243 b 815 102 812 179 814 140 b 672 295 780 176 733 240 b 500 370 621 340 566 370 b 436 361 480 370 459 367 b 120 95 288 321 183 233 l 120 256 b 115 287 120 266 118 276 b 104 305 112 292 115 305 l 101 305 b 82 284 91 304 82 297 b 76 216 81 262 76 239 b 84 -253 78 59 79 -96 b 95 -347 84 -282 89 -311 z m 780 -33 b 779 -24 780 -30 779 -27 b 704 92 766 22 743 62 b 544 173 655 128 599 147 b 400 206 497 194 448 204 b 307 193 369 206 338 202 b 202 118 264 181 226 153 b 235 168 212 135 222 151 b 505 337 302 262 396 312 b 523 338 511 337 517 338 b 611 288 559 338 586 312 b 763 62 678 225 733 151 b 780 -33 776 26 782 -4 z m 435 -88 b 337 -23 387 -88 354 -65 b 333 6 334 -14 333 -6 b 366 86 333 35 344 66 b 456 122 390 111 423 121 b 602 27 517 122 582 88 b 606 1 605 19 606 10 b 575 -49 606 -20 596 -36 b 435 -88 530 -76 481 -82 z m 441 -269 b 194 -96 327 -262 249 -194 b 167 1 176 -62 167 -30 b 177 59 167 22 171 42 b 174 39 176 52 174 46 b 266 -104 174 -27 210 -73 b 511 -151 346 -148 435 -144 l 552 -151 b 740 -104 616 -145 683 -141 b 776 -66 756 -94 769 -81 b 700 -174 766 -105 740 -140 b 441 -269 632 -232 533 -268 z',
        },
        noteheadCircledWhole: {
            x_min: -50,
            x_max: 472,
            y_min: -231.00750990437078,
            y_max: 232,
            ha: 463.00750990437075,
            o: 'm 289 -333 b 553 -255 370 -330 465 -307 b 680 -62 635 -206 680 -138 b 662 22 680 -36 674 -7 b 500 259 626 112 573 193 b 327 334 448 304 393 334 b 264 325 307 334 287 331 b -59 49 111 284 4 193 b -72 -19 -68 26 -72 4 b 289 -333 -72 -192 84 -334 z m 608 -69 b 605 -60 606 -66 606 -63 b 530 56 592 -14 570 26 b 372 137 482 92 425 111 b 228 170 324 158 275 168 b 134 157 196 170 166 166 b 29 82 91 145 53 117 b 60 132 37 99 49 115 b 333 301 128 226 223 276 b 350 302 338 301 344 302 b 438 252 386 302 413 276 b 590 26 505 189 560 115 b 608 -69 603 -10 608 -40 z m 262 -124 b 164 -59 215 -124 180 -101 b 160 -32 161 -50 160 -42 b 193 50 160 -3 171 30 b 284 86 217 75 251 85 b 429 -9 344 86 409 52 b 433 -36 432 -17 433 -26 b 402 -85 433 -56 423 -72 b 262 -124 357 -112 307 -118 z m 268 -305 b 22 -132 154 -298 76 -230 b -6 -33 3 -98 -6 -65 b 3 23 -6 -14 -3 6 b 1 3 1 16 1 10 b 94 -140 1 -63 37 -109 b 338 -187 173 -184 261 -180 l 379 -187 b 566 -140 444 -181 510 -177 b 602 -102 582 -130 595 -117 b 526 -210 592 -141 567 -176 b 268 -305 459 -268 360 -304 z',
        },
        noteheadCircledHalf: {
            x_min: -50,
            x_max: 393,
            y_min: -175,
            y_max: 175,
            ha: 350,
            o: 'm 540 39 b 408 187 503 94 464 148 b 259 252 356 223 301 252 b 35 192 160 252 95 229 b -68 50 -17 160 -53 112 b -72 13 -71 37 -72 24 b 69 -204 -72 -79 -1 -161 b 246 -252 125 -238 186 -252 b 500 -164 336 -252 426 -219 b 566 -42 543 -132 566 -88 b 540 39 566 -14 557 14 z m 9 -42 b 12 -68 10 -50 10 -59 b -7 6 3 -46 -4 -22 b 131 189 1 98 55 153 b 243 220 167 206 204 215 b 261 222 249 222 255 222 b 377 161 308 222 341 189 b 435 89 402 141 420 117 b 431 92 433 89 432 91 b 346 120 402 102 372 107 b 253 143 314 135 282 143 b 85 79 193 143 138 115 b 9 -42 45 52 10 13 z m 356 39 b 343 1 356 24 351 12 b 206 -111 304 -46 259 -84 b 181 -118 196 -115 189 -118 b 156 -71 163 -118 154 -102 b 238 35 164 -22 199 9 b 324 66 264 52 294 59 b 356 39 348 71 356 62 z m 488 -78 b 392 -176 471 -125 433 -154 b 246 -225 346 -200 297 -217 b 230 -226 240 -226 235 -226 b 157 -204 203 -226 180 -215 b 78 -154 128 -190 101 -174 b 232 -184 128 -171 180 -184 b 344 -161 269 -184 307 -179 b 491 -39 405 -135 455 -94 b 500 -23 495 -33 497 -29 b 488 -78 500 -40 494 -59 z',
        },
        noteheadCircledBlack: {
            x_min: -70,
            x_max: 326,
            y_min: -168,
            y_max: 192,
            ha: 360,
            o: 'm 176 -239 b 190 -242 180 -240 186 -240 b 262 -232 213 -242 238 -235 b 469 -19 384 -225 469 -131 b 467 22 469 -6 468 9 b 383 194 455 86 436 151 b 183 276 315 249 251 275 b 32 236 134 276 85 264 b -94 88 -30 207 -75 160 b -101 30 -98 69 -101 49 b 176 -239 -101 -107 9 -251 z m 177 -212 b -30 -27 81 -213 -13 -131 b -33 17 -33 -13 -33 3 b 127 226 -33 111 14 187 b 194 239 151 233 173 238 b 301 203 232 239 266 226 b 364 134 330 184 350 160 b 233 181 341 160 279 180 b 192 171 216 181 202 179 b 13 1 117 131 46 86 b 3 -48 6 -17 3 -33 b 60 -115 3 -79 20 -101 b 203 -135 105 -131 151 -138 b 229 -138 212 -137 220 -137 b 295 -122 251 -138 274 -135 b 400 -33 337 -99 373 -71 b 228 -206 393 -125 330 -192 b 177 -212 209 -209 192 -213 z',
        },
        noteheadDoubleWholeSquare: {
            x_min: 0,
            x_max: 474,
            y_min: -209.39230484541326,
            y_max: 211,
            ha: 420.39230484541326,
            o: 'm 648 -301 b 668 -287 658 -304 665 -295 b 683 -209 678 -262 683 -235 b 677 258 681 -55 678 102 b 672 284 677 266 677 276 b 661 304 670 291 672 304 l 658 304 b 635 279 647 301 635 297 b 629 240 635 266 629 252 l 629 236 b 631 225 629 232 631 228 b 583 194 631 197 611 194 l 528 194 b 125 207 393 194 259 202 b 89 207 114 209 101 206 b 63 210 79 207 71 207 b 52 229 55 213 52 220 b 55 258 52 238 55 248 b 53 266 55 261 55 264 b 36 298 48 276 53 298 l 35 298 b 4 264 14 298 7 284 b 0 187 0 238 0 213 b 4 50 0 143 3 96 b 6 -10 6 30 6 10 b 4 -130 6 -50 4 -91 b 12 -268 4 -176 6 -222 b 19 -287 13 -275 10 -284 b 35 -275 26 -288 30 -281 b 52 -220 50 -261 48 -239 b 75 -199 55 -206 58 -199 l 141 -197 l 274 -197 l 634 -197 b 639 -281 635 -219 636 -251 b 648 -301 641 -288 638 -300 z m 72 -66 b 55 -56 59 -69 55 -65 l 55 -50 b 53 53 55 -16 55 20 b 69 73 53 69 60 72 l 79 72 b 330 65 163 66 246 63 l 592 65 b 634 81 606 65 618 71 b 635 -30 634 39 635 6 b 605 -58 635 -49 628 -58 b 451 -60 553 -60 503 -60 b 219 -59 373 -60 295 -59 l 166 -59 b 72 -66 134 -59 104 -60 z',
        },
        noteheadSquareWhite: {
            x_min: 0,
            x_max: 350,
            y_min: -131,
            y_max: 131,
            ha: 262,
            o: 'm 468 -189 b 485 -187 474 -189 480 -189 b 500 -176 495 -187 500 -183 b 498 -168 500 -174 498 -171 b 497 -166 498 -167 497 -167 l 498 -164 b 504 -154 503 -163 504 -158 b 503 -138 504 -150 503 -144 l 503 -135 l 503 -94 b 492 66 500 -45 494 10 b 488 135 492 89 488 112 b 484 150 488 141 485 145 b 482 154 482 151 482 153 b 429 189 472 177 456 189 b 53 184 304 186 179 186 l 39 184 b 33 181 36 183 35 183 b 12 160 20 181 12 177 b 0 -109 9 71 4 -19 b 19 -137 0 -125 7 -134 b 23 -151 19 -141 20 -145 b 85 -187 37 -173 55 -187 b 468 -189 212 -187 340 -187 z m 246 -125 l 63 -125 b 66 -111 65 -122 66 -117 b 73 72 69 -50 71 10 l 73 130 b 88 128 78 128 82 128 b 148 130 108 130 128 130 b 271 128 190 130 230 128 l 271 130 l 420 130 b 428 20 425 92 425 56 l 436 -127 l 246 -127 z',
        },
        noteheadSquareBlack: {
            x_min: 0,
            x_max: 342,
            y_min: -129.98961937716263,
            y_max: 132.44444444444446,
            ha: 262.4340638216071,
            o: 'm 217 190 b 439 186 304 190 372 190 b 467 180 448 184 458 183 b 492 145 484 176 492 167 b 490 -124 490 56 490 -33 b 488 -141 490 -130 488 -135 b 456 -170 488 -163 478 -168 b 118 -183 344 -176 230 -181 b 29 -184 89 -183 60 -192 b 0 -148 4 -180 0 -168 b 1 29 1 -89 1 -30 l 1 156 b 36 190 3 187 4 190 b 217 190 102 192 168 190 z',
        },
        noteheadTriangleDownDoubleWhole: {
            x_min: 0,
            x_max: 510,
            y_min: -213,
            y_max: 213,
            ha: 426,
            o: 'm 16 -307 b 30 -289 26 -307 29 -297 b 43 -236 36 -272 42 -253 l 65 219 b 59 285 62 240 69 264 b 46 307 55 294 58 307 l 43 307 b 19 279 30 304 20 295 b 13 184 17 248 14 216 b 1 -125 9 81 7 -23 b 0 -163 0 -138 0 -150 b 6 -287 0 -204 4 -245 b 16 -307 6 -295 7 -305 z m 707 -294 b 734 -213 733 -271 734 -242 b 729 245 733 -60 730 92 b 719 285 729 259 724 272 b 707 298 716 291 714 298 l 703 298 b 685 284 696 297 687 292 b 683 253 683 274 683 264 b 691 -181 685 108 685 -36 b 707 -294 693 -217 690 -256 z m 108 -238 b 125 -203 125 -238 121 -216 b 127 -190 127 -199 127 -194 b 120 -138 127 -173 120 -156 l 120 -66 b 114 167 120 12 118 89 l 118 161 b 314 -153 184 58 248 -48 b 350 -184 327 -173 338 -184 b 387 -154 361 -184 374 -174 b 567 108 449 -68 508 20 b 626 193 588 137 608 164 b 615 -132 622 85 619 -24 l 615 -166 b 619 -207 615 -180 615 -194 b 638 -226 622 -217 629 -225 b 651 -209 648 -226 649 -216 b 658 -177 655 -199 658 -187 l 658 -171 b 667 49 655 -98 667 -23 b 665 88 667 62 667 75 b 665 220 665 135 667 179 b 641 265 664 238 660 265 b 626 243 629 265 626 255 b 628 222 626 236 628 228 b 612 225 624 223 619 225 b 384 223 537 223 461 223 l 384 225 l 170 225 b 131 215 157 225 144 222 b 112 200 122 210 117 206 b 88 266 111 225 108 249 b 75 239 76 259 75 249 b 73 147 75 207 73 179 b 82 -189 73 35 79 -78 b 84 -203 82 -194 82 -199 b 108 -238 86 -219 91 -238 z m 361 -79 b 295 78 336 -26 314 26 b 284 151 287 101 284 125 b 310 177 284 171 291 177 b 419 176 346 176 383 174 l 423 176 b 445 153 441 176 445 168 l 445 147 b 361 -79 442 65 415 -10 z',
        },
        noteheadTriangleDownWhole: {
            x_min: 0,
            x_max: 366,
            y_min: -145,
            y_max: 138,
            ha: 283,
            o: 'm 242 -209 b 279 -180 253 -209 266 -200 b 459 84 341 -92 400 -4 b 520 170 480 112 501 141 b 527 189 524 177 527 183 b 504 199 527 196 520 199 l 55 199 b 23 190 45 199 33 196 b 0 161 9 181 0 173 b 10 135 0 154 3 145 b 206 -177 76 32 140 -73 b 242 -209 219 -199 230 -209 z m 253 -105 b 187 52 228 -52 206 0 b 176 127 179 76 176 101 b 197 151 176 144 181 151 l 202 151 b 256 150 220 151 238 150 b 311 151 275 150 294 151 b 337 128 331 151 337 144 l 337 122 b 253 -105 334 39 307 -35 z',
        },
        noteheadTriangleDownHalf: {
            x_min: -0.0833130378007211,
            x_max: 341,
            y_min: -159,
            y_max: 159,
            ha: 318,
            o: 'm 266 -229 b 282 -215 274 -229 278 -225 b 487 153 350 -92 418 30 b 491 170 490 158 491 164 b 480 189 491 177 487 183 b 425 215 464 202 448 213 b 33 226 297 217 168 222 b 13 229 29 223 22 229 b 1 222 9 229 4 228 b 14 184 -4 207 7 196 b 210 -176 81 65 145 -56 b 253 -225 222 -194 230 -213 b 266 -229 259 -226 264 -228 z m 134 22 b 147 43 138 27 141 37 b 206 163 174 79 179 127 b 213 170 209 166 212 167 l 340 167 b 193 -75 287 89 251 1 b 190 -82 192 -76 190 -79 z',
        },
        noteheadTriangleDownBlack: {
            x_min: 0,
            x_max: 346,
            y_min: -149,
            y_max: 149,
            ha: 298,
            o: 'm 229 -215 b 259 -202 238 -215 248 -210 b 284 -173 269 -194 278 -184 l 482 173 b 498 209 488 184 498 194 b 481 215 492 215 487 215 b 63 213 343 215 203 213 b 12 197 45 213 29 206 b 0 180 4 193 0 187 b 3 168 0 177 1 173 b 13 150 6 163 9 156 l 196 -189 b 229 -215 206 -206 216 -215 z',
        },
        noteheadTriangleUpDoubleWhole: {
            x_min: 0,
            x_max: 510,
            y_min: -213,
            y_max: 213,
            ha: 426,
            o: 'm 16 -307 b 30 -289 26 -307 29 -297 b 43 -236 36 -272 42 -253 l 65 219 b 59 285 62 240 69 264 b 46 307 55 294 58 307 l 43 307 b 19 279 30 304 20 295 b 13 184 17 248 14 216 b 1 -125 9 81 7 -23 b 0 -163 0 -138 0 -150 b 6 -287 0 -204 4 -245 b 16 -307 6 -295 7 -305 z m 707 -298 b 734 -217 733 -275 734 -246 b 729 240 733 -65 730 88 b 719 281 729 255 724 268 b 707 294 716 287 714 294 l 703 294 b 685 279 696 292 687 288 b 683 249 683 269 683 259 b 691 -186 685 104 685 -40 b 707 -298 693 -222 690 -261 z m 88 -266 b 112 -200 108 -249 111 -225 b 131 -215 117 -206 122 -210 b 170 -225 144 -222 157 -225 l 384 -225 l 384 -223 b 612 -225 461 -223 537 -223 b 628 -222 619 -225 624 -223 b 641 -265 628 -238 622 -265 b 665 -220 660 -265 664 -238 b 665 -88 667 -179 665 -135 b 667 -49 667 -75 667 -62 b 658 171 667 23 655 98 b 651 209 660 184 655 197 b 638 226 649 216 648 226 b 619 207 629 225 622 217 b 615 166 615 194 615 180 l 615 132 b 626 -193 619 24 622 -85 b 567 -108 608 -164 588 -137 b 387 154 508 -20 449 68 b 350 184 374 174 361 184 b 314 153 338 184 327 173 b 118 -161 248 48 184 -58 l 114 -167 b 120 66 118 -89 120 -12 l 120 138 b 127 190 120 156 127 173 b 125 203 127 194 127 199 b 108 238 121 216 125 238 b 84 203 91 238 86 219 b 82 189 82 199 82 194 b 73 -147 79 78 73 -35 b 75 -239 73 -179 75 -207 b 88 -266 75 -249 76 -259 z m 310 -177 b 284 -151 291 -177 284 -171 b 295 -78 284 -125 287 -101 b 361 79 314 -26 336 26 b 445 -147 415 10 442 -65 b 423 -176 446 -166 442 -176 l 419 -176 b 310 -177 383 -174 346 -176 z',
        },
        noteheadTriangleUpWhole: {
            x_min: 0,
            x_max: 366,
            y_min: -145,
            y_max: 138,
            ha: 283,
            o: 'm 504 -209 b 527 -199 520 -209 527 -206 b 520 -180 527 -193 524 -187 b 459 -94 501 -151 480 -122 b 279 170 400 -6 341 82 b 242 199 266 190 253 199 b 206 167 230 199 219 189 b 10 -145 140 63 76 -42 b 0 -171 3 -156 0 -164 b 23 -200 0 -183 9 -192 b 55 -209 33 -206 45 -209 z m 202 -161 b 176 -137 183 -163 176 -156 b 187 -62 176 -111 179 -86 b 253 95 206 -10 228 42 b 337 -132 307 24 334 -49 b 311 -161 338 -153 334 -161 b 256 -160 294 -161 275 -160 b 202 -161 238 -160 220 -161 z',
        },
        noteheadTriangleUpHalf: {
            x_min: 0,
            x_max: 341.0833130378007,
            y_min: -159,
            y_max: 159,
            ha: 318,
            o: 'm 458 -226 b 478 -229 462 -223 469 -229 b 490 -222 482 -229 487 -228 b 477 -184 495 -207 484 -196 b 281 176 410 -65 346 56 b 238 225 269 194 261 213 b 225 229 232 226 228 228 b 209 215 217 229 213 225 b 4 -153 141 92 73 -30 b 0 -170 1 -158 0 -164 b 12 -189 0 -177 4 -183 b 66 -215 27 -202 43 -213 b 458 -226 194 -217 323 -222 z m 151 -167 b 298 75 204 -89 240 -1 b 301 82 300 76 301 79 l 357 -22 b 344 -43 353 -27 350 -37 b 285 -163 317 -79 312 -127 b 278 -170 282 -166 279 -167 z',
        },
        noteheadTriangleUpBlack: {
            x_min: 0,
            x_max: 346,
            y_min: -149,
            y_max: 149,
            ha: 298,
            o: 'm 481 -215 b 498 -209 487 -215 492 -215 b 482 -173 498 -194 488 -184 l 284 173 b 259 202 278 184 269 194 b 229 215 248 210 238 215 b 196 189 216 215 206 206 l 13 -150 b 3 -168 9 -156 6 -163 b 0 -180 1 -173 0 -177 b 12 -197 0 -187 4 -193 b 63 -213 29 -206 45 -213 b 481 -215 203 -213 343 -215 z',
        },
        noteheadSlashedDoubleWhole1: {
            x_min: 0,
            x_max: 697,
            y_min: -290,
            y_max: 290,
            ha: 580,
            o: 'm 20 -418 b 42 -376 40 -418 37 -392 b 43 -356 45 -370 43 -363 l 43 -348 b 50 -197 43 -298 49 -248 b 78 317 58 -24 69 147 b 72 387 75 343 82 366 b 52 418 68 397 69 418 l 49 416 b 24 380 33 413 24 399 b 19 235 23 333 20 284 b 7 -82 14 130 10 24 b 0 -264 6 -143 0 -203 b 10 -382 0 -302 1 -343 b 20 -418 13 -393 6 -418 z m 976 -344 b 991 -331 985 -346 988 -337 b 1004 -271 999 -312 1004 -292 l 1004 -194 b 996 184 1004 -68 1001 59 b 996 281 996 216 998 249 b 984 379 995 314 991 347 b 971 397 981 392 976 396 b 952 386 965 397 959 392 b 943 361 943 380 945 370 b 937 288 939 337 937 312 b 945 158 937 245 942 203 b 959 -248 950 23 953 -112 b 966 -325 960 -274 963 -300 b 976 -344 966 -334 968 -344 z m 102 -331 b 124 -272 120 -314 122 -294 b 135 -278 127 -276 131 -278 l 141 -278 b 320 -199 206 -262 272 -252 b 348 -171 328 -189 338 -180 b 482 -199 392 -190 436 -199 b 704 -173 576 -199 641 -187 b 847 -82 760 -158 809 -130 l 855 -69 l 855 -73 b 863 -229 857 -125 860 -177 b 876 -255 863 -239 863 -255 b 893 -233 886 -255 888 -242 b 900 -189 899 -219 900 -203 l 900 66 b 900 192 899 108 900 150 b 893 301 900 228 899 265 b 877 325 890 310 893 325 l 876 325 b 855 301 865 324 855 315 b 850 202 852 268 847 235 b 854 50 854 151 854 101 b 821 99 847 68 835 85 b 733 167 795 127 765 148 b 831 253 766 196 799 225 b 851 265 837 258 844 261 b 829 282 840 275 835 279 b 772 295 815 291 795 295 b 685 271 739 295 704 287 b 624 215 665 252 645 233 l 566 232 b 527 239 553 236 540 239 b 490 228 514 239 501 236 b 451 219 475 217 467 219 b 275 176 389 219 331 200 b 184 53 216 150 184 105 b 199 -14 184 32 189 10 b 262 -108 215 -52 236 -82 l 125 -230 b 134 225 130 -78 132 73 b 135 269 134 239 135 255 b 121 330 135 291 132 311 b 95 287 99 323 95 307 b 92 124 94 233 95 179 b 85 -143 88 36 85 -53 b 89 -300 85 -196 86 -248 b 102 -331 89 -311 89 -323 z m 367 -14 b 350 43 359 3 351 22 b 392 122 350 82 363 107 b 544 171 439 150 492 160 b 572 168 554 174 563 171 z m 564 -132 b 467 -105 528 -138 497 -121 b 442 -89 458 -101 449 -95 l 658 101 b 690 30 677 82 690 59 b 688 10 690 24 690 17 b 564 -132 678 -45 611 -127 z',
        },
        noteheadSlashedWhole1: {
            x_min: -76,
            x_max: 498,
            y_min: -168,
            y_max: 168,
            ha: 336,
            o: 'm -79 -242 b 55 -202 -32 -236 14 -228 l 145 -143 b 333 -171 203 -166 265 -171 b 429 -164 361 -174 395 -168 b 582 -130 481 -158 534 -154 b 657 -20 631 -105 657 -65 b 619 68 657 9 644 40 b 552 120 599 89 577 107 b 582 138 562 127 572 132 b 717 226 625 167 668 194 b 638 242 688 236 662 242 b 543 213 603 242 573 232 b 455 154 514 194 484 174 b 325 199 412 167 367 179 b 233 215 298 210 265 215 b 75 156 173 215 124 186 b 0 27 24 122 0 76 b 66 -98 0 -17 22 -63 b 72 -102 69 -99 71 -101 b -89 -209 17 -137 -36 -173 b -109 -225 -95 -213 -109 -216 b -108 -229 -109 -226 -108 -228 b -85 -242 -104 -239 -95 -242 z m 181 -29 b 167 14 171 -13 167 1 b 187 62 167 30 173 46 b 301 137 217 99 258 118 b 312 138 304 138 308 138 l 317 138 b 389 109 340 125 364 118 l 383 105 z m 337 -109 b 239 -82 301 -107 268 -99 l 468 65 b 482 24 477 53 482 40 b 480 4 482 19 481 12 b 337 -109 467 -56 399 -111 z',
        },
        noteheadSlashedHalf1: {
            x_min: -79.3435119522494,
            x_max: 471,
            y_min: -184,
            y_max: 184,
            ha: 368,
            o: 'm -112 -251 b -94 -265 -107 -261 -101 -264 b -52 -242 -79 -265 -63 -249 l 89 -148 b 212 -180 125 -170 167 -179 b 238 -177 220 -180 229 -179 l 262 -180 b 346 -171 289 -180 318 -176 b 576 -91 431 -166 507 -140 b 641 4 619 -60 641 -29 b 592 96 641 35 625 65 l 583 104 b 533 147 567 121 550 134 l 613 200 b 678 261 636 216 664 232 b 658 265 671 264 664 265 b 611 248 641 265 625 258 l 491 171 b 337 204 444 194 392 204 b 281 200 318 204 300 204 b 27 62 180 187 92 145 b -1 -19 9 37 -1 10 b 36 -107 -1 -50 12 -82 b 52 -121 42 -112 46 -117 l -72 -203 b -112 -251 -91 -216 -122 -233 z m 161 -49 b 158 -29 160 -42 158 -35 b 183 33 158 -7 167 16 b 395 137 239 95 311 122 b 420 125 405 134 413 130 z m 276 -128 b 261 -131 271 -130 266 -131 b 181 -86 233 -131 203 -114 l 454 94 l 468 72 b 481 36 477 60 481 49 b 469 1 481 26 477 14 b 276 -128 422 -66 354 -105 z',
        },
        noteheadSlashedBlack1: {
            x_min: -110,
            x_max: 452,
            y_min: -190,
            y_max: 190,
            ha: 380,
            o: 'm -131 -274 b -102 -262 -121 -272 -111 -266 b 7 -186 -65 -239 -29 -212 b 50 -157 22 -176 36 -166 b 105 -176 65 -166 84 -173 b 207 -183 140 -181 173 -183 b 239 -184 219 -184 229 -184 b 428 -91 327 -184 377 -150 b 487 43 461 -52 487 -7 b 482 76 487 53 485 65 b 459 128 478 95 469 112 b 507 161 475 138 491 150 l 651 262 b 622 274 641 271 632 274 b 605 271 616 274 611 272 b 514 233 573 262 541 252 l 422 167 b 317 203 392 190 354 203 b 271 196 301 203 285 200 b 168 157 236 186 200 173 b 6 -16 94 120 33 68 b -1 -62 1 -32 -1 -48 b 17 -125 -1 -86 4 -108 b -81 -196 -16 -148 -48 -173 b -145 -242 -102 -212 -128 -219 b -158 -256 -150 -246 -158 -251 b -157 -261 -158 -258 -157 -259 b -131 -274 -153 -269 -141 -274 z',
        },
        noteheadSlashedDoubleWhole2: {
            x_min: -0.12386605641055257,
            x_max: 697.4733477320805,
            y_min: -295,
            y_max: 295,
            ha: 590,
            o: 'm 870 -338 b 891 -315 884 -341 887 -325 b 906 -183 907 -274 903 -228 b 914 186 912 -60 904 62 b 914 240 914 203 916 222 b 916 276 913 251 916 265 b 899 300 916 289 913 300 b 871 253 874 300 871 274 b 858 -168 871 111 858 -27 b 860 -235 858 -190 860 -213 l 736 -131 b 834 -20 799 -111 834 -69 b 789 85 834 13 819 49 b 683 160 760 118 723 140 b 383 216 589 209 487 215 b 330 213 364 217 347 216 b 228 300 295 242 261 271 b 86 347 184 337 138 348 b 58 343 76 347 63 350 l 58 360 b 35 425 58 384 53 423 b 6 382 9 425 6 403 l 6 131 b 0 -164 6 33 4 -66 b 24 -327 -1 -216 6 -271 b 50 -262 46 -305 50 -284 l 50 -154 b 52 -45 50 -118 50 -81 b 58 325 55 79 58 202 b 73 310 60 320 68 315 b 94 294 79 304 86 298 b 89 271 89 287 89 278 l 89 94 b 104 -194 101 -20 88 -108 b 118 -245 107 -213 104 -248 b 140 -190 140 -243 140 -212 l 140 -62 b 132 258 140 46 138 153 l 132 259 l 235 173 b 193 132 219 161 204 148 b 153 26 167 101 153 63 b 164 -35 153 7 157 -16 b 341 -170 196 -114 261 -158 b 433 -177 372 -174 403 -177 b 619 -157 497 -177 559 -170 l 706 -230 b 799 -276 736 -258 765 -276 b 818 -274 806 -276 812 -276 l 861 -274 b 863 -312 861 -287 863 -300 b 870 -338 864 -321 858 -337 z m 966 -425 b 986 -397 979 -425 982 -408 b 991 -373 989 -390 989 -382 b 995 -239 991 -328 995 -284 b 1004 334 1001 -49 1002 143 b 995 380 1005 350 1005 367 b 982 402 989 386 992 402 l 978 400 b 949 374 965 396 950 390 b 948 333 948 360 948 346 l 948 -37 b 949 -84 949 -52 949 -68 b 946 -248 949 -132 946 -189 b 953 -396 946 -297 948 -346 b 966 -425 955 -408 950 -425 z m 624 -36 b 416 140 554 22 485 81 b 482 156 439 150 461 154 b 625 81 537 156 588 124 b 647 27 639 63 647 46 b 624 -36 647 7 638 -14 z m 469 -117 b 320 14 386 -118 320 -60 b 343 81 320 37 327 60 l 547 -95 b 469 -117 521 -105 494 -111 z',
        },
        noteheadSlashedWhole2: {
            x_min: -83,
            x_max: 510,
            y_min: -201,
            y_max: 198,
            ha: 399,
            o: 'm 734 -289 b 696 -245 726 -266 710 -256 b 586 -164 660 -217 622 -192 l 589 -161 b 654 -50 631 -135 654 -94 b 616 40 654 -19 641 13 b 305 174 536 127 420 174 b 171 151 261 174 215 167 b 166 150 170 151 168 150 b 86 209 140 170 112 189 b -94 284 32 249 -22 289 l -108 285 b -120 274 -114 285 -120 284 b -104 251 -120 266 -112 258 b 71 124 -46 209 12 166 l 85 114 b 36 72 66 102 50 89 b 0 -30 12 40 0 4 b 122 -186 0 -96 45 -160 b 343 -222 194 -210 268 -222 b 514 -197 410 -220 467 -213 l 554 -228 b 734 -289 609 -268 668 -275 z m 477 -82 b 268 73 408 -30 338 22 l 301 91 b 336 101 314 96 324 101 b 370 88 347 101 359 96 b 459 9 405 66 436 43 b 481 -56 474 -13 481 -35 b 477 -82 481 -65 480 -73 z m 310 -161 b 216 -143 276 -161 246 -156 b 166 -72 181 -128 166 -105 b 168 -46 166 -65 167 -55 b 206 26 176 -16 189 7 b 436 -140 282 -29 360 -84 b 382 -158 420 -150 402 -157 b 310 -161 357 -161 333 -161 z',
        },
        noteheadSlashedHalf2: {
            x_min: -73,
            x_max: 454,
            y_min: -188,
            y_max: 188,
            ha: 376,
            o: 'm 654 -271 b 603 -202 649 -233 625 -217 b 481 -115 563 -173 523 -144 b 564 -60 510 -101 539 -82 b 615 40 596 -33 615 4 b 609 69 615 50 613 60 b 505 167 590 120 554 151 b 336 190 451 184 392 190 b 124 134 259 190 189 171 l -42 248 b -88 271 -56 256 -75 271 b -101 265 -94 271 -98 269 b -105 252 -104 259 -105 255 b -66 210 -105 235 -82 222 l 85 107 b 0 -24 42 73 0 35 b 183 -183 0 -118 75 -184 b 262 -176 206 -180 233 -177 b 438 -135 324 -171 383 -158 b 570 -228 482 -166 527 -197 b 654 -271 595 -243 621 -259 z m 393 -53 l 311 4 l 225 65 b 392 134 274 102 331 122 b 455 50 425 141 455 101 b 439 -3 455 35 451 14 b 393 -53 425 -22 409 -37 z m 287 -121 b 246 -130 272 -127 259 -130 b 171 -89 215 -130 189 -115 b 156 -40 161 -73 156 -58 b 186 29 156 -17 166 7 l 192 35 l 359 -82 b 287 -121 337 -98 312 -111 z',
        },
        noteheadSlashedBlack2: {
            x_min: -84,
            x_max: 405,
            y_min: -189,
            y_max: 189,
            ha: 378,
            o: 'm 557 -265 b 573 -272 562 -268 567 -272 b 583 -261 577 -272 580 -269 b 575 -242 580 -253 579 -248 b 524 -190 563 -220 544 -204 b 405 -99 485 -160 445 -130 b 497 50 449 -60 482 -9 b 500 72 498 58 500 65 b 478 122 500 91 492 107 b 331 186 438 167 387 186 b 120 131 258 186 186 167 l 107 124 b -52 242 53 163 1 203 b -89 265 -63 251 -76 259 b -107 272 -95 268 -101 272 b -117 266 -109 272 -114 271 b -121 251 -120 262 -121 256 b -114 235 -121 245 -120 239 b -60 186 -96 217 -81 199 b 63 95 -20 156 22 125 b -1 -35 26 66 -1 27 b 137 -183 -1 -130 46 -183 b 174 -180 148 -183 161 -181 l 245 -171 b 366 -128 289 -166 331 -150 l 426 -171 b 557 -265 469 -203 514 -233 z',
        },
        noteheadDiamondDoubleWhole: {
            x_min: 0,
            x_max: 429,
            y_min: -221,
            y_max: 221,
            ha: 442,
            o: 'm 22 -318 b 42 -294 33 -318 37 -302 b 46 -266 45 -285 45 -275 b 50 -219 49 -249 50 -233 b 48 -153 50 -197 49 -176 b 43 120 43 -62 43 29 l 43 253 b 37 298 43 269 45 284 b 26 318 35 305 35 318 l 24 318 b 1 295 13 317 3 308 b 0 268 0 285 0 276 l 0 -121 b 10 -291 0 -177 1 -235 b 22 -318 12 -301 10 -318 z m 593 -312 b 618 -256 611 -294 616 -276 l 618 -186 b 611 253 618 -40 612 108 b 605 276 611 261 608 268 b 589 295 600 284 600 297 b 567 272 577 294 569 285 l 567 251 b 575 -197 573 102 575 -48 b 593 -312 575 -233 579 -271 z m 99 -268 b 114 -256 107 -269 111 -262 b 127 -196 124 -238 125 -217 b 128 -144 128 -179 128 -161 b 122 -9 128 -99 125 -55 l 135 -19 b 344 -179 206 -71 276 -122 b 370 -190 354 -186 363 -190 b 395 -173 379 -190 386 -184 b 492 -33 426 -127 459 -79 b 491 -86 491 -50 491 -68 b 507 -251 491 -138 495 -193 b 534 -184 530 -228 533 -206 b 541 144 537 -75 539 35 b 530 204 541 164 539 186 b 520 220 528 210 528 220 b 500 203 511 219 503 213 b 498 192 498 200 498 194 l 498 176 b 494 7 497 120 497 63 l 490 12 l 287 176 b 258 190 279 181 274 190 b 212 153 239 186 225 168 l 127 40 b 121 32 124 37 122 35 b 118 114 120 59 118 86 b 102 249 117 158 122 206 b 75 219 85 246 79 236 b 72 187 72 209 72 197 b 76 117 72 164 75 141 b 85 -151 79 27 79 -62 b 91 -251 86 -184 91 -217 b 99 -268 91 -258 92 -266 z m 392 -128 b 374 -122 387 -134 380 -127 l 180 29 b 170 45 173 35 170 39 b 176 56 170 48 173 52 b 236 122 204 101 219 122 b 308 76 252 122 272 107 l 433 -26 b 449 -50 439 -32 449 -36 b 392 -128 432 -75 413 -102 z',
        },
        noteheadDiamondWhole: {
            x_min: 0,
            x_max: 271,
            y_min: -132,
            y_max: 132,
            ha: 264,
            o: 'm 230 -177 b 256 -190 240 -186 249 -190 b 281 -173 265 -190 272 -184 b 382 -29 314 -124 347 -76 b 390 -10 387 -22 390 -14 b 376 12 390 -3 386 4 b 173 177 308 66 240 121 b 144 190 166 183 160 190 b 98 153 127 186 112 170 b 13 40 69 115 42 76 b 0 13 4 29 0 20 b 22 -19 0 3 7 -9 b 230 -177 92 -69 163 -122 z m 279 -128 b 261 -122 274 -134 266 -127 l 66 30 b 56 45 59 35 56 39 b 62 56 56 48 59 52 b 122 122 91 101 105 122 b 194 76 138 122 158 107 l 320 -26 b 336 -50 325 -32 336 -35 b 279 -128 318 -75 300 -102 z',
        },
        noteheadDiamondHalf: {
            x_min: 0,
            x_max: 295,
            y_min: -148,
            y_max: 148,
            ha: 296,
            o: 'm 228 -207 b 245 -213 235 -210 240 -213 b 264 -203 252 -213 258 -210 b 415 -46 314 -150 364 -98 b 425 -27 420 -40 425 -35 b 416 -10 425 -22 422 -16 b 217 200 350 60 284 131 b 194 213 212 207 204 213 b 170 196 181 213 177 203 b 14 33 118 143 68 86 b 0 7 4 23 0 16 b 17 -20 0 -1 6 -10 b 118 -114 52 -50 82 -85 b 228 -207 156 -144 184 -184 z m 209 -157 b 134 -69 177 -138 141 -115 b 130 -26 131 -55 130 -40 b 215 148 130 42 160 99 b 225 156 217 151 220 156 b 230 153 226 156 228 156 b 323 -26 276 104 321 55 b 298 -75 324 -42 315 -59 b 265 -109 287 -86 276 -99 b 209 -157 245 -125 228 -167 z',
        },
        noteheadDiamondBlack: {
            x_min: 0,
            x_max: 310,
            y_min: -146,
            y_max: 146,
            ha: 292,
            o: 'm 266 -210 b 289 -194 278 -209 284 -200 b 406 -76 330 -156 367 -115 b 446 -23 433 -49 446 -36 b 412 29 446 -10 435 3 b 405 36 409 30 408 33 b 252 196 354 89 304 143 b 225 210 243 204 235 210 b 204 202 219 210 212 209 b 10 24 141 141 75 82 b 0 9 4 19 0 14 b 9 -6 0 4 3 0 l 232 -192 b 266 -210 242 -200 256 -204 z',
        },
        noteheadParenthesis: {
            x_min: -70.190112022022,
            x_max: 329,
            y_min: -196,
            y_max: 201,
            ha: 397,
            o: 'm 344 -279 b 382 -262 361 -288 370 -272 b 405 -233 390 -255 399 -245 b 474 9 455 -158 468 -73 b 416 228 474 78 448 174 b 364 282 403 249 387 271 b 344 289 359 285 350 288 b 331 279 338 289 333 287 b 325 248 328 269 325 258 b 338 225 325 238 328 229 b 412 138 379 207 396 174 b 445 1 433 92 445 45 b 346 -217 445 -81 410 -154 b 336 -252 340 -223 336 -238 b 344 -279 336 -265 338 -276 z m 19 -274 b 35 -282 24 -279 30 -281 b 49 -265 42 -282 46 -275 b 52 -243 50 -256 52 -249 b 36 -210 52 -230 49 -220 b -60 -59 -16 -173 -35 -114 b -73 9 -69 -39 -73 -16 b 33 223 -73 92 -24 189 b 50 265 43 229 50 249 b 33 288 50 278 46 289 b 4 272 23 288 14 275 b -9 261 0 269 -4 265 b -101 23 -58 193 -105 124 b -37 -206 -104 -52 -75 -130 b 19 -274 -23 -232 -6 -255 z',
        },
        noteheadParenthesisRight: {
            x_min: -30,
            x_max: 82,
            y_min: -199.08429092881173,
            y_max: 206,
            ha: 405.0842909288117,
            o: 'm -17 -282 b 24 -264 -6 -297 12 -272 b 60 -219 40 -253 52 -236 b 117 1 96 -150 112 -75 b 118 16 118 6 118 12 b 109 73 118 36 112 55 b 4 279 99 154 68 226 b -23 297 -4 287 -13 297 b -37 289 -27 297 -32 294 b -43 266 -42 285 -43 276 b -32 225 -43 251 -37 229 b 84 -7 48 170 84 82 b 32 -184 84 -69 65 -132 b -10 -222 22 -200 4 -209 b -24 -258 -20 -232 -24 -245 b -17 -282 -24 -266 -22 -276 z',
        },
        noteheadParenthesisLeft: {
            x_min: 0,
            x_max: 106,
            y_min: -197,
            y_max: 197,
            ha: 394,
            o: 'm 134 -284 b 138 -281 135 -284 137 -284 b 145 -268 144 -278 145 -274 l 144 -253 b 107 -180 138 -225 121 -204 b 42 13 71 -120 42 -56 b 49 73 42 32 43 52 b 137 210 62 128 95 171 b 153 255 147 219 153 239 b 145 278 153 265 151 274 b 130 284 140 281 135 284 b 98 259 117 284 108 268 b 0 37 35 203 1 131 b 118 -268 9 -69 53 -173 b 134 -284 121 -274 127 -284 z',
        },
        noteheadMoonBlack: {
            x_min: 0,
            x_max: 328,
            y_min: -125,
            y_max: 125,
            ha: 250,
            o: 'm 353 -160 b 465 -40 412 -140 451 -102 b 472 30 471 -17 472 6 b 469 124 472 60 469 92 b 406 179 469 170 459 177 l 128 179 b 37 180 98 179 68 179 b 0 141 7 180 0 170 b 3 -20 3 88 3 33 b 69 -134 3 -72 26 -109 b 240 -180 125 -164 181 -180 b 353 -160 278 -180 315 -174 z',
        },
        noteheadTriangleLeftBlack: {
            x_min: 0,
            x_max: 391.1554175279994,
            y_min: -142,
            y_max: 142,
            ha: 284,
            o: 'm 138 -204 b 318 -197 197 -199 258 -197 l 431 -197 b 544 -192 469 -196 507 -193 b 563 -184 552 -190 560 -193 b 553 -167 564 -177 559 -171 l 540 -157 b 232 60 436 -85 334 -12 l 50 190 b 20 204 42 197 32 204 b 10 202 17 204 14 204 b 0 184 1 197 0 192 b 1 164 0 177 1 170 b 6 -150 3 59 6 -45 b 39 -193 7 -176 17 -186 b 138 -204 72 -204 105 -204 z',
        },
        noteheadTriangleRightBlack: {
            x_min: -0.3332953162522517,
            x_max: 398,
            y_min: -139,
            y_max: 140,
            ha: 279,
            o: 'm 543 -200 b 573 -176 566 -200 573 -194 l 573 -168 b 554 141 566 -66 560 37 b 520 197 553 167 546 187 b 495 202 511 200 504 202 b 454 184 481 202 467 196 l 35 -137 b 0 -171 22 -147 -4 -154 b 52 -199 6 -193 33 -193 b 69 -199 58 -200 63 -199 z',
        },
        noteheadTriangleRoundDownBlack: {
            x_min: 0,
            x_max: 334,
            y_min: -133.78604087938328,
            y_max: 136,
            ha: 269.7860408793833,
            o: 'm 252 -192 b 285 -176 269 -196 276 -187 b 468 52 346 -99 406 -23 b 481 79 477 62 481 71 b 465 104 481 88 475 95 b 441 124 456 109 449 117 b 249 196 380 174 314 194 b 13 104 157 196 69 154 b 0 86 6 98 0 92 b 7 69 0 82 3 76 b 202 -164 73 -7 137 -85 b 252 -192 216 -181 235 -186 z',
        },
        augmentationDot: {
            x_min: 0,
            x_max: 96,
            y_min: -57,
            y_max: 57,
            ha: 114,
            o: 'm 13 -82 b 16 -81 14 -82 14 -82 b 105 -73 46 -76 75 -76 b 131 -48 121 -72 131 -60 b 138 26 134 -24 138 0 b 137 48 138 33 138 40 b 108 82 134 71 125 82 b 95 81 104 82 99 82 b 33 71 75 78 53 75 b 4 46 20 68 6 62 b 0 -66 1 9 0 -29 b 13 -82 0 -73 1 -82 z',
        },
        tremolo1: {
            x_min: -158,
            x_max: 156.19381479578487,
            y_min: -88,
            y_max: 88,
            ha: 176,
            o: 'm -206 -127 b -194 -125 -203 -127 -199 -127 b 173 -36 -72 -94 50 -65 b 220 16 202 -29 215 -12 b 225 50 223 30 225 45 b 216 107 226 76 222 91 b 194 127 210 120 204 127 b 183 124 192 127 189 127 l -192 33 b -226 -9 -213 27 -222 14 b -228 -32 -226 -16 -228 -23 b -222 -108 -228 -58 -222 -82 b -206 -127 -222 -120 -217 -127 z',
        },
        flag8thUp: {
            x_min: 0,
            x_max: 261,
            y_min: -819,
            y_max: 0,
            ha: 819,
            o: 'm 265 -1171 b 351 -1035 301 -1130 336 -1087 b 376 -867 369 -979 376 -923 b 367 -755 376 -829 373 -792 b 233 -422 350 -632 311 -520 b 131 -291 199 -379 166 -334 b 65 -125 91 -239 66 -192 b 62 -75 65 -112 62 -91 b 42 0 62 -49 52 -24 l 35 0 b 0 -63 6 -13 0 -36 l 0 -144 b 96 -445 0 -255 29 -356 b 177 -547 124 -478 150 -514 b 308 -831 246 -629 298 -721 b 317 -890 310 -851 317 -871 b 311 -919 317 -900 315 -910 b 256 -1005 297 -950 282 -984 b 228 -1068 233 -1024 228 -1045 b 230 -1106 228 -1080 229 -1093 b 240 -1162 232 -1125 239 -1143 b 251 -1179 242 -1174 246 -1179 b 265 -1171 255 -1179 259 -1176 z',
        },
        flag8thDown: {
            x_min: 0,
            x_max: 261,
            y_min: 0,
            y_max: 819,
            ha: 819,
            o: 'm 265 1171 b 251 1179 259 1176 255 1179 b 240 1162 246 1179 242 1174 b 230 1106 239 1143 232 1125 b 228 1068 229 1093 228 1080 b 256 1005 228 1045 233 1024 b 311 919 282 984 297 950 b 317 890 315 910 317 900 b 308 831 317 871 310 851 b 177 547 298 721 246 629 b 96 445 150 514 124 478 b 0 144 29 356 0 255 l 0 63 b 35 0 0 36 6 13 l 42 0 b 62 75 52 24 62 49 b 59 117 62 91 59 104 b 131 291 60 183 91 239 b 233 422 166 334 199 379 b 367 755 311 520 350 632 b 376 867 373 792 376 829 b 351 1035 376 923 369 979 b 265 1171 336 1087 301 1130 z',
        },
        flag16thUp: {
            x_min: 0,
            x_max: 327.1591498636094,
            y_min: -819.3972596310256,
            y_max: 0,
            ha: 819.3972596310256,
            o: 'm 415 -1179 b 435 -1168 423 -1182 429 -1174 b 451 -1138 442 -1159 446 -1149 b 465 -1020 464 -1102 467 -1064 b 461 -962 464 -1004 464 -984 b 471 -821 467 -916 472 -870 b 465 -721 472 -791 467 -756 b 415 -520 459 -651 441 -585 b 200 -245 370 -408 284 -327 b 96 -114 160 -206 118 -168 b 75 -24 84 -85 85 -53 b 59 0 72 -16 72 0 b 53 -1 58 0 56 -1 b 27 -32 40 -6 27 -10 b 29 -68 27 -43 29 -55 b 10 -79 20 -69 13 -72 b 1 -109 6 -89 1 -99 b 0 -170 0 -130 0 -148 b 35 -410 0 -252 12 -333 b 258 -793 76 -557 156 -681 b 409 -1158 350 -896 410 -1014 b 415 -1179 409 -1165 405 -1175 z m 413 -816 b 331 -681 392 -769 364 -723 b 145 -420 266 -596 189 -521 b 86 -281 125 -374 102 -330 b 156 -370 105 -312 128 -343 b 318 -539 210 -425 269 -478 b 413 -816 383 -621 420 -713 z',
        },
        flag16thDown: {
            x_min: 0,
            x_max: 327.1591498636094,
            y_min: 0,
            y_max: 819,
            ha: 819,
            o: 'm 59 0 b 75 24 72 0 72 16 b 96 114 85 53 84 85 b 200 245 118 168 160 206 b 415 520 284 327 370 408 b 465 721 441 585 459 651 b 471 821 467 756 472 791 b 461 962 472 870 467 916 b 465 1020 464 984 464 1004 b 451 1138 467 1064 464 1102 b 435 1168 446 1149 442 1159 b 418 1179 431 1172 425 1179 l 415 1179 b 408 1169 409 1176 408 1174 b 409 1158 408 1165 409 1161 b 258 793 410 1014 350 896 b 35 410 156 681 76 557 b 0 170 12 333 0 252 l 0 88 b 29 7 0 71 6 23 b 59 0 33 4 58 0 z m 86 281 b 145 420 102 330 125 374 b 331 681 189 521 266 596 b 413 816 364 723 392 769 b 415 791 413 808 415 799 b 318 539 415 698 377 613 b 156 370 269 478 210 425 b 86 281 128 343 105 312 z',
        },
        flag32ndUp: {
            x_min: -0.19862981551275186,
            x_max: 268.0942440943661,
            y_min: -849.4710740978672,
            y_max: 149.0769891455102,
            ha: 998.5480632433774,
            o: 'm 323 -1223 b 351 -1198 337 -1227 344 -1210 b 359 -1184 354 -1194 356 -1188 b 386 -999 377 -1122 387 -1060 b 341 -783 386 -927 372 -855 b 330 -736 334 -769 330 -753 b 333 -708 330 -727 330 -717 b 344 -621 340 -678 344 -649 b 341 -579 344 -608 343 -593 b 328 -500 338 -553 328 -526 b 331 -475 328 -491 328 -484 b 347 -370 343 -438 348 -402 b 151 27 348 -212 288 -56 b 53 176 98 59 50 102 b 45 197 53 183 48 192 b 33 215 40 203 40 216 l 30 215 b 6 194 22 212 9 209 b 0 120 3 170 -1 145 b 0 -43 4 65 0 13 b 0 -98 0 -60 1 -79 b 4 -276 0 -157 6 -216 b 7 -456 4 -337 7 -397 b 66 -638 7 -523 22 -585 b 158 -724 94 -671 127 -697 b 318 -1011 246 -801 295 -899 b 321 -1044 321 -1021 321 -1032 b 312 -1152 321 -1080 312 -1116 b 317 -1192 312 -1165 314 -1179 b 323 -1223 320 -1202 311 -1220 z m 285 -376 b 121 -180 249 -289 173 -245 b 91 -105 104 -158 92 -135 b 288 -354 181 -144 288 -269 b 285 -376 288 -363 287 -370 z m 275 -657 b 111 -492 226 -589 163 -547 b 65 -376 78 -456 66 -418 b 71 -323 65 -360 68 -341 b 275 -657 164 -418 265 -504 z',
        },
        flag32ndDown: {
            x_min: -2.800802874905624,
            x_max: 268.09424409436605,
            y_min: -169.07698914551014,
            y_max: 829.4710740978672,
            ha: 998.5480632433773,
            o: 'm 323 1194 b 317 1164 311 1191 320 1174 b 312 1123 314 1151 312 1136 b 321 1015 312 1087 321 1051 b 318 982 321 1004 321 992 b 158 696 295 870 246 772 b 66 609 127 668 94 642 b 7 428 22 556 7 494 b 4 248 7 369 4 308 b -1 78 6 187 -10 137 b 0 14 0 59 0 32 l 0 -148 b 6 -223 0 -174 3 -199 b 30 -243 9 -238 22 -240 l 33 -243 b 45 -226 40 -245 40 -232 b 53 -204 48 -220 53 -212 b 151 -56 50 -131 98 -88 b 347 341 288 27 348 183 b 331 446 348 373 343 409 b 328 471 328 455 328 462 b 341 550 328 497 338 524 b 344 592 343 564 344 579 b 333 680 344 621 340 649 b 330 707 330 688 330 698 b 341 755 330 724 334 740 b 386 971 372 827 386 899 b 359 1155 387 1031 377 1093 b 351 1169 356 1159 354 1165 b 323 1194 344 1181 337 1198 z m 275 628 b 71 294 265 475 164 389 b 65 347 68 312 65 331 b 111 464 66 389 78 428 b 275 628 163 518 226 560 z m 285 347 b 288 325 287 341 288 334 b 91 76 288 240 181 115 b 121 151 92 107 104 130 b 285 347 173 216 249 261 z',
        },
        flag64thUp: {
            x_min: -4,
            x_max: 282,
            y_min: -823.5430338167067,
            y_max: 347,
            ha: 1170.5430338167066,
            o: 'm 350 -1185 b 380 -1162 364 -1189 374 -1175 b 406 -1022 399 -1119 406 -1071 b 359 -798 406 -945 384 -871 b 348 -756 353 -785 348 -772 b 350 -744 348 -753 350 -749 b 363 -621 356 -704 363 -664 b 360 -580 363 -608 363 -593 b 359 -560 359 -573 359 -567 b 373 -490 359 -536 366 -513 b 393 -346 386 -444 393 -395 b 387 -269 393 -320 390 -294 b 348 -127 382 -219 348 -173 b 351 -104 348 -120 348 -111 b 353 -65 351 -91 353 -78 b 341 37 353 -26 348 6 b 226 215 323 108 278 164 b 86 336 181 258 127 288 b 62 395 72 353 62 370 b 42 481 62 423 55 454 b 27 500 37 488 36 500 b 24 498 26 500 26 500 b -1 480 14 497 1 492 b -6 444 -4 467 -6 455 l -6 435 b -1 341 -1 403 -1 372 l -1 266 b 6 156 -1 230 0 193 b 13 35 12 117 13 75 l 13 -35 b 14 -85 13 -52 14 -68 b 29 -276 19 -150 33 -213 b 20 -448 24 -334 20 -392 b 24 -534 20 -477 22 -505 b 114 -708 30 -605 59 -664 b 197 -780 143 -732 171 -755 b 344 -1153 301 -884 341 -1011 b 343 -1172 344 -1159 343 -1166 b 350 -1185 343 -1176 344 -1182 z m 287 -88 b 62 193 186 -17 79 48 b 229 52 121 144 174 98 b 289 -33 256 29 274 -3 b 295 -56 294 -42 295 -49 b 287 -88 295 -66 292 -76 z m 298 -410 b 118 -235 238 -351 176 -295 b 76 -88 82 -197 78 -147 b 268 -252 137 -153 203 -202 b 330 -360 304 -279 330 -315 b 323 -402 330 -373 327 -387 b 311 -418 318 -413 315 -418 b 298 -410 307 -418 302 -415 z m 300 -691 b 117 -508 243 -616 168 -575 b 82 -408 94 -480 82 -448 b 84 -379 82 -397 82 -387 b 259 -553 135 -451 206 -492 b 301 -667 287 -583 301 -619 b 300 -691 301 -674 301 -683 z',
        },
        flag64thDown: {
            x_min: -5,
            x_max: 281,
            y_min: -375,
            y_max: 795.5430338167066,
            ha: 1170.5430338167066,
            o: 'm 348 1145 b 341 1132 343 1142 341 1136 b 343 1113 341 1126 343 1119 b 196 740 340 971 300 844 b 112 668 170 714 141 691 b 23 494 58 624 29 564 b 19 408 20 465 19 436 b 27 236 19 351 23 294 b 13 45 32 173 17 109 b 12 -6 13 27 12 12 l 12 -75 b 4 -196 12 -115 10 -157 b -3 -307 -1 -233 -3 -271 l -3 -382 b -7 -475 -3 -412 -3 -444 l -7 -484 b -3 -520 -7 -495 -6 -507 b 23 -539 0 -533 13 -537 b 26 -540 24 -540 24 -540 b 40 -521 35 -540 36 -528 b 60 -435 53 -494 60 -464 b 85 -376 60 -410 71 -393 b 225 -255 125 -328 180 -298 b 340 -78 276 -204 321 -148 b 351 24 347 -46 351 -14 b 350 63 351 37 350 50 b 347 86 347 71 347 79 b 386 229 347 132 380 179 b 392 305 389 253 392 279 b 372 449 392 354 384 403 b 357 520 364 472 357 495 b 359 540 357 527 357 533 b 361 580 361 553 361 567 b 348 704 361 624 354 664 b 347 716 348 708 347 713 b 357 757 347 732 351 744 b 405 982 383 831 405 904 b 379 1122 405 1031 397 1079 b 348 1145 373 1135 363 1149 z m 298 651 b 300 626 300 642 300 634 b 258 513 300 579 285 543 b 82 338 204 452 134 410 b 81 367 81 347 81 357 b 115 468 81 408 92 439 b 298 651 167 534 242 576 z m 297 370 b 310 377 301 374 305 377 b 321 361 314 377 317 373 b 328 320 325 347 328 333 b 266 212 328 275 302 239 b 75 48 202 161 135 112 b 117 194 76 107 81 157 b 297 370 174 255 236 311 z m 285 48 b 294 16 291 36 294 26 b 288 -7 294 9 292 1 b 228 -92 272 -37 255 -69 b 60 -233 173 -138 120 -184 b 285 48 78 -88 184 -23 z',
        },
        flag128thUp: {
            x_min: 0,
            x_max: 252,
            y_min: -804,
            y_max: 530,
            ha: 1334,
            o: 'm 298 -1158 b 328 -1126 312 -1158 320 -1139 b 330 -1116 330 -1123 330 -1119 b 347 -996 343 -1076 347 -1037 b 328 -837 347 -943 338 -890 b 320 -778 324 -816 320 -798 b 330 -733 320 -763 323 -749 b 340 -665 338 -714 337 -688 b 341 -645 340 -660 341 -652 b 333 -534 341 -609 333 -572 b 343 -471 333 -513 334 -492 b 361 -366 356 -436 361 -402 b 331 -202 361 -311 348 -256 b 328 -187 330 -197 328 -193 b 331 -179 328 -184 328 -181 b 363 -55 353 -137 363 -96 b 337 79 363 -12 351 33 b 327 114 333 92 327 104 b 344 144 327 124 331 132 b 359 174 353 150 357 163 b 361 228 360 193 361 210 b 243 517 361 337 325 435 b 147 596 213 546 179 569 b 75 708 111 626 75 655 b 62 744 75 723 68 733 b 50 763 58 752 58 763 b 46 762 49 763 48 762 b 17 742 36 757 22 757 b 0 697 14 726 0 711 b 1 595 0 662 3 631 b 0 469 0 552 0 511 b 1 429 0 456 0 442 b 22 289 6 382 22 337 b 24 128 22 238 24 184 b 22 66 24 108 23 86 b 19 -19 20 37 19 10 b 20 -132 19 -56 20 -95 b 13 -276 20 -180 19 -229 b 9 -359 10 -304 9 -330 b 12 -487 9 -402 12 -445 b 56 -582 12 -526 29 -554 b 197 -742 107 -632 160 -681 b 288 -1100 265 -851 276 -976 b 288 -1122 288 -1107 287 -1115 b 287 -1145 289 -1129 287 -1138 b 298 -1158 287 -1153 288 -1158 z m 304 150 b 75 475 229 256 112 334 b 304 150 233 357 305 287 z m 271 -73 b 127 72 233 -14 179 26 b 81 167 96 98 81 127 b 84 194 81 176 82 184 b 271 -73 148 102 242 39 z m 279 -396 b 132 -223 233 -330 180 -279 b 81 -112 104 -192 81 -156 b 82 -91 81 -105 81 -98 b 279 -396 167 -125 269 -281 z m 249 -609 b 69 -357 197 -520 88 -471 b 249 -609 131 -441 229 -498 z',
        },
        flag128thDown: {
            x_min: -0.8888888888888888,
            x_max: 252,
            y_min: -580,
            y_max: 754,
            ha: 1334,
            o: 'm 298 1086 b 287 1073 288 1086 287 1081 b 288 1050 287 1066 289 1057 b 288 1028 287 1043 288 1035 b 197 670 276 904 265 779 b 56 510 160 609 107 560 b 12 415 29 482 12 454 b 9 287 12 373 9 330 b 13 204 9 258 10 232 b 20 60 19 157 20 108 b 19 -53 20 23 19 -16 b 22 -138 19 -82 20 -109 b 24 -200 23 -158 24 -180 b 22 -361 24 -256 22 -310 b 1 -501 22 -409 6 -454 b 0 -541 0 -514 0 -528 b 0 -667 0 -583 -3 -624 b 0 -809 0 -675 -3 -791 b 46 -834 4 -825 36 -829 b 50 -835 48 -834 49 -835 b 62 -816 58 -835 58 -824 b 75 -780 68 -805 75 -795 b 147 -668 75 -727 111 -698 b 243 -589 179 -641 213 -618 b 361 -300 325 -507 361 -409 b 359 -246 361 -282 360 -265 b 344 -216 357 -235 353 -222 b 327 -186 331 -204 327 -196 b 337 -151 327 -176 333 -164 b 363 -17 351 -105 363 -60 b 331 107 363 24 353 65 b 328 115 328 109 328 112 b 331 130 328 121 330 125 b 361 294 348 184 361 239 b 343 399 361 330 356 364 b 333 462 334 420 333 441 b 341 573 333 500 341 537 b 340 593 341 580 340 588 b 330 661 337 616 338 642 b 320 706 323 677 320 691 b 328 765 320 726 324 744 b 347 924 338 818 347 871 b 330 1044 347 965 343 1004 b 328 1054 330 1047 330 1051 b 298 1086 320 1067 312 1086 z m 249 537 b 69 285 229 426 131 369 b 249 537 88 399 197 448 z m 279 324 b 82 19 269 209 167 53 b 81 40 81 26 81 33 b 132 151 81 84 104 120 b 279 324 180 207 233 258 z m 271 1 b 84 -266 242 -111 148 -174 b 81 -239 82 -256 81 -248 b 127 -144 81 -199 96 -170 b 271 1 179 -98 233 -58 z m 304 -222 b 75 -547 305 -359 233 -429 b 304 -222 112 -406 229 -328 z',
        },
        accidentalFlat: {
            x_min: 1,
            x_max: 209,
            y_min: -208,
            y_max: 472,
            ha: 680,
            o: 'm 29 -300 b 46 -289 33 -300 39 -297 b 107 -243 65 -274 86 -258 b 301 127 233 -153 301 -30 b 298 186 301 147 301 166 b 190 297 291 256 251 297 b 147 289 177 297 163 294 b 86 265 127 284 107 274 l 85 264 l 85 301 b 91 465 85 356 88 410 b 94 559 91 497 94 527 b 84 651 94 589 91 621 b 66 680 81 661 81 680 l 65 680 b 37 645 49 678 37 665 b 33 523 36 605 32 563 l 33 478 b 26 223 33 393 29 308 b 1 -141 22 101 1 -19 b 17 -287 1 -189 4 -239 b 29 -300 20 -295 23 -300 z m 68 -105 b 76 12 71 -68 72 -29 b 81 107 79 43 81 75 l 86 109 b 171 135 114 121 141 135 b 204 128 181 135 193 132 b 238 92 228 120 239 108 b 230 63 238 84 236 75 b 68 -105 193 -10 132 -59 z',
        },
        accidentalNatural: {
            x_min: 0,
            x_max: 213.5,
            y_min: -456,
            y_max: 462,
            ha: 918,
            o: 'm 255 -657 b 281 -624 271 -657 275 -636 b 285 -599 282 -615 285 -608 b 292 -300 288 -500 289 -400 b 289 -161 292 -253 289 -207 b 300 128 292 -65 297 32 b 304 168 300 128 302 150 l 304 173 l 305 190 l 305 199 l 307 225 b 304 259 307 229 310 246 b 272 298 297 274 302 305 b 63 266 204 279 134 272 b 72 514 68 348 72 432 b 71 595 72 541 72 567 b 56 665 71 619 66 642 b 17 579 9 651 17 608 b 3 144 19 433 7 289 b 0 -7 1 94 0 43 b 3 -134 0 -50 1 -92 b 7 -219 3 -163 7 -192 b 35 -251 7 -243 17 -251 b 49 -249 39 -251 43 -251 l 223 -223 l 230 -222 l 230 -359 b 223 -516 230 -410 223 -464 b 236 -619 223 -550 226 -585 b 255 -657 240 -634 236 -657 z m 58 -63 b 55 81 56 -14 53 33 l 56 99 b 85 99 65 99 75 98 b 232 108 134 104 183 107 l 240 109 l 236 66 b 232 -48 235 29 232 -10 b 58 -81 174 -63 115 -73 z',
        },
        accidentalSharp: {
            x_min: -22,
            x_max: 390,
            y_min: -384,
            y_max: 383,
            ha: 767,
            o: 'm 202 -553 b 219 -526 213 -552 216 -536 b 226 -471 225 -507 226 -488 b 225 -425 226 -455 225 -441 b 226 -392 225 -415 225 -402 b 233 -305 229 -363 232 -334 l 297 -292 b 331 -469 300 -353 311 -412 b 347 -485 333 -477 338 -485 b 363 -469 356 -487 359 -477 b 374 -418 373 -454 374 -435 b 376 -382 376 -405 376 -393 b 372 -276 376 -347 373 -311 l 455 -259 b 550 -156 534 -243 544 -232 b 550 -109 550 -137 552 -124 b 526 -78 549 -91 541 -78 l 523 -78 b 507 -79 517 -78 513 -78 b 403 -101 474 -88 438 -95 l 379 -105 b 382 -42 380 -85 380 -63 b 384 96 383 4 384 50 b 503 131 425 107 464 118 b 549 173 524 138 543 150 b 562 249 554 199 562 223 b 554 294 562 264 560 279 b 536 315 549 308 544 315 l 533 315 b 517 312 528 315 523 315 b 382 266 472 294 428 279 l 377 344 b 359 531 374 406 372 469 b 348 552 356 539 357 552 l 347 552 l 343 552 b 315 528 331 549 317 544 l 315 501 b 320 249 315 416 318 333 l 243 232 b 239 361 243 275 242 318 b 226 425 238 383 238 403 b 199 359 194 409 199 382 b 193 223 196 312 194 268 b 72 202 153 215 112 209 b 4 118 13 192 4 183 b 10 66 0 102 12 84 b 33 29 7 39 14 30 b 48 32 37 29 42 30 b 187 55 95 39 141 46 l 183 -75 b 176 -145 181 -99 179 -122 b 16 -179 122 -156 69 -166 b -32 -232 -14 -186 -32 -197 b -17 -331 -32 -266 -19 -298 b -1 -356 -17 -347 -13 -354 b 12 -353 1 -356 6 -354 b 167 -320 63 -341 115 -331 b 166 -377 166 -338 166 -357 b 189 -526 166 -428 171 -477 b 202 -553 192 -536 189 -553 z m 240 -132 b 243 -37 242 -101 242 -69 b 245 65 245 -3 245 30 b 315 79 269 69 292 73 b 301 -120 308 13 305 -53 z',
        },
        accidentalDoubleSharp: {
            x_min: 0,
            x_max: 287,
            y_min: -159,
            y_max: 159,
            ha: 318,
            o: 'm 84 -229 b 107 -216 91 -229 98 -225 b 200 -125 138 -186 167 -154 b 232 -95 212 -115 222 -105 b 347 -189 271 -125 310 -157 b 370 -200 356 -196 363 -200 b 396 -179 380 -200 389 -192 b 412 -102 410 -154 406 -125 b 377 -27 410 -69 400 -46 l 325 14 b 402 91 350 42 374 68 b 413 127 410 96 413 107 b 382 200 409 148 397 176 b 350 229 370 220 360 229 b 314 210 340 229 328 223 b 274 174 300 199 285 187 b 212 104 252 151 232 128 b 92 187 173 132 132 161 b 78 193 86 192 82 193 b 68 190 75 193 72 193 b 48 179 62 186 53 187 b 40 137 43 168 40 154 b 81 16 40 92 56 32 b 107 -3 89 10 98 4 b 14 -94 76 -32 45 -62 b 0 -124 6 -102 0 -114 b 12 -154 0 -134 3 -144 b 62 -215 26 -176 48 -193 b 84 -229 69 -225 76 -229 z',
        },
        accidentalDoubleFlat: {
            x_min: 0,
            x_max: 359,
            y_min: -220,
            y_max: 446,
            ha: 666,
            o: 'm 43 -317 b 72 -301 55 -317 63 -310 b 160 -186 108 -268 134 -226 b 236 -60 186 -145 212 -102 b 233 -131 235 -85 233 -108 b 239 -220 233 -161 235 -190 b 259 -246 240 -233 239 -240 b 301 -228 284 -252 291 -238 b 465 -7 369 -163 416 -85 b 517 173 500 48 517 108 b 451 307 517 229 505 284 b 409 315 436 312 422 315 b 331 287 382 315 356 305 b 311 274 324 282 320 274 l 310 274 l 310 566 b 305 621 310 585 312 603 b 294 642 301 628 305 642 l 292 642 b 264 622 282 641 266 636 b 253 575 259 606 256 590 b 246 418 248 523 246 471 b 248 243 246 360 248 302 l 248 187 b 164 238 220 225 193 238 b 85 213 140 238 112 226 b 84 229 85 220 84 225 b 86 315 85 258 86 287 b 81 528 86 386 82 458 b 71 582 81 547 78 566 b 56 603 66 590 68 603 l 53 603 b 23 580 40 600 26 598 b 19 537 20 566 19 552 b 20 514 19 530 19 521 b 26 390 24 472 26 432 b 14 66 26 282 16 174 b 0 -168 13 -12 0 -91 b 12 -279 0 -206 3 -242 b 30 -314 16 -294 14 -308 b 43 -317 35 -317 39 -317 z m 301 -72 b 302 7 302 -45 302 -19 l 302 86 b 351 158 304 121 321 145 b 383 166 361 163 373 166 b 435 143 402 166 419 157 b 445 127 441 138 445 132 b 441 114 445 122 444 118 b 301 -72 397 49 354 -14 z m 75 -147 b 73 30 75 -86 75 -29 b 118 82 73 62 92 76 b 132 84 124 84 128 84 b 190 52 156 84 174 69 b 193 40 192 49 193 45 b 192 33 193 37 193 35 b 75 -147 157 -30 125 -95 z',
        },
        accidentalParensLeft: {
            x_min: 0,
            x_max: 130.18934911242604,
            y_min: -270,
            y_max: 267.6082500723851,
            ha: 537.6082500723851,
            o: 'm 107 -389 b 127 -374 114 -389 120 -384 b 141 -347 132 -367 137 -357 b 151 -294 148 -330 151 -311 b 122 -207 151 -265 141 -236 b 63 -65 94 -164 72 -117 b 59 -10 60 -46 59 -27 b 145 223 59 78 94 153 b 187 354 176 262 189 305 b 177 384 187 364 190 380 b 143 373 166 387 153 383 b 124 354 137 367 130 361 b 0 -35 33 240 0 108 l 0 -92 b 85 -372 4 -193 27 -287 b 107 -389 92 -383 99 -389 z',
        },
        accidentalParensRight: {
            x_min: -0.4444444444444445,
            x_max: 139,
            y_min: -275,
            y_max: 277,
            ha: 552,
            o: 'm 58 -396 b 96 -354 75 -396 85 -370 b 200 13 168 -238 200 -111 b 153 268 200 109 184 190 b 49 392 131 320 101 364 b 26 399 40 397 33 399 b 0 366 10 399 0 387 b 0 318 -1 350 0 334 l 0 291 b 27 238 -3 266 7 253 b 143 9 105 180 143 98 b 141 -20 143 -1 143 -10 b 63 -225 135 -92 108 -164 b 36 -307 45 -251 36 -278 b 40 -344 36 -320 37 -331 b 42 -356 42 -347 42 -351 b 58 -396 42 -374 37 -396 z',
        },
        accidentalQuarterToneFlatStein: {
            x_min: 0,
            x_max: 208,
            y_min: -240,
            y_max: 440,
            ha: 680,
            o: 'm 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z',
        },
        accidentalThreeQuarterTonesFlatZimmermann: {
            x_min: 0,
            x_max: 422,
            y_min: -240,
            y_max: 440,
            ha: 680,
            o: 'm 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 336 -346 b 353 -336 340 -346 346 -343 b 413 -289 372 -320 393 -304 b 608 81 540 -199 608 -76 b 605 140 608 101 608 120 b 497 251 598 210 557 251 b 454 243 484 251 469 248 b 393 219 433 238 413 228 l 392 217 l 392 255 b 397 419 392 310 395 364 b 400 513 397 451 400 481 b 390 605 400 543 397 575 b 373 634 387 615 387 634 l 372 634 b 344 599 356 632 344 619 b 340 477 343 559 338 517 l 340 432 b 333 177 340 347 336 262 b 308 -187 328 55 308 -65 b 324 -333 308 -235 311 -285 b 336 -346 327 -341 330 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z m 374 -151 b 383 -35 377 -114 379 -75 b 387 60 386 -3 387 29 l 393 63 b 478 89 420 75 448 89 b 511 82 488 89 500 86 b 544 46 534 73 546 62 b 537 17 544 37 543 29 b 374 -151 500 -56 439 -105 z',
        },
        accidentalQuarterToneSharpStein: {
            x_min: 0,
            x_max: 300,
            y_min: -338,
            y_max: 351,
            ha: 689,
            o: 'm 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 l 35 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z',
        },
        accidentalThreeQuarterTonesSharpStein: {
            x_min: -23,
            x_max: 388,
            y_min: -373,
            y_max: 445,
            ha: 818,
            o: 'm 114 -537 b 138 -475 137 -518 138 -495 b 147 -292 138 -413 144 -353 b 212 -278 168 -287 190 -282 b 243 -444 215 -333 225 -389 b 261 -467 248 -454 251 -465 b 281 -446 272 -469 276 -455 b 292 -347 292 -416 288 -384 b 288 -262 289 -320 288 -291 l 374 -245 b 376 -311 374 -266 374 -288 b 390 -456 379 -357 379 -405 b 416 -396 412 -436 415 -418 b 423 -287 420 -360 423 -323 b 422 -235 423 -269 423 -252 b 451 -229 432 -233 441 -232 b 547 -98 524 -215 547 -199 l 547 -89 b 521 -49 546 -59 540 -49 b 497 -52 516 -49 507 -49 b 418 -68 469 -56 444 -63 b 423 52 419 -29 422 12 b 426 140 425 81 425 109 b 495 160 449 145 472 153 b 552 219 526 170 546 189 b 559 279 557 240 553 262 b 530 341 559 324 552 341 b 490 331 520 341 507 338 b 432 311 471 324 452 318 b 449 552 436 392 442 471 b 452 588 451 563 452 575 b 446 622 452 599 451 611 b 436 641 444 629 448 641 b 418 628 428 641 420 636 b 409 602 413 621 410 611 b 386 297 396 501 390 399 b 297 274 356 288 327 281 b 291 403 295 317 294 360 b 274 550 288 452 284 501 b 259 569 271 564 265 569 b 240 559 253 569 248 563 b 230 537 232 554 230 546 l 230 488 b 233 369 230 448 232 409 b 236 261 236 333 238 297 b 156 245 210 255 183 251 b 154 396 154 295 154 346 b 150 416 154 403 153 410 b 140 438 145 423 150 438 l 138 438 b 118 413 128 436 118 428 b 112 354 118 393 114 374 b 109 238 109 315 109 276 b 49 226 89 233 69 230 b 3 163 16 222 3 202 b 7 91 3 138 9 114 b 29 62 7 69 13 62 b 39 63 32 62 35 63 b 104 73 60 66 82 71 b 101 -10 104 46 102 17 l 92 -132 l 10 -150 b -33 -204 -19 -157 -33 -170 b -19 -310 -32 -240 -19 -274 b -6 -324 -19 -321 -13 -324 b 6 -323 -1 -324 1 -324 b 82 -307 32 -317 58 -311 b 81 -376 82 -330 81 -353 b 114 -537 81 -431 94 -484 z m 294 -92 b 297 -37 295 -73 295 -56 b 300 49 300 -9 300 20 l 300 108 b 379 127 325 114 353 120 b 374 -76 376 59 374 -9 b 294 -92 347 -82 320 -86 z m 154 -120 b 157 20 154 -73 156 -26 b 158 82 158 40 158 62 b 230 95 183 86 206 89 b 225 0 229 63 226 32 b 217 -107 223 -35 220 -71 z',
        },
        accidentalBuyukMucennebFlat: {
            x_min: 1.8692317181955784,
            x_max: 287,
            y_min: -248,
            y_max: 432.4720949426819,
            ha: 680.4720949426819,
            o: 'm 410 128 b 302 239 403 199 363 239 b 259 232 289 239 275 236 b 199 207 239 226 219 216 l 197 206 l 197 243 l 197 251 b 347 317 248 272 298 295 b 376 347 360 324 372 334 b 389 435 387 376 393 405 b 348 454 384 462 377 465 b 202 387 300 432 251 409 b 203 408 203 395 203 402 l 203 431 b 347 490 252 451 300 469 b 376 517 360 495 372 505 b 389 599 387 546 393 572 b 348 616 384 625 377 628 l 203 556 b 196 593 202 569 199 582 b 179 622 193 603 193 622 l 177 622 b 150 588 161 621 150 608 b 147 533 150 570 148 552 b 29 488 108 517 69 503 b 3 455 12 482 3 472 b 12 353 1 422 9 389 b 145 408 56 372 101 389 b 145 363 145 392 145 377 l 29 315 b 3 281 12 310 3 298 b 12 170 1 245 9 209 l 141 226 b 138 166 140 206 138 186 b 114 -199 134 43 115 -76 b 130 -344 114 -246 117 -297 b 141 -357 132 -353 135 -357 b 158 -347 145 -357 151 -354 b 219 -301 177 -331 199 -315 b 413 69 346 -210 413 -88 b 410 128 413 89 413 108 z m 350 35 b 343 6 350 26 348 17 b 180 -163 308 -69 245 -117 b 189 -46 183 -125 184 -86 b 193 49 192 -14 193 17 l 199 52 b 284 78 226 63 253 78 b 317 71 294 78 305 75 b 350 35 340 62 351 50 z',
        },
        accidentalBakiyeFlat: {
            x_min: 1.8692317181955784,
            x_max: 287,
            y_min: -236,
            y_max: 444,
            ha: 680,
            o: 'm 141 -340 b 158 -330 145 -340 151 -337 b 219 -284 177 -314 199 -298 b 413 86 346 -193 413 -71 b 410 145 413 107 413 125 b 302 256 403 216 363 256 b 259 249 289 256 275 253 b 199 225 239 243 219 233 l 197 223 l 197 261 b 199 334 197 285 199 310 b 347 406 249 357 298 382 b 376 439 360 413 372 425 b 390 516 384 465 390 490 b 389 537 390 523 390 530 b 372 564 384 556 382 564 b 348 557 367 564 359 562 b 204 487 300 537 253 510 b 206 518 206 497 206 507 b 196 611 206 549 203 580 b 179 639 193 621 193 639 l 177 639 b 150 605 161 638 150 625 b 145 482 148 564 144 523 l 145 458 b 29 405 107 439 68 420 b 3 366 12 397 3 386 b 12 243 1 325 9 287 b 143 307 56 265 99 285 l 138 183 b 114 -181 134 60 114 -59 b 130 -327 114 -229 117 -279 b 141 -340 132 -336 135 -340 z m 180 -145 b 189 -29 183 -108 184 -69 b 193 66 192 3 193 35 l 199 69 b 284 95 226 81 253 95 b 317 88 294 95 305 92 b 350 52 340 79 351 68 b 343 23 350 43 348 35 b 180 -145 305 -50 245 -99 z',
        },
        accidentalKomaSharp: {
            x_min: 0,
            x_max: 300,
            y_min: -338,
            y_max: 351,
            ha: 689,
            o: 'm 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 l 35 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z',
        },
        accidentalKucukMucennebSharp: {
            x_min: -0.15206251809627475,
            x_max: 359,
            y_min: -420,
            y_max: 343,
            ha: 763,
            o: 'm 236 -605 b 262 -543 256 -583 261 -564 b 269 -423 268 -503 269 -464 b 266 -340 269 -396 268 -367 l 361 -318 b 405 -276 384 -312 399 -298 b 413 -189 412 -248 416 -219 b 395 -164 412 -171 409 -164 b 382 -166 392 -164 387 -164 b 264 -193 343 -176 304 -184 b 269 -102 265 -163 268 -132 b 454 -62 331 -89 392 -78 b 501 -23 477 -58 494 -45 b 517 62 511 6 517 33 b 487 112 517 95 513 112 b 471 111 482 112 477 112 b 274 66 406 95 340 81 b 276 138 275 91 276 114 b 350 154 301 144 325 148 b 402 203 377 160 396 176 b 412 284 408 230 412 258 b 392 311 412 302 406 311 b 372 308 386 311 379 310 b 287 291 343 301 314 297 l 295 405 b 298 441 297 416 298 428 b 292 475 298 452 297 464 b 282 494 289 482 294 494 b 264 481 274 494 266 490 b 255 455 259 474 256 464 b 239 282 248 397 243 340 b 148 268 209 278 179 274 b 62 164 62 252 62 253 l 62 132 b 79 108 60 117 65 108 l 86 108 l 230 130 b 229 92 230 118 229 105 b 228 56 228 79 228 68 b 66 20 173 43 120 32 b 0 -59 6 7 3 1 l 0 -138 b 14 -160 -1 -156 4 -160 b 27 -158 19 -160 23 -160 b 222 -112 92 -141 157 -127 b 220 -203 220 -143 220 -173 b 147 -217 196 -207 171 -213 b 89 -288 92 -228 89 -229 b 95 -347 85 -305 96 -325 b 112 -374 92 -366 98 -374 b 125 -373 117 -374 121 -374 l 220 -351 b 222 -458 220 -386 220 -422 b 236 -605 223 -504 225 -552 z',
        },
        accidentalKoron: {
            x_min: 0,
            x_max: 303,
            y_min: -462.4598053473055,
            y_max: 180,
            ha: 642.4598053473055,
            o: 'm 59 -665 b 72 -649 69 -662 72 -657 b 69 -626 72 -642 69 -634 b 69 -622 69 -625 69 -624 l 69 -600 b 55 -156 60 -456 68 -311 b 86 -170 66 -166 76 -170 b 112 -163 95 -170 104 -166 b 390 -35 204 -120 298 -78 b 436 -1 409 -27 436 -27 b 396 46 436 22 413 33 l 382 55 b 46 243 271 121 157 179 b 12 259 29 253 17 259 b 0 219 1 259 0 248 b 3 -372 0 22 3 -176 b 6 -616 3 -454 6 -536 b 59 -665 6 -638 40 -671 z m 55 199 b 363 24 156 141 258 84 b 55 -118 259 -24 160 -69 z',
        },
        accidentalSori: {
            x_min: 0,
            x_max: 434,
            y_min: -295,
            y_max: 325,
            ha: 620,
            o: 'm 194 -425 b 196 -409 194 -418 196 -413 b 194 -194 196 -337 196 -266 b 364 -127 251 -171 308 -150 b 361 -321 363 -192 364 -256 b 410 -387 360 -357 373 -377 b 413 -373 412 -382 413 -377 b 418 -114 418 -287 418 -200 l 418 -105 b 595 -35 477 -82 536 -59 b 625 0 612 -27 625 -22 b 593 48 624 23 618 39 l 419 117 b 423 370 419 202 423 285 b 426 403 423 382 426 393 b 418 436 426 415 425 426 b 384 468 409 449 399 468 b 369 448 370 468 369 459 b 369 436 369 444 369 441 l 369 428 l 369 423 b 367 138 369 328 367 233 l 353 143 l 192 207 l 192 367 b 173 406 192 383 184 396 b 151 422 167 413 160 422 b 144 420 148 422 147 422 b 137 403 138 416 137 410 l 137 392 l 137 229 b 33 271 102 243 68 256 b 13 276 26 274 19 276 b 0 262 6 276 0 272 b 35 199 1 239 0 212 l 138 160 b 140 -148 138 58 138 -45 b 56 -181 111 -158 84 -170 b 24 -215 35 -189 24 -199 b 29 -235 24 -220 26 -228 b 49 -253 35 -249 42 -253 b 78 -240 59 -253 69 -243 b 140 -216 98 -233 120 -225 l 140 -356 b 194 -425 140 -406 141 -406 z m 194 -125 b 193 138 194 -37 193 50 b 315 89 233 122 275 107 b 366 71 333 84 350 76 b 364 -58 366 27 366 -16 b 194 -125 308 -81 251 -104 z m 419 49 l 526 7 l 485 -10 l 419 -36 z',
        },
        articAccentAbove: {
            x_min: 0,
            x_max: 425,
            y_min: 0,
            y_max: 326,
            ha: 326,
            o: 'm 27 1 b 78 12 46 0 62 6 b 347 112 168 45 253 91 b 521 184 409 128 459 167 b 608 259 557 194 589 220 b 612 274 611 265 612 271 b 598 292 612 281 608 287 b 477 347 559 312 518 331 b 176 465 374 384 275 425 b 156 469 168 468 161 469 b 125 456 145 469 137 465 b 53 370 96 432 78 399 b 45 353 48 363 45 357 b 68 333 45 344 52 337 b 360 225 166 298 262 261 b 192 154 302 203 249 171 b 13 36 120 132 53 105 b 0 13 9 29 0 22 l 0 9 b 16 0 3 1 10 0 l 26 0 b 27 1 27 0 27 0 z',
        },
        articAccentBelow: {
            x_min: 0,
            x_max: 425,
            y_min: -326,
            y_max: 0,
            ha: 326,
            o: 'm 26 -469 l 27 -469 b 78 -458 46 -469 62 -464 b 347 -357 168 -426 253 -380 b 521 -285 409 -341 459 -302 b 608 -210 557 -276 589 -249 b 612 -196 611 -204 612 -200 b 598 -179 612 -189 608 -183 b 477 -122 559 -157 518 -138 b 176 -4 374 -85 275 -45 b 156 0 168 -1 161 0 b 125 -13 145 0 137 -4 b 53 -99 96 -37 78 -71 b 45 -117 48 -107 45 -112 b 68 -137 45 -125 52 -132 b 360 -245 166 -171 262 -209 b 192 -315 302 -266 249 -300 b 13 -433 120 -337 53 -366 b 0 -456 9 -442 0 -448 l 0 -461 b 16 -469 3 -468 10 -469 z',
        },
        articTenutoAbove: {
            x_min: 0.35192668236256364,
            x_max: 471.1238660564107,
            y_min: 0,
            y_max: 56,
            ha: 56,
            o: 'm 137 0 b 197 1 156 0 179 1 b 409 6 268 1 338 6 b 482 4 432 6 459 6 b 556 0 508 3 534 0 b 651 10 588 0 621 3 b 678 27 662 12 678 10 b 654 59 680 45 672 53 b 511 75 606 73 560 73 b 255 81 426 78 341 81 b 160 79 222 81 193 79 l 36 79 b 1 71 24 78 7 85 b 19 32 -3 56 9 43 b 45 16 26 24 36 20 b 137 0 76 3 108 0 z',
        },
        articTenutoBelow: {
            x_min: 0.35192668236256364,
            x_max: 471.1238660564107,
            y_min: -59,
            y_max: -3,
            ha: 56,
            o: 'm 137 -85 b 197 -84 156 -85 179 -84 b 409 -79 268 -84 338 -79 b 482 -81 432 -79 459 -79 b 556 -85 508 -82 534 -85 b 651 -75 588 -85 621 -82 b 678 -58 662 -73 678 -75 b 654 -26 680 -40 672 -32 b 511 -10 606 -12 560 -12 b 255 -4 426 -7 341 -4 b 160 -6 222 -4 193 -6 l 36 -6 b 1 -14 24 -7 7 0 b 19 -53 -3 -29 9 -42 b 45 -69 26 -60 36 -65 b 137 -85 76 -82 108 -85 z',
        },
        articStaccatoAbove: {
            x_min: 1.4151102965496913,
            x_max: 112,
            y_min: 0,
            y_max: 156,
            ha: 156,
            o: 'm 98 0 b 132 23 109 0 122 7 b 161 112 150 50 161 79 b 158 148 161 124 161 137 b 125 186 154 167 131 167 b 63 225 117 215 85 216 b 23 197 45 222 30 219 b 3 91 12 163 12 127 b 19 66 0 79 4 69 b 65 27 40 62 53 46 b 98 0 76 9 88 0 z',
        },
        articStaccatoBelow: {
            x_min: 1.4151102965496913,
            x_max: 112.08403222864916,
            y_min: -156,
            y_max: 0,
            ha: 156,
            o: 'm 132 -202 b 161 -112 151 -174 163 -145 b 158 -76 161 -101 161 -88 b 125 -39 153 -58 131 -58 b 63 0 115 -10 85 -9 b 23 -27 45 -3 30 -6 b 3 -134 12 -62 10 -98 b 19 -158 0 -145 4 -156 b 65 -197 40 -164 53 -179 b 98 -225 75 -216 88 -225 b 132 -202 109 -225 122 -217 z',
        },
        articStaccatissimoAbove: {
            x_min: 0,
            x_max: 139,
            y_min: 0,
            y_max: 411,
            ha: 411,
            o: 'm 104 0 b 144 115 143 29 138 75 b 197 423 158 217 180 320 b 200 454 199 433 200 444 b 181 540 200 482 193 513 b 112 592 167 573 141 592 b 55 567 92 592 72 585 b 0 490 32 546 3 527 l 0 484 b 27 279 14 416 14 347 b 84 20 43 193 52 104 b 96 0 86 13 92 6 z',
        },
        articStaccatissimoBelow: {
            x_min: 0,
            x_max: 139,
            y_min: -411,
            y_max: 0,
            ha: 411,
            o: 'm 88 -592 b 145 -567 108 -592 128 -585 b 200 -490 168 -546 197 -527 l 200 -484 b 173 -279 186 -416 186 -347 b 117 -20 157 -193 148 -104 b 104 0 114 -13 108 -6 l 96 0 b 56 -115 58 -29 62 -75 b 3 -423 42 -217 20 -320 b 0 -454 1 -433 0 -444 b 19 -540 0 -482 7 -513 b 88 -592 33 -573 59 -592 z',
        },
        articMarcatoAbove: {
            x_min: 0.04121419527862119,
            x_max: 396,
            y_min: 0,
            y_max: 328.0000000000001,
            ha: 328.0000000000001,
            o: 'm 477 0 b 510 13 488 0 500 6 b 570 124 546 40 563 81 b 547 183 570 147 560 166 b 356 422 487 265 405 330 b 346 442 354 429 350 436 l 346 444 b 318 465 340 456 330 464 l 312 469 b 274 449 294 480 284 461 b 242 413 262 438 253 425 b 56 196 177 343 112 274 b 1 56 26 154 13 105 b 27 20 -4 35 9 20 b 42 23 32 20 37 20 b 84 53 59 29 72 39 b 255 269 141 125 193 200 b 275 229 262 255 266 242 b 448 14 324 151 390 86 b 477 0 456 4 467 0 z',
        },
        articMarcatoBelow: {
            x_min: 0,
            x_max: 395.9587858047214,
            y_min: -328.0000000000001,
            y_max: 0,
            ha: 328.0000000000001,
            o: 'm 258 -469 b 297 -449 276 -480 287 -461 b 328 -413 308 -438 317 -425 b 514 -196 393 -343 458 -274 b 569 -56 544 -154 557 -105 b 543 -20 575 -35 562 -20 b 528 -23 539 -20 533 -20 b 487 -53 511 -29 498 -39 b 315 -269 429 -125 377 -200 b 295 -229 308 -255 304 -242 b 122 -14 246 -151 180 -86 b 94 0 114 -4 104 0 b 60 -13 82 0 71 -6 b 0 -124 24 -40 7 -81 b 23 -183 0 -147 10 -166 b 215 -422 84 -265 166 -330 b 225 -442 216 -429 220 -436 l 225 -444 b 252 -465 230 -456 240 -464 z',
        },
        fermataAbove: {
            x_min: -0.04550444040404433,
            x_max: 472,
            y_min: 2.015071727506986,
            y_max: 454,
            ha: 451.984928272493,
            o: 'm 39 10 b 78 108 66 37 71 73 b 163 311 92 181 111 252 b 284 423 199 353 239 392 b 373 458 312 444 340 454 b 433 431 395 458 410 446 b 603 153 530 361 596 276 b 595 121 603 144 595 131 l 595 88 b 602 50 596 75 589 55 b 639 73 619 43 631 60 b 651 102 645 82 648 92 b 667 194 660 132 662 163 b 680 278 671 222 672 248 b 560 567 680 386 638 481 b 396 654 508 625 452 649 b 291 632 364 654 325 644 b 161 526 235 613 200 566 b 4 249 85 446 26 357 b 4 174 0 222 -3 196 b 10 19 4 124 4 69 b 29 4 12 6 16 0 b 39 10 35 4 33 4 z m 338 37 b 370 40 350 36 357 36 b 380 75 387 40 380 43 b 389 94 382 79 382 85 b 356 132 389 111 374 122 b 269 154 328 147 300 156 b 225 125 252 154 228 157 b 261 48 222 81 232 56 b 338 37 287 40 312 40 z',
        },
        fermataBelow: {
            x_min: -0.310835055998654,
            x_max: 518.570567335755,
            y_min: -430,
            y_max: -0.9161449836506543,
            ha: 429.08385501634933,
            o: 'm 344 -615 b 500 -543 402 -602 452 -576 b 713 -253 605 -471 661 -364 b 746 -98 737 -204 750 -153 b 727 -59 744 -82 744 -59 b 688 -88 711 -59 694 -68 b 678 -109 687 -96 683 -102 b 562 -314 648 -183 611 -252 b 387 -439 516 -373 458 -416 b 328 -449 367 -446 347 -449 b 180 -386 274 -449 225 -423 b 69 -179 111 -330 69 -262 b 75 -121 69 -160 71 -141 b 84 -58 78 -101 84 -79 b 82 -39 84 -52 84 -45 b 68 -1 79 -26 82 -4 b 26 -32 49 0 33 -12 b 20 -52 24 -39 22 -45 b 0 -223 9 -107 -3 -161 b 141 -553 1 -348 27 -468 b 304 -619 192 -590 243 -619 b 344 -615 317 -619 330 -618 z m 415 -190 b 435 -157 429 -192 435 -184 b 308 -27 435 -86 379 -27 b 271 -46 287 -27 272 -35 b 269 -69 269 -55 269 -62 b 364 -183 269 -128 302 -170 z',
        },
        fermataLongAbove: {
            x_min: 0,
            x_max: 591.4911182523068,
            y_min: -6,
            y_max: 337.10134960318186,
            ha: 343.10134960318186,
            o: 'm 20 -9 b 36 14 29 -9 35 3 b 49 109 45 45 49 78 b 48 143 49 121 49 131 b 42 312 40 200 45 256 b 63 338 42 331 46 338 b 68 340 65 338 66 338 b 279 333 138 336 209 334 b 760 317 439 330 599 323 b 783 298 775 317 782 315 l 796 161 b 814 17 801 115 802 68 b 851 144 840 45 855 102 b 824 396 842 228 834 312 b 760 468 816 459 812 467 l 55 485 b 1 433 12 487 1 478 l 1 387 b 0 203 1 325 0 264 b 9 17 0 141 3 79 b 20 -9 9 7 6 -9 z m 403 3 b 439 6 413 3 425 4 b 477 42 464 9 474 22 b 478 62 478 49 478 55 l 478 84 b 465 160 478 109 478 135 b 449 173 461 167 459 173 b 354 105 386 179 354 156 b 359 71 354 95 356 84 b 360 65 360 69 360 66 b 403 3 372 14 373 3 z',
        },
        fermataLongBelow: {
            x_min: 0,
            x_max: 602,
            y_min: -335,
            y_max: 7,
            ha: 342,
            o: 'm 793 -482 b 851 -444 822 -482 842 -471 b 867 -357 860 -416 867 -387 b 865 -336 867 -350 867 -343 b 851 -189 858 -287 855 -238 b 832 -32 847 -135 840 -84 b 824 -17 832 -26 832 -17 l 822 -17 b 805 -30 816 -19 806 -20 b 798 -88 802 -50 798 -69 b 805 -292 798 -157 801 -225 b 772 -327 806 -318 801 -327 b 360 -324 635 -327 497 -325 b 78 -327 265 -323 171 -327 b 50 -304 59 -327 50 -320 l 50 -297 b 62 -187 55 -261 60 -225 b 71 -60 62 -144 71 -102 b 68 -20 71 -48 71 -33 b 53 10 66 -10 69 10 l 52 10 b 22 -22 37 9 24 -1 b 14 -121 17 -55 16 -89 b 0 -359 10 -200 0 -279 b 6 -452 0 -390 3 -420 b 42 -481 9 -478 20 -481 l 415 -481 l 415 -482 z m 409 -183 b 454 -179 420 -183 435 -181 b 505 -124 487 -176 504 -158 b 505 -89 507 -112 505 -101 b 507 -58 505 -79 507 -68 b 505 -42 507 -52 507 -48 b 485 -10 503 -29 501 -10 b 448 -9 472 -9 461 -9 b 380 -22 425 -9 402 -12 b 363 -46 372 -27 363 -35 l 363 -49 b 364 -114 363 -71 361 -94 b 409 -183 374 -168 377 -183 z',
        },
        fermataVeryLongAbove: {
            x_min: 0,
            x_max: 715,
            y_min: -14.096346766617495,
            y_max: 437,
            ha: 451.0963467666175,
            o: 'm 26 -20 b 42 -4 36 -22 39 -12 b 49 53 49 14 49 33 l 49 448 b 69 478 49 467 52 478 l 72 478 b 81 480 75 478 78 478 b 144 477 102 477 122 477 l 207 477 b 943 471 452 477 698 471 b 978 442 966 471 976 467 b 989 99 985 327 985 213 b 999 -19 991 60 995 22 b 1030 62 1028 6 1030 35 b 1021 507 1028 210 1025 359 b 1012 596 1021 537 1017 567 b 976 624 1009 618 998 624 b 507 626 819 624 662 625 b 46 629 353 628 200 629 b 7 590 19 629 7 618 b 0 101 7 428 0 264 b 16 -4 0 65 13 32 b 26 -20 17 -10 22 -19 z m 187 -9 b 207 30 206 -7 204 14 b 207 55 209 37 207 46 b 200 240 210 117 197 179 b 219 262 200 256 203 262 l 223 262 b 456 252 301 258 379 255 l 772 239 b 804 209 792 238 802 235 b 818 69 806 163 809 115 b 834 -4 821 46 816 19 b 857 56 852 13 857 35 b 851 183 857 99 858 141 b 827 360 841 242 841 301 b 786 390 821 383 809 389 b 189 409 588 403 387 402 b 153 377 163 409 153 400 b 173 27 153 259 150 143 b 187 -9 176 13 177 -9 z m 478 3 b 536 10 491 3 510 6 b 582 60 569 14 580 32 l 582 89 l 580 89 b 580 117 580 98 582 107 b 540 171 577 158 572 171 b 521 171 534 171 528 170 b 459 166 500 170 480 168 b 423 132 436 164 423 154 b 428 88 423 118 425 102 b 478 3 438 22 439 4 z',
        },
        fermataVeryLongBelow: {
            x_min: -0.012345679012345682,
            x_max: 686.4443937550029,
            y_min: -427,
            y_max: 30,
            ha: 457,
            o: 'm 56 -615 b 282 -612 132 -612 207 -613 b 924 -606 497 -608 710 -606 b 973 -570 953 -606 968 -593 b 988 -455 984 -533 991 -494 b 982 -262 984 -390 982 -327 b 976 -69 982 -197 981 -134 b 976 -14 975 -50 976 -33 b 966 43 976 4 975 23 b 940 20 953 37 943 35 b 933 -76 936 -12 933 -45 b 935 -121 933 -91 933 -107 b 940 -307 940 -183 940 -245 l 940 -435 b 919 -458 940 -451 935 -458 b 894 -459 910 -458 903 -458 b 206 -467 665 -461 435 -467 b 88 -467 167 -467 127 -468 b 45 -425 45 -467 42 -465 b 46 -400 46 -416 46 -408 b 43 -325 46 -376 43 -350 b 42 -59 42 -236 42 -148 b 22 17 42 -32 36 -6 b 0 -27 -1 7 0 -10 b 7 -420 0 -158 7 -289 l 7 -474 b 16 -579 7 -510 7 -544 b 56 -615 22 -603 27 -615 z m 789 -390 b 835 -357 816 -392 829 -380 b 850 -256 844 -324 850 -291 b 848 -230 850 -248 850 -239 b 845 -135 845 -199 845 -167 l 845 -72 b 837 23 845 -40 848 -9 b 809 -27 809 14 809 -7 l 809 -222 b 788 -242 809 -238 805 -242 l 203 -229 b 180 -209 186 -229 180 -223 l 180 -160 b 179 -115 180 -145 180 -131 b 179 -50 177 -94 179 -72 b 163 24 179 -26 176 0 b 137 -6 145 19 140 10 b 134 -39 134 -17 134 -27 b 138 -105 134 -60 137 -82 l 138 -197 b 145 -343 138 -246 138 -294 b 179 -377 148 -364 151 -377 b 789 -390 383 -377 586 -380 z m 480 -164 b 566 -65 549 -164 566 -140 b 527 1 566 -10 564 1 b 436 -71 426 1 436 -9 l 436 -88 l 436 -143 b 454 -163 436 -153 439 -161 b 480 -164 464 -163 472 -164 z',
        },
        fermataShortAbove: {
            x_min: 0,
            x_max: 545,
            y_min: -18.08551453529649,
            y_max: 348,
            ha: 366.0855145352965,
            o: 'm 16 -26 b 36 -9 26 -27 30 -16 b 354 340 143 107 249 223 b 369 348 360 346 364 348 b 382 341 373 348 377 346 l 530 199 b 743 0 599 131 672 68 b 753 -7 747 -3 750 -7 b 762 -1 756 -7 759 -6 b 785 84 776 10 785 48 b 768 150 785 112 779 138 l 399 491 b 379 501 392 498 384 501 b 357 488 372 501 364 495 b 27 137 248 370 141 251 b 1 84 12 121 1 105 b 3 69 1 79 1 75 b 0 55 1 65 0 59 b 9 1 0 36 9 20 b 16 -26 10 -7 3 -22 z m 357 24 b 367 27 360 24 363 24 b 431 118 422 42 431 49 b 429 151 431 130 431 141 b 400 193 428 171 429 193 b 333 147 359 193 333 176 b 341 42 333 111 337 78 b 357 24 343 30 346 24 z',
        },
        fermataShortBelow: {
            x_min: 0,
            x_max: 565,
            y_min: -335,
            y_max: 10,
            ha: 345,
            o: 'm 386 -482 b 422 -455 395 -482 405 -474 b 732 -117 526 -343 631 -232 b 814 12 765 -79 799 -42 b 752 -22 780 14 768 -7 b 436 -320 645 -120 540 -219 b 419 -328 429 -325 425 -328 b 400 -318 413 -328 408 -325 b 35 0 279 -212 157 -105 b 16 14 29 4 23 14 b 7 12 13 14 10 14 b 0 -3 1 7 0 1 b 7 -23 0 -10 3 -17 b 20 -48 12 -30 14 -39 b 167 -238 60 -117 115 -177 b 351 -455 229 -310 289 -383 b 386 -482 367 -474 377 -482 z m 382 -213 b 406 -207 389 -213 396 -210 b 452 -156 431 -199 446 -180 b 461 -85 456 -132 458 -108 b 448 -32 461 -66 454 -49 b 418 -6 442 -12 431 -6 b 397 -9 410 -6 405 -7 b 348 -50 376 -14 350 -14 b 356 -170 348 -91 354 -130 b 382 -213 357 -199 363 -213 z',
        },
        breathMarkComma: {
            x_min: 0,
            x_max: 148,
            y_min: 0,
            y_max: 275,
            ha: 275,
            o: 'm 120 0 b 187 78 156 20 174 48 b 213 209 206 121 213 164 b 206 294 213 238 210 265 b 140 390 200 337 171 367 b 122 396 134 395 128 396 b 68 382 105 396 85 384 b 46 379 60 382 53 382 b 0 328 12 369 0 357 b 1 311 0 323 1 317 b 30 210 4 275 22 243 b 66 167 39 179 46 167 b 94 171 73 167 82 168 b 143 180 109 174 124 180 b 160 179 148 180 154 180 b 120 66 124 145 120 107 b 120 0 120 45 121 23 z',
        },
        breathMarkUpbow: {
            x_min: 0,
            x_max: 254,
            y_min: 0,
            y_max: 595,
            ha: 595,
            o: 'm 233 0 b 256 48 251 14 253 30 b 272 183 264 92 265 138 b 311 455 289 274 295 364 b 350 716 327 541 341 628 b 366 815 354 749 366 782 b 359 857 366 829 363 842 b 327 815 334 852 330 832 b 302 674 315 769 310 721 b 248 357 288 567 269 462 b 225 226 240 314 242 268 b 210 251 212 232 213 243 b 69 721 163 408 117 564 b 32 835 58 760 53 801 b 20 851 29 841 27 851 b 14 850 19 851 16 851 b 0 828 6 847 0 838 l 0 825 b 12 765 1 804 7 785 b 194 125 73 552 132 338 b 233 0 206 84 213 42 z',
        },
        caesura: {
            x_min: 0,
            x_max: 565.5831864753837,
            y_min: -0.09016994374947417,
            y_max: 562.4481112129314,
            ha: 562.5382811566809,
            o: 'm 0 76 b 49 122 24 92 37 107 b 444 613 180 287 305 455 b 528 770 484 660 518 708 b 531 792 530 778 531 785 b 524 808 531 799 530 805 b 490 792 513 815 498 802 b 390 683 456 756 420 721 b 48 262 275 543 164 400 b 0 76 0 207 7 145 z m 226 1 b 248 13 238 -4 243 7 l 353 137 b 759 638 490 302 632 464 b 814 805 795 688 819 740 b 779 786 796 805 788 796 b 628 609 724 732 678 668 b 310 242 523 485 416 363 b 217 69 265 190 217 140 b 222 30 217 58 219 45 b 222 23 222 29 220 26 b 220 12 222 20 220 16 b 226 1 220 7 222 3 z',
        },
        caesuraCurved: {
            x_min: 0,
            x_max: 386,
            y_min: -10,
            y_max: 584,
            ha: 594,
            o: 'm 180 -14 b 246 14 213 -13 230 0 b 347 144 288 52 315 99 b 526 471 420 246 488 350 b 556 671 546 537 556 603 b 543 798 556 713 553 756 b 504 837 537 822 521 828 b 490 841 500 840 494 841 b 472 832 482 841 477 838 b 406 678 436 785 406 737 b 410 638 406 665 408 652 b 425 511 419 595 425 553 b 315 186 425 395 387 287 b 180 -14 271 122 228 58 z m 14 24 b 49 39 29 24 40 32 b 120 114 76 60 99 85 b 216 276 156 166 184 223 b 317 626 281 384 317 501 b 315 664 317 639 317 651 b 301 773 314 701 311 737 b 262 808 295 795 278 808 b 245 799 256 808 249 805 b 170 641 209 750 170 706 b 171 621 170 634 170 628 b 177 511 176 585 177 549 b 114 229 177 415 160 320 b 0 26 79 161 42 95 b 14 24 6 24 10 24 z',
        },
        restMaxima: {
            x_min: 0,
            x_max: 366,
            y_min: -255,
            y_max: 255,
            ha: 510,
            o: 'm 397 -367 b 504 -343 436 -367 468 -347 b 518 -318 516 -341 518 -330 b 527 -30 518 -217 527 -117 b 526 33 527 -7 527 13 l 526 301 b 501 350 526 323 520 341 b 428 367 477 361 452 367 b 374 359 410 367 393 364 b 357 333 361 354 357 347 b 356 91 357 252 356 171 l 356 30 b 340 -307 357 -82 346 -194 b 397 -367 337 -354 350 -367 z m 46 -357 b 58 -356 49 -357 53 -357 b 154 -333 91 -351 121 -338 b 173 -305 168 -330 173 -320 l 173 302 b 132 356 173 330 157 348 b 68 364 112 363 89 364 b 3 304 19 363 1 348 l 3 4 l 0 4 b 1 -302 0 -98 0 -200 b 46 -357 1 -331 16 -357 z',
        },
        restDoubleWhole: {
            x_min: 0,
            x_max: 122,
            y_min: 0,
            y_max: 249,
            ha: 249,
            o: 'm 43 0 b 58 1 48 0 52 0 b 124 20 81 6 102 17 b 176 96 173 27 176 58 b 173 220 174 138 173 179 b 176 304 173 248 176 276 b 140 353 176 331 163 346 b 95 359 125 356 111 359 b 32 346 73 359 52 354 b 0 315 20 340 0 337 b 1 243 0 291 1 268 l 1 174 l 4 174 l 4 48 b 43 0 4 16 17 0 z',
        },
        restWhole: {
            x_min: 0.8908513171538642,
            x_max: 500,
            y_min: -120,
            y_max: 14,
            ha: 134,
            o: 'm 356 -173 l 356 -171 l 642 -171 b 719 -115 680 -171 717 -145 b 720 -82 719 -104 720 -92 b 711 -20 720 -60 719 -40 b 672 17 704 0 694 10 b 649 20 664 20 657 20 b 605 17 634 20 621 17 b 92 19 433 17 262 17 b 29 7 69 20 49 12 b 9 -17 12 4 9 -6 b 10 -43 9 -26 10 -35 b 1 -84 10 -58 3 -72 b 76 -173 0 -147 7 -173 z',
        },
        restWholeLegerLine: {
            x_min: -196.7269258015421,
            x_max: 685,
            y_min: -157,
            y_max: 29,
            ha: 186,
            o: 'm 96 -226 b 167 -223 121 -226 144 -225 b 300 -222 207 -222 252 -222 l 444 -222 b 660 -217 520 -222 595 -222 b 746 -131 703 -216 746 -200 b 744 -62 746 -108 747 -85 b 743 -39 743 -53 743 -46 b 789 -14 743 -16 752 -17 b 883 -16 821 -13 851 -16 b 965 -9 910 -16 937 -14 b 986 3 972 -7 986 -10 l 986 6 b 963 35 984 17 982 32 b 887 42 937 39 913 42 b 39 27 605 42 321 33 l -76 27 b -261 20 -138 27 -200 26 b -282 14 -269 20 -279 23 b -271 -7 -287 4 -276 -1 b -209 -27 -253 -23 -230 -24 b -153 -30 -190 -30 -173 -30 b -48 -29 -118 -30 -82 -27 b 6 -32 -22 -29 -6 -27 b 1 -72 3 -43 1 -58 b 4 -167 1 -105 7 -140 b 53 -223 3 -207 14 -217 b 96 -226 68 -226 82 -226 z',
        },
        restHalf: {
            x_min: 0,
            x_max: 518.3998530468286,
            y_min: 0,
            y_max: 162,
            ha: 162,
            o: 'm 98 0 l 556 0 b 665 1 592 0 629 0 b 746 82 720 3 743 29 b 736 174 749 114 740 144 b 670 232 729 215 708 232 b 570 229 636 232 603 229 b 356 233 498 229 426 233 l 73 233 b 0 179 19 233 0 220 b 1 154 0 171 0 164 b 6 95 4 135 6 115 b 98 0 3 27 29 0 z',
        },
        restHalfLegerLine: {
            x_min: -120,
            x_max: 448.2056815990121,
            y_min: -20,
            y_max: 143,
            ha: 163,
            o: 'm 397 -29 b 482 -23 426 -29 455 -27 b 526 -24 497 -24 511 -24 b 608 -17 554 -24 582 -23 b 645 -1 622 -14 644 -17 b 615 26 648 13 629 20 b 595 32 608 29 602 30 b 526 37 572 35 549 37 b 498 36 517 37 507 37 b 471 35 487 35 478 35 b 445 53 451 35 445 39 b 449 89 445 60 446 73 l 454 117 b 373 206 456 173 428 206 b 324 204 356 206 340 206 b 209 203 287 203 248 203 b 46 193 156 203 101 202 b 16 170 32 190 19 187 b 9 112 13 151 9 131 b 14 78 9 101 10 89 b 19 59 17 71 19 63 b -4 45 19 49 12 45 l -10 45 b -150 33 -58 45 -104 46 b -173 22 -158 32 -173 33 l -173 19 b -151 -13 -170 6 -168 -10 b -117 -17 -140 -16 -128 -17 b 118 -13 -37 -17 39 -13 b 397 -29 213 -13 308 -29 z',
        },
        restQuarter: {
            x_min: -0.3784452492533808,
            x_max: 263,
            y_min: -415,
            y_max: 415,
            ha: 830,
            o: 'm 151 -596 b 164 -563 163 -589 161 -575 b 160 -546 164 -557 161 -552 b 124 -396 148 -495 135 -446 b 122 -380 122 -390 122 -384 b 199 -255 122 -331 158 -272 b 228 -256 209 -249 217 -253 b 324 -346 274 -271 298 -310 b 353 -369 331 -356 341 -369 b 360 -367 356 -369 357 -369 b 379 -336 373 -361 379 -348 l 377 -325 b 344 -232 372 -292 366 -258 b 249 -58 301 -180 278 -117 b 242 -36 245 -49 242 -42 b 258 -7 242 -26 248 -17 b 328 78 284 20 311 45 b 354 158 344 104 354 131 b 337 216 354 177 350 196 b 213 435 294 288 249 359 b 115 575 189 487 158 536 b 78 598 105 585 92 598 b 59 592 72 598 66 596 b 39 562 45 583 39 572 b 53 527 39 550 45 539 b 168 344 98 469 125 402 b 187 307 181 328 187 317 b 153 269 187 294 176 284 b 62 213 122 252 91 235 b 40 180 48 203 40 192 b 46 158 40 173 43 166 b 99 65 60 125 79 95 b 183 -79 131 20 160 -29 b 156 -86 173 -88 164 -85 b 0 -261 58 -99 -7 -173 b 96 -557 10 -366 49 -464 b 124 -585 102 -569 109 -580 b 145 -598 132 -588 138 -598 b 151 -596 147 -598 150 -598 z',
        },
        rest8th: {
            x_min: 0,
            x_max: 289,
            y_min: -260,
            y_max: 261,
            ha: 521,
            o: 'm 164 -374 b 212 -340 190 -373 203 -357 b 276 -190 238 -292 258 -242 b 410 285 333 -36 359 128 b 416 314 413 294 416 304 l 416 321 b 393 354 415 341 410 354 b 382 353 389 354 386 354 b 292 311 347 347 315 333 b 174 225 256 276 216 251 b 157 219 168 222 163 219 b 140 228 151 219 145 222 b 131 246 134 233 131 240 b 135 262 131 252 132 256 b 147 298 141 272 147 285 b 127 367 147 323 154 354 b 94 376 114 373 102 376 b 48 336 75 376 63 363 b 3 181 20 288 12 235 b 0 150 1 170 0 160 b 109 24 0 84 35 24 b 171 36 127 24 148 27 b 289 101 213 52 248 75 b 164 -374 256 -62 193 -213 z',
        },
        rest16th: {
            x_min: 0,
            x_max: 333,
            y_min: -328.283950617284,
            y_max: 244,
            ha: 572.2839506172841,
            o: 'm 209 -471 b 246 -458 222 -477 236 -468 b 307 -338 279 -425 300 -384 b 324 -226 312 -301 317 -262 b 428 161 350 -94 386 35 b 480 318 445 215 480 259 b 467 347 480 331 477 341 b 445 351 461 350 454 351 b 408 337 432 351 419 347 b 402 333 405 336 403 334 b 223 215 344 294 294 245 b 236 259 229 233 235 246 b 238 276 238 265 238 271 b 212 338 238 302 226 334 b 193 341 206 340 199 341 b 86 289 156 341 104 317 b 59 180 66 255 59 217 b 156 27 59 76 92 27 b 236 46 179 27 204 35 b 338 101 271 59 298 82 b 289 -49 312 49 302 0 b 196 -122 276 -99 235 -107 b 176 -114 187 -127 176 -127 l 176 -111 b 157 -53 177 -88 164 -72 b 69 -9 141 -7 101 -16 b 17 -48 43 -3 29 -27 b 0 -127 4 -73 0 -99 b 6 -186 0 -147 1 -167 b 82 -294 17 -262 37 -294 b 160 -276 102 -294 128 -289 b 219 -242 181 -268 203 -259 b 236 -230 223 -236 229 -230 b 243 -232 239 -230 240 -230 b 235 -275 248 -246 239 -261 b 202 -456 220 -334 202 -395 b 209 -471 202 -462 203 -468 z',
        },
        rest32nd: {
            x_min: 0,
            x_max: 347,
            y_min: -497.5023916875033,
            y_max: 483,
            ha: 980.5023916875033,
            o: 'm 177 -716 b 217 -690 194 -720 209 -704 b 233 -655 225 -680 230 -668 b 292 -390 253 -567 275 -480 b 361 -48 312 -275 336 -161 b 452 400 393 102 422 252 b 497 629 467 477 482 553 b 500 647 498 635 500 641 b 480 691 500 665 492 684 b 464 696 475 694 469 696 b 418 674 448 696 431 685 l 361 626 b 333 611 353 618 343 612 b 308 629 325 611 317 616 b 239 667 292 651 265 661 b 204 670 228 668 216 670 b 86 559 141 670 95 628 b 85 537 86 552 85 544 b 107 416 85 495 95 455 b 161 372 114 389 134 372 b 174 373 166 372 170 372 b 226 383 192 374 209 377 b 387 478 285 402 330 444 b 364 386 379 444 364 415 b 276 271 364 323 320 298 b 265 266 272 268 268 266 b 252 276 261 266 256 269 b 143 333 229 311 186 333 b 107 327 130 333 118 330 b 43 243 62 314 46 291 b 58 145 43 210 52 179 b 150 63 68 92 99 63 b 315 132 213 63 259 98 b 266 -58 297 63 281 4 b 207 -101 259 -91 230 -96 b 186 -66 186 -107 199 -75 b 180 -50 181 -63 183 -55 b 101 -3 160 -23 135 -3 b 9 -66 59 -3 20 -32 b 0 -118 3 -84 0 -101 b 10 -196 0 -144 6 -170 b 104 -287 20 -256 52 -287 b 137 -282 114 -287 125 -287 b 184 -269 151 -281 171 -269 b 196 -275 190 -269 193 -271 b 199 -287 197 -278 199 -282 b 184 -343 199 -304 189 -325 b 181 -348 184 -346 183 -347 b 134 -595 158 -429 131 -508 b 156 -677 134 -624 150 -648 b 177 -716 158 -693 160 -713 z',
        },
        rest64th: {
            x_min: 0,
            x_max: 428,
            y_min: -720,
            y_max: 473.6797408388932,
            ha: 1193.6797408388932,
            o: 'm 200 -1037 b 229 -1012 215 -1037 222 -1025 b 238 -984 233 -1004 236 -994 b 282 -780 248 -914 265 -848 b 386 -369 317 -644 354 -507 b 491 104 422 -212 451 -53 b 600 541 528 249 550 399 b 616 629 611 570 616 599 b 600 680 616 648 615 671 b 550 665 586 687 566 677 b 480 618 527 649 501 635 b 464 611 474 613 468 611 b 448 622 458 611 454 615 b 366 662 425 651 397 662 b 331 658 354 662 343 661 b 242 572 285 647 253 619 b 236 528 239 557 236 543 b 266 400 236 484 251 442 b 325 373 274 377 301 373 b 436 409 366 373 403 383 l 494 452 b 474 360 485 416 474 389 b 383 248 474 297 435 269 b 320 328 377 288 351 310 b 276 341 305 337 291 341 b 186 269 235 341 194 311 b 181 230 183 256 181 243 b 187 153 181 204 186 179 b 279 63 192 86 233 63 b 304 65 288 63 295 63 b 416 115 344 72 379 92 b 387 -14 406 69 397 27 b 320 -95 380 -52 369 -86 b 318 -79 320 -89 320 -84 b 223 0 305 -29 271 0 b 122 -81 171 0 135 -30 b 118 -127 120 -96 118 -112 l 118 -196 b 137 -242 118 -215 125 -229 b 209 -275 157 -266 181 -275 b 249 -269 222 -275 235 -274 b 318 -248 272 -264 294 -255 b 281 -390 315 -301 292 -344 b 276 -400 279 -393 279 -397 b 259 -420 272 -408 266 -416 b 246 -429 255 -425 251 -429 b 233 -415 242 -429 238 -426 b 176 -359 225 -389 200 -372 b 121 -346 158 -348 140 -346 b 14 -408 73 -346 27 -370 b 0 -498 4 -438 0 -468 b 6 -564 0 -520 3 -543 b 91 -635 12 -611 45 -635 b 131 -629 104 -635 117 -634 b 223 -590 163 -622 190 -603 b 166 -824 203 -671 189 -747 b 148 -912 157 -852 148 -881 b 156 -955 148 -926 150 -940 b 177 -1008 161 -972 170 -991 b 200 -1037 181 -1020 183 -1037 z',
        },
        rest128th: {
            x_min: 0.6717818579024267,
            x_max: 491,
            y_min: -711,
            y_max: 719,
            ha: 1430,
            o: 'm 233 -1015 b 271 -956 256 -1002 266 -981 l 314 -723 b 393 -350 337 -598 366 -474 b 543 312 442 -128 492 91 b 687 841 583 490 635 665 b 707 958 698 880 707 919 b 706 986 707 968 707 976 b 688 1025 704 999 704 1024 b 670 1027 683 1025 677 1027 b 629 1007 655 1027 639 1022 b 559 945 613 981 586 968 b 541 1004 553 968 559 991 b 456 1035 516 1024 488 1035 b 419 1030 444 1035 431 1034 b 344 953 379 1018 353 995 b 340 900 341 936 340 917 b 341 847 340 881 341 864 b 380 779 340 815 354 793 b 464 763 406 765 435 762 b 592 814 510 763 549 786 b 546 660 575 757 556 710 b 480 585 537 619 517 598 b 478 599 480 590 478 595 b 386 678 472 641 428 678 b 294 612 343 678 304 651 b 279 477 282 567 278 521 b 363 395 281 428 317 395 b 380 396 369 395 374 395 b 488 436 416 403 449 419 b 384 233 469 357 468 275 b 359 291 373 252 377 276 b 282 318 337 310 310 318 b 181 264 243 318 203 298 b 154 107 153 216 154 161 b 242 6 154 42 187 6 b 278 10 253 6 265 7 b 408 88 330 22 366 55 b 387 -1 400 56 393 27 b 301 -112 379 -55 354 -94 b 289 -65 297 -95 302 -79 b 219 -32 269 -42 245 -32 b 183 -37 207 -32 196 -35 b 112 -109 144 -46 121 -71 b 105 -219 104 -145 108 -183 b 186 -315 101 -276 134 -315 b 230 -307 199 -315 215 -312 b 324 -256 264 -295 292 -275 b 180 -491 323 -383 266 -471 b 183 -459 180 -480 180 -469 b 184 -442 184 -454 184 -448 l 184 -436 b 135 -369 184 -403 170 -383 b 102 -363 125 -364 114 -363 b 29 -399 73 -363 45 -376 b 1 -556 -4 -448 6 -503 b 109 -670 -4 -625 43 -670 b 140 -667 118 -670 130 -668 b 253 -616 180 -658 213 -638 b 238 -688 248 -644 242 -665 b 192 -959 220 -779 192 -867 b 193 -992 192 -971 192 -981 b 210 -1024 194 -1014 199 -1024 b 233 -1015 216 -1024 223 -1021 z',
        },
        dynamicPiano: {
            x_min: -49,
            x_max: 326.5019318364244,
            y_min: -142,
            y_max: 515,
            ha: 657,
            o: 'm -56 -204 b -42 -202 -52 -204 -46 -203 b -19 -194 -35 -202 -26 -197 b 147 -138 35 -170 91 -151 b 249 -58 194 -127 223 -95 b 262 -29 255 -50 262 -39 b 258 -17 262 -24 261 -20 b 232 -7 252 -10 242 -7 b 210 -12 225 -7 217 -9 b 125 -40 184 -23 157 -30 b 183 140 153 19 171 79 b 251 167 207 144 230 153 b 469 518 383 262 480 382 b 357 687 472 626 420 687 b 315 678 344 687 330 684 b 204 600 279 664 240 634 b 210 704 206 635 209 670 b 215 721 212 710 215 716 b 206 733 215 727 212 730 b 180 742 197 736 189 742 b 164 734 176 742 170 740 b 1 575 108 684 36 645 b -7 557 -1 569 -7 563 b -6 553 -7 556 -7 554 b 7 547 -3 547 3 547 l 17 547 b 82 575 43 547 59 567 l 82 452 b 56 46 82 317 81 180 b 17 -66 49 7 46 -36 b -62 -173 -13 -99 -37 -135 b -71 -192 -66 -179 -71 -184 b -68 -199 -71 -193 -69 -196 b -56 -204 -65 -203 -60 -204 z m 196 258 b 197 266 197 261 197 264 b 200 510 200 347 199 429 b 233 543 210 521 222 533 b 281 560 249 554 266 560 b 340 503 310 560 333 540 b 344 461 343 488 344 474 b 321 323 344 413 333 369 b 268 272 315 300 295 281 b 196 258 245 265 220 261 z',
        },
        dynamicMezzo: {
            x_min: -18,
            x_max: 559,
            y_min: -50,
            y_max: 365,
            ha: 415,
            o: 'm 43 -71 b 160 19 86 -71 143 -26 b 230 264 189 99 200 184 b 282 363 243 297 259 327 b 287 320 285 347 287 333 b 284 279 287 305 285 292 l 249 -12 b 275 -43 248 -29 245 -43 b 395 45 321 -43 389 3 b 462 271 406 124 436 197 b 523 387 475 310 490 348 l 523 346 b 504 130 521 274 513 202 b 501 81 501 114 501 98 b 510 3 501 55 504 29 b 580 -72 521 -48 543 -72 b 625 -63 593 -72 608 -69 b 789 50 690 -43 744 -3 b 805 72 795 56 805 63 b 798 85 805 76 802 81 b 778 94 792 91 785 94 b 755 85 770 94 763 91 l 693 40 b 675 33 685 36 680 33 b 658 52 668 33 662 39 b 645 144 651 82 645 112 b 658 448 641 246 660 346 b 606 507 658 485 638 507 b 583 504 599 507 592 505 b 495 446 547 497 521 471 b 420 373 471 423 448 399 b 413 458 418 406 418 432 b 361 507 408 490 386 507 b 320 491 347 507 333 501 b 160 307 256 444 207 382 l 160 337 b 174 488 160 387 174 438 b 156 521 174 501 173 513 b 137 526 148 524 143 526 b 109 513 127 526 118 520 b -16 399 66 477 23 439 b -26 383 -20 395 -26 389 l -26 379 b -14 370 -24 372 -20 370 b -6 372 -12 370 -9 372 b 19 376 4 374 12 376 b 36 359 32 376 36 370 b 30 330 36 350 35 341 l 30 323 b 9 -35 23 203 17 85 b 43 -71 6 -65 19 -71 z',
        },
        dynamicForte: {
            x_min: -144,
            x_max: 311.30112136775,
            y_min: -115.3876295915697,
            y_max: 504,
            ha: 619.3876295915697,
            o: 'm -101 -166 b 173 76 7 -153 150 -30 b 206 344 192 164 202 253 b 268 338 226 343 246 341 b 384 395 317 333 353 361 b 397 419 393 405 397 412 b 367 442 397 429 387 436 b 350 444 361 444 356 444 b 206 455 302 449 255 454 l 206 474 b 202 540 204 495 202 518 b 209 593 202 557 203 576 b 236 624 215 613 225 624 b 265 612 245 624 253 619 b 308 552 287 596 302 577 b 336 533 312 534 323 533 b 448 611 366 533 444 583 b 399 696 452 648 423 671 b 382 706 395 700 387 703 b 308 726 357 720 333 726 b 207 684 272 726 239 711 b 60 455 135 622 60 560 l 10 455 b -23 448 -1 455 -13 454 b -102 372 -55 426 -76 397 b -109 357 -108 367 -109 361 b -95 347 -109 353 -105 348 b -63 346 -84 346 -73 346 b 0 344 -43 344 -22 344 l 63 344 b 53 186 63 291 59 239 b 23 0 46 124 42 60 b -35 -60 10 -42 -6 -60 b -73 -52 -45 -60 -58 -58 b -91 -48 -79 -49 -85 -48 b -109 -53 -96 -48 -102 -49 b -199 -124 -143 -72 -168 -99 b -207 -137 -203 -128 -207 -132 b -194 -148 -207 -141 -203 -145 b -101 -166 -164 -160 -132 -168 z',
        },
        dynamicRinforzando: {
            x_min: -75,
            x_max: 322.0960720195126,
            y_min: -90,
            y_max: 325,
            ha: 415,
            o: 'm 23 -130 b 40 -125 27 -130 33 -128 b 128 -9 81 -114 125 -53 b 145 200 132 62 141 130 b 148 238 147 212 148 225 b 308 321 184 291 245 321 b 363 314 325 321 344 318 b 377 310 369 312 373 310 b 384 311 380 310 382 310 b 464 415 410 317 464 389 b 446 433 465 429 455 429 b 390 445 428 441 409 445 b 305 429 361 445 334 438 b 167 346 252 413 202 393 b 153 325 163 338 158 333 b 148 438 154 363 151 399 b 121 468 147 456 134 468 b 101 458 115 468 108 465 b -63 310 46 409 -16 367 b -108 240 -78 289 -98 271 b 32 330 -50 256 -13 297 b 37 304 37 320 37 312 l 37 292 b 10 -101 27 161 20 30 b 23 -130 9 -120 12 -130 z',
        },
        dynamicSforzando: {
            x_min: 0,
            x_max: 296,
            y_min: 0,
            y_max: 379,
            ha: 379,
            o: 'm 151 0 b 174 1 160 0 166 0 b 392 158 272 14 346 71 b 405 207 400 174 405 190 b 359 287 405 236 389 265 b 261 325 328 308 294 315 b 168 413 216 340 181 366 b 166 426 167 418 166 423 b 176 438 166 432 167 436 b 199 441 183 441 190 441 b 310 393 238 441 295 422 b 334 370 317 376 325 370 b 363 386 343 370 353 379 b 422 445 386 402 408 420 b 426 458 425 449 426 454 b 422 469 426 462 425 465 b 274 546 395 518 333 546 b 161 503 232 546 190 531 b 86 405 132 472 108 439 b 71 347 75 387 71 367 b 112 256 71 312 85 279 b 209 215 141 232 176 226 b 284 168 238 206 266 197 b 300 131 291 157 300 144 b 298 120 300 127 298 122 b 278 107 294 109 285 108 b 262 108 271 107 266 108 l 259 108 b 114 157 200 107 156 125 b 96 181 104 163 96 170 l 96 184 b 102 202 96 190 102 196 b 96 209 102 204 101 207 b 63 194 82 215 72 204 b 7 109 42 168 26 138 b 0 86 3 101 0 94 b 13 60 0 78 4 68 b 151 0 53 23 101 0 z',
        },
        dynamicZ: {
            x_min: -42.73880183193087,
            x_max: 331,
            y_min: 0,
            y_max: 328,
            ha: 328,
            o: 'm -45 0 b -6 16 -32 0 -17 10 b 3 20 -3 16 0 19 b 144 60 49 48 96 60 b 284 22 190 60 238 46 b 348 4 305 10 327 4 b 461 75 393 4 435 30 b 468 91 464 81 467 86 b 456 104 468 95 465 99 b 287 173 402 131 348 167 b 239 176 271 174 255 176 b 168 174 217 176 194 174 b 367 340 236 236 298 294 b 459 423 402 363 432 392 b 477 454 467 431 475 442 b 474 462 477 456 475 459 b 454 472 469 469 462 472 b 432 468 446 472 439 469 b 356 448 406 461 380 455 b 210 422 307 433 258 422 b 109 442 177 422 144 428 b 94 445 104 444 99 445 b 69 433 85 445 76 442 b 27 390 56 419 39 406 b -9 343 16 373 -17 357 b 63 311 3 320 36 314 l 78 311 b 132 307 95 308 114 307 b 240 314 168 307 203 311 l 193 271 b -37 50 117 196 19 145 b -59 7 -46 36 -69 20 b -45 0 -55 3 -50 0 z',
        },
        ornamentTrill: {
            x_min: 1,
            x_max: 551,
            y_min: -18,
            y_max: 539,
            ha: 557,
            o: 'm 321 612 b 190 602 278 605 235 605 l 190 638 b 187 693 190 652 190 667 b 161 776 184 717 193 776 b 137 747 150 776 137 766 b 130 654 135 716 131 685 l 130 596 l 52 588 b 4 539 23 585 7 570 b 1 477 3 530 1 500 b 3 448 1 461 3 448 l 3 452 b 53 432 6 436 23 432 b 134 435 75 432 102 433 b 151 117 138 328 147 223 b 170 13 153 82 157 46 b 209 -26 179 -10 193 -26 b 222 -22 213 -26 217 -24 b 269 -17 233 -16 253 -27 b 343 135 325 19 346 66 b 343 158 343 147 344 147 b 323 192 341 171 337 187 b 291 176 311 194 300 184 l 264 148 b 229 131 261 145 238 131 b 212 170 209 131 213 154 b 194 438 203 259 199 348 l 272 442 b 284 452 276 441 279 441 b 305 462 287 461 295 462 l 312 462 b 346 477 325 462 340 464 b 366 560 357 503 366 531 b 321 612 366 598 356 618 z m 759 588 b 711 560 749 592 733 570 b 588 500 671 541 631 521 b 583 533 586 514 586 524 b 560 576 577 549 577 572 b 517 550 541 582 528 564 b 416 423 482 508 452 462 b 382 353 392 397 384 370 b 387 305 380 341 386 318 b 392 275 389 295 392 285 b 409 243 393 262 393 243 b 431 262 419 243 425 255 b 521 373 459 298 488 333 b 523 354 521 366 523 360 b 520 337 523 346 521 340 b 508 295 513 323 508 310 b 530 102 508 279 524 122 b 549 66 533 88 530 66 b 577 99 563 66 572 84 b 580 131 580 109 580 121 l 580 302 b 600 347 580 318 582 337 b 701 392 632 364 665 384 b 793 518 785 409 793 435 b 759 588 793 559 785 576 z',
        },
        ornamentTurn: {
            x_min: 0,
            x_max: 574,
            y_min: 0,
            y_max: 312,
            ha: 312,
            o: 'm 651 0 b 816 132 727 0 796 46 b 827 223 822 163 827 193 b 808 340 827 262 821 301 b 665 449 785 408 729 449 b 636 446 655 449 647 448 b 589 384 600 441 586 422 l 602 300 b 611 285 603 291 605 285 b 621 288 613 285 616 287 b 655 295 632 294 644 295 b 711 284 674 295 693 289 b 773 209 740 275 773 232 b 697 156 773 184 734 160 b 664 154 685 154 675 154 b 579 168 635 154 608 158 b 455 242 533 186 495 213 b 261 400 387 291 331 354 b 160 432 225 422 190 432 b 20 328 98 432 49 392 b 0 229 6 295 0 262 b 30 71 0 176 14 122 b 144 3 43 29 96 3 b 168 6 153 3 160 4 b 248 122 233 20 248 39 b 246 147 248 124 248 135 b 226 177 243 164 239 177 b 206 170 220 177 215 174 b 144 154 186 158 166 154 b 79 170 122 154 101 160 b 53 202 62 179 53 189 b 60 228 53 209 55 217 b 161 281 81 261 120 281 b 183 279 168 281 176 281 b 325 190 243 269 284 229 b 572 16 402 124 475 53 b 651 0 598 6 625 0 z',
        },
        ornamentTurnSlash: {
            x_min: 0,
            x_max: 574,
            y_min: -106,
            y_max: 405,
            ha: 511,
            o: 'm 441 -153 b 456 -60 455 -118 456 -89 b 455 81 455 -14 455 33 b 572 14 491 55 530 30 b 651 -1 598 4 625 -1 b 816 131 727 -1 796 45 b 827 222 822 161 827 192 b 808 338 827 261 821 300 b 665 448 785 406 729 448 b 636 445 655 448 647 446 b 589 383 600 439 586 420 l 602 298 b 611 284 603 289 605 284 b 621 287 613 284 616 285 b 655 294 632 292 644 294 b 711 282 674 294 693 288 b 773 207 740 274 773 230 b 697 154 773 183 734 158 b 664 153 685 153 675 153 b 579 167 635 153 608 157 b 455 240 533 183 495 212 b 454 242 455 240 455 242 l 454 337 b 452 488 454 386 452 439 b 433 570 452 517 451 546 b 425 583 431 575 431 583 l 422 583 b 403 566 415 582 408 573 b 402 546 400 560 402 553 l 397 287 b 261 399 353 325 310 366 b 160 431 225 420 190 431 b 20 327 98 431 48 390 b 0 228 6 294 0 261 b 30 69 0 174 14 121 b 144 1 43 27 96 1 b 168 4 153 1 160 3 b 248 121 233 19 248 37 b 246 145 248 122 248 134 b 226 176 243 163 239 176 b 206 168 220 176 215 173 b 144 153 186 157 166 153 b 79 168 122 153 101 158 b 53 200 62 177 53 187 b 60 226 53 207 55 216 b 161 279 79 259 120 279 b 183 278 168 279 176 279 b 325 189 243 266 282 226 b 395 130 348 168 372 148 b 393 71 393 109 393 89 b 441 -153 390 -6 402 -78 z',
        },
        ornamentMordent: {
            x_min: 0,
            x_max: 700,
            y_min: 0,
            y_max: 497,
            ha: 497,
            o: 'm 513 0 b 528 39 526 14 527 27 b 531 72 531 50 531 60 b 528 138 531 94 528 117 l 528 347 b 552 359 537 354 544 359 b 579 338 560 359 569 353 b 674 217 609 297 639 255 b 719 190 690 200 704 190 b 759 215 732 190 744 197 b 940 395 815 279 877 337 b 1001 490 968 422 986 455 b 1008 513 1004 495 1008 505 b 1002 524 1008 517 1007 521 b 968 516 994 530 978 524 b 960 508 965 513 963 510 b 798 356 900 464 848 410 b 778 341 791 347 783 341 b 757 354 772 341 765 346 b 661 475 720 392 690 432 b 611 517 644 504 629 517 b 563 498 598 517 583 511 b 527 471 550 490 539 481 l 527 570 b 492 716 526 619 523 671 b 472 677 480 704 472 694 b 465 399 474 585 468 491 b 439 366 456 387 448 376 b 384 320 415 336 399 320 b 330 367 369 320 354 336 b 325 376 328 369 327 373 b 226 490 291 413 265 456 b 189 505 213 500 202 505 b 157 491 177 505 167 500 b 0 229 75 420 0 346 b 1 202 0 220 0 212 b 22 215 12 203 16 209 b 124 327 55 252 89 289 b 147 343 132 337 140 343 b 171 323 156 343 164 336 b 266 197 196 276 232 236 b 337 157 291 170 314 157 b 410 207 361 157 386 174 b 461 274 428 229 444 252 b 462 166 461 238 461 202 b 513 0 465 108 487 55 z',
        },
        ornamentShortTrill: {
            x_min: 0,
            x_max: 747,
            y_min: 0,
            y_max: 243,
            ha: 243,
            o: 'm 379 0 b 428 14 395 0 410 4 b 474 56 445 26 461 39 b 552 157 500 89 526 122 b 566 168 556 163 560 168 b 575 157 569 168 572 166 b 664 36 592 107 628 72 b 733 1 685 13 710 1 b 802 35 757 1 780 13 b 1007 249 871 105 940 177 b 1067 324 1028 272 1054 295 b 1076 340 1068 330 1076 334 b 1073 346 1076 341 1076 343 b 1057 350 1068 348 1063 350 b 1047 347 1053 350 1050 350 b 1001 310 1031 336 1015 324 l 857 157 b 844 143 852 153 848 143 b 835 150 841 143 838 144 b 757 242 815 186 780 209 b 685 298 739 268 713 284 b 641 310 670 305 655 310 b 590 288 625 310 608 304 b 497 179 554 256 527 215 b 480 164 490 170 485 164 b 462 179 474 164 469 168 b 372 295 436 220 405 258 b 278 344 346 324 312 344 b 199 310 252 344 226 334 b 92 196 161 274 128 233 b 0 24 46 148 23 89 b 42 48 22 27 32 37 b 156 168 84 85 114 132 b 196 192 174 184 186 192 b 228 158 206 192 215 181 b 312 36 252 114 282 75 b 379 0 331 12 354 0 z',
        },
        ornamentTremblement: {
            x_min: 0,
            x_max: 982.17691453624,
            y_min: 0,
            y_max: 224,
            ha: 224,
            o: 'm 0 0 b 63 36 30 12 48 23 b 157 124 94 66 125 94 b 177 135 164 131 170 135 b 196 122 183 135 189 131 b 268 40 217 94 245 68 b 323 6 288 16 304 6 b 369 20 336 6 350 10 b 412 53 384 29 399 40 b 501 145 442 84 472 114 b 523 158 508 154 516 158 b 543 145 528 158 536 154 b 641 45 576 112 608 78 b 698 17 658 27 677 17 b 729 23 708 17 719 20 b 804 65 756 32 780 46 b 904 154 837 95 871 124 b 920 163 910 160 916 163 b 936 153 924 163 930 160 b 1024 60 965 121 996 92 b 1112 13 1053 29 1080 13 b 1184 39 1135 13 1158 22 b 1359 194 1248 84 1305 138 b 1413 301 1388 223 1403 261 b 1404 323 1417 315 1413 323 b 1391 320 1400 323 1395 321 b 1344 294 1375 314 1358 307 b 1224 186 1305 258 1269 216 b 1194 173 1212 179 1202 173 b 1165 193 1184 173 1175 179 b 1096 271 1145 222 1122 248 b 1001 318 1061 302 1031 318 b 903 268 969 318 937 301 b 806 186 871 239 841 210 b 782 174 796 179 789 174 b 756 193 773 174 765 180 b 652 291 729 232 693 266 b 596 308 634 302 615 308 b 530 278 573 308 552 298 l 415 168 b 393 157 408 161 400 157 b 373 171 387 157 380 161 b 305 245 353 197 330 222 b 248 276 285 266 266 278 b 189 245 229 276 210 266 b 81 144 156 209 120 174 b 0 0 33 109 26 56 z',
        },
        ornamentPrecompAppoggTrill: {
            x_min: -0.11067192132025548,
            x_max: 1066,
            y_min: -50,
            y_max: 533.1706452421108,
            ha: 583.1706452421108,
            o: 'm 187 -46 b 213 -14 197 -37 204 -26 b 285 151 251 36 266 94 b 304 189 294 177 297 189 b 337 168 311 189 320 181 b 458 33 386 131 415 76 b 495 12 472 19 484 12 b 531 40 508 12 518 22 b 580 168 557 79 569 124 b 622 235 592 213 603 235 b 683 194 636 235 655 222 b 838 26 737 140 791 86 b 919 -33 860 -1 881 -39 b 984 53 960 -27 971 19 b 1022 156 998 86 1008 122 b 1054 190 1032 179 1041 190 b 1089 167 1063 190 1074 183 b 1208 32 1129 122 1171 78 b 1244 10 1221 17 1231 10 b 1273 22 1253 10 1263 14 b 1496 206 1352 78 1427 137 b 1535 310 1526 236 1535 272 b 1531 359 1535 325 1534 343 b 1496 343 1515 360 1506 351 l 1309 192 b 1269 167 1289 176 1279 167 b 1234 199 1260 167 1251 177 b 1122 324 1200 243 1168 289 b 1074 344 1106 337 1089 344 b 1014 301 1051 344 1030 328 b 952 144 985 252 971 197 b 933 121 946 128 940 121 b 910 137 927 121 920 125 b 850 210 888 161 870 186 b 687 369 799 266 750 325 b 631 390 665 383 647 390 b 567 327 602 390 580 369 b 527 199 554 284 543 242 b 508 168 520 179 514 168 b 482 192 503 168 495 177 b 353 328 444 240 405 292 b 312 343 338 338 324 343 b 266 297 292 343 276 327 b 204 125 248 239 232 180 b 143 79 193 102 173 79 b 92 122 117 79 105 102 b 81 154 86 131 84 143 b 48 423 59 242 50 333 b 45 544 46 464 45 504 b 53 730 45 606 48 668 b 40 768 55 744 52 766 b 13 730 19 770 14 747 b 0 514 7 658 -1 586 b 26 122 3 383 6 252 b 75 -36 35 66 40 10 b 134 -72 92 -59 112 -72 b 187 -46 151 -72 170 -63 z',
        },
        ornamentPrecompSlideTrillDAnglebert: {
            x_min: 0,
            x_max: 1088,
            y_min: -380,
            y_max: 252,
            ha: 632,
            o: 'm 560 -539 b 439 -481 527 -497 484 -485 b 354 -461 409 -478 380 -477 b 131 -154 236 -389 161 -285 b 124 -98 127 -135 124 -117 b 196 55 124 -40 148 10 b 308 99 230 86 268 99 b 399 81 337 99 367 92 b 514 22 441 66 477 43 b 619 -30 567 -9 590 -30 b 719 17 642 -30 670 -16 b 861 131 769 52 818 88 b 899 150 874 144 887 150 b 936 117 913 150 926 138 b 965 43 948 94 956 68 b 1007 -1 973 24 978 -1 b 1048 30 1025 -1 1037 16 b 1070 65 1057 40 1064 52 b 1110 148 1084 92 1096 121 b 1145 190 1120 164 1120 190 b 1191 153 1169 192 1179 168 b 1256 29 1218 115 1231 68 b 1292 1 1267 10 1277 1 b 1320 10 1300 1 1309 4 b 1369 48 1339 19 1355 33 b 1515 196 1418 96 1464 148 b 1567 343 1558 238 1567 287 b 1555 363 1565 357 1562 363 b 1539 356 1551 363 1547 360 b 1433 268 1502 330 1466 301 b 1335 171 1401 236 1374 199 b 1310 163 1325 166 1318 163 b 1286 183 1302 163 1293 168 b 1218 311 1264 226 1247 272 b 1164 351 1200 337 1182 351 b 1110 308 1146 351 1128 337 b 1031 176 1084 265 1058 219 b 1015 161 1025 166 1021 161 b 999 179 1009 161 1005 167 b 955 279 985 213 973 248 b 913 307 943 300 930 307 b 887 302 904 307 896 305 b 852 281 874 298 863 291 b 693 167 804 236 747 204 b 612 140 667 150 639 140 b 549 157 592 140 570 145 b 403 220 503 181 452 202 b 271 248 360 236 315 248 b 179 229 239 248 209 242 b 0 -29 65 180 0 85 b 9 -104 0 -53 3 -78 b 397 -526 56 -317 183 -464 b 505 -547 432 -536 468 -547 b 560 -539 524 -547 541 -544 z',
        },
        ornamentPrecompSlideTrillBach: {
            x_min: 0,
            x_max: 1185,
            y_min: -380,
            y_max: 465,
            ha: 845,
            o: 'm 624 -544 b 642 -528 638 -543 642 -537 b 639 -514 642 -524 642 -520 b 590 -444 629 -487 609 -467 b 523 -413 573 -422 553 -410 b 498 -415 514 -415 507 -415 b 399 -389 464 -415 431 -405 b 89 -157 281 -330 176 -255 b 72 -117 78 -144 72 -131 b 73 -101 72 -111 72 -107 b 187 186 91 3 147 91 b 246 230 200 216 222 230 b 300 209 262 230 281 223 b 456 48 359 163 403 101 b 540 -10 494 10 518 -10 b 625 59 566 -10 589 13 b 690 148 648 88 668 118 b 711 167 697 160 704 167 b 733 153 719 167 724 163 b 844 14 769 105 808 60 b 903 -42 873 -23 886 -42 b 973 -1 919 -42 937 -27 b 1008 33 986 7 996 20 b 1048 81 1021 48 1035 65 b 1050 37 1048 66 1050 52 b 1047 -24 1050 17 1048 -3 b 1038 -275 1038 -108 1040 -192 l 1037 -289 b 1045 -302 1037 -295 1038 -301 b 1068 -284 1056 -304 1064 -292 b 1084 -242 1076 -271 1081 -256 b 1099 -109 1096 -199 1099 -154 b 1106 158 1099 -19 1106 71 b 1128 187 1113 167 1120 177 b 1168 223 1143 212 1155 223 b 1210 193 1179 223 1191 213 b 1220 183 1214 190 1215 186 b 1329 36 1261 138 1292 84 b 1374 7 1345 16 1358 7 b 1411 20 1384 7 1395 12 b 1479 84 1437 37 1459 59 b 1610 235 1521 135 1564 186 b 1706 403 1655 282 1695 334 b 1614 346 1663 400 1637 373 b 1464 170 1564 287 1515 228 b 1440 150 1453 156 1447 150 b 1414 173 1433 150 1426 158 b 1283 336 1371 228 1333 288 b 1220 366 1261 356 1240 366 b 1148 318 1194 366 1169 350 b 1103 255 1133 297 1119 275 b 1097 301 1102 271 1100 285 b 1099 334 1099 312 1099 324 b 1092 428 1099 367 1094 397 b 1071 647 1087 501 1079 575 b 1058 670 1071 657 1071 670 b 1035 648 1047 670 1038 661 b 1018 516 1024 605 1015 560 b 1041 203 1025 412 1037 307 b 1043 180 1041 196 1043 187 b 992 127 1027 161 1009 143 b 965 111 981 117 972 111 b 936 132 955 111 946 120 b 829 268 900 179 867 225 b 760 317 801 301 780 317 b 691 258 739 317 719 297 b 605 147 664 219 641 177 b 589 138 599 141 593 138 b 572 148 583 138 579 141 b 415 317 520 206 467 261 b 327 372 390 343 366 366 b 300 373 317 373 308 373 b 154 295 239 373 190 348 b 55 138 120 243 85 192 b 0 -53 22 79 0 13 b 160 -317 0 -156 49 -252 b 209 -354 177 -327 192 -343 b 510 -531 305 -419 397 -495 b 593 -547 537 -540 564 -547 b 624 -544 603 -547 613 -546 z',
        },
        ornamentPrecompTrillSuffixDandrieu: {
            x_min: 0,
            x_max: 1003,
            y_min: -20,
            y_max: 521,
            ha: 541,
            o: 'm 791 -16 b 844 33 812 -3 829 14 b 981 271 900 107 937 190 b 994 288 984 278 985 288 b 1009 269 1004 288 1007 278 b 1077 112 1034 217 1051 163 b 1158 43 1103 62 1129 43 b 1231 69 1179 43 1204 55 b 1348 189 1280 98 1315 143 b 1444 451 1407 271 1444 357 b 1431 547 1444 482 1440 514 b 1188 750 1401 665 1299 750 b 1158 747 1178 750 1168 749 b 1079 684 1119 742 1089 727 b 1063 632 1076 665 1071 648 b 1056 609 1058 622 1056 615 b 1071 599 1056 602 1060 599 b 1086 600 1076 599 1080 600 b 1130 605 1102 603 1116 605 b 1244 569 1171 605 1210 595 b 1349 346 1322 511 1349 433 b 1348 312 1349 334 1349 324 b 1289 197 1345 266 1325 228 b 1238 174 1270 181 1253 174 b 1188 215 1220 174 1202 187 b 1145 308 1172 245 1159 276 b 1096 413 1129 343 1120 382 b 1053 438 1084 431 1068 438 b 1011 413 1038 438 1022 431 b 955 324 989 384 971 354 b 850 127 920 258 886 192 b 838 112 847 121 842 112 b 824 128 828 109 825 121 b 802 193 815 150 809 171 b 730 400 779 264 766 337 b 688 431 719 420 703 431 b 647 403 674 431 660 422 b 606 338 632 383 619 361 b 513 167 575 282 546 223 b 480 122 503 150 498 122 b 452 171 459 122 459 153 b 420 255 442 199 432 228 b 337 408 399 308 380 364 b 276 436 317 428 297 436 b 215 397 253 436 230 423 b 23 72 148 289 81 184 b 0 29 17 59 0 40 b 7 17 0 23 1 20 b 59 58 26 7 46 39 b 190 276 111 127 143 206 b 216 301 202 292 207 301 b 245 279 223 301 232 294 b 311 166 278 248 292 206 b 367 16 331 117 346 65 b 402 -19 377 -7 387 -19 b 438 -4 412 -19 423 -13 b 518 88 474 17 495 55 b 628 284 562 150 592 216 b 657 223 648 266 651 243 b 717 13 677 154 696 84 b 755 -29 726 -16 737 -29 b 791 -16 765 -29 776 -24 z',
        },
        ornamentPrecompDoubleCadenceUpperPrefix: {
            x_min: 0,
            x_max: 1246,
            y_min: -30,
            y_max: 296.0302860502196,
            ha: 326.0302860502196,
            o: 'm 360 -43 b 559 59 445 -43 503 7 b 698 236 615 111 652 179 b 714 248 704 243 710 248 b 727 235 719 248 721 243 l 848 42 b 883 12 860 22 870 12 b 917 32 891 12 903 19 b 946 62 927 42 939 50 b 1037 192 972 108 1009 147 b 1057 210 1044 204 1051 210 b 1076 190 1063 210 1068 203 l 1176 12 b 1215 -19 1188 -9 1201 -19 b 1250 -6 1225 -19 1237 -14 b 1284 27 1264 3 1274 16 b 1380 190 1323 78 1351 135 b 1395 210 1384 197 1385 210 b 1413 190 1405 210 1410 197 b 1508 40 1436 134 1467 85 b 1564 3 1529 14 1547 3 b 1617 32 1580 3 1597 12 b 1767 238 1678 92 1719 167 b 1794 310 1781 259 1791 282 b 1752 294 1776 317 1764 304 b 1656 164 1711 258 1689 206 b 1629 144 1646 151 1637 144 b 1603 161 1620 144 1613 150 b 1502 315 1562 207 1525 258 b 1452 357 1490 344 1470 357 b 1397 320 1431 357 1411 344 b 1316 170 1368 271 1345 219 b 1280 127 1306 154 1303 127 b 1244 171 1256 127 1254 154 b 1145 337 1210 226 1179 282 b 1110 363 1135 354 1122 363 b 1070 338 1097 363 1084 354 b 1050 311 1063 330 1057 320 b 959 181 1017 271 992 223 b 939 167 950 173 945 167 b 920 184 933 167 927 173 b 818 343 887 238 852 291 b 759 395 795 377 778 395 b 701 344 742 395 724 377 b 698 338 700 341 700 340 b 544 154 652 272 605 207 b 412 98 501 117 458 98 b 304 130 377 98 341 108 b 95 373 204 187 144 275 b 58 426 85 393 82 428 b 19 366 26 426 26 389 b 0 307 13 346 0 327 b 4 287 0 300 1 294 b 174 36 49 194 91 102 b 360 -43 230 -9 289 -43 z',
        },
        ornamentPrecompDoubleCadenceUpperPrefixTurn: {
            x_min: 0,
            x_max: 1226,
            y_min: -237,
            y_max: 436,
            ha: 673,
            o: 'm 1279 -341 b 1293 -252 1293 -307 1295 -278 b 1277 36 1287 -156 1282 -59 l 1273 118 b 1318 176 1289 137 1303 157 b 1349 203 1332 193 1342 203 b 1378 168 1359 203 1367 192 b 1456 35 1401 122 1428 78 b 1511 -12 1476 3 1493 -12 b 1568 23 1526 -12 1544 0 b 1597 53 1578 32 1588 42 b 1705 186 1629 101 1669 143 b 1761 284 1728 216 1751 246 b 1765 300 1763 288 1765 295 b 1763 307 1765 302 1765 305 b 1737 302 1754 311 1744 308 b 1718 287 1729 298 1725 292 b 1598 145 1673 245 1637 194 b 1578 130 1590 135 1584 130 b 1557 147 1571 130 1565 135 b 1447 321 1516 202 1488 265 b 1403 351 1433 341 1417 351 b 1358 323 1388 351 1372 341 b 1269 209 1329 285 1299 248 b 1254 521 1264 314 1259 418 b 1228 616 1253 554 1247 588 b 1218 628 1224 621 1223 628 l 1215 628 b 1201 613 1210 626 1202 619 b 1200 600 1200 609 1200 605 l 1200 586 b 1211 348 1204 507 1207 428 b 1217 166 1214 288 1215 226 b 1202 181 1212 168 1208 174 b 1094 334 1168 233 1130 284 b 1048 366 1079 356 1064 366 b 1004 331 1034 366 1018 354 b 904 154 969 275 930 220 b 873 202 887 171 880 187 b 778 356 845 256 819 311 b 737 379 763 372 750 379 b 698 353 724 379 711 370 l 621 232 b 415 114 570 154 495 114 b 302 138 377 114 340 121 b 73 400 187 192 117 284 b 55 420 69 415 62 420 b 42 410 50 420 45 416 b 0 292 23 373 0 334 b 4 262 0 282 1 272 b 168 39 32 168 92 99 b 359 -26 225 -6 292 -26 b 585 76 446 -26 530 10 b 668 202 616 115 641 160 b 693 228 680 219 687 228 b 720 203 700 228 707 219 b 801 63 752 160 775 111 b 844 7 812 42 818 7 b 910 66 877 6 894 39 b 923 94 916 75 919 85 b 995 219 945 137 968 179 b 1025 184 1009 210 1017 197 b 1119 56 1054 141 1087 98 b 1166 20 1138 32 1152 20 b 1215 50 1181 20 1195 30 b 1221 56 1217 52 1218 55 b 1228 -163 1223 -17 1225 -89 b 1279 -341 1231 -223 1251 -278 z',
        },
        ornamentPrecompTrillLowerSuffix: {
            x_min: 0,
            x_max: 833,
            y_min: -309,
            y_max: 319,
            ha: 628,
            o: 'm 778 -444 b 801 -445 785 -444 793 -445 b 1037 -338 894 -445 969 -397 b 1200 37 1149 -240 1200 -109 b 1084 406 1200 171 1172 300 b 1024 444 1064 431 1043 444 b 960 390 999 444 978 426 b 841 163 923 314 886 236 b 812 128 832 150 827 128 b 786 167 796 130 793 153 b 660 418 744 251 716 341 b 599 459 639 445 619 459 b 541 410 577 459 557 444 b 439 197 507 340 474 269 b 422 179 435 190 435 179 b 338 393 392 251 379 328 b 275 439 320 423 298 439 b 212 396 253 439 230 425 b 71 219 170 333 128 268 b 0 45 17 173 16 112 b 68 98 32 62 50 78 b 194 264 112 150 153 209 b 230 292 209 282 219 292 b 264 261 240 292 251 282 b 274 242 268 255 269 248 b 346 46 304 179 325 112 b 376 10 351 32 354 10 b 412 35 392 10 403 22 b 452 107 429 56 441 82 b 541 291 481 168 511 230 b 556 307 547 302 552 307 b 573 295 562 307 567 302 b 624 217 595 272 611 246 b 721 1 657 145 685 72 b 755 -27 732 -19 742 -27 b 786 -16 765 -27 775 -24 b 857 73 819 7 840 39 b 952 256 887 134 920 194 b 978 289 963 279 969 289 b 1009 262 985 289 994 281 b 1030 235 1017 253 1024 245 b 1110 -4 1071 161 1099 81 b 1116 -68 1113 -26 1116 -48 b 1009 -243 1116 -140 1090 -200 b 848 -291 956 -272 901 -291 b 730 -261 809 -291 770 -282 b 696 -248 714 -252 703 -248 b 671 -284 684 -248 678 -258 l 662 -312 b 657 -357 658 -330 657 -344 b 744 -439 657 -403 683 -425 z',
        },
        brassScoop: {
            x_min: -0.4444444444444445,
            x_max: 312,
            y_min: -390,
            y_max: 28,
            ha: 418,
            o: 'm 0 -562 b 393 -256 171 -504 307 -412 b 449 -39 431 -189 449 -115 b 448 -1 449 -26 449 -14 b 433 40 446 14 448 40 b 408 -3 410 40 412 14 b 396 -66 403 -23 402 -46 b 45 -397 346 -243 209 -337 b 0 -451 13 -409 1 -423 b 0 -562 -1 -485 0 -520 z',
        },
        brassDoitMedium: {
            x_min: -0.32815253965710617,
            x_max: 476.21251177608565,
            y_min: -50,
            y_max: 333.1535583875376,
            ha: 383.1535583875376,
            o: 'm 16 -72 b 27 -71 19 -72 23 -72 b 215 -33 89 -56 153 -48 b 521 114 327 -7 435 35 b 685 432 615 199 691 295 b 670 480 684 449 688 475 b 642 441 654 482 648 456 b 403 183 599 321 513 240 b 79 89 301 130 192 105 b 0 -1 -12 76 0 76 b 0 -50 0 -17 1 -33 b 16 -72 0 -65 3 -72 z',
        },
        brassFallLipShort: {
            x_min: 0,
            x_max: 298,
            y_min: -344,
            y_max: 65,
            ha: 409,
            o: 'm 396 -495 b 420 -461 412 -487 418 -474 b 429 -382 428 -435 429 -409 b 426 -330 429 -364 428 -347 b 285 -6 410 -209 356 -104 b 98 94 239 59 173 94 b 39 86 79 94 58 92 b 0 49 20 81 0 73 l 0 -52 b 10 -69 0 -62 1 -69 b 20 -68 13 -69 16 -69 b 88 -56 45 -59 66 -56 b 261 -160 156 -56 213 -95 b 396 -495 333 -259 382 -369 z',
        },
        brassLiftMedium: {
            x_min: 0,
            x_max: 807,
            y_min: 0,
            y_max: 838,
            ha: 838,
            o: 'm 50 0 b 55 1 52 0 53 0 b 58 23 65 7 59 16 b 55 58 56 36 55 48 b 130 117 55 99 75 112 b 220 213 202 121 220 141 b 315 308 220 289 238 308 l 336 308 b 408 380 393 310 406 321 b 461 452 409 438 416 452 b 485 451 468 452 477 451 b 569 510 531 448 556 464 b 573 543 572 520 572 531 b 657 619 580 605 595 618 b 698 621 670 619 684 619 b 788 700 749 625 778 649 b 798 778 792 726 793 752 b 873 857 806 841 809 845 b 985 950 927 867 973 887 b 1084 1047 1002 1035 1004 1034 b 1162 1128 1133 1056 1162 1087 b 1146 1182 1162 1145 1158 1164 b 1125 1207 1140 1191 1136 1207 l 1122 1207 b 1110 1191 1113 1205 1110 1198 b 1112 1174 1110 1185 1112 1178 b 1048 1110 1109 1126 1096 1113 b 1028 1109 1043 1110 1035 1109 b 939 1022 969 1102 948 1081 b 845 922 929 949 917 936 b 746 812 773 909 753 886 b 744 780 744 802 744 791 b 635 681 737 700 717 683 b 524 583 553 680 536 665 b 439 510 514 520 503 510 b 357 431 377 510 360 492 l 357 406 b 314 364 356 379 343 364 b 238 361 288 364 264 364 b 173 300 202 357 180 334 b 167 245 168 281 167 262 b 105 174 166 192 157 180 b 75 171 95 173 85 171 b 6 112 30 166 14 153 b 0 73 1 98 0 85 b 37 10 0 45 13 26 b 50 0 42 7 46 0 z',
        },
        brassFallRoughMedium: {
            x_min: 0,
            x_max: 791,
            y_min: 0,
            y_max: 819,
            ha: 819,
            o: 'm 1117 0 b 1139 101 1129 26 1139 71 b 1138 121 1139 109 1139 115 b 1084 193 1125 171 1110 193 b 1044 183 1073 193 1060 189 b 1022 177 1035 179 1028 177 b 1007 209 1012 177 1008 186 b 876 324 1004 292 959 330 b 799 317 850 321 825 320 b 759 354 772 314 755 320 b 760 373 760 360 760 366 b 759 392 760 379 760 384 b 681 477 753 451 730 477 b 654 474 672 477 664 475 b 606 467 638 471 622 468 b 586 465 599 465 592 465 b 564 481 570 465 564 469 b 569 505 564 487 566 495 b 575 553 572 521 575 537 b 572 585 575 564 573 575 b 481 665 560 657 539 668 b 412 665 458 664 435 665 b 382 690 392 667 382 672 b 383 700 382 693 383 696 b 386 773 387 724 387 749 b 297 858 382 828 351 857 b 229 861 274 858 251 858 b 190 897 207 863 193 871 b 163 1012 186 936 180 976 b 79 1084 145 1050 124 1084 b 66 1083 75 1084 71 1083 b 43 1096 49 1081 43 1087 b 48 1112 43 1100 45 1106 b 53 1130 52 1119 53 1125 b 39 1169 53 1145 45 1158 b 26 1179 36 1175 30 1179 b 16 1171 22 1179 17 1176 b 0 1103 10 1149 0 1126 b 9 1067 0 1092 1 1079 b 91 1021 26 1031 52 1018 b 145 978 122 1024 141 1011 b 156 913 147 956 151 935 b 291 795 170 831 210 795 b 346 768 337 795 346 796 b 344 743 346 760 344 753 b 343 716 344 733 343 724 b 455 600 343 651 390 602 b 505 605 471 599 490 605 b 528 598 514 605 523 603 b 536 579 534 592 536 586 b 524 523 536 562 526 541 b 523 505 524 517 523 511 b 621 405 523 442 560 405 b 639 406 626 405 634 406 b 677 413 652 408 664 410 b 701 416 687 415 696 416 b 721 392 716 416 721 410 b 720 373 721 386 720 380 b 831 255 714 301 759 252 b 897 261 854 255 876 261 b 926 262 909 261 919 262 b 969 197 963 262 965 252 b 971 184 969 193 971 189 b 1031 115 979 137 998 115 b 1071 122 1043 115 1056 118 b 1096 130 1079 125 1086 127 b 1087 59 1094 107 1087 82 b 1117 0 1087 37 1094 17 z',
        },
        brassBend: {
            x_min: 0,
            x_max: 381,
            y_min: 0,
            y_max: 367,
            ha: 367,
            o: 'm 298 0 b 472 50 359 0 418 14 b 537 135 501 71 530 92 b 543 216 543 163 543 190 l 543 266 b 544 308 543 281 543 295 b 549 433 546 354 549 395 b 543 507 549 459 547 482 b 533 528 541 516 544 528 b 511 508 524 528 514 520 b 508 478 510 498 508 488 b 504 318 507 425 504 372 b 505 264 504 300 505 282 b 446 181 505 220 484 199 b 294 150 396 160 344 150 b 92 194 226 150 158 167 b 45 269 62 207 45 230 b 46 359 46 300 46 328 b 37 497 46 405 45 451 b 27 523 36 507 37 523 b 4 498 14 524 6 513 b 3 481 3 492 3 487 b 0 409 1 456 0 433 b 4 228 0 348 4 288 b 3 177 4 210 4 194 b 68 53 1 125 20 84 b 200 10 108 27 154 17 b 298 0 233 4 266 0 z',
        },
        brassMuteClosed: {
            x_min: 0,
            x_max: 274,
            y_min: 0,
            y_max: 260,
            ha: 260,
            o: 'm 203 0 b 209 1 206 0 207 0 b 216 13 215 4 216 9 l 215 27 l 215 153 b 216 161 216 156 216 158 b 372 164 268 163 318 164 b 395 184 383 164 395 166 l 395 189 b 357 229 392 209 386 229 b 219 228 311 229 265 228 l 223 310 b 209 357 225 328 219 344 b 189 374 203 364 197 374 b 184 373 187 374 186 373 b 177 359 179 372 177 366 l 177 348 l 173 222 l 39 222 b 0 206 12 222 0 219 b 10 174 0 199 3 189 b 46 157 19 157 30 157 b 108 160 68 158 88 160 b 171 161 130 161 150 161 l 167 58 b 184 16 167 40 171 26 b 203 0 192 12 196 0 z',
        },
        brassMuteOpen: {
            x_min: 1,
            x_max: 313.01193341111656,
            y_min: 0,
            y_max: 309,
            ha: 309,
            o: 'm 265 0 b 451 189 363 7 452 88 l 451 215 b 348 383 441 285 405 343 b 209 445 288 426 248 445 b 84 379 168 445 132 420 b 69 364 79 373 73 369 b 1 213 30 323 1 275 b 230 0 1 88 94 0 z m 210 62 b 128 73 181 62 154 66 b 40 171 71 91 42 125 b 52 226 40 187 45 206 b 197 374 79 295 130 344 b 228 382 207 380 217 382 b 300 361 252 382 276 370 b 374 308 328 350 353 331 b 410 223 397 284 410 253 b 393 163 410 202 405 181 b 210 62 354 91 288 63 z',
        },
        brassFlip: {
            x_min: 0,
            x_max: 402,
            y_min: 0,
            y_max: 361,
            ha: 361,
            o: 'm 579 0 b 511 153 579 68 557 117 b 52 504 359 271 206 387 b 29 520 45 510 39 520 b 20 517 26 520 23 518 b 0 477 3 510 0 494 l 0 125 b 17 20 1 92 1 56 b 40 84 37 40 40 60 b 42 287 40 151 42 219 l 42 363 z',
        },
        brassJazzTurn: {
            x_min: 0,
            x_max: 646,
            y_min: 0,
            y_max: 212,
            ha: 212,
            o: 'm 310 0 b 367 33 327 0 344 10 b 389 55 374 40 382 49 b 490 145 423 85 456 114 b 507 154 495 151 501 154 b 524 144 513 154 517 151 b 598 72 547 120 575 98 b 700 24 625 42 662 24 b 765 43 721 24 744 30 b 893 147 812 72 855 105 b 930 212 910 166 923 186 b 912 215 923 213 917 215 b 871 199 896 215 883 209 b 812 153 852 183 832 167 b 789 144 805 148 796 144 b 773 156 782 144 776 147 b 691 251 757 199 720 222 b 603 301 658 282 631 301 b 527 258 580 301 556 288 b 420 156 494 222 455 190 b 399 143 412 147 405 143 b 377 157 392 143 386 147 b 259 282 340 200 300 242 b 219 305 245 298 232 305 b 177 279 204 305 192 297 b 55 127 137 228 95 177 b 0 52 36 104 20 79 b 14 50 6 50 10 50 b 53 66 32 50 45 58 b 115 131 75 88 98 108 b 135 148 124 143 130 148 b 157 132 141 148 148 143 b 252 33 186 96 219 65 b 310 0 275 12 292 0 z',
        },
        brassSmear: {
            x_min: 0,
            x_max: 334,
            y_min: 0,
            y_max: 151,
            ha: 151,
            o: 'm 321 0 b 475 125 390 0 436 43 b 481 143 478 131 481 137 b 475 154 481 147 480 151 b 449 148 468 158 458 154 b 395 132 432 137 413 132 b 343 140 377 132 360 137 b 229 194 301 148 266 173 b 168 217 206 209 186 217 b 109 192 148 217 130 209 b 0 26 59 148 32 89 b 59 63 32 29 45 48 b 98 84 72 78 84 84 b 130 73 108 84 118 81 b 213 26 157 58 183 37 b 321 0 255 9 289 0 z',
        },
        stringsDownBow: {
            x_min: 0,
            x_max: 306,
            y_min: -0.09607201951262866,
            y_max: 366,
            ha: 366.09607201951263,
            o: 'm 405 0 b 425 17 413 -1 420 9 b 439 66 435 32 439 48 b 441 268 439 137 441 202 b 436 412 441 314 439 361 l 435 413 b 423 469 435 436 431 456 b 344 508 406 501 373 501 b 204 527 298 520 251 527 b 60 498 156 527 108 518 b 7 438 32 485 10 468 l 7 426 b 4 337 7 396 7 367 b 0 140 0 272 0 206 b 1 42 0 107 0 73 b 13 3 1 27 -3 4 b 40 39 29 3 35 24 b 42 53 42 43 40 49 b 49 141 48 84 49 112 b 48 215 49 167 48 192 b 49 252 48 228 48 240 l 49 312 b 130 343 72 331 99 340 b 206 347 156 346 180 347 b 372 314 262 347 318 338 l 390 307 l 390 245 b 390 138 392 212 390 176 b 397 23 390 101 392 62 b 405 0 399 14 393 1 z',
        },
        stringsUpBow: {
            x_min: 0,
            x_max: 219.2842808242076,
            y_min: 0,
            y_max: 489,
            ha: 489,
            o: 'm 151 0 b 184 42 170 12 180 26 b 297 554 223 212 261 382 b 315 690 305 598 318 645 b 304 704 315 697 311 704 b 276 670 288 704 282 697 b 157 131 236 490 196 311 l 157 144 b 73 526 134 276 104 396 b 30 677 60 576 52 638 b 13 694 26 684 22 694 b 0 674 9 694 0 691 l 0 671 b 10 603 3 649 6 626 b 105 174 42 461 72 317 b 150 0 117 117 128 58 z',
        },
        stringsHarmonic: {
            x_min: 0,
            x_max: 191,
            y_min: 0,
            y_max: 202,
            ha: 202,
            o: 'm 143 0 b 275 122 217 0 275 53 b 127 291 275 206 202 291 b 0 154 63 291 0 222 b 143 0 0 76 71 0 z m 122 68 b 43 105 89 66 59 75 b 39 124 40 111 39 117 b 79 199 39 148 56 180 b 145 226 101 216 122 226 b 199 210 163 226 180 220 b 235 150 223 196 235 173 b 203 92 235 128 225 107 b 122 68 181 76 150 68 z',
        },
        pluckedSnapPizzicatoAbove: {
            x_min: 0,
            x_max: 201,
            y_min: 0,
            y_max: 325,
            ha: 325,
            o: 'm 171 0 b 289 99 240 0 289 45 b 258 183 289 130 274 156 b 174 269 236 217 203 240 l 174 408 b 174 429 174 415 176 422 b 131 468 168 451 153 468 b 117 451 120 468 117 461 b 118 429 117 444 118 435 b 115 307 117 389 115 347 b 0 166 59 295 0 223 b 171 0 0 85 89 0 z m 134 55 b 52 131 84 55 52 85 b 115 233 52 179 81 209 b 114 192 114 220 114 206 b 174 120 114 137 114 137 l 174 228 b 233 148 200 207 223 183 b 236 130 235 143 236 135 b 197 72 236 105 223 85 b 134 55 177 60 157 55 z',
        },
        pluckedSnapPizzicatoBelow: {
            x_min: 0,
            x_max: 211,
            y_min: 0,
            y_max: 307,
            ha: 307,
            o: 'm 145 7 b 163 0 153 3 158 0 b 173 23 170 0 173 7 l 173 140 l 170 140 l 170 163 l 171 163 b 206 170 179 164 193 166 b 304 287 264 186 304 233 b 281 354 304 308 297 333 b 118 442 240 412 186 439 b 0 324 69 442 0 370 b 115 176 0 266 55 202 l 115 56 b 145 7 114 33 125 19 z m 115 220 b 62 256 92 223 73 230 b 53 292 56 269 53 281 b 78 344 53 311 60 328 b 168 384 105 372 135 384 b 213 376 183 384 199 382 b 253 321 239 366 253 346 b 246 291 253 311 251 301 b 170 226 230 256 203 236 l 170 258 b 148 305 171 278 163 292 b 128 315 143 310 135 315 l 124 315 b 115 301 117 314 115 308 z',
        },
        pluckedLeftHandPizzicato: {
            x_min: 0,
            x_max: 271,
            y_min: 0,
            y_max: 284,
            ha: 284,
            o: 'm 213 0 b 223 14 222 0 223 7 b 222 35 223 22 222 29 l 222 176 b 373 170 272 174 323 170 b 390 180 382 170 390 171 l 390 184 b 347 232 386 207 382 232 b 219 238 307 233 266 235 l 219 364 b 171 409 219 395 193 409 b 156 393 160 409 156 402 b 158 370 156 384 158 376 l 158 240 b 16 239 115 240 66 239 b 0 226 7 239 0 238 l 0 223 b 50 179 1 203 29 179 b 158 177 86 179 122 179 l 158 63 b 161 29 158 52 158 40 b 213 0 166 -1 194 1 z',
        },
        keyboardPedalPed: {
            x_min: 0,
            x_max: 944,
            y_min: -13,
            y_max: 550,
            ha: 563,
            o: 'm 22 0 b 109 78 53 0 105 46 l 144 333 b 163 376 147 347 140 372 b 364 465 238 390 301 426 b 454 599 416 497 454 540 b 452 618 454 605 454 612 b 320 770 442 694 396 747 b 248 779 295 778 272 779 b 193 778 229 779 212 779 b 160 780 181 778 167 775 b 137 792 153 789 144 791 b 109 789 128 792 118 789 b 7 719 59 789 48 737 b 23 708 16 714 20 708 b 36 710 29 710 33 710 b 53 684 52 710 53 698 l 53 674 b 43 386 53 577 53 482 b 20 164 36 312 30 238 b 1 30 14 120 7 75 b 0 19 0 26 0 22 b 22 0 0 9 4 0 z m 171 425 b 156 442 160 425 156 429 b 157 475 157 452 157 464 b 164 602 161 517 164 560 b 161 698 164 635 163 667 b 184 729 161 720 167 729 l 193 729 b 348 563 278 719 348 641 b 346 539 348 554 347 547 b 171 425 328 459 229 422 z m 979 6 b 1008 13 986 6 995 9 b 1081 101 1047 29 1079 46 b 1116 449 1087 217 1104 333 b 1143 654 1123 518 1133 586 b 1148 685 1145 664 1148 675 b 1140 704 1148 693 1146 700 b 1107 716 1130 713 1119 716 b 1056 706 1092 716 1073 710 b 1037 671 1035 703 1038 685 b 1004 439 1025 595 1014 517 b 986 419 1001 428 999 419 b 979 419 985 419 982 420 b 935 426 965 423 949 425 b 795 376 884 426 838 405 b 664 153 714 323 664 249 b 665 130 664 145 665 138 b 753 29 671 65 704 29 b 815 40 773 29 792 33 b 975 147 873 65 923 101 b 965 45 971 108 968 76 b 979 6 963 17 966 6 z m 393 -17 b 634 145 494 16 579 52 b 638 160 636 151 638 156 b 625 168 638 166 634 168 b 621 167 624 168 622 168 b 524 118 582 164 544 160 b 495 79 517 104 505 92 b 435 33 471 49 452 33 b 380 96 416 33 397 55 b 369 145 373 114 369 131 b 442 225 369 186 395 213 b 468 232 451 228 459 229 b 654 344 539 255 606 285 b 677 395 667 360 677 376 b 672 415 677 402 675 408 b 612 459 661 442 639 455 b 589 461 602 461 592 461 b 348 328 500 461 409 408 b 269 120 302 268 269 199 b 379 -19 269 45 318 -19 b 393 -17 383 -19 389 -19 z m 395 240 b 494 383 418 300 452 344 l 521 405 b 544 419 528 409 536 418 b 554 415 547 419 550 418 b 570 383 564 406 570 396 l 570 379 b 552 331 570 360 562 344 b 395 240 511 285 462 253 z m 827 89 b 792 111 815 89 804 96 b 766 204 775 131 766 158 b 845 360 772 256 799 314 b 871 372 854 369 863 372 b 897 366 880 372 888 369 b 978 279 942 353 963 320 b 976 259 981 272 981 265 b 858 104 942 203 909 147 b 827 89 847 94 837 89 z m 1282 12 b 1336 35 1303 14 1320 23 b 1359 71 1351 45 1359 58 b 1338 102 1359 82 1352 95 b 1254 130 1312 118 1284 130 b 1187 88 1223 130 1202 109 b 1178 65 1182 81 1178 72 b 1195 37 1178 55 1182 45 b 1282 12 1223 23 1253 19 z',
        },
        keyboardPedalUp: {
            x_min: 0,
            x_max: 436.6015132318337,
            y_min: 0,
            y_max: 461,
            ha: 461,
            o: 'm 330 0 b 334 1 331 0 333 0 b 340 12 338 4 340 7 l 338 26 b 340 264 338 105 338 184 b 526 95 400 206 461 148 b 559 71 536 88 547 71 b 564 72 560 71 563 71 b 580 121 580 79 580 102 l 580 127 b 543 203 585 158 573 184 b 472 259 518 219 495 238 l 445 285 b 590 292 494 288 541 291 b 622 318 609 294 618 302 b 628 359 625 331 626 346 b 586 402 632 393 621 405 b 464 395 546 399 504 396 l 559 491 b 567 524 567 500 567 510 b 564 543 567 527 567 536 b 539 596 559 563 560 590 b 494 564 521 600 508 577 b 340 413 442 514 390 464 l 340 560 b 287 664 340 600 321 632 b 271 518 274 612 272 566 b 268 445 269 494 269 469 b 117 569 219 488 168 530 b 96 579 109 575 102 579 b 85 560 89 579 85 573 b 124 446 85 518 82 477 b 209 380 153 426 181 403 b 45 374 154 377 99 376 b 0 324 9 374 0 359 b 63 266 0 265 1 265 b 144 272 89 269 117 272 l 196 272 b 108 193 167 246 138 219 b 60 135 76 164 60 151 b 99 73 60 121 73 105 b 104 68 101 72 102 71 b 114 58 107 60 111 58 b 130 66 120 58 124 62 b 259 186 173 107 217 145 b 256 117 259 163 256 140 b 311 13 256 72 271 37 b 330 0 317 10 323 0 z',
        },
        pictChokeCymbal: {
            x_min: 1,
            x_max: 147,
            y_min: 0,
            y_max: 242,
            ha: 242,
            o: 'm 79 4 b 207 158 153 32 192 88 b 212 200 210 173 212 187 b 143 336 212 253 187 298 b 98 348 131 344 115 348 b 4 295 60 348 16 327 b 1 276 1 289 1 282 b 9 249 1 266 3 258 b 121 183 35 206 72 183 b 156 186 132 183 144 183 b 26 53 134 115 91 73 b 7 39 13 49 7 45 b 19 20 7 33 12 27 b 59 0 30 9 43 0 b 79 4 65 0 72 1 z',
        },
        wiggleArpeggiatoUp: {
            x_min: -22,
            x_max: 300,
            y_min: 0,
            y_max: 176,
            ha: 176,
            o: 'm 173 4 b 196 0 180 1 189 0 b 246 26 215 0 230 9 b 301 117 271 53 285 85 b 312 131 305 125 307 131 b 327 124 315 131 321 128 b 373 86 341 112 353 101 b 412 69 389 75 402 69 b 432 94 425 69 432 79 b 373 181 432 117 413 154 b 235 252 323 216 285 245 b 220 253 229 253 225 253 b 168 215 196 253 181 240 b 111 112 151 180 140 141 b 94 102 105 105 99 102 b 78 111 89 102 84 105 b 0 181 55 135 35 160 b -32 153 -20 194 -32 168 b 0 86 -32 124 -32 109 b 94 36 22 71 73 46 b 173 4 134 16 131 17 z',
        },
        arpeggiatoUp: {
            x_min: 0,
            x_max: 262,
            y_min: 0,
            y_max: 1459,
            ha: 1459,
            o: 'm 190 0 b 160 63 187 29 170 45 b 145 108 150 81 145 95 b 183 163 145 128 157 145 b 300 246 222 190 262 216 b 347 318 333 272 347 295 b 301 393 347 341 331 364 b 258 413 289 403 272 408 b 145 449 220 425 183 436 b 117 464 135 452 120 452 b 140 491 115 477 128 484 b 294 593 192 526 243 557 b 330 647 318 611 330 626 b 314 693 330 660 324 675 b 262 736 302 714 285 729 b 170 763 230 744 200 753 b 122 783 153 768 125 768 b 160 831 120 804 143 818 b 288 922 202 861 246 890 b 333 999 318 945 333 972 b 266 1083 333 1032 310 1064 b 189 1115 240 1094 215 1103 b 122 1178 145 1133 122 1153 b 168 1250 122 1200 138 1223 l 180 1257 b 269 1333 210 1283 240 1306 b 305 1405 294 1356 305 1381 b 284 1469 305 1426 298 1447 b 228 1525 269 1492 251 1511 b 183 1600 197 1545 183 1571 b 190 1640 183 1613 184 1626 b 197 1670 193 1650 194 1660 b 272 1735 213 1719 230 1735 b 295 1734 279 1735 287 1735 b 323 1732 305 1732 314 1732 b 350 1731 333 1732 341 1732 b 377 1742 369 1729 377 1732 b 370 1761 377 1747 374 1754 l 301 1898 b 217 2066 274 1954 248 2012 b 186 2101 204 2089 196 2101 b 154 2069 177 2101 167 2091 b 12 1824 105 1987 59 1907 b 0 1787 4 1810 0 1797 b 59 1744 0 1761 20 1745 b 160 1738 92 1744 125 1740 b 145 1692 156 1721 151 1706 b 135 1633 138 1672 135 1652 b 184 1518 135 1591 151 1552 b 229 1475 199 1503 213 1488 b 259 1431 249 1456 259 1444 b 229 1388 259 1420 249 1407 b 151 1325 203 1365 177 1345 b 105 1279 134 1310 118 1296 b 73 1202 84 1251 73 1227 b 108 1123 73 1176 85 1152 b 255 1031 148 1077 199 1051 b 282 1014 274 1025 282 1021 b 262 991 282 1008 275 1001 b 151 914 226 963 189 939 b 79 851 125 896 99 877 b 63 809 69 837 63 824 b 79 769 63 796 68 783 b 202 697 111 729 154 710 b 266 670 225 690 266 688 b 210 622 266 648 232 635 b 82 534 167 593 120 570 b 55 491 63 518 55 505 b 79 448 55 478 63 465 b 255 361 127 395 192 380 b 288 343 269 359 288 357 b 266 312 288 331 275 320 b 144 223 229 278 184 253 b 85 134 104 193 85 166 b 118 53 85 111 96 85 b 190 0 135 29 160 14 z',
        },
        arpeggiatoDown: {
            x_min: 0,
            x_max: 218,
            y_min: 0,
            y_max: 1440,
            ha: 1440,
            o: 'm 161 16 b 310 261 210 98 259 180 b 314 275 312 266 314 271 b 302 295 314 282 310 289 b 252 311 287 308 269 311 b 217 310 240 311 229 310 b 190 333 202 310 194 315 b 151 412 186 363 171 389 b 102 501 120 452 102 477 b 150 588 102 524 118 547 b 161 603 154 592 158 598 b 181 661 176 622 181 641 b 173 704 181 675 179 690 b 86 795 156 746 121 770 b 53 829 63 811 53 819 b 78 868 53 840 62 851 b 102 888 85 876 94 883 b 180 956 128 912 156 933 b 216 1028 204 979 216 1002 b 203 1081 216 1044 212 1061 b 115 1171 186 1123 148 1145 b 75 1221 88 1191 75 1207 b 114 1272 75 1237 88 1251 b 173 1308 132 1284 154 1296 b 226 1339 190 1318 209 1328 b 265 1405 253 1359 265 1380 b 258 1447 265 1418 264 1431 b 154 1541 242 1499 199 1521 b 109 1581 124 1555 109 1567 b 141 1627 109 1594 121 1608 b 204 1680 163 1646 184 1662 b 233 1742 223 1699 233 1719 b 226 1777 233 1752 230 1764 b 135 1862 210 1822 173 1840 b 104 1895 114 1875 104 1884 b 118 1930 104 1904 109 1914 b 192 2006 135 1961 161 1986 b 206 2029 203 2013 206 2022 b 192 2064 206 2040 197 2052 b 180 2074 187 2071 184 2074 b 156 2061 171 2074 163 2065 b 84 1983 125 2040 102 2013 b 65 1921 71 1961 65 1941 b 88 1853 65 1899 72 1876 b 171 1784 108 1820 138 1801 b 190 1764 184 1777 190 1770 b 174 1741 190 1757 184 1750 b 107 1683 153 1722 128 1704 b 68 1610 81 1659 68 1636 b 88 1548 68 1591 75 1571 b 177 1470 109 1512 141 1489 b 223 1431 209 1453 223 1443 b 179 1390 223 1420 209 1408 b 128 1361 163 1380 145 1371 b 71 1322 108 1348 88 1338 b 32 1253 45 1300 32 1277 b 48 1198 32 1236 37 1218 b 147 1090 71 1152 108 1120 b 174 1057 166 1076 174 1067 b 153 1022 174 1047 167 1037 b 109 982 140 1008 124 995 b 37 919 85 962 59 942 b 9 860 17 899 9 880 b 26 806 9 844 14 827 b 120 717 50 769 84 740 b 138 691 132 708 138 700 b 130 668 138 684 135 677 b 92 618 118 651 105 635 b 59 531 71 589 59 560 b 84 455 59 507 68 481 b 132 386 98 431 115 408 b 148 341 144 372 148 357 b 144 317 148 333 147 324 b 121 305 140 307 131 305 l 98 305 b 82 304 94 304 88 304 l 32 304 b 0 292 10 304 0 302 b 12 266 0 287 4 279 b 60 164 32 233 46 199 b 127 20 84 117 105 68 b 144 0 132 9 137 0 b 161 16 150 0 154 4 z',
        },
        repeat1Bar: {
            x_min: 0,
            x_max: 599.1057280164835,
            y_min: -250,
            y_max: 175,
            ha: 425,
            o: 'm 216 98 b 255 75 236 84 246 75 b 291 104 265 75 274 85 b 323 147 304 117 327 125 b 289 215 323 168 314 184 b 238 252 269 239 253 252 b 187 222 222 252 207 242 b 173 206 183 216 177 212 b 157 170 163 194 157 183 b 174 138 157 160 161 150 b 216 98 189 127 200 109 z m 76 -334 b 181 -285 111 -315 148 -302 b 831 52 396 -168 613 -58 b 863 114 855 63 864 82 b 828 202 855 140 855 176 b 808 213 821 209 815 213 b 793 209 804 213 799 212 l 422 19 b 26 -179 291 -48 164 -124 b 0 -213 10 -186 0 -196 b 3 -232 0 -219 0 -225 b 52 -325 14 -265 37 -294 b 66 -337 55 -331 59 -337 b 76 -334 69 -337 72 -336 z m 769 -360 b 829 -264 779 -360 829 -284 b 769 -176 822 -232 799 -200 b 742 -163 760 -167 750 -163 b 716 -184 733 -163 723 -168 b 683 -228 708 -202 693 -213 b 672 -253 675 -236 672 -245 b 683 -281 672 -262 675 -271 b 752 -353 703 -308 732 -327 b 769 -360 756 -357 763 -360 z',
        },
        repeat2Bars: {
            x_min: 0.008571918423331715,
            x_max: 775,
            y_min: -246.92374029115243,
            y_max: 362.82068246705313,
            ha: 609.7444227582056,
            o: 'm 909 412 b 873 351 906 384 893 367 b 436 50 729 249 585 147 l 91 -179 b 62 -174 76 -189 68 -183 b 12 -96 48 -147 24 -125 b 36 -16 -7 -53 -6 -43 b 220 104 96 24 158 65 b 819 507 425 232 624 369 b 881 495 852 530 861 528 b 909 412 899 469 900 439 z m 333 338 b 302 240 330 307 317 274 b 276 235 297 225 287 228 l 233 269 b 203 376 186 307 183 318 b 225 441 212 397 217 419 b 246 454 228 452 232 458 b 333 338 284 441 333 380 z m 1116 228 b 1067 158 1115 192 1092 174 b 910 59 1015 125 963 92 b 478 -240 762 -33 622 -140 b 311 -350 423 -279 366 -314 b 285 -344 298 -360 289 -356 b 239 -258 272 -314 251 -288 b 261 -196 228 -228 235 -210 b 517 -29 348 -144 436 -91 b 1030 321 681 98 861 202 b 1093 307 1060 343 1076 340 b 1116 228 1107 281 1109 252 z m 1070 -105 b 1020 -210 1057 -143 1038 -176 b 998 -210 1014 -219 1004 -215 l 924 -153 b 913 -88 899 -135 897 -112 b 949 -22 926 -66 939 -45 b 998 -7 960 6 976 9 b 1070 -105 1032 -32 1058 -63 z',
        },
        repeat4Bars: {
            x_min: 0,
            x_max: 1374,
            y_min: -304,
            y_max: 304,
            ha: 608,
            o: 'm 78 -266 b 92 -258 82 -266 88 -264 b 114 -240 98 -251 107 -246 b 638 107 289 -125 467 -14 b 873 271 716 161 793 216 b 907 337 894 285 906 305 b 887 400 901 354 897 379 b 852 438 877 426 867 438 b 814 420 842 438 829 432 b 135 -33 592 262 366 111 b 12 -121 92 -60 48 -84 b 0 -144 4 -128 0 -135 b 4 -160 0 -148 1 -154 b 63 -255 17 -196 45 -223 b 78 -266 68 -262 72 -266 z m 291 148 b 325 223 302 148 308 170 b 333 256 328 235 330 246 b 264 363 330 305 298 336 b 242 373 255 369 248 373 b 220 347 232 373 225 364 b 202 288 216 327 213 305 b 190 252 193 275 190 262 b 222 200 190 232 202 215 b 291 148 264 170 279 148 z m 815 -367 b 829 -359 819 -367 824 -364 b 851 -343 835 -353 844 -347 b 1375 6 1027 -228 1205 -117 l 1610 170 b 1644 235 1632 184 1643 203 b 1626 300 1639 253 1634 276 b 1590 337 1614 325 1604 337 b 1551 320 1580 337 1567 330 b 873 -135 1329 161 1103 10 b 749 -222 829 -161 785 -184 b 737 -245 742 -230 737 -238 b 742 -261 737 -249 739 -255 b 802 -357 755 -297 782 -325 b 815 -367 805 -363 809 -367 z m 396 -360 b 408 -356 400 -360 403 -359 b 609 -223 471 -307 543 -269 b 896 -19 706 -156 795 -81 b 1164 154 985 37 1074 96 b 1214 223 1189 170 1211 187 b 1176 321 1204 253 1205 292 b 1159 330 1169 327 1165 330 b 1145 324 1155 330 1151 328 b 1048 258 1113 302 1081 278 b 357 -202 809 117 598 -65 b 333 -238 341 -212 333 -223 b 338 -262 333 -245 334 -253 b 384 -350 350 -294 372 -318 b 396 -360 386 -354 390 -360 z m 1162 -438 b 1174 -433 1166 -438 1169 -436 b 1374 -300 1237 -384 1309 -346 b 1660 -96 1470 -233 1561 -158 b 1930 76 1751 -39 1840 19 b 1979 147 1954 92 1977 109 b 1943 243 1968 177 1971 216 b 1924 253 1935 251 1930 253 b 1911 248 1920 253 1915 252 b 1814 181 1878 225 1848 202 b 1123 -279 1575 40 1364 -141 b 1099 -315 1106 -289 1099 -300 b 1103 -338 1099 -321 1100 -330 b 1149 -426 1115 -370 1138 -396 b 1162 -438 1151 -432 1156 -438 z m 1875 -295 b 1882 -291 1878 -295 1879 -294 b 1934 -189 1904 -258 1921 -223 b 1872 -96 1925 -147 1901 -120 b 1840 -78 1858 -84 1848 -78 b 1812 -109 1830 -78 1823 -88 l 1777 -173 b 1770 -199 1773 -181 1770 -190 b 1786 -230 1770 -210 1774 -220 b 1862 -289 1809 -253 1837 -269 b 1875 -295 1865 -292 1871 -295 z',
        },
        repeatBarSlash: {
            x_min: 0,
            x_max: 630,
            y_min: -225.19160170741762,
            y_max: 265.12618221237005,
            ha: 490.31778391978764,
            o: 'm 78 -324 b 92 -314 82 -325 88 -321 b 114 -298 96 -307 107 -302 b 638 49 289 -183 467 -72 b 873 215 716 104 792 161 b 907 279 894 229 906 248 b 887 344 901 298 897 321 b 852 382 877 369 867 380 b 814 363 842 383 829 376 b 135 -91 603 192 364 55 b 12 -177 92 -118 45 -137 b 0 -202 4 -186 0 -192 b 4 -217 0 -206 1 -212 b 63 -312 17 -253 42 -284 b 78 -324 68 -318 72 -323 z',
        },
        csymDiminished: {
            x_min: 0,
            x_max: 506,
            y_min: -0.011036179317259481,
            y_max: 500,
            ha: 500.0110361793173,
            o: 'm 397 0 b 729 265 576 -1 729 95 b 711 367 729 297 723 331 b 472 670 668 498 586 595 b 315 720 423 701 372 720 b 253 713 295 720 275 719 b 32 514 144 687 75 615 b 0 374 12 468 0 420 b 27 251 0 333 9 292 b 140 117 52 196 92 153 b 397 0 223 52 317 4 z m 340 95 b 132 314 233 84 122 216 b 324 589 145 438 200 539 b 415 611 360 603 389 611 b 544 505 469 611 505 576 b 590 392 564 471 583 432 b 596 343 593 374 596 359 b 340 95 596 210 485 96 z',
        },
        csymHalfDiminished: {
            x_min: -32,
            x_max: 496,
            y_min: -33,
            y_max: 492,
            ha: 525,
            o: 'm -29 -48 b 0 -36 -19 -48 -9 -40 b 17 -20 7 -32 12 -24 b 134 94 56 19 95 56 b 372 0 207 43 282 0 b 455 13 397 0 426 4 b 677 258 556 45 671 141 b 678 289 677 268 678 278 b 593 539 678 380 654 467 b 592 541 593 540 592 540 l 684 632 b 713 678 700 647 711 665 b 714 691 714 684 714 688 b 707 704 714 698 711 701 b 691 708 701 707 696 708 b 660 691 680 708 670 701 l 552 585 b 478 634 530 606 507 624 b 361 684 438 648 397 661 b 301 703 341 697 320 703 b 226 677 275 703 251 693 b 27 449 140 618 72 543 b 0 324 9 410 -4 370 b 88 128 -1 243 30 177 b -30 -7 43 86 0 46 b -46 -33 -35 -16 -46 -24 b -42 -42 -46 -36 -45 -39 b -29 -48 -37 -46 -33 -48 z m 141 179 b 121 251 128 200 121 225 b 128 297 121 265 124 281 b 351 575 163 420 248 505 b 377 582 359 579 369 580 b 501 536 422 586 468 567 b 141 179 382 416 261 298 z m 281 105 b 179 137 240 105 206 117 b 210 168 189 147 200 157 l 537 487 b 547 455 541 477 544 467 b 556 370 552 426 556 397 b 429 154 556 274 503 207 b 281 105 384 122 336 105 z',
        },
        csymAugmented: {
            x_min: 0,
            x_max: 530,
            y_min: 0,
            y_max: 539,
            ha: 539,
            o: 'm 380 0 b 393 14 384 4 390 9 b 397 46 397 24 397 36 l 397 333 b 736 327 511 331 624 330 b 763 343 755 327 763 333 b 755 361 763 348 760 354 b 635 431 726 402 688 431 l 390 431 l 390 485 b 386 606 392 526 386 566 b 392 664 386 625 387 645 b 395 690 393 672 395 681 b 376 753 395 711 389 734 b 357 776 372 762 369 776 b 350 775 354 776 353 776 b 327 740 337 769 327 759 b 327 621 328 700 327 661 b 330 438 328 559 328 498 l 29 438 b 4 431 20 438 7 442 b 0 413 3 425 0 419 b 7 399 0 408 1 403 b 131 338 45 369 85 340 b 331 334 199 336 265 334 b 333 163 333 276 333 220 b 366 13 333 109 348 63 b 380 0 367 7 374 4 z',
        },
        csymMajorSeventh: {
            x_min: 0,
            x_max: 593.1050509327923,
            y_min: 0,
            y_max: 569,
            ha: 569,
            o: 'm 124 1 l 497 27 b 819 50 605 35 711 43 b 854 98 847 52 855 63 b 812 200 845 128 835 166 b 564 585 730 328 648 456 b 435 786 521 652 480 720 b 397 819 419 809 408 819 b 369 792 387 819 379 811 b 7 173 248 585 128 379 b 0 150 3 166 0 158 b 7 128 0 143 3 135 b 89 10 30 86 65 50 b 109 0 95 1 102 0 z m 163 147 b 153 153 158 147 156 148 b 164 179 147 163 158 170 b 426 644 251 334 338 488 b 442 660 432 655 436 660 b 458 645 446 660 452 655 b 727 220 547 503 636 361 b 736 202 732 213 736 206 b 714 190 736 196 730 192 b 179 148 537 177 359 163 b 163 147 174 150 168 147 z',
        },
        csymMinor: {
            x_min: 0,
            x_max: 481.64484584675915,
            y_min: 193,
            y_max: 265.20435472429375,
            ha: 72.20435472429375,
            o: 'm 168 278 b 197 279 177 278 187 278 b 431 292 275 287 353 288 l 431 291 b 661 302 508 295 585 300 b 693 311 672 304 688 300 b 674 346 697 324 685 338 b 564 382 641 366 606 384 l 27 360 b 0 347 17 360 1 366 b 19 314 0 333 3 321 b 168 278 66 291 115 278 z',
        },
        csymParensLeftTall: {
            x_min: 0,
            x_max: 185,
            y_min: 0,
            y_max: 1034,
            ha: 1034,
            o: 'm 215 0 b 226 17 223 1 223 10 b 229 37 229 24 229 32 b 220 81 229 52 225 66 b 167 203 206 124 181 160 b 86 616 124 338 89 474 b 82 765 85 665 82 716 b 91 886 82 805 84 845 b 245 1319 120 1038 171 1184 b 266 1397 259 1346 266 1371 b 259 1443 266 1411 264 1427 b 226 1489 253 1463 248 1489 b 193 1454 212 1489 203 1467 b 114 1292 158 1404 140 1346 b 0 806 40 1138 0 978 b 3 721 0 779 0 750 b 1 677 1 707 1 693 b 36 418 1 593 16 504 b 144 96 62 307 95 199 b 196 12 158 66 179 39 b 212 0 200 7 204 0 z',
        },
        csymParensRightTall: {
            x_min: -40,
            x_max: 188.5411603861406,
            y_min: 0.20204102886728756,
            y_max: 1058,
            ha: 1057.7979589711326,
            o: 'm 30 1 b 63 14 42 -3 55 6 b 122 99 86 40 108 68 b 189 258 145 153 166 204 b 271 667 239 379 268 503 b 246 852 275 708 261 780 b 10 1495 197 1077 128 1295 b -14 1524 4 1505 1 1524 b -16 1522 -14 1524 -16 1524 b -46 1489 -33 1521 -43 1503 b -58 1417 -53 1464 -58 1440 b -36 1335 -58 1390 -52 1364 b 68 1138 0 1270 35 1204 b 163 883 108 1056 137 969 b 206 668 184 814 200 742 b 207 631 207 655 207 642 b 166 426 207 560 192 492 b 46 143 130 330 111 228 b 19 29 19 109 17 69 b 30 1 20 19 24 3 z',
        },
        csymBracketLeftTall: {
            x_min: 0,
            x_max: 328,
            y_min: 2,
            y_max: 807,
            ha: 805,
            o: 'm 68 3 b 76 4 71 3 73 3 b 186 13 112 12 150 13 b 240 13 204 13 222 13 l 287 13 b 379 17 317 13 348 13 b 472 121 435 24 472 69 b 467 156 472 132 469 144 b 446 174 462 168 456 174 l 439 174 b 327 166 402 167 364 166 b 265 167 307 166 285 167 l 209 167 b 187 475 199 269 189 372 b 166 985 186 645 187 815 l 377 1002 b 415 1001 389 1002 402 1001 b 456 1027 432 1001 448 1005 b 472 1096 467 1048 472 1073 b 464 1146 472 1113 469 1130 b 439 1162 459 1161 452 1162 b 40 1129 305 1151 173 1139 b 1 1093 17 1128 1 1120 b 0 1009 0 1064 0 1037 b 13 975 0 991 3 981 b 30 670 23 873 30 772 b 29 608 30 649 29 628 l 29 563 b 56 88 29 405 49 246 b 53 22 55 66 55 43 b 68 3 53 12 56 3 z',
        },
        csymBracketRightTall: {
            x_min: 0.8519422934604696,
            x_max: 306,
            y_min: -0.17180889215212544,
            y_max: 829.1037519824849,
            ha: 829.2755608746371,
            o: 'm 117 0 b 372 29 203 -3 287 20 l 373 29 b 406 32 383 30 395 30 b 436 60 428 33 432 43 b 441 109 439 76 441 92 b 433 200 441 140 436 170 b 409 696 422 366 409 530 b 416 887 409 763 416 831 b 415 920 416 899 415 910 l 415 1106 b 412 1135 415 1116 415 1126 l 412 1145 b 373 1189 413 1171 408 1192 b 321 1189 356 1189 338 1189 l 215 1189 l 215 1194 l 56 1194 b 6 1153 27 1195 10 1187 b 1 1064 3 1123 4 1093 b 22 1043 0 1050 6 1043 b 84 1044 42 1044 63 1044 b 264 1038 144 1044 203 1040 b 265 958 264 1011 265 985 b 262 845 265 920 264 883 b 259 710 259 801 259 755 b 279 243 259 554 271 399 b 285 170 281 219 284 194 b 95 151 222 161 158 156 b 29 81 27 147 27 147 l 29 73 b 105 0 33 0 33 0 z',
        },
        csymParensLeftVeryTall: {
            x_min: 0,
            x_max: 116,
            y_min: 0,
            y_max: 934.1531437146923,
            ha: 934.1531437146923,
            o: 'm 128 0 b 147 17 137 0 144 9 b 167 102 160 45 167 73 b 158 154 167 120 164 137 b 117 307 141 204 130 256 b 63 698 84 435 71 567 b 62 788 62 729 62 757 b 69 916 62 829 63 873 b 109 1172 81 1001 94 1087 b 132 1320 118 1221 137 1269 b 124 1345 131 1329 134 1342 b 96 1332 114 1346 102 1341 b 71 1269 82 1313 75 1292 b 39 1104 59 1214 48 1159 b 0 742 19 988 0 871 b 10 559 3 688 6 624 b 58 226 16 446 33 336 b 112 20 73 157 94 89 b 128 0 115 13 118 0 z',
        },
        csymParensRightVeryTall: {
            x_min: -20,
            x_max: 111.4332498248095,
            y_min: -0.07657185734616112,
            y_max: 1009,
            ha: 1009.0765718573462,
            o: 'm -3 0 b 20 22 9 -1 14 12 b 36 56 26 33 32 45 b 99 274 58 128 84 199 b 160 788 135 439 163 605 b 122 1181 164 912 145 1047 b 50 1431 108 1267 86 1351 b 36 1453 48 1439 46 1453 l 35 1453 l 30 1453 b 7 1423 17 1449 7 1440 b 27 1287 9 1377 10 1331 b 96 963 71 1184 85 1074 b 105 818 102 914 105 867 b 91 624 105 753 99 688 b -4 213 72 484 48 344 b -29 101 -19 174 -29 138 b -16 27 -29 76 -24 52 b -3 0 -13 17 -14 3 z',
        },
        csymDiagonalArrangementSlash: {
            x_min: -0.19862981551275186,
            x_max: 990,
            y_min: -26.946823529189132,
            y_max: 1027.5514326488437,
            ha: 1054.4982561780328,
            o: 'm 14 -37 b 58 -9 35 -45 46 -22 b 392 333 170 105 279 217 l 765 711 b 1372 1329 968 916 1168 1125 b 1424 1439 1403 1359 1417 1397 b 1426 1457 1424 1444 1426 1450 b 1416 1477 1426 1466 1423 1475 b 1374 1462 1400 1485 1385 1473 b 1181 1269 1309 1397 1246 1331 b 736 831 1031 1122 884 979 b 356 452 609 704 485 576 b 32 132 246 347 143 236 b 0 50 7 109 1 84 b 6 9 -1 37 3 23 b 14 -37 10 -9 0 -32 z',
        },
        accidentalNarrowReversedFlat: {
            x_min: 0,
            x_max: 208,
            y_min: -231,
            y_max: 449,
            ha: 680,
            o: 'm 272 -333 b 284 -320 278 -333 281 -328 b 300 -174 297 -272 300 -222 b 275 190 298 -52 279 68 b 268 445 272 275 268 360 l 268 490 b 264 612 269 530 265 572 b 236 647 264 632 252 645 l 235 647 b 217 618 220 647 220 628 b 207 526 210 588 207 556 b 210 432 207 494 210 464 b 216 268 213 377 215 323 l 216 230 l 215 232 b 154 256 194 240 174 251 b 111 264 138 261 124 264 b 3 153 50 264 10 223 b 0 94 0 132 0 114 b 194 -276 0 -63 68 -186 b 255 -323 215 -291 236 -307 b 272 -333 262 -330 268 -333 z m 233 -138 b 71 30 168 -92 105 -45 b 63 59 65 42 63 50 b 96 95 62 75 73 86 b 130 102 108 99 120 102 b 215 76 160 102 187 88 l 220 73 b 225 -22 220 42 222 10 b 233 -138 229 -62 230 -101 z',
        },
        accidentalNarrowReversedFlatAndFlat: {
            x_min: 0,
            x_max: 335,
            y_min: -231,
            y_max: 449,
            ha: 680,
            o: 'm 151 490 b 148 612 151 530 150 572 b 132 647 148 632 141 645 b 122 618 124 647 124 628 b 117 526 118 588 117 556 b 118 432 117 494 118 464 b 121 268 120 377 121 323 l 121 232 b 86 256 109 240 98 251 b 62 264 78 261 69 264 b 1 153 29 264 6 223 b 0 94 0 132 0 114 b 109 -276 0 -63 37 -186 b 144 -323 121 -291 132 -307 b 153 -333 147 -330 151 -333 b 160 -320 157 -333 158 -328 b 168 -174 167 -272 168 -222 b 154 190 168 -52 157 68 b 151 445 153 275 151 360 z m 480 153 b 372 264 472 223 432 264 b 328 256 359 264 344 261 b 268 232 308 251 288 240 l 266 230 l 266 268 b 272 432 266 323 269 377 b 275 526 272 464 275 494 b 265 618 275 556 272 588 b 248 647 262 628 262 647 l 246 647 b 219 612 230 645 219 632 b 215 490 217 572 213 530 l 215 445 b 207 190 215 360 210 275 b 183 -174 203 68 183 -52 b 199 -320 183 -222 186 -272 b 210 -333 202 -328 204 -333 b 228 -323 215 -333 220 -330 b 288 -276 246 -307 268 -291 b 482 94 415 -186 482 -63 b 480 153 482 114 482 132 z m 40 30 b 36 59 36 42 36 50 b 55 95 35 75 42 86 b 73 102 60 99 68 102 b 121 76 89 102 105 88 l 124 73 b 127 -22 124 42 125 10 l 131 -138 b 40 30 95 -92 60 -43 z m 419 59 b 412 30 419 50 418 42 b 249 -138 374 -43 314 -92 b 258 -22 252 -101 253 -62 b 262 73 261 10 262 42 l 268 76 b 353 102 295 88 323 102 b 386 95 363 102 374 99 b 419 59 409 86 420 75 z',
        },
        accidentalWilsonPlus: {
            x_min: 0,
            x_max: 298,
            y_min: -218,
            y_max: 218,
            ha: 436,
            o: 'm 232 -314 b 236 -301 236 -310 236 -305 l 236 -295 b 243 -52 239 -213 242 -132 l 369 62 b 429 200 413 101 425 147 b 416 243 429 216 428 236 b 383 225 406 251 393 232 l 377 220 b 246 98 336 177 291 138 b 249 242 248 145 246 193 b 225 304 251 265 242 287 b 209 314 220 308 215 314 b 204 312 207 314 206 312 b 196 292 196 310 196 300 b 193 184 194 256 194 220 b 187 48 192 140 190 94 b 46 -72 141 7 94 -32 b 0 -163 13 -98 0 -127 b 1 -187 0 -170 0 -179 b 10 -235 4 -203 6 -219 b 20 -255 12 -242 14 -251 b 36 -245 26 -259 30 -249 b 181 -109 85 -200 132 -154 b 176 -258 180 -158 176 -209 b 232 -314 176 -298 186 -307 z',
        },
        accidentalWilsonMinus: {
            x_min: 0,
            x_max: 284.2093390143919,
            y_min: -163,
            y_max: 163,
            ha: 326,
            o: 'm 386 -232 b 409 -163 415 -222 408 -180 b 382 -69 410 -120 408 -89 b 32 228 264 30 141 118 b 17 235 26 233 22 235 b 3 219 9 235 3 228 b 0 157 3 199 0 179 b 29 69 0 125 6 95 b 323 -194 115 -29 222 -111 b 374 -235 338 -206 353 -235 b 386 -232 377 -235 382 -233 z',
        },
    },
    fontFamily: 'Petaluma',
    resolution: 1000,
    generatedOn: '2022-06-26T17:47:23.560Z',
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/petaluma_metrics.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/petaluma_metrics.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PetalumaMetrics: () => (/* binding */ PetalumaMetrics)
/* harmony export */ });
const PetalumaMetrics = {
    name: 'Petaluma',
    smufl: true,
    stave: {
        padding: 15,
        endPaddingMax: 15,
        endPaddingMin: 7,
        unalignedNotePadding: 12,
    },
    accidental: {
        noteheadAccidentalPadding: 1,
        leftPadding: 2,
        accidentalSpacing: 3,
    },
    clef: {
        default: {
            point: 32,
            width: 26,
        },
        small: {
            point: 26,
            width: 20,
        },
        annotations: {
            '8va': {
                smuflCode: 'timeSig8',
                default: {
                    point: 18,
                    treble: {
                        line: -1.4,
                        shiftX: 12,
                    },
                },
                small: {
                    point: 16,
                    treble: {
                        line: -0.2,
                        shiftX: 8,
                    },
                },
            },
            '8vb': {
                smuflCode: 'timeSig8',
                default: {
                    point: 18,
                    treble: {
                        line: 6,
                        shiftX: 10,
                    },
                    bass: {
                        line: 3.5,
                        shiftX: 1,
                    },
                },
                small: {
                    point: 16,
                    treble: {
                        line: 5.3,
                        shiftX: 6,
                    },
                    bass: {
                        line: 3.1,
                        shiftX: 0.5,
                    },
                },
            },
        },
        lineCount: {
            '8': { point: 55, shiftY: 14 },
            '7': { point: 47, shiftY: 8 },
            '6': { point: 32, shiftY: 1 },
            '5': { point: 30, shiftY: -6 },
            '4': { point: 23, shiftY: -12 },
        },
    },
    parenthesis: {
        default: {
            point: 39,
            width: 7,
        },
        gracenote: {
            point: (39 * 3) / 5,
            width: 3,
        },
    },
    pedalMarking: {
        up: {
            point: 40,
        },
        down: {
            point: 34,
        },
    },
    digits: {
        shiftLine: -1,
        point: 22,
        tupletPoint: 16,
        shiftY: -2,
    },
    articulation: {
        articStaccatissimoAbove: {
            padding: 2,
        },
        articStaccatissimoBelow: {
            padding: 2,
        },
    },
    tremolo: {
        default: {
            point: 25,
            spacing: 5,
            offsetYStemUp: -5,
            offsetYStemDown: 5,
            offsetXStemUp: 13,
            offsetXStemDown: 1,
        },
        grace: {
            point: 18,
            spacing: 4,
            offsetYStemUp: -5,
            offsetYStemDown: 5,
            offsetXStemUp: 8,
            offsetXStemDown: 1,
        },
    },
    staveRepetition: {
        symbolText: {
            offsetX: 12,
            offsetY: 25,
            spacing: 5,
        },
        coda: {
            offsetY: 25,
        },
        segno: {
            offsetY: 10,
        },
    },
    noteHead: {
        displaced: {
            shiftX: -2,
        },
    },
    stem: {
        heightAdjustmentForFlag: -3,
        noteHead: {
            noteheadTriangleUpHalf: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpBlack: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadTriangleUpWhole: {
                offsetYBaseStemUp: 5,
                offsetYBaseStemDown: 4,
            },
            noteheadXHalf: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXBlack: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadXWhole: {
                offsetYBaseStemUp: -4,
                offsetYBaseStemDown: 4,
            },
            noteheadHalf: {
                offsetYBaseStemDown: 1.8,
                offsetYBaseStemUp: -1.8,
            },
            noteheadBlack: {
                offsetYBaseStemDown: 2,
                offsetYBaseStemUp: -2,
            },
            noteheadSquareWhite: {
                offsetYBaseStemDown: -5,
                offsetYBaseStemUp: 5,
            },
        },
    },
    glyphs: {
        coda: {
            point: 20,
            shiftX: -7,
            shiftY: 8,
        },
        segno: {
            shiftX: -7,
        },
        flag: {
            shiftX: -0.77,
            flag16thUp: {
                shiftX: -0.75,
            },
            flag32ndUp: {
                shiftX: -0.85,
            },
            flag64thUp: {
                shiftX: -1.55,
            },
            flag128thUp: {
                shiftX: -1.3,
            },
            flag16thDown: {
                shiftX: -0.75,
            },
            flag32ndDown: {
                shiftX: -0.76,
            },
            flag64thDown: {
                shiftX: -1.5,
            },
            flag128thDown: {
                shiftX: -1.2,
            },
            staveTempo: {
                shiftX: -1,
            },
        },
        clef: {
            gClef: {
                default: { scale: 1.1, shiftY: 1 },
                small: { shiftY: 1.5 },
            },
            fClef: {
                default: { shiftY: -0.5 },
            },
        },
        ornament: {
            ornamentTurn: {
                scale: 1.2,
            },
            ornamentTurnSlash: {
                scale: 1.2,
            },
        },
        stringNumber: {
            verticalPadding: 8,
            stemPadding: 2,
            leftPadding: 5,
            rightPadding: 6,
        },
        stroke: {
            arrowheadBlackDown: {
                straight: {
                    shiftX: -4.5,
                },
                wiggly: {
                    shiftX: -1,
                    shiftY: 1,
                },
            },
            arrowheadBlackUp: {
                straight: {
                    shiftX: -0.85,
                },
                wiggly: {
                    shiftX: -1,
                    shiftY: 1,
                },
            },
        },
        textNote: {
            point: 34,
            breathMarkTick: {
                point: 36,
                shiftY: 9,
            },
            breathMarkComma: {
                point: 36,
            },
            segno: {
                point: 30,
                shiftX: -7,
                shiftY: 8,
            },
            coda: {
                point: 20,
                shiftX: -7,
                shiftY: 8,
            },
            ornamentTrill: {
                shiftX: -10,
                shiftY: 8,
            },
            ornamentMordent: {
                shiftX: -8,
            },
            ornamentShortTrill: {
                shiftX: -8,
            },
        },
        noteHead: {
            minPadding: 2,
            standard: {
                noteheadBlackStemUp: {
                    shiftX: 0.5,
                },
                noteheadHalfStemUp: {
                    shiftX: 0.725,
                },
                noteheadWholeStemUp: {
                    shiftX: 1,
                },
            },
            custom: {
                noteheadCircleXStemUp: {
                    shiftX: -1,
                },
                noteheadCircleXStemDown: {
                    shiftX: 0.25,
                },
                noteheadDiamondHalfStemUp: {
                    shiftX: 1.5,
                },
                noteheadDiamondBlackStemUp: {
                    shiftX: 1.5,
                },
                noteheadDiamondWholeStemUp: {
                    shiftX: 1,
                },
                noteheadXBlackStemUp: {
                    shiftX: 1,
                },
                noteheadXHalfStemUp: {
                    shiftX: -3,
                },
                noteheadXHalfStemDown: {
                    shiftX: 1,
                },
                noteheadXWholeStemUp: {
                    shiftX: -7,
                },
                noteheadXWholeStemDown: {
                    shiftX: 1,
                },
                noteheadXDoubleWholeStemUp: {
                    shiftX: -12,
                },
                noteheadXDoubleWholeStemDown: {
                    shiftX: -4,
                },
                noteheadSquareWhiteStemDown: {
                    shiftX: 0.25,
                },
                noteheadSquareWhiteStemUp: {
                    shiftX: -0.75,
                },
                noteheadSquareBlackStemUp: {
                    shiftX: -0.75,
                },
                noteheadTriangleUpWholeStemUp: {
                    shiftX: -0.75,
                },
            },
        },
        chordSymbol: {
            global: {
                superscriptOffset: -400,
                subscriptOffset: 300,
                kerningOffset: -150,
                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],
                upperKerningText: ['L'],
                spacing: 20,
                superSubRatio: 0.73,
            },
            csymDiminished: {
                scale: 0.8,
                leftSideBearing: -95,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymHalfDiminished: {
                scale: 0.8,
                leftSideBearing: -32,
                advanceWidth: 506,
                yOffset: 0,
            },
            csymAugmented: {
                scale: 1,
                leftSideBearing: -25,
                advanceWidth: 530,
                yOffset: 0,
            },
            csymParensLeftTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 155,
                yOffset: 150,
            },
            csymParensRightTall: {
                scale: 0.8,
                leftSideBearing: 40,
                advanceWidth: 189,
                yOffset: 150,
            },
            csymBracketLeftTall: {
                scale: 0.8,
                leftSideBearing: 0,
                advanceWidth: 328,
                yOffset: 0,
            },
            csymBracketRightTall: {
                scale: 0.8,
                leftSideBearing: 1,
                advanceWidth: 600,
                yOffset: 0,
            },
            csymParensLeftVeryTall: {
                scale: 0.95,
                leftSideBearing: 0,
                advanceWidth: 210,
                yOffset: 250,
            },
            csymParensRightVeryTall: {
                scale: 0.9,
                leftSideBearing: -100,
                advanceWidth: 111,
                yOffset: 250,
            },
            csymDiagonalArrangementSlash: {
                scale: 0.6,
                leftSideBearing: -1,
                advanceWidth: 990,
                yOffset: 0,
            },
            csymMinor: {
                scale: 0.7,
                leftSideBearing: 0,
                advanceWidth: 482,
                yOffset: 0,
            },
            csymMajorSeventh: {
                scale: 0.8,
                leftSideBearing: 100,
                yOffset: 0,
                advanceWidth: 600,
            },
            accidentalSharp: {
                scale: 0.7,
                leftSideBearing: 0,
                advanceWidth: 425,
                yOffset: -422,
            },
            accidentalFlat: {
                scale: 0.8,
                leftSideBearing: -10,
                advanceWidth: 228,
                yOffset: -284,
            },
        },
        jazzOrnaments: {
            brassScoop: {
                scale: 1.0,
                xOffset: -12,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 15,
            },
            brassDoitMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 19,
            },
            brassFallLipShort: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 0,
                stemUpYOffset: 0,
                reportedWidth: 19,
            },
            brassLiftMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 5,
                stemUpYOffset: 0,
                reportedWidth: 15,
            },
            brassFallRoughMedium: {
                scale: 1.0,
                xOffset: 16,
                yOffset: 26,
                stemUpYOffset: 0,
                reportedWidth: 5,
            },
            brassBend: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -8,
                stemUpYOffset: 28,
                reportedWidth: 5,
            },
            brassMuteClosed: {
                scale: 1.0,
                xOffset: 3,
                yOffset: -8,
                stemUpYOffset: 26,
                reportedWidth: 5,
            },
            brassMuteOpen: {
                scale: 1.0,
                xOffset: 4,
                yOffset: -8,
                stemUpYOffset: 27,
                reportedWidth: 5,
            },
            brassFlip: {
                scale: 1.0,
                xOffset: 10,
                yOffset: -4,
                stemUpYOffset: 7,
                reportedWidth: 5,
            },
            brassJazzTurn: {
                scale: 1.0,
                xOffset: 6,
                yOffset: -4,
                stemUpYOffset: 5,
                reportedWidth: 30,
            },
            brassSmear: {
                scale: 1.0,
                xOffset: 10,
                yOffset: -4,
                stemUpYOffset: 5,
                reportedWidth: 5,
            },
        },
        tuplet: {
            noteHeadOffset: 20,
            stemOffset: 10,
            bottomLine: 4,
            topModifierOffset: 20,
        },
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/petalumascript_glyphs.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/petalumascript_glyphs.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PetalumaScriptFont: () => (/* binding */ PetalumaScriptFont)
/* harmony export */ });
const PetalumaScriptFont = {
    spacing: 50,
    glyphs: {
        ' ': {
            x_min: 0,
            x_max: 250,
            y_min: 0,
            y_max: 500,
            ha: 500,
            leftSideBearing: 0,
            advanceWidth: 250,
        },
        '0': {
            x_min: 33,
            x_max: 534,
            y_min: -13,
            y_max: 751,
            ha: 764,
            leftSideBearing: 33,
            advanceWidth: 570,
        },
        '1': {
            x_min: 48,
            x_max: 235,
            y_min: -17,
            y_max: 734,
            ha: 751,
            leftSideBearing: 48,
            advanceWidth: 286,
        },
        '2': {
            x_min: 56,
            x_max: 571,
            y_min: -19,
            y_max: 741,
            ha: 760,
            leftSideBearing: 56,
            advanceWidth: 626,
        },
        '3': {
            x_min: 50,
            x_max: 528,
            y_min: -7,
            y_max: 731,
            ha: 738,
            leftSideBearing: 50,
            advanceWidth: 589,
        },
        '4': {
            x_min: 38,
            x_max: 564,
            y_min: -13,
            y_max: 743,
            ha: 756,
            leftSideBearing: 38,
            advanceWidth: 614,
        },
        '5': {
            x_min: 42,
            x_max: 601,
            y_min: -34,
            y_max: 743,
            ha: 777,
            leftSideBearing: 42,
            advanceWidth: 648,
        },
        '6': {
            x_min: 47,
            x_max: 606,
            y_min: -16,
            y_max: 743,
            ha: 759,
            leftSideBearing: 47,
            advanceWidth: 667,
        },
        '7': {
            x_min: 47,
            x_max: 567,
            y_min: 5,
            y_max: 739,
            ha: 734,
            leftSideBearing: 0,
            advanceWidth: 615,
        },
        '8': {
            x_min: 40,
            x_max: 541,
            y_min: -15,
            y_max: 752,
            ha: 767,
            leftSideBearing: 40,
            advanceWidth: 585,
        },
        '9': {
            x_min: 40,
            x_max: 537,
            y_min: -52,
            y_max: 736,
            ha: 788,
            leftSideBearing: 40,
            advanceWidth: 592,
        },
        '!': {
            x_min: 49,
            x_max: 180,
            y_min: -7,
            y_max: 761,
            ha: 768,
            leftSideBearing: 49,
            advanceWidth: 230,
        },
        '"': {
            x_min: 39,
            x_max: 304,
            y_min: 596,
            y_max: 804,
            ha: 208,
            leftSideBearing: 39,
            advanceWidth: 353,
        },
        '#': {
            x_min: 33,
            x_max: 599,
            y_min: -8,
            y_max: 765,
            ha: 773,
            leftSideBearing: 33,
            advanceWidth: 648,
        },
        $: {
            x_min: 53,
            x_max: 495,
            y_min: -111,
            y_max: 823,
            ha: 934,
            leftSideBearing: 53,
            advanceWidth: 560,
        },
        '%': {
            x_min: 35,
            x_max: 656,
            y_min: -128,
            y_max: 808,
            ha: 936,
            leftSideBearing: 35,
            advanceWidth: 711,
        },
        '&': {
            x_min: 53,
            x_max: 441,
            y_min: -3,
            y_max: 753,
            ha: 756,
            leftSideBearing: 53,
            advanceWidth: 500,
        },
        "'": {
            x_min: 43,
            x_max: 161,
            y_min: 590,
            y_max: 811,
            ha: 221,
            leftSideBearing: 43,
            advanceWidth: 217,
        },
        '(': {
            x_min: 41,
            x_max: 311,
            y_min: -36,
            y_max: 845,
            ha: 881,
            leftSideBearing: 41,
            advanceWidth: 308,
        },
        ')': {
            x_min: -8,
            x_max: 257,
            y_min: -21,
            y_max: 852,
            ha: 873,
            leftSideBearing: -8,
            advanceWidth: 280,
        },
        '*': {
            x_min: 59,
            x_max: 539,
            y_min: 175,
            y_max: 589,
            ha: 414,
            leftSideBearing: 59,
            advanceWidth: 601,
        },
        '+': {
            x_min: 33,
            x_max: 361,
            y_min: 180,
            y_max: 587,
            ha: 407,
            leftSideBearing: 33,
            advanceWidth: 400,
        },
        ',': {
            x_min: 15,
            x_max: 176,
            y_min: -129,
            y_max: 92,
            ha: 221,
            leftSideBearing: 15,
            advanceWidth: 205,
        },
        '-': {
            x_min: 40,
            x_max: 380,
            y_min: 317,
            y_max: 452,
            ha: 135,
            leftSideBearing: 40,
            advanceWidth: 422,
        },
        '.': {
            x_min: 48,
            x_max: 185,
            y_min: -56,
            y_max: 84,
            ha: 140,
            leftSideBearing: 48,
            advanceWidth: 227,
        },
        '/': {
            x_min: -58,
            x_max: 654,
            y_min: -122,
            y_max: 844,
            ha: 966,
            leftSideBearing: -58,
            advanceWidth: 626,
        },
        ':': {
            x_min: 65,
            x_max: 225,
            y_min: 97,
            y_max: 536,
            ha: 439,
            leftSideBearing: 65,
            advanceWidth: 302,
        },
        ';': {
            x_min: 13,
            x_max: 295,
            y_min: -139,
            y_max: 536,
            ha: 675,
            leftSideBearing: 13,
            advanceWidth: 334,
        },
        '<': {
            x_min: 28,
            x_max: 438,
            y_min: -1,
            y_max: 607,
            ha: 608,
            leftSideBearing: 28,
            advanceWidth: 475,
        },
        '=': {
            x_min: 40,
            x_max: 383,
            y_min: 199.9598640852289,
            y_max: 541,
            ha: 341.0401359147711,
            leftSideBearing: 40,
            advanceWidth: 422,
        },
        '>': {
            x_min: 35,
            x_max: 421,
            y_min: 28,
            y_max: 632,
            ha: 604,
            leftSideBearing: 35,
            advanceWidth: 466,
        },
        '?': {
            x_min: 45,
            x_max: 548,
            y_min: -17,
            y_max: 767,
            ha: 784,
            leftSideBearing: 45,
            advanceWidth: 592,
        },
        '@': {
            x_min: 51,
            x_max: 730,
            y_min: -78,
            y_max: 753,
            ha: 831,
            leftSideBearing: 51,
            advanceWidth: 781,
        },
        A: {
            x_min: 37,
            x_max: 554,
            y_min: -4,
            y_max: 746,
            ha: 750,
            leftSideBearing: 37,
            advanceWidth: 617,
        },
        B: {
            x_min: 37,
            x_max: 532,
            y_min: 3,
            y_max: 783,
            ha: 780,
            leftSideBearing: 37,
            advanceWidth: 579,
        },
        C: {
            x_min: 37,
            x_max: 583,
            y_min: -3,
            y_max: 775,
            ha: 778,
            leftSideBearing: 37,
            advanceWidth: 623,
        },
        D: {
            x_min: 50,
            x_max: 530,
            y_min: -15,
            y_max: 749,
            ha: 764,
            leftSideBearing: 50,
            advanceWidth: 579,
        },
        E: {
            x_min: 45,
            x_max: 531,
            y_min: -1,
            y_max: 743,
            ha: 744,
            leftSideBearing: 45,
            advanceWidth: 585,
        },
        F: {
            x_min: 45,
            x_max: 459,
            y_min: 23,
            y_max: 727,
            ha: 704,
            leftSideBearing: 45,
            advanceWidth: 510,
        },
        G: {
            x_min: 31,
            x_max: 577,
            y_min: -8,
            y_max: 733,
            ha: 741,
            leftSideBearing: 31,
            advanceWidth: 611,
        },
        H: {
            x_min: 37,
            x_max: 493,
            y_min: -22,
            y_max: 758,
            ha: 780,
            leftSideBearing: 37,
            advanceWidth: 535,
        },
        I: {
            x_min: 47,
            x_max: 501,
            y_min: -3,
            y_max: 731,
            ha: 734,
            leftSideBearing: 47,
            advanceWidth: 541,
        },
        J: {
            x_min: 33,
            x_max: 531,
            y_min: -23,
            y_max: 725,
            ha: 748,
            leftSideBearing: 33,
            advanceWidth: 573,
        },
        K: {
            x_min: 43,
            x_max: 505,
            y_min: -10,
            y_max: 740,
            ha: 750,
            leftSideBearing: 43,
            advanceWidth: 560,
        },
        L: {
            x_min: 49,
            x_max: 457,
            y_min: -2,
            y_max: 746,
            ha: 748,
            leftSideBearing: 49,
            advanceWidth: 510,
        },
        M: {
            x_min: 35,
            x_max: 699,
            y_min: 1,
            y_max: 744,
            ha: 743,
            leftSideBearing: 35,
            advanceWidth: 743,
        },
        N: {
            x_min: 34,
            x_max: 533,
            y_min: -17,
            y_max: 761,
            ha: 778,
            leftSideBearing: 34,
            advanceWidth: 579,
        },
        O: {
            x_min: 41,
            x_max: 608,
            y_min: -5,
            y_max: 735,
            ha: 740,
            leftSideBearing: 41,
            advanceWidth: 667,
        },
        P: {
            x_min: 53,
            x_max: 451,
            y_min: -18,
            y_max: 735,
            ha: 753,
            leftSideBearing: 53,
            advanceWidth: 497,
        },
        Q: {
            x_min: 40,
            x_max: 599,
            y_min: -67,
            y_max: 744,
            ha: 811,
            leftSideBearing: 40,
            advanceWidth: 648,
        },
        R: {
            x_min: 39,
            x_max: 487,
            y_min: 16,
            y_max: 735,
            ha: 719,
            leftSideBearing: 39,
            advanceWidth: 535,
        },
        S: {
            x_min: 35,
            x_max: 552,
            y_min: -47,
            y_max: 708,
            ha: 755,
            leftSideBearing: 35,
            advanceWidth: 604,
        },
        T: {
            x_min: 26,
            x_max: 656,
            y_min: -13,
            y_max: 718,
            ha: 731,
            leftSideBearing: 26,
            advanceWidth: 705,
        },
        U: {
            x_min: 41,
            x_max: 518,
            y_min: -20,
            y_max: 748,
            ha: 768,
            leftSideBearing: 41,
            advanceWidth: 567,
        },
        V: {
            x_min: 47,
            x_max: 509,
            y_min: -26,
            y_max: 744,
            ha: 770,
            leftSideBearing: 47,
            advanceWidth: 567,
        },
        W: {
            x_min: 44,
            x_max: 789,
            y_min: -35,
            y_max: 720,
            ha: 755,
            leftSideBearing: 44,
            advanceWidth: 833,
        },
        X: {
            x_min: 63,
            x_max: 635,
            y_min: -10,
            y_max: 745,
            ha: 755,
            leftSideBearing: 63,
            advanceWidth: 680,
        },
        Y: {
            x_min: 43,
            x_max: 503,
            y_min: -21,
            y_max: 734,
            ha: 755,
            leftSideBearing: 43,
            advanceWidth: 541,
        },
        Z: {
            x_min: 42,
            x_max: 584,
            y_min: -10,
            y_max: 739,
            ha: 749,
            leftSideBearing: 42,
            advanceWidth: 629,
        },
        '[': {
            x_min: 46,
            x_max: 346,
            y_min: -150,
            y_max: 884,
            ha: 1034,
            leftSideBearing: 46,
            advanceWidth: 291,
        },
        '\\': {
            x_min: 20,
            x_max: 616,
            y_min: -100,
            y_max: 797,
            ha: 897,
            leftSideBearing: 20,
            advanceWidth: 645,
        },
        ']': {
            x_min: -76,
            x_max: 226,
            y_min: -150,
            y_max: 881,
            ha: 1031,
            leftSideBearing: -76,
            advanceWidth: 297,
        },
        '^': {
            x_min: 43,
            x_max: 437,
            y_min: 517,
            y_max: 812,
            ha: 295,
            leftSideBearing: 43,
            advanceWidth: 478,
        },
        _: {
            x_min: 29,
            x_max: 563,
            y_min: -110,
            y_max: -1,
            ha: 109,
            leftSideBearing: 29,
            advanceWidth: 598,
        },
        '`': {
            x_min: 54,
            x_max: 321,
            y_min: 540,
            y_max: 747,
            ha: 207,
            leftSideBearing: 54,
            advanceWidth: 368,
        },
        a: {
            x_min: 20,
            x_max: 447,
            y_min: -17,
            y_max: 495,
            ha: 512,
            leftSideBearing: 20,
            advanceWidth: 494,
        },
        b: {
            x_min: 37,
            x_max: 466,
            y_min: -27,
            y_max: 770,
            ha: 797,
            leftSideBearing: 37,
            advanceWidth: 510,
        },
        c: {
            x_min: 35,
            x_max: 456,
            y_min: -9,
            y_max: 507,
            ha: 516,
            leftSideBearing: 35,
            advanceWidth: 460,
        },
        d: {
            x_min: 45,
            x_max: 520,
            y_min: -15,
            y_max: 764,
            ha: 779,
            leftSideBearing: 45,
            advanceWidth: 560,
        },
        e: {
            x_min: 33,
            x_max: 370,
            y_min: -5,
            y_max: 501,
            ha: 506,
            leftSideBearing: 33,
            advanceWidth: 397,
        },
        f: {
            x_min: 35,
            x_max: 411,
            y_min: -13,
            y_max: 695,
            ha: 708,
            leftSideBearing: 35,
            advanceWidth: 453,
        },
        g: {
            x_min: 33,
            x_max: 551,
            y_min: -257,
            y_max: 505,
            ha: 762,
            leftSideBearing: 33,
            advanceWidth: 611,
        },
        h: {
            x_min: 32,
            x_max: 458,
            y_min: -29,
            y_max: 743,
            ha: 772,
            leftSideBearing: 32,
            advanceWidth: 491,
        },
        i: {
            x_min: 45,
            x_max: 167,
            y_min: -13,
            y_max: 631,
            ha: 644,
            leftSideBearing: 45,
            advanceWidth: 220,
        },
        j: {
            x_min: -127,
            x_max: 261,
            y_min: -231,
            y_max: 601,
            ha: 832,
            leftSideBearing: -127,
            advanceWidth: 308,
        },
        k: {
            x_min: 39,
            x_max: 443,
            y_min: -3,
            y_max: 700,
            ha: 703,
            leftSideBearing: 39,
            advanceWidth: 497,
        },
        l: {
            x_min: 58,
            x_max: 168,
            y_min: -8,
            y_max: 686,
            ha: 694,
            leftSideBearing: 58,
            advanceWidth: 227,
        },
        m: {
            x_min: 39,
            x_max: 688,
            y_min: -14,
            y_max: 501,
            ha: 515,
            leftSideBearing: 39,
            advanceWidth: 718,
        },
        n: {
            x_min: 45,
            x_max: 491,
            y_min: -32,
            y_max: 512,
            ha: 544,
            leftSideBearing: 45,
            advanceWidth: 541,
        },
        o: {
            x_min: 41,
            x_max: 424,
            y_min: -12,
            y_max: 493,
            ha: 505,
            leftSideBearing: 41,
            advanceWidth: 447,
        },
        p: {
            x_min: 25,
            x_max: 529,
            y_min: -260,
            y_max: 500,
            ha: 760,
            leftSideBearing: 25,
            advanceWidth: 573,
        },
        q: {
            x_min: 53,
            x_max: 603,
            y_min: -235,
            y_max: 514,
            ha: 749,
            leftSideBearing: 53,
            advanceWidth: 623,
        },
        r: {
            x_min: 32,
            x_max: 407,
            y_min: -7,
            y_max: 492,
            ha: 499,
            leftSideBearing: 32,
            advanceWidth: 460,
        },
        s: {
            x_min: 49,
            x_max: 416,
            y_min: -12,
            y_max: 519,
            ha: 531,
            leftSideBearing: 49,
            advanceWidth: 460,
        },
        t: {
            x_min: 32,
            x_max: 442,
            y_min: -5,
            y_max: 684,
            ha: 689,
            leftSideBearing: 32,
            advanceWidth: 469,
        },
        u: {
            x_min: 41,
            x_max: 487,
            y_min: -5,
            y_max: 507,
            ha: 512,
            leftSideBearing: 41,
            advanceWidth: 510,
        },
        v: {
            x_min: 16,
            x_max: 441,
            y_min: -20,
            y_max: 542,
            ha: 562,
            leftSideBearing: 16,
            advanceWidth: 456,
        },
        w: {
            x_min: 39,
            x_max: 639,
            y_min: -22,
            y_max: 505,
            ha: 527,
            leftSideBearing: 39,
            advanceWidth: 661,
        },
        x: {
            x_min: 15,
            x_max: 505,
            y_min: -39,
            y_max: 539,
            ha: 578,
            leftSideBearing: 15,
            advanceWidth: 541,
        },
        y: {
            x_min: -98,
            x_max: 501,
            y_min: -242,
            y_max: 511,
            ha: 753,
            leftSideBearing: -98,
            advanceWidth: 548,
        },
        z: {
            x_min: 27,
            x_max: 479,
            y_min: -3,
            y_max: 494,
            ha: 497,
            leftSideBearing: 27,
            advanceWidth: 494,
        },
        '{': {
            x_min: 0,
            x_max: 0,
            y_min: 0,
            y_max: 0,
            ha: 0,
            leftSideBearing: 0,
            advanceWidth: 308,
        },
        '|': {
            x_min: 0,
            x_max: 0,
            y_min: 0,
            y_max: 0,
            ha: 0,
            leftSideBearing: 0,
            advanceWidth: 308,
        },
        '}': {
            x_min: 0,
            x_max: 0,
            y_min: 0,
            y_max: 0,
            ha: 0,
            leftSideBearing: 0,
            advanceWidth: 308,
        },
        '~': {
            x_min: 0,
            x_max: 0,
            y_min: 0,
            y_max: 0,
            ha: 0,
            leftSideBearing: 0,
            advanceWidth: 308,
        },
    },
    fontFamily: 'PetalumaScript',
    resolution: 1000,
    generatedOn: '2020-06-14T18:33:25.407Z',
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/robotoslab_glyphs.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/robotoslab_glyphs.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RobotoSlabFont: () => (/* binding */ RobotoSlabFont)
/* harmony export */ });
const RobotoSlabFont = {
    spacing: 50,
    glyphs: {
        ' ': {
            x_min: 0,
            x_max: 509,
            y_min: 0,
            y_max: 2000,
            ha: 2000,
            leftSideBearing: 0,
            advanceWidth: 509,
        },
        '0': {
            x_min: 121,
            x_max: 1048,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 121,
            advanceWidth: 1168,
        },
        '1': {
            x_min: 117,
            x_max: 767,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 117,
            advanceWidth: 844,
        },
        '2': {
            x_min: 75.8474576645637,
            x_max: 1040,
            y_min: 0,
            y_max: 1477,
            ha: 1477,
            leftSideBearing: 75,
            advanceWidth: 1131,
        },
        '3': {
            x_min: 74.85365853658536,
            x_max: 994,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 74,
            advanceWidth: 1106,
        },
        '4': {
            x_min: 63,
            x_max: 1114,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 63,
            advanceWidth: 1187,
        },
        '5': {
            x_min: 96.8448275474953,
            x_max: 982,
            y_min: -21,
            y_max: 1456,
            ha: 1477,
            leftSideBearing: 96,
            advanceWidth: 1081,
        },
        '6': {
            x_min: 121,
            x_max: 1067,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 121,
            advanceWidth: 1144,
        },
        '7': {
            x_min: 76,
            x_max: 1060,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: -30,
            advanceWidth: 1128,
        },
        '8': {
            x_min: 92,
            x_max: 1039,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 92,
            advanceWidth: 1131,
        },
        '9': {
            x_min: 84,
            x_max: 1026,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 84,
            advanceWidth: 1154,
        },
        '!': {
            x_min: 143,
            x_max: 340,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 143,
            advanceWidth: 483,
        },
        '"': {
            x_min: 166,
            x_max: 634,
            y_min: 1055,
            y_max: 1560,
            ha: 505,
            leftSideBearing: 166,
            advanceWidth: 770,
        },
        '#': {
            x_min: 63,
            x_max: 1179,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 63,
            advanceWidth: 1246,
        },
        $: {
            x_min: 81.92156915727656,
            x_max: 1012,
            y_min: -208,
            y_max: 1693,
            ha: 1901,
            leftSideBearing: 81,
            advanceWidth: 1110,
        },
        '%': {
            x_min: 77,
            x_max: 1384,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 77,
            advanceWidth: 1460,
        },
        '&': {
            x_min: 74,
            x_max: 1242,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 74,
            advanceWidth: 1289,
        },
        "'": {
            x_min: 166,
            x_max: 324,
            y_min: 1055,
            y_max: 1560,
            ha: 505,
            leftSideBearing: 166,
            advanceWidth: 460,
        },
        '(': {
            x_min: 114,
            x_max: 650,
            y_min: -463,
            y_max: 1636,
            ha: 2099,
            leftSideBearing: 114,
            advanceWidth: 662,
        },
        ')': {
            x_min: 11,
            x_max: 547,
            y_min: -463,
            y_max: 1636,
            ha: 2099,
            leftSideBearing: 11,
            advanceWidth: 654,
        },
        '*': {
            x_min: 66,
            x_max: 893,
            y_min: 607,
            y_max: 1456,
            ha: 849,
            leftSideBearing: 66,
            advanceWidth: 958,
        },
        '+': {
            x_min: 73,
            x_max: 1071,
            y_min: 146,
            y_max: 1206,
            ha: 1060,
            leftSideBearing: 73,
            advanceWidth: 1145,
        },
        ',': {
            x_min: 23,
            x_max: 315,
            y_min: -311,
            y_max: 221,
            ha: 532,
            leftSideBearing: 23,
            advanceWidth: 404,
        },
        '-': {
            x_min: 154,
            x_max: 643,
            y_min: 538,
            y_max: 692,
            ha: 154,
            leftSideBearing: 154,
            advanceWidth: 797,
        },
        '.': {
            x_min: 145,
            x_max: 342,
            y_min: 0,
            y_max: 202,
            ha: 202,
            leftSideBearing: 145,
            advanceWidth: 493,
        },
        '/': {
            x_min: 0,
            x_max: 774,
            y_min: -125,
            y_max: 1456,
            ha: 1581,
            leftSideBearing: 0,
            advanceWidth: 824,
        },
        ':': {
            x_min: 145,
            x_max: 342,
            y_min: 0,
            y_max: 1082,
            ha: 1082,
            leftSideBearing: 145,
            advanceWidth: 419,
        },
        ';': {
            x_min: 53,
            x_max: 345,
            y_min: -311,
            y_max: 1082,
            ha: 1393,
            leftSideBearing: 53,
            advanceWidth: 424,
        },
        '<': {
            x_min: 76,
            x_max: 892,
            y_min: 107,
            y_max: 1013,
            ha: 906,
            leftSideBearing: 76,
            advanceWidth: 1017,
        },
        '=': {
            x_min: 147,
            x_max: 981,
            y_min: 407,
            y_max: 987,
            ha: 580,
            leftSideBearing: 147,
            advanceWidth: 1127,
        },
        '>': {
            x_min: 125,
            x_max: 980,
            y_min: 87,
            y_max: 993,
            ha: 906,
            leftSideBearing: 125,
            advanceWidth: 1060,
        },
        '?': {
            x_min: 65.92660602419838,
            x_max: 890,
            y_min: 0,
            y_max: 1477,
            ha: 1477,
            leftSideBearing: 65,
            advanceWidth: 953,
        },
        '@': {
            x_min: 84.3592218305664,
            x_max: 1705.2346925277395,
            y_min: -453,
            y_max: 1431,
            ha: 1884,
            leftSideBearing: 84,
            advanceWidth: 1821,
        },
        A: {
            x_min: 70,
            x_max: 1463,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 70,
            advanceWidth: 1533,
        },
        B: {
            x_min: 81,
            x_max: 1253,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1322,
        },
        C: {
            x_min: 80,
            x_max: 1174,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 80,
            advanceWidth: 1290,
        },
        D: {
            x_min: 81,
            x_max: 1291,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1356,
        },
        E: {
            x_min: 81,
            x_max: 1190,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1306,
        },
        F: {
            x_min: 81,
            x_max: 1176,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1256,
        },
        G: {
            x_min: 80,
            x_max: 1226,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 80,
            advanceWidth: 1346,
        },
        H: {
            x_min: 81,
            x_max: 1497,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1578,
        },
        I: {
            x_min: 81,
            x_max: 604,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 685,
        },
        J: {
            x_min: 60,
            x_max: 1100,
            y_min: -21,
            y_max: 1456,
            ha: 1477,
            leftSideBearing: 60,
            advanceWidth: 1169,
        },
        K: {
            x_min: 81,
            x_max: 1427,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1501,
        },
        L: {
            x_min: 81,
            x_max: 1130,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1210,
        },
        M: {
            x_min: 94,
            x_max: 1888,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 94,
            advanceWidth: 1982,
        },
        N: {
            x_min: 83,
            x_max: 1509,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 83,
            advanceWidth: 1592,
        },
        O: {
            x_min: 70,
            x_max: 1281,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 70,
            advanceWidth: 1351,
        },
        P: {
            x_min: 81,
            x_max: 1242,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 81,
            advanceWidth: 1297,
        },
        Q: {
            x_min: 70,
            x_max: 1348,
            y_min: -245,
            y_max: 1477,
            ha: 1722,
            leftSideBearing: 70,
            advanceWidth: 1376,
        },
        R: {
            x_min: 81,
            x_max: 1285,
            y_min: 0,
            y_max: 1455,
            ha: 1455,
            leftSideBearing: 81,
            advanceWidth: 1385,
        },
        S: {
            x_min: 115,
            x_max: 1116,
            y_min: -21,
            y_max: 1477,
            ha: 1498,
            leftSideBearing: 115,
            advanceWidth: 1206,
        },
        T: {
            x_min: 96,
            x_max: 1306,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 96,
            advanceWidth: 1406,
        },
        U: {
            x_min: 70,
            x_max: 1452,
            y_min: -21,
            y_max: 1456,
            ha: 1477,
            leftSideBearing: 70,
            advanceWidth: 1522,
        },
        V: {
            x_min: 65,
            x_max: 1443,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 65,
            advanceWidth: 1508,
        },
        W: {
            x_min: 72,
            x_max: 2057,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 72,
            advanceWidth: 2129,
        },
        X: {
            x_min: 80,
            x_max: 1449,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 80,
            advanceWidth: 1529,
        },
        Y: {
            x_min: 65,
            x_max: 1396,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 65,
            advanceWidth: 1461,
        },
        Z: {
            x_min: 90,
            x_max: 1107,
            y_min: 0,
            y_max: 1456,
            ha: 1456,
            leftSideBearing: 90,
            advanceWidth: 1197,
        },
        '[': {
            x_min: 157,
            x_max: 541,
            y_min: -312,
            y_max: 1664,
            ha: 1976,
            leftSideBearing: 157,
            advanceWidth: 573,
        },
        '\\': {
            x_min: 36,
            x_max: 830,
            y_min: -125,
            y_max: 1456,
            ha: 1581,
            leftSideBearing: 36,
            advanceWidth: 841,
        },
        ']': {
            x_min: 23,
            x_max: 408,
            y_min: -312,
            y_max: 1664,
            ha: 1976,
            leftSideBearing: 23,
            advanceWidth: 552,
        },
        '^': {
            x_min: 71,
            x_max: 802,
            y_min: 729,
            y_max: 1456,
            ha: 727,
            leftSideBearing: 71,
            advanceWidth: 864,
        },
        _: {
            x_min: 119,
            x_max: 1041,
            y_min: -154,
            y_max: 0,
            ha: 154,
            leftSideBearing: 119,
            advanceWidth: 1168,
        },
        '`': {
            x_min: 40,
            x_max: 456,
            y_min: 1288,
            y_max: 1560,
            ha: 272,
            leftSideBearing: 40,
            advanceWidth: 496,
        },
        a: {
            x_min: 79,
            x_max: 1053,
            y_min: -21,
            y_max: 1102,
            ha: 1123,
            leftSideBearing: 79,
            advanceWidth: 1132,
        },
        b: {
            x_min: -16,
            x_max: 1071,
            y_min: -21,
            y_max: 1560,
            ha: 1581,
            leftSideBearing: -16,
            advanceWidth: 1145,
        },
        c: {
            x_min: 78,
            x_max: 988,
            y_min: -21,
            y_max: 1102,
            ha: 1123,
            leftSideBearing: 78,
            advanceWidth: 1067,
        },
        d: {
            x_min: 78,
            x_max: 1156,
            y_min: -21,
            y_max: 1560,
            ha: 1581,
            leftSideBearing: 78,
            advanceWidth: 1218,
        },
        e: {
            x_min: 74,
            x_max: 980,
            y_min: -21,
            y_max: 1102,
            ha: 1123,
            leftSideBearing: 74,
            advanceWidth: 1059,
        },
        f: {
            x_min: 64,
            x_max: 731,
            y_min: 0,
            y_max: 1581,
            ha: 1581,
            leftSideBearing: 64,
            advanceWidth: 725,
        },
        g: {
            x_min: 78,
            x_max: 1133,
            y_min: -437,
            y_max: 1102,
            ha: 1539,
            leftSideBearing: 78,
            advanceWidth: 1157,
        },
        h: {
            x_min: 49,
            x_max: 1255,
            y_min: 0,
            y_max: 1560,
            ha: 1560,
            leftSideBearing: 49,
            advanceWidth: 1315,
        },
        i: {
            x_min: 67,
            x_max: 590,
            y_min: 0,
            y_max: 1560,
            ha: 1560,
            leftSideBearing: 67,
            advanceWidth: 652,
        },
        j: {
            x_min: -56,
            x_max: 381,
            y_min: -437,
            y_max: 1560,
            ha: 1997,
            leftSideBearing: -56,
            advanceWidth: 525,
        },
        k: {
            x_min: 64,
            x_max: 1248,
            y_min: 0,
            y_max: 1560,
            ha: 1560,
            leftSideBearing: 64,
            advanceWidth: 1287,
        },
        l: {
            x_min: 64,
            x_max: 587,
            y_min: 0,
            y_max: 1560,
            ha: 1560,
            leftSideBearing: 64,
            advanceWidth: 653,
        },
        m: {
            x_min: 74,
            x_max: 1905,
            y_min: 0,
            y_max: 1102,
            ha: 1102,
            leftSideBearing: 74,
            advanceWidth: 1977,
        },
        n: {
            x_min: 74,
            x_max: 1278,
            y_min: 0,
            y_max: 1102,
            ha: 1102,
            leftSideBearing: 74,
            advanceWidth: 1343,
        },
        o: {
            x_min: 78,
            x_max: 1046,
            y_min: -21,
            y_max: 1102,
            ha: 1123,
            leftSideBearing: 78,
            advanceWidth: 1124,
        },
        p: {
            x_min: 34,
            x_max: 1119,
            y_min: -416,
            y_max: 1102,
            ha: 1518,
            leftSideBearing: 34,
            advanceWidth: 1197,
        },
        q: {
            x_min: 78,
            x_max: 1135,
            y_min: -416,
            y_max: 1102,
            ha: 1518,
            leftSideBearing: 78,
            advanceWidth: 1139,
        },
        r: {
            x_min: 72,
            x_max: 808,
            y_min: 0,
            y_max: 1102,
            ha: 1102,
            leftSideBearing: 72,
            advanceWidth: 854,
        },
        s: {
            x_min: 104,
            x_max: 933,
            y_min: -21,
            y_max: 1102,
            ha: 1123,
            leftSideBearing: 104,
            advanceWidth: 1022,
        },
        t: {
            x_min: 24,
            x_max: 678,
            y_min: -17,
            y_max: 1343,
            ha: 1360,
            leftSideBearing: 24,
            advanceWidth: 730,
        },
        u: {
            x_min: 52,
            x_max: 1181,
            y_min: -21,
            y_max: 1082,
            ha: 1103,
            leftSideBearing: 52,
            advanceWidth: 1245,
        },
        v: {
            x_min: 26,
            x_max: 1176,
            y_min: 0,
            y_max: 1082,
            ha: 1082,
            leftSideBearing: 26,
            advanceWidth: 1206,
        },
        w: {
            x_min: 52,
            x_max: 1777,
            y_min: 0,
            y_max: 1082,
            ha: 1082,
            leftSideBearing: 52,
            advanceWidth: 1823,
        },
        x: {
            x_min: 42,
            x_max: 1163,
            y_min: 0,
            y_max: 1082,
            ha: 1082,
            leftSideBearing: 42,
            advanceWidth: 1203,
        },
        y: {
            x_min: 24,
            x_max: 1172,
            y_min: -437,
            y_max: 1082,
            ha: 1519,
            leftSideBearing: 24,
            advanceWidth: 1192,
        },
        z: {
            x_min: 88,
            x_max: 960,
            y_min: 0,
            y_max: 1082,
            ha: 1082,
            leftSideBearing: 88,
            advanceWidth: 1032,
        },
        '{': {
            x_min: 63,
            x_max: 671,
            y_min: -364,
            y_max: 1597,
            ha: 1961,
            leftSideBearing: 63,
            advanceWidth: 701,
        },
        '|': {
            x_min: 150,
            x_max: 307,
            y_min: -270,
            y_max: 1456,
            ha: 1726,
            leftSideBearing: 150,
            advanceWidth: 451,
        },
        '}': {
            x_min: 27,
            x_max: 635,
            y_min: -364,
            y_max: 1597,
            ha: 1961,
            leftSideBearing: 27,
            advanceWidth: 701,
        },
        '~': {
            x_min: 121,
            x_max: 1257,
            y_min: 401,
            y_max: 803,
            ha: 402,
            leftSideBearing: 121,
            advanceWidth: 1386,
        },
    },
    fontFamily: 'Roboto Slab',
    resolution: 2048,
    generatedOn: '2020-06-15T19:12:58.120Z',
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fonts/textfonts.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fonts/textfonts.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadTextFonts: () => (/* binding */ loadTextFonts)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _petalumascript_glyphs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./petalumascript_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/petalumascript_glyphs.js");
/* harmony import */ var _robotoslab_glyphs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./robotoslab_glyphs.js */ "./node_modules/vexflow_smoosic/build/esm/src/fonts/robotoslab_glyphs.js");




function loadTextFonts() {
    {
        const fontData = _robotoslab_glyphs_js__WEBPACK_IMPORTED_MODULE_3__.RobotoSlabFont;
        const { fontFamily, resolution, glyphs } = fontData;
        _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load(fontFamily, fontData);
        const maxSizeGlyph = 'b';
        _textformatter_js__WEBPACK_IMPORTED_MODULE_1__.TextFormatter.registerInfo({
            family: fontFamily,
            resolution,
            glyphs,
            maxSizeGlyph,
            monospaced: false,
            bold: false,
            italic: false,
            superscriptOffset: 0.66,
            subscriptOffset: 0.66,
            serifs: true,
            description: 'Text font to pair with the Bravura / Gonville music fonts.',
        });
    }
    {
        const fontData = _petalumascript_glyphs_js__WEBPACK_IMPORTED_MODULE_2__.PetalumaScriptFont;
        const { fontFamily, resolution, glyphs } = fontData;
        _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.load(fontFamily, fontData);
        const maxSizeGlyph = 'b';
        _textformatter_js__WEBPACK_IMPORTED_MODULE_1__.TextFormatter.registerInfo({
            family: fontFamily,
            resolution,
            glyphs,
            maxSizeGlyph,
            monospaced: false,
            bold: false,
            italic: false,
            superscriptOffset: 0.66,
            subscriptOffset: 0.66,
            serifs: false,
            description: 'Text font to pair with the Petaluma music font.',
        });
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/formatter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Formatter: () => (/* binding */ Formatter)
/* harmony export */ });
/* harmony import */ var _beam_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./beam.js */ "./node_modules/vexflow_smoosic/build/esm/src/beam.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _modifiercontext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifiercontext.js");
/* harmony import */ var _stave_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stave.js */ "./node_modules/vexflow_smoosic/build/esm/src/stave.js");
/* harmony import */ var _staveconnector_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./staveconnector.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveconnector.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _tickcontext_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tickcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _voice_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./voice.js */ "./node_modules/vexflow_smoosic/build/esm/src/voice.js");











const sumArray = (arr) => arr.reduce((a, b) => a + b, 0);
function createContexts(voices, makeContext, addToContext) {
    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);
    const tickToContextMap = {};
    const tickList = [];
    const contexts = [];
    if (voices.length == 0)
        return {
            map: tickToContextMap,
            array: contexts,
            list: tickList.sort((a, b) => a - b),
            resolutionMultiplier,
        };
    voices.forEach((voice, voiceIndex) => {
        const ticksUsed = new _fraction_js__WEBPACK_IMPORTED_MODULE_2__.Fraction(0, resolutionMultiplier);
        voice.getTickables().forEach((tickable) => {
            const integerTicks = ticksUsed.numerator;
            if (!tickToContextMap[integerTicks]) {
                const newContext = makeContext({ tickID: integerTicks });
                contexts.push(newContext);
                tickToContextMap[integerTicks] = newContext;
                tickList.push(integerTicks);
            }
            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);
            ticksUsed.add(tickable.getTicks());
        });
    });
    return {
        map: tickToContextMap,
        array: contexts,
        list: tickList.sort((a, b) => a - b),
        resolutionMultiplier,
    };
}
function L(...args) {
    if (Formatter.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.log)('Vex.Flow.Formatter', args);
}
function getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {
    let nextRestLine = currRestLine;
    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {
        const note = notes[noteIndex];
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_8__.isNote)(note) && !note.isRest() && !note.shouldIgnoreTicks()) {
            nextRestLine = note.getLineForRest();
            break;
        }
    }
    if (compare && currRestLine !== nextRestLine) {
        const top = Math.max(currRestLine, nextRestLine);
        const bot = Math.min(currRestLine, nextRestLine);
        nextRestLine = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.midLine)(top, bot);
    }
    return nextRestLine;
}
class Formatter {
    constructor(options) {
        this.tickToContextMap = {};
        this.tickToStaveContextMap = {};
        this.tickList = [];
        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: 2, maxIterations: 5 }, options);
        this.justifyWidth = 0;
        this.totalCost = 0;
        this.totalShift = 0;
        this.durationStats = {};
        this.minTotalWidth = 0;
        this.hasMinTotalWidth = false;
        this.tickContexts = undefined;
        this.contextGaps = {
            total: 0,
            gaps: [],
        };
        this.voices = [];
        this.lossHistory = [];
    }
    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {
        notes.reduce((accumulator, note) => {
            note.addToModifierContext(new _modifiercontext_js__WEBPACK_IMPORTED_MODULE_3__.ModifierContext());
            const tick = new _tickcontext_js__WEBPACK_IMPORTED_MODULE_7__.TickContext().addTickable(note).preFormat();
            const metrics = tick.getMetrics();
            tick.setX(accumulator + metrics.totalLeftPx);
            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;
        }, x);
    }
    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {
        options = Object.assign({ stavePadding: _tables_js__WEBPACK_IMPORTED_MODULE_6__.Tables.currentMusicFont().lookupMetric('stave.padding') }, options);
        const x = xPos + options.stavePadding;
        const contextGaps = formatter.contextGaps;
        function stroke(x1, x2, color) {
            ctx.beginPath();
            ctx.setStrokeStyle(color);
            ctx.setFillStyle(color);
            ctx.setLineWidth(1);
            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);
        }
        ctx.save();
        ctx.setFont(_font_js__WEBPACK_IMPORTED_MODULE_1__.Font.SANS_SERIF, 8);
        contextGaps.gaps.forEach((gap) => {
            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');
            ctx.setFillStyle('green');
            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);
        });
        ctx.setFillStyle('red');
        ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);
        ctx.restore();
    }
    static FormatAndDraw(ctx, stave, notes, params) {
        let options = {
            auto_beam: false,
            align_rests: false,
        };
        if (typeof params === 'object') {
            options = Object.assign(Object.assign({}, options), params);
        }
        else if (typeof params === 'boolean') {
            options.auto_beam = params;
        }
        const voice = new _voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice(_tables_js__WEBPACK_IMPORTED_MODULE_6__.Tables.TIME4_4).setMode(_voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice.Mode.SOFT).addTickables(notes);
        const beams = options.auto_beam ? _beam_js__WEBPACK_IMPORTED_MODULE_0__.Beam.applyAndGetBeams(voice) : [];
        new Formatter()
            .joinVoices([voice])
            .formatToStave([voice], stave, { align_rests: options.align_rests, stave });
        voice.setStave(stave).draw(ctx, stave);
        beams.forEach((beam) => beam.setContext(ctx).draw());
        return voice.getBoundingBox();
    }
    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {
        let opts = {
            auto_beam: autobeam,
            align_rests: false,
        };
        if (typeof params === 'object') {
            opts = Object.assign(Object.assign({}, opts), params);
        }
        else if (typeof params === 'boolean') {
            opts.auto_beam = params;
        }
        const notevoice = new _voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice(_tables_js__WEBPACK_IMPORTED_MODULE_6__.Tables.TIME4_4).setMode(_voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice.Mode.SOFT).addTickables(notes);
        const tabvoice = new _voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice(_tables_js__WEBPACK_IMPORTED_MODULE_6__.Tables.TIME4_4).setMode(_voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice.Mode.SOFT).addTickables(tabnotes);
        const beams = opts.auto_beam ? _beam_js__WEBPACK_IMPORTED_MODULE_0__.Beam.applyAndGetBeams(notevoice) : [];
        new Formatter()
            .joinVoices([notevoice])
            .joinVoices([tabvoice])
            .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });
        notevoice.draw(ctx, stave);
        tabvoice.draw(ctx, tabstave);
        beams.forEach((beam) => beam.setContext(ctx).draw());
        new _staveconnector_js__WEBPACK_IMPORTED_MODULE_5__.StaveConnector(stave, tabstave).setContext(ctx).draw();
    }
    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {
        tickables.forEach((currTickable, index) => {
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_8__.isStaveNote)(currTickable) && currTickable.isRest()) {
                if (currTickable.getTuplet() && !alignTuplets) {
                    return;
                }
                const position = currTickable.getGlyph().position.toUpperCase();
                if (position !== 'R/4' && position !== 'B/4') {
                    return;
                }
                if (alignAllNotes || currTickable.getBeam()) {
                    const props = currTickable.getKeyProps()[0];
                    if (index === 0) {
                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);
                    }
                    else if (index > 0 && index < tickables.length) {
                        const prevTickable = tickables[index - 1];
                        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_8__.isStaveNote)(prevTickable)) {
                            if (prevTickable.isRest()) {
                                props.line = prevTickable.getKeyProps()[0].line;
                            }
                            else {
                                const restLine = prevTickable.getLineForRest();
                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);
                            }
                        }
                    }
                    currTickable.setKeyLine(0, props.line);
                }
            }
        });
    }
    alignRests(voices, alignAllNotes) {
        if (!voices || !voices.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('BadArgument', 'No voices to format rests');
        }
        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));
    }
    preCalculateMinTotalWidth(voices) {
        const unalignedPadding = _tables_js__WEBPACK_IMPORTED_MODULE_6__.Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');
        let unalignedCtxCount = 0;
        let wsum = 0;
        let dsum = 0;
        const widths = [];
        const durations = [];
        if (this.hasMinTotalWidth)
            return this.minTotalWidth;
        if (!this.tickContexts) {
            if (!voices) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('BadArgument', "'voices' required to run preCalculateMinTotalWidth");
            }
            this.createTickContexts(voices);
        }
        const { list: contextList, map: contextMap } = this.tickContexts;
        this.minTotalWidth = 0;
        contextList.forEach((tick) => {
            const context = contextMap[tick];
            context.preFormat();
            if (context.getTickables().length < voices.length) {
                unalignedCtxCount += 1;
            }
            context.getTickables().forEach((t) => {
                wsum += t.getMetrics().width;
                dsum += t.getTicks().value();
                widths.push(t.getMetrics().width);
                durations.push(t.getTicks().value());
            });
            const width = context.getWidth();
            this.minTotalWidth += width;
        });
        this.hasMinTotalWidth = true;
        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;
        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));
        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;
        const davg = dsum / durations.length;
        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));
        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;
        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;
        const unalignedPad = unalignedPadding * unalignedCtxCount;
        return this.minTotalWidth + Math.max(unalignedPad, padmax);
    }
    getMinTotalWidth() {
        if (!this.hasMinTotalWidth) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('NoMinTotalWidth', "Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'");
        }
        return this.minTotalWidth;
    }
    static getResolutionMultiplier(voices) {
        if (!voices || !voices.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('BadArgument', 'No voices to format');
        }
        const totalTicks = voices[0].getTotalTicks();
        const resolutionMultiplier = voices.reduce((accumulator, voice) => {
            if (!voice.getTotalTicks().equals(totalTicks)) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');
            }
            if (voice.getMode() === _voice_js__WEBPACK_IMPORTED_MODULE_10__.Voice.Mode.STRICT && !voice.isComplete()) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');
            }
            return Math.max(accumulator, _fraction_js__WEBPACK_IMPORTED_MODULE_2__.Fraction.LCM(accumulator, voice.getResolutionMultiplier()));
        }, 1);
        return resolutionMultiplier;
    }
    createModifierContexts(voices) {
        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);
        const getKey = (tickable, tick) => {
            const stave = tickable.getStave();
            return stave ? stave.getAttribute('id') + '-' + tick.toString() : tick.toString();
        };
        voices.forEach((voice) => {
            const ticksUsed = new _fraction_js__WEBPACK_IMPORTED_MODULE_2__.Fraction(0, resolutionMultiplier);
            voice.getTickables().forEach((tickable) => {
                const integerTicks = ticksUsed.numerator;
                const key = getKey(tickable, integerTicks);
                if (!this.tickToStaveContextMap[key]) {
                    const newContext = new _modifiercontext_js__WEBPACK_IMPORTED_MODULE_3__.ModifierContext();
                    this.tickToStaveContextMap[key] = newContext;
                    if (!this.tickToContextMap[integerTicks]) {
                        this.tickToContextMap[integerTicks] = [];
                        this.tickList.push(integerTicks);
                    }
                    this.tickToContextMap[integerTicks].push(newContext);
                }
                tickable.addToModifierContext(this.tickToStaveContextMap[key]);
                ticksUsed.add(tickable.getTicks());
            });
        });
    }
    createTickContexts(voices) {
        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);
        const contexts = createContexts(voices, (tick) => new _tickcontext_js__WEBPACK_IMPORTED_MODULE_7__.TickContext(tick), fn);
        this.tickContexts = contexts;
        const contextArray = this.tickContexts.array;
        contextArray.forEach((context) => {
            context.tContexts = contextArray;
        });
        return contexts;
    }
    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {
        const contexts = this.tickContexts;
        if (!contexts) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeError('NoTickContexts', 'preFormat requires TickContexts');
        }
        const { list: contextList, map: contextMap } = contexts;
        this.lossHistory = [];
        if (voicesParam && stave) {
            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());
        }
        let x = 0;
        let shift = 0;
        this.minTotalWidth = 0;
        let totalTicks = 0;
        contextList.forEach((tick) => {
            const context = contextMap[tick];
            context.preFormat();
            const width = context.getWidth();
            this.minTotalWidth += width;
            const maxTicks = context.getMaxTicks().value();
            totalTicks += maxTicks;
            const metrics = context.getMetrics();
            x = x + shift + metrics.totalLeftPx;
            context.setX(x);
            shift = width - metrics.totalLeftPx;
        });
        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;
        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));
        const expTicksUsed = sumArray(contextList.map(exp));
        this.minTotalWidth = x + shift;
        this.hasMinTotalWidth = true;
        if (justifyWidth <= 0)
            return this.evaluate();
        const firstContext = contextMap[contextList[0]];
        const lastContext = contextMap[contextList[contextList.length - 1]];
        function calculateIdealDistances(adjustedJustifyWidth) {
            const distances = contextList.map((tick, i) => {
                const context = contextMap[tick];
                const voices = context.getTickablesByVoice();
                let backTickable;
                if (i > 0) {
                    const prevContext = contextMap[contextList[i - 1]];
                    for (let j = i - 1; j >= 0; j--) {
                        const backTick = contextMap[contextList[j]];
                        const backVoices = backTick.getTickablesByVoice();
                        const matchingVoices = [];
                        Object.keys(voices).forEach((v) => {
                            if (backVoices[v]) {
                                matchingVoices.push(v);
                            }
                        });
                        if (matchingVoices.length > 0) {
                            let maxTicks = 0;
                            let maxNegativeShiftPx = Infinity;
                            let expectedDistance = 0;
                            matchingVoices.forEach((v) => {
                                const ticks = backVoices[v].getTicks().value();
                                if (ticks > maxTicks) {
                                    backTickable = backVoices[v];
                                    maxTicks = ticks;
                                }
                                const thisTickable = voices[v];
                                const insideLeftEdge = thisTickable.getX() -
                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);
                                const backMetrics = backVoices[v].getMetrics();
                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;
                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);
                            });
                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));
                            if (globalSoftmax) {
                                const t = totalTicks;
                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;
                            }
                            else if (typeof backTickable !== 'undefined') {
                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;
                            }
                            return {
                                expectedDistance,
                                maxNegativeShiftPx,
                                fromTickable: backTickable,
                            };
                        }
                    }
                }
                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };
            });
            return distances;
        }
        function shiftToIdealDistances(idealDistances) {
            const centerX = adjustedJustifyWidth / 2;
            let spaceAccum = 0;
            contextList.forEach((tick, index) => {
                const context = contextMap[tick];
                if (index > 0) {
                    const contextX = context.getX();
                    const ideal = idealDistances[index];
                    const errorPx = (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.defined)(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);
                    let negativeShiftPx = 0;
                    if (errorPx > 0) {
                        spaceAccum += errorPx;
                    }
                    else if (errorPx < 0) {
                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));
                        spaceAccum += -negativeShiftPx;
                    }
                    context.setX(contextX + spaceAccum);
                }
                context.getCenterAlignedTickables().forEach((tickable) => {
                    tickable.setCenterXShift(centerX - context.getX());
                });
            });
            return lastContext.getX() - firstContext.getX();
        }
        const adjustedJustifyWidth = justifyWidth -
            lastContext.getMetrics().notePx -
            lastContext.getMetrics().totalRightPx -
            firstContext.getMetrics().totalLeftPx;
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_6__.Tables.currentMusicFont();
        const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');
        const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');
        const leftPadding = musicFont.lookupMetric('stave.padding');
        let targetWidth = adjustedJustifyWidth;
        const distances = calculateIdealDistances(targetWidth);
        let actualWidth = shiftToIdealDistances(distances);
        if (contextList.length === 1)
            return 0;
        const calcMinDistance = (targetWidth, distances) => {
            let mdCalc = targetWidth / 2;
            if (distances.length > 1) {
                for (let di = 1; di < distances.length; ++di) {
                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);
                }
            }
            return mdCalc;
        };
        const minDistance = calcMinDistance(targetWidth, distances);
        const paddingMaxCalc = (curTargetWidth) => {
            let lastTickablePadding = 0;
            const lastTickable = lastContext && lastContext.getMaxTickable();
            if (lastTickable) {
                const voice = lastTickable.getVoice();
                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {
                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;
                }
                const tickWidth = lastTickable.getWidth();
                lastTickablePadding =
                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);
            }
            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;
        };
        let paddingMax = paddingMaxCalc(targetWidth);
        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);
        const maxX = adjustedJustifyWidth - paddingMin;
        let iterations = maxIterations;
        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {
            targetWidth -= actualWidth - maxX;
            paddingMax = paddingMaxCalc(targetWidth);
            paddingMin = paddingMax - (configMaxPadding - configMinPadding);
            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));
            iterations--;
        }
        this.justifyWidth = justifyWidth;
        return this.evaluate();
    }
    evaluate() {
        if (!this.tickContexts)
            return 0;
        const contexts = this.tickContexts;
        const justifyWidth = this.justifyWidth;
        this.contextGaps = { total: 0, gaps: [] };
        contexts.list.forEach((tick, index) => {
            if (index === 0)
                return;
            const prevTick = contexts.list[index - 1];
            const prevContext = contexts.map[prevTick];
            const context = contexts.map[tick];
            const prevMetrics = prevContext.getMetrics();
            const currMetrics = context.getMetrics();
            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;
            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;
            const gap = insideLeftEdge - insideRightEdge;
            this.contextGaps.total += gap;
            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });
            context.getFormatterMetrics().freedom.left = gap;
            prevContext.getFormatterMetrics().freedom.right = gap;
        });
        this.durationStats = {};
        const durationStats = this.durationStats;
        function updateStats(duration, space) {
            const stats = durationStats[duration];
            if (stats === undefined) {
                durationStats[duration] = { mean: space, count: 1 };
            }
            else {
                stats.count += 1;
                stats.mean = (stats.mean + space) / 2;
            }
        }
        this.voices.forEach((voice) => {
            voice.getTickables().forEach((note, i, notes) => {
                const duration = note.getTicks().clone().simplify().toString();
                const metrics = note.getMetrics();
                const formatterMetrics = note.getFormatterMetrics();
                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;
                let space = 0;
                if (i < notes.length - 1) {
                    const rightNote = notes[i + 1];
                    const rightMetrics = rightNote.getMetrics();
                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;
                    space = rightNoteEdge - leftNoteEdge;
                    formatterMetrics.space.used = rightNote.getX() - note.getX();
                    rightNote.getFormatterMetrics().freedom.left = space;
                }
                else {
                    space = justifyWidth - leftNoteEdge;
                    formatterMetrics.space.used = justifyWidth - note.getX();
                }
                formatterMetrics.freedom.right = space;
                updateStats(duration, formatterMetrics.space.used);
            });
        });
        let totalDeviation = 0;
        this.voices.forEach((voice) => {
            voice.getTickables().forEach((note) => {
                const duration = note.getTicks().clone().simplify().toString();
                const metrics = note.getFormatterMetrics();
                metrics.space.mean = durationStats[duration].mean;
                metrics.duration = duration;
                metrics.iterations += 1;
                metrics.space.deviation = metrics.space.used - metrics.space.mean;
                totalDeviation += Math.pow(metrics.space.deviation, 2);
            });
        });
        this.totalCost = Math.sqrt(totalDeviation);
        this.lossHistory.push(this.totalCost);
        return this.totalCost;
    }
    tune(options) {
        var _a;
        const contexts = this.tickContexts;
        if (!contexts) {
            return 0;
        }
        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;
        function move(current, shift, prev, next) {
            current.setX(current.getX() + shift);
            current.getFormatterMetrics().freedom.left += shift;
            current.getFormatterMetrics().freedom.right -= shift;
            if (prev)
                prev.getFormatterMetrics().freedom.right += shift;
            if (next)
                next.getFormatterMetrics().freedom.left -= shift;
        }
        let shift = 0;
        this.totalShift = 0;
        contexts.list.forEach((tick, index, list) => {
            const context = contexts.map[tick];
            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;
            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;
            move(context, shift, prevContext, nextContext);
            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));
            if (cost > 0) {
                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));
            }
            else if (cost < 0) {
                if (nextContext) {
                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));
                }
                else {
                    shift = 0;
                }
            }
            shift *= alpha;
            this.totalShift += shift;
        });
        return this.evaluate();
    }
    postFormat() {
        const postFormatContexts = (contexts) => contexts.list.forEach((tick) => contexts.map[tick].postFormat());
        this.tickList.sort((a, b) => a - b);
        this.tickList.forEach((tick) => {
            this.tickToContextMap[tick].forEach((mc) => {
                mc.postFormat();
            });
        });
        if (this.tickContexts) {
            postFormatContexts(this.tickContexts);
        }
        return this;
    }
    joinVoices(voices) {
        if (voices.length < 1) {
            return this;
        }
        this.createModifierContexts(voices);
        this.hasMinTotalWidth = false;
        return this;
    }
    format(voices, justifyWidth, options) {
        const opts = Object.assign({ align_rests: false }, options);
        this.voices = voices;
        const softmaxFactor = this.formatterOptions.softmaxFactor;
        if (softmaxFactor) {
            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));
        }
        this.alignRests(voices, opts.align_rests);
        this.createTickContexts(voices);
        this.preFormat(justifyWidth, opts.context, voices, opts.stave);
        if (opts.stave)
            this.postFormat();
        return this;
    }
    formatToStave(voices, stave, optionsParam) {
        const options = Object.assign({ context: stave.getContext() }, optionsParam);
        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - _stave_js__WEBPACK_IMPORTED_MODULE_4__.Stave.defaultPadding;
        L('Formatting voices to width: ', justifyWidth);
        return this.format(voices, justifyWidth, options);
    }
    getTickContext(tick) {
        var _a;
        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];
    }
}
Formatter.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/fraction.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fraction: () => (/* binding */ Fraction)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");

class Fraction {
    constructor(numerator, denominator) {
        this.numerator = 1;
        this.denominator = 1;
        this.set(numerator, denominator);
    }
    static get CATEGORY() {
        return "Fraction";
    }
    static GCD(a, b) {
        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);
        }
        let t;
        while (b !== 0) {
            t = b;
            b = a % b;
            a = t;
        }
        return a;
    }
    static LCM(a, b) {
        return (a * b) / Fraction.GCD(a, b);
    }
    static LCMM(args) {
        if (args.length === 0) {
            return 0;
        }
        else if (args.length === 1) {
            return args[0];
        }
        else if (args.length === 2) {
            return Fraction.LCM(args[0], args[1]);
        }
        else {
            return Fraction.LCM(args.shift(), Fraction.LCMM(args));
        }
    }
    set(numerator = 1, denominator = 1) {
        this.numerator = numerator;
        this.denominator = denominator;
        return this;
    }
    value() {
        return this.numerator / this.denominator;
    }
    simplify() {
        let u = this.numerator;
        let d = this.denominator;
        const gcd = Fraction.GCD(u, d);
        u /= gcd;
        d /= gcd;
        if (d < 0) {
            d = -d;
            u = -u;
        }
        return this.set(u, d);
    }
    add(param1 = 0, param2 = 1) {
        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
        const lcm = Fraction.LCM(this.denominator, otherDenominator);
        const a = lcm / this.denominator;
        const b = lcm / otherDenominator;
        const u = this.numerator * a + otherNumerator * b;
        return this.set(u, lcm);
    }
    subtract(param1 = 0, param2 = 1) {
        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
        const lcm = Fraction.LCM(this.denominator, otherDenominator);
        const a = lcm / this.denominator;
        const b = lcm / otherDenominator;
        const u = this.numerator * a - otherNumerator * b;
        return this.set(u, lcm);
    }
    multiply(param1 = 1, param2 = 1) {
        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);
    }
    divide(param1 = 1, param2 = 1) {
        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);
        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);
    }
    equals(compare) {
        const a = Fraction.__staticFractionA.copy(compare).simplify();
        const b = Fraction.__staticFractionB.copy(this).simplify();
        return a.numerator === b.numerator && a.denominator === b.denominator;
    }
    greaterThan(compare) {
        const a = Fraction.__staticFractionB.copy(this);
        a.subtract(compare);
        return a.numerator > 0;
    }
    greaterThanEquals(compare) {
        const a = Fraction.__staticFractionB.copy(this);
        a.subtract(compare);
        return a.numerator >= 0;
    }
    lessThan(compare) {
        return !this.greaterThanEquals(compare);
    }
    lessThanEquals(compare) {
        return !this.greaterThan(compare);
    }
    clone() {
        return new Fraction(this.numerator, this.denominator);
    }
    copy(other) {
        if (typeof other === 'number') {
            return this.set(other, 1);
        }
        else {
            return this.set(other.numerator, other.denominator);
        }
    }
    quotient() {
        return Math.floor(this.numerator / this.denominator);
    }
    remainder() {
        return this.numerator % this.denominator;
    }
    makeAbs() {
        this.denominator = Math.abs(this.denominator);
        this.numerator = Math.abs(this.numerator);
        return this;
    }
    toString() {
        return `${this.numerator}/${this.denominator}`;
    }
    toSimplifiedString() {
        return Fraction.__staticFractionTmp.copy(this).simplify().toString();
    }
    toMixedString() {
        let s = '';
        const q = this.quotient();
        const f = Fraction.__staticFractionTmp.copy(this);
        if (q < 0) {
            f.makeAbs();
        }
        if (q !== 0) {
            s += q;
            if (f.numerator !== 0) {
                s += ` ${f.toSimplifiedString()}`;
            }
        }
        else if (f.numerator === 0) {
            s = '0';
        }
        else {
            s = f.toSimplifiedString();
        }
        return s;
    }
    parse(str) {
        const i = str.split('/');
        const n = parseInt(i[0], 10);
        const d = i[1] ? parseInt(i[1], 10) : 1;
        return this.set(n, d);
    }
}
Fraction.__staticFractionA = new Fraction();
Fraction.__staticFractionB = new Fraction();
Fraction.__staticFractionTmp = new Fraction();
function getNumeratorAndDenominator(n, d = 1) {
    if (typeof n === 'number') {
        return [n, d];
    }
    else {
        return [n.numerator, n.denominator];
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FretHandFinger: () => (/* binding */ FretHandFinger)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class FretHandFinger extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(finger) {
        super();
        this.finger = finger;
        this.width = 7;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT;
        this.x_shift = 0;
        this.y_shift = 0;
        this.x_offset = 0;
        this.y_offset = 0;
        this.resetFont();
    }
    static get CATEGORY() {
        return "FretHandFinger";
    }
    static format(nums, state) {
        const { left_shift, right_shift } = state;
        const num_spacing = 1;
        if (!nums || nums.length === 0)
            return false;
        const nums_list = [];
        let prev_note = null;
        let shiftLeft = 0;
        let shiftRight = 0;
        for (let i = 0; i < nums.length; ++i) {
            const num = nums[i];
            const note = num.getNote();
            const pos = num.getPosition();
            const index = num.checkIndex();
            const props = note.getKeyProps()[index];
            const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_3__.TextFormatter.create(num.textFont);
            const textHeight = textFormatter.maxHeight;
            if (num.position === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.ABOVE) {
                state.top_text_line += textHeight / _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.STAVE_LINE_DISTANCE + 0.5;
            }
            if (num.position === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.BELOW) {
                state.text_line += textHeight / _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.STAVE_LINE_DISTANCE + 0.5;
            }
            if (note !== prev_note) {
                for (let n = 0; n < note.keys.length; ++n) {
                    if (left_shift === 0) {
                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);
                    }
                    if (right_shift === 0) {
                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);
                    }
                }
                prev_note = note;
            }
            nums_list.push({
                note,
                num,
                pos,
                line: props.line,
                shiftL: shiftLeft,
                shiftR: shiftRight,
            });
        }
        nums_list.sort((a, b) => b.line - a.line);
        let numShiftL = 0;
        let numShiftR = 0;
        let xWidthL = 0;
        let xWidthR = 0;
        let lastLine = null;
        let lastNote = null;
        for (let i = 0; i < nums_list.length; ++i) {
            let num_shift = 0;
            const { note, pos, num, line, shiftL, shiftR } = nums_list[i];
            if (line !== lastLine || note !== lastNote) {
                numShiftL = left_shift + shiftL;
                numShiftR = right_shift + shiftR;
            }
            const numWidth = num.getWidth() + num_spacing;
            if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT) {
                num.setXShift(left_shift + numShiftL);
                num_shift = left_shift + numWidth;
                xWidthL = num_shift > xWidthL ? num_shift : xWidthL;
            }
            else if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT) {
                num.setXShift(numShiftR);
                num_shift = shiftRight + numWidth;
                xWidthR = num_shift > xWidthR ? num_shift : xWidthR;
            }
            lastLine = line;
            lastNote = note;
        }
        state.left_shift += xWidthL;
        state.right_shift += xWidthR;
        return true;
    }
    static easyScoreHook({ fingerings } = {}, note, builder) {
        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {
            const split = fingeringString.trim().split('.');
            const params = { number: split[0] };
            if (split[1])
                params.position = split[1];
            return builder.getFactory().Fingering(params);
        }).map((fingering, index) => note.addModifier(fingering, index));
    }
    setFretHandFinger(finger) {
        this.finger = finger;
        return this;
    }
    getFretHandFinger() {
        return this.finger;
    }
    setOffsetX(x) {
        this.x_offset = x;
        return this;
    }
    setOffsetY(y) {
        this.y_offset = y;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(this.position, this.index);
        let dot_x = start.x + this.x_shift + this.x_offset;
        let dot_y = start.y + this.y_shift + this.y_offset + 5;
        switch (this.position) {
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE:
                dot_x -= 4;
                dot_y -= 12;
                break;
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.BELOW:
                dot_x -= 2;
                dot_y += 10;
                break;
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT:
                dot_x -= this.width;
                break;
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT:
                dot_x += 1;
                break;
            default:
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);
        }
        ctx.save();
        ctx.setFont(this.textFont);
        ctx.fillText('' + this.finger, dot_x, dot_y);
        ctx.restore();
    }
}
FretHandFinger.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
    size: 9,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/ghostnote.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/ghostnote.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GhostNote: () => (/* binding */ GhostNote)
/* harmony export */ });
/* harmony import */ var _stemmablenote_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stemmablenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stemmablenote.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



const ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';
class GhostNote extends _stemmablenote_js__WEBPACK_IMPORTED_MODULE_0__.StemmableNote {
    static get CATEGORY() {
        return "GhostNote";
    }
    constructor(parameter) {
        if (!parameter) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', ERROR_MSG);
        }
        let noteStruct;
        if (typeof parameter === 'string') {
            noteStruct = { duration: parameter };
        }
        else if (typeof parameter === 'object') {
            noteStruct = parameter;
        }
        else {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', ERROR_MSG);
        }
        super(noteStruct);
        this.setWidth(0);
    }
    isRest() {
        return true;
    }
    setStave(stave) {
        super.setStave(stave);
        return this;
    }
    addToModifierContext(mc) {
        return this;
    }
    preFormat() {
        this.preFormatted = true;
        return this;
    }
    draw() {
        this.setRendered();
        for (let i = 0; i < this.modifiers.length; ++i) {
            const modifier = this.modifiers[i];
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_1__.isAnnotation)(modifier)) {
                modifier.setContext(this.getContext());
                modifier.drawWithStyle();
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js":
/*!*************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/glyph.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Glyph: () => (/* binding */ Glyph)
/* harmony export */ });
/* harmony import */ var _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boundingbox.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js");
/* harmony import */ var _boundingboxcomputation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./boundingboxcomputation.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingboxcomputation.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class GlyphCacheEntry {
    constructor(fontStack, code, category) {
        this.point = -1;
        this.metrics = Glyph.loadMetrics(fontStack, code, category);
        this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.metrics.scale, this.metrics.x_shift, this.metrics.y_shift);
        if (category) {
            this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);
        }
    }
}
class GlyphCache {
    constructor() {
        this.cache = new Map();
    }
    lookup(code, category) {
        let entries = this.cache.get(Glyph.CURRENT_CACHE_KEY);
        if (entries === undefined) {
            entries = {};
            this.cache.set(Glyph.CURRENT_CACHE_KEY, entries);
        }
        const key = category ? `${code}%${category}` : code;
        let entry = entries[key];
        if (entry === undefined) {
            entry = new GlyphCacheEntry(Glyph.MUSIC_FONT_STACK, code, category);
            entries[key] = entry;
        }
        return entry;
    }
}
class GlyphOutline {
    constructor(outline, originX, originY, scale) {
        this.outline = outline;
        this.originX = originX;
        this.originY = originY;
        this.scale = scale;
        this.i = 0;
        this.precision = 1;
        this.precision = Math.pow(10, _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.RENDER_PRECISION_PLACES);
    }
    done() {
        return this.i >= this.outline.length;
    }
    next() {
        return Math.round((this.outline[this.i++] * this.precision) / this.precision);
    }
    nextX() {
        return Math.round((this.originX + this.outline[this.i++] * this.scale) * this.precision) / this.precision;
    }
    nextY() {
        return Math.round((this.originY - this.outline[this.i++] * this.scale) * this.precision) / this.precision;
    }
    static parse(str) {
        const result = [];
        const parts = str.split(' ');
        let i = 0;
        while (i < parts.length) {
            switch (parts[i++]) {
                case 'm':
                    result.push(0, parseInt(parts[i++]), parseInt(parts[i++]));
                    break;
                case 'l':
                    result.push(1, parseInt(parts[i++]), parseInt(parts[i++]));
                    break;
                case 'q':
                    result.push(2, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));
                    break;
                case 'b':
                    result.push(3, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));
                    break;
            }
        }
        return result;
    }
}
class Glyph extends _element_js__WEBPACK_IMPORTED_MODULE_2__.Element {
    constructor(code, point, options) {
        super();
        this.bbox = new _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__.BoundingBox(0, 0, 0, 0);
        this.topGlyphs = [];
        this.botGlyphs = [];
        this.options = {};
        this.scale = 1;
        this.code = code;
        this.point = point;
        this.originShift = { x: 0, y: 0 };
        this.x_shift = 0;
        this.y_shift = 0;
        if (options) {
            this.setOptions(options);
        }
        else {
            this.reset();
        }
    }
    static get CATEGORY() {
        return "Glyph";
    }
    static lookupFontMetric(font, category, code, key, defaultValue) {
        let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);
        if (value === undefined) {
            value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);
        }
        return value;
    }
    static lookupGlyph(fontStack, code) {
        (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.defined)(fontStack, 'BadFontStack', 'Font stack is misconfigured');
        let glyph;
        let font;
        for (let i = 0; i < fontStack.length; i++) {
            font = fontStack[i];
            glyph = font.getGlyphs()[code];
            if (glyph)
                return { glyph, font };
        }
        throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);
    }
    static loadMetrics(fontStack, code, category) {
        const { glyph, font } = Glyph.lookupGlyph(fontStack, code);
        if (!glyph.o)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);
        let x_shift = 0;
        let y_shift = 0;
        let scale = 1;
        if (category && font) {
            x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);
            y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);
            scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);
        }
        const x_min = glyph.x_min;
        const x_max = glyph.x_max;
        const ha = glyph.ha;
        if (!glyph.cached_outline) {
            glyph.cached_outline = GlyphOutline.parse(glyph.o);
        }
        return {
            x_min,
            x_max,
            x_shift,
            y_shift,
            scale,
            ha,
            outline: glyph.cached_outline,
            font,
            width: x_max - x_min,
            height: ha,
        };
    }
    static renderGlyph(ctx, x_pos, y_pos, point, code, options) {
        var _a;
        const data = Glyph.cache.lookup(code, options === null || options === void 0 ? void 0 : options.category);
        const metrics = data.metrics;
        if (data.point != -1) {
            point = data.point;
        }
        const customScale = (_a = options === null || options === void 0 ? void 0 : options.scale) !== null && _a !== void 0 ? _a : 1;
        const scale = ((point * 72.0) / (metrics.font.getResolution() * 100.0)) * metrics.scale * customScale;
        Glyph.renderOutline(ctx, metrics.outline, scale, x_pos + metrics.x_shift * customScale, y_pos + metrics.y_shift * customScale);
        return metrics;
    }
    static renderOutline(ctx, outline, scale, x_pos, y_pos) {
        const go = new GlyphOutline(outline, x_pos, y_pos, scale);
        ctx.beginPath();
        let x, y;
        while (!go.done()) {
            switch (go.next()) {
                case 0:
                    ctx.moveTo(go.nextX(), go.nextY());
                    break;
                case 1:
                    ctx.lineTo(go.nextX(), go.nextY());
                    break;
                case 2:
                    x = go.nextX();
                    y = go.nextY();
                    ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);
                    break;
                case 3:
                    x = go.nextX();
                    y = go.nextY();
                    ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);
                    break;
            }
        }
        ctx.fill();
    }
    static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {
        const go = new GlyphOutline(outline, x_pos, y_pos, scale);
        const bboxComp = new _boundingboxcomputation_js__WEBPACK_IMPORTED_MODULE_1__.BoundingBoxComputation();
        let penX = x_pos;
        let penY = y_pos;
        let x, y;
        while (!go.done()) {
            switch (go.next()) {
                case 0:
                    penX = go.nextX();
                    penY = go.nextY();
                    break;
                case 1:
                    bboxComp.addPoint(penX, penY);
                    penX = go.nextX();
                    penY = go.nextY();
                    bboxComp.addPoint(penX, penY);
                    break;
                case 2:
                    x = go.nextX();
                    y = go.nextY();
                    bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);
                    penX = x;
                    penY = y;
                    break;
                case 3:
                    x = go.nextX();
                    y = go.nextY();
                    bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);
                    penX = x;
                    penY = y;
                    break;
            }
        }
        return new _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__.BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());
    }
    static getWidth(code, point, category) {
        const data = Glyph.cache.lookup(code, category);
        if (data.point != -1) {
            point = data.point;
        }
        const scale = (point * 72) / (data.metrics.font.getResolution() * 100);
        return data.bbox.getW() * scale;
    }
    draw(...args) {
    }
    getCode() {
        return this.code;
    }
    setOptions(options) {
        this.options = Object.assign(Object.assign({}, this.options), options);
        this.reset();
    }
    setPoint(point) {
        this.point = point;
        return this;
    }
    setStave(stave) {
        this.stave = stave;
        return this;
    }
    getXShift() {
        return this.x_shift;
    }
    setXShift(x_shift) {
        this.x_shift = x_shift;
        return this;
    }
    getYshift() {
        return this.y_shift;
    }
    setYShift(y_shift) {
        this.y_shift = y_shift;
        return this;
    }
    reset() {
        const data = Glyph.cache.lookup(this.code, this.options.category);
        this.metrics = data.metrics;
        if (data.point != -1) {
            this.point = data.point;
        }
        this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);
        this.bbox = new _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__.BoundingBox(data.bbox.getX() * this.scale, data.bbox.getY() * this.scale, data.bbox.getW() * this.scale, data.bbox.getH() * this.scale);
    }
    checkMetrics() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.defined)(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);
    }
    getMetrics() {
        const metrics = this.checkMetrics();
        const metricsScale = metrics.scale;
        return {
            x_min: metrics.x_min * this.scale * metricsScale,
            x_max: metrics.x_max * this.scale * metricsScale,
            width: this.bbox.getW(),
            height: this.bbox.getH(),
            scale: this.scale * metricsScale,
            x_shift: metrics.x_shift,
            y_shift: metrics.y_shift,
            outline: metrics.outline,
            font: metrics.font,
            ha: metrics.ha,
        };
    }
    setOriginX(x) {
        const { bbox } = this;
        const originX = Math.abs(bbox.getX() / bbox.getW());
        const xShift = (x - originX) * bbox.getW();
        this.originShift.x = -xShift;
    }
    setOriginY(y) {
        const { bbox } = this;
        const originY = Math.abs(bbox.getY() / bbox.getH());
        const yShift = (y - originY) * bbox.getH();
        this.originShift.y = -yShift;
    }
    setOrigin(x, y) {
        this.setOriginX(x);
        this.setOriginY(y);
    }
    render(ctx, x, y) {
        const metrics = this.checkMetrics();
        const outline = metrics.outline;
        const scale = this.scale * metrics.scale;
        this.setRendered();
        this.applyStyle(ctx);
        const xPos = x + this.originShift.x + metrics.x_shift;
        const yPos = y + this.originShift.y + metrics.y_shift;
        Glyph.renderOutline(ctx, outline, scale, xPos, yPos);
        this.restoreStyle(ctx);
    }
    checkStave() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.defined)(this.stave, 'NoStave', 'No stave attached to instance.');
    }
    renderToStave(x) {
        const context = this.checkContext();
        const metrics = this.checkMetrics();
        const stave = this.checkStave();
        const outline = metrics.outline;
        const scale = this.scale * metrics.scale;
        this.setRendered();
        this.applyStyle();
        const xPos = x + this.x_shift + metrics.x_shift;
        const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;
        Glyph.renderOutline(context, outline, scale, xPos, yPos);
        this.restoreStyle();
    }
}
Glyph.cache = new GlyphCache();
Glyph.CURRENT_CACHE_KEY = '';
Glyph.MUSIC_FONT_STACK = [];


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/glyphnote.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/glyphnote.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlyphNote: () => (/* binding */ GlyphNote)
/* harmony export */ });
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");

class GlyphNote extends _note_js__WEBPACK_IMPORTED_MODULE_0__.Note {
    constructor(glyph, noteStruct, options) {
        super(noteStruct);
        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);
        this.ignore_ticks = this.options.ignoreTicks;
        if (glyph) {
            this.setGlyph(glyph);
        }
    }
    static get CATEGORY() {
        return "GlyphNote";
    }
    setGlyph(glyph) {
        this.glyph = glyph;
        this.setWidth(this.glyph.getMetrics().width);
        return this;
    }
    getBoundingBox() {
        return this.glyph.getBoundingBox();
    }
    preFormat() {
        if (!this.preFormatted && this.modifierContext) {
            this.modifierContext.preFormat();
        }
        this.preFormatted = true;
        return this;
    }
    drawModifiers() {
        const ctx = this.checkContext();
        ctx.openGroup('modifiers');
        for (let i = 0; i < this.modifiers.length; i++) {
            const modifier = this.modifiers[i];
            modifier.setContext(ctx);
            modifier.drawWithStyle();
        }
        ctx.closeGroup();
    }
    draw() {
        const stave = this.checkStave();
        const ctx = stave.checkContext();
        this.setRendered();
        ctx.openGroup('glyphNote', this.getAttribute('id'));
        const glyph = this.glyph;
        if (!glyph.getContext()) {
            glyph.setContext(ctx);
        }
        glyph.setStave(stave);
        glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());
        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();
        glyph.renderToStave(x);
        this.drawModifiers();
        ctx.closeGroup();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/gracenote.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/gracenote.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraceNote: () => (/* binding */ GraceNote)
/* harmony export */ });
/* harmony import */ var _stavenote_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




class GraceNote extends _stavenote_js__WEBPACK_IMPORTED_MODULE_0__.StaveNote {
    constructor(noteStruct) {
        super(Object.assign({ glyph_font_scale: _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.NOTATION_FONT_SCALE * GraceNote.SCALE, stroke_px: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));
        this.slash = noteStruct.slash || false;
        this.slur = true;
        this.buildNoteHeads();
        this.width = 3;
    }
    static get CATEGORY() {
        return "GraceNote";
    }
    static get LEDGER_LINE_OFFSET() {
        return 2;
    }
    static get SCALE() {
        return 0.66;
    }
    getStemExtension() {
        if (this.stem_extension_override) {
            return this.stem_extension_override;
        }
        const glyph = this.getGlyph();
        if (glyph) {
            let ret = super.getStemExtension();
            if (glyph.stem) {
                const staveNoteScale = this.getStaveNoteScale();
                ret = (_stem_js__WEBPACK_IMPORTED_MODULE_1__.Stem.HEIGHT + ret) * staveNoteScale - _stem_js__WEBPACK_IMPORTED_MODULE_1__.Stem.HEIGHT;
            }
            return ret;
        }
        return 0;
    }
    getStaveNoteScale() {
        return this.render_options.glyph_font_scale / _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.NOTATION_FONT_SCALE;
    }
    draw() {
        super.draw();
        this.setRendered();
        const stem = this.stem;
        if (this.slash && stem) {
            const staveNoteScale = this.getStaveNoteScale();
            const offsetScale = staveNoteScale / 0.66;
            let slashBBox = undefined;
            const beam = this.beam;
            if (beam) {
                if (!beam.postFormatted) {
                    beam.postFormat();
                }
                slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {
                    stem: 6 * offsetScale,
                    beam: 5 * offsetScale,
                });
            }
            else {
                const stem_direction = this.getStemDirection();
                const noteHeadBounds = this.getNoteHeadBounds();
                const noteStemHeight = stem.getHeight();
                let x = this.getAbsoluteX();
                let y = stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_1__.Stem.DOWN
                    ? noteHeadBounds.y_top - noteStemHeight
                    : noteHeadBounds.y_bottom - noteStemHeight;
                const defaultStemExtention = stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_1__.Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;
                let defaultOffsetY = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.STEM_HEIGHT;
                defaultOffsetY -= defaultOffsetY / 2.8;
                defaultOffsetY += defaultStemExtention;
                y += defaultOffsetY * staveNoteScale * stem_direction;
                const offsets = stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_1__.Stem.UP
                    ? {
                        x1: 1,
                        y1: 0,
                        x2: 13,
                        y2: -9,
                    }
                    : {
                        x1: -4,
                        y1: 1,
                        x2: 13,
                        y2: 9,
                    };
                x += offsets.x1 * offsetScale;
                y += offsets.y1 * offsetScale;
                slashBBox = {
                    x1: x,
                    y1: y,
                    x2: x + offsets.x2 * offsetScale,
                    y2: y + offsets.y2 * offsetScale,
                };
            }
            const ctx = this.checkContext();
            ctx.save();
            ctx.setLineWidth(1 * offsetScale);
            ctx.beginPath();
            ctx.moveTo(slashBBox.x1, slashBBox.y1);
            ctx.lineTo(slashBBox.x2, slashBBox.y2);
            ctx.closePath();
            ctx.stroke();
            ctx.restore();
        }
    }
    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {
        const beam = this.beam;
        if (!beam)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('NoBeam', "Can't calculate without a beam.");
        const beam_slope = beam.slope;
        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;
        const scaleX = isBeamEndNote ? -1 : 1;
        const beam_angle = Math.atan(beam_slope * scaleX);
        const iPointOnBeam = {
            dx: Math.cos(beam_angle) * slashBeamOffset,
            dy: Math.sin(beam_angle) * slashBeamOffset,
        };
        slashStemOffset *= this.getStemDirection();
        const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);
        const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;
        const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;
        const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;
        const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;
        const stemX = this.getStemX();
        const stem0X = beam.notes[0].getStemX();
        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;
        const ret = {
            x1: stemX - protrusion_stem_dx,
            y1: stemY + slashStemOffset - protrusion_stem_dy,
            x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,
            y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,
        };
        return ret;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/gracenotegroup.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/gracenotegroup.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraceNoteGroup: () => (/* binding */ GraceNoteGroup)
/* harmony export */ });
/* harmony import */ var _beam_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./beam.js */ "./node_modules/vexflow_smoosic/build/esm/src/beam.js");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _stavenote_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stavenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js");
/* harmony import */ var _stavetie_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stavetie.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetie.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _tabtie_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tabtie.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabtie.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _voice_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./voice.js */ "./node_modules/vexflow_smoosic/build/esm/src/voice.js");










function L(...args) {
    if (GraceNoteGroup.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_8__.log)('Vex.Flow.GraceNoteGroup', args);
}
class GraceNoteGroup extends _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier {
    constructor(grace_notes, show_slur) {
        super();
        this.preFormatted = false;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT;
        this.grace_notes = grace_notes;
        this.width = 0;
        this.show_slur = show_slur;
        this.slur = undefined;
        this.voice = new _voice_js__WEBPACK_IMPORTED_MODULE_9__.Voice({
            num_beats: 4,
            beat_value: 4,
            resolution: _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.RESOLUTION,
        }).setStrict(false);
        this.render_options = {
            slur_y_shift: 0,
        };
        this.beams = [];
        this.voice.addTickables(this.grace_notes);
        return this;
    }
    static get CATEGORY() {
        return "GraceNoteGroup";
    }
    static format(gracenote_groups, state) {
        const group_spacing_stave = 4;
        const group_spacing_tab = 0;
        if (!gracenote_groups || gracenote_groups.length === 0)
            return false;
        const group_list = [];
        let prev_note = null;
        let shiftL = 0;
        for (let i = 0; i < gracenote_groups.length; ++i) {
            const gracenote_group = gracenote_groups[i];
            const note = gracenote_group.getNote();
            const is_stavenote = (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_7__.isStaveNote)(note);
            const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;
            if (is_stavenote && note !== prev_note) {
                for (let n = 0; n < note.keys.length; ++n) {
                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);
                }
                prev_note = note;
            }
            group_list.push({ shift: shiftL, gracenote_group, spacing });
        }
        let group_shift = group_list[0].shift;
        let formatWidth;
        for (let i = 0; i < group_list.length; ++i) {
            const gracenote_group = group_list[i].gracenote_group;
            gracenote_group.preFormat();
            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;
            group_shift = Math.max(formatWidth, group_shift);
        }
        for (let i = 0; i < group_list.length; ++i) {
            const gracenote_group = group_list[i].gracenote_group;
            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;
            gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift) + _stavenote_js__WEBPACK_IMPORTED_MODULE_3__.StaveNote.minNoteheadPadding);
        }
        state.left_shift += group_shift;
        return true;
    }
    preFormat() {
        if (this.preFormatted)
            return;
        if (!this.formatter) {
            this.formatter = new _formatter_js__WEBPACK_IMPORTED_MODULE_1__.Formatter();
        }
        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});
        this.setWidth(this.formatter.getMinTotalWidth());
        this.preFormatted = true;
    }
    beamNotes(grace_notes) {
        grace_notes = grace_notes || this.grace_notes;
        if (grace_notes.length > 1) {
            const beam = new _beam_js__WEBPACK_IMPORTED_MODULE_0__.Beam(grace_notes);
            beam.render_options.beam_width = 3;
            beam.render_options.partial_beam_length = 4;
            this.beams.push(beam);
        }
        return this;
    }
    setWidth(width) {
        this.width = width;
        return this;
    }
    getWidth() {
        return this.width + _stavenote_js__WEBPACK_IMPORTED_MODULE_3__.StaveNote.minNoteheadPadding;
    }
    getGraceNotes() {
        return this.grace_notes;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        L('Drawing grace note group for:', note);
        this.alignSubNotesWithNote(this.getGraceNotes(), note);
        this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());
        this.beams.forEach((beam) => beam.setContext(ctx).draw());
        if (this.show_slur) {
            const is_stavenote = (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_7__.isStaveNote)(note);
            const TieClass = is_stavenote ? _stavetie_js__WEBPACK_IMPORTED_MODULE_4__.StaveTie : _tabtie_js__WEBPACK_IMPORTED_MODULE_6__.TabTie;
            this.slur = new TieClass({
                last_note: this.grace_notes[0],
                first_note: note,
                first_indices: [0],
                last_indices: [0],
            });
            this.slur.render_options.cp2 = 12;
            this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;
            this.slur.setContext(ctx).draw();
        }
    }
}
GraceNoteGroup.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/gracetabnote.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/gracetabnote.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraceTabNote: () => (/* binding */ GraceTabNote)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _tabnote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabnote.js");


class GraceTabNote extends _tabnote_js__WEBPACK_IMPORTED_MODULE_1__.TabNote {
    static get CATEGORY() {
        return "GraceTabNote";
    }
    constructor(noteStruct) {
        super(noteStruct, false);
        this.render_options = Object.assign(Object.assign({}, this.render_options), { y_shift: 0.3, scale: 0.6, font: `7.5pt ${_font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF}` });
        this.updateWidth();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Accidental: () => (/* reexport safe */ _accidental_js__WEBPACK_IMPORTED_MODULE_0__.Accidental),
/* harmony export */   Annotation: () => (/* reexport safe */ _annotation_js__WEBPACK_IMPORTED_MODULE_1__.Annotation),
/* harmony export */   AnnotationHorizontalJustify: () => (/* reexport safe */ _annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationHorizontalJustify),
/* harmony export */   AnnotationVerticalJustify: () => (/* reexport safe */ _annotation_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationVerticalJustify),
/* harmony export */   Articulation: () => (/* reexport safe */ _articulation_js__WEBPACK_IMPORTED_MODULE_2__.Articulation),
/* harmony export */   BEAM_BOTH: () => (/* reexport safe */ _beam_js__WEBPACK_IMPORTED_MODULE_4__.BEAM_BOTH),
/* harmony export */   BEAM_LEFT: () => (/* reexport safe */ _beam_js__WEBPACK_IMPORTED_MODULE_4__.BEAM_LEFT),
/* harmony export */   BEAM_RIGHT: () => (/* reexport safe */ _beam_js__WEBPACK_IMPORTED_MODULE_4__.BEAM_RIGHT),
/* harmony export */   BarNote: () => (/* reexport safe */ _barnote_js__WEBPACK_IMPORTED_MODULE_3__.BarNote),
/* harmony export */   Barline: () => (/* reexport safe */ _stavebarline_js__WEBPACK_IMPORTED_MODULE_48__.Barline),
/* harmony export */   BarlineType: () => (/* reexport safe */ _stavebarline_js__WEBPACK_IMPORTED_MODULE_48__.BarlineType),
/* harmony export */   Beam: () => (/* reexport safe */ _beam_js__WEBPACK_IMPORTED_MODULE_4__.Beam),
/* harmony export */   Bend: () => (/* reexport safe */ _bend_js__WEBPACK_IMPORTED_MODULE_5__.Bend),
/* harmony export */   BoundingBox: () => (/* reexport safe */ _boundingbox_js__WEBPACK_IMPORTED_MODULE_6__.BoundingBox),
/* harmony export */   BoundingBoxComputation: () => (/* reexport safe */ _boundingboxcomputation_js__WEBPACK_IMPORTED_MODULE_7__.BoundingBoxComputation),
/* harmony export */   Builder: () => (/* reexport safe */ _easyscore_js__WEBPACK_IMPORTED_MODULE_15__.Builder),
/* harmony export */   CanvasContext: () => (/* reexport safe */ _canvascontext_js__WEBPACK_IMPORTED_MODULE_8__.CanvasContext),
/* harmony export */   ChordSymbol: () => (/* reexport safe */ _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.ChordSymbol),
/* harmony export */   ChordSymbolHorizontalJustify: () => (/* reexport safe */ _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.ChordSymbolHorizontalJustify),
/* harmony export */   ChordSymbolVerticalJustify: () => (/* reexport safe */ _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.ChordSymbolVerticalJustify),
/* harmony export */   Clef: () => (/* reexport safe */ _clef_js__WEBPACK_IMPORTED_MODULE_10__.Clef),
/* harmony export */   ClefNote: () => (/* reexport safe */ _clefnote_js__WEBPACK_IMPORTED_MODULE_11__.ClefNote),
/* harmony export */   Crescendo: () => (/* reexport safe */ _crescendo_js__WEBPACK_IMPORTED_MODULE_12__.Crescendo),
/* harmony export */   Curve: () => (/* reexport safe */ _curve_js__WEBPACK_IMPORTED_MODULE_13__.Curve),
/* harmony export */   CurvePosition: () => (/* reexport safe */ _curve_js__WEBPACK_IMPORTED_MODULE_13__.CurvePosition),
/* harmony export */   Dot: () => (/* reexport safe */ _dot_js__WEBPACK_IMPORTED_MODULE_14__.Dot),
/* harmony export */   EasyScore: () => (/* reexport safe */ _easyscore_js__WEBPACK_IMPORTED_MODULE_15__.EasyScore),
/* harmony export */   EasyScoreGrammar: () => (/* reexport safe */ _easyscore_js__WEBPACK_IMPORTED_MODULE_15__.EasyScoreGrammar),
/* harmony export */   Element: () => (/* reexport safe */ _element_js__WEBPACK_IMPORTED_MODULE_16__.Element),
/* harmony export */   Factory: () => (/* reexport safe */ _factory_js__WEBPACK_IMPORTED_MODULE_17__.Factory),
/* harmony export */   Flow: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_18__.Flow),
/* harmony export */   Font: () => (/* reexport safe */ _font_js__WEBPACK_IMPORTED_MODULE_19__.Font),
/* harmony export */   FontStyle: () => (/* reexport safe */ _font_js__WEBPACK_IMPORTED_MODULE_19__.FontStyle),
/* harmony export */   FontWeight: () => (/* reexport safe */ _font_js__WEBPACK_IMPORTED_MODULE_19__.FontWeight),
/* harmony export */   Formatter: () => (/* reexport safe */ _formatter_js__WEBPACK_IMPORTED_MODULE_20__.Formatter),
/* harmony export */   Fraction: () => (/* reexport safe */ _fraction_js__WEBPACK_IMPORTED_MODULE_21__.Fraction),
/* harmony export */   FretHandFinger: () => (/* reexport safe */ _frethandfinger_js__WEBPACK_IMPORTED_MODULE_22__.FretHandFinger),
/* harmony export */   GhostNote: () => (/* reexport safe */ _ghostnote_js__WEBPACK_IMPORTED_MODULE_23__.GhostNote),
/* harmony export */   Glyph: () => (/* reexport safe */ _glyph_js__WEBPACK_IMPORTED_MODULE_24__.Glyph),
/* harmony export */   GlyphNote: () => (/* reexport safe */ _glyphnote_js__WEBPACK_IMPORTED_MODULE_25__.GlyphNote),
/* harmony export */   GraceNote: () => (/* reexport safe */ _gracenote_js__WEBPACK_IMPORTED_MODULE_26__.GraceNote),
/* harmony export */   GraceNoteGroup: () => (/* reexport safe */ _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_27__.GraceNoteGroup),
/* harmony export */   GraceTabNote: () => (/* reexport safe */ _gracetabnote_js__WEBPACK_IMPORTED_MODULE_28__.GraceTabNote),
/* harmony export */   KeyManager: () => (/* reexport safe */ _keymanager_js__WEBPACK_IMPORTED_MODULE_29__.KeyManager),
/* harmony export */   KeySigNote: () => (/* reexport safe */ _keysignote_js__WEBPACK_IMPORTED_MODULE_31__.KeySigNote),
/* harmony export */   KeySignature: () => (/* reexport safe */ _keysignature_js__WEBPACK_IMPORTED_MODULE_30__.KeySignature),
/* harmony export */   Modifier: () => (/* reexport safe */ _modifier_js__WEBPACK_IMPORTED_MODULE_32__.Modifier),
/* harmony export */   ModifierContext: () => (/* reexport safe */ _modifiercontext_js__WEBPACK_IMPORTED_MODULE_33__.ModifierContext),
/* harmony export */   ModifierPosition: () => (/* reexport safe */ _modifier_js__WEBPACK_IMPORTED_MODULE_32__.ModifierPosition),
/* harmony export */   MultiMeasureRest: () => (/* reexport safe */ _multimeasurerest_js__WEBPACK_IMPORTED_MODULE_34__.MultiMeasureRest),
/* harmony export */   Music: () => (/* reexport safe */ _music_js__WEBPACK_IMPORTED_MODULE_35__.Music),
/* harmony export */   Note: () => (/* reexport safe */ _note_js__WEBPACK_IMPORTED_MODULE_36__.Note),
/* harmony export */   NoteHead: () => (/* reexport safe */ _notehead_js__WEBPACK_IMPORTED_MODULE_37__.NoteHead),
/* harmony export */   NoteSubGroup: () => (/* reexport safe */ _notesubgroup_js__WEBPACK_IMPORTED_MODULE_38__.NoteSubGroup),
/* harmony export */   Ornament: () => (/* reexport safe */ _ornament_js__WEBPACK_IMPORTED_MODULE_39__.Ornament),
/* harmony export */   Parenthesis: () => (/* reexport safe */ _parenthesis_js__WEBPACK_IMPORTED_MODULE_40__.Parenthesis),
/* harmony export */   Parser: () => (/* reexport safe */ _parser_js__WEBPACK_IMPORTED_MODULE_41__.Parser),
/* harmony export */   PedalMarking: () => (/* reexport safe */ _pedalmarking_js__WEBPACK_IMPORTED_MODULE_42__.PedalMarking),
/* harmony export */   Piece: () => (/* reexport safe */ _easyscore_js__WEBPACK_IMPORTED_MODULE_15__.Piece),
/* harmony export */   Registry: () => (/* reexport safe */ _registry_js__WEBPACK_IMPORTED_MODULE_43__.Registry),
/* harmony export */   RenderContext: () => (/* reexport safe */ _rendercontext_js__WEBPACK_IMPORTED_MODULE_44__.RenderContext),
/* harmony export */   Renderer: () => (/* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_45__.Renderer),
/* harmony export */   RendererBackends: () => (/* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_45__.RendererBackends),
/* harmony export */   RendererLineEndType: () => (/* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_45__.RendererLineEndType),
/* harmony export */   RepeatNote: () => (/* reexport safe */ _repeatnote_js__WEBPACK_IMPORTED_MODULE_46__.RepeatNote),
/* harmony export */   Repetition: () => (/* reexport safe */ _staverepetition_js__WEBPACK_IMPORTED_MODULE_54__.Repetition),
/* harmony export */   RuntimeError: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.RuntimeError),
/* harmony export */   SVGContext: () => (/* reexport safe */ _svgcontext_js__WEBPACK_IMPORTED_MODULE_64__.SVGContext),
/* harmony export */   Stave: () => (/* reexport safe */ _stave_js__WEBPACK_IMPORTED_MODULE_47__.Stave),
/* harmony export */   StaveConnector: () => (/* reexport safe */ _staveconnector_js__WEBPACK_IMPORTED_MODULE_49__.StaveConnector),
/* harmony export */   StaveHairpin: () => (/* reexport safe */ _stavehairpin_js__WEBPACK_IMPORTED_MODULE_50__.StaveHairpin),
/* harmony export */   StaveLine: () => (/* reexport safe */ _staveline_js__WEBPACK_IMPORTED_MODULE_51__.StaveLine),
/* harmony export */   StaveModifier: () => (/* reexport safe */ _stavemodifier_js__WEBPACK_IMPORTED_MODULE_52__.StaveModifier),
/* harmony export */   StaveModifierPosition: () => (/* reexport safe */ _stavemodifier_js__WEBPACK_IMPORTED_MODULE_52__.StaveModifierPosition),
/* harmony export */   StaveNote: () => (/* reexport safe */ _stavenote_js__WEBPACK_IMPORTED_MODULE_53__.StaveNote),
/* harmony export */   StaveSection: () => (/* reexport safe */ _stavesection_js__WEBPACK_IMPORTED_MODULE_55__.StaveSection),
/* harmony export */   StaveTempo: () => (/* reexport safe */ _stavetempo_js__WEBPACK_IMPORTED_MODULE_56__.StaveTempo),
/* harmony export */   StaveText: () => (/* reexport safe */ _stavetext_js__WEBPACK_IMPORTED_MODULE_57__.StaveText),
/* harmony export */   StaveTie: () => (/* reexport safe */ _stavetie_js__WEBPACK_IMPORTED_MODULE_58__.StaveTie),
/* harmony export */   Stem: () => (/* reexport safe */ _stem_js__WEBPACK_IMPORTED_MODULE_60__.Stem),
/* harmony export */   StemmableNote: () => (/* reexport safe */ _stemmablenote_js__WEBPACK_IMPORTED_MODULE_61__.StemmableNote),
/* harmony export */   StringNumber: () => (/* reexport safe */ _stringnumber_js__WEBPACK_IMPORTED_MODULE_62__.StringNumber),
/* harmony export */   Stroke: () => (/* reexport safe */ _strokes_js__WEBPACK_IMPORTED_MODULE_63__.Stroke),
/* harmony export */   SymbolModifiers: () => (/* reexport safe */ _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.SymbolModifiers),
/* harmony export */   SymbolTypes: () => (/* reexport safe */ _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__.SymbolTypes),
/* harmony export */   System: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_65__.System),
/* harmony export */   TabNote: () => (/* reexport safe */ _tabnote_js__WEBPACK_IMPORTED_MODULE_66__.TabNote),
/* harmony export */   TabSlide: () => (/* reexport safe */ _tabslide_js__WEBPACK_IMPORTED_MODULE_67__.TabSlide),
/* harmony export */   TabStave: () => (/* reexport safe */ _tabstave_js__WEBPACK_IMPORTED_MODULE_68__.TabStave),
/* harmony export */   TabTie: () => (/* reexport safe */ _tabtie_js__WEBPACK_IMPORTED_MODULE_69__.TabTie),
/* harmony export */   TextBracket: () => (/* reexport safe */ _textbracket_js__WEBPACK_IMPORTED_MODULE_70__.TextBracket),
/* harmony export */   TextBracketPosition: () => (/* reexport safe */ _textbracket_js__WEBPACK_IMPORTED_MODULE_70__.TextBracketPosition),
/* harmony export */   TextDynamics: () => (/* reexport safe */ _textdynamics_js__WEBPACK_IMPORTED_MODULE_71__.TextDynamics),
/* harmony export */   TextFormatter: () => (/* reexport safe */ _textformatter_js__WEBPACK_IMPORTED_MODULE_72__.TextFormatter),
/* harmony export */   TextJustification: () => (/* reexport safe */ _textnote_js__WEBPACK_IMPORTED_MODULE_73__.TextJustification),
/* harmony export */   TextNote: () => (/* reexport safe */ _textnote_js__WEBPACK_IMPORTED_MODULE_73__.TextNote),
/* harmony export */   TickContext: () => (/* reexport safe */ _tickcontext_js__WEBPACK_IMPORTED_MODULE_75__.TickContext),
/* harmony export */   Tickable: () => (/* reexport safe */ _tickable_js__WEBPACK_IMPORTED_MODULE_74__.Tickable),
/* harmony export */   TimeSigNote: () => (/* reexport safe */ _timesignote_js__WEBPACK_IMPORTED_MODULE_78__.TimeSigNote),
/* harmony export */   TimeSignature: () => (/* reexport safe */ _timesignature_js__WEBPACK_IMPORTED_MODULE_77__.TimeSignature),
/* harmony export */   TimeSignatureGlyph: () => (/* reexport safe */ _timesigglyph_js__WEBPACK_IMPORTED_MODULE_76__.TimeSignatureGlyph),
/* harmony export */   Tremolo: () => (/* reexport safe */ _tremolo_js__WEBPACK_IMPORTED_MODULE_79__.Tremolo),
/* harmony export */   Tuning: () => (/* reexport safe */ _tuning_js__WEBPACK_IMPORTED_MODULE_80__.Tuning),
/* harmony export */   Tuplet: () => (/* reexport safe */ _tuplet_js__WEBPACK_IMPORTED_MODULE_81__.Tuplet),
/* harmony export */   Vex: () => (/* reexport safe */ _vex_js__WEBPACK_IMPORTED_MODULE_84__.Vex),
/* harmony export */   Vibrato: () => (/* reexport safe */ _vibrato_js__WEBPACK_IMPORTED_MODULE_85__.Vibrato),
/* harmony export */   VibratoBracket: () => (/* reexport safe */ _vibratobracket_js__WEBPACK_IMPORTED_MODULE_86__.VibratoBracket),
/* harmony export */   Voice: () => (/* reexport safe */ _voice_js__WEBPACK_IMPORTED_MODULE_87__.Voice),
/* harmony export */   VoiceMode: () => (/* reexport safe */ _voice_js__WEBPACK_IMPORTED_MODULE_87__.VoiceMode),
/* harmony export */   Volta: () => (/* reexport safe */ _stavevolta_js__WEBPACK_IMPORTED_MODULE_59__.Volta),
/* harmony export */   VoltaType: () => (/* reexport safe */ _stavevolta_js__WEBPACK_IMPORTED_MODULE_59__.VoltaType),
/* harmony export */   defined: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.defined),
/* harmony export */   drawDot: () => (/* reexport safe */ _rendercontext_js__WEBPACK_IMPORTED_MODULE_44__.drawDot),
/* harmony export */   globalObject: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.globalObject),
/* harmony export */   isAccidental: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isAccidental),
/* harmony export */   isAnnotation: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isAnnotation),
/* harmony export */   isBarline: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isBarline),
/* harmony export */   isCategory: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isCategory),
/* harmony export */   isDot: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isDot),
/* harmony export */   isGraceNote: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isGraceNote),
/* harmony export */   isGraceNoteGroup: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isGraceNoteGroup),
/* harmony export */   isHTMLCanvas: () => (/* reexport safe */ _web_js__WEBPACK_IMPORTED_MODULE_88__.isHTMLCanvas),
/* harmony export */   isHTMLDiv: () => (/* reexport safe */ _web_js__WEBPACK_IMPORTED_MODULE_88__.isHTMLDiv),
/* harmony export */   isNote: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isNote),
/* harmony export */   isRenderContext: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isRenderContext),
/* harmony export */   isStaveNote: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isStaveNote),
/* harmony export */   isStemmableNote: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isStemmableNote),
/* harmony export */   isTabNote: () => (/* reexport safe */ _typeguard_js__WEBPACK_IMPORTED_MODULE_82__.isTabNote),
/* harmony export */   log: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.log),
/* harmony export */   midLine: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.midLine),
/* harmony export */   normalizeAngle: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.normalizeAngle),
/* harmony export */   prefix: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.prefix),
/* harmony export */   warn: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_83__.warn)
/* harmony export */ });
/* harmony import */ var _accidental_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accidental.js */ "./node_modules/vexflow_smoosic/build/esm/src/accidental.js");
/* harmony import */ var _annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotation.js */ "./node_modules/vexflow_smoosic/build/esm/src/annotation.js");
/* harmony import */ var _articulation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./articulation.js */ "./node_modules/vexflow_smoosic/build/esm/src/articulation.js");
/* harmony import */ var _barnote_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./barnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/barnote.js");
/* harmony import */ var _beam_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./beam.js */ "./node_modules/vexflow_smoosic/build/esm/src/beam.js");
/* harmony import */ var _bend_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bend.js */ "./node_modules/vexflow_smoosic/build/esm/src/bend.js");
/* harmony import */ var _boundingbox_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./boundingbox.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js");
/* harmony import */ var _boundingboxcomputation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./boundingboxcomputation.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingboxcomputation.js");
/* harmony import */ var _canvascontext_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./canvascontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/canvascontext.js");
/* harmony import */ var _chordsymbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chordsymbol.js */ "./node_modules/vexflow_smoosic/build/esm/src/chordsymbol.js");
/* harmony import */ var _clef_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./clef.js */ "./node_modules/vexflow_smoosic/build/esm/src/clef.js");
/* harmony import */ var _clefnote_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./clefnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/clefnote.js");
/* harmony import */ var _crescendo_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./crescendo.js */ "./node_modules/vexflow_smoosic/build/esm/src/crescendo.js");
/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./curve.js */ "./node_modules/vexflow_smoosic/build/esm/src/curve.js");
/* harmony import */ var _dot_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dot.js */ "./node_modules/vexflow_smoosic/build/esm/src/dot.js");
/* harmony import */ var _easyscore_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./easyscore.js */ "./node_modules/vexflow_smoosic/build/esm/src/easyscore.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./factory.js */ "./node_modules/vexflow_smoosic/build/esm/src/factory.js");
/* harmony import */ var _flow_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./flow.js */ "./node_modules/vexflow_smoosic/build/esm/src/flow.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _frethandfinger_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./frethandfinger.js */ "./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js");
/* harmony import */ var _ghostnote_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ghostnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/ghostnote.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _glyphnote_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./glyphnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyphnote.js");
/* harmony import */ var _gracenote_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gracenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenote.js");
/* harmony import */ var _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./gracenotegroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenotegroup.js");
/* harmony import */ var _gracetabnote_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./gracetabnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracetabnote.js");
/* harmony import */ var _keymanager_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./keymanager.js */ "./node_modules/vexflow_smoosic/build/esm/src/keymanager.js");
/* harmony import */ var _keysignature_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./keysignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignature.js");
/* harmony import */ var _keysignote_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./keysignote.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignote.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _modifiercontext_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./modifiercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifiercontext.js");
/* harmony import */ var _multimeasurerest_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./multimeasurerest.js */ "./node_modules/vexflow_smoosic/build/esm/src/multimeasurerest.js");
/* harmony import */ var _music_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./music.js */ "./node_modules/vexflow_smoosic/build/esm/src/music.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _notehead_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./notehead.js */ "./node_modules/vexflow_smoosic/build/esm/src/notehead.js");
/* harmony import */ var _notesubgroup_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./notesubgroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/notesubgroup.js");
/* harmony import */ var _ornament_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./ornament.js */ "./node_modules/vexflow_smoosic/build/esm/src/ornament.js");
/* harmony import */ var _parenthesis_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./parenthesis.js */ "./node_modules/vexflow_smoosic/build/esm/src/parenthesis.js");
/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./parser.js */ "./node_modules/vexflow_smoosic/build/esm/src/parser.js");
/* harmony import */ var _pedalmarking_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./pedalmarking.js */ "./node_modules/vexflow_smoosic/build/esm/src/pedalmarking.js");
/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./registry.js */ "./node_modules/vexflow_smoosic/build/esm/src/registry.js");
/* harmony import */ var _rendercontext_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./rendercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/vexflow_smoosic/build/esm/src/renderer.js");
/* harmony import */ var _repeatnote_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./repeatnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/repeatnote.js");
/* harmony import */ var _stave_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./stave.js */ "./node_modules/vexflow_smoosic/build/esm/src/stave.js");
/* harmony import */ var _stavebarline_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./stavebarline.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavebarline.js");
/* harmony import */ var _staveconnector_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./staveconnector.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveconnector.js");
/* harmony import */ var _stavehairpin_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./stavehairpin.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavehairpin.js");
/* harmony import */ var _staveline_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./staveline.js */ "./node_modules/vexflow_smoosic/build/esm/src/staveline.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _stavenote_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./stavenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js");
/* harmony import */ var _staverepetition_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./staverepetition.js */ "./node_modules/vexflow_smoosic/build/esm/src/staverepetition.js");
/* harmony import */ var _stavesection_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./stavesection.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavesection.js");
/* harmony import */ var _stavetempo_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./stavetempo.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetempo.js");
/* harmony import */ var _stavetext_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./stavetext.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetext.js");
/* harmony import */ var _stavetie_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./stavetie.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetie.js");
/* harmony import */ var _stavevolta_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./stavevolta.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavevolta.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _stemmablenote_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./stemmablenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stemmablenote.js");
/* harmony import */ var _stringnumber_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./stringnumber.js */ "./node_modules/vexflow_smoosic/build/esm/src/stringnumber.js");
/* harmony import */ var _strokes_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./strokes.js */ "./node_modules/vexflow_smoosic/build/esm/src/strokes.js");
/* harmony import */ var _svgcontext_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./svgcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/svgcontext.js");
/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./system.js */ "./node_modules/vexflow_smoosic/build/esm/src/system.js");
/* harmony import */ var _tabnote_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./tabnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabnote.js");
/* harmony import */ var _tabslide_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./tabslide.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabslide.js");
/* harmony import */ var _tabstave_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./tabstave.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabstave.js");
/* harmony import */ var _tabtie_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./tabtie.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabtie.js");
/* harmony import */ var _textbracket_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./textbracket.js */ "./node_modules/vexflow_smoosic/build/esm/src/textbracket.js");
/* harmony import */ var _textdynamics_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./textdynamics.js */ "./node_modules/vexflow_smoosic/build/esm/src/textdynamics.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");
/* harmony import */ var _textnote_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./textnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/textnote.js");
/* harmony import */ var _tickable_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./tickable.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickable.js");
/* harmony import */ var _tickcontext_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./tickcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js");
/* harmony import */ var _timesigglyph_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./timesigglyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesigglyph.js");
/* harmony import */ var _timesignature_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./timesignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignature.js");
/* harmony import */ var _timesignote_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./timesignote.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignote.js");
/* harmony import */ var _tremolo_js__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./tremolo.js */ "./node_modules/vexflow_smoosic/build/esm/src/tremolo.js");
/* harmony import */ var _tuning_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./tuning.js */ "./node_modules/vexflow_smoosic/build/esm/src/tuning.js");
/* harmony import */ var _tuplet_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./tuplet.js */ "./node_modules/vexflow_smoosic/build/esm/src/tuplet.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _vex_js__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./vex.js */ "./node_modules/vexflow_smoosic/build/esm/src/vex.js");
/* harmony import */ var _vibrato_js__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./vibrato.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibrato.js");
/* harmony import */ var _vibratobracket_js__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./vibratobracket.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibratobracket.js");
/* harmony import */ var _voice_js__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./voice.js */ "./node_modules/vexflow_smoosic/build/esm/src/voice.js");
/* harmony import */ var _web_js__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./web.js */ "./node_modules/vexflow_smoosic/build/esm/src/web.js");



























































































/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/keymanager.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/keymanager.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyManager: () => (/* binding */ KeyManager)
/* harmony export */ });
/* harmony import */ var _music_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./music.js */ "./node_modules/vexflow_smoosic/build/esm/src/music.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


class KeyManager {
    constructor(key) {
        this.music = new _music_js__WEBPACK_IMPORTED_MODULE_0__.Music();
        this.setKey(key);
    }
    setKey(key) {
        this.key = key;
        this.reset();
        return this;
    }
    getKey() {
        return this.key;
    }
    reset() {
        this.keyParts = this.music.getKeyParts(this.key);
        this.keyString = this.keyParts.root;
        if (this.keyParts.accidental)
            this.keyString += this.keyParts.accidental;
        const is_supported_type = _music_js__WEBPACK_IMPORTED_MODULE_0__.Music.scaleTypes[this.keyParts.type];
        if (!is_supported_type) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);
        }
        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), _music_js__WEBPACK_IMPORTED_MODULE_0__.Music.scaleTypes[this.keyParts.type]);
        this.scaleMap = {};
        this.scaleMapByValue = {};
        this.originalScaleMapByValue = {};
        const noteLocation = _music_js__WEBPACK_IMPORTED_MODULE_0__.Music.root_indices[this.keyParts.root];
        for (let i = 0; i < _music_js__WEBPACK_IMPORTED_MODULE_0__.Music.roots.length; ++i) {
            const index = (noteLocation + i) % _music_js__WEBPACK_IMPORTED_MODULE_0__.Music.roots.length;
            const rootName = _music_js__WEBPACK_IMPORTED_MODULE_0__.Music.roots[index];
            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);
            this.scaleMap[rootName] = noteName;
            this.scaleMapByValue[this.scale[i]] = noteName;
            this.originalScaleMapByValue[this.scale[i]] = noteName;
        }
        return this;
    }
    getAccidental(key) {
        const root = this.music.getKeyParts(key).root;
        const parts = this.music.getNoteParts(this.scaleMap[root]);
        return {
            note: this.scaleMap[root],
            accidental: parts.accidental,
        };
    }
    selectNote(note) {
        note = note.toLowerCase();
        const parts = this.music.getNoteParts(note);
        const scaleNote = this.scaleMap[parts.root];
        const modparts = this.music.getNoteParts(scaleNote);
        if (scaleNote === note) {
            return {
                note: scaleNote,
                accidental: parts.accidental,
                change: false,
            };
        }
        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];
        if (valueNote != null) {
            return {
                note: valueNote,
                accidental: this.music.getNoteParts(valueNote).accidental,
                change: false,
            };
        }
        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];
        if (originalValueNote != null) {
            this.scaleMap[modparts.root] = originalValueNote;
            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];
            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;
            return {
                note: originalValueNote,
                accidental: this.music.getNoteParts(originalValueNote).accidental,
                change: true,
            };
        }
        if (modparts.root === note) {
            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;
            this.scaleMap[modparts.root] = modparts.root;
            return {
                note: modparts.root,
                accidental: undefined,
                change: true,
            };
        }
        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
        this.scaleMapByValue[this.music.getNoteValue(note)] = note;
        delete this.scaleMap[modparts.root];
        this.scaleMap[modparts.root] = note;
        return {
            note,
            accidental: parts.accidental,
            change: true,
        };
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/keysignature.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/keysignature.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeySignature: () => (/* binding */ KeySignature)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




class KeySignature extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
    constructor(keySpec, cancelKeySpec, alterKeySpec) {
        super();
        this.accList = [];
        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);
        this.setPosition(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.BEGIN);
        this.glyphFontScale = 38;
        this.glyphs = [];
        this.xPositions = [];
        this.paddingForced = false;
    }
    static get CATEGORY() {
        return "KeySignature";
    }
    convertToGlyph(acc, nextAcc) {
        const accGlyphData = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.accidentalCodes(acc.type);
        const glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(accGlyphData.code, this.glyphFontScale);
        let extraWidth = 1;
        if (acc.type === 'n' && nextAcc) {
            const spacing = KeySignature.accidentalSpacing[nextAcc.type];
            if (spacing) {
                const isAbove = nextAcc.line >= acc.line;
                extraWidth = isAbove ? spacing.above : spacing.below;
            }
        }
        this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);
        this.glyphs.push(glyph);
        const xPosition = this.xPositions[this.xPositions.length - 1];
        const glyphWidth = glyph.getMetrics().width + extraWidth;
        this.xPositions.push(xPosition + glyphWidth);
        this.width += glyphWidth;
    }
    cancelKey(spec) {
        this.formatted = false;
        this.cancelKeySpec = spec;
        return this;
    }
    convertToCancelAccList(spec) {
        const cancel_accList = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.keySignature(spec);
        const different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;
        const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;
        if (naturals < 1)
            return undefined;
        const cancelled = [];
        for (let i = 0; i < naturals; i++) {
            let index = i;
            if (!different_types) {
                index = cancel_accList.length - naturals + i;
            }
            const acc = cancel_accList[index];
            cancelled.push({ type: 'n', line: acc.line });
        }
        this.accList = cancelled.concat(this.accList);
        return {
            accList: cancelled,
            type: cancel_accList[0].type,
        };
    }
    addToStave(stave) {
        this.paddingForced = true;
        stave.addModifier(this);
        return this;
    }
    convertAccLines(clef, type, accList = this.accList) {
        let offset = 0.0;
        let customLines;
        switch (clef) {
            case 'soprano':
                if (type === '#')
                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];
                else
                    offset = -1;
                break;
            case 'mezzo-soprano':
                if (type === 'b')
                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];
                else
                    offset = 1.5;
                break;
            case 'alto':
                offset = 0.5;
                break;
            case 'tenor':
                if (type === '#')
                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];
                else
                    offset = -0.5;
                break;
            case 'baritone-f':
            case 'baritone-c':
                if (type === 'b')
                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];
                else
                    offset = 2;
                break;
            case 'bass':
            case 'french':
                offset = 1;
                break;
            default:
                break;
        }
        let i;
        if (typeof customLines !== 'undefined') {
            for (i = 0; i < accList.length; ++i) {
                accList[i].line = customLines[i];
            }
        }
        else if (offset !== 0) {
            for (i = 0; i < accList.length; ++i) {
                accList[i].line += offset;
            }
        }
    }
    getPadding(index) {
        if (!this.formatted)
            this.format();
        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;
    }
    getWidth() {
        if (!this.formatted)
            this.format();
        return this.width;
    }
    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {
        this.formatted = false;
        this.keySpec = keySpec;
        this.cancelKeySpec = cancelKeySpec;
        this.alterKeySpec = alterKeySpec;
        return this;
    }
    alterKey(alterKeySpec) {
        this.formatted = false;
        this.alterKeySpec = alterKeySpec;
        return this;
    }
    convertToAlterAccList(alterKeySpec) {
        const max = Math.min(alterKeySpec.length, this.accList.length);
        for (let i = 0; i < max; ++i) {
            if (alterKeySpec[i]) {
                this.accList[i].type = alterKeySpec[i];
            }
        }
    }
    format() {
        const stave = this.checkStave();
        this.width = 0;
        this.glyphs = [];
        this.xPositions = [0];
        this.accList = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.keySignature((0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.keySpec));
        const accList = this.accList;
        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;
        let cancelAccList;
        if (this.cancelKeySpec) {
            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);
        }
        if (this.alterKeySpec) {
            this.convertToAlterAccList(this.alterKeySpec);
        }
        if (this.accList.length > 0) {
            const clef = (this.position === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();
            if (cancelAccList) {
                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);
            }
            this.convertAccLines(clef, firstAccidentalType, accList);
            for (let i = 0; i < this.accList.length; ++i) {
                this.convertToGlyph(this.accList[i], this.accList[i + 1]);
            }
        }
        this.formatted = true;
    }
    draw() {
        const stave = this.checkStave();
        const ctx = stave.checkContext();
        if (!this.formatted)
            this.format();
        this.setRendered();
        ctx.openGroup('keysignature', this.getAttribute('id'));
        for (let i = 0; i < this.glyphs.length; i++) {
            const glyph = this.glyphs[i];
            const x = this.x + this.xPositions[i];
            glyph.setStave(stave);
            glyph.setContext(ctx);
            glyph.renderToStave(x);
        }
        ctx.closeGroup();
    }
}
KeySignature.accidentalSpacing = {
    '#': {
        above: 6,
        below: 4,
    },
    b: {
        above: 4,
        below: 7,
    },
    n: {
        above: 4,
        below: 1,
    },
    '##': {
        above: 6,
        below: 4,
    },
    bb: {
        above: 4,
        below: 7,
    },
    db: {
        above: 4,
        below: 7,
    },
    d: {
        above: 4,
        below: 7,
    },
    bbs: {
        above: 4,
        below: 7,
    },
    '++': {
        above: 6,
        below: 4,
    },
    '+': {
        above: 6,
        below: 4,
    },
    '+-': {
        above: 6,
        below: 4,
    },
    '++-': {
        above: 6,
        below: 4,
    },
    bs: {
        above: 4,
        below: 10,
    },
    bss: {
        above: 4,
        below: 10,
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/keysignote.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/keysignote.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeySigNote: () => (/* binding */ KeySigNote)
/* harmony export */ });
/* harmony import */ var _keysignature_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keysignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignature.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");


class KeySigNote extends _note_js__WEBPACK_IMPORTED_MODULE_1__.Note {
    constructor(keySpec, cancelKeySpec, alterKeySpec) {
        super({ duration: 'b' });
        this.keySignature = new _keysignature_js__WEBPACK_IMPORTED_MODULE_0__.KeySignature(keySpec, cancelKeySpec, alterKeySpec);
        this.ignore_ticks = true;
    }
    static get CATEGORY() {
        return "KeySigNote";
    }
    addToModifierContext(mc) {
        return this;
    }
    preFormat() {
        this.preFormatted = true;
        this.keySignature.setStave(this.checkStave());
        this.setWidth(this.keySignature.getWidth());
        return this;
    }
    draw() {
        const ctx = this.checkStave().checkContext();
        this.setRendered();
        this.keySignature.setX(this.getAbsoluteX());
        this.keySignature.setContext(ctx);
        this.keySignature.draw();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/modifier.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Modifier: () => (/* binding */ Modifier),
/* harmony export */   ModifierPosition: () => (/* binding */ ModifierPosition)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


var ModifierPosition;
(function (ModifierPosition) {
    ModifierPosition[ModifierPosition["CENTER"] = 0] = "CENTER";
    ModifierPosition[ModifierPosition["LEFT"] = 1] = "LEFT";
    ModifierPosition[ModifierPosition["RIGHT"] = 2] = "RIGHT";
    ModifierPosition[ModifierPosition["ABOVE"] = 3] = "ABOVE";
    ModifierPosition[ModifierPosition["BELOW"] = 4] = "BELOW";
})(ModifierPosition || (ModifierPosition = {}));
class Modifier extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor() {
        super();
        this.width = 0;
        this.text_line = 0;
        this.position = Modifier.Position.LEFT;
        this.x_shift = 0;
        this.y_shift = 0;
        this.spacingFromNextModifier = 0;
    }
    static get CATEGORY() {
        return "Modifier";
    }
    static get Position() {
        return ModifierPosition;
    }
    static get PositionString() {
        return {
            center: ModifierPosition.CENTER,
            above: ModifierPosition.ABOVE,
            below: ModifierPosition.BELOW,
            left: ModifierPosition.LEFT,
            right: ModifierPosition.RIGHT,
        };
    }
    reset() {
    }
    getWidth() {
        return this.width;
    }
    setWidth(width) {
        this.width = width;
        return this;
    }
    getNote() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(this.note, 'NoNote', 'Modifier has no note.');
    }
    checkAttachedNote() {
        const category = this.getCategory();
        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(this.index, 'NoIndex', `Can't draw ${category} without an index.`);
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(this.note, 'NoNote', `Can't draw ${category} without a note.`);
    }
    setNote(note) {
        this.note = note;
        return this;
    }
    getIndex() {
        return this.index;
    }
    checkIndex() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(this.index, 'NoIndex', 'Modifier has an invalid index.');
    }
    setIndex(index) {
        this.index = index;
        return this;
    }
    getModifierContext() {
        return this.modifierContext;
    }
    checkModifierContext() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');
    }
    setModifierContext(c) {
        this.modifierContext = c;
        return this;
    }
    getPosition() {
        return this.position;
    }
    setPosition(position) {
        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;
        this.reset();
        return this;
    }
    setTextLine(line) {
        this.text_line = line;
        return this;
    }
    setYShift(y) {
        this.y_shift = y;
        return this;
    }
    setSpacingFromNextModifier(x) {
        this.spacingFromNextModifier = x;
    }
    getSpacingFromNextModifier() {
        return this.spacingFromNextModifier;
    }
    setXShift(x) {
        this.x_shift = 0;
        if (this.position === Modifier.Position.LEFT) {
            this.x_shift -= x;
        }
        else {
            this.x_shift += x;
        }
        return this;
    }
    getXShift() {
        return this.x_shift;
    }
    draw() {
        this.checkContext();
        throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');
    }
    alignSubNotesWithNote(subNotes, note) {
        const tickContext = note.getTickContext();
        const metrics = tickContext.getMetrics();
        const stave = note.getStave();
        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();
        subNotes.forEach((subNote) => {
            const subTickContext = subNote.getTickContext();
            if (stave)
                subNote.setStave(stave);
            subTickContext.setXOffset(subNoteXOffset);
        });
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/modifiercontext.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/modifiercontext.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModifierContext: () => (/* binding */ ModifierContext)
/* harmony export */ });
/* harmony import */ var _accidental_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accidental.js */ "./node_modules/vexflow_smoosic/build/esm/src/accidental.js");
/* harmony import */ var _annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotation.js */ "./node_modules/vexflow_smoosic/build/esm/src/annotation.js");
/* harmony import */ var _articulation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./articulation.js */ "./node_modules/vexflow_smoosic/build/esm/src/articulation.js");
/* harmony import */ var _bend_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bend.js */ "./node_modules/vexflow_smoosic/build/esm/src/bend.js");
/* harmony import */ var _chordsymbol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chordsymbol.js */ "./node_modules/vexflow_smoosic/build/esm/src/chordsymbol.js");
/* harmony import */ var _dot_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dot.js */ "./node_modules/vexflow_smoosic/build/esm/src/dot.js");
/* harmony import */ var _frethandfinger_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./frethandfinger.js */ "./node_modules/vexflow_smoosic/build/esm/src/frethandfinger.js");
/* harmony import */ var _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gracenotegroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenotegroup.js");
/* harmony import */ var _notesubgroup_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./notesubgroup.js */ "./node_modules/vexflow_smoosic/build/esm/src/notesubgroup.js");
/* harmony import */ var _ornament_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ornament.js */ "./node_modules/vexflow_smoosic/build/esm/src/ornament.js");
/* harmony import */ var _parenthesis_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parenthesis.js */ "./node_modules/vexflow_smoosic/build/esm/src/parenthesis.js");
/* harmony import */ var _stavenote_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stavenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js");
/* harmony import */ var _stringnumber_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./stringnumber.js */ "./node_modules/vexflow_smoosic/build/esm/src/stringnumber.js");
/* harmony import */ var _strokes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./strokes.js */ "./node_modules/vexflow_smoosic/build/esm/src/strokes.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _vibrato_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./vibrato.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibrato.js");
















function L(...args) {
    if (ModifierContext.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.log)('Vex.Flow.ModifierContext', args);
}
class ModifierContext {
    constructor() {
        this.state = {
            left_shift: 0,
            right_shift: 0,
            text_line: 0,
            top_text_line: 0,
        };
        this.members = {};
        this.preFormatted = false;
        this.postFormatted = false;
        this.formatted = false;
        this.width = 0;
        this.spacing = 0;
    }
    addModifier(member) {
        L('addModifier is deprecated, use addMember instead.');
        return this.addMember(member);
    }
    addMember(member) {
        const category = member.getCategory();
        if (!this.members[category]) {
            this.members[category] = [];
        }
        this.members[category].push(member);
        member.setModifierContext(this);
        this.preFormatted = false;
        return this;
    }
    getModifiers(category) {
        L('getModifiers is deprecated, use getMembers instead.');
        return this.getMembers(category);
    }
    getMembers(category) {
        var _a;
        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];
    }
    getWidth() {
        return this.width;
    }
    getLeftShift() {
        return this.state.left_shift;
    }
    getRightShift() {
        return this.state.right_shift;
    }
    getState() {
        return this.state;
    }
    getMetrics() {
        if (!this.formatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_14__.RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');
        }
        return {
            width: this.state.left_shift + this.state.right_shift + this.spacing,
            spacing: this.spacing,
        };
    }
    preFormat() {
        if (this.preFormatted)
            return;
        L('Preformatting ModifierContext');
        const state = this.state;
        const members = this.members;
        _stavenote_js__WEBPACK_IMPORTED_MODULE_11__.StaveNote.format(members["StaveNote"], state);
        _parenthesis_js__WEBPACK_IMPORTED_MODULE_10__.Parenthesis.format(members["Parenthesis"], state);
        _dot_js__WEBPACK_IMPORTED_MODULE_5__.Dot.format(members["Dot"], state);
        _frethandfinger_js__WEBPACK_IMPORTED_MODULE_6__.FretHandFinger.format(members["FretHandFinger"], state);
        _accidental_js__WEBPACK_IMPORTED_MODULE_0__.Accidental.format(members["Accidental"], state);
        _strokes_js__WEBPACK_IMPORTED_MODULE_13__.Stroke.format(members["Stroke"], state);
        _gracenotegroup_js__WEBPACK_IMPORTED_MODULE_7__.GraceNoteGroup.format(members["GraceNoteGroup"], state);
        _notesubgroup_js__WEBPACK_IMPORTED_MODULE_8__.NoteSubGroup.format(members["NoteSubGroup"], state);
        _stringnumber_js__WEBPACK_IMPORTED_MODULE_12__.StringNumber.format(members["StringNumber"], state);
        _articulation_js__WEBPACK_IMPORTED_MODULE_2__.Articulation.format(members["Articulation"], state);
        _ornament_js__WEBPACK_IMPORTED_MODULE_9__.Ornament.format(members["Ornament"], state);
        _annotation_js__WEBPACK_IMPORTED_MODULE_1__.Annotation.format(members["Annotation"], state);
        _chordsymbol_js__WEBPACK_IMPORTED_MODULE_4__.ChordSymbol.format(members["ChordSymbol"], state);
        _bend_js__WEBPACK_IMPORTED_MODULE_3__.Bend.format(members["Bend"], state);
        _vibrato_js__WEBPACK_IMPORTED_MODULE_15__.Vibrato.format(members["Vibrato"], state, this);
        this.width = state.left_shift + state.right_shift;
        this.preFormatted = true;
    }
    postFormat() {
        if (this.postFormatted)
            return;
        L('Postformatting ModifierContext');
        _stavenote_js__WEBPACK_IMPORTED_MODULE_11__.StaveNote.postFormat(this.getMembers("StaveNote"));
    }
}
ModifierContext.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/multimeasurerest.js":
/*!************************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/multimeasurerest.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiMeasureRest: () => (/* binding */ MultiMeasureRest)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _notehead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notehead.js */ "./node_modules/vexflow_smoosic/build/esm/src/notehead.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _timesignature_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./timesignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignature.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");








let semibreve_rest;
function get_semibreve_rest() {
    if (!semibreve_rest) {
        const noteHead = new _notehead_js__WEBPACK_IMPORTED_MODULE_2__.NoteHead({ duration: 'w', note_type: 'r' });
        semibreve_rest = {
            glyph_font_scale: noteHead.render_options.glyph_font_scale,
            glyph_code: noteHead.glyph_code,
            width: noteHead.getWidth(),
        };
    }
    return semibreve_rest;
}
class MultiMeasureRest extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(number_of_measures, options) {
        super();
        this.xs = { left: NaN, right: NaN };
        this.hasPaddingLeft = false;
        this.hasPaddingRight = false;
        this.hasLineThickness = false;
        this.hasSymbolSpacing = false;
        this.number_of_measures = number_of_measures;
        this.hasPaddingLeft = typeof options.padding_left === 'number';
        this.hasPaddingRight = typeof options.padding_right === 'number';
        this.hasLineThickness = typeof options.line_thickness === 'number';
        this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont();
        this.render_options = Object.assign({ use_symbols: false, show_number: true, number_line: -0.5, number_glyph_point: musicFont.lookupMetric('digits.point'), line: 2, spacing_between_lines_px: _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.STAVE_LINE_DISTANCE, serif_thickness: 2, semibreve_rest_glyph_scale: _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.NOTATION_FONT_SCALE, padding_left: 0, padding_right: 0, line_thickness: 5, symbol_spacing: 0 }, options);
        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);
        this.render_options.number_line += fontLineShift;
    }
    static get CATEGORY() {
        return "MultiMeasureRest";
    }
    getXs() {
        return this.xs;
    }
    setStave(stave) {
        this.stave = stave;
        return this;
    }
    getStave() {
        return this.stave;
    }
    checkStave() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.defined)(this.stave, 'NoStave', 'No stave attached to instance.');
    }
    drawLine(stave, ctx, left, right, spacingBetweenLines) {
        const options = this.render_options;
        const y = stave.getYForLine(options.line);
        const padding = (right - left) * 0.1;
        left += padding;
        right -= padding;
        let lineThicknessHalf;
        if (this.hasLineThickness) {
            lineThicknessHalf = options.line_thickness * 0.5;
        }
        else {
            lineThicknessHalf = spacingBetweenLines * 0.25;
        }
        const serifThickness = options.serif_thickness;
        const top = y - spacingBetweenLines;
        const bot = y + spacingBetweenLines;
        const leftIndented = left + serifThickness;
        const rightIndented = right - serifThickness;
        const lineTop = y - lineThicknessHalf;
        const lineBottom = y + lineThicknessHalf;
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(left, top);
        ctx.lineTo(leftIndented, top);
        ctx.lineTo(leftIndented, lineTop);
        ctx.lineTo(rightIndented, lineTop);
        ctx.lineTo(rightIndented, top);
        ctx.lineTo(right, top);
        ctx.lineTo(right, bot);
        ctx.lineTo(rightIndented, bot);
        ctx.lineTo(rightIndented, lineBottom);
        ctx.lineTo(leftIndented, lineBottom);
        ctx.lineTo(leftIndented, bot);
        ctx.lineTo(left, bot);
        ctx.closePath();
        ctx.fill();
    }
    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {
        const n4 = Math.floor(this.number_of_measures / 4);
        const n = this.number_of_measures % 4;
        const n2 = Math.floor(n / 2);
        const n1 = n % 2;
        const options = this.render_options;
        semibreve_rest = undefined;
        const rest = get_semibreve_rest();
        const rest_scale = options.semibreve_rest_glyph_scale;
        const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);
        const glyphs = {
            2: {
                width: rest_width * 0.5,
                height: spacingBetweenLines,
            },
            1: {
                width: rest_width,
            },
        };
        const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;
        const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;
        let x = left + (right - left) * 0.5 - width * 0.5;
        const line = options.line;
        const yTop = stave.getYForLine(line - 1);
        const yMiddle = stave.getYForLine(line);
        const yBottom = stave.getYForLine(line + 1);
        ctx.save();
        ctx.setStrokeStyle('none');
        ctx.setLineWidth(0);
        for (let i = 0; i < n4; ++i) {
            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);
            ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);
            x += glyphs[2].width + spacing;
        }
        for (let i = 0; i < n2; ++i) {
            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);
            x += glyphs[2].width + spacing;
        }
        for (let i = 0; i < n1; ++i) {
            _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);
            x += glyphs[1].width + spacing;
        }
        ctx.restore();
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        const stave = this.checkStave();
        let left = stave.getNoteStartX();
        let right = stave.getNoteEndX();
        const begModifiers = stave.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_3__.StaveModifierPosition.BEGIN);
        if (begModifiers.length === 1 && (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_6__.isBarline)(begModifiers[0])) {
            left -= begModifiers[0].getWidth();
        }
        const options = this.render_options;
        if (this.hasPaddingLeft) {
            left = stave.getX() + options.padding_left;
        }
        if (this.hasPaddingRight) {
            right = stave.getX() + stave.getWidth() - options.padding_right;
        }
        this.xs.left = left;
        this.xs.right = right;
        const spacingBetweenLines = options.spacing_between_lines_px;
        if (options.use_symbols) {
            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);
        }
        else {
            this.drawLine(stave, ctx, left, right, spacingBetweenLines);
        }
        if (options.show_number) {
            const timeSpec = '/' + this.number_of_measures;
            const timeSig = new _timesignature_js__WEBPACK_IMPORTED_MODULE_5__.TimeSignature(timeSpec, 0, false);
            timeSig.point = options.number_glyph_point;
            timeSig.setTimeSig(timeSpec);
            timeSig.setStave(stave);
            timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);
            timeSig.bottomLine = options.number_line;
            timeSig.setContext(ctx).draw();
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/music.js":
/*!*************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/music.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Music: () => (/* binding */ Music)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");

class Music {
    static get NUM_TONES() {
        return this.canonical_notes.length;
    }
    static get roots() {
        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];
    }
    static get root_values() {
        return [0, 2, 4, 5, 7, 9, 11];
    }
    static get root_indices() {
        return {
            c: 0,
            d: 1,
            e: 2,
            f: 3,
            g: 4,
            a: 5,
            b: 6,
        };
    }
    static get canonical_notes() {
        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];
    }
    static get diatonic_intervals() {
        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];
    }
    static get diatonic_accidentals() {
        return {
            unison: { note: 0, accidental: 0 },
            m2: { note: 1, accidental: -1 },
            M2: { note: 1, accidental: 0 },
            m3: { note: 2, accidental: -1 },
            M3: { note: 2, accidental: 0 },
            p4: { note: 3, accidental: 0 },
            dim5: { note: 4, accidental: -1 },
            p5: { note: 4, accidental: 0 },
            m6: { note: 5, accidental: -1 },
            M6: { note: 5, accidental: 0 },
            b7: { note: 6, accidental: -1 },
            M7: { note: 6, accidental: 0 },
            octave: { note: 7, accidental: 0 },
        };
    }
    static get intervals() {
        return {
            u: 0,
            unison: 0,
            m2: 1,
            b2: 1,
            min2: 1,
            S: 1,
            H: 1,
            2: 2,
            M2: 2,
            maj2: 2,
            T: 2,
            W: 2,
            m3: 3,
            b3: 3,
            min3: 3,
            M3: 4,
            3: 4,
            maj3: 4,
            4: 5,
            p4: 5,
            '#4': 6,
            b5: 6,
            aug4: 6,
            dim5: 6,
            5: 7,
            p5: 7,
            '#5': 8,
            b6: 8,
            aug5: 8,
            6: 9,
            M6: 9,
            maj6: 9,
            b7: 10,
            m7: 10,
            min7: 10,
            dom7: 10,
            M7: 11,
            maj7: 11,
            8: 12,
            octave: 12,
        };
    }
    static get scales() {
        return {
            major: [2, 2, 1, 2, 2, 2, 1],
            minor: [2, 1, 2, 2, 1, 2, 2],
            ionian: [2, 2, 1, 2, 2, 2, 1],
            dorian: [2, 1, 2, 2, 2, 1, 2],
            phyrgian: [1, 2, 2, 2, 1, 2, 2],
            lydian: [2, 2, 2, 1, 2, 2, 1],
            mixolydian: [2, 2, 1, 2, 2, 1, 2],
            aeolian: [2, 1, 2, 2, 1, 2, 2],
            locrian: [1, 2, 2, 1, 2, 2, 2],
        };
    }
    static get scaleTypes() {
        return {
            M: Music.scales.major,
            m: Music.scales.minor,
        };
    }
    static get accidentals() {
        return ['bb', 'b', 'n', '#', '##'];
    }
    static get noteValues() {
        return {
            c: { root_index: 0, int_val: 0 },
            cn: { root_index: 0, int_val: 0 },
            'c#': { root_index: 0, int_val: 1 },
            'c##': { root_index: 0, int_val: 2 },
            cb: { root_index: 0, int_val: 11 },
            cbb: { root_index: 0, int_val: 10 },
            d: { root_index: 1, int_val: 2 },
            dn: { root_index: 1, int_val: 2 },
            'd#': { root_index: 1, int_val: 3 },
            'd##': { root_index: 1, int_val: 4 },
            db: { root_index: 1, int_val: 1 },
            dbb: { root_index: 1, int_val: 0 },
            e: { root_index: 2, int_val: 4 },
            en: { root_index: 2, int_val: 4 },
            'e#': { root_index: 2, int_val: 5 },
            'e##': { root_index: 2, int_val: 6 },
            eb: { root_index: 2, int_val: 3 },
            ebb: { root_index: 2, int_val: 2 },
            f: { root_index: 3, int_val: 5 },
            fn: { root_index: 3, int_val: 5 },
            'f#': { root_index: 3, int_val: 6 },
            'f##': { root_index: 3, int_val: 7 },
            fb: { root_index: 3, int_val: 4 },
            fbb: { root_index: 3, int_val: 3 },
            g: { root_index: 4, int_val: 7 },
            gn: { root_index: 4, int_val: 7 },
            'g#': { root_index: 4, int_val: 8 },
            'g##': { root_index: 4, int_val: 9 },
            gb: { root_index: 4, int_val: 6 },
            gbb: { root_index: 4, int_val: 5 },
            a: { root_index: 5, int_val: 9 },
            an: { root_index: 5, int_val: 9 },
            'a#': { root_index: 5, int_val: 10 },
            'a##': { root_index: 5, int_val: 11 },
            ab: { root_index: 5, int_val: 8 },
            abb: { root_index: 5, int_val: 7 },
            b: { root_index: 6, int_val: 11 },
            bn: { root_index: 6, int_val: 11 },
            'b#': { root_index: 6, int_val: 0 },
            'b##': { root_index: 6, int_val: 1 },
            bb: { root_index: 6, int_val: 10 },
            bbb: { root_index: 6, int_val: 9 },
        };
    }
    isValidNoteValue(note) {
        return note >= 0 && note < Music.canonical_notes.length;
    }
    isValidIntervalValue(interval) {
        return interval >= 0 && interval < Music.diatonic_intervals.length;
    }
    getNoteParts(noteString) {
        if (!noteString || noteString.length < 1) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', 'Invalid note name: ' + noteString);
        }
        if (noteString.length > 3) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', 'Invalid note name: ' + noteString);
        }
        const note = noteString.toLowerCase();
        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;
        const match = regex.exec(note);
        if (match !== null) {
            const root = match[1];
            const accidental = match[2];
            return {
                root,
                accidental,
            };
        }
        else {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', 'Invalid note name: ' + noteString);
        }
    }
    getKeyParts(keyString) {
        if (!keyString || keyString.length < 1) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', 'Invalid key: ' + keyString);
        }
        const key = keyString.toLowerCase();
        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;
        const match = regex.exec(key);
        if (match !== null) {
            const root = match[1];
            const accidental = match[2];
            let type = match[3];
            if (!type)
                type = 'M';
            return {
                root,
                accidental,
                type,
            };
        }
        else {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid key: ${keyString}`);
        }
    }
    getNoteValue(noteString) {
        const value = Music.noteValues[noteString];
        if (value === undefined) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid note name: ${noteString}`);
        }
        return value.int_val;
    }
    getIntervalValue(intervalString) {
        const value = Music.intervals[intervalString];
        if (value === undefined) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);
        }
        return value;
    }
    getCanonicalNoteName(noteValue) {
        if (!this.isValidNoteValue(noteValue)) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);
        }
        return Music.canonical_notes[noteValue];
    }
    getCanonicalIntervalName(intervalValue) {
        if (!this.isValidIntervalValue(intervalValue)) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);
        }
        return Music.diatonic_intervals[intervalValue];
    }
    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {
        if (direction !== 1 && direction !== -1) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid direction: ${direction}`);
        }
        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;
        if (sum < 0)
            sum += Music.NUM_TONES;
        return sum;
    }
    getRelativeNoteName(root, noteValue) {
        const parts = this.getNoteParts(root);
        const rootValue = this.getNoteValue(parts.root);
        let interval = noteValue - rootValue;
        if (Math.abs(interval) > Music.NUM_TONES - 3) {
            let multiplier = 1;
            if (interval > 0)
                multiplier = -1;
            const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;
            if (Math.abs(reverse_interval) > 2) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);
            }
            else {
                interval = reverse_interval;
            }
        }
        if (Math.abs(interval) > 2) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);
        }
        let relativeNoteName = parts.root;
        if (interval > 0) {
            for (let i = 1; i <= interval; ++i) {
                relativeNoteName += '#';
            }
        }
        else if (interval < 0) {
            for (let i = -1; i >= interval; --i) {
                relativeNoteName += 'b';
            }
        }
        return relativeNoteName;
    }
    getScaleTones(key, intervals) {
        const tones = [key];
        let nextNote = key;
        for (let i = 0; i < intervals.length; i++) {
            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);
            if (nextNote !== key)
                tones.push(nextNote);
        }
        return tones;
    }
    getIntervalBetween(note1, note2, direction = 1) {
        if (direction !== 1 && direction !== -1) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid direction: ${direction}`);
        }
        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);
        }
        let difference = direction === 1 ? note2 - note1 : note1 - note2;
        if (difference < 0)
            difference += Music.NUM_TONES;
        return difference;
    }
    createScaleMap(keySignature) {
        const keySigParts = this.getKeyParts(keySignature);
        if (!keySigParts.type)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', 'Unsupported key type: undefined');
        const scaleName = Music.scaleTypes[keySigParts.type];
        let keySigString = keySigParts.root;
        if (keySigParts.accidental)
            keySigString += keySigParts.accidental;
        if (!scaleName)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);
        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);
        const noteLocation = Music.root_indices[keySigParts.root];
        const scaleMap = {};
        for (let i = 0; i < Music.roots.length; ++i) {
            const index = (noteLocation + i) % Music.roots.length;
            const rootName = Music.roots[index];
            let noteName = this.getRelativeNoteName(rootName, scale[i]);
            if (noteName.length === 1) {
                noteName += 'n';
            }
            scaleMap[rootName] = noteName;
        }
        return scaleMap;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/note.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/note.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Note: () => (/* binding */ Note)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _rendercontext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rendercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _tickable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tickable.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickable.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class Note extends _tickable_js__WEBPACK_IMPORTED_MODULE_3__.Tickable {
    constructor(noteStruct) {
        super();
        if (!noteStruct) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');
        }
        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);
        if (!parsedNoteStruct) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);
        }
        this.keys = noteStruct.keys || [];
        this.keyProps = [];
        this.duration = parsedNoteStruct.duration;
        this.noteType = parsedNoteStruct.type;
        this.customTypes = parsedNoteStruct.customTypes;
        if (noteStruct.duration_override) {
            this.setDuration(noteStruct.duration_override);
        }
        else {
            this.setIntrinsicTicks(parsedNoteStruct.ticks);
        }
        this.modifiers = [];
        this.glyph = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.getGlyphProps(this.duration, this.noteType);
        this.customGlyphs = this.customTypes.map((t) => _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.getGlyphProps(this.duration, t));
        this.playNote = undefined;
        this.ignore_ticks = false;
        this.width = 0;
        this.leftDisplacedHeadPx = 0;
        this.rightDisplacedHeadPx = 0;
        this.x_shift = 0;
        this.ys = [];
        if (noteStruct.align_center) {
            this.setCenterAlignment(noteStruct.align_center);
        }
        this.render_options = {
            annotation_spacing: 5,
            glyph_font_scale: 1,
            stroke_px: 1,
            scale: 1,
            font: '',
            y_shift: 0,
        };
    }
    static get CATEGORY() {
        return "Note";
    }
    static plotMetrics(ctx, note, yPos) {
        const metrics = note.getMetrics();
        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;
        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;
        const xAbs = note.getAbsoluteX();
        const xPost1 = note.getAbsoluteX() + metrics.notePx;
        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;
        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;
        const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);
        const xWidth = xEnd - xStart;
        ctx.save();
        ctx.setFont(_font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF, 8);
        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);
        const y = yPos + 7;
        function stroke(x1, x2, color, yy = y) {
            ctx.beginPath();
            ctx.setStrokeStyle(color);
            ctx.setFillStyle(color);
            ctx.setLineWidth(3);
            ctx.moveTo(x1 + note.getXShift(), yy);
            ctx.lineTo(x2 + note.getXShift(), yy);
            ctx.stroke();
        }
        stroke(xStart, xPre1, 'red');
        stroke(xPre1, xAbs, '#999');
        stroke(xAbs, xPost1, 'green');
        stroke(xPost1, xPost2, '#999');
        stroke(xPost2, xEnd, 'red');
        stroke(xEnd, xFreedomRight, '#DD0');
        stroke(xStart - note.getXShift(), xStart, '#BBB');
        (0,_rendercontext_js__WEBPACK_IMPORTED_MODULE_1__.drawDot)(ctx, xAbs + note.getXShift(), y, 'blue');
        const formatterMetrics = note.getFormatterMetrics();
        if (formatterMetrics.iterations > 0) {
            const spaceDeviation = formatterMetrics.space.deviation;
            const prefix = spaceDeviation >= 0 ? '+' : '';
            ctx.setFillStyle('red');
            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);
        }
        ctx.restore();
    }
    static parseDuration(durationString) {
        if (!durationString) {
            return undefined;
        }
        const regexp = /(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/;
        const result = regexp.exec(durationString);
        if (!result) {
            return undefined;
        }
        const duration = result[1];
        const dots = result[2].length;
        const type = result[3] || 'n';
        return { duration, dots, type };
    }
    static parseNoteStruct(noteStruct) {
        const durationProps = Note.parseDuration(noteStruct.duration);
        if (!durationProps) {
            return undefined;
        }
        let type = noteStruct.type;
        if (type && !_tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.validTypes[type]) {
            return undefined;
        }
        const customTypes = [];
        if (!type) {
            type = durationProps.type || 'n';
            if (noteStruct.keys !== undefined) {
                noteStruct.keys.forEach((k, i) => {
                    const result = k.split('/');
                    customTypes[i] = (result && result.length === 3 ? result[2] : type);
                });
            }
        }
        let ticks = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.durationToTicks(durationProps.duration);
        if (!ticks) {
            return undefined;
        }
        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;
        if (typeof dots !== 'number') {
            return undefined;
        }
        let currentTicks = ticks;
        for (let i = 0; i < dots; i++) {
            if (currentTicks <= 1)
                return undefined;
            currentTicks = currentTicks / 2;
            ticks += currentTicks;
        }
        return {
            duration: durationProps.duration,
            type,
            customTypes,
            dots,
            ticks,
        };
    }
    getPlayNote() {
        return this.playNote;
    }
    setPlayNote(note) {
        this.playNote = note;
        return this;
    }
    isRest() {
        return false;
    }
    addStroke(index, stroke) {
        stroke.setNote(this);
        stroke.setIndex(index);
        this.modifiers.push(stroke);
        this.preFormatted = false;
        return this;
    }
    getStave() {
        return this.stave;
    }
    checkStave() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.defined)(this.stave, 'NoStave', 'No stave attached to instance.');
    }
    setStave(stave) {
        this.stave = stave;
        this.setYs([stave.getYForLine(0)]);
        this.setContext(this.stave.getContext());
        return this;
    }
    getLeftDisplacedHeadPx() {
        return this.leftDisplacedHeadPx;
    }
    getRightDisplacedHeadPx() {
        return this.rightDisplacedHeadPx;
    }
    setLeftDisplacedHeadPx(x) {
        this.leftDisplacedHeadPx = x;
        return this;
    }
    setRightDisplacedHeadPx(x) {
        this.rightDisplacedHeadPx = x;
        return this;
    }
    shouldIgnoreTicks() {
        return this.ignore_ticks;
    }
    getLineNumber(isTopNote) {
        return 0;
    }
    getLineForRest() {
        return 0;
    }
    getGlyph() {
        return this.glyph;
    }
    getGlyphWidth() {
        if (this.glyph) {
            if (this.glyph.getMetrics) {
                return this.glyph.getMetrics().width;
            }
            else if (this.glyph.getWidth) {
                return this.glyph.getWidth(this.render_options.glyph_font_scale);
            }
        }
        return 0;
    }
    setYs(ys) {
        this.ys = ys;
        return this;
    }
    getYs() {
        if (this.ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoYValues', 'No Y-values calculated for this note.');
        }
        return this.ys;
    }
    getYForTopText(text_line) {
        return this.checkStave().getYForTopText(text_line);
    }
    getVoice() {
        if (!this.voice)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoVoice', 'Note has no voice.');
        return this.voice;
    }
    setVoice(voice) {
        this.voice = voice;
        this.preFormatted = false;
        return this;
    }
    getTickContext() {
        return this.checkTickContext();
    }
    setTickContext(tc) {
        this.tickContext = tc;
        this.preFormatted = false;
        return this;
    }
    getDuration() {
        return this.duration;
    }
    isDotted() {
        return this.getModifiersByType('Dot').length > 0;
    }
    hasStem() {
        return false;
    }
    getNoteType() {
        return this.noteType;
    }
    getBeam() {
        return this.beam;
    }
    checkBeam() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.defined)(this.beam, 'NoBeam', 'No beam attached to instance');
    }
    hasBeam() {
        return this.beam != undefined;
    }
    setBeam(beam) {
        this.beam = beam;
        return this;
    }
    addModifier(modifier, index = 0) {
        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';
        if (typeof index === 'string') {
            index = parseInt(index);
            console.warn(signature + ' expected a number for `index`, but received a string.');
        }
        if (typeof modifier !== 'object' || typeof index !== 'number') {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');
        }
        modifier.setNote(this);
        modifier.setIndex(index);
        super.addModifier(modifier);
        return this;
    }
    getModifiersByType(type) {
        return this.modifiers.filter((modifier) => modifier.getCategory() === type);
    }
    getModifierStartXY(position, index, options) {
        if (!this.preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
        }
        return {
            x: this.getAbsoluteX(),
            y: this.ys[0],
        };
    }
    getRightParenthesisPx(index) {
        const props = this.getKeyProps()[index];
        return props.displaced ? this.getRightDisplacedHeadPx() : 0;
    }
    getLeftParenthesisPx(index) {
        const props = this.getKeyProps()[index];
        return props.displaced ? this.getLeftDisplacedHeadPx() - this.x_shift : -this.x_shift;
    }
    getFirstDotPx() {
        let px = this.getRightDisplacedHeadPx();
        if (this.checkModifierContext().getMembers('Parenthesis').length !== 0)
            px += _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.default.width');
        return px;
    }
    getMetrics() {
        if (!this.preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('UnformattedNote', "Can't call getMetrics on an unformatted note.");
        }
        const modLeftPx = this.modifierContext ? this.modifierContext.getState().left_shift : 0;
        const modRightPx = this.modifierContext ? this.modifierContext.getState().right_shift : 0;
        const width = this.getWidth();
        const glyphWidth = this.getGlyphWidth();
        const notePx = width -
            modLeftPx -
            modRightPx -
            this.leftDisplacedHeadPx -
            this.rightDisplacedHeadPx;
        return {
            width,
            glyphWidth,
            notePx,
            modLeftPx,
            modRightPx,
            leftDisplacedHeadPx: this.leftDisplacedHeadPx,
            rightDisplacedHeadPx: this.rightDisplacedHeadPx,
            glyphPx: 0,
        };
    }
    getAbsoluteX() {
        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);
        let x = tickContext.getX();
        if (this.stave) {
            x += this.stave.getNoteStartX() + _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('stave.padding');
        }
        if (this.isCenterAligned()) {
            x += this.getCenterXShift();
        }
        return x;
    }
    getStemDirection() {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoStem', 'No stem attached to this note.');
    }
    getStemExtents() {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoStem', 'No stem attached to this note.');
    }
    getTieRightX() {
        let tieStartX = this.getAbsoluteX();
        const note_glyph_width = this.glyph.getWidth();
        tieStartX += note_glyph_width / 2;
        tieStartX += -this.width / 2 + this.width + 2;
        return tieStartX;
    }
    getTieLeftX() {
        let tieEndX = this.getAbsoluteX();
        const note_glyph_width = this.glyph.getWidth();
        tieEndX += note_glyph_width / 2;
        tieEndX -= this.width / 2 + 2;
        return tieEndX;
    }
    getKeys() {
        return this.keys;
    }
    getKeyProps() {
        return this.keyProps;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/notehead.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/notehead.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoteHead: () => (/* binding */ NoteHead)
/* harmony export */ });
/* harmony import */ var _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boundingbox.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");






function L(...args) {
    if (NoteHead.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.log)('Vex.Flow.NoteHead', args);
}
function drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {
    const width = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.SLASH_NOTEHEAD_WIDTH;
    ctx.save();
    ctx.setLineWidth(_tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.STEM_WIDTH);
    let fill = false;
    if (_tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.durationToNumber(duration) > 2) {
        fill = true;
    }
    if (!fill)
        x -= (_tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.STEM_WIDTH / 2) * stem_direction;
    ctx.beginPath();
    ctx.moveTo(x, y + staveSpace);
    ctx.lineTo(x, y + 1);
    ctx.lineTo(x + width, y - staveSpace);
    ctx.lineTo(x + width, y);
    ctx.lineTo(x, y + staveSpace);
    ctx.closePath();
    if (fill) {
        ctx.fill();
    }
    else {
        ctx.stroke();
    }
    if (_tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.durationToFraction(duration).equals(0.5)) {
        const breve_lines = [-3, -1, width + 1, width + 3];
        for (let i = 0; i < breve_lines.length; i++) {
            ctx.beginPath();
            ctx.moveTo(x + breve_lines[i], y - 10);
            ctx.lineTo(x + breve_lines[i], y + 11);
            ctx.stroke();
        }
    }
    ctx.restore();
}
class NoteHead extends _note_js__WEBPACK_IMPORTED_MODULE_2__.Note {
    constructor(noteStruct) {
        super(noteStruct);
        this.custom_glyph = false;
        this.stem_up_x_offset = 0;
        this.stem_down_x_offset = 0;
        this.index = noteStruct.index;
        this.x = noteStruct.x || 0;
        this.y = noteStruct.y || 0;
        if (noteStruct.note_type)
            this.noteType = noteStruct.note_type;
        this.displaced = noteStruct.displaced || false;
        this.stem_direction = noteStruct.stem_direction || _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP;
        this.line = noteStruct.line || 0;
        this.glyph = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.getGlyphProps(this.duration, this.noteType);
        (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);
        if ((this.line > 5 || this.line < 0) && this.glyph.leger_code_head) {
            this.glyph.code_head = this.glyph.leger_code_head;
        }
        this.glyph_code = this.glyph.code_head;
        this.x_shift = noteStruct.x_shift || 0;
        if (noteStruct.custom_glyph_code) {
            this.custom_glyph = true;
            this.glyph_code = noteStruct.custom_glyph_code;
            this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;
            this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;
        }
        this.style = noteStruct.style;
        this.slashed = noteStruct.slashed || false;
        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_scale: noteStruct.glyph_font_scale || _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.NOTATION_FONT_SCALE });
        this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));
    }
    static get CATEGORY() {
        return "NoteHead";
    }
    getWidth() {
        return this.width;
    }
    isDisplaced() {
        return this.displaced === true;
    }
    getGlyph() {
        return this.glyph;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    getY() {
        return this.y;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    getLine() {
        return this.line;
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    getAbsoluteX() {
        const x = !this.preFormatted ? this.x : super.getAbsoluteX();
        const displacementStemAdjustment = _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH / 2;
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont();
        const fontShift = musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;
        const displacedFontShift = musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;
        return (x +
            fontShift +
            (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0));
    }
    getBoundingBox() {
        if (!this.preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
        }
        const spacing = this.checkStave().getSpacingBetweenLines();
        const half_spacing = spacing / 2;
        const min_y = this.y - half_spacing;
        return new _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);
    }
    setStave(stave) {
        const line = this.getLine();
        this.stave = stave;
        if (this.stave) {
            this.setY(this.stave.getYForNote(line));
            this.setContext(this.stave.getContext());
        }
        return this;
    }
    preFormat() {
        if (this.preFormatted)
            return this;
        const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;
        this.setWidth(width);
        this.preFormatted = true;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        let head_x = this.getAbsoluteX();
        if (this.custom_glyph) {
            head_x += this.stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;
        }
        const y = this.y;
        L("Drawing note head '", this.noteType, this.duration, "' at", head_x, y);
        const stem_direction = this.stem_direction;
        const glyph_font_scale = this.render_options.glyph_font_scale;
        if (this.style) {
            this.applyStyle(ctx);
        }
        const categorySuffix = `${this.glyph_code}Stem${stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? 'Up' : 'Down'}`;
        if (this.noteType === 's') {
            const staveSpace = this.checkStave().getSpacingBetweenLines();
            drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);
        }
        else {
            _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {
                category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,
            });
        }
        if (this.style) {
            this.restoreStyle(ctx);
        }
    }
}
NoteHead.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/notesubgroup.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/notesubgroup.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoteSubGroup: () => (/* binding */ NoteSubGroup)
/* harmony export */ });
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _voice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./voice.js */ "./node_modules/vexflow_smoosic/build/esm/src/voice.js");




class NoteSubGroup extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(subNotes) {
        super();
        this.preFormatted = false;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT;
        this.subNotes = subNotes;
        this.subNotes.forEach((subNote) => {
            subNote.setIgnoreTicks(false);
        });
        this.width = 0;
        this.formatter = new _formatter_js__WEBPACK_IMPORTED_MODULE_0__.Formatter();
        this.voice = new _voice_js__WEBPACK_IMPORTED_MODULE_3__.Voice({
            num_beats: 4,
            beat_value: 4,
            resolution: _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.RESOLUTION,
        }).setStrict(false);
        this.voice.addTickables(this.subNotes);
    }
    static get CATEGORY() {
        return "NoteSubGroup";
    }
    static format(groups, state) {
        if (!groups || groups.length === 0)
            return false;
        let width = 0;
        for (let i = 0; i < groups.length; ++i) {
            const group = groups[i];
            group.preFormat();
            width += group.getWidth();
        }
        state.left_shift += width;
        return true;
    }
    preFormat() {
        if (this.preFormatted)
            return;
        this.formatter.joinVoices([this.voice]).format([this.voice], 0);
        this.setWidth(this.formatter.getMinTotalWidth());
        this.preFormatted = true;
    }
    setWidth(width) {
        this.width = width;
        return this;
    }
    getWidth() {
        return this.width;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        this.alignSubNotesWithNote(this.subNotes, note);
        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/ornament.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/ornament.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ornament: () => (/* binding */ Ornament)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _tickcontext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tickcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







function L(...args) {
    if (Ornament.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.log)('Vex.Flow.Ornament', args);
}
class Ornament extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(type) {
        super();
        this.type = type;
        this.delayed = false;
        this.render_options = {
            font_scale: 38,
            accidentalLowerPadding: 3,
            accidentalUpperPadding: 3,
        };
        this.ornament = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.ornamentCodes(this.type);
        const metrics = this.getMetrics();
        this.adjustForStemDirection = false;
        this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;
        this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;
        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;
        if (!this.ornament) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);
        }
        this.x_shift = metrics ? metrics.xOffset : 0;
        this.y_shift = metrics ? metrics.yOffset : 0;
        this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(this.ornament.code, this.render_options.font_scale, {
            category: `ornament.${this.ornament.code}`,
        });
        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {
            this.delayed = true;
        }
        if (!metrics) {
            this.glyph.setOrigin(0.5, 1.0);
        }
    }
    static get CATEGORY() {
        return "Ornament";
    }
    static get minPadding() {
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont();
        return musicFont.lookupMetric('glyphs.noteHead.minPadding');
    }
    static format(ornaments, state) {
        if (!ornaments || ornaments.length === 0)
            return false;
        let width = 0;
        let right_shift = state.right_shift;
        let left_shift = state.left_shift;
        let yOffset = 0;
        for (let i = 0; i < ornaments.length; ++i) {
            const ornament = ornaments[i];
            const increment = 2;
            if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {
                ornament.x_shift += right_shift + 2;
            }
            if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {
                ornament.x_shift -= left_shift + 2;
            }
            if (ornament.reportedWidth && ornament.x_shift < 0) {
                left_shift += ornament.reportedWidth;
            }
            else if (ornament.reportedWidth && ornament.x_shift >= 0) {
                right_shift += ornament.reportedWidth + Ornament.minPadding;
            }
            else {
                width = Math.max(ornament.getWidth(), width);
            }
            if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {
                const ornamentNote = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(ornament.note, 'NoAttachedNote');
                if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE) {
                    state.top_text_line += increment;
                    ornament.y_shift += yOffset;
                    yOffset -= ornament.glyph.bbox.getH();
                }
                else {
                    state.text_line += increment;
                    ornament.y_shift += yOffset;
                    yOffset += ornament.glyph.bbox.getH();
                }
            }
            else {
                if (ornament.getPosition() === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE) {
                    ornament.setTextLine(state.top_text_line);
                    state.top_text_line += increment;
                }
                else {
                    ornament.setTextLine(state.text_line);
                    state.text_line += increment;
                }
            }
        }
        state.left_shift = left_shift + width / 2;
        state.right_shift = right_shift + width / 2;
        return true;
    }
    static get ornamentNoteTransition() {
        return ['flip', 'jazzTurn', 'smear'];
    }
    static get ornamentAttack() {
        return ['scoop'];
    }
    static get ornamentAlignWithNoteHead() {
        return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];
    }
    static get ornamentRelease() {
        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];
    }
    static get ornamentArticulation() {
        return ['bend', 'plungerClosed', 'plungerOpen'];
    }
    getMetrics() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().getMetrics().glyphs.jazzOrnaments[this.ornament.code];
    }
    setDelayed(delayed) {
        this.delayed = delayed;
        return this;
    }
    setUpperAccidental(accid) {
        const scale = this.render_options.font_scale / 1.3;
        this.accidentalUpper = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(_tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.accidentalCodes(accid).code, scale);
        this.accidentalUpper.setOrigin(0.5, 1.0);
        return this;
    }
    setLowerAccidental(accid) {
        const scale = this.render_options.font_scale / 1.3;
        this.accidentalLower = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(_tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.accidentalCodes(accid).code, scale);
        this.accidentalLower.setOrigin(0.5, 1.0);
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const stemDir = note.getStemDirection();
        const stave = note.checkStave();
        const classString = Object.keys(this.getAttribute('classes')).join(' ');
        ctx.openGroup(classString, this.getAttribute('id'));
        const stemExtents = note.checkStem().getExtents();
        let y = stemDir === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN ? stemExtents.baseY : stemExtents.topY;
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isTabNote)(note)) {
            if (note.hasStem()) {
                if (stemDir === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
                    y = stave.getYForTopText(this.text_line);
                }
            }
            else {
                y = stave.getYForTopText(this.text_line);
            }
        }
        const isPlacedOnNoteheadSide = stemDir === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN;
        const spacing = stave.getSpacingBetweenLines();
        let lineSpacing = 1;
        if (!isPlacedOnNoteheadSide && note.hasBeam()) {
            lineSpacing += 0.5;
        }
        const totalSpacing = spacing * (this.text_line + lineSpacing);
        const glyphYBetweenLines = y - totalSpacing;
        const start = note.getModifierStartXY(this.position, this.index);
        let glyphX = start.x;
        let glyphY = this.ornamentAlignWithNoteHead
            ? start.y
            : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);
        glyphY += this.y_shift;
        if (this.delayed) {
            let delayXShift = 0;
            const startX = glyphX - (stave.getX() - 10);
            if (this.delayXShift !== undefined) {
                delayXShift = this.delayXShift;
            }
            else {
                delayXShift += this.glyph.getMetrics().width / 2;
                const nextContext = _tickcontext_js__WEBPACK_IMPORTED_MODULE_4__.TickContext.getNextContext(note.getTickContext());
                if (nextContext) {
                    delayXShift += (nextContext.getX() - startX) * 0.5;
                }
                else {
                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;
                }
                this.delayXShift = delayXShift;
            }
            glyphX += delayXShift;
        }
        L('Rendering ornament: ', this.ornament, glyphX, glyphY);
        if (this.accidentalLower) {
            this.accidentalLower.render(ctx, glyphX, glyphY);
            glyphY -= this.accidentalLower.getMetrics().height;
            glyphY -= this.render_options.accidentalLowerPadding;
        }
        if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {
            glyphY += this.stemUpYOffset;
        }
        if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {
            glyphY = note.checkStave().getBoundingBox().getY() + 40;
        }
        this.glyph.render(ctx, glyphX + this.x_shift, glyphY);
        if (this.accidentalUpper) {
            glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;
            this.accidentalUpper.render(ctx, glyphX, glyphY);
        }
        ctx.closeGroup();
    }
}
Ornament.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/parenthesis.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/parenthesis.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Parenthesis: () => (/* binding */ Parenthesis)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");




class Parenthesis extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(position) {
        super();
        this.position = position !== null && position !== void 0 ? position : _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT;
        this.point = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.default.point');
        this.setWidth(_tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));
    }
    static get CATEGORY() {
        return "Parenthesis";
    }
    static buildAndAttach(notes) {
        for (const note of notes) {
            for (let i = 0; i < note.keys.length; i++) {
                note.addModifier(new Parenthesis(_modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.LEFT), i);
                note.addModifier(new Parenthesis(_modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.RIGHT), i);
            }
        }
    }
    static format(parentheses, state) {
        if (!parentheses || parentheses.length === 0)
            return false;
        let x_widthL = 0;
        let x_widthR = 0;
        for (let i = 0; i < parentheses.length; ++i) {
            const parenthesis = parentheses[i];
            const note = parenthesis.getNote();
            const pos = parenthesis.getPosition();
            const index = parenthesis.checkIndex();
            let shift = 0;
            if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.RIGHT) {
                shift = note.getRightParenthesisPx(index);
                x_widthR = x_widthR > shift + parenthesis.width ? x_widthR : shift + parenthesis.width;
            }
            if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.LEFT) {
                shift = note.getLeftParenthesisPx(index);
                x_widthL = x_widthL > shift + parenthesis.width ? x_widthL : shift + parenthesis.width;
            }
            parenthesis.setXShift(shift);
        }
        state.left_shift += x_widthL;
        state.right_shift += x_widthR;
        return true;
    }
    setNote(note) {
        this.note = note;
        this.point = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.default.point');
        this.setWidth(_tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isGraceNote)(note)) {
            this.point = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.point');
            this.setWidth(_tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.width'));
        }
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });
        const x = start.x + this.x_shift;
        const y = start.y + this.y_shift;
        if (this.position == _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT) {
            _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph.renderGlyph(ctx, x + 1, y, this.point, 'noteheadParenthesisRight', {
                category: `noteHead.standard.noteheadParenthesisRight`,
            });
        }
        else if (this.position == _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT) {
            _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph.renderGlyph(ctx, x - 2, y, this.point, 'noteheadParenthesisLeft', {
                category: `noteHead.standard.noteheadParenthesisLeft`,
            });
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Parser: () => (/* binding */ Parser)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");

function L(...args) {
    if (Parser.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.log)('Vex.Flow.Parser', args);
}
const NO_ERROR_POS = -1;
function flattenMatches(r) {
    if ('matchedString' in r)
        return r.matchedString;
    if ('results' in r)
        return flattenMatches(r.results);
    const results = r;
    if (results.length === 1)
        return flattenMatches(results[0]);
    if (results.length === 0)
        return null;
    return results.map(flattenMatches);
}
class Parser {
    constructor(grammar) {
        this.grammar = grammar;
        this.line = '';
        this.pos = 0;
        this.errorPos = NO_ERROR_POS;
    }
    parse(line) {
        this.line = line;
        this.pos = 0;
        this.errorPos = NO_ERROR_POS;
        const result = this.expect(this.grammar.begin());
        result.errorPos = this.errorPos;
        return result;
    }
    matchFail(returnPos) {
        if (this.errorPos === NO_ERROR_POS)
            this.errorPos = this.pos;
        this.pos = returnPos;
    }
    matchSuccess() {
        this.errorPos = NO_ERROR_POS;
    }
    matchToken(token, noSpace = false) {
        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\s*)');
        const workingLine = this.line.slice(this.pos);
        const result = workingLine.match(regexp);
        if (result !== null) {
            return {
                success: true,
                matchedString: result[2],
                incrementPos: result[1].length,
                pos: this.pos,
            };
        }
        else {
            return { success: false, pos: this.pos };
        }
    }
    expectOne(rule, maybe = false) {
        const results = [];
        const pos = this.pos;
        let allMatches = true;
        let oneMatch = false;
        maybe = maybe === true || rule.maybe === true;
        if (rule.expect) {
            for (const next of rule.expect) {
                const localPos = this.pos;
                const result = this.expect(next);
                if (result.success) {
                    results.push(result);
                    oneMatch = true;
                    if (rule.or)
                        break;
                }
                else {
                    allMatches = false;
                    if (!rule.or) {
                        this.pos = localPos;
                        break;
                    }
                }
            }
        }
        const gotOne = (rule.or && oneMatch) || allMatches;
        const success = gotOne || maybe === true;
        const numMatches = gotOne ? 1 : 0;
        if (maybe && !gotOne)
            this.pos = pos;
        if (success) {
            this.matchSuccess();
        }
        else {
            this.matchFail(pos);
        }
        return { success, results, numMatches };
    }
    expectOneOrMore(rule, maybe = false) {
        const results = [];
        const pos = this.pos;
        let numMatches = 0;
        let more = true;
        do {
            const result = this.expectOne(rule);
            if (result.success && result.results) {
                numMatches++;
                results.push(result.results);
            }
            else {
                more = false;
            }
        } while (more);
        const success = numMatches > 0 || maybe === true;
        if (maybe && !(numMatches > 0))
            this.pos = pos;
        if (success) {
            this.matchSuccess();
        }
        else {
            this.matchFail(pos);
        }
        return { success, results, numMatches };
    }
    expectZeroOrMore(rule) {
        return this.expectOneOrMore(rule, true);
    }
    expect(ruleFunc) {
        L('Evaluating rule function:', ruleFunc);
        if (!ruleFunc) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('Invalid rule function');
        }
        let result;
        const rule = ruleFunc.bind(this.grammar)();
        if (rule.token) {
            result = this.matchToken(rule.token, rule.noSpace === true);
            if (result.success) {
                this.pos += result.incrementPos;
            }
        }
        else if (rule.expect) {
            if (rule.oneOrMore) {
                result = this.expectOneOrMore(rule);
            }
            else if (rule.zeroOrMore) {
                result = this.expectZeroOrMore(rule);
            }
            else {
                result = this.expectOne(rule);
            }
        }
        else {
            L(rule);
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);
        }
        const matches = [];
        result.matches = matches;
        if (result.results) {
            result.results.forEach((r) => matches.push(flattenMatches(r)));
        }
        if (rule.run && result.success) {
            rule.run({ matches });
        }
        return result;
    }
}
Parser.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/pedalmarking.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/pedalmarking.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PedalMarking: () => (/* binding */ PedalMarking)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





function L(...args) {
    if (PedalMarking.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.log)('Vex.Flow.PedalMarking', args);
}
function drawPedalGlyph(name, context, x, y, point) {
    const glyph_data = PedalMarking.GLYPHS[name];
    const glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_2__.Glyph(glyph_data.code, point, { category: 'pedalMarking' });
    glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);
}
class PedalMarking extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(notes) {
        super();
        this.notes = notes;
        this.type = PedalMarking.type.TEXT;
        this.line = 0;
        this.custom_depress_text = '';
        this.custom_release_text = '';
        this.resetFont();
        this.render_options = {
            bracket_height: 10,
            text_margin_right: 6,
            bracket_line_width: 1,
            color: 'black',
        };
    }
    static get CATEGORY() {
        return "PedalMarking";
    }
    static createSustain(notes) {
        const pedal = new PedalMarking(notes);
        return pedal;
    }
    static createSostenuto(notes) {
        const pedal = new PedalMarking(notes);
        pedal.setType(PedalMarking.type.MIXED);
        pedal.setCustomText('Sost. Ped.');
        return pedal;
    }
    static createUnaCorda(notes) {
        const pedal = new PedalMarking(notes);
        pedal.setType(PedalMarking.type.TEXT);
        pedal.setCustomText('una corda', 'tre corda');
        return pedal;
    }
    setType(type) {
        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;
        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {
            this.type = type;
        }
        return this;
    }
    setCustomText(depress, release) {
        this.custom_depress_text = depress || '';
        this.custom_release_text = release || '';
        return this;
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    drawBracketed() {
        const ctx = this.checkContext();
        let is_pedal_depressed = false;
        let prev_x;
        let prev_y;
        this.notes.forEach((note, index, notes) => {
            is_pedal_depressed = !is_pedal_depressed;
            const x = note.getAbsoluteX();
            const y = note.checkStave().getYForBottomText(this.line + 3);
            if (x < prev_x) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');
            }
            const next_is_same = notes[index + 1] === note;
            const prev_is_same = notes[index - 1] === note;
            let x_shift = 0;
            const point = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);
            if (is_pedal_depressed) {
                x_shift = prev_is_same ? 5 : 0;
                if (this.type === PedalMarking.type.MIXED && !prev_is_same) {
                    if (this.custom_depress_text) {
                        const text_width = ctx.measureText(this.custom_depress_text).width;
                        ctx.fillText(this.custom_depress_text, x - text_width / 2, y);
                        x_shift = text_width / 2 + this.render_options.text_margin_right;
                    }
                    else {
                        drawPedalGlyph('pedal_depress', ctx, x, y, point);
                        x_shift = 20 + this.render_options.text_margin_right;
                    }
                }
                else {
                    ctx.beginPath();
                    ctx.moveTo(x, y - this.render_options.bracket_height);
                    ctx.lineTo(x + x_shift, y);
                    ctx.stroke();
                    ctx.closePath();
                }
            }
            else {
                x_shift = next_is_same ? -5 : 0;
                ctx.beginPath();
                ctx.moveTo(prev_x, prev_y);
                ctx.lineTo(x + x_shift, y);
                ctx.lineTo(x, y - this.render_options.bracket_height);
                ctx.stroke();
                ctx.closePath();
            }
            prev_x = x + x_shift;
            prev_y = y;
        });
    }
    drawText() {
        const ctx = this.checkContext();
        let is_pedal_depressed = false;
        this.notes.forEach((note) => {
            is_pedal_depressed = !is_pedal_depressed;
            const stave = note.checkStave();
            const x = note.getAbsoluteX();
            const y = stave.getYForBottomText(this.line + 3);
            const point = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);
            let text_width = 0;
            if (is_pedal_depressed) {
                if (this.custom_depress_text) {
                    text_width = ctx.measureText(this.custom_depress_text).width;
                    ctx.fillText(this.custom_depress_text, x - text_width / 2, y);
                }
                else {
                    drawPedalGlyph('pedal_depress', ctx, x, y, point);
                }
            }
            else {
                if (this.custom_release_text) {
                    text_width = ctx.measureText(this.custom_release_text).width;
                    ctx.fillText(this.custom_release_text, x - text_width / 2, y);
                }
                else {
                    drawPedalGlyph('pedal_release', ctx, x, y, point);
                }
            }
        });
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        ctx.save();
        ctx.setStrokeStyle(this.render_options.color);
        ctx.setFillStyle(this.render_options.color);
        ctx.setFont(this.textFont);
        L('Rendering Pedal Marking');
        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {
            ctx.setLineWidth(this.render_options.bracket_line_width);
            this.drawBracketed();
        }
        else if (this.type === PedalMarking.type.TEXT) {
            this.drawText();
        }
        ctx.restore();
    }
}
PedalMarking.DEBUG = false;
PedalMarking.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_1__.Font.SERIF,
    size: 12,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_1__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_1__.FontStyle.ITALIC,
};
PedalMarking.GLYPHS = {
    pedal_depress: {
        code: 'keyboardPedalPed',
        x_shift: -10,
        y_shift: 0,
    },
    pedal_release: {
        code: 'keyboardPedalUp',
        x_shift: -2,
        y_shift: 3,
    },
};
PedalMarking.type = {
    TEXT: 1,
    BRACKET: 2,
    MIXED: 3,
};
PedalMarking.typeString = {
    text: PedalMarking.type.TEXT,
    bracket: PedalMarking.type.BRACKET,
    mixed: PedalMarking.type.MIXED,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/registry.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/registry.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Registry: () => (/* binding */ Registry)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");

class Index {
    constructor() {
        this.id = {};
        this.type = {};
        this.class = {};
    }
}
class Registry {
    constructor() {
        this.index = new Index();
    }
    static getDefaultRegistry() {
        return Registry.defaultRegistry;
    }
    static enableDefaultRegistry(registry) {
        Registry.defaultRegistry = registry;
    }
    static disableDefaultRegistry() {
        Registry.defaultRegistry = undefined;
    }
    clear() {
        this.index = new Index();
        return this;
    }
    setIndexValue(name, value, id, elem) {
        const index = this.index;
        if (!index[name][value]) {
            index[name][value] = {};
        }
        index[name][value][id] = elem;
    }
    updateIndex({ id, name, value, oldValue }) {
        const elem = this.getElementById(id);
        if (oldValue !== undefined && this.index[name][oldValue]) {
            delete this.index[name][oldValue][id];
        }
        if (value && elem) {
            this.setIndexValue(name, value, elem.getAttribute('id'), elem);
        }
    }
    register(elem, id) {
        id = id || elem.getAttribute('id');
        if (!id) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_0__.RuntimeError("Can't add element without `id` attribute to registry");
        }
        elem.setAttribute('id', id);
        this.setIndexValue('id', id, id, elem);
        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });
        elem.onRegister(this);
        return this;
    }
    getElementById(id) {
        var _a, _b;
        return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id];
    }
    getElementsByAttribute(attribute, value) {
        const index_attr = this.index[attribute];
        if (index_attr) {
            const index_attr_val = index_attr[value];
            if (index_attr_val) {
                const keys = Object.keys(index_attr_val);
                return keys.map((k) => index_attr_val[k]);
            }
        }
        return [];
    }
    getElementsByType(type) {
        return this.getElementsByAttribute('type', type);
    }
    getElementsByClass(className) {
        return this.getElementsByAttribute('class', className);
    }
    onUpdate(info) {
        const allowedNames = ['id', 'type', 'class'];
        if (allowedNames.includes(info.name)) {
            this.updateIndex(info);
        }
        return this;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RenderContext: () => (/* binding */ RenderContext),
/* harmony export */   drawDot: () => (/* binding */ drawDot)
/* harmony export */ });
class RenderContext {
    static get CATEGORY() {
        return "RenderContext";
    }
    set font(f) {
        this.setFont(f);
    }
    get font() {
        return this.getFont();
    }
    setRawFont(f) {
        this.setFont(f);
        return this;
    }
}
function drawDot(ctx, x, y, color = '#F55') {
    ctx.save();
    ctx.setFillStyle(color);
    ctx.beginPath();
    ctx.arc(x, y, 3, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/renderer.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/renderer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Renderer: () => (/* binding */ Renderer),
/* harmony export */   RendererBackends: () => (/* binding */ RendererBackends),
/* harmony export */   RendererLineEndType: () => (/* binding */ RendererLineEndType)
/* harmony export */ });
/* harmony import */ var _canvascontext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvascontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/canvascontext.js");
/* harmony import */ var _svgcontext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svgcontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/svgcontext.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _web_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./web.js */ "./node_modules/vexflow_smoosic/build/esm/src/web.js");





var RendererBackends;
(function (RendererBackends) {
    RendererBackends[RendererBackends["CANVAS"] = 1] = "CANVAS";
    RendererBackends[RendererBackends["SVG"] = 2] = "SVG";
})(RendererBackends || (RendererBackends = {}));
var RendererLineEndType;
(function (RendererLineEndType) {
    RendererLineEndType[RendererLineEndType["NONE"] = 1] = "NONE";
    RendererLineEndType[RendererLineEndType["UP"] = 2] = "UP";
    RendererLineEndType[RendererLineEndType["DOWN"] = 3] = "DOWN";
})(RendererLineEndType || (RendererLineEndType = {}));
class Renderer {
    constructor(arg0, arg1) {
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_2__.isRenderContext)(arg0)) {
            this.ctx = arg0;
        }
        else {
            if (arg1 === undefined) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('InvalidArgument', 'Missing backend argument');
            }
            const backend = arg1;
            let element;
            if (typeof arg0 == 'string') {
                const maybeElement = document.getElementById(arg0);
                if (!maybeElement) {
                    throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadElementId', `Can't find element with ID "${maybeElement}"`);
                }
                element = maybeElement;
            }
            else {
                element = arg0;
            }
            if (backend === Renderer.Backends.CANVAS) {
                if (!(0,_web_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLCanvas)(element)) {
                    throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');
                }
                const context = element.getContext('2d');
                if (!context) {
                    throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadElement', "Can't get canvas context");
                }
                this.ctx = new _canvascontext_js__WEBPACK_IMPORTED_MODULE_0__.CanvasContext(context);
            }
            else if (backend === Renderer.Backends.SVG) {
                if (!(0,_web_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLDiv)(element)) {
                    throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');
                }
                this.ctx = new _svgcontext_js__WEBPACK_IMPORTED_MODULE_1__.SVGContext(element);
            }
            else {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('InvalidBackend', `No support for backend: ${backend}`);
            }
        }
    }
    static buildContext(elementId, backend, width, height, background = '#FFF') {
        const renderer = new Renderer(elementId, backend);
        if (width && height) {
            renderer.resize(width, height);
        }
        const ctx = renderer.getContext();
        ctx.setBackgroundFillStyle(background);
        Renderer.lastContext = ctx;
        return ctx;
    }
    static getCanvasContext(elementId, width, height, background) {
        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);
    }
    static getSVGContext(elementId, width, height, background) {
        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);
    }
    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {
        context.beginPath();
        const dx = toX - fromX;
        const dy = toY - fromY;
        const angle = Math.atan2(dy, dx);
        let x = fromX;
        let y = fromY;
        context.moveTo(fromX, fromY);
        let idx = 0;
        let draw = true;
        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {
            const dashLength = dashPattern[idx++ % dashPattern.length];
            const nx = x + Math.cos(angle) * dashLength;
            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);
            const ny = y + Math.sin(angle) * dashLength;
            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);
            if (draw) {
                context.lineTo(x, y);
            }
            else {
                context.moveTo(x, y);
            }
            draw = !draw;
        }
        context.closePath();
        context.stroke();
    }
    resize(width, height) {
        this.ctx.resize(width, height);
        return this;
    }
    getContext() {
        return this.ctx;
    }
}
Renderer.Backends = RendererBackends;
Renderer.LineEndType = RendererLineEndType;
Renderer.lastContext = undefined;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/repeatnote.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/repeatnote.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RepeatNote: () => (/* binding */ RepeatNote)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _glyphnote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyphnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyphnote.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");



const CODES = {
    '1': 'repeat1Bar',
    '2': 'repeat2Bars',
    '4': 'repeat4Bars',
    slash: 'repeatBarSlash',
};
class RepeatNote extends _glyphnote_js__WEBPACK_IMPORTED_MODULE_1__.GlyphNote {
    static get CATEGORY() {
        return "RepeatNote";
    }
    constructor(type, noteStruct, options) {
        super(undefined, Object.assign({ duration: 'q', align_center: type !== 'slash' }, noteStruct), options);
        const glyphCode = CODES[type] || 'repeat1Bar';
        const glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(glyphCode, _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont().lookupMetric('repeatNote.point', 40), {
            category: 'repeatNote',
        });
        this.setGlyph(glyph);
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stave.js":
/*!*************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stave.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stave: () => (/* binding */ Stave)
/* harmony export */ });
/* harmony import */ var _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boundingbox.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js");
/* harmony import */ var _clef_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clef.js */ "./node_modules/vexflow_smoosic/build/esm/src/clef.js");
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _keysignature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keysignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/keysignature.js");
/* harmony import */ var _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stavebarline.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavebarline.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _staverepetition_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./staverepetition.js */ "./node_modules/vexflow_smoosic/build/esm/src/staverepetition.js");
/* harmony import */ var _stavesection_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stavesection.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavesection.js");
/* harmony import */ var _stavetempo_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./stavetempo.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetempo.js");
/* harmony import */ var _stavetext_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./stavetext.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetext.js");
/* harmony import */ var _stavevolta_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stavevolta.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavevolta.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _timesignature_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./timesignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignature.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
















const SORT_ORDER_BEG_MODIFIERS = {
    [_stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.Barline.CATEGORY]: 0,
    [_clef_js__WEBPACK_IMPORTED_MODULE_1__.Clef.CATEGORY]: 1,
    [_keysignature_js__WEBPACK_IMPORTED_MODULE_4__.KeySignature.CATEGORY]: 2,
    [_timesignature_js__WEBPACK_IMPORTED_MODULE_13__.TimeSignature.CATEGORY]: 3,
};
const SORT_ORDER_END_MODIFIERS = {
    [_timesignature_js__WEBPACK_IMPORTED_MODULE_13__.TimeSignature.CATEGORY]: 0,
    [_keysignature_js__WEBPACK_IMPORTED_MODULE_4__.KeySignature.CATEGORY]: 1,
    [_stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.Barline.CATEGORY]: 2,
    [_clef_js__WEBPACK_IMPORTED_MODULE_1__.Clef.CATEGORY]: 3,
};
class Stave extends _element_js__WEBPACK_IMPORTED_MODULE_2__.Element {
    constructor(x, y, width, options) {
        super();
        this.height = 0;
        this.x = x;
        this.y = y;
        this.width = width;
        this.formatted = false;
        this.start_x = x + 5;
        this.end_x = x + width;
        this.modifiers = [];
        this.measure = 0;
        this.clef = 'treble';
        this.endClef = undefined;
        this.resetFont();
        this.options = Object.assign({ vertical_bar_width: 10, num_lines: 5, fill_style: '#999999', left_bar: true, right_bar: true, spacing_between_lines_px: _tables_js__WEBPACK_IMPORTED_MODULE_12__.Tables.STAVE_LINE_DISTANCE, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1, bottom_text_position: 4, line_config: [] }, options);
        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };
        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };
        this.resetLines();
        this.addModifier(new _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.Barline(this.options.left_bar ? _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.SINGLE : _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.NONE));
        this.addEndModifier(new _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.Barline(this.options.right_bar ? _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.SINGLE : _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.NONE));
    }
    static get CATEGORY() {
        return "Stave";
    }
    static get defaultPadding() {
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_12__.Tables.currentMusicFont();
        return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');
    }
    static get rightPadding() {
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_12__.Tables.currentMusicFont();
        return musicFont.lookupMetric('stave.endPaddingMax');
    }
    setDefaultLedgerLineStyle(style) {
        this.defaultLedgerLineStyle = style;
    }
    getDefaultLedgerLineStyle() {
        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);
    }
    space(spacing) {
        return this.options.spacing_between_lines_px * spacing;
    }
    resetLines() {
        this.options.line_config = [];
        for (let i = 0; i < this.options.num_lines; i++) {
            this.options.line_config.push({ visible: true });
        }
        this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;
        this.options.bottom_text_position = this.options.num_lines;
    }
    setNoteStartX(x) {
        if (!this.formatted)
            this.format();
        this.start_x = x;
        return this;
    }
    getNoteStartX() {
        if (!this.formatted)
            this.format();
        return this.start_x;
    }
    getNoteEndX() {
        if (!this.formatted)
            this.format();
        return this.end_x;
    }
    getTieStartX() {
        return this.start_x;
    }
    getTieEndX() {
        return this.end_x;
    }
    getX() {
        return this.x;
    }
    getNumLines() {
        return this.options.num_lines;
    }
    setNumLines(n) {
        this.options.num_lines = n;
        this.resetLines();
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    getY() {
        return this.y;
    }
    getTopLineTopY() {
        return this.getYForLine(0) - _tables_js__WEBPACK_IMPORTED_MODULE_12__.Tables.STAVE_LINE_THICKNESS / 2;
    }
    getBottomLineBottomY() {
        return this.getYForLine(this.getNumLines() - 1) + _tables_js__WEBPACK_IMPORTED_MODULE_12__.Tables.STAVE_LINE_THICKNESS / 2;
    }
    setX(x) {
        const shift = x - this.x;
        this.formatted = false;
        this.x = x;
        this.start_x += shift;
        this.end_x += shift;
        for (let i = 0; i < this.modifiers.length; i++) {
            const mod = this.modifiers[i];
            mod.setX(mod.getX() + shift);
        }
        return this;
    }
    setWidth(width) {
        this.formatted = false;
        this.width = width;
        this.end_x = this.x + width;
        return this;
    }
    getWidth() {
        return this.width;
    }
    getStyle() {
        return Object.assign({ fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: _tables_js__WEBPACK_IMPORTED_MODULE_12__.Tables.STAVE_LINE_THICKNESS }, this.style);
    }
    setMeasure(measure) {
        this.measure = measure;
        return this;
    }
    getModifierXShift(index = 0) {
        if (typeof index !== 'number') {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_15__.RuntimeError('InvalidIndex', 'Must be of number type');
        }
        if (!this.formatted)
            this.format();
        if (this.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN).length === 1) {
            return 0;
        }
        if (this.modifiers[index].getPosition() === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.RIGHT) {
            return 0;
        }
        let start_x = this.start_x - this.x;
        const begBarline = this.modifiers[0];
        if (begBarline.getType() === _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {
            start_x -= begBarline.getWidth();
        }
        return start_x;
    }
    setRepetitionType(type, yShift = 0) {
        this.modifiers.push(new _staverepetition_js__WEBPACK_IMPORTED_MODULE_7__.Repetition(type, this.x, yShift));
        return this;
    }
    setVoltaType(type, number_t, y) {
        this.modifiers.push(new _stavevolta_js__WEBPACK_IMPORTED_MODULE_11__.Volta(type, number_t, this.x, y));
        return this;
    }
    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {
        const staveSection = new _stavesection_js__WEBPACK_IMPORTED_MODULE_8__.StaveSection(section, this.x + xOffset, y, drawRect);
        if (fontSize)
            staveSection.setFontSize(fontSize);
        this.modifiers.push(staveSection);
        return this;
    }
    setTempo(tempo, y) {
        this.modifiers.push(new _stavetempo_js__WEBPACK_IMPORTED_MODULE_9__.StaveTempo(tempo, this.x, y));
        return this;
    }
    setText(text, position, options = {}) {
        this.modifiers.push(new _stavetext_js__WEBPACK_IMPORTED_MODULE_10__.StaveText(text, position, options));
        return this;
    }
    getHeight() {
        return this.height;
    }
    getSpacingBetweenLines() {
        return this.options.spacing_between_lines_px;
    }
    getBoundingBox() {
        return new _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__.BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);
    }
    getBottomY() {
        const options = this.options;
        const spacing = options.spacing_between_lines_px;
        const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;
        return score_bottom;
    }
    getBottomLineY() {
        return this.getYForLine(this.options.num_lines);
    }
    getYForLine(line) {
        const options = this.options;
        const spacing = options.spacing_between_lines_px;
        const headroom = options.space_above_staff_ln;
        const y = this.y + line * spacing + headroom * spacing;
        return y;
    }
    getLineForY(y) {
        const options = this.options;
        const spacing = options.spacing_between_lines_px;
        const headroom = options.space_above_staff_ln;
        return (y - this.y) / spacing - headroom;
    }
    getYForTopText(line = 0) {
        return this.getYForLine(-line - this.options.top_text_position);
    }
    getYForBottomText(line = 0) {
        return this.getYForLine(this.options.bottom_text_position + line);
    }
    getYForNote(line) {
        const options = this.options;
        const spacing = options.spacing_between_lines_px;
        const headroom = options.space_above_staff_ln;
        return this.y + headroom * spacing + 5 * spacing - line * spacing;
    }
    getYForGlyphs() {
        return this.getYForLine(3);
    }
    addModifier(modifier, position) {
        if (position !== undefined) {
            modifier.setPosition(position);
        }
        modifier.setStave(this);
        this.formatted = false;
        this.modifiers.push(modifier);
        return this;
    }
    addEndModifier(modifier) {
        this.addModifier(modifier, _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        return this;
    }
    setBegBarType(type) {
        const { SINGLE, REPEAT_BEGIN, NONE } = _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType;
        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {
            this.modifiers[0].setType(type);
            this.formatted = false;
        }
        return this;
    }
    setEndBarType(type) {
        if (type !== _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.REPEAT_BEGIN) {
            this.modifiers[1].setType(type);
            this.formatted = false;
        }
        return this;
    }
    setClef(clefSpec, size, annotation, position) {
        if (position === undefined) {
            position = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN;
        }
        if (position === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END) {
            this.endClef = clefSpec;
        }
        else {
            this.clef = clefSpec;
        }
        const clefs = this.getModifiers(position, _clef_js__WEBPACK_IMPORTED_MODULE_1__.Clef.CATEGORY);
        if (clefs.length === 0) {
            this.addClef(clefSpec, size, annotation, position);
        }
        else {
            clefs[0].setType(clefSpec, size, annotation);
        }
        return this;
    }
    getClef() {
        return this.clef;
    }
    setEndClef(clefSpec, size, annotation) {
        this.setClef(clefSpec, size, annotation, _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        return this;
    }
    getEndClef() {
        return this.endClef;
    }
    setKeySignature(keySpec, cancelKeySpec, position) {
        if (position === undefined) {
            position = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN;
        }
        const keySignatures = this.getModifiers(position, _keysignature_js__WEBPACK_IMPORTED_MODULE_4__.KeySignature.CATEGORY);
        if (keySignatures.length === 0) {
            this.addKeySignature(keySpec, cancelKeySpec, position);
        }
        else {
            keySignatures[0].setKeySig(keySpec, cancelKeySpec);
        }
        return this;
    }
    setEndKeySignature(keySpec, cancelKeySpec) {
        this.setKeySignature(keySpec, cancelKeySpec, _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        return this;
    }
    setTimeSignature(timeSpec, customPadding, position) {
        if (position === undefined) {
            position = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN;
        }
        const timeSignatures = this.getModifiers(position, _timesignature_js__WEBPACK_IMPORTED_MODULE_13__.TimeSignature.CATEGORY);
        if (timeSignatures.length === 0) {
            this.addTimeSignature(timeSpec, customPadding, position);
        }
        else {
            timeSignatures[0].setTimeSig(timeSpec);
        }
        return this;
    }
    setEndTimeSignature(timeSpec, customPadding) {
        this.setTimeSignature(timeSpec, customPadding, _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        return this;
    }
    addKeySignature(keySpec, cancelKeySpec, position) {
        if (position === undefined) {
            position = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN;
        }
        this.addModifier(new _keysignature_js__WEBPACK_IMPORTED_MODULE_4__.KeySignature(keySpec, cancelKeySpec).setPosition(position), position);
        return this;
    }
    addClef(clef, size, annotation, position) {
        if (position === undefined || position === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN) {
            this.clef = clef;
        }
        else if (position === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END) {
            this.endClef = clef;
        }
        this.addModifier(new _clef_js__WEBPACK_IMPORTED_MODULE_1__.Clef(clef, size, annotation), position);
        return this;
    }
    addEndClef(clef, size, annotation) {
        this.addClef(clef, size, annotation, _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        return this;
    }
    addTimeSignature(timeSpec, customPadding, position) {
        this.addModifier(new _timesignature_js__WEBPACK_IMPORTED_MODULE_13__.TimeSignature(timeSpec, customPadding), position);
        return this;
    }
    addEndTimeSignature(timeSpec, customPadding) {
        this.addTimeSignature(timeSpec, customPadding, _stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        return this;
    }
    addTrebleGlyph() {
        this.addClef('treble');
        return this;
    }
    getModifiers(position, category) {
        const noPosition = position === undefined;
        const noCategory = category === undefined;
        if (noPosition && noCategory) {
            return this.modifiers;
        }
        else if (noPosition) {
            return this.modifiers.filter((m) => category === m.getCategory());
        }
        else if (noCategory) {
            return this.modifiers.filter((m) => position === m.getPosition());
        }
        else {
            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());
        }
    }
    sortByCategory(items, order) {
        for (let i = items.length - 1; i >= 0; i--) {
            for (let j = 0; j < i; j++) {
                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {
                    const temp = items[j];
                    items[j] = items[j + 1];
                    items[j + 1] = temp;
                }
            }
        }
    }
    format() {
        const begBarline = this.modifiers[0];
        const endBarline = this.modifiers[1];
        const begModifiers = this.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN);
        const endModifiers = this.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.END);
        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);
        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);
        if (begModifiers.length > 1 && begBarline.getType() === _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.REPEAT_BEGIN) {
            begModifiers.push(begModifiers.splice(0, 1)[0]);
            begModifiers.splice(0, 0, new _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.Barline(_stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.SINGLE));
        }
        if (endModifiers.indexOf(endBarline) > 0) {
            endModifiers.splice(0, 0, new _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.Barline(_stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.NONE));
        }
        let width;
        let padding;
        let modifier;
        let offset = 0;
        let x = this.x;
        for (let i = 0; i < begModifiers.length; i++) {
            modifier = begModifiers[i];
            padding = modifier.getPadding(i + offset);
            width = modifier.getWidth();
            x += padding;
            modifier.setX(x);
            x += width;
            if (padding + width === 0)
                offset--;
        }
        this.start_x = x;
        x = this.x + this.width;
        const widths = {
            left: 0,
            right: 0,
            paddingRight: 0,
            paddingLeft: 0,
        };
        let lastBarlineIdx = 0;
        for (let i = 0; i < endModifiers.length; i++) {
            modifier = endModifiers[i];
            lastBarlineIdx = (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_14__.isBarline)(modifier) ? i : lastBarlineIdx;
            widths.right = 0;
            widths.left = 0;
            widths.paddingRight = 0;
            widths.paddingLeft = 0;
            const layoutMetrics = modifier.getLayoutMetrics();
            if (layoutMetrics) {
                if (i !== 0) {
                    widths.right = layoutMetrics.xMax || 0;
                    widths.paddingRight = layoutMetrics.paddingRight || 0;
                }
                widths.left = -layoutMetrics.xMin || 0;
                widths.paddingLeft = layoutMetrics.paddingLeft || 0;
                if (i === endModifiers.length - 1) {
                    widths.paddingLeft = 0;
                }
            }
            else {
                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);
                if (i !== 0) {
                    widths.right = modifier.getWidth();
                }
                if (i === 0) {
                    widths.left = modifier.getWidth();
                }
            }
            x -= widths.paddingRight;
            x -= widths.right;
            modifier.setX(x);
            x -= widths.left;
            x -= widths.paddingLeft;
        }
        this.end_x = endModifiers.length === 1 ? this.x + this.width : x;
        this.formatted = true;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        ctx.openGroup('stave', this.getAttribute('id'));
        if (!this.formatted)
            this.format();
        const num_lines = this.options.num_lines;
        const width = this.width;
        const x = this.x;
        let y;
        for (let line = 0; line < num_lines; line++) {
            y = this.getYForLine(line);
            this.applyStyle();
            if (this.options.line_config[line].visible) {
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + width, y);
                ctx.stroke();
            }
            this.restoreStyle();
        }
        for (let i = 0; i < this.modifiers.length; i++) {
            const modifier = this.modifiers[i];
            if (typeof modifier.draw === 'function') {
                modifier.applyStyle(ctx);
                modifier.draw(this, this.getModifierXShift(i));
                modifier.restoreStyle(ctx);
            }
        }
        if (this.measure > 0) {
            ctx.save();
            ctx.setFont(this.textFont);
            const textWidth = ctx.measureText('' + this.measure).width;
            y = this.getYForTopText(0) + 3;
            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);
            ctx.restore();
        }
        ctx.closeGroup();
        return this;
    }
    getVerticalBarWidth() {
        return this.options.vertical_bar_width;
    }
    getConfigForLines() {
        return this.options.line_config;
    }
    setConfigForLine(line_number, line_config) {
        if (line_number >= this.options.num_lines || line_number < 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_15__.RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');
        }
        if (line_config.visible === undefined) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_15__.RuntimeError('StaveConfigError', "The line configuration object is missing the 'visible' property.");
        }
        if (typeof line_config.visible !== 'boolean') {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_15__.RuntimeError('StaveConfigError', "The line configuration objects 'visible' property must be true or false.");
        }
        this.options.line_config[line_number] = line_config;
        return this;
    }
    setConfigForLines(lines_configuration) {
        if (lines_configuration.length !== this.options.num_lines) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_15__.RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');
        }
        for (const line_config in lines_configuration) {
            if (lines_configuration[line_config].visible == undefined) {
                lines_configuration[line_config] = this.options.line_config[line_config];
            }
            this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);
        }
        this.options.line_config = lines_configuration;
        return this;
    }
    static formatBegModifiers(staves) {
        let maxX = 0;
        staves.forEach((stave) => {
            if (stave.getNoteStartX() > maxX)
                maxX = stave.getNoteStartX();
        });
        staves.forEach((stave) => {
            stave.setNoteStartX(maxX);
        });
        maxX = 0;
        staves.forEach((stave) => {
            const modifiers = stave.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN, "Barline");
            modifiers.forEach((modifier) => {
                if (modifier.getType() == _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.REPEAT_BEGIN)
                    if (modifier.getX() > maxX)
                        maxX = modifier.getX();
            });
        });
        staves.forEach((stave) => {
            const modifiers = stave.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN, "Barline");
            modifiers.forEach((modifier) => {
                if (modifier.getType() == _stavebarline_js__WEBPACK_IMPORTED_MODULE_5__.BarlineType.REPEAT_BEGIN)
                    modifier.setX(maxX);
            });
        });
        maxX = 0;
        staves.forEach((stave) => {
            const modifiers = stave.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN, "TimeSignature");
            modifiers.forEach((modifier) => {
                if (modifier.getX() > maxX)
                    maxX = modifier.getX();
            });
        });
        staves.forEach((stave) => {
            const modifiers = stave.getModifiers(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_6__.StaveModifierPosition.BEGIN, "TimeSignature");
            modifiers.forEach((modifier) => {
                modifier.setX(maxX);
            });
        });
    }
}
Stave.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_3__.Font.SANS_SERIF,
    size: 8,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_3__.FontWeight.NORMAL,
    style: _font_js__WEBPACK_IMPORTED_MODULE_3__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavebarline.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavebarline.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Barline: () => (/* binding */ Barline),
/* harmony export */   BarlineType: () => (/* binding */ BarlineType)
/* harmony export */ });
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");


var BarlineType;
(function (BarlineType) {
    BarlineType[BarlineType["SINGLE"] = 1] = "SINGLE";
    BarlineType[BarlineType["DOUBLE"] = 2] = "DOUBLE";
    BarlineType[BarlineType["END"] = 3] = "END";
    BarlineType[BarlineType["REPEAT_BEGIN"] = 4] = "REPEAT_BEGIN";
    BarlineType[BarlineType["REPEAT_END"] = 5] = "REPEAT_END";
    BarlineType[BarlineType["REPEAT_BOTH"] = 6] = "REPEAT_BOTH";
    BarlineType[BarlineType["NONE"] = 7] = "NONE";
})(BarlineType || (BarlineType = {}));
class Barline extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_0__.StaveModifier {
    constructor(type) {
        super();
        this.thickness = _tables_js__WEBPACK_IMPORTED_MODULE_1__.Tables.STAVE_LINE_THICKNESS;
        const TYPE = BarlineType;
        this.widths = {};
        this.widths[TYPE.SINGLE] = 5;
        this.widths[TYPE.DOUBLE] = 5;
        this.widths[TYPE.END] = 5;
        this.widths[TYPE.REPEAT_BEGIN] = 5;
        this.widths[TYPE.REPEAT_END] = 5;
        this.widths[TYPE.REPEAT_BOTH] = 5;
        this.widths[TYPE.NONE] = 5;
        this.paddings = {};
        this.paddings[TYPE.SINGLE] = 0;
        this.paddings[TYPE.DOUBLE] = 0;
        this.paddings[TYPE.END] = 0;
        this.paddings[TYPE.REPEAT_BEGIN] = 15;
        this.paddings[TYPE.REPEAT_END] = 15;
        this.paddings[TYPE.REPEAT_BOTH] = 15;
        this.paddings[TYPE.NONE] = 0;
        this.layoutMetricsMap = {};
        this.layoutMetricsMap[TYPE.SINGLE] = {
            xMin: 0,
            xMax: 1,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.layoutMetricsMap[TYPE.DOUBLE] = {
            xMin: -3,
            xMax: 1,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.layoutMetricsMap[TYPE.END] = {
            xMin: -5,
            xMax: 1,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.layoutMetricsMap[TYPE.REPEAT_END] = {
            xMin: -10,
            xMax: 1,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {
            xMin: -2,
            xMax: 10,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {
            xMin: -10,
            xMax: 10,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.layoutMetricsMap[TYPE.NONE] = {
            xMin: 0,
            xMax: 0,
            paddingLeft: 5,
            paddingRight: 5,
        };
        this.setPosition(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_0__.StaveModifierPosition.BEGIN);
        this.setType(type);
    }
    static get CATEGORY() {
        return "Barline";
    }
    static get type() {
        return BarlineType;
    }
    static get typeString() {
        return {
            single: BarlineType.SINGLE,
            double: BarlineType.DOUBLE,
            end: BarlineType.END,
            repeatBegin: BarlineType.REPEAT_BEGIN,
            repeatEnd: BarlineType.REPEAT_END,
            repeatBoth: BarlineType.REPEAT_BOTH,
            none: BarlineType.NONE,
        };
    }
    getType() {
        return this.type;
    }
    setType(type) {
        this.type = typeof type === 'string' ? Barline.typeString[type] : type;
        this.setWidth(this.widths[this.type]);
        this.setPadding(this.paddings[this.type]);
        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);
        return this;
    }
    draw(stave) {
        stave.checkContext();
        this.setRendered();
        switch (this.type) {
            case BarlineType.SINGLE:
                this.drawVerticalBar(stave, this.x, false);
                break;
            case BarlineType.DOUBLE:
                this.drawVerticalBar(stave, this.x, true);
                break;
            case BarlineType.END:
                this.drawVerticalEndBar(stave, this.x);
                break;
            case BarlineType.REPEAT_BEGIN:
                this.drawRepeatBar(stave, this.x, true);
                if (stave.getX() !== this.x) {
                    this.drawVerticalBar(stave, stave.getX());
                }
                break;
            case BarlineType.REPEAT_END:
                this.drawRepeatBar(stave, this.x, false);
                break;
            case BarlineType.REPEAT_BOTH:
                this.drawRepeatBar(stave, this.x, false);
                this.drawRepeatBar(stave, this.x, true);
                break;
            default:
                break;
        }
    }
    drawVerticalBar(stave, x, double_bar) {
        const staveCtx = stave.checkContext();
        const topY = stave.getTopLineTopY();
        const botY = stave.getBottomLineBottomY();
        if (double_bar) {
            staveCtx.fillRect(x - 3, topY, 1, botY - topY);
        }
        staveCtx.fillRect(x, topY, 1, botY - topY);
    }
    drawVerticalEndBar(stave, x) {
        const staveCtx = stave.checkContext();
        const topY = stave.getTopLineTopY();
        const botY = stave.getBottomLineBottomY();
        staveCtx.fillRect(x - 5, topY, 1, botY - topY);
        staveCtx.fillRect(x - 2, topY, 3, botY - topY);
    }
    drawRepeatBar(stave, x, begin) {
        const staveCtx = stave.checkContext();
        const topY = stave.getTopLineTopY();
        const botY = stave.getBottomLineBottomY();
        let x_shift = 3;
        if (!begin) {
            x_shift = -5;
        }
        staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);
        staveCtx.fillRect(x - 2, topY, 3, botY - topY);
        const dot_radius = 2;
        if (begin) {
            x_shift += 4;
        }
        else {
            x_shift -= 4;
        }
        const dot_x = x + x_shift + dot_radius / 2;
        let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();
        y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;
        let dot_y = topY + y_offset + dot_radius / 2;
        staveCtx.beginPath();
        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
        staveCtx.fill();
        dot_y += stave.getSpacingBetweenLines();
        staveCtx.beginPath();
        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
        staveCtx.fill();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/staveconnector.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/staveconnector.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveConnector: () => (/* binding */ StaveConnector)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





function drawBoldDoubleLine(ctx, type, topX, topY, botY) {
    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');
    }
    let x_shift = 3;
    let variableWidth = 3.5;
    const thickLineOffset = 2;
    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {
        x_shift = -5;
        variableWidth = 3;
    }
    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);
    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);
}
class StaveConnector extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(top_stave, bottom_stave) {
        super();
        this.thickness = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.STAVE_LINE_THICKNESS;
        this.width = 3;
        this.top_stave = top_stave;
        this.bottom_stave = bottom_stave;
        this.type = StaveConnector.type.DOUBLE;
        this.resetFont();
        this.x_shift = 0;
        this.texts = [];
    }
    static get CATEGORY() {
        return "StaveConnector";
    }
    setType(type) {
        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;
        if (Object.values(StaveConnector.type).includes(newType)) {
            this.type = newType;
        }
        return this;
    }
    getType() {
        return this.type;
    }
    setText(text, options = {}) {
        this.texts.push({
            content: text,
            options: Object.assign({ shift_x: 0, shift_y: 0 }, options),
        });
        return this;
    }
    setXShift(x_shift) {
        if (typeof x_shift !== 'number') {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidType', 'x_shift must be a Number');
        }
        this.x_shift = x_shift;
        return this;
    }
    getXShift() {
        return this.x_shift;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        let topY = this.top_stave.getYForLine(0);
        let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;
        let width = this.width;
        let topX = this.top_stave.getX();
        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||
            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||
            this.type === StaveConnector.type.THIN_DOUBLE;
        if (isRightSidedConnector) {
            topX = this.top_stave.getX() + this.top_stave.getWidth();
        }
        let attachment_height = botY - topY;
        switch (this.type) {
            case StaveConnector.type.SINGLE:
                width = 1;
                break;
            case StaveConnector.type.SINGLE_LEFT:
                width = 1;
                break;
            case StaveConnector.type.SINGLE_RIGHT:
                width = 1;
                break;
            case StaveConnector.type.DOUBLE:
                topX -= this.width + 2;
                topY -= this.thickness;
                attachment_height += 0.5;
                break;
            case StaveConnector.type.BRACE: {
                width = 12;
                const x1 = this.top_stave.getX() - 2 + this.x_shift;
                const y1 = topY;
                const x3 = x1;
                const y3 = botY;
                const x2 = x1 - width;
                const y2 = y1 + attachment_height / 2.0;
                const cpx1 = x2 - 0.9 * width;
                const cpy1 = y1 + 0.2 * attachment_height;
                const cpx2 = x1 + 1.1 * width;
                const cpy2 = y2 - 0.135 * attachment_height;
                const cpx3 = cpx2;
                const cpy3 = y2 + 0.135 * attachment_height;
                const cpx4 = cpx1;
                const cpy4 = y3 - 0.2 * attachment_height;
                const cpx5 = x2 - width;
                const cpy5 = cpy4;
                const cpx6 = x1 + 0.4 * width;
                const cpy6 = y2 + 0.135 * attachment_height;
                const cpx7 = cpx6;
                const cpy7 = y2 - 0.135 * attachment_height;
                const cpx8 = cpx5;
                const cpy8 = cpy1;
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);
                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);
                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);
                ctx.fill();
                ctx.stroke();
                break;
            }
            case StaveConnector.type.BRACKET:
                topY -= 6;
                botY += 6;
                attachment_height = botY - topY;
                _glyph_js__WEBPACK_IMPORTED_MODULE_2__.Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');
                _glyph_js__WEBPACK_IMPORTED_MODULE_2__.Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');
                topX -= this.width + 2;
                break;
            case StaveConnector.type.BOLD_DOUBLE_LEFT:
                drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);
                break;
            case StaveConnector.type.BOLD_DOUBLE_RIGHT:
                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);
                break;
            case StaveConnector.type.THIN_DOUBLE:
                width = 1;
                attachment_height -= this.thickness;
                break;
            case StaveConnector.type.NONE:
                break;
            default:
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);
        }
        if (this.type !== StaveConnector.type.BRACE &&
            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&
            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&
            this.type !== StaveConnector.type.NONE) {
            ctx.fillRect(topX, topY, width, attachment_height);
        }
        if (this.type === StaveConnector.type.THIN_DOUBLE) {
            ctx.fillRect(topX - 3, topY, width, attachment_height);
        }
        ctx.save();
        ctx.setLineWidth(2);
        ctx.setFont(this.textFont);
        for (let i = 0; i < this.texts.length; i++) {
            const text = this.texts[i];
            const text_width = ctx.measureText('' + text.content).width;
            const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;
            const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;
            ctx.fillText('' + text.content, x, y + 4);
        }
        ctx.restore();
    }
}
StaveConnector.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_1__.Font.SERIF,
    size: 16,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_1__.FontWeight.NORMAL,
    style: _font_js__WEBPACK_IMPORTED_MODULE_1__.FontStyle.NORMAL,
};
StaveConnector.type = {
    SINGLE_RIGHT: 0,
    SINGLE_LEFT: 1,
    SINGLE: 1,
    DOUBLE: 2,
    BRACE: 3,
    BRACKET: 4,
    BOLD_DOUBLE_LEFT: 5,
    BOLD_DOUBLE_RIGHT: 6,
    THIN_DOUBLE: 7,
    NONE: 8,
};
StaveConnector.typeString = {
    singleRight: StaveConnector.type.SINGLE_RIGHT,
    singleLeft: StaveConnector.type.SINGLE_LEFT,
    single: StaveConnector.type.SINGLE,
    double: StaveConnector.type.DOUBLE,
    brace: StaveConnector.type.BRACE,
    bracket: StaveConnector.type.BRACKET,
    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,
    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,
    thinDouble: StaveConnector.type.THIN_DOUBLE,
    none: StaveConnector.type.NONE,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavehairpin.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavehairpin.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveHairpin: () => (/* binding */ StaveHairpin)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



class StaveHairpin extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(notes, type) {
        super();
        this.setNotes(notes);
        this.hairpin = type;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.BELOW;
        this.render_options = {
            height: 10,
            y_shift: 0,
            left_shift_px: 0,
            right_shift_px: 0,
            right_shift_ticks: 0,
            left_shift_ticks: 0,
        };
    }
    static get CATEGORY() {
        return "StaveHairpin";
    }
    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {
        var _a, _b;
        const ppt = formatter.pixelsPerTick;
        if (ppt == null) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');
        }
        const l_shift_px = ppt * ((_a = options.left_shift_ticks) !== null && _a !== void 0 ? _a : 0);
        const r_shift_px = ppt * ((_b = options.right_shift_ticks) !== null && _b !== void 0 ? _b : 0);
        const hairpin_options = {
            height: options.height,
            y_shift: options.y_shift,
            left_shift_px: l_shift_px,
            right_shift_px: r_shift_px,
            right_shift_ticks: 0,
            left_shift_ticks: 0,
        };
        new StaveHairpin({
            first_note: notes.first_note,
            last_note: notes.last_note,
        }, type)
            .setContext(ctx)
            .setRenderOptions(hairpin_options)
            .setPosition(position)
            .draw();
    }
    setPosition(position) {
        if (position === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE || position === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.BELOW) {
            this.position = position;
        }
        return this;
    }
    setRenderOptions(options) {
        if (options.height != null &&
            options.y_shift != null &&
            options.left_shift_px != null &&
            options.right_shift_px != null) {
            this.render_options = options;
        }
        return this;
    }
    setNotes(notes) {
        if (!notes.first_note && !notes.last_note) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');
        }
        this.notes = notes;
        this.first_note = notes.first_note;
        this.last_note = notes.last_note;
        return this;
    }
    renderHairpin(params) {
        const ctx = this.checkContext();
        let dis = this.render_options.y_shift + 20;
        let y_shift = params.first_y;
        if (this.position === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE) {
            dis = -dis + 30;
            y_shift = params.first_y - params.staff_height;
        }
        const l_shift = this.render_options.left_shift_px;
        const r_shift = this.render_options.right_shift_px;
        ctx.beginPath();
        switch (this.hairpin) {
            case StaveHairpin.type.CRESC:
                ctx.moveTo(params.last_x + r_shift, y_shift + dis);
                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);
                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);
                break;
            case StaveHairpin.type.DECRESC:
                ctx.moveTo(params.first_x + l_shift, y_shift + dis);
                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);
                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);
                break;
            default:
                break;
        }
        ctx.stroke();
        ctx.closePath();
    }
    draw() {
        this.checkContext();
        this.setRendered();
        const firstNote = this.first_note;
        const lastNote = this.last_note;
        if (!firstNote || !lastNote)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('NoNote', 'Notes required to draw');
        const start = firstNote.getModifierStartXY(this.position, 0);
        const end = lastNote.getModifierStartXY(this.position, 0);
        this.renderHairpin({
            first_x: start.x,
            last_x: end.x,
            first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),
            last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),
            staff_height: firstNote.checkStave().getHeight(),
        });
    }
}
StaveHairpin.type = {
    CRESC: 1,
    DECRESC: 2,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/staveline.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/staveline.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveLine: () => (/* binding */ StaveLine)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _textnote_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/textnote.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




function drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.lineTo(x0, y0);
    ctx.closePath();
    ctx.fill();
}
class StaveLine extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(notes) {
        super();
        this.setNotes(notes);
        this.text = '';
        this.resetFont();
        this.render_options = {
            padding_left: 4,
            padding_right: 3,
            line_width: 1,
            line_dash: undefined,
            rounded_end: true,
            color: undefined,
            draw_start_arrow: false,
            draw_end_arrow: false,
            arrowhead_length: 10,
            arrowhead_angle: Math.PI / 8,
            text_position_vertical: StaveLine.TextVerticalPosition.TOP,
            text_justification: StaveLine.TextJustification.CENTER,
        };
    }
    static get CATEGORY() {
        return "StaveLine";
    }
    setText(text) {
        this.text = text;
        return this;
    }
    setNotes(notes) {
        if (!notes.first_note && !notes.last_note) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');
        }
        if (!notes.first_indices)
            notes.first_indices = [0];
        if (!notes.last_indices)
            notes.last_indices = [0];
        if (notes.first_indices.length !== notes.last_indices.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadArguments', 'Connected notes must have same number of indices.');
        }
        this.notes = notes;
        this.first_note = notes.first_note;
        this.first_indices = notes.first_indices;
        this.last_note = notes.last_note;
        this.last_indices = notes.last_indices;
        return this;
    }
    applyLineStyle() {
        const ctx = this.checkContext();
        const render_options = this.render_options;
        if (render_options.line_dash) {
            ctx.setLineDash(render_options.line_dash);
        }
        if (render_options.line_width) {
            ctx.setLineWidth(render_options.line_width);
        }
        if (render_options.rounded_end) {
            ctx.setLineCap('round');
        }
        else {
            ctx.setLineCap('square');
        }
    }
    applyFontStyle() {
        const ctx = this.checkContext();
        ctx.setFont(this.textFont);
        const render_options = this.render_options;
        const color = render_options.color;
        if (color) {
            ctx.setStrokeStyle(color);
            ctx.setFillStyle(color);
        }
    }
    drawArrowLine(ctx, pt1, pt2) {
        const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;
        const x1 = pt1.x;
        const y1 = pt1.y;
        const x2 = pt2.x;
        const y2 = pt2.y;
        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;
        let end_x;
        let end_y;
        let start_x;
        let start_y;
        if (this.render_options.draw_end_arrow || both_arrows) {
            end_x = Math.round(x1 + (x2 - x1) * ratio);
            end_y = Math.round(y1 + (y2 - y1) * ratio);
        }
        else {
            end_x = x2;
            end_y = y2;
        }
        if (this.render_options.draw_start_arrow || both_arrows) {
            start_x = x1 + (x2 - x1) * (1 - ratio);
            start_y = y1 + (y2 - y1) * (1 - ratio);
        }
        else {
            start_x = x1;
            start_y = y1;
        }
        if (this.render_options.color) {
            ctx.setStrokeStyle(this.render_options.color);
            ctx.setFillStyle(this.render_options.color);
        }
        ctx.beginPath();
        ctx.moveTo(start_x, start_y);
        ctx.lineTo(end_x, end_y);
        ctx.stroke();
        ctx.closePath();
        const line_angle = Math.atan2(y2 - y1, x2 - x1);
        const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));
        let angle1;
        let angle2;
        let top_x;
        let top_y;
        let bottom_x;
        let bottom_y;
        if (this.render_options.draw_end_arrow || both_arrows) {
            angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;
            top_x = x2 + Math.cos(angle1) * h;
            top_y = y2 + Math.sin(angle1) * h;
            angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;
            bottom_x = x2 + Math.cos(angle2) * h;
            bottom_y = y2 + Math.sin(angle2) * h;
            drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);
        }
        if (this.render_options.draw_start_arrow || both_arrows) {
            angle1 = line_angle + this.render_options.arrowhead_angle;
            top_x = x1 + Math.cos(angle1) * h;
            top_y = y1 + Math.sin(angle1) * h;
            angle2 = line_angle - this.render_options.arrowhead_angle;
            bottom_x = x1 + Math.cos(angle2) * h;
            bottom_y = y1 + Math.sin(angle2) * h;
            drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);
        }
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        const first_note = this.first_note;
        const last_note = this.last_note;
        const render_options = this.render_options;
        ctx.save();
        this.applyLineStyle();
        let start_position = { x: 0, y: 0 };
        let end_position = { x: 0, y: 0 };
        this.first_indices.forEach((first_index, i) => {
            const last_index = this.last_indices[i];
            start_position = first_note.getModifierStartXY(2, first_index);
            end_position = last_note.getModifierStartXY(1, last_index);
            const upwards_slope = start_position.y > end_position.y;
            start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;
            end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;
            const notehead_width = first_note.getGlyph().getWidth();
            const first_displaced = first_note.getKeyProps()[first_index].displaced;
            if (first_displaced && first_note.getStemDirection() === 1) {
                start_position.x += notehead_width + render_options.padding_left;
            }
            const last_displaced = last_note.getKeyProps()[last_index].displaced;
            if (last_displaced && last_note.getStemDirection() === -1) {
                end_position.x -= notehead_width + render_options.padding_right;
            }
            start_position.y += upwards_slope ? -3 : 1;
            end_position.y += upwards_slope ? 2 : 0;
            this.drawArrowLine(ctx, start_position, end_position);
        });
        ctx.restore();
        const text_width = ctx.measureText(this.text).width;
        const justification = render_options.text_justification;
        let x = 0;
        if (justification === StaveLine.TextJustification.LEFT) {
            x = start_position.x;
        }
        else if (justification === StaveLine.TextJustification.CENTER) {
            const delta_x = end_position.x - start_position.x;
            const center_x = delta_x / 2 + start_position.x;
            x = center_x - text_width / 2;
        }
        else if (justification === StaveLine.TextJustification.RIGHT) {
            x = end_position.x - text_width;
        }
        let y = 0;
        const vertical_position = render_options.text_position_vertical;
        if (vertical_position === StaveLine.TextVerticalPosition.TOP) {
            y = first_note.checkStave().getYForTopText();
        }
        else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {
            y = first_note.checkStave().getYForBottomText(_tables_js__WEBPACK_IMPORTED_MODULE_1__.Tables.TEXT_HEIGHT_OFFSET_HACK);
        }
        ctx.save();
        this.applyFontStyle();
        ctx.fillText(this.text, x, y);
        ctx.restore();
        return this;
    }
}
StaveLine.TEXT_FONT = Object.assign({}, _element_js__WEBPACK_IMPORTED_MODULE_0__.Element.TEXT_FONT);
StaveLine.TextVerticalPosition = {
    TOP: 1,
    BOTTOM: 2,
};
StaveLine.TextJustification = _textnote_js__WEBPACK_IMPORTED_MODULE_2__.TextJustification;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveModifier: () => (/* binding */ StaveModifier),
/* harmony export */   StaveModifierPosition: () => (/* binding */ StaveModifierPosition)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


var StaveModifierPosition;
(function (StaveModifierPosition) {
    StaveModifierPosition[StaveModifierPosition["CENTER"] = 0] = "CENTER";
    StaveModifierPosition[StaveModifierPosition["LEFT"] = 1] = "LEFT";
    StaveModifierPosition[StaveModifierPosition["RIGHT"] = 2] = "RIGHT";
    StaveModifierPosition[StaveModifierPosition["ABOVE"] = 3] = "ABOVE";
    StaveModifierPosition[StaveModifierPosition["BELOW"] = 4] = "BELOW";
    StaveModifierPosition[StaveModifierPosition["BEGIN"] = 5] = "BEGIN";
    StaveModifierPosition[StaveModifierPosition["END"] = 6] = "END";
})(StaveModifierPosition || (StaveModifierPosition = {}));
class StaveModifier extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor() {
        super();
        this.width = 0;
        this.x = 0;
        this.padding = 10;
        this.position = StaveModifierPosition.ABOVE;
    }
    static get CATEGORY() {
        return "StaveModifier";
    }
    static get Position() {
        return StaveModifierPosition;
    }
    getPosition() {
        return this.position;
    }
    setPosition(position) {
        this.position = position;
        return this;
    }
    getStave() {
        return this.stave;
    }
    checkStave() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(this.stave, 'NoStave', 'No stave attached to instance.');
    }
    setStave(stave) {
        this.stave = stave;
        return this;
    }
    getWidth() {
        return this.width;
    }
    setWidth(width) {
        this.width = width;
        return this;
    }
    getX() {
        return this.x;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    placeGlyphOnLine(glyph, stave, line, customShift = 0) {
        glyph.setYShift(stave.getYForLine(line !== null && line !== void 0 ? line : 0) - stave.getYForGlyphs() + customShift);
    }
    getPadding(index) {
        return index !== undefined && index < 2 ? 0 : this.padding;
    }
    setPadding(padding) {
        this.padding = padding;
        return this;
    }
    setLayoutMetrics(layoutMetrics) {
        this.layoutMetrics = layoutMetrics;
        return this;
    }
    getLayoutMetrics() {
        return this.layoutMetrics;
    }
    draw(...args) {
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavenote.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavenote.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveNote: () => (/* binding */ StaveNote)
/* harmony export */ });
/* harmony import */ var _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boundingbox.js */ "./node_modules/vexflow_smoosic/build/esm/src/boundingbox.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _notehead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notehead.js */ "./node_modules/vexflow_smoosic/build/esm/src/notehead.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _stemmablenote_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stemmablenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stemmablenote.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







function showDeprecationWarningForNoteHeads() {
    console.warn('StaveNote.note_heads is deprecated. Use StaveNote.noteHeads instead.', 'This accessor will be removed in VexFlow 5.0.');
}
function L(...args) {
    if (StaveNote.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.log)('Vex.Flow.StaveNote', args);
}
const isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? note.keyProps.length - 1 : 0);
function shiftRestVertical(rest, note, dir) {
    const delta = dir;
    rest.line += delta;
    rest.maxLine += delta;
    rest.minLine += delta;
    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);
}
function centerRest(rest, noteU, noteL) {
    const delta = rest.line - (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.midLine)(noteU.minLine, noteL.maxLine);
    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);
    rest.line -= delta;
    rest.maxLine -= delta;
    rest.minLine -= delta;
}
class StaveNote extends _stemmablenote_js__WEBPACK_IMPORTED_MODULE_4__.StemmableNote {
    constructor(noteStruct) {
        var _a, _b, _c;
        super(noteStruct);
        this.minLine = 0;
        this.maxLine = 0;
        this.sortedKeyProps = [];
        this.ledgerLineStyle = {};
        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';
        this.octave_shift = (_b = noteStruct.octave_shift) !== null && _b !== void 0 ? _b : 0;
        this.glyph = _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.getGlyphProps(this.duration, this.noteType);
        (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.defined)(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);
        this.displaced = false;
        this.dot_shiftY = 0;
        this.use_default_head_x = false;
        this._noteHeads = [];
        this.modifiers = [];
        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_scale: noteStruct.glyph_font_scale || _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.NOTATION_FONT_SCALE, stroke_px: noteStruct.stroke_px || StaveNote.LEDGER_LINE_OFFSET });
        this.calculateKeyProps();
        this.buildStem();
        if (noteStruct.auto_stem) {
            this.autoStem();
        }
        else {
            this.setStemDirection((_c = noteStruct.stem_direction) !== null && _c !== void 0 ? _c : _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP);
        }
        this.reset();
        this.buildFlag();
    }
    static get CATEGORY() {
        return "StaveNote";
    }
    static get STEM_UP() {
        return _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP;
    }
    static get STEM_DOWN() {
        return _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN;
    }
    static get LEDGER_LINE_OFFSET() {
        return 3;
    }
    static get minNoteheadPadding() {
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.currentMusicFont();
        return musicFont.lookupMetric('glyphs.noteHead.minPadding');
    }
    static format(notes, state) {
        if (!notes || notes.length < 2)
            return false;
        const notesList = [];
        for (let i = 0; i < notes.length; i++) {
            const props = notes[i].sortedKeyProps;
            const line = props[0].keyProps.line;
            let minL = props[props.length - 1].keyProps.line;
            const stemDirection = notes[i].getStemDirection();
            const stemMax = notes[i].getStemLength() / 10;
            const stemMin = notes[i].getStemMinimumLength() / 10;
            let maxL;
            if (notes[i].isRest()) {
                maxL = line + notes[i].glyph.line_above;
                minL = line - notes[i].glyph.line_below;
            }
            else {
                maxL =
                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;
                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;
            }
            notesList.push({
                line: props[0].keyProps.line,
                maxLine: maxL,
                minLine: minL,
                isrest: notes[i].isRest(),
                stemDirection: stemDirection,
                stemMax,
                stemMin,
                voice_shift: notes[i].getVoiceShiftWidth(),
                is_displaced: notes[i].isDisplaced(),
                note: notes[i],
            });
        }
        let voices = 0;
        let noteU = undefined;
        let noteM = undefined;
        let noteL = undefined;
        const draw = [false, false, false];
        for (let i = 0; i < notesList.length; i++) {
            draw[i] = notesList[i].note.render_options.draw == false ? false : true;
        }
        if (draw[0] && draw[1] && draw[2]) {
            voices = 3;
            noteU = notesList[0];
            noteM = notesList[1];
            noteL = notesList[2];
        }
        else if (draw[0] && draw[1]) {
            voices = 2;
            noteU = notesList[0];
            noteL = notesList[1];
        }
        else if (draw[0] && draw[2]) {
            voices = 2;
            noteU = notesList[0];
            noteL = notesList[2];
        }
        else if (draw[1] && draw[2]) {
            voices = 2;
            noteU = notesList[1];
            noteL = notesList[2];
        }
        else {
            return true;
        }
        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {
            noteU = notesList[1];
            noteL = notesList[0];
        }
        const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);
        let xShift = 0;
        if (voices === 2) {
            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;
            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {
                noteL.note.render_options.draw = false;
            }
            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {
                if (noteU.isrest) {
                    shiftRestVertical(noteU, noteL, 1);
                }
                else if (noteL.isrest) {
                    shiftRestVertical(noteL, noteU, -1);
                }
                else {
                    const lineDiff = Math.abs(noteU.line - noteL.line);
                    if (noteU.note.hasStem() && noteL.note.hasStem()) {
                        let whiteNoteHeadCount = 0;
                        let blackNoteHeadCount = 0;
                        if (_tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.durationToNumber(noteU.note.duration) === 2) {
                            whiteNoteHeadCount++;
                        }
                        else if (_tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.durationToNumber(noteU.note.duration) > 2) {
                            blackNoteHeadCount++;
                        }
                        if (_tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.durationToNumber(noteL.note.duration) === 2) {
                            whiteNoteHeadCount++;
                        }
                        else if (_tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.durationToNumber(noteL.note.duration) > 2) {
                            blackNoteHeadCount++;
                        }
                        if ((whiteNoteHeadCount !== 2 && blackNoteHeadCount !== 2) ||
                            noteU.note.getModifiersByType("Dot").length !== noteL.note.getModifiersByType("Dot").length) {
                            xShift = voiceXShift + 2;
                            if (noteU.stemDirection === noteL.stemDirection) {
                                noteU.note.setXShift(xShift);
                            }
                            else {
                                noteL.note.setXShift(xShift);
                            }
                        }
                        else if (lineDiff < 1 && lineDiff > 0) {
                            xShift = voiceXShift + 2;
                            if (noteU.stemDirection === noteL.stemDirection) {
                                noteU.note.setXShift(xShift);
                            }
                            else {
                                noteL.note.setXShift(xShift);
                            }
                        }
                        else if (noteU.note.voice !== noteL.note.voice) {
                            if (noteU.stemDirection === noteL.stemDirection) {
                                if (noteU.line != noteL.line) {
                                    xShift = voiceXShift + 2;
                                    noteU.note.setXShift(xShift);
                                }
                                else {
                                    if (noteL.stemDirection === 1) {
                                        noteL.stemDirection = -1;
                                        noteL.note.setStemDirection(-1);
                                    }
                                }
                            }
                        }
                    }
                    else if (lineDiff < 1) {
                        xShift = voiceXShift + 2;
                        if (noteU.stemDirection === noteL.stemDirection) {
                            noteU.note.setXShift(xShift);
                        }
                        else {
                            noteL.note.setXShift(xShift);
                        }
                    }
                    else if (noteU.note.hasStem()) {
                        noteU.stemDirection = -noteU.note.getStemDirection();
                        noteU.note.setStemDirection(noteU.stemDirection);
                    }
                    else if (noteL.note.hasStem()) {
                        noteL.stemDirection = -noteL.note.getStemDirection();
                        noteL.note.setStemDirection(noteL.stemDirection);
                    }
                }
            }
            state.right_shift += xShift;
            return true;
        }
        if (!noteM)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('InvalidState', 'noteM not defined.');
        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {
            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {
                const restHeight = noteM.maxLine - noteM.minLine;
                const space = noteU.minLine - noteL.maxLine;
                if (restHeight < space) {
                    centerRest(noteM, noteU, noteL);
                }
                else {
                    xShift = voiceXShift + 2;
                    noteM.note.setXShift(xShift);
                    if (noteL.note.hasBeam() === false) {
                        noteL.stemDirection = -1;
                        noteL.note.setStemDirection(-1);
                    }
                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {
                        noteU.stemDirection = 1;
                        noteU.note.setStemDirection(1);
                    }
                }
                state.right_shift += xShift;
                return true;
            }
        }
        if (noteU.isrest && noteM.isrest && noteL.isrest) {
            noteU.note.render_options.draw = false;
            noteL.note.render_options.draw = false;
            state.right_shift += xShift;
            return true;
        }
        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {
            noteM.note.render_options.draw = false;
        }
        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {
            noteM.note.render_options.draw = false;
        }
        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {
            shiftRestVertical(noteU, noteM, 1);
        }
        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {
            shiftRestVertical(noteL, noteM, -1);
        }
        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {
            xShift = voiceXShift + 2;
            noteM.note.setXShift(xShift);
            if (noteL.note.hasBeam() === false) {
                noteL.stemDirection = -1;
                noteL.note.setStemDirection(-1);
            }
            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {
                noteU.stemDirection = 1;
                noteU.note.setStemDirection(1);
            }
        }
        state.right_shift += xShift;
        return true;
    }
    static postFormat(notes) {
        if (!notes)
            return false;
        notes.forEach((note) => note.postFormat());
        return true;
    }
    reset() {
        super.reset();
        const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());
        this.buildNoteHeads();
        this._noteHeads.forEach((noteHead, index) => {
            const noteHeadStyle = noteHeadStyles[index];
            if (noteHeadStyle)
                noteHead.setStyle(noteHeadStyle);
        });
        const stave = this.stave;
        if (stave) {
            this._noteHeads.forEach((head) => head.setStave(stave));
        }
        this.calcNoteDisplacements();
        return this;
    }
    setBeam(beam) {
        this.beam = beam;
        this.calcNoteDisplacements();
        if (this.stem) {
            this.stem.setExtension(this.getStemExtension());
        }
        return this;
    }
    buildStem() {
        this.setStem(new _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem({ hide: !!this.isRest() }));
        return this;
    }
    buildNoteHeads() {
        this._noteHeads = [];
        const stemDirection = this.getStemDirection();
        const keys = this.getKeys();
        let lastLine = undefined;
        let lineDiff = undefined;
        let displaced = false;
        let start;
        let end;
        let step;
        if (stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
            start = 0;
            end = keys.length;
            step = 1;
        }
        else {
            start = keys.length - 1;
            end = -1;
            step = -1;
        }
        for (let i = start; i !== end; i += step) {
            const noteProps = this.sortedKeyProps[i].keyProps;
            const line = noteProps.line;
            if (lastLine === undefined) {
                lastLine = line;
            }
            else {
                lineDiff = Math.abs(lastLine - line);
                if (lineDiff === 0 || lineDiff === 0.5) {
                    displaced = !displaced;
                }
                else {
                    displaced = false;
                    this.use_default_head_x = true;
                }
            }
            lastLine = line;
            const notehead = new _notehead_js__WEBPACK_IMPORTED_MODULE_2__.NoteHead({
                duration: this.duration,
                note_type: this.noteType,
                displaced,
                stem_direction: stemDirection,
                custom_glyph_code: noteProps.code,
                glyph_font_scale: this.render_options.glyph_font_scale,
                x_shift: noteProps.shift_right,
                stem_up_x_offset: noteProps.stem_up_x_offset,
                stem_down_x_offset: noteProps.stem_down_x_offset,
                line: noteProps.line,
            });
            this.addChildElement(notehead);
            this._noteHeads[this.sortedKeyProps[i].index] = notehead;
        }
    }
    autoStem() {
        this.setStemDirection(this.calculateOptimalStemDirection());
    }
    calculateOptimalStemDirection() {
        this.minLine = this.sortedKeyProps[0].keyProps.line;
        this.maxLine = this.sortedKeyProps[this.keyProps.length - 1].keyProps.line;
        const MIDDLE_LINE = 3;
        const decider = (this.minLine + this.maxLine) / 2;
        const stemDirection = decider < MIDDLE_LINE ? _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP : _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN;
        return stemDirection;
    }
    calculateKeyProps() {
        let lastLine;
        for (let i = 0; i < this.keys.length; ++i) {
            const key = this.keys[i];
            if (this.glyph.rest)
                this.glyph.position = key;
            const options = { octave_shift: this.octave_shift || 0, duration: this.duration };
            const props = _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.keyProperties(key, this.clef, options);
            if (!props) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);
            }
            if (props.key === 'R') {
                if (this.duration === '1' || this.duration === 'w') {
                    props.line = 4;
                }
                else {
                    props.line = 3;
                }
            }
            const line = props.line;
            if (lastLine == undefined) {
                lastLine = line;
            }
            else {
                if (Math.abs(lastLine - line) === 0.5) {
                    this.displaced = true;
                    props.displaced = true;
                    if (this.keyProps.length > 0) {
                        this.keyProps[i - 1].displaced = true;
                    }
                }
            }
            lastLine = line;
            this.keyProps.push(props);
        }
        this.keyProps.forEach((keyProps, index) => {
            this.sortedKeyProps.push({ keyProps, index });
        });
        this.sortedKeyProps.sort((a, b) => a.keyProps.line - b.keyProps.line);
    }
    getBoundingBox() {
        var _a, _b;
        if (!this.preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
        }
        const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();
        const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;
        let minY = 0;
        let maxY = 0;
        const halfLineSpacing = ((_b = (_a = this.getStave()) === null || _a === void 0 ? void 0 : _a.getSpacingBetweenLines()) !== null && _b !== void 0 ? _b : 0) / 2;
        const lineSpacing = halfLineSpacing * 2;
        if (this.isRest()) {
            const y = this.ys[0];
            const frac = _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.durationToFraction(this.duration);
            if (frac.equals(1) || frac.equals(2)) {
                minY = y - halfLineSpacing;
                maxY = y + halfLineSpacing;
            }
            else {
                minY = y - this.glyph.line_above * lineSpacing;
                maxY = y + this.glyph.line_below * lineSpacing;
            }
        }
        else if (this.glyph.stem) {
            const ys = this.getStemExtents();
            ys.baseY += halfLineSpacing * this.getStemDirection();
            minY = Math.min(ys.topY, ys.baseY);
            maxY = Math.max(ys.topY, ys.baseY);
        }
        else {
            minY = 0;
            maxY = 0;
            for (let i = 0; i < this.ys.length; ++i) {
                const yy = this.ys[i];
                if (i === 0) {
                    minY = yy;
                    maxY = yy;
                }
                else {
                    minY = Math.min(yy, minY);
                    maxY = Math.max(yy, maxY);
                }
            }
            minY -= halfLineSpacing;
            maxY += halfLineSpacing;
        }
        return new _boundingbox_js__WEBPACK_IMPORTED_MODULE_0__.BoundingBox(x, minY, w, maxY - minY);
    }
    getLineNumber(isTopNote) {
        if (!this.keyProps.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('NoKeyProps', "Can't get bottom note line, because note is not initialized properly.");
        }
        let resultLine = this.keyProps[0].line;
        for (let i = 0; i < this.keyProps.length; i++) {
            const thisLine = this.keyProps[i].line;
            if (isTopNote) {
                if (thisLine > resultLine)
                    resultLine = thisLine;
            }
            else {
                if (thisLine < resultLine)
                    resultLine = thisLine;
            }
        }
        return resultLine;
    }
    isRest() {
        return this.glyph.rest;
    }
    isChord() {
        return !this.isRest() && this.keys.length > 1;
    }
    hasStem() {
        return this.glyph.stem;
    }
    hasFlag() {
        return super.hasFlag() && !this.isRest();
    }
    getStemX() {
        if (this.noteType === 'r') {
            return this.getCenterGlyphX();
        }
        else {
            return super.getStemX() + (this.stem_direction ? _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH / (2 * -this.stem_direction) : 0);
        }
    }
    getYForTopText(textLine) {
        const extents = this.getStemExtents();
        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));
    }
    getYForBottomText(textLine) {
        const extents = this.getStemExtents();
        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);
    }
    setStave(stave) {
        super.setStave(stave);
        const ys = this._noteHeads.map((notehead) => {
            notehead.setStave(stave);
            return notehead.getY();
        });
        this.setYs(ys);
        if (this.stem) {
            const { y_top, y_bottom } = this.getNoteHeadBounds();
            this.stem.setYBounds(y_top, y_bottom);
        }
        return this;
    }
    isDisplaced() {
        return this.displaced;
    }
    setNoteDisplaced(displaced) {
        this.displaced = displaced;
        return this;
    }
    getTieRightX() {
        let tieStartX = this.getAbsoluteX();
        tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;
        if (this.modifierContext)
            tieStartX += this.modifierContext.getRightShift();
        return tieStartX;
    }
    getTieLeftX() {
        let tieEndX = this.getAbsoluteX();
        tieEndX += this.x_shift - this.leftDisplacedHeadPx;
        return tieEndX;
    }
    getLineForRest() {
        let restLine = this.keyProps[0].line;
        if (this.keyProps.length > 1) {
            const lastLine = this.keyProps[this.keyProps.length - 1].line;
            const top = Math.max(restLine, lastLine);
            const bot = Math.min(restLine, lastLine);
            restLine = (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.midLine)(top, bot);
        }
        return restLine;
    }
    getModifierStartXY(position, index, options = {}) {
        var _a, _b;
        if (!this.preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
        }
        if (this.ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('NoYValues', 'No Y-Values calculated for this note.');
        }
        const { ABOVE, BELOW, LEFT, RIGHT } = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position;
        let x = 0;
        if (position === LEFT) {
            x = -1 * 2;
        }
        else if (position === RIGHT) {
            x = this.getGlyphWidth() + this.x_shift + 2;
            if (this.stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP &&
                this.hasFlag() &&
                (options.forceFlagRight || isInnerNoteIndex(this, index))) {
                x += (_b = (_a = this === null || this === void 0 ? void 0 : this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().width) !== null && _b !== void 0 ? _b : 0;
            }
        }
        else if (position === BELOW || position === ABOVE) {
            x = this.getGlyphWidth() / 2;
        }
        return {
            x: this.getAbsoluteX() + x,
            y: this.ys[index],
        };
    }
    setStyle(style) {
        return super.setGroupStyle(style);
    }
    setStemStyle(style) {
        const stem = this.getStem();
        if (stem)
            stem.setStyle(style);
        return this;
    }
    getStemStyle() {
        var _a;
        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();
    }
    setLedgerLineStyle(style) {
        this.ledgerLineStyle = style;
    }
    getLedgerLineStyle() {
        return this.ledgerLineStyle;
    }
    setFlagStyle(style) {
        this.flagStyle = style;
    }
    getFlagStyle() {
        return this.flagStyle;
    }
    setKeyStyle(index, style) {
        this._noteHeads[index].setStyle(style);
        return this;
    }
    setKeyLine(index, line) {
        this.keyProps[index].line = line;
        this.reset();
        return this;
    }
    getKeyLine(index) {
        return this.keyProps[index].line;
    }
    getVoiceShiftWidth() {
        return this.getGlyphWidth() * (this.displaced ? 2 : 1);
    }
    calcNoteDisplacements() {
        this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN ? this.getGlyphWidth() : 0);
        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? this.getGlyphWidth() : 0);
    }
    preFormat() {
        if (this.preFormatted)
            return;
        let noteHeadPadding = 0;
        if (this.modifierContext) {
            this.modifierContext.preFormat();
            if (this.modifierContext.getWidth() === 0) {
                noteHeadPadding = StaveNote.minNoteheadPadding;
            }
        }
        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;
        if (this.shouldDrawFlag() && this.stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
            width += this.getGlyphWidth();
        }
        this.setWidth(width);
        this.preFormatted = true;
    }
    getNoteHeadBounds() {
        let yTop = +Infinity;
        let yBottom = -Infinity;
        let nonDisplacedX;
        let displacedX;
        let highestLine = this.checkStave().getNumLines();
        let lowestLine = 1;
        let highestDisplacedLine;
        let lowestDisplacedLine;
        let highestNonDisplacedLine = highestLine;
        let lowestNonDisplacedLine = lowestLine;
        this._noteHeads.forEach((notehead) => {
            const line = notehead.getLine();
            const y = notehead.getY();
            yTop = Math.min(y, yTop);
            yBottom = Math.max(y, yBottom);
            if (displacedX === undefined && notehead.isDisplaced()) {
                displacedX = notehead.getAbsoluteX();
            }
            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {
                nonDisplacedX = notehead.getAbsoluteX();
            }
            highestLine = Math.max(line, highestLine);
            lowestLine = Math.min(line, lowestLine);
            if (notehead.isDisplaced()) {
                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);
                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);
            }
            else {
                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);
                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);
            }
        }, this);
        return {
            y_top: yTop,
            y_bottom: yBottom,
            displaced_x: displacedX,
            non_displaced_x: nonDisplacedX,
            highest_line: highestLine,
            lowest_line: lowestLine,
            highest_displaced_line: highestDisplacedLine,
            lowest_displaced_line: lowestDisplacedLine,
            highest_non_displaced_line: highestNonDisplacedLine,
            lowest_non_displaced_line: lowestNonDisplacedLine,
        };
    }
    getNoteHeadBeginX() {
        return this.getAbsoluteX() + this.x_shift;
    }
    getNoteHeadEndX() {
        const xBegin = this.getNoteHeadBeginX();
        return xBegin + this.getGlyphWidth();
    }
    get noteHeads() {
        return this._noteHeads.slice();
    }
    get note_heads() {
        showDeprecationWarningForNoteHeads();
        return this.noteHeads;
    }
    drawLedgerLines() {
        const stave = this.checkStave();
        const { glyph, render_options: { stroke_px }, } = this;
        const ctx = this.checkContext();
        const width = glyph.getWidth() + stroke_px * 2;
        const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH / 2;
        if (this.isRest())
            return;
        if (!ctx) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('NoCanvasContext', "Can't draw without a canvas context.");
        }
        const { highest_line, lowest_line, highest_displaced_line, highest_non_displaced_line, lowest_displaced_line, lowest_non_displaced_line, displaced_x, non_displaced_x, } = this.getNoteHeadBounds();
        if (highest_line < 6 && lowest_line > 0)
            return;
        const min_x = Math.min(displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0, non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0);
        const drawLedgerLine = (y, normal, displaced) => {
            let x;
            if (displaced && normal)
                x = min_x - stroke_px;
            else if (normal)
                x = (non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0) - stroke_px;
            else
                x = (displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0) - stroke_px;
            const ledgerWidth = normal && displaced ? doubleWidth : width;
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + ledgerWidth, y);
            ctx.stroke();
        };
        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());
        this.applyStyle(ctx, style);
        for (let line = 6; line <= highest_line; ++line) {
            const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;
            const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;
            drawLedgerLine(stave.getYForNote(line), normal, displaced);
        }
        for (let line = 0; line >= lowest_line; --line) {
            const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;
            const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;
            drawLedgerLine(stave.getYForNote(line), normal, displaced);
        }
        this.restoreStyle(ctx, style);
    }
    drawModifiers() {
        const ctx = this.checkContext();
        ctx.openGroup('modifiers');
        for (let i = 0; i < this.modifiers.length; i++) {
            const modifier = this.modifiers[i];
            const index = modifier.checkIndex();
            const notehead = this._noteHeads[index];
            const noteheadStyle = notehead.getStyle();
            notehead.applyStyle(ctx, noteheadStyle);
            modifier.setContext(ctx);
            modifier.drawWithStyle();
            notehead.restoreStyle(ctx, noteheadStyle);
        }
        ctx.closeGroup();
    }
    shouldDrawFlag() {
        const hasStem = this.stem !== undefined;
        const hasFlag = this.glyph.flag;
        const hasNoBeam = this.beam === undefined;
        return hasStem && hasFlag && hasNoBeam;
    }
    drawFlag() {
        var _a, _b, _c, _d, _e;
        const ctx = this.checkContext();
        if (!ctx) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('NoCanvasContext', "Can't draw without a canvas context.");
        }
        if (this.shouldDrawFlag()) {
            const { y_top, y_bottom } = this.getNoteHeadBounds();
            const noteStemHeight = this.stem.getHeight();
            const flagX = this.getStemX();
            const flagY = this.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN
                ?
                    y_top -
                        noteStemHeight +
                        2 -
                        (this.glyph ? this.glyph.stem_down_extension : 0) * this.getStaveNoteScale() -
                        ((_b = (_a = this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().y_shift) !== null && _b !== void 0 ? _b : 0) * (1 - this.getStaveNoteScale())
                :
                    y_bottom -
                        noteStemHeight -
                        2 +
                        (this.glyph ? this.glyph.stem_up_extension : 0) * this.getStaveNoteScale() -
                        ((_d = (_c = this.flag) === null || _c === void 0 ? void 0 : _c.getMetrics().y_shift) !== null && _d !== void 0 ? _d : 0) * (1 - this.getStaveNoteScale());
            ctx.openGroup('flag', undefined, { pointerBBox: true });
            this.applyStyle(ctx, this.getFlagStyle());
            (_e = this.flag) === null || _e === void 0 ? void 0 : _e.render(ctx, flagX, flagY);
            this.restoreStyle(ctx, this.getFlagStyle());
            ctx.closeGroup();
        }
    }
    drawNoteHeads() {
        const ctx = this.checkContext();
        this._noteHeads.forEach((notehead) => {
            ctx.openGroup('notehead', undefined, { pointerBBox: true });
            notehead.setContext(ctx).draw();
            ctx.closeGroup();
        });
    }
    drawStem(stemOptions) {
        const ctx = this.checkContext();
        if (stemOptions) {
            this.setStem(new _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem(stemOptions));
        }
        if (this.shouldDrawFlag() && this.stem) {
            this.stem.adjustHeightForFlag();
        }
        if (this.stem) {
            ctx.openGroup('stem', undefined, { pointerBBox: true });
            this.stem.setContext(ctx).draw();
            ctx.closeGroup();
        }
    }
    getStaveNoteScale() {
        return 1.0;
    }
    getStemExtension() {
        const super_stem_extension = super.getStemExtension();
        if (!this.glyph.stem) {
            return super_stem_extension;
        }
        const stem_direction = this.getStemDirection();
        if (stem_direction !== this.calculateOptimalStemDirection()) {
            return super_stem_extension;
        }
        let mid_line_distance;
        const MIDDLE_LINE = 3;
        if (stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
            mid_line_distance = MIDDLE_LINE - this.maxLine;
        }
        else {
            mid_line_distance = this.minLine - MIDDLE_LINE;
        }
        const lines_over_octave_from_mid_line = mid_line_distance - 3.5;
        if (lines_over_octave_from_mid_line <= 0) {
            return super_stem_extension;
        }
        const stave = this.getStave();
        let spacing_between_lines = 10;
        if (stave != undefined) {
            spacing_between_lines = stave.getSpacingBetweenLines();
        }
        return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;
    }
    draw() {
        if (this.render_options.draw === false)
            return;
        if (this.ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('NoYValues', "Can't draw note without Y values.");
        }
        const ctx = this.checkContext();
        const xBegin = this.getNoteHeadBeginX();
        const shouldRenderStem = this.hasStem() && !this.beam;
        this._noteHeads.forEach((notehead) => notehead.setX(xBegin));
        if (this.stem) {
            const stemX = this.getStemX();
            this.stem.setNoteHeadXBounds(stemX, stemX);
        }
        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);
        this.applyStyle();
        this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));
        this.drawLedgerLines();
        ctx.openGroup('note', undefined, { pointerBBox: true });
        if (shouldRenderStem)
            this.drawStem();
        this.drawNoteHeads();
        this.drawFlag();
        ctx.closeGroup();
        this.drawModifiers();
        ctx.closeGroup();
        this.restoreStyle();
        this.setRendered();
    }
}
StaveNote.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/staverepetition.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/staverepetition.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Repetition: () => (/* binding */ Repetition)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");




class Repetition extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_2__.StaveModifier {
    constructor(type, x, y_shift) {
        super();
        this.symbol_type = type;
        this.x = x;
        this.x_shift = 0;
        this.y_shift = y_shift;
        this.resetFont();
    }
    static get CATEGORY() {
        return "Repetition";
    }
    setShiftX(x) {
        this.x_shift = x;
        return this;
    }
    setShiftY(y) {
        this.y_shift = y;
        return this;
    }
    draw(stave, x) {
        this.setRendered();
        switch (this.symbol_type) {
            case Repetition.type.CODA_RIGHT:
                this.drawCodaFixed(stave, x + stave.getWidth());
                break;
            case Repetition.type.CODA_LEFT:
                this.drawSymbolText(stave, x, 'Coda', true);
                break;
            case Repetition.type.SEGNO_LEFT:
                this.drawSignoFixed(stave, x);
                break;
            case Repetition.type.SEGNO_RIGHT:
                this.drawSignoFixed(stave, x + stave.getWidth());
                break;
            case Repetition.type.DC:
                this.drawSymbolText(stave, x, 'D.C.', false);
                break;
            case Repetition.type.DC_AL_CODA:
                this.drawSymbolText(stave, x, 'D.C. al', true);
                break;
            case Repetition.type.DC_AL_FINE:
                this.drawSymbolText(stave, x, 'D.C. al Fine', false);
                break;
            case Repetition.type.DS:
                this.drawSymbolText(stave, x, 'D.S.', false);
                break;
            case Repetition.type.DS_AL_CODA:
                this.drawSymbolText(stave, x, 'D.S. al', true);
                break;
            case Repetition.type.DS_AL_FINE:
                this.drawSymbolText(stave, x, 'D.S. al Fine', false);
                break;
            case Repetition.type.FINE:
                this.drawSymbolText(stave, x, 'Fine', false);
                break;
            case Repetition.type.TO_CODA:
                this.drawSymbolText(stave, x, 'To', true);
                break;
            default:
                break;
        }
        return this;
    }
    drawCodaFixed(stave, x) {
        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;
        _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.coda.offsetY'), 40, 'coda', { category: 'coda' });
        return this;
    }
    drawSignoFixed(stave, x) {
        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;
        _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.segno.offsetY'), 30, 'segno', { category: 'segno' });
        return this;
    }
    drawSymbolText(stave, x, text, draw_coda) {
        const ctx = stave.checkContext();
        ctx.save();
        ctx.setFont(this.textFont);
        let text_x = 0;
        let symbol_x = 0;
        const modifierWidth = stave.getNoteStartX() - this.x;
        switch (this.symbol_type) {
            case Repetition.type.CODA_LEFT:
                text_x = this.x + stave.getVerticalBarWidth();
                symbol_x =
                    text_x +
                        ctx.measureText(text).width +
                        _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');
                break;
            case Repetition.type.DC:
            case Repetition.type.DC_AL_FINE:
            case Repetition.type.DS:
            case Repetition.type.DS_AL_FINE:
            case Repetition.type.FINE:
                text_x =
                    this.x +
                        x +
                        this.x_shift +
                        stave.getWidth() -
                        _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -
                        modifierWidth -
                        ctx.measureText(text).width;
                break;
            default:
                text_x =
                    this.x +
                        x +
                        this.x_shift +
                        stave.getWidth() -
                        _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -
                        modifierWidth -
                        ctx.measureText(text).width -
                        _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');
                symbol_x =
                    text_x +
                        ctx.measureText(text).width +
                        _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');
                break;
        }
        const y = stave.getYForTopText(stave.getNumLines()) +
            this.y_shift +
            _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetY');
        if (draw_coda) {
            _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });
        }
        ctx.fillText(text, text_x, y + 5);
        ctx.restore();
        return this;
    }
}
Repetition.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SERIF,
    size: 12,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};
Repetition.type = {
    NONE: 1,
    CODA_LEFT: 2,
    CODA_RIGHT: 3,
    SEGNO_LEFT: 4,
    SEGNO_RIGHT: 5,
    DC: 6,
    DC_AL_CODA: 7,
    DC_AL_FINE: 8,
    DS: 9,
    DS_AL_CODA: 10,
    DS_AL_FINE: 11,
    FINE: 12,
    TO_CODA: 13,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavesection.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavesection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveSection: () => (/* binding */ StaveSection)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");



class StaveSection extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
    constructor(section, x, shift_y, drawRect = true) {
        super();
        this.setWidth(16);
        this.section = section;
        this.x = x;
        this.shift_x = 0;
        this.shift_y = shift_y;
        this.drawRect = drawRect;
        this.resetFont();
    }
    static get CATEGORY() {
        return "StaveSection";
    }
    setStaveSection(section) {
        this.section = section;
        return this;
    }
    setShiftX(x) {
        this.shift_x = x;
        return this;
    }
    setShiftY(y) {
        this.shift_y = y;
        return this;
    }
    draw(stave, shift_x) {
        const ctx = stave.checkContext();
        this.setRendered();
        ctx.save();
        ctx.setLineWidth(2);
        ctx.setFont(this.textFont);
        const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_2__.TextFormatter.create(this.textFont);
        const paddingX = 2;
        const paddingY = 2;
        const rectWidth = 2;
        const textWidth = textFormatter.getWidthForTextInPx(this.section);
        const textHeight = textFormatter.maxHeight;
        const width = textWidth + 2 * paddingX;
        const height = textHeight + 2 * paddingY;
        const y = stave.getYForTopText(1.5) + this.shift_y;
        const x = this.x + shift_x;
        if (this.drawRect) {
            ctx.beginPath();
            ctx.setLineWidth(rectWidth);
            ctx.rect(x, y - height, width, height);
            ctx.stroke();
        }
        ctx.fillText(this.section, x + paddingX, y);
        ctx.restore();
        return this;
    }
}
StaveSection.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
    size: 10,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavetempo.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavetempo.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveTempo: () => (/* binding */ StaveTempo)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _textformatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textformatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js");





class StaveTempo extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_2__.StaveModifier {
    constructor(tempo, x, shift_y) {
        super();
        this.render_options = { glyph_font_scale: 30 };
        this.tempo = tempo;
        this.position = _stavemodifier_js__WEBPACK_IMPORTED_MODULE_2__.StaveModifierPosition.ABOVE;
        this.x = x;
        this.shift_x = 10;
        this.shift_y = shift_y;
        this.resetFont();
    }
    static get CATEGORY() {
        return "StaveTempo";
    }
    setTempo(tempo) {
        this.tempo = tempo;
        return this;
    }
    setShiftX(x) {
        this.shift_x = x;
        return this;
    }
    setShiftY(y) {
        this.shift_y = y;
        return this;
    }
    draw(stave, shift_x) {
        const ctx = stave.checkContext();
        this.setRendered();
        const options = this.render_options;
        const scale = options.glyph_font_scale / 38;
        const name = this.tempo.name;
        const duration = this.tempo.duration;
        const dots = this.tempo.dots || 0;
        const bpm = this.tempo.bpm;
        let x = this.x + this.shift_x + shift_x;
        const y = stave.getYForTopText(1) + this.shift_y;
        ctx.save();
        const textFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.create(this.textFont);
        if (name) {
            ctx.setFont(this.textFont);
            ctx.fillText(name, x, y);
            x += textFormatter.getWidthForTextInPx(name);
        }
        if (duration && bpm) {
            const noteTextFont = Object.assign(Object.assign({}, this.textFont), { weight: 'normal', style: 'normal' });
            ctx.setFont(noteTextFont);
            const noteTextFormatter = _textformatter_js__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.create(noteTextFont);
            if (name) {
                x += noteTextFormatter.getWidthForTextInPx('|');
                ctx.fillText('(', x, y);
                x += noteTextFormatter.getWidthForTextInPx('(');
            }
            const code = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.getGlyphProps(duration);
            x += 3 * scale;
            _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);
            x += code.getWidth() * scale;
            if (code.stem) {
                let stem_height = 30;
                if (code.beam_count)
                    stem_height += 3 * (code.beam_count - 1);
                stem_height *= scale;
                const y_top = y - stem_height;
                ctx.fillRect(x - scale, y_top, scale, stem_height);
                if (code.flag) {
                    const flagMetrics = _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {
                        category: 'flag.staveTempo',
                    });
                    x += (flagMetrics.width * _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.NOTATION_FONT_SCALE) / flagMetrics.font.getData().resolution;
                }
            }
            for (let i = 0; i < dots; i++) {
                x += 6 * scale;
                ctx.beginPath();
                ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);
                ctx.fill();
            }
            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);
        }
        ctx.restore();
        return this;
    }
}
StaveTempo.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SERIF,
    size: 14,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavetext.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavetext.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveText: () => (/* binding */ StaveText)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _textnote_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textnote.js */ "./node_modules/vexflow_smoosic/build/esm/src/textnote.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




class StaveText extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
    constructor(text, position, options = {}) {
        super();
        this.setWidth(16);
        this.text = text;
        this.position = position;
        this.options = Object.assign({ shift_x: 0, shift_y: 0, justification: _textnote_js__WEBPACK_IMPORTED_MODULE_2__.TextNote.Justification.CENTER }, options);
        this.resetFont();
    }
    static get CATEGORY() {
        return "StaveText";
    }
    setStaveText(text) {
        this.text = text;
        return this;
    }
    setShiftX(x) {
        this.shift_x = x;
        return this;
    }
    setShiftY(y) {
        this.shift_y = y;
        return this;
    }
    setText(text) {
        this.text = text;
        return this;
    }
    draw(stave) {
        const ctx = stave.checkContext();
        this.setRendered();
        ctx.save();
        ctx.setLineWidth(2);
        ctx.setFont(this.textFont);
        const text_width = ctx.measureText('' + this.text).width;
        let x;
        let y;
        switch (this.position) {
            case _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.LEFT:
            case _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.RIGHT:
                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;
                if (this.position === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.LEFT) {
                    x = stave.getX() - text_width - 24 + this.options.shift_x;
                }
                else {
                    x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;
                }
                break;
            case _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.ABOVE:
            case _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.BELOW:
                x = stave.getX() + this.options.shift_x;
                if (this.options.justification === _textnote_js__WEBPACK_IMPORTED_MODULE_2__.TextJustification.CENTER) {
                    x += stave.getWidth() / 2 - text_width / 2;
                }
                else if (this.options.justification === _textnote_js__WEBPACK_IMPORTED_MODULE_2__.TextJustification.RIGHT) {
                    x += stave.getWidth() - text_width;
                }
                if (this.position === _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.ABOVE) {
                    y = stave.getYForTopText(2) + this.options.shift_y;
                }
                else {
                    y = stave.getYForBottomText(2) + this.options.shift_y;
                }
                break;
            default:
                throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');
        }
        ctx.fillText('' + this.text, x, y + 4);
        ctx.restore();
        return this;
    }
}
StaveText.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SERIF,
    size: 16,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.NORMAL,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavetie.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavetie.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveTie: () => (/* binding */ StaveTie)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


class StaveTie extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(notes, text) {
        super();
        this.setNotes(notes);
        this.text = text;
        this.render_options = {
            cp1: 8,
            cp2: 12,
            text_shift_x: 0,
            first_x_shift: 0,
            last_x_shift: 0,
            y_shift: 7,
            tie_spacing: 0,
        };
        this.resetFont();
    }
    static get CATEGORY() {
        return "StaveTie";
    }
    setDirection(direction) {
        this.direction = direction;
        return this;
    }
    setNotes(notes) {
        if (!notes.first_note && !notes.last_note) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');
        }
        if (!notes.first_indices) {
            notes.first_indices = [0];
        }
        if (!notes.last_indices) {
            notes.last_indices = [0];
        }
        if (notes.first_indices.length !== notes.last_indices.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', 'Tied notes must have same number of indices.');
        }
        this.notes = notes;
        return this;
    }
    isPartial() {
        return !this.notes.first_note || !this.notes.last_note;
    }
    renderTie(params) {
        if (params.first_ys.length === 0 || params.last_ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', 'No Y-values to render');
        }
        const ctx = this.checkContext();
        let cp1 = this.render_options.cp1;
        let cp2 = this.render_options.cp2;
        if (Math.abs(params.last_x_px - params.first_x_px) < 10) {
            cp1 = 2;
            cp2 = 8;
        }
        const first_x_shift = this.render_options.first_x_shift;
        const last_x_shift = this.render_options.last_x_shift;
        const y_shift = this.render_options.y_shift * params.direction;
        const first_indices = this.notes.first_indices;
        const last_indices = this.notes.last_indices;
        for (let i = 0; i < first_indices.length; ++i) {
            const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;
            const first_y_px = params.first_ys[first_indices[i]] + y_shift;
            const last_y_px = params.last_ys[last_indices[i]] + y_shift;
            if (isNaN(first_y_px) || isNaN(last_y_px)) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', 'Bad indices for tie rendering.');
            }
            const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;
            const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;
            this.setAttribute('el', ctx.openGroup('stavetie'));
            ctx.beginPath();
            ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);
            ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);
            ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);
            ctx.closePath();
            ctx.fill();
            ctx.closeGroup();
        }
    }
    renderText(first_x_px, last_x_px) {
        var _a, _b, _c;
        if (!this.text)
            return;
        const ctx = this.checkContext();
        let center_x = (first_x_px + last_x_px) / 2;
        center_x -= ctx.measureText(this.text).width / 2;
        const stave = (_b = (_a = this.notes.first_note) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.last_note) === null || _c === void 0 ? void 0 : _c.checkStave();
        if (stave) {
            ctx.save();
            ctx.setFont(this.textFont);
            ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);
            ctx.restore();
        }
    }
    draw() {
        this.checkContext();
        this.setRendered();
        const first_note = this.notes.first_note;
        const last_note = this.notes.last_note;
        let first_x_px = 0;
        let last_x_px = 0;
        let first_ys = [0];
        let last_ys = [0];
        let stem_direction = 0;
        if (first_note) {
            first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
            stem_direction = first_note.getStemDirection();
            first_ys = first_note.getYs();
        }
        else if (last_note) {
            const stave = last_note.checkStave();
            first_x_px = stave.getTieStartX();
            first_ys = last_note.getYs();
            this.notes.first_indices = this.notes.last_indices;
        }
        if (last_note) {
            last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
            stem_direction = last_note.getStemDirection();
            last_ys = last_note.getYs();
        }
        else if (first_note) {
            const stave = first_note.checkStave();
            last_x_px = stave.getTieEndX();
            last_ys = first_note.getYs();
            this.notes.last_indices = this.notes.first_indices;
        }
        if (this.direction) {
            stem_direction = this.direction;
        }
        this.renderTie({
            first_x_px,
            last_x_px,
            first_ys,
            last_ys,
            direction: stem_direction,
        });
        this.renderText(first_x_px, last_x_px);
        return true;
    }
}
StaveTie.TEXT_FONT = Object.assign({}, _element_js__WEBPACK_IMPORTED_MODULE_0__.Element.TEXT_FONT);


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stavevolta.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stavevolta.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Volta: () => (/* binding */ Volta),
/* harmony export */   VoltaType: () => (/* binding */ VoltaType)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");


var VoltaType;
(function (VoltaType) {
    VoltaType[VoltaType["NONE"] = 1] = "NONE";
    VoltaType[VoltaType["BEGIN"] = 2] = "BEGIN";
    VoltaType[VoltaType["MID"] = 3] = "MID";
    VoltaType[VoltaType["END"] = 4] = "END";
    VoltaType[VoltaType["BEGIN_END"] = 5] = "BEGIN_END";
})(VoltaType || (VoltaType = {}));
class Volta extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
    constructor(type, number, x, y_shift) {
        super();
        this.volta = type;
        this.x = x;
        this.y_shift = y_shift;
        this.number = number;
        this.resetFont();
    }
    static get CATEGORY() {
        return "Volta";
    }
    static get type() {
        return VoltaType;
    }
    setShiftY(y) {
        this.y_shift = y;
        return this;
    }
    draw(stave, x) {
        const ctx = stave.checkContext();
        this.setRendered();
        let width = stave.getWidth() - x;
        const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;
        const vert_height = 1.5 * stave.getSpacingBetweenLines();
        switch (this.volta) {
            case VoltaType.BEGIN:
                ctx.fillRect(this.x + x, top_y, 1, vert_height);
                break;
            case VoltaType.END:
                width -= 5;
                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
                break;
            case VoltaType.BEGIN_END:
                width -= 3;
                ctx.fillRect(this.x + x, top_y, 1, vert_height);
                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
                break;
            default:
                break;
        }
        if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {
            ctx.save();
            ctx.setFont(this.textFont);
            ctx.fillText(this.number, this.x + x + 5, top_y + 15);
            ctx.restore();
        }
        ctx.fillRect(this.x + x, top_y, width, 1);
        return this;
    }
}
Volta.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
    size: 9,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stem.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stem.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stem: () => (/* binding */ Stem)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



function L(...args) {
    if (Stem.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.log)('Vex.Flow.Stem', args);
}
class Stem extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(options) {
        super();
        this.stem_up_y_offset = 0;
        this.stem_down_y_offset = 0;
        this.stem_up_y_base_offset = 0;
        this.stem_down_y_base_offset = 0;
        this.x_begin = (options === null || options === void 0 ? void 0 : options.x_begin) || 0;
        this.x_end = (options === null || options === void 0 ? void 0 : options.x_end) || 0;
        this.y_top = (options === null || options === void 0 ? void 0 : options.y_top) || 0;
        this.y_bottom = (options === null || options === void 0 ? void 0 : options.y_bottom) || 0;
        this.stem_extension = (options === null || options === void 0 ? void 0 : options.stem_extension) || 0;
        this.stem_direction = (options === null || options === void 0 ? void 0 : options.stem_direction) || 0;
        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;
        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;
        this.stemletHeight = (options === null || options === void 0 ? void 0 : options.stemletHeight) || 0;
        this.renderHeightAdjustment = 0;
        this.setOptions(options);
    }
    static get CATEGORY() {
        return "Stem";
    }
    static get UP() {
        return 1;
    }
    static get DOWN() {
        return -1;
    }
    static get WIDTH() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_1__.Tables.STEM_WIDTH;
    }
    static get HEIGHT() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_1__.Tables.STEM_HEIGHT;
    }
    setOptions(options) {
        this.stem_up_y_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_offset) || 0;
        this.stem_down_y_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_offset) || 0;
        this.stem_up_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_base_offset) || 0;
        this.stem_down_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_base_offset) || 0;
    }
    setNoteHeadXBounds(x_begin, x_end) {
        this.x_begin = x_begin;
        this.x_end = x_end;
        return this;
    }
    setDirection(direction) {
        this.stem_direction = direction;
    }
    setExtension(ext) {
        this.stem_extension = ext;
    }
    getExtension() {
        return this.stem_extension;
    }
    setYBounds(y_top, y_bottom) {
        this.y_top = y_top;
        this.y_bottom = y_bottom;
    }
    getHeight() {
        const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;
        const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension);
        return unsigned_height * this.stem_direction;
    }
    getBoundingBox() {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');
    }
    getExtents() {
        const isStemUp = this.stem_direction === Stem.UP;
        const ys = [this.y_top, this.y_bottom];
        const stemHeight = Stem.HEIGHT + this.stem_extension;
        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);
        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);
        const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;
        return { topY: stemTipY, baseY: outerMostNoteheadY };
    }
    setVisibility(isVisible) {
        this.hide = !isVisible;
        return this;
    }
    setStemlet(isStemlet, stemletHeight) {
        this.isStemlet = isStemlet;
        this.stemletHeight = stemletHeight;
        return this;
    }
    adjustHeightForFlag() {
        this.renderHeightAdjustment = _tables_js__WEBPACK_IMPORTED_MODULE_1__.Tables.currentMusicFont().lookupMetric('stem.heightAdjustmentForFlag', -3);
    }
    adjustHeightForBeam() {
        this.renderHeightAdjustment = -Stem.WIDTH / 2;
    }
    draw() {
        this.setRendered();
        if (this.hide)
            return;
        const ctx = this.checkContext();
        let stem_x;
        let stem_y;
        const stem_direction = this.stem_direction;
        let y_base_offset = 0;
        if (stem_direction === Stem.DOWN) {
            stem_x = this.x_begin;
            stem_y = this.y_top + this.stem_down_y_offset;
            y_base_offset = this.stem_down_y_base_offset;
        }
        else {
            stem_x = this.x_end;
            stem_y = this.y_bottom - this.stem_up_y_offset;
            y_base_offset = this.stem_up_y_base_offset;
        }
        const stemHeight = this.getHeight();
        L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);
        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;
        ctx.save();
        this.applyStyle(ctx);
        ctx.beginPath();
        ctx.setLineWidth(Stem.WIDTH);
        ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);
        ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);
        ctx.stroke();
        this.restoreStyle(ctx);
        ctx.restore();
    }
}
Stem.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stemmablenote.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stemmablenote.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StemmableNote: () => (/* binding */ StemmableNote)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class StemmableNote extends _note_js__WEBPACK_IMPORTED_MODULE_1__.Note {
    constructor(noteStruct) {
        super(noteStruct);
    }
    static get CATEGORY() {
        return "StemmableNote";
    }
    getStem() {
        return this.stem;
    }
    checkStem() {
        if (!this.stem) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoStem', 'No stem attached to instance');
        }
        return this.stem;
    }
    setStem(stem) {
        this.stem = stem;
        this.addChildElement(stem);
        return this;
    }
    buildStem() {
        const stem = new _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem();
        this.setStem(stem);
        return this;
    }
    buildFlag(category = 'flag') {
        const { glyph } = this;
        if (this.hasFlag()) {
            const flagCode = this.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;
            this.flag = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(flagCode, this.render_options.glyph_font_scale, { category });
        }
    }
    getBaseCustomNoteHeadGlyph() {
        if (this.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
            return this.customGlyphs[this.customGlyphs.length - 1];
        }
        else {
            return this.customGlyphs[0];
        }
    }
    getStemLength() {
        return _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.HEIGHT + this.getStemExtension();
    }
    getBeamCount() {
        const glyph = this.getGlyph();
        if (glyph) {
            return glyph.beam_count;
        }
        else {
            return 0;
        }
    }
    getStemMinimumLength() {
        const frac = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.durationToFraction(this.duration);
        let length = frac.value() <= 1 ? 0 : 20;
        switch (this.duration) {
            case '8':
                if (this.beam == undefined)
                    length = 35;
                break;
            case '16':
                length = this.beam == undefined ? 35 : 25;
                break;
            case '32':
                length = this.beam == undefined ? 45 : 35;
                break;
            case '64':
                length = this.beam == undefined ? 50 : 40;
                break;
            case '128':
                length = this.beam == undefined ? 55 : 45;
                break;
            default:
                break;
        }
        return length;
    }
    getStemDirection() {
        if (!this.stem_direction)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoStem', 'No stem attached to this note.');
        return this.stem_direction;
    }
    setStemDirection(direction) {
        if (!direction)
            direction = _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
        if (direction !== _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP && direction !== _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);
        }
        this.stem_direction = direction;
        this.reset();
        if (this.hasFlag()) {
            this.buildFlag();
        }
        this.beam = undefined;
        if (this.stem) {
            this.stem.setDirection(direction);
            this.stem.setExtension(this.getStemExtension());
            const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();
            const offsets = _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyph.code_head}`, {
                offsetYBaseStemUp: 0,
                offsetYTopStemUp: 0,
                offsetYBaseStemDown: 0,
                offsetYTopStemDown: 0,
            });
            this.stem.setOptions({
                stem_up_y_offset: offsets.offsetYTopStemUp,
                stem_down_y_offset: offsets.offsetYTopStemDown,
                stem_up_y_base_offset: offsets.offsetYBaseStemUp,
                stem_down_y_base_offset: offsets.offsetYBaseStemDown,
            });
        }
        if (this.preFormatted) {
            this.preFormat();
        }
        return this;
    }
    getStemX() {
        const x_begin = this.getAbsoluteX() + this.x_shift;
        const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();
        const stem_x = this.stem_direction === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN ? x_begin : x_end;
        return stem_x;
    }
    getCenterGlyphX() {
        return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;
    }
    getStemExtension() {
        const glyph = this.getGlyph();
        if (this.stem_extension_override != undefined) {
            return this.stem_extension_override;
        }
        if (this.beam) {
            return glyph.stem_beam_extension;
        }
        if (glyph) {
            return this.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;
        }
        return 0;
    }
    setStemLength(height) {
        this.stem_extension_override = height - _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem.HEIGHT;
        return this;
    }
    getStemExtents() {
        if (!this.stem)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoStem', 'No stem attached to this note.');
        return this.stem.getExtents();
    }
    getYForTopText(textLine) {
        const stave = this.checkStave();
        if (this.hasStem()) {
            const extents = this.getStemExtents();
            if (!extents)
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidState', 'Stem does not have extents.');
            return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));
        }
        else {
            return stave.getYForTopText(textLine);
        }
    }
    getYForBottomText(textLine) {
        const stave = this.checkStave();
        if (this.hasStem()) {
            const extents = this.getStemExtents();
            if (!extents)
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidState', 'Stem does not have extents.');
            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);
        }
        else {
            return stave.getYForBottomText(textLine);
        }
    }
    hasFlag() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.getGlyphProps(this.duration).flag && !this.beam;
    }
    postFormat() {
        var _a;
        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();
        this.postFormatted = true;
        return this;
    }
    drawStem(stemOptions) {
        var _a;
        this.checkContext();
        this.setRendered();
        this.setStem(new _stem_js__WEBPACK_IMPORTED_MODULE_2__.Stem(stemOptions));
        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/stringnumber.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/stringnumber.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StringNumber: () => (/* binding */ StringNumber)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/vexflow_smoosic/build/esm/src/renderer.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");







class StringNumber extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor(number) {
        super();
        this.string_number = number;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE;
        this.x_shift = 0;
        this.y_shift = 0;
        this.text_line = 0;
        this.stem_offset = 0;
        this.x_offset = 0;
        this.y_offset = 0;
        this.dashed = true;
        this.leg = _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.NONE;
        this.radius = 8;
        this.drawCircle = true;
        this.setWidth(this.radius * 2 + 4);
        this.resetFont();
    }
    static get CATEGORY() {
        return "StringNumber";
    }
    static get metrics() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont().getMetrics().glyphs.stringNumber;
    }
    static format(nums, state) {
        const left_shift = state.left_shift;
        const right_shift = state.right_shift;
        const num_spacing = 1;
        if (!nums || nums.length === 0)
            return false;
        const nums_list = [];
        let prev_note = null;
        let shift_left = 0;
        let shift_right = 0;
        const modLines = 0;
        for (let i = 0; i < nums.length; ++i) {
            const num = nums[i];
            const note = num.getNote();
            const pos = num.getPosition();
            if (!(0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isStaveNote)(note)) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('NoStaveNote');
            }
            const index = num.checkIndex();
            const props = note.getKeyProps()[index];
            const mc = note.getModifierContext();
            const verticalSpaceNeeded = (num.radius * 2) / _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.STAVE_LINE_DISTANCE + 0.5;
            if (mc) {
                if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.ABOVE) {
                    num.text_line = mc.getState().top_text_line;
                    state.top_text_line += verticalSpaceNeeded;
                }
                else if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.ModifierPosition.BELOW) {
                    num.text_line = mc.getState().text_line;
                    state.text_line += verticalSpaceNeeded;
                }
            }
            if (note !== prev_note) {
                for (let n = 0; n < note.keys.length; ++n) {
                    if (left_shift === 0) {
                        shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);
                    }
                    if (right_shift === 0) {
                        shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);
                    }
                }
                prev_note = note;
            }
            const glyphLine = modLines === 0 ? props.line : modLines;
            nums_list.push({
                pos,
                note,
                num,
                line: glyphLine,
                shiftL: shift_left,
                shiftR: shift_right,
            });
        }
        nums_list.sort((a, b) => b.line - a.line);
        let num_shiftR = 0;
        let x_widthL = 0;
        let x_widthR = 0;
        let last_line = null;
        let last_note = null;
        for (let i = 0; i < nums_list.length; ++i) {
            let num_shift = 0;
            const note = nums_list[i].note;
            const pos = nums_list[i].pos;
            const num = nums_list[i].num;
            const line = nums_list[i].line;
            const shiftR = nums_list[i].shiftR;
            if (line !== last_line || note !== last_note) {
                num_shiftR = right_shift + shiftR;
            }
            const num_width = num.getWidth() + num_spacing;
            if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT) {
                num.setXShift(left_shift);
                num_shift = shift_left + num_width;
                x_widthL = num_shift > x_widthL ? num_shift : x_widthL;
            }
            else if (pos === _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT) {
                num.setXShift(num_shiftR);
                num_shift += num_width;
                x_widthR = num_shift > x_widthR ? num_shift : x_widthR;
            }
            last_line = line;
            last_note = note;
        }
        state.left_shift += x_widthL;
        state.right_shift += x_widthR;
        return true;
    }
    setLineEndType(leg) {
        if (leg >= _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.NONE && leg <= _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.DOWN) {
            this.leg = leg;
        }
        return this;
    }
    setStringNumber(number) {
        this.string_number = number;
        return this;
    }
    setOffsetX(x) {
        this.x_offset = x;
        return this;
    }
    setOffsetY(y) {
        this.y_offset = y;
        return this;
    }
    setLastNote(note) {
        this.last_note = note;
        return this;
    }
    setDashed(dashed) {
        this.dashed = dashed;
        return this;
    }
    setDrawCircle(drawCircle) {
        this.drawCircle = drawCircle;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(this.position, this.index);
        const stemDirection = note.hasStem() ? note.getStemDirection() : _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP;
        let dot_x = start.x + this.x_shift + this.x_offset;
        let stem_ext = {};
        if (note.hasStem()) {
            stem_ext = note.checkStem().getExtents();
        }
        let dot_y = start.y + this.y_shift + this.y_offset;
        switch (this.position) {
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE:
                {
                    const ys = note.getYs();
                    dot_y = ys.reduce((a, b) => (a < b ? a : b));
                    if (note.hasStem() && stemDirection == _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
                        dot_y = stem_ext.topY + StringNumber.metrics.stemPadding;
                    }
                    dot_y -= this.radius + StringNumber.metrics.verticalPadding + this.text_line * _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.STAVE_LINE_DISTANCE;
                }
                break;
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.BELOW:
                {
                    const ys = note.getYs();
                    dot_y = ys.reduce((a, b) => (a > b ? a : b));
                    if (note.hasStem() && stemDirection == _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN) {
                        dot_y = stem_ext.topY - StringNumber.metrics.stemPadding;
                    }
                    dot_y += this.radius + StringNumber.metrics.verticalPadding + this.text_line * _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.STAVE_LINE_DISTANCE;
                }
                break;
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT:
                dot_x -= this.radius / 2 + StringNumber.metrics.leftPadding;
                break;
            case _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT:
                dot_x += this.radius / 2 + StringNumber.metrics.rightPadding;
                break;
            default:
                throw new _util_js__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);
        }
        ctx.save();
        if (this.drawCircle) {
            ctx.beginPath();
            ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);
            ctx.setLineWidth(1.5);
            ctx.stroke();
        }
        ctx.setFont(this.textFont);
        const x = dot_x - ctx.measureText(this.string_number).width / 2;
        ctx.fillText('' + this.string_number, x, dot_y + 4.5);
        const lastNote = this.last_note;
        if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isStemmableNote)(lastNote)) {
            const end = lastNote.getStemX() - note.getX() + 5;
            ctx.setStrokeStyle('#000000');
            ctx.setLineCap('round');
            ctx.setLineWidth(0.6);
            if (this.dashed) {
                _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);
            }
            else {
                _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);
            }
            let len;
            let pattern;
            switch (this.leg) {
                case _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.UP:
                    len = -10;
                    pattern = this.dashed ? [3, 3] : [3, 0];
                    _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
                    break;
                case _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.DOWN:
                    len = 10;
                    pattern = this.dashed ? [3, 3] : [3, 0];
                    _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
                    break;
                default:
                    break;
            }
        }
        ctx.restore();
    }
}
StringNumber.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
    size: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SIZE,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/strokes.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/strokes.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stroke: () => (/* binding */ Stroke)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class Stroke extends _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier {
    constructor(type, options) {
        super();
        this.options = Object.assign({ all_voices: true }, options);
        this.all_voices = this.options.all_voices;
        this.type = type;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT;
        this.render_options = {
            font_scale: 38,
        };
        this.resetFont();
        this.setXShift(0);
        this.setWidth(10);
    }
    static get CATEGORY() {
        return "Stroke";
    }
    static format(strokes, state) {
        const left_shift = state.left_shift;
        const stroke_spacing = 0;
        if (!strokes || strokes.length === 0)
            return false;
        const strokeList = strokes.map((stroke) => {
            const note = stroke.getNote();
            const index = stroke.checkIndex();
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isStaveNote)(note)) {
                const { line } = note.getKeyProps()[index];
                const shift = note.getLeftDisplacedHeadPx();
                return { line, shift, stroke };
            }
            else if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isTabNote)(note)) {
                const { str: string } = note.getPositions()[index];
                return { line: string, shift: 0, stroke };
            }
            else {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('Internal', 'Unexpected instance.');
            }
        });
        const strokeShift = left_shift;
        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {
            stroke.setXShift(strokeShift + shift);
            return Math.max(stroke.getWidth() + stroke_spacing, xShift);
        }, 0);
        state.left_shift += xShift;
        return true;
    }
    getPosition() {
        return this.position;
    }
    addEndNote(note) {
        this.note_end = note;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(this.position, this.index);
        let ys = note.getYs();
        let topY = start.y;
        let botY = start.y;
        const x = start.x - 5;
        const line_space = note.checkStave().getSpacingBetweenLines();
        const notes = this.checkModifierContext().getMembers(note.getCategory());
        for (let i = 0; i < notes.length; i++) {
            const note = notes[i];
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isNote)(note)) {
                ys = note.getYs();
                for (let n = 0; n < ys.length; n++) {
                    if (this.note === notes[i] || this.all_voices) {
                        topY = Math.min(topY, ys[n]);
                        botY = Math.max(botY, ys[n]);
                    }
                }
            }
        }
        let arrow = '';
        let arrow_shift_x = 0;
        let arrow_y = 0;
        let text_shift_x = 0;
        let text_y = 0;
        switch (this.type) {
            case Stroke.Type.BRUSH_DOWN:
                arrow = 'arrowheadBlackUp';
                arrow_shift_x = -3;
                arrow_y = topY - line_space / 2 + 10;
                botY += line_space / 2;
                break;
            case Stroke.Type.BRUSH_UP:
                arrow = 'arrowheadBlackDown';
                arrow_shift_x = 0.5;
                arrow_y = botY + line_space / 2;
                topY -= line_space / 2;
                break;
            case Stroke.Type.ROLL_DOWN:
            case Stroke.Type.RASQUEDO_DOWN:
                arrow = 'arrowheadBlackUp';
                arrow_shift_x = -3;
                text_shift_x = this.x_shift + arrow_shift_x - 2;
                if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isStaveNote)(note)) {
                    topY += 1.5 * line_space;
                    if ((botY - topY) % 2 !== 0) {
                        botY += 0.5 * line_space;
                    }
                    else {
                        botY += line_space;
                    }
                    arrow_y = topY - line_space;
                    text_y = botY + line_space + 2;
                }
                else {
                    topY += 1.5 * line_space;
                    botY += line_space;
                    arrow_y = topY - 0.75 * line_space;
                    text_y = botY + 0.25 * line_space;
                }
                break;
            case Stroke.Type.ROLL_UP:
            case Stroke.Type.RASQUEDO_UP:
                arrow = 'arrowheadBlackDown';
                arrow_shift_x = -4;
                text_shift_x = this.x_shift + arrow_shift_x - 1;
                if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isStaveNote)(note)) {
                    arrow_y = line_space / 2;
                    topY += 0.5 * line_space;
                    if ((botY - topY) % 2 === 0) {
                        botY += line_space / 2;
                    }
                    arrow_y = botY + 0.5 * line_space;
                    text_y = topY - 1.25 * line_space;
                }
                else {
                    topY += 0.25 * line_space;
                    botY += 0.5 * line_space;
                    arrow_y = botY + 0.25 * line_space;
                    text_y = topY - line_space;
                }
                break;
            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:
                topY += 0.5 * line_space;
                botY += line_space;
                break;
            default:
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);
        }
        let strokeLine = 'straight';
        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {
            ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);
        }
        else {
            strokeLine = 'wiggly';
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_3__.isStaveNote)(note)) {
                for (let i = topY; i <= botY; i += line_space) {
                    _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');
                }
            }
            else {
                let i;
                for (i = topY; i <= botY; i += 10) {
                    _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');
                }
                if (this.type === Stroke.Type.RASQUEDO_DOWN) {
                    text_y = i + 0.25 * line_space;
                }
            }
        }
        if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {
            return;
        }
        _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {
            category: `stroke.${arrow}.${strokeLine}`,
        });
        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {
            ctx.save();
            ctx.setFont(this.textFont);
            ctx.fillText('R', x + text_shift_x, text_y);
            ctx.restore();
        }
    }
}
Stroke.Type = {
    BRUSH_DOWN: 1,
    BRUSH_UP: 2,
    ROLL_DOWN: 3,
    ROLL_UP: 4,
    RASQUEDO_DOWN: 5,
    RASQUEDO_UP: 6,
    ARPEGGIO_DIRECTIONLESS: 7,
};
Stroke.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SERIF,
    size: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SIZE,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.ITALIC,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/svgcontext.js":
/*!******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/svgcontext.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SVGContext: () => (/* binding */ SVGContext)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _rendercontext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rendercontext.js */ "./node_modules/vexflow_smoosic/build/esm/src/rendercontext.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



const ATTRIBUTES_TO_IGNORE = {
    path: {
        x: true,
        y: true,
        width: true,
        height: true,
        'font-family': true,
        'font-weight': true,
        'font-style': true,
        'font-size': true,
    },
    rect: {
        'font-family': true,
        'font-weight': true,
        'font-style': true,
        'font-size': true,
    },
    text: {
        width: true,
        height: true,
    },
};
const SVG_NS = 'http://www.w3.org/2000/svg';
const TWO_PI = 2 * Math.PI;
class MeasureTextCache {
    constructor() {
        this.cache = {};
    }
    lookup(text, svg, attributes) {
        let entries = this.cache[text];
        if (entries === undefined) {
            entries = {};
            this.cache[text] = entries;
        }
        const family = attributes['font-family'];
        const size = attributes['font-size'];
        const weight = attributes['font-weight'];
        const style = attributes['font-style'];
        const key = `${family}%${size}%${weight}%${style}`;
        let entry = entries[key];
        if (entry === undefined) {
            entry = this.measureImpl(text, svg, attributes);
            entries[key] = entry;
        }
        return entry;
    }
    measureImpl(text, svg, attributes) {
        let txt = this.txt;
        if (!txt) {
            txt = document.createElementNS(SVG_NS, 'text');
            this.txt = txt;
        }
        txt.textContent = text;
        txt.setAttributeNS(null, 'font-family', attributes['font-family']);
        txt.setAttributeNS(null, 'font-size', attributes['font-size']);
        txt.setAttributeNS(null, 'font-style', attributes['font-style']);
        txt.setAttributeNS(null, 'font-weight', attributes['font-weight']);
        svg.appendChild(txt);
        const bbox = txt.getBBox();
        svg.removeChild(txt);
        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };
    }
}
class SVGContext extends _rendercontext_js__WEBPACK_IMPORTED_MODULE_1__.RenderContext {
    constructor(element) {
        super();
        this.width = 0;
        this.height = 0;
        this.backgroundFillStyle = 'white';
        this.fontCSSString = '';
        this.element = element;
        const svg = this.create('svg');
        this.element.appendChild(svg);
        this.svg = svg;
        this.parent = this.svg;
        this.groups = [this.svg];
        this.path = '';
        this.pen = { x: NaN, y: NaN };
        this.lineWidth = 1.0;
        const defaultFontAttributes = {
            'font-family': _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
            'font-size': _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SIZE + 'pt',
            'font-weight': _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.NORMAL,
            'font-style': _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
        };
        this.state = Object.assign({ scale: { x: 1, y: 1 } }, defaultFontAttributes);
        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);
        this.shadow_attributes = {
            width: 0,
            color: 'black',
        };
        this.state_stack = [];
    }
    create(svgElementType) {
        return document.createElementNS(SVG_NS, svgElementType);
    }
    openGroup(cls, id, attrs) {
        const group = this.create('g');
        this.groups.push(group);
        this.parent.appendChild(group);
        this.parent = group;
        if (cls)
            group.setAttribute('class', (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.prefix)(cls));
        if (id)
            group.setAttribute('id', (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.prefix)(id));
        if (attrs && attrs.pointerBBox) {
            group.setAttribute('pointer-events', 'bounding-box');
        }
        return group;
    }
    closeGroup() {
        this.groups.pop();
        this.parent = this.groups[this.groups.length - 1];
    }
    add(elem) {
        this.parent.appendChild(elem);
    }
    setFillStyle(style) {
        this.attributes.fill = style;
        return this;
    }
    setBackgroundFillStyle(style) {
        this.backgroundFillStyle = style;
        return this;
    }
    setStrokeStyle(style) {
        this.attributes.stroke = style;
        return this;
    }
    setShadowColor(color) {
        this.shadow_attributes.color = color;
        return this;
    }
    setShadowBlur(blur) {
        this.shadow_attributes.width = blur;
        return this;
    }
    setLineWidth(width) {
        this.attributes['stroke-width'] = width;
        this.lineWidth = width;
        return this;
    }
    setLineDash(lineDash) {
        if (Object.prototype.toString.call(lineDash) === '[object Array]') {
            this.attributes['stroke-dasharray'] = lineDash.join(',');
            return this;
        }
        else {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('ArgumentError', 'lineDash must be an array of integers.');
        }
    }
    setLineCap(capType) {
        this.attributes['stroke-linecap'] = capType;
        return this;
    }
    resize(width, height) {
        this.width = width;
        this.height = height;
        this.element.style.width = width.toString();
        this.svg.style.width = width.toString();
        this.svg.style.height = height.toString();
        const attributes = {
            width,
            height,
        };
        this.applyAttributes(this.svg, attributes);
        this.scale(this.state.scale.x, this.state.scale.y);
        return this;
    }
    scale(x, y) {
        this.state.scale = { x, y };
        const visibleWidth = this.width / x;
        const visibleHeight = this.height / y;
        this.setViewBox(0, 0, visibleWidth, visibleHeight);
        return this;
    }
    setViewBox(viewBox_or_minX, minY, width, height) {
        if (typeof viewBox_or_minX === 'string') {
            this.svg.setAttribute('viewBox', viewBox_or_minX);
        }
        else {
            const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;
            this.svg.setAttribute('viewBox', viewBoxString);
        }
    }
    applyAttributes(element, attributes) {
        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];
        for (const attrName in attributes) {
            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {
                continue;
            }
            element.setAttributeNS(null, attrName, attributes[attrName]);
        }
        return element;
    }
    clear() {
        while (this.svg.lastChild) {
            this.svg.removeChild(this.svg.lastChild);
        }
        this.scale(this.state.scale.x, this.state.scale.y);
    }
    rect(x, y, width, height, attributes) {
        if (height < 0) {
            y += height;
            height *= -1;
        }
        const rectangle = this.create('rect');
        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };
        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));
        this.add(rectangle);
        return this;
    }
    fillRect(x, y, width, height) {
        const attributes = { fill: this.attributes.fill };
        this.rect(x, y, width, height, attributes);
        return this;
    }
    clearRect(x, y, width, height) {
        this.rect(x, y, width, height, { 'stroke-width': 0, fill: this.backgroundFillStyle });
        return this;
    }
    beginPath() {
        this.path = '';
        this.pen.x = NaN;
        this.pen.y = NaN;
        return this;
    }
    moveTo(x, y) {
        this.path += 'M' + x + ' ' + y;
        this.pen.x = x;
        this.pen.y = y;
        return this;
    }
    lineTo(x, y) {
        this.path += 'L' + x + ' ' + y;
        this.pen.x = x;
        this.pen.y = y;
        return this;
    }
    bezierCurveTo(x1, y1, x2, y2, x, y) {
        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;
        this.pen.x = x;
        this.pen.y = y;
        return this;
    }
    quadraticCurveTo(x1, y1, x, y) {
        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;
        this.pen.x = x;
        this.pen.y = y;
        return this;
    }
    arc(x, y, radius, startAngle, endAngle, counterclockwise) {
        const x0 = x + radius * Math.cos(startAngle);
        const y0 = y + radius * Math.sin(startAngle);
        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||
            (counterclockwise && startAngle - endAngle >= TWO_PI)) {
            const x1 = x + radius * Math.cos(startAngle + Math.PI);
            const y1 = y + radius * Math.sin(startAngle + Math.PI);
            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;
            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;
            this.pen.x = x0;
            this.pen.y = y0;
        }
        else {
            const x1 = x + radius * Math.cos(endAngle);
            const y1 = y + radius * Math.sin(endAngle);
            startAngle = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.normalizeAngle)(startAngle);
            endAngle = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.normalizeAngle)(endAngle);
            let large;
            if (Math.abs(endAngle - startAngle) < Math.PI) {
                large = counterclockwise;
            }
            else {
                large = !counterclockwise;
            }
            if (startAngle > endAngle) {
                large = !large;
            }
            const sweep = !counterclockwise;
            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;
            this.pen.x = x1;
            this.pen.y = y1;
        }
        return this;
    }
    closePath() {
        this.path += 'Z';
        return this;
    }
    getShadowStyle() {
        const sa = this.shadow_attributes;
        return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;
    }
    fill(attributes) {
        const path = this.create('path');
        if (typeof attributes === 'undefined') {
            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });
        }
        attributes.d = this.path;
        if (this.shadow_attributes.width > 0) {
            attributes.style = this.getShadowStyle();
        }
        this.applyAttributes(path, attributes);
        this.add(path);
        return this;
    }
    stroke() {
        const path = this.create('path');
        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });
        if (this.shadow_attributes.width > 0) {
            attributes.style = this.getShadowStyle();
        }
        this.applyAttributes(path, attributes);
        this.add(path);
        return this;
    }
    measureText(text) {
        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);
    }
    fillText(text, x, y) {
        if (!text || text.length <= 0) {
            return this;
        }
        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,
            y });
        const txt = this.create('text');
        txt.textContent = text;
        this.applyAttributes(txt, attributes);
        this.add(txt);
        return this;
    }
    save() {
        this.state_stack.push({
            state: {
                'font-family': this.state['font-family'],
                'font-weight': this.state['font-weight'],
                'font-style': this.state['font-style'],
                'font-size': this.state['font-size'],
                scale: this.state.scale,
            },
            attributes: {
                'font-family': this.attributes['font-family'],
                'font-weight': this.attributes['font-weight'],
                'font-style': this.attributes['font-style'],
                'font-size': this.attributes['font-size'],
                fill: this.attributes.fill,
                stroke: this.attributes.stroke,
                'stroke-width': this.attributes['stroke-width'],
                'stroke-dasharray': this.attributes['stroke-dasharray'],
            },
            shadow_attributes: {
                width: this.shadow_attributes.width,
                color: this.shadow_attributes.color,
            },
            lineWidth: this.lineWidth,
        });
        return this;
    }
    restore() {
        const savedState = this.state_stack.pop();
        if (savedState) {
            const state = savedState;
            this.state['font-family'] = state.state['font-family'];
            this.state['font-weight'] = state.state['font-weight'];
            this.state['font-style'] = state.state['font-style'];
            this.state['font-size'] = state.state['font-size'];
            this.state.scale = state.state.scale;
            this.attributes['font-family'] = state.attributes['font-family'];
            this.attributes['font-weight'] = state.attributes['font-weight'];
            this.attributes['font-style'] = state.attributes['font-style'];
            this.attributes['font-size'] = state.attributes['font-size'];
            this.attributes.fill = state.attributes.fill;
            this.attributes.stroke = state.attributes.stroke;
            this.attributes['stroke-width'] = state.attributes['stroke-width'];
            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];
            this.shadow_attributes.width = state.shadow_attributes.width;
            this.shadow_attributes.color = state.shadow_attributes.color;
            this.lineWidth = state.lineWidth;
        }
        return this;
    }
    set fillStyle(style) {
        this.setFillStyle(style);
    }
    get fillStyle() {
        return this.attributes.fill;
    }
    set strokeStyle(style) {
        this.setStrokeStyle(style);
    }
    get strokeStyle() {
        return this.attributes.stroke;
    }
    setFont(f, size, weight, style) {
        const fontInfo = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.validate(f, size, weight, style);
        this.fontCSSString = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.toCSSString(fontInfo);
        const fontAttributes = {
            'font-family': fontInfo.family,
            'font-size': fontInfo.size,
            'font-weight': fontInfo.weight,
            'font-style': fontInfo.style,
        };
        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);
        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);
        return this;
    }
    getFont() {
        return this.fontCSSString;
    }
}
SVGContext.measureTextCache = new MeasureTextCache();


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/system.js":
/*!**************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/system.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   System: () => (/* binding */ System)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _stave_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stave.js */ "./node_modules/vexflow_smoosic/build/esm/src/stave.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





class System extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(params = {}) {
        super();
        this.setOptions(params);
        this.parts = [];
    }
    static get CATEGORY() {
        return "System";
    }
    setOptions(options = {}) {
        if (!options.factory) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');
        }
        this.factory = options.factory;
        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });
        if (this.options.noJustification === false && typeof options.width === 'undefined') {
            this.options.autoWidth = true;
        }
    }
    setContext(context) {
        super.setContext(context);
        this.factory.setContext(context);
        return this;
    }
    addConnector(type = 'double') {
        this.connector = this.factory.StaveConnector({
            top_stave: this.parts[0].stave,
            bottom_stave: this.parts[this.parts.length - 1].stave,
            type,
        });
        return this.connector;
    }
    addStave(params) {
        var _a;
        const staveOptions = Object.assign({ left_bar: false }, params.options);
        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });
        const p = Object.assign(Object.assign({ stave, spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });
        const ctx = this.getContext();
        p.voices.forEach((voice) => voice
            .setContext(ctx)
            .setStave(stave)
            .getTickables()
            .forEach((tickable) => tickable.setStave(stave)));
        if (p.stave) {
            this.parts.push(p);
        }
        return stave;
    }
    addVoiceToPart(voices, part) {
        const ctx = this.getContext();
        voices.forEach((voice) => {
            voice.setContext(ctx);
        });
        this.parts[part].voices = this.parts[part].voices.concat(voices);
    }
    getStaveForTickable(part, tickable) {
        var _a;
        return (_a = tickable.getStave()) !== null && _a !== void 0 ? _a : part.stave;
    }
    format() {
        const options_details = this.options.details;
        let justifyWidth = 0;
        const formatter = new _formatter_js__WEBPACK_IMPORTED_MODULE_1__.Formatter(options_details);
        this.formatter = formatter;
        let y = this.options.y;
        let startX = 0;
        let allVoices = [];
        let allStaves = [];
        const debugNoteMetricsYs = [];
        this.parts.forEach((part) => {
            y = y + part.stave.space(part.spaceAbove);
            part.stave.setY(y);
            y = y + part.stave.space(part.spaceBelow);
            y = y + part.stave.space(this.options.spaceBetweenStaves);
            if (part.debugNoteMetrics) {
                debugNoteMetricsYs.push({ y, voice: part.voices[0] });
                y += 15;
            }
            formatter.joinVoices(part.voices);
            allVoices = allVoices.concat(part.voices);
            allStaves = allStaves.concat(part.stave);
            startX = Math.max(startX, part.stave.getNoteStartX());
        });
        this.parts.forEach((part) => {
            part.voices.forEach((voice) => {
                voice.getTickables().forEach((tickable) => {
                    const stave = tickable.getStave();
                    if (stave)
                        tickable.setStave(stave);
                });
            });
        });
        this.parts.forEach((part) => part.stave.setNoteStartX(startX));
        if (this.options.autoWidth) {
            justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);
            const totalWidth = justifyWidth + _stave_js__WEBPACK_IMPORTED_MODULE_3__.Stave.defaultPadding + (startX - this.options.x);
            this.parts.forEach((part) => {
                part.stave.setWidth(totalWidth);
            });
        }
        else {
            justifyWidth = this.options.noPadding
                ? this.options.width - (startX - this.options.x)
                : this.options.width - (startX - this.options.x) - _stave_js__WEBPACK_IMPORTED_MODULE_3__.Stave.defaultPadding;
        }
        formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);
        formatter.postFormat();
        for (let i = 0; i < this.options.formatIterations; i++) {
            formatter.tune(options_details);
        }
        this.startX = startX;
        this.debugNoteMetricsYs = debugNoteMetricsYs;
        this.lastY = y;
        _stave_js__WEBPACK_IMPORTED_MODULE_3__.Stave.formatBegModifiers(allStaves);
    }
    draw() {
        const ctx = this.checkContext();
        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('NoFormatter', 'format() must be called before draw()');
        }
        this.setRendered();
        if (this.options.debugFormatter) {
            _formatter_js__WEBPACK_IMPORTED_MODULE_1__.Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);
        }
        this.debugNoteMetricsYs.forEach((d) => {
            d.voice.getTickables().forEach((tickable) => _note_js__WEBPACK_IMPORTED_MODULE_2__.Note.plotMetrics(ctx, tickable, d.y));
        });
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tables.js":
/*!**************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tables.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tables: () => (/* binding */ Tables)
/* harmony export */ });
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



const RESOLUTION = 16384;
const durations = {
    '1/2': RESOLUTION * 2,
    1: RESOLUTION / 1,
    2: RESOLUTION / 2,
    4: RESOLUTION / 4,
    8: RESOLUTION / 8,
    16: RESOLUTION / 16,
    32: RESOLUTION / 32,
    64: RESOLUTION / 64,
    128: RESOLUTION / 128,
    256: RESOLUTION / 256,
};
const durationAliases = {
    w: '1',
    h: '2',
    q: '4',
    b: '256',
};
const keySignatures = {
    C: { num: 0 },
    Am: { num: 0 },
    F: { acc: 'b', num: 1 },
    Dm: { acc: 'b', num: 1 },
    Bb: { acc: 'b', num: 2 },
    Gm: { acc: 'b', num: 2 },
    Eb: { acc: 'b', num: 3 },
    Cm: { acc: 'b', num: 3 },
    Ab: { acc: 'b', num: 4 },
    Fm: { acc: 'b', num: 4 },
    Db: { acc: 'b', num: 5 },
    Bbm: { acc: 'b', num: 5 },
    Gb: { acc: 'b', num: 6 },
    Ebm: { acc: 'b', num: 6 },
    Cb: { acc: 'b', num: 7 },
    Abm: { acc: 'b', num: 7 },
    G: { acc: '#', num: 1 },
    Em: { acc: '#', num: 1 },
    D: { acc: '#', num: 2 },
    Bm: { acc: '#', num: 2 },
    A: { acc: '#', num: 3 },
    'F#m': { acc: '#', num: 3 },
    E: { acc: '#', num: 4 },
    'C#m': { acc: '#', num: 4 },
    B: { acc: '#', num: 5 },
    'G#m': { acc: '#', num: 5 },
    'F#': { acc: '#', num: 6 },
    'D#m': { acc: '#', num: 6 },
    'C#': { acc: '#', num: 7 },
    'A#m': { acc: '#', num: 7 },
};
const clefs = {
    treble: { line_shift: 0 },
    bass: { line_shift: 6 },
    tenor: { line_shift: 4 },
    alto: { line_shift: 3 },
    soprano: { line_shift: 1 },
    percussion: { line_shift: 0 },
    'mezzo-soprano': { line_shift: 2 },
    'baritone-c': { line_shift: 5 },
    'baritone-f': { line_shift: 5 },
    subbass: { line_shift: 7 },
    french: { line_shift: -1 },
};
const notesInfo = {
    C: { index: 0, int_val: 0 },
    CN: { index: 0, int_val: 0, accidental: 'n' },
    'C#': { index: 0, int_val: 1, accidental: '#' },
    'C##': { index: 0, int_val: 2, accidental: '##' },
    CB: { index: 0, int_val: 11, accidental: 'b' },
    CBB: { index: 0, int_val: 10, accidental: 'bb' },
    D: { index: 1, int_val: 2 },
    DN: { index: 1, int_val: 2, accidental: 'n' },
    'D#': { index: 1, int_val: 3, accidental: '#' },
    'D##': { index: 1, int_val: 4, accidental: '##' },
    DB: { index: 1, int_val: 1, accidental: 'b' },
    DBB: { index: 1, int_val: 0, accidental: 'bb' },
    E: { index: 2, int_val: 4 },
    EN: { index: 2, int_val: 4, accidental: 'n' },
    'E#': { index: 2, int_val: 5, accidental: '#' },
    'E##': { index: 2, int_val: 6, accidental: '##' },
    EB: { index: 2, int_val: 3, accidental: 'b' },
    EBB: { index: 2, int_val: 2, accidental: 'bb' },
    F: { index: 3, int_val: 5 },
    FN: { index: 3, int_val: 5, accidental: 'n' },
    'F#': { index: 3, int_val: 6, accidental: '#' },
    'F##': { index: 3, int_val: 7, accidental: '##' },
    FB: { index: 3, int_val: 4, accidental: 'b' },
    FBB: { index: 3, int_val: 3, accidental: 'bb' },
    G: { index: 4, int_val: 7 },
    GN: { index: 4, int_val: 7, accidental: 'n' },
    'G#': { index: 4, int_val: 8, accidental: '#' },
    'G##': { index: 4, int_val: 9, accidental: '##' },
    GB: { index: 4, int_val: 6, accidental: 'b' },
    GBB: { index: 4, int_val: 5, accidental: 'bb' },
    A: { index: 5, int_val: 9 },
    AN: { index: 5, int_val: 9, accidental: 'n' },
    'A#': { index: 5, int_val: 10, accidental: '#' },
    'A##': { index: 5, int_val: 11, accidental: '##' },
    AB: { index: 5, int_val: 8, accidental: 'b' },
    ABB: { index: 5, int_val: 7, accidental: 'bb' },
    B: { index: 6, int_val: 11 },
    BN: { index: 6, int_val: 11, accidental: 'n' },
    'B#': { index: 6, int_val: 12, accidental: '#' },
    'B##': { index: 6, int_val: 13, accidental: '##' },
    BB: { index: 6, int_val: 10, accidental: 'b' },
    BBB: { index: 6, int_val: 9, accidental: 'bb' },
    R: { index: 6, rest: true },
    X: {
        index: 6,
        accidental: '',
        octave: 4,
        code: 'noteheadXBlack',
        shift_right: 5.5,
    },
};
const validNoteTypes = {
    n: { name: 'note' },
    r: { name: 'rest' },
    h: { name: 'harmonic' },
    m: { name: 'muted' },
    s: { name: 'slash' },
    g: { name: 'ghost' },
    d: { name: 'diamond' },
    x: { name: 'x' },
    ci: { name: 'circled' },
    cx: { name: 'circle x' },
    sf: { name: 'slashed' },
    sb: { name: 'slashed backward' },
    sq: { name: 'square' },
    tu: { name: 'triangle up' },
    td: { name: 'triangle down' },
};
const accidentals = {
    '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },
    '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },
    b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },
    bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },
    n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },
    '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },
    '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },
    db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },
    d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },
    '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },
    '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },
    '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },
    bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },
    bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },
    o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },
    k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },
    bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },
    '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },
    ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },
    afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },
    accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },
    accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },
    accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },
    accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },
    accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },
    accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },
    accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },
    accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },
    accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },
    accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },
    accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },
    accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },
    accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },
    accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },
    accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },
    accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },
    accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },
    accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },
    accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },
    accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },
    accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },
    accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },
    accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },
    accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },
    accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },
    accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },
    accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },
    accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },
    accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },
    accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },
    accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },
    accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },
    accidentalNarrowReversedFlatAndFlat: {
        code: 'accidentalNarrowReversedFlatAndFlat',
        parenRightPaddingAdjustment: -1,
    },
    accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },
    accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },
};
const accidentalColumns = {
    1: {
        a: [1],
        b: [1],
    },
    2: {
        a: [1, 2],
    },
    3: {
        a: [1, 3, 2],
        b: [1, 2, 1],
        second_on_bottom: [1, 2, 3],
    },
    4: {
        a: [1, 3, 4, 2],
        b: [1, 2, 3, 1],
        spaced_out_tetrachord: [1, 2, 1, 2],
    },
    5: {
        a: [1, 3, 5, 4, 2],
        b: [1, 2, 4, 3, 1],
        spaced_out_pentachord: [1, 2, 3, 2, 1],
        very_spaced_out_pentachord: [1, 2, 1, 2, 1],
    },
    6: {
        a: [1, 3, 5, 6, 4, 2],
        b: [1, 2, 4, 5, 3, 1],
        spaced_out_hexachord: [1, 3, 2, 1, 3, 2],
        very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],
    },
};
const articulations = {
    'a.': { code: 'augmentationDot', between_lines: true },
    av: {
        aboveCode: 'articStaccatissimoAbove',
        belowCode: 'articStaccatissimoBelow',
        between_lines: true,
    },
    'a>': {
        aboveCode: 'articAccentAbove',
        belowCode: 'articAccentBelow',
        between_lines: true,
    },
    'a-': {
        aboveCode: 'articTenutoAbove',
        belowCode: 'articTenutoBelow',
        between_lines: true,
    },
    'a^': {
        aboveCode: 'articMarcatoAbove',
        belowCode: 'articMarcatoBelow',
        between_lines: false,
    },
    'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false },
    ao: {
        aboveCode: 'pluckedSnapPizzicatoAbove',
        belowCode: 'pluckedSnapPizzicatoBelow',
        between_lines: false,
    },
    ah: { code: 'stringsHarmonic', between_lines: false },
    'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false },
    'a@a': { code: 'fermataAbove', between_lines: false },
    'a@u': { code: 'fermataBelow', between_lines: false },
    'a@s': { aboveCode: 'fermataShortAbove', belowCode: 'fermataShortBelow', between_lines: false },
    'a@as': { code: 'fermataShortAbove', between_lines: false },
    'a@us': { code: 'fermataShortBelow', between_lines: false },
    'a@l': { aboveCode: 'fermataLongAbove', belowCode: 'fermataLongBelow', between_lines: false },
    'a@al': { code: 'fermataLongAbove', between_lines: false },
    'a@ul': { code: 'fermataLongBelow', between_lines: false },
    'a@vl': { aboveCode: 'fermataVeryLongAbove', belowCode: 'fermataVeryLongBelow', between_lines: false },
    'a@avl': { code: 'fermataVeryLongAbove', between_lines: false },
    'a@uvl': { code: 'fermataVeryLongBelow', between_lines: false },
    'a|': { code: 'stringsUpBow', between_lines: false },
    am: { code: 'stringsDownBow', between_lines: false },
    'a,': { code: 'pictChokeCymbal', between_lines: false },
};
const ornaments = {
    mordent: { code: 'ornamentShortTrill' },
    mordent_inverted: { code: 'ornamentMordent' },
    turn: { code: 'ornamentTurn' },
    turn_inverted: { code: 'ornamentTurnSlash' },
    tr: { code: 'ornamentTrill' },
    upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },
    downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },
    prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },
    pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },
    upmordent: { code: 'ornamentPrecompSlideTrillBach' },
    downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },
    lineprall: { code: 'ornamentPrecompAppoggTrill' },
    prallprall: { code: 'ornamentTremblement' },
    scoop: { code: 'brassScoop' },
    doit: { code: 'brassDoitMedium' },
    fall: { code: 'brassFallLipShort' },
    doitLong: { code: 'brassLiftMedium' },
    fallLong: { code: 'brassFallRoughMedium' },
    bend: { code: 'brassBend' },
    plungerClosed: { code: 'brassMuteClosed' },
    plungerOpen: { code: 'brassMuteOpen' },
    flip: { code: 'brassFlip' },
    jazzTurn: { code: 'brassJazzTurn' },
    smear: { code: 'brassSmear' },
};
class Tables {
    static currentMusicFont() {
        if (Tables.MUSIC_FONT_STACK.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');
        }
        else {
            return Tables.MUSIC_FONT_STACK[0];
        }
    }
    static clefProperties(clef) {
        if (!clef || !(clef in clefs))
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArgument', 'Invalid clef: ' + clef);
        return clefs[clef];
    }
    static keyProperties(keyOctaveGlyph, clef = 'treble', params) {
        let options = { octave_shift: 0, duration: '4' };
        if (typeof params === 'object') {
            options = Object.assign(Object.assign({}, options), params);
        }
        const duration = Tables.sanitizeDuration(options.duration);
        const pieces = keyOctaveGlyph.split('/');
        if (pieces.length < 2) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);
        }
        const key = pieces[0].toUpperCase();
        const value = notesInfo[key];
        if (!value)
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', 'Invalid key name: ' + key);
        if (value.octave)
            pieces[1] = value.octave.toString();
        let octave = parseInt(pieces[1], 10);
        octave += -1 * options.octave_shift;
        const baseIndex = octave * 7 - 4 * 7;
        let line = (baseIndex + value.index) / 2;
        line += Tables.clefProperties(clef).line_shift;
        let stroke = 0;
        if (line <= 0 && (line * 2) % 2 === 0)
            stroke = 1;
        if (line >= 6 && (line * 2) % 2 === 0)
            stroke = -1;
        const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;
        const code = value.code;
        const shift_right = value.shift_right;
        let customNoteHeadProps = {};
        if (pieces.length > 2 && pieces[2]) {
            const glyphName = pieces[2].toUpperCase();
            customNoteHeadProps = { code: this.codeNoteHead(glyphName, duration) } || {};
        }
        return Object.assign({ key,
            octave,
            line,
            int_value, accidental: value.accidental, code,
            stroke,
            shift_right, displaced: false }, customNoteHeadProps);
    }
    static integerToNote(integer) {
        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);
        }
        const table = {
            0: 'C',
            1: 'C#',
            2: 'D',
            3: 'D#',
            4: 'E',
            5: 'F',
            6: 'F#',
            7: 'G',
            8: 'G#',
            9: 'A',
            10: 'A#',
            11: 'B',
        };
        const noteValue = table[integer];
        if (!noteValue) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);
        }
        return noteValue;
    }
    static tabToGlyph(fret, scale = 1.0) {
        let glyph = undefined;
        let width = 0;
        let shift_y = 0;
        if (fret.toUpperCase() === 'X') {
            const glyphMetrics = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph('accidentalDoubleSharp', Tables.TABLATURE_FONT_SCALE).getMetrics();
            glyph = 'accidentalDoubleSharp';
            if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)
                throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('InvalidMetrics', 'Width and height required');
            width = glyphMetrics.width;
            shift_y = -glyphMetrics.height / 2;
        }
        else {
            width = Tables.textWidth(fret);
        }
        return {
            text: fret,
            code: glyph,
            getWidth: () => width * scale,
            shift_y,
        };
    }
    static textWidth(text) {
        return 7 * text.toString().length;
    }
    static articulationCodes(artic) {
        return articulations[artic];
    }
    static accidentalCodes(acc) {
        return accidentals[acc];
    }
    static ornamentCodes(acc) {
        return ornaments[acc];
    }
    static keySignature(spec) {
        const keySpec = keySignatures[spec];
        if (!keySpec) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);
        }
        if (!keySpec.acc) {
            return [];
        }
        const accidentalList = {
            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],
            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],
        };
        const notes = accidentalList[keySpec.acc];
        const acc_list = [];
        for (let i = 0; i < keySpec.num; ++i) {
            const line = notes[i];
            acc_list.push({ type: keySpec.acc, line });
        }
        return acc_list;
    }
    static getKeySignatures() {
        return keySignatures;
    }
    static hasKeySignature(spec) {
        return spec in keySignatures;
    }
    static sanitizeDuration(duration) {
        const durationNumber = durationAliases[duration];
        if (durationNumber !== undefined) {
            duration = durationNumber;
        }
        if (durations[duration] === undefined) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);
        }
        return duration;
    }
    static durationToFraction(duration) {
        return new _fraction_js__WEBPACK_IMPORTED_MODULE_0__.Fraction().parse(Tables.sanitizeDuration(duration));
    }
    static durationToNumber(duration) {
        return Tables.durationToFraction(duration).value();
    }
    static durationToTicks(duration) {
        duration = Tables.sanitizeDuration(duration);
        const ticks = durations[duration];
        if (ticks === undefined) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('InvalidDuration');
        }
        return ticks;
    }
    static codeNoteHead(type, duration) {
        let code = '';
        switch (type) {
            case 'D0':
                code = 'noteheadDiamondWhole';
                break;
            case 'D1':
                code = 'noteheadDiamondHalf';
                break;
            case 'D2':
                code = 'noteheadDiamondBlack';
                break;
            case 'D3':
                code = 'noteheadDiamondBlack';
                break;
            case 'T0':
                code = 'noteheadTriangleUpWhole';
                break;
            case 'T1':
                code = 'noteheadTriangleUpHalf';
                break;
            case 'T2':
                code = 'noteheadTriangleUpBlack';
                break;
            case 'T3':
                code = 'noteheadTriangleUpBlack';
                break;
            case 'X0':
                code = 'noteheadXWhole';
                break;
            case 'X1':
                code = 'noteheadXHalf';
                break;
            case 'X2':
                code = 'noteheadXBlack';
                break;
            case 'X3':
                code = 'noteheadCircleX';
                break;
            case 'S1':
                code = 'noteheadSquareWhite';
                break;
            case 'S2':
                code = 'noteheadSquareBlack';
                break;
            case 'R1':
                code = 'vexNoteHeadRectWhite';
                break;
            case 'R2':
                code = 'vexNoteHeadRectBlack';
                break;
            case 'DO':
                code = 'noteheadTriangleUpBlack';
                break;
            case 'RE':
                code = 'noteheadMoonBlack';
                break;
            case 'MI':
                code = 'noteheadDiamondBlack';
                break;
            case 'FA':
                code = 'noteheadTriangleLeftBlack';
                break;
            case 'FAUP':
                code = 'noteheadTriangleRightBlack';
                break;
            case 'SO':
                code = 'noteheadBlack';
                break;
            case 'LA':
                code = 'noteheadSquareBlack';
                break;
            case 'TI':
                code = 'noteheadTriangleRoundDownBlack';
                break;
            case 'D':
            case 'H':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadDiamondDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadDiamondWhole';
                        break;
                    case '2':
                        code = 'noteheadDiamondHalf';
                        break;
                    default:
                        code = 'noteheadDiamondBlack';
                        break;
                }
                break;
            case 'N':
            case 'G':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadWhole';
                        break;
                    case '2':
                        code = 'noteheadHalf';
                        break;
                    default:
                        code = 'noteheadBlack';
                        break;
                }
                break;
            case 'M':
            case 'X':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadXDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadXWhole';
                        break;
                    case '2':
                        code = 'noteheadXHalf';
                        break;
                    default:
                        code = 'noteheadXBlack';
                        break;
                }
                break;
            case 'CX':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadCircleXDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadCircleXWhole';
                        break;
                    case '2':
                        code = 'noteheadCircleXHalf';
                        break;
                    default:
                        code = 'noteheadCircleX';
                        break;
                }
                break;
            case 'CI':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadCircledDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadCircledWhole';
                        break;
                    case '2':
                        code = 'noteheadCircledHalf';
                        break;
                    default:
                        code = 'noteheadCircledBlack';
                        break;
                }
                break;
            case 'SQ':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadDoubleWholeSquare';
                        break;
                    case '1':
                        code = 'noteheadSquareWhite';
                        break;
                    case '2':
                        code = 'noteheadSquareWhite';
                        break;
                    default:
                        code = 'noteheadSquareBlack';
                        break;
                }
                break;
            case 'TU':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadTriangleUpDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadTriangleUpWhole';
                        break;
                    case '2':
                        code = 'noteheadTriangleUpHalf';
                        break;
                    default:
                        code = 'noteheadTriangleUpBlack';
                        break;
                }
                break;
            case 'TD':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadTriangleDownDoubleWhole';
                        break;
                    case '1':
                        code = 'noteheadTriangleDownWhole';
                        break;
                    case '2':
                        code = 'noteheadTriangleDownHalf';
                        break;
                    default:
                        code = 'noteheadTriangleDownBlack';
                        break;
                }
                break;
            case 'SF':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadSlashedDoubleWhole1';
                        break;
                    case '1':
                        code = 'noteheadSlashedWhole1';
                        break;
                    case '2':
                        code = 'noteheadSlashedHalf1';
                        break;
                    default:
                        code = 'noteheadSlashedBlack1';
                }
                break;
            case 'SB':
                switch (duration) {
                    case '1/2':
                        code = 'noteheadSlashedDoubleWhole2';
                        break;
                    case '1':
                        code = 'noteheadSlashedWhole2';
                        break;
                    case '2':
                        code = 'noteheadSlashedHalf2';
                        break;
                    default:
                        code = 'noteheadSlashedBlack2';
                }
                break;
        }
        return code;
    }
    static getGlyphProps(duration, type = 'n') {
        duration = Tables.sanitizeDuration(duration);
        const code = durationCodes[duration];
        if (code === undefined) {
            return undefined;
        }
        let glyphTypeProperties = code.type[type];
        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);
        if (codeNoteHead != '')
            glyphTypeProperties = Object.assign(Object.assign({}, glyphTypeProperties), { code_head: codeNoteHead, code: codeNoteHead });
        const code_head = glyphTypeProperties.code_head;
        const getWidth = (scale = Tables.NOTATION_FONT_SCALE) => _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.getWidth(code_head, scale);
        return Object.assign(Object.assign(Object.assign({}, code.common), { getWidth: getWidth }), glyphTypeProperties);
    }
}
Tables.SOFTMAX_FACTOR = 100;
Tables.STEM_WIDTH = 1.5;
Tables.STEM_HEIGHT = 35;
Tables.STAVE_LINE_THICKNESS = 1;
Tables.RENDER_PRECISION_PLACES = 3;
Tables.RESOLUTION = RESOLUTION;
Tables.MUSIC_FONT_STACK = [];
Tables.NOTATION_FONT_SCALE = 39;
Tables.TABLATURE_FONT_SCALE = 39;
Tables.SLASH_NOTEHEAD_WIDTH = 15;
Tables.STAVE_LINE_DISTANCE = 10;
Tables.TEXT_HEIGHT_OFFSET_HACK = 1;
Tables.accidentalMap = accidentals;
Tables.accidentalColumnsTable = accidentalColumns;
Tables.unicode = {
    sharp: String.fromCharCode(0x266f),
    flat: String.fromCharCode(0x266d),
    natural: String.fromCharCode(0x266e),
    triangle: String.fromCharCode(0x25b3),
    'o-with-slash': String.fromCharCode(0x00f8),
    degrees: String.fromCharCode(0x00b0),
    circle: String.fromCharCode(0x25cb),
};
Tables.validTypes = validNoteTypes;
Tables.TIME4_4 = {
    num_beats: 4,
    beat_value: 4,
    resolution: RESOLUTION,
};
const durationCodes = {
    '1/2': {
        common: {
            stem: false,
            stem_offset: 0,
            flag: false,
            stem_up_extension: -Tables.STEM_HEIGHT,
            stem_down_extension: -Tables.STEM_HEIGHT,
            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,
            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'restDoubleWhole',
                rest: true,
                position: 'B/5',
                dot_shiftY: 0.5,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    1: {
        common: {
            stem: false,
            stem_offset: 0,
            flag: false,
            stem_up_extension: -Tables.STEM_HEIGHT,
            stem_down_extension: -Tables.STEM_HEIGHT,
            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,
            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'restWhole',
                leger_code_head: 'restWholeLegerLine',
                rest: true,
                position: 'D/5',
                dot_shiftY: 0.5,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    2: {
        common: {
            stem: true,
            stem_offset: 0,
            flag: false,
            stem_up_extension: 0,
            stem_down_extension: 0,
            tabnote_stem_up_extension: 0,
            tabnote_stem_down_extension: 0,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'restHalf',
                leger_code_head: 'restHalfLegerLine',
                stem: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -0.5,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    4: {
        common: {
            stem: true,
            stem_offset: 0,
            flag: false,
            stem_up_extension: 0,
            stem_down_extension: 0,
            tabnote_stem_up_extension: 0,
            tabnote_stem_down_extension: 0,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'restQuarter',
                stem: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -0.5,
                line_above: 1.5,
                line_below: 1.5,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    8: {
        common: {
            stem: true,
            stem_offset: 0,
            flag: true,
            beam_count: 1,
            stem_beam_extension: 0,
            code_flag_upstem: 'flag8thUp',
            code_flag_downstem: 'flag8thDown',
            stem_up_extension: 0,
            stem_down_extension: 0,
            tabnote_stem_up_extension: 0,
            tabnote_stem_down_extension: 0,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'rest8th',
                stem: false,
                flag: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -0.5,
                line_above: 1.0,
                line_below: 1.0,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    16: {
        common: {
            beam_count: 2,
            stem_beam_extension: 0,
            stem: true,
            stem_offset: 0,
            flag: true,
            code_flag_upstem: 'flag16thUp',
            code_flag_downstem: 'flag16thDown',
            stem_up_extension: 0,
            stem_down_extension: 0,
            tabnote_stem_up_extension: 0,
            tabnote_stem_down_extension: 0,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'rest16th',
                stem: false,
                flag: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -0.5,
                line_above: 1.0,
                line_below: 2.0,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    32: {
        common: {
            beam_count: 3,
            stem_beam_extension: 7.5,
            stem: true,
            stem_offset: 0,
            flag: true,
            code_flag_upstem: 'flag32ndUp',
            code_flag_downstem: 'flag32ndDown',
            stem_up_extension: 9,
            stem_down_extension: 9,
            tabnote_stem_up_extension: 9,
            tabnote_stem_down_extension: 9,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'rest32nd',
                stem: false,
                flag: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -1.5,
                line_above: 2.0,
                line_below: 2.0,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    64: {
        common: {
            beam_count: 4,
            stem_beam_extension: 15,
            stem: true,
            stem_offset: 0,
            flag: true,
            code_flag_upstem: 'flag64thUp',
            code_flag_downstem: 'flag64thDown',
            stem_up_extension: 13,
            stem_down_extension: 13,
            tabnote_stem_up_extension: 13,
            tabnote_stem_down_extension: 13,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'rest64th',
                stem: false,
                flag: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -1.5,
                line_above: 2.0,
                line_below: 3.0,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
    128: {
        common: {
            beam_count: 5,
            stem_beam_extension: 22.5,
            stem: true,
            stem_offset: 0,
            flag: true,
            code_flag_upstem: 'flag128thUp',
            code_flag_downstem: 'flag128thDown',
            stem_up_extension: 22,
            stem_down_extension: 22,
            tabnote_stem_up_extension: 22,
            tabnote_stem_down_extension: 22,
            dot_shiftY: 0,
            line_above: 0,
            line_below: 0,
        },
        type: {
            r: {
                code_head: 'rest128th',
                stem: false,
                flag: false,
                rest: true,
                position: 'B/4',
                dot_shiftY: -2.5,
                line_above: 3.0,
                line_below: 3.0,
            },
            s: {
                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,
                position: 'B/4',
            },
        },
    },
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tabnote.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tabnote.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabNote: () => (/* binding */ TabNote)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _stemmablenote_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stemmablenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/stemmablenote.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");








function getUnusedStringGroups(num_lines, strings_used) {
    const stem_through = [];
    let group = [];
    for (let string = 1; string <= num_lines; string++) {
        const is_used = strings_used.indexOf(string) > -1;
        if (!is_used) {
            group.push(string);
        }
        else {
            stem_through.push(group);
            group = [];
        }
    }
    if (group.length > 0)
        stem_through.push(group);
    return stem_through;
}
function getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {
    const up_stem = stem_direction !== 1;
    const down_stem = stem_direction !== -1;
    const line_spacing = stave.getSpacingBetweenLines();
    const total_lines = stave.getNumLines();
    const stem_lines = [];
    unused_strings.forEach((strings) => {
        const containsLastString = strings.indexOf(total_lines) > -1;
        const containsFirstString = strings.indexOf(1) > -1;
        if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {
            return;
        }
        if (strings.length === 1) {
            strings.push(strings[0]);
        }
        const line_ys = [];
        strings.forEach((string, index, strings) => {
            const isTopBound = string === 1;
            const isBottomBound = string === total_lines;
            let y = stave.getYForLine(string - 1);
            if (index === 0 && !isTopBound) {
                y -= line_spacing / 2 - 1;
            }
            else if (index === strings.length - 1 && !isBottomBound) {
                y += line_spacing / 2 - 1;
            }
            line_ys.push(y);
            if (stem_direction === 1 && isTopBound) {
                line_ys.push(stem_y - 2);
            }
            else if (stem_direction === -1 && isBottomBound) {
                line_ys.push(stem_y + 2);
            }
        });
        stem_lines.push(line_ys.sort((a, b) => a - b));
    });
    return stem_lines;
}
class TabNote extends _stemmablenote_js__WEBPACK_IMPORTED_MODULE_4__.StemmableNote {
    constructor(noteStruct, draw_stem = false) {
        super(noteStruct);
        this.glyphs = [];
        this.greatestString = () => {
            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));
        };
        this.leastString = () => {
            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));
        };
        this.ghost = false;
        this.positions = noteStruct.positions || [];
        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_scale: _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.TABLATURE_FONT_SCALE, draw_stem, draw_dots: draw_stem, draw_stem_through_stave: false, y_shift: 0, scale: 1.0, font: `${_font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SIZE}pt ${_font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF}` });
        this.glyph = _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.getGlyphProps(this.duration, this.noteType);
        (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.defined)(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);
        this.buildStem();
        if (noteStruct.stem_direction) {
            this.setStemDirection(noteStruct.stem_direction);
        }
        else {
            this.setStemDirection(_stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP);
        }
        this.ghost = false;
        this.updateWidth();
    }
    static get CATEGORY() {
        return "TabNote";
    }
    reset() {
        super.reset();
        if (this.stave)
            this.setStave(this.stave);
        return this;
    }
    setGhost(ghost) {
        this.ghost = ghost;
        this.updateWidth();
        return this;
    }
    hasStem() {
        if (this.render_options.draw_stem)
            return true;
        return false;
    }
    getStemExtension() {
        const glyph = this.getGlyph();
        if (this.stem_extension_override != null) {
            return this.stem_extension_override;
        }
        if (glyph) {
            return this.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;
        }
        return 0;
    }
    updateWidth() {
        this.glyphs = [];
        this.width = 0;
        for (let i = 0; i < this.positions.length; ++i) {
            let fret = this.positions[i].fret;
            if (this.ghost)
                fret = '(' + fret + ')';
            const glyph = _tables_js__WEBPACK_IMPORTED_MODULE_5__.Tables.tabToGlyph(fret.toString(), this.render_options.scale);
            this.glyphs.push(glyph);
            this.width = Math.max(glyph.getWidth(), this.width);
        }
        this.glyph.getWidth = () => this.width;
    }
    setStave(stave) {
        super.setStave(stave);
        const ctx = stave.getContext();
        this.setContext(ctx);
        if (ctx) {
            this.width = 0;
            for (let i = 0; i < this.glyphs.length; ++i) {
                const glyph = this.glyphs[i];
                const text = '' + glyph.text;
                if (text.toUpperCase() !== 'X') {
                    ctx.save();
                    ctx.setFont(this.render_options.font);
                    glyph.width = ctx.measureText(text).width;
                    ctx.restore();
                    glyph.getWidth = () => glyph.width;
                }
                this.width = Math.max(glyph.getWidth(), this.width);
            }
            this.glyph.getWidth = () => this.width;
        }
        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));
        this.setYs(ys);
        if (this.stem) {
            this.stem.setYBounds(this.getStemY(), this.getStemY());
        }
        return this;
    }
    getPositions() {
        return this.positions;
    }
    getModifierStartXY(position, index) {
        if (!this.preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_7__.RuntimeError('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
        }
        if (this.ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_7__.RuntimeError('NoYValues', 'No Y-Values calculated for this note.');
        }
        let x = 0;
        if (position === _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT) {
            x = -1 * 2;
        }
        else if (position === _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.RIGHT) {
            x = this.width + 2;
        }
        else if (position === _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.BELOW || position === _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE) {
            const note_glyph_width = this.glyph.getWidth();
            x = note_glyph_width / 2;
        }
        return {
            x: this.getAbsoluteX() + x,
            y: this.ys[index],
        };
    }
    getLineForRest() {
        return Number(this.positions[0].str);
    }
    preFormat() {
        if (this.preFormatted)
            return;
        if (this.modifierContext)
            this.modifierContext.preFormat();
        this.preFormatted = true;
    }
    getStemX() {
        return this.getCenterGlyphX();
    }
    getStemY() {
        const num_lines = this.checkStave().getNumLines();
        const stemUpLine = -0.5;
        const stemDownLine = num_lines - 0.5;
        const stemStartLine = _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;
        return this.checkStave().getYForLine(stemStartLine);
    }
    getStemExtents() {
        return this.checkStem().getExtents();
    }
    drawFlag() {
        var _a;
        const { beam, glyph, render_options: { draw_stem }, } = this;
        const context = this.checkContext();
        const shouldDrawFlag = beam == undefined && draw_stem;
        if (glyph.flag && shouldDrawFlag) {
            const flag_x = this.getStemX();
            const flag_y = this.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN
                ?
                    this.getStemY() - this.checkStem().getHeight() - (this.glyph ? this.glyph.stem_down_extension : 0)
                :
                    this.getStemY() - this.checkStem().getHeight() + (this.glyph ? this.glyph.stem_up_extension : 0);
            (_a = this.flag) === null || _a === void 0 ? void 0 : _a.render(context, flag_x, flag_y);
        }
    }
    drawModifiers() {
        this.modifiers.forEach((modifier) => {
            if ((0,_typeguard_js__WEBPACK_IMPORTED_MODULE_6__.isDot)(modifier) && !this.render_options.draw_dots) {
                return;
            }
            modifier.setContext(this.getContext());
            modifier.drawWithStyle();
        });
    }
    drawStemThrough() {
        const stemX = this.getStemX();
        const stemY = this.getStemY();
        const ctx = this.checkContext();
        const drawStem = this.render_options.draw_stem;
        const stemThrough = this.render_options.draw_stem_through_stave;
        if (drawStem && stemThrough) {
            const numLines = this.checkStave().getNumLines();
            const stringsUsed = this.positions.map((position) => Number(position.str));
            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);
            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());
            ctx.save();
            ctx.setLineWidth(_stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH);
            stemLines.forEach((bounds) => {
                if (bounds.length === 0)
                    return;
                ctx.beginPath();
                ctx.moveTo(stemX, bounds[0]);
                ctx.lineTo(stemX, bounds[bounds.length - 1]);
                ctx.stroke();
                ctx.closePath();
            });
            ctx.restore();
        }
    }
    drawPositions() {
        const ctx = this.checkContext();
        const x = this.getAbsoluteX();
        const ys = this.ys;
        for (let i = 0; i < this.positions.length; ++i) {
            const y = ys[i] + this.render_options.y_shift;
            const glyph = this.glyphs[i];
            const note_glyph_width = this.glyph.getWidth();
            const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;
            ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);
            if (glyph.code) {
                _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);
            }
            else {
                ctx.save();
                ctx.setFont(this.render_options.font);
                const text = glyph.text.toString();
                ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);
                ctx.restore();
            }
        }
    }
    draw() {
        const ctx = this.checkContext();
        if (this.ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_7__.RuntimeError('NoYValues', "Can't draw note without Y values.");
        }
        this.setRendered();
        const render_stem = this.beam == undefined && this.render_options.draw_stem;
        this.setAttribute('el', ctx.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true }));
        this.drawPositions();
        this.drawStemThrough();
        if (this.stem && render_stem) {
            const stem_x = this.getStemX();
            this.stem.setNoteHeadXBounds(stem_x, stem_x);
            ctx.openGroup('stem', undefined, { pointerBBox: true });
            this.stem.setContext(ctx).draw();
            ctx.closeGroup();
        }
        this.drawFlag();
        this.drawModifiers();
        ctx.closeGroup();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tabslide.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tabslide.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabSlide: () => (/* binding */ TabSlide)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _tabtie_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabtie.js */ "./node_modules/vexflow_smoosic/build/esm/src/tabtie.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



class TabSlide extends _tabtie_js__WEBPACK_IMPORTED_MODULE_1__.TabTie {
    constructor(notes, direction) {
        super(notes, 'sl.');
        if (!direction) {
            let first_fret = notes.first_note.getPositions()[0].fret;
            if (typeof first_fret === 'string') {
                first_fret = parseInt(first_fret, 10);
            }
            let last_fret = notes.last_note.getPositions()[0].fret;
            if (typeof last_fret === 'string') {
                last_fret = parseInt(last_fret, 10);
            }
            if (isNaN(first_fret) || isNaN(last_fret)) {
                direction = TabSlide.SLIDE_UP;
            }
            else {
                direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;
            }
        }
        this.direction = direction;
        this.render_options.cp1 = 11;
        this.render_options.cp2 = 14;
        this.render_options.y_shift = 0.5;
        this.resetFont();
    }
    static get CATEGORY() {
        return "TabSlide";
    }
    static get SLIDE_UP() {
        return 1;
    }
    static get SLIDE_DOWN() {
        return -1;
    }
    static createSlideUp(notes) {
        return new TabSlide(notes, TabSlide.SLIDE_UP);
    }
    static createSlideDown(notes) {
        return new TabSlide(notes, TabSlide.SLIDE_DOWN);
    }
    renderTie(params) {
        if (params.first_ys.length === 0 || params.last_ys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', 'No Y-values to render');
        }
        const ctx = this.checkContext();
        const first_x_px = params.first_x_px;
        const first_ys = params.first_ys;
        const last_x_px = params.last_x_px;
        const direction = params.direction;
        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadSlide', 'Invalid slide direction');
        }
        const first_indices = this.notes.first_indices;
        for (let i = 0; i < first_indices.length; ++i) {
            const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;
            if (isNaN(slide_y)) {
                throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('BadArguments', 'Bad indices for slide rendering.');
            }
            ctx.beginPath();
            ctx.moveTo(first_x_px, slide_y + 3 * direction);
            ctx.lineTo(last_x_px, slide_y - 3 * direction);
            ctx.closePath();
            ctx.stroke();
        }
        this.setRendered();
    }
}
TabSlide.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SERIF,
    size: 10,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.ITALIC,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tabstave.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tabstave.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabStave: () => (/* binding */ TabStave)
/* harmony export */ });
/* harmony import */ var _stave_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stave.js */ "./node_modules/vexflow_smoosic/build/esm/src/stave.js");

class TabStave extends _stave_js__WEBPACK_IMPORTED_MODULE_0__.Stave {
    static get CATEGORY() {
        return "TabStave";
    }
    constructor(x, y, width, options) {
        const tab_options = Object.assign({ spacing_between_lines_px: 13, num_lines: 6, top_text_position: 1 }, options);
        super(x, y, width, tab_options);
    }
    getYForGlyphs() {
        return this.getYForLine(2.5);
    }
    addTabGlyph() {
        this.addClef('tab');
        return this;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tabtie.js":
/*!**************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tabtie.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabTie: () => (/* binding */ TabTie)
/* harmony export */ });
/* harmony import */ var _stavetie_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavetie.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavetie.js");

class TabTie extends _stavetie_js__WEBPACK_IMPORTED_MODULE_0__.StaveTie {
    static get CATEGORY() {
        return "TabTie";
    }
    static createHammeron(notes) {
        return new TabTie(notes, 'H');
    }
    static createPulloff(notes) {
        return new TabTie(notes, 'P');
    }
    constructor(notes, text) {
        super(notes, text);
        this.render_options.cp1 = 9;
        this.render_options.cp2 = 11;
        this.render_options.y_shift = 3;
        this.direction = -1;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/textbracket.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/textbracket.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextBracket: () => (/* binding */ TextBracket),
/* harmony export */   TextBracketPosition: () => (/* binding */ TextBracketPosition)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/vexflow_smoosic/build/esm/src/renderer.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





function L(...args) {
    if (TextBracket.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.log)('Vex.Flow.TextBracket', args);
}
var TextBracketPosition;
(function (TextBracketPosition) {
    TextBracketPosition[TextBracketPosition["TOP"] = 1] = "TOP";
    TextBracketPosition[TextBracketPosition["BOTTOM"] = -1] = "BOTTOM";
})(TextBracketPosition || (TextBracketPosition = {}));
class TextBracket extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {
        super();
        this.start = start;
        this.stop = stop;
        this.text = text;
        this.superscript = superscript;
        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;
        this.line = 1;
        this.resetFont();
        this.render_options = {
            dashed: true,
            dash: [5],
            color: 'black',
            line_width: 1,
            show_bracket: true,
            bracket_height: 8,
            underline_superscript: true,
        };
    }
    static get CATEGORY() {
        return "TextBracket";
    }
    static get Position() {
        return TextBracketPosition;
    }
    static get PositionString() {
        return {
            top: TextBracketPosition.TOP,
            bottom: TextBracketPosition.BOTTOM,
        };
    }
    static get Positions() {
        L('Positions is deprecated, use TextBracketPosition instead.');
        return TextBracketPosition;
    }
    static get PositionsString() {
        L('PositionsString is deprecated, use PositionString instead.');
        return TextBracket.PositionString;
    }
    applyStyle(ctx) {
        ctx.setFont(this.font);
        const options = this.render_options;
        ctx.setStrokeStyle(options.color);
        ctx.setFillStyle(options.color);
        ctx.setLineWidth(options.line_width);
        return this;
    }
    setDashed(dashed, dash) {
        this.render_options.dashed = dashed;
        if (dash)
            this.render_options.dash = dash;
        return this;
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        let y = 0;
        switch (this.position) {
            case TextBracketPosition.TOP:
                y = this.start.checkStave().getYForTopText(this.line);
                break;
            case TextBracketPosition.BOTTOM:
                y = this.start.checkStave().getYForBottomText(this.line + _tables_js__WEBPACK_IMPORTED_MODULE_3__.Tables.TEXT_HEIGHT_OFFSET_HACK);
                break;
            default:
                throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);
        }
        const start = { x: this.start.getAbsoluteX(), y };
        const stop = { x: this.stop.getAbsoluteX(), y };
        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);
        const bracket_height = this.render_options.bracket_height * this.position;
        ctx.save();
        this.applyStyle(ctx);
        ctx.fillText(this.text, start.x, start.y);
        const main_measure = ctx.measureText(this.text);
        const main_width = main_measure.width;
        const main_height = main_measure.height;
        const super_y = start.y - main_height / 2.5;
        const { family, size, weight, style } = this.textFont;
        const smallerFontSize = _font_js__WEBPACK_IMPORTED_MODULE_1__.Font.scaleSize(size, 0.714286);
        ctx.setFont(family, smallerFontSize, weight, style);
        ctx.fillText(this.superscript, start.x + main_width + 1, super_y);
        const super_measure = ctx.measureText(this.superscript);
        const super_width = super_measure.width;
        const super_height = super_measure.height;
        let start_x = start.x;
        let line_y = super_y;
        const end_x = stop.x + this.stop.getGlyph().getWidth();
        if (this.position === TextBracketPosition.TOP) {
            start_x += main_width + super_width + 5;
            line_y -= super_height / 2.7;
        }
        else if (this.position === TextBracketPosition.BOTTOM) {
            line_y += super_height / 2.7;
            start_x += main_width + 2;
            if (!this.render_options.underline_superscript) {
                start_x += super_width;
            }
        }
        if (this.render_options.dashed) {
            _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);
            if (this.render_options.show_bracket) {
                _renderer_js__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);
            }
        }
        else {
            ctx.beginPath();
            ctx.moveTo(start_x, line_y);
            ctx.lineTo(end_x, line_y);
            if (this.render_options.show_bracket) {
                ctx.lineTo(end_x, line_y + bracket_height);
            }
            ctx.stroke();
            ctx.closePath();
        }
        ctx.restore();
    }
}
TextBracket.DEBUG = false;
TextBracket.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_1__.Font.SERIF,
    size: 15,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_1__.FontWeight.NORMAL,
    style: _font_js__WEBPACK_IMPORTED_MODULE_1__.FontStyle.ITALIC,
};


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/textdynamics.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/textdynamics.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextDynamics: () => (/* binding */ TextDynamics)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");



function L(...args) {
    if (TextDynamics.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.log)('Vex.Flow.TextDynamics', args);
}
class TextDynamics extends _note_js__WEBPACK_IMPORTED_MODULE_1__.Note {
    constructor(noteStruct) {
        super(noteStruct);
        this.sequence = (noteStruct.text || '').toLowerCase();
        this.line = noteStruct.line || 0;
        this.glyphs = [];
        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_size: 40 });
        L('New Dynamics Text: ', this.sequence);
    }
    static get CATEGORY() {
        return "TextDynamics";
    }
    static get GLYPHS() {
        return {
            f: {
                code: 'dynamicForte',
                width: 12,
            },
            p: {
                code: 'dynamicPiano',
                width: 14,
            },
            m: {
                code: 'dynamicMezzo',
                width: 17,
            },
            s: {
                code: 'dynamicSforzando',
                width: 10,
            },
            z: {
                code: 'dynamicZ',
                width: 12,
            },
            r: {
                code: 'dynamicRinforzando',
                width: 12,
            },
        };
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    preFormat() {
        let total_width = 0;
        this.glyphs = [];
        this.sequence.split('').forEach((letter) => {
            const glyph_data = TextDynamics.GLYPHS[letter];
            if (!glyph_data)
                throw new _util_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeError('Invalid dynamics character: ' + letter);
            const size = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.defined)(this.render_options.glyph_font_size);
            const glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(glyph_data.code, size, { category: 'textNote' });
            this.glyphs.push(glyph);
            total_width += glyph_data.width;
        });
        this.setWidth(total_width);
        this.preFormatted = true;
        return this;
    }
    draw() {
        this.setRendered();
        const x = this.getAbsoluteX();
        const y = this.checkStave().getYForLine(this.line + -3);
        L('Rendering Dynamics: ', this.sequence);
        let letter_x = x;
        this.glyphs.forEach((glyph, index) => {
            const current_letter = this.sequence[index];
            glyph.render(this.checkContext(), letter_x, y);
            letter_x += TextDynamics.GLYPHS[current_letter].width;
        });
    }
}
TextDynamics.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/textformatter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/textformatter.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextFormatter: () => (/* binding */ TextFormatter)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


function L(...args) {
    if (TextFormatter.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.log)('Vex.Flow.TextFormatter', args);
}
const textWidthCache = {};
const registry = {};
class TextFormatter {
    constructor(formatterInfo) {
        this.family = '';
        this.size = 14;
        this.resolution = 1000;
        this.glyphs = {};
        this.serifs = false;
        this.monospaced = false;
        this.italic = false;
        this.bold = false;
        this.superscriptOffset = 0;
        this.subscriptOffset = 0;
        this.maxSizeGlyph = 'H';
        this.cacheKey = '';
        this.updateParams(formatterInfo);
    }
    static getFontFamilies() {
        const registeredFonts = [];
        for (const fontFamily in registry) {
            const formatterInfo = registry[fontFamily];
            registeredFonts.push(Object.assign({}, formatterInfo));
        }
        return registeredFonts;
    }
    static create(requestedFont = {}) {
        L('create: ', requestedFont);
        if (!requestedFont.family) {
            requestedFont.family = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF;
        }
        const candidates = [];
        const requestedFamilies = requestedFont.family.split(/\s*,\s*/);
        for (const requestedFamily of requestedFamilies) {
            for (const fontFamily in registry) {
                if (fontFamily.startsWith(requestedFamily)) {
                    candidates.push(registry[fontFamily]);
                }
            }
            if (candidates.length > 0) {
                break;
            }
        }
        let formatter;
        if (candidates.length === 0) {
            formatter = new TextFormatter(Object.values(registry)[0]);
        }
        else if (candidates.length === 1) {
            formatter = new TextFormatter(candidates[0]);
        }
        else {
            const bold = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.isBold(requestedFont.weight);
            const italic = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.isItalic(requestedFont.style);
            const perfectMatch = candidates.find((f) => f.bold === bold && f.italic === italic);
            if (perfectMatch) {
                formatter = new TextFormatter(perfectMatch);
            }
            else {
                const partialMatch = candidates.find((f) => f.italic === italic || f.bold === bold);
                if (partialMatch) {
                    formatter = new TextFormatter(partialMatch);
                }
                else {
                    formatter = new TextFormatter(candidates[0]);
                }
            }
        }
        const fontSize = requestedFont.size;
        if (typeof fontSize !== 'undefined') {
            const fontSizeInPt = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.convertSizeToPointValue(fontSize);
            formatter.setFontSize(fontSizeInPt);
        }
        return formatter;
    }
    static getInfo(fontFamily) {
        return registry[fontFamily];
    }
    static registerInfo(info, overwrite = false) {
        L('registerInfo: ', info, overwrite);
        const fontFamily = info.family;
        const currFontInfo = registry[fontFamily];
        if (currFontInfo === undefined || overwrite) {
            registry[fontFamily] = info;
        }
    }
    updateParams(params) {
        if (params.family)
            this.family = params.family;
        if (params.resolution)
            this.resolution = params.resolution;
        if (params.glyphs)
            this.glyphs = params.glyphs;
        if (params.serifs)
            this.serifs = params.serifs;
        if (params.monospaced)
            this.monospaced = params.monospaced;
        if (params.italic)
            this.italic = params.italic;
        if (params.bold)
            this.bold = params.bold;
        if (params.maxSizeGlyph)
            this.maxSizeGlyph = params.maxSizeGlyph;
        if (params.superscriptOffset)
            this.superscriptOffset = params.superscriptOffset;
        if (params.subscriptOffset)
            this.subscriptOffset = params.subscriptOffset;
        this.updateCacheKey();
    }
    updateCacheKey() {
        const family = this.family.replace(/\s+/g, '_');
        const size = this.size;
        const weight = this.bold ? _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.BOLD : _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.NORMAL;
        const style = this.italic ? _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.ITALIC : _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL;
        this.cacheKey = `${family}%${size}%${weight}%${style}`;
    }
    getGlyphMetrics(character) {
        if (this.glyphs[character]) {
            return this.glyphs[character];
        }
        else {
            return this.glyphs[this.maxSizeGlyph];
        }
    }
    get maxHeight() {
        const metrics = this.getGlyphMetrics(this.maxSizeGlyph);
        return (metrics.ha / this.resolution) * this.fontSizeInPixels;
    }
    getWidthForCharacterInEm(c) {
        var _a;
        const metrics = this.getGlyphMetrics(c);
        if (!metrics) {
            return 0.65;
        }
        else {
            const advanceWidth = (_a = metrics.advanceWidth) !== null && _a !== void 0 ? _a : 0;
            return advanceWidth / this.resolution;
        }
    }
    getWidthForTextInEm(text) {
        const key = this.cacheKey;
        let cachedWidths = textWidthCache[key];
        if (cachedWidths === undefined) {
            cachedWidths = {};
            textWidthCache[key] = cachedWidths;
        }
        let width = cachedWidths[text];
        if (width === undefined) {
            width = 0;
            for (let i = 0; i < text.length; ++i) {
                width += this.getWidthForCharacterInEm(text[i]);
            }
            cachedWidths[text] = width;
        }
        return width;
    }
    getWidthForTextInPx(text) {
        return this.getWidthForTextInEm(text) * this.fontSizeInPixels;
    }
    setFontSize(size) {
        this.size = size;
        this.updateCacheKey();
        return this;
    }
    get fontSizeInPixels() {
        return this.size * _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.scaleToPxFrom.pt;
    }
    getResolution() {
        return this.resolution;
    }
}
TextFormatter.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/textnote.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/textnote.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextJustification: () => (/* binding */ TextJustification),
/* harmony export */   TextNote: () => (/* binding */ TextNote)
/* harmony export */ });
/* harmony import */ var _font_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font.js */ "./node_modules/vexflow_smoosic/build/esm/src/font.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




var TextJustification;
(function (TextJustification) {
    TextJustification[TextJustification["LEFT"] = 1] = "LEFT";
    TextJustification[TextJustification["CENTER"] = 2] = "CENTER";
    TextJustification[TextJustification["RIGHT"] = 3] = "RIGHT";
})(TextJustification || (TextJustification = {}));
class TextNote extends _note_js__WEBPACK_IMPORTED_MODULE_2__.Note {
    constructor(noteStruct) {
        super(noteStruct);
        this.text = noteStruct.text || '';
        this.superscript = noteStruct.superscript;
        this.subscript = noteStruct.subscript;
        this.setFont(noteStruct.font);
        this.line = noteStruct.line || 0;
        this.smooth = noteStruct.smooth || false;
        this.ignore_ticks = noteStruct.ignore_ticks || false;
        this.justification = TextJustification.LEFT;
        if (noteStruct.glyph) {
            const struct = TextNote.GLYPHS[noteStruct.glyph];
            if (!struct)
                throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('Invalid glyph type: ' + noteStruct.glyph);
            this.glyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_1__.Glyph(struct.code, 40, { category: 'textNote' });
            this.setWidth(this.glyph.getMetrics().width);
        }
        else {
            this.glyph = undefined;
        }
    }
    static get CATEGORY() {
        return "TextNote";
    }
    static get GLYPHS() {
        return {
            segno: {
                code: 'segno',
            },
            tr: {
                code: 'ornamentTrill',
            },
            mordent: {
                code: 'ornamentMordent',
            },
            mordent_upper: {
                code: 'ornamentShortTrill',
            },
            mordent_lower: {
                code: 'ornamentMordent',
            },
            f: {
                code: 'dynamicForte',
            },
            p: {
                code: 'dynamicPiano',
            },
            m: {
                code: 'dynamicMezzo',
            },
            s: {
                code: 'dynamicSforzando',
            },
            z: {
                code: 'dynamicZ',
            },
            coda: {
                code: 'coda',
            },
            pedal_open: {
                code: 'keyboardPedalPed',
            },
            pedal_close: {
                code: 'keyboardPedalUp',
            },
            caesura_straight: {
                code: 'caesura',
            },
            caesura_curved: {
                code: 'caesuraCurved',
            },
            breath: {
                code: 'breathMarkComma',
            },
            tick: {
                code: 'breathMarkTick',
            },
            turn: {
                code: 'ornamentTurn',
            },
            turn_inverted: {
                code: 'ornamentTurnSlash',
            },
        };
    }
    setJustification(just) {
        this.justification = just;
        return this;
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    preFormat() {
        if (this.preFormatted)
            return;
        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);
        if (this.smooth) {
            this.setWidth(0);
        }
        else {
            if (this.glyph) {
            }
            else {
                const ctx = this.checkContext();
                ctx.setFont(this.textFont);
                this.setWidth(ctx.measureText(this.text).width);
            }
        }
        if (this.justification === TextJustification.CENTER) {
            this.leftDisplacedHeadPx = this.width / 2;
        }
        else if (this.justification === TextJustification.RIGHT) {
            this.leftDisplacedHeadPx = this.width;
        }
        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;
        this.preFormatted = true;
    }
    draw() {
        const ctx = this.checkContext();
        const stave = this.checkStave();
        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);
        this.setRendered();
        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;
        const width = this.getWidth();
        if (this.justification === TextJustification.CENTER) {
            x -= width / 2;
        }
        else if (this.justification === TextJustification.RIGHT) {
            x -= width;
        }
        let y;
        if (this.glyph) {
            y = stave.getYForLine(this.line + -3);
            this.glyph.render(ctx, x, y);
        }
        else {
            y = stave.getYForLine(this.line + -3);
            this.applyStyle(ctx);
            ctx.setFont(this.textFont);
            ctx.fillText(this.text, x, y);
            const height = ctx.measureText(this.text).height;
            const { family, size, weight, style } = this.textFont;
            const smallerFontSize = _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.scaleSize(size, 0.769231);
            if (this.superscript) {
                ctx.setFont(family, smallerFontSize, weight, style);
                ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);
            }
            if (this.subscript) {
                ctx.setFont(family, smallerFontSize, weight, style);
                ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);
            }
            this.restoreStyle(ctx);
        }
    }
}
TextNote.TEXT_FONT = {
    family: _font_js__WEBPACK_IMPORTED_MODULE_0__.Font.SANS_SERIF,
    size: 12,
    weight: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontWeight.NORMAL,
    style: _font_js__WEBPACK_IMPORTED_MODULE_0__.FontStyle.NORMAL,
};
TextNote.Justification = TextJustification;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tickable.js":
/*!****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tickable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tickable: () => (/* binding */ Tickable)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




class Tickable extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor() {
        super();
        this._preFormatted = false;
        this._postFormatted = false;
        this.ticks = new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(0, 1);
        this.intrinsicTicks = 0;
        this.tickMultiplier = new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(1, 1);
        this.width = 0;
        this.x_shift = 0;
        this.modifiers = [];
        this.tupletStack = [];
        this.align_center = false;
        this.center_x_shift = 0;
        this.ignore_ticks = false;
        this.formatterMetrics = {
            freedom: { left: 0, right: 0 },
            duration: '',
            iterations: 0,
            space: {
                used: 0,
                mean: 0,
                deviation: 0,
            },
        };
    }
    static get CATEGORY() {
        return "Tickable";
    }
    reset() {
        return this;
    }
    getTicks() {
        return this.ticks;
    }
    shouldIgnoreTicks() {
        return this.ignore_ticks;
    }
    setIgnoreTicks(flag) {
        this.ignore_ticks = flag;
        return this;
    }
    setWidth(width) {
        this.width = width;
    }
    getWidth() {
        if (!this._preFormatted) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('UnformattedNote', "Can't call GetWidth on an unformatted note.");
        }
        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);
    }
    setXShift(x) {
        this.x_shift = x;
        return this;
    }
    getXShift() {
        return this.x_shift;
    }
    getX() {
        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);
        return tickContext.getX() + this.x_shift;
    }
    getFormatterMetrics() {
        return this.formatterMetrics;
    }
    getCenterXShift() {
        if (this.isCenterAligned()) {
            return this.center_x_shift;
        }
        return 0;
    }
    setCenterXShift(centerXShift) {
        this.center_x_shift = centerXShift;
        return this;
    }
    isCenterAligned() {
        return this.align_center;
    }
    setCenterAlignment(align_center) {
        this.align_center = align_center;
        return this;
    }
    getVoice() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.voice, 'NoVoice', 'Tickable has no voice.');
    }
    setVoice(voice) {
        this.voice = voice;
    }
    getTuplet() {
        return this.tuplet;
    }
    getTupletStack() {
        return this.tupletStack;
    }
    resetTuplet(tuplet) {
        let noteCount;
        let notesOccupied;
        if (tuplet) {
            const i = this.tupletStack.indexOf(tuplet);
            if (i !== -1) {
                this.tupletStack.splice(i, 1);
                noteCount = tuplet.getNoteCount();
                notesOccupied = tuplet.getNotesOccupied();
                this.applyTickMultiplier(noteCount, notesOccupied);
            }
            return this;
        }
        while (this.tupletStack.length) {
            tuplet = this.tupletStack.pop();
            noteCount = tuplet.getNoteCount();
            notesOccupied = tuplet.getNotesOccupied();
            this.applyTickMultiplier(noteCount, notesOccupied);
        }
        return this;
    }
    setTuplet(tuplet) {
        if (tuplet) {
            this.tupletStack.push(tuplet);
            const noteCount = tuplet.getNoteCount();
            const notesOccupied = tuplet.getNotesOccupied();
            this.applyTickMultiplier(notesOccupied, noteCount);
        }
        this.tuplet = tuplet;
        return this;
    }
    addToModifierContext(mc) {
        this.modifierContext = mc;
        for (let i = 0; i < this.modifiers.length; ++i) {
            this.modifierContext.addMember(this.modifiers[i]);
        }
        this.modifierContext.addMember(this);
        this._preFormatted = false;
        return this;
    }
    addModifier(modifier, index = 0) {
        this.modifiers.push(modifier);
        this._preFormatted = false;
        return this;
    }
    getModifiers() {
        return this.modifiers;
    }
    setTickContext(tc) {
        this.tickContext = tc;
        this._preFormatted = false;
    }
    checkTickContext(message = 'Tickable has no tick context.') {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.tickContext, 'NoTickContext', message);
    }
    preFormat() {
        if (this._preFormatted)
            return;
        this.width = 0;
        if (this.modifierContext) {
            this.modifierContext.preFormat();
            this.width += this.modifierContext.getWidth();
        }
    }
    set preFormatted(value) {
        this._preFormatted = value;
    }
    get preFormatted() {
        return this._preFormatted;
    }
    postFormat() {
        if (this._postFormatted)
            return this;
        this._postFormatted = true;
        return this;
    }
    set postFormatted(value) {
        this._postFormatted = value;
    }
    get postFormatted() {
        return this._postFormatted;
    }
    getIntrinsicTicks() {
        return this.intrinsicTicks;
    }
    setIntrinsicTicks(intrinsicTicks) {
        this.intrinsicTicks = intrinsicTicks;
        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
    }
    getTickMultiplier() {
        return this.tickMultiplier;
    }
    applyTickMultiplier(numerator, denominator) {
        this.tickMultiplier.multiply(numerator, denominator);
        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
    }
    setDuration(duration) {
        const ticks = duration.numerator * (_tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.RESOLUTION / duration.denominator);
        this.ticks = this.tickMultiplier.clone().multiply(ticks);
        this.intrinsicTicks = this.ticks.value();
    }
    getAbsoluteX() {
        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);
        return tickContext.getX();
    }
    setModifierContext(mc) {
        this.modifierContext = mc;
        return this;
    }
    getModifierContext() {
        return this.modifierContext;
    }
    checkModifierContext() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tickcontext.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TickContext: () => (/* binding */ TickContext)
/* harmony export */ });
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


class TickContext {
    constructor(options) {
        this.preFormatted = false;
        this.postFormatted = false;
        this.tickID = options && options.tickID ? options.tickID : 0;
        this.currentTick = new _fraction_js__WEBPACK_IMPORTED_MODULE_0__.Fraction(0, 1);
        this.maxTicks = new _fraction_js__WEBPACK_IMPORTED_MODULE_0__.Fraction(0, 1);
        this.maxTickable = undefined;
        this.minTicks = undefined;
        this.minTickable = undefined;
        this.padding = 1;
        this.x = 0;
        this.xBase = 0;
        this.xOffset = 0;
        this.tickables = [];
        this.tickablesByVoice = {};
        this.notePx = 0;
        this.glyphPx = 0;
        this.leftDisplacedHeadPx = 0;
        this.rightDisplacedHeadPx = 0;
        this.modLeftPx = 0;
        this.modRightPx = 0;
        this.totalLeftPx = 0;
        this.totalRightPx = 0;
        this.tContexts = [];
        this.width = 0;
        this.formatterMetrics = {
            freedom: { left: 0, right: 0 },
        };
    }
    static getNextContext(tContext) {
        const contexts = tContext.tContexts;
        const index = contexts.indexOf(tContext);
        if (index + 1 < contexts.length)
            return contexts[index + 1];
    }
    getTickID() {
        return this.tickID;
    }
    getX() {
        return this.x;
    }
    setX(x) {
        this.x = x;
        this.xBase = x;
        this.xOffset = 0;
        return this;
    }
    getXBase() {
        return this.xBase;
    }
    setXBase(xBase) {
        this.xBase = xBase;
        this.x = xBase + this.xOffset;
    }
    getXOffset() {
        return this.xOffset;
    }
    setXOffset(xOffset) {
        this.xOffset = xOffset;
        this.x = this.xBase + xOffset;
    }
    getWidth() {
        return this.width + this.padding * 2;
    }
    setPadding(padding) {
        this.padding = padding;
        return this;
    }
    getMaxTicks() {
        return this.maxTicks;
    }
    getMinTicks() {
        return this.minTicks;
    }
    getMaxTickable() {
        return this.maxTickable;
    }
    getMinTickable() {
        return this.minTickable;
    }
    getTickables() {
        return this.tickables;
    }
    getTickableForVoice(voiceIndex) {
        return this.tickablesByVoice[voiceIndex];
    }
    getTickablesByVoice() {
        return this.tickablesByVoice;
    }
    getCenterAlignedTickables() {
        return this.tickables.filter((tickable) => tickable.isCenterAligned());
    }
    getMetrics() {
        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;
        return {
            width,
            glyphPx,
            notePx,
            leftDisplacedHeadPx,
            rightDisplacedHeadPx,
            modLeftPx,
            modRightPx,
            totalLeftPx,
            totalRightPx,
        };
    }
    getCurrentTick() {
        return this.currentTick;
    }
    setCurrentTick(tick) {
        this.currentTick = tick;
        this.preFormatted = false;
    }
    addTickable(tickable, voiceIndex) {
        if (!tickable) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArgument', 'Invalid tickable added.');
        }
        if (!tickable.shouldIgnoreTicks()) {
            const ticks = tickable.getTicks();
            if (ticks.greaterThan(this.maxTicks)) {
                this.maxTicks = ticks.clone();
                this.maxTickable = tickable;
            }
            if (this.minTicks == null) {
                this.minTicks = ticks.clone();
                this.minTickable = tickable;
            }
            else if (ticks.lessThan(this.minTicks)) {
                this.minTicks = ticks.clone();
                this.minTickable = tickable;
            }
        }
        tickable.setTickContext(this);
        this.tickables.push(tickable);
        this.tickablesByVoice[voiceIndex || 0] = tickable;
        this.preFormatted = false;
        return this;
    }
    preFormat() {
        if (this.preFormatted)
            return this;
        for (let i = 0; i < this.tickables.length; ++i) {
            const tickable = this.tickables[i];
            tickable.preFormat();
            const metrics = tickable.getMetrics();
            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);
            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);
            this.notePx = Math.max(this.notePx, metrics.notePx);
            this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);
            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);
            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);
            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);
            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);
            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;
        }
        return this;
    }
    postFormat() {
        if (this.postFormatted)
            return this;
        this.postFormatted = true;
        return this;
    }
    getFormatterMetrics() {
        return this.formatterMetrics;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/timesigglyph.js":
/*!********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/timesigglyph.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimeSignatureGlyph: () => (/* binding */ TimeSignatureGlyph)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


class TimeSignatureGlyph extends _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph {
    constructor(timeSignature, topDigits, botDigits, code, point, options) {
        var _a;
        super(code, point, options);
        this.timeSignature = timeSignature;
        this.topGlyphs = [];
        this.botGlyphs = [];
        let topWidth = 0;
        for (let i = 0; i < topDigits.length; ++i) {
            let timeSigType = topDigits[i];
            switch (topDigits[i]) {
                case '-':
                    timeSigType = 'Minus';
                    break;
                case '+':
                    timeSigType = botDigits.length > 0 ? 'PlusSmall' : 'Plus';
                    break;
                case '(':
                    timeSigType = botDigits.length > 0 ? 'ParensLeftSmall' : 'ParensLeft';
                    break;
                case ')':
                    timeSigType = botDigits.length > 0 ? 'ParensRightSmall' : 'ParensRight';
                    break;
            }
            const topGlyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph('timeSig' + timeSigType, this.timeSignature.point);
            this.topGlyphs.push(topGlyph);
            topWidth += (_a = topGlyph.getMetrics().width) !== null && _a !== void 0 ? _a : 0;
        }
        let botWidth = 0;
        for (let i = 0; i < botDigits.length; ++i) {
            let timeSigType = botDigits[i];
            switch (botDigits[i]) {
                case '+':
                    timeSigType = 'PlusSmall';
                    break;
                case '(':
                    timeSigType = 'ParensLeftSmall';
                    break;
                case ')':
                    timeSigType = 'ParensRightSmall';
                    break;
            }
            const botGlyph = new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph('timeSig' + timeSigType, this.timeSignature.point);
            this.botGlyphs.push(botGlyph);
            botWidth += (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(botGlyph.getMetrics().width);
        }
        this.width = Math.max(topWidth, botWidth);
        this.xMin = this.getMetrics().x_min;
        this.topStartX = (this.width - topWidth) / 2.0;
        this.botStartX = (this.width - botWidth) / 2.0;
        this.reset();
    }
    getMetrics() {
        return {
            x_min: this.xMin,
            x_max: this.xMin + this.width,
            width: this.width,
        };
    }
    renderToStave(x) {
        const stave = this.checkStave();
        const ctx = this.checkContext();
        let start_x = x + this.topStartX;
        let y = 0;
        if (this.botGlyphs.length > 0)
            y = stave.getYForLine(this.timeSignature.topLine);
        else
            y = (stave.getYForLine(this.timeSignature.topLine) + stave.getYForLine(this.timeSignature.bottomLine)) / 2;
        for (let i = 0; i < this.topGlyphs.length; ++i) {
            const glyph = this.topGlyphs[i];
            _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + this.x_shift, y);
            start_x += (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(glyph.getMetrics().width);
        }
        start_x = x + this.botStartX;
        y = stave.getYForLine(this.timeSignature.bottomLine);
        for (let i = 0; i < this.botGlyphs.length; ++i) {
            const glyph = this.botGlyphs[i];
            this.timeSignature.placeGlyphOnLine(glyph, stave, 0);
            _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + glyph.getMetrics().x_shift, y);
            start_x += (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.defined)(glyph.getMetrics().width);
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/timesignature.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/timesignature.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimeSignature: () => (/* binding */ TimeSignature)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/stavemodifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _timesigglyph_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./timesigglyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesigglyph.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");





const assertIsValidTimeSig = (timeSpec) => {
    const numbers = timeSpec.split('/');
    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {
        throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form "<numerator>/<denominator>"`);
    }
    numbers.forEach((number) => {
        if (/^[0-9+\-()]+$/.test(number) == false) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_4__.RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);
        }
    });
};
class TimeSignature extends _stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
    constructor(timeSpec = '4/4', customPadding = 15, validate_args = true) {
        super();
        this.validate_args = validate_args;
        const padding = customPadding;
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.currentMusicFont();
        this.point = musicFont.lookupMetric('digits.point');
        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);
        this.topLine = 2 + fontLineShift;
        this.bottomLine = 4 + fontLineShift;
        this.setPosition(_stavemodifier_js__WEBPACK_IMPORTED_MODULE_1__.StaveModifierPosition.BEGIN);
        this.info = this.parseTimeSpec(timeSpec);
        this.setWidth((0,_util_js__WEBPACK_IMPORTED_MODULE_4__.defined)(this.info.glyph.getMetrics().width));
        this.setPadding(padding);
    }
    static get CATEGORY() {
        return "TimeSignature";
    }
    static get glyphs() {
        return {
            C: {
                code: 'timeSigCommon',
                point: 40,
                line: 2,
            },
            'C|': {
                code: 'timeSigCutCommon',
                point: 40,
                line: 2,
            },
        };
    }
    parseTimeSpec(timeSpec) {
        var _a, _b;
        if (timeSpec === 'C' || timeSpec === 'C|') {
            const { line, code, point } = TimeSignature.glyphs[timeSpec];
            return {
                line,
                num: false,
                glyph: new _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph(code, point),
            };
        }
        if (this.validate_args) {
            assertIsValidTimeSig(timeSpec);
        }
        const parts = timeSpec.split('/');
        return {
            num: true,
            glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : ''),
        };
    }
    makeTimeSignatureGlyph(topDigits, botDigits) {
        return new _timesigglyph_js__WEBPACK_IMPORTED_MODULE_3__.TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);
    }
    getInfo() {
        return this.info;
    }
    setTimeSig(timeSpec) {
        this.info = this.parseTimeSpec(timeSpec);
        return this;
    }
    draw() {
        const stave = this.checkStave();
        const ctx = stave.checkContext();
        this.setRendered();
        ctx.openGroup('timesignature', this.getAttribute('id'));
        this.info.glyph.setStave(stave);
        this.info.glyph.setContext(ctx);
        this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);
        this.info.glyph.renderToStave(this.x);
        ctx.closeGroup();
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/timesignote.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/timesignote.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimeSigNote: () => (/* binding */ TimeSigNote)
/* harmony export */ });
/* harmony import */ var _note_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note.js */ "./node_modules/vexflow_smoosic/build/esm/src/note.js");
/* harmony import */ var _timesignature_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timesignature.js */ "./node_modules/vexflow_smoosic/build/esm/src/timesignature.js");


class TimeSigNote extends _note_js__WEBPACK_IMPORTED_MODULE_0__.Note {
    constructor(timeSpec, customPadding) {
        super({ duration: 'b' });
        const timeSignature = new _timesignature_js__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(timeSpec, customPadding);
        this.timeSigInfo = timeSignature.getInfo();
        this.setWidth(this.timeSigInfo.glyph.getMetrics().width);
        this.ignore_ticks = true;
    }
    static get CATEGORY() {
        return "TimeSigNote";
    }
    addToModifierContext(mc) {
        return this;
    }
    preFormat() {
        this.preFormatted = true;
        return this;
    }
    draw() {
        const stave = this.checkStave();
        const ctx = this.checkContext();
        this.setRendered();
        if (!this.timeSigInfo.glyph.getContext()) {
            this.timeSigInfo.glyph.setContext(ctx);
        }
        this.timeSigInfo.glyph.setStave(stave);
        this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());
        this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tremolo.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tremolo.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tremolo: () => (/* binding */ Tremolo)
/* harmony export */ });
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _gracenote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gracenote.js */ "./node_modules/vexflow_smoosic/build/esm/src/gracenote.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _typeguard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguard.js */ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js");






class Tremolo extends _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier {
    constructor(num) {
        super();
        this.num = num;
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.CENTER;
        this.code = 'tremolo1';
        this.y_spacing_scale = 1;
        this.extra_stroke_scale = 1;
    }
    static get CATEGORY() {
        return "Tremolo";
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const stemDirection = note.getStemDirection();
        const start = note.getModifierStartXY(this.position, this.index);
        let x = start.x;
        const gn = (0,_typeguard_js__WEBPACK_IMPORTED_MODULE_5__.isGraceNote)(note);
        const scale = gn ? _gracenote_js__WEBPACK_IMPORTED_MODULE_1__.GraceNote.SCALE : 1;
        const category = `tremolo.${gn ? 'grace' : 'default'}`;
        const musicFont = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont();
        let y_spacing = musicFont.lookupMetric(`${category}.spacing`) * stemDirection;
        y_spacing *= this.y_spacing_scale;
        const height = this.num * y_spacing;
        let y = note.getStemExtents().baseY - height;
        if (stemDirection < 0) {
            y += musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;
        }
        else {
            y += musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;
        }
        const fontScale = musicFont.lookupMetric(`${category}.point`);
        x += musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? 'Up' : 'Down'}`);
        for (let i = 0; i < this.num; ++i) {
            _glyph_js__WEBPACK_IMPORTED_MODULE_0__.Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category, scale: this.extra_stroke_scale });
            y += y_spacing;
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tuning.js":
/*!**************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tuning.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tuning: () => (/* binding */ Tuning)
/* harmony export */ });
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


class Tuning {
    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {
        this.tuningValues = [];
        this.setTuning(tuningString);
    }
    static get names() {
        return {
            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',
            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',
            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',
            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',
            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',
        };
    }
    noteToInteger(noteString) {
        return _tables_js__WEBPACK_IMPORTED_MODULE_0__.Tables.keyProperties(noteString).int_value;
    }
    setTuning(tuningString) {
        if (Tuning.names[tuningString]) {
            tuningString = Tuning.names[tuningString];
        }
        this.tuningValues = [];
        const keys = tuningString.split(/\s*,\s*/);
        if (keys.length === 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);
        }
        for (let i = 0; i < keys.length; ++i) {
            this.tuningValues[i] = this.noteToInteger(keys[i]);
        }
    }
    getValueForString(stringNum) {
        const s = Number(stringNum);
        if (s < 1 || s > this.tuningValues.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);
        }
        return this.tuningValues[s - 1];
    }
    getValueForFret(fretNum, stringNum) {
        const stringValue = this.getValueForString(stringNum);
        const f = Number(fretNum);
        if (f < 0) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);
        }
        return stringValue + f;
    }
    getNoteForFret(fretNum, stringNum) {
        const noteValue = this.getValueForFret(fretNum, stringNum);
        const octave = Math.floor(noteValue / 12);
        const value = noteValue % 12;
        return `${_tables_js__WEBPACK_IMPORTED_MODULE_0__.Tables.integerToNote(value)}/${octave}`;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/tuplet.js":
/*!**************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/tuplet.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tuplet: () => (/* binding */ Tuplet)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _formatter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatter.js */ "./node_modules/vexflow_smoosic/build/esm/src/formatter.js");
/* harmony import */ var _glyph_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph.js */ "./node_modules/vexflow_smoosic/build/esm/src/glyph.js");
/* harmony import */ var _stem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem.js */ "./node_modules/vexflow_smoosic/build/esm/src/stem.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");






class Tuplet extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(notes, options = {}) {
        super();
        this.numerator_glyphs = [];
        this.denom_glyphs = [];
        if (!notes || !notes.length) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('BadArguments', 'No notes provided for tuplet.');
        }
        this.options = options;
        this.notes = notes;
        this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;
        if (this.options.beats_occupied) {
            this.beatsOccupiedDeprecationWarning();
        }
        this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;
        if (this.options.bracketed != undefined) {
            this.bracketed = this.options.bracketed;
        }
        else {
            this.bracketed = notes.some((note) => !note.hasBeam());
        }
        this.ratioed =
            this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;
        this.point = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont().lookupMetric('digits.tupletPoint');
        this.y_pos = 16;
        this.x_pos = 100;
        this.width = 200;
        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);
        _formatter_js__WEBPACK_IMPORTED_MODULE_1__.Formatter.AlignRestsToNotes(notes, true, true);
        this.resolveGlyphs();
        this.attach();
    }
    static get CATEGORY() {
        return "Tuplet";
    }
    static get LOCATION_TOP() {
        return 1;
    }
    static get LOCATION_BOTTOM() {
        return -1;
    }
    static get NESTING_OFFSET() {
        return 15;
    }
    static get metrics() {
        return _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont().getMetrics().glyphs.tuplet;
    }
    attach() {
        for (let i = 0; i < this.notes.length; i++) {
            const note = this.notes[i];
            note.setTuplet(this);
        }
    }
    detach() {
        for (let i = 0; i < this.notes.length; i++) {
            const note = this.notes[i];
            note.resetTuplet(this);
        }
    }
    setBracketed(bracketed) {
        this.bracketed = !!bracketed;
        return this;
    }
    setRatioed(ratioed) {
        this.ratioed = !!ratioed;
        return this;
    }
    setTupletLocation(location) {
        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {
            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);
            location = Tuplet.LOCATION_TOP;
        }
        this.location = location;
        return this;
    }
    getNotes() {
        return this.notes;
    }
    getNoteCount() {
        return this.num_notes;
    }
    beatsOccupiedDeprecationWarning() {
        console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');
    }
    getBeatsOccupied() {
        this.beatsOccupiedDeprecationWarning();
        return this.getNotesOccupied();
    }
    setBeatsOccupied(beats) {
        this.beatsOccupiedDeprecationWarning();
        return this.setNotesOccupied(beats);
    }
    getNotesOccupied() {
        return this.notes_occupied;
    }
    setNotesOccupied(notes) {
        this.detach();
        this.notes_occupied = notes;
        this.resolveGlyphs();
        this.attach();
    }
    resolveGlyphs() {
        this.numerator_glyphs = [];
        let n = this.num_notes;
        while (n >= 1) {
            this.numerator_glyphs.unshift(new _glyph_js__WEBPACK_IMPORTED_MODULE_2__.Glyph('timeSig' + (n % 10), this.point));
            n = parseInt((n / 10).toString(), 10);
        }
        this.denom_glyphs = [];
        n = this.notes_occupied;
        while (n >= 1) {
            this.denom_glyphs.unshift(new _glyph_js__WEBPACK_IMPORTED_MODULE_2__.Glyph('timeSig' + (n % 10), this.point));
            n = parseInt((n / 10).toString(), 10);
        }
    }
    getNestedTupletCount() {
        const location = this.location;
        const first_note = this.notes[0];
        let maxTupletCount = countTuplets(first_note, location);
        let minTupletCount = countTuplets(first_note, location);
        function countTuplets(note, location) {
            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;
        }
        this.notes.forEach((note) => {
            const tupletCount = countTuplets(note, location);
            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;
            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;
        });
        return maxTupletCount - minTupletCount;
    }
    getYPosition() {
        const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;
        const y_offset = this.options.y_offset || 0;
        const first_note = this.notes[0];
        let y_pos;
        if (this.location === Tuplet.LOCATION_TOP) {
            y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;
            for (let i = 0; i < this.notes.length; ++i) {
                const note = this.notes[i];
                let modLines = 0;
                const mc = note.getModifierContext();
                if (mc) {
                    modLines = Math.max(modLines, mc.getState().top_text_line);
                }
                const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;
                if (note.hasStem() || note.isRest()) {
                    const top_y = note.getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP
                        ? note.getStemExtents().topY - Tuplet.metrics.stemOffset
                        : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;
                    y_pos = Math.min(top_y, y_pos);
                    if (modLines > 0) {
                        y_pos = Math.min(modY, y_pos);
                    }
                }
            }
        }
        else {
            let lineCheck = Tuplet.metrics.bottomLine;
            this.notes.forEach((nn) => {
                const mc = nn.getModifierContext();
                if (mc) {
                    lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);
                }
            });
            y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;
            for (let i = 0; i < this.notes.length; ++i) {
                if (this.notes[i].hasStem() || this.notes[i].isRest()) {
                    const bottom_y = this.notes[i].getStemDirection() === _stem_js__WEBPACK_IMPORTED_MODULE_3__.Stem.UP
                        ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset
                        : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;
                    if (bottom_y > y_pos) {
                        y_pos = bottom_y;
                    }
                }
            }
        }
        return y_pos + nested_tuplet_y_offset + y_offset;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        const first_note = this.notes[0];
        const last_note = this.notes[this.notes.length - 1];
        if (!this.bracketed) {
            this.x_pos = first_note.getStemX();
            this.width = last_note.getStemX() - this.x_pos;
        }
        else {
            this.x_pos = first_note.getTieLeftX() - 5;
            this.width = last_note.getTieRightX() - this.x_pos + 5;
        }
        this.y_pos = this.getYPosition();
        const addGlyphWidth = (width, glyph) => width + (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(glyph.getMetrics().width);
        let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);
        if (this.ratioed) {
            width = this.denom_glyphs.reduce(addGlyphWidth, width);
            width += this.point * 0.32;
        }
        const notation_center_x = this.x_pos + this.width / 2;
        const notation_start_x = notation_center_x - width / 2;
        if (this.bracketed) {
            const line_width = this.width / 2 - width / 2 - 5;
            if (line_width > 0) {
                ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);
                ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);
                ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);
                ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);
            }
        }
        const shiftY = _tables_js__WEBPACK_IMPORTED_MODULE_4__.Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);
        let x_offset = 0;
        this.numerator_glyphs.forEach((glyph) => {
            glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);
            x_offset += (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(glyph.getMetrics().width);
        });
        if (this.ratioed) {
            const colon_x = notation_start_x + x_offset + this.point * 0.16;
            const colon_radius = this.point * 0.06;
            ctx.beginPath();
            ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
            ctx.beginPath();
            ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
            x_offset += this.point * 0.32;
            this.denom_glyphs.forEach((glyph) => {
                glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);
                x_offset += (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.defined)(glyph.getMetrics().width);
            });
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/typeguard.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/typeguard.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAccidental: () => (/* binding */ isAccidental),
/* harmony export */   isAnnotation: () => (/* binding */ isAnnotation),
/* harmony export */   isBarline: () => (/* binding */ isBarline),
/* harmony export */   isCategory: () => (/* binding */ isCategory),
/* harmony export */   isDot: () => (/* binding */ isDot),
/* harmony export */   isGraceNote: () => (/* binding */ isGraceNote),
/* harmony export */   isGraceNoteGroup: () => (/* binding */ isGraceNoteGroup),
/* harmony export */   isNote: () => (/* binding */ isNote),
/* harmony export */   isRenderContext: () => (/* binding */ isRenderContext),
/* harmony export */   isStaveNote: () => (/* binding */ isStaveNote),
/* harmony export */   isStemmableNote: () => (/* binding */ isStemmableNote),
/* harmony export */   isTabNote: () => (/* binding */ isTabNote)
/* harmony export */ });
function isCategory(obj, category, checkAncestors = true) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    let constructorFcn = obj.constructor;
    if (checkAncestors) {
        while (obj !== null) {
            constructorFcn = obj.constructor;
            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {
                return true;
            }
            obj = Object.getPrototypeOf(obj);
        }
        return false;
    }
    else {
        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;
    }
}
const isAccidental = (obj) => isCategory(obj, "Accidental");
const isAnnotation = (obj) => isCategory(obj, "Annotation");
const isBarline = (obj) => isCategory(obj, "Barline");
const isDot = (obj) => isCategory(obj, "Dot");
const isGraceNote = (obj) => isCategory(obj, "GraceNote");
const isGraceNoteGroup = (obj) => isCategory(obj, "GraceNoteGroup");
const isNote = (obj) => isCategory(obj, "Note");
const isRenderContext = (obj) => isCategory(obj, "RenderContext");
const isStaveNote = (obj) => isCategory(obj, "StaveNote");
const isStemmableNote = (obj) => isCategory(obj, "StemmableNote");
const isTabNote = (obj) => isCategory(obj, "TabNote");


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/util.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/util.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RuntimeError: () => (/* binding */ RuntimeError),
/* harmony export */   defined: () => (/* binding */ defined),
/* harmony export */   globalObject: () => (/* binding */ globalObject),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   midLine: () => (/* binding */ midLine),
/* harmony export */   normalizeAngle: () => (/* binding */ normalizeAngle),
/* harmony export */   prefix: () => (/* binding */ prefix),
/* harmony export */   warn: () => (/* binding */ warn)
/* harmony export */ });
class RuntimeError extends Error {
    constructor(code, message = '') {
        super('[RuntimeError] ' + code + ': ' + message);
        this.code = code;
    }
}
function globalObject() {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    return Function('return this')();
}
function defined(x, code = 'undefined', message = '') {
    if (x === undefined) {
        throw new RuntimeError(code, message);
    }
    return x;
}
function log(block, ...args) {
    if (!args)
        return;
    const line = Array.prototype.slice.call(args).join(' ');
    globalObject().console.log(block + ': ' + line);
}
function warn(...args) {
    const line = args.join(' ');
    const err = new Error();
    globalObject().console.log('Warning: ', line, err.stack);
}
function roundN(x, n) {
    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;
}
function midLine(a, b) {
    let mid_line = b + (a - b) / 2;
    if (mid_line % 2 > 0) {
        mid_line = roundN(mid_line * 10, 5) / 10;
    }
    return mid_line;
}
function prefix(text) {
    return `vf-${text}`;
}
function normalizeAngle(a) {
    a = a % (2 * Math.PI);
    if (a < 0) {
        a += 2 * Math.PI;
    }
    return a;
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/version.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DATE: () => (/* binding */ DATE),
/* harmony export */   ID: () => (/* binding */ ID),
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = '4.0.3';
const ID = 'a6c2b37466e6b92a177b81153b7e66ab032a783f';
const DATE = '2022-10-21T21:22:38.305Z';

/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/vex.js":
/*!***********************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/vex.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vex: () => (/* binding */ Vex)
/* harmony export */ });
/* harmony import */ var _flow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flow.js */ "./node_modules/vexflow_smoosic/build/esm/src/flow.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");


class Vex {
    static sortAndUnique(arr, cmp, eq) {
        if (arr.length > 1) {
            const newArr = [];
            let last;
            arr.sort(cmp);
            for (let i = 0; i < arr.length; ++i) {
                if (i === 0 || !eq(arr[i], last)) {
                    newArr.push(arr[i]);
                }
                last = arr[i];
            }
            return newArr;
        }
        else {
            return arr;
        }
    }
    static contains(arr, obj) {
        let i = arr.length;
        while (i--) {
            if (arr[i] === obj) {
                return true;
            }
        }
        return false;
    }
    static getCanvasContext(canvasSelector) {
        if (!canvasSelector) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasSelector);
        }
        const canvas = document.getElementById(canvasSelector);
        if (!(canvas && canvas.getContext)) {
            throw new _util_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');
        }
        return canvas.getContext('2d');
    }
    static benchmark(s, f) {
        const start_time = new Date().getTime();
        f();
        const elapsed = new Date().getTime() - start_time;
        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.log)(s, elapsed + 'ms');
    }
    static stackTrace() {
        const err = new Error();
        return err.stack;
    }
}
Vex.Flow = _flow_js__WEBPACK_IMPORTED_MODULE_0__.Flow;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/vibrato.js":
/*!***************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/vibrato.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vibrato: () => (/* binding */ Vibrato)
/* harmony export */ });
/* harmony import */ var _bend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bend.js */ "./node_modules/vexflow_smoosic/build/esm/src/bend.js");
/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier.js */ "./node_modules/vexflow_smoosic/build/esm/src/modifier.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");



class Vibrato extends _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier {
    constructor() {
        super();
        this.position = _modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT;
        this.render_options = {
            harsh: false,
            vibrato_width: 20,
            wave_height: 6,
            wave_width: 4,
            wave_girth: 2,
        };
        this.setVibratoWidth(this.render_options.vibrato_width);
    }
    static get CATEGORY() {
        return "Vibrato";
    }
    static format(vibratos, state, context) {
        if (!vibratos || vibratos.length === 0)
            return false;
        let text_line = state.top_text_line;
        let width = 0;
        let shift = state.right_shift - 7;
        const bends = context.getMembers(_bend_js__WEBPACK_IMPORTED_MODULE_0__.Bend.CATEGORY);
        if (bends && bends.length > 0) {
            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.STAVE_LINE_DISTANCE;
            text_line = text_line - (bendHeight + 1);
        }
        else {
            state.top_text_line += 1;
        }
        for (let i = 0; i < vibratos.length; ++i) {
            const vibrato = vibratos[i];
            vibrato.setXShift(shift);
            vibrato.setTextLine(text_line);
            width += vibrato.getWidth();
            shift += width;
        }
        state.right_shift += width;
        return true;
    }
    setHarsh(harsh) {
        this.render_options.harsh = harsh;
        return this;
    }
    setVibratoWidth(width) {
        this.render_options.vibrato_width = width;
        this.setWidth(width);
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        const note = this.checkAttachedNote();
        this.setRendered();
        const start = note.getModifierStartXY(_modifier_js__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT, this.index);
        const vx = start.x + this.x_shift;
        const vy = note.getYForTopText(this.text_line) + 2;
        Vibrato.renderVibrato(ctx, vx, vy, this.render_options);
    }
    static renderVibrato(ctx, x, y, opts) {
        const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;
        const num_waves = vibrato_width / wave_width;
        ctx.beginPath();
        let i;
        if (harsh) {
            ctx.moveTo(x, y + wave_girth + 1);
            for (i = 0; i < num_waves / 2; ++i) {
                ctx.lineTo(x + wave_width, y - wave_height / 2);
                x += wave_width;
                ctx.lineTo(x + wave_width, y + wave_height / 2);
                x += wave_width;
            }
            for (i = 0; i < num_waves / 2; ++i) {
                ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);
                x -= wave_width;
                ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);
                x -= wave_width;
            }
            ctx.fill();
        }
        else {
            ctx.moveTo(x, y + wave_girth);
            for (i = 0; i < num_waves / 2; ++i) {
                ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);
                x += wave_width;
                ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);
                x += wave_width;
            }
            for (i = 0; i < num_waves / 2; ++i) {
                ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);
                x -= wave_width;
                ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);
                x -= wave_width;
            }
            ctx.fill();
        }
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/vibratobracket.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/vibratobracket.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VibratoBracket: () => (/* binding */ VibratoBracket)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");
/* harmony import */ var _vibrato_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vibrato.js */ "./node_modules/vexflow_smoosic/build/esm/src/vibrato.js");



function L(...args) {
    if (VibratoBracket.DEBUG)
        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.log)('Vex.Flow.VibratoBracket', args);
}
class VibratoBracket extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(bracket_data) {
        super();
        if (bracket_data.start)
            this.start = bracket_data.start;
        if (bracket_data.stop)
            this.stop = bracket_data.stop;
        this.line = 1;
        this.render_options = {
            harsh: false,
            wave_height: 6,
            wave_width: 4,
            wave_girth: 2,
            vibrato_width: 0,
        };
    }
    static get CATEGORY() {
        return "VibratoBracket";
    }
    setLine(line) {
        this.line = line;
        return this;
    }
    setHarsh(harsh) {
        this.render_options.harsh = harsh;
        return this;
    }
    draw() {
        const ctx = this.checkContext();
        this.setRendered();
        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||
            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||
            0;
        const start_x = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;
        const stop_x = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||
            (this.start && this.start.checkStave().getTieEndX() - 10) ||
            0;
        this.render_options.vibrato_width = stop_x - start_x;
        L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);
        _vibrato_js__WEBPACK_IMPORTED_MODULE_2__.Vibrato.renderVibrato(ctx, start_x, y, this.render_options);
    }
}
VibratoBracket.DEBUG = false;


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/voice.js":
/*!*************************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/voice.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Voice: () => (/* binding */ Voice),
/* harmony export */   VoiceMode: () => (/* binding */ VoiceMode)
/* harmony export */ });
/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element.js */ "./node_modules/vexflow_smoosic/build/esm/src/element.js");
/* harmony import */ var _fraction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fraction.js */ "./node_modules/vexflow_smoosic/build/esm/src/fraction.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables.js */ "./node_modules/vexflow_smoosic/build/esm/src/tables.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");




var VoiceMode;
(function (VoiceMode) {
    VoiceMode[VoiceMode["STRICT"] = 1] = "STRICT";
    VoiceMode[VoiceMode["SOFT"] = 2] = "SOFT";
    VoiceMode[VoiceMode["FULL"] = 3] = "FULL";
})(VoiceMode || (VoiceMode = {}));
class Voice extends _element_js__WEBPACK_IMPORTED_MODULE_0__.Element {
    constructor(time, options) {
        super();
        this.resolutionMultiplier = 1;
        this.mode = VoiceMode.STRICT;
        this.preFormatted = false;
        this.ticksUsed = new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(0, 1);
        this.largestTickWidth = 0;
        this.tickables = [];
        this.options = Object.assign({ softmaxFactor: 2 }, options);
        let voiceTime;
        if (typeof time === 'string') {
            const match = time.match(/(\d+)\/(\d+)/);
            if (match) {
                voiceTime = {
                    num_beats: parseInt(match[1]),
                    beat_value: parseInt(match[2]),
                };
            }
        }
        else {
            voiceTime = time;
        }
        this.time = Object.assign({ num_beats: 4, beat_value: 4, resolution: _tables_js__WEBPACK_IMPORTED_MODULE_2__.Tables.RESOLUTION }, voiceTime);
        this.totalTicks = new _fraction_js__WEBPACK_IMPORTED_MODULE_1__.Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);
        this.smallestTickCount = this.totalTicks.clone();
    }
    static get CATEGORY() {
        return "Voice";
    }
    static get Mode() {
        return VoiceMode;
    }
    getTotalTicks() {
        return this.totalTicks;
    }
    getTicksUsed() {
        return this.ticksUsed;
    }
    getLargestTickWidth() {
        return this.largestTickWidth;
    }
    getSmallestTickCount() {
        return this.smallestTickCount;
    }
    getTickables() {
        return this.tickables;
    }
    getMode() {
        return this.mode;
    }
    setMode(mode) {
        this.mode = mode;
        return this;
    }
    getResolutionMultiplier() {
        return this.resolutionMultiplier;
    }
    getActualResolution() {
        return this.resolutionMultiplier * this.time.resolution;
    }
    setStave(stave) {
        this.stave = stave;
        this.boundingBox = undefined;
        return this;
    }
    getStave() {
        return this.stave;
    }
    getBoundingBox() {
        if (!this.boundingBox) {
            const stave = this.checkStave();
            let boundingBox = undefined;
            for (let i = 0; i < this.tickables.length; ++i) {
                const tickable = this.tickables[i];
                if (!tickable.getStave())
                    tickable.setStave(stave);
                const bb = tickable.getBoundingBox();
                if (bb) {
                    boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;
                }
            }
            this.boundingBox = boundingBox;
        }
        return this.boundingBox;
    }
    setStrict(strict) {
        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;
        return this;
    }
    isComplete() {
        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {
            return this.ticksUsed.equals(this.totalTicks);
        }
        else {
            return true;
        }
    }
    setSoftmaxFactor(factor) {
        this.options.softmaxFactor = factor;
        return this;
    }
    reCalculateExpTicksUsed() {
        const totalTicks = this.ticksUsed.value();
        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);
        this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);
        return this.expTicksUsed;
    }
    softmax(tickValue) {
        if (!this.expTicksUsed) {
            this.expTicksUsed = this.reCalculateExpTicksUsed();
        }
        const totalTicks = this.ticksUsed.value();
        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);
        const sm = exp(tickValue) / this.expTicksUsed;
        return sm;
    }
    addTickable(tickable) {
        if (!tickable.shouldIgnoreTicks()) {
            const ticks = tickable.getTicks();
            this.ticksUsed.add(ticks);
            this.expTicksUsed = 0;
            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&
                this.ticksUsed.greaterThan(this.totalTicks)) {
                this.ticksUsed.subtract(ticks);
                throw new _util_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('BadArgument', 'Too many ticks.');
            }
            if (ticks.lessThan(this.smallestTickCount)) {
                this.smallestTickCount = ticks.clone();
            }
            this.resolutionMultiplier = this.ticksUsed.denominator;
            this.totalTicks.add(0, this.ticksUsed.denominator);
        }
        this.tickables.push(tickable);
        tickable.setVoice(this);
        return this;
    }
    addTickables(tickables) {
        for (let i = 0; i < tickables.length; ++i) {
            this.addTickable(tickables[i]);
        }
        return this;
    }
    preFormat() {
        if (this.preFormatted)
            return this;
        const stave = this.checkStave();
        this.tickables.forEach((tickable) => {
            if (!tickable.getStave()) {
                tickable.setStave(stave);
            }
        });
        this.preFormatted = true;
        return this;
    }
    checkStave() {
        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(this.stave, 'NoStave', 'No stave attached to instance.');
    }
    draw(context = this.checkContext(), stave) {
        stave = stave !== null && stave !== void 0 ? stave : this.stave;
        this.setRendered();
        let boundingBox = undefined;
        for (let i = 0; i < this.tickables.length; ++i) {
            const tickable = this.tickables[i];
            if (stave) {
                tickable.setStave(stave);
            }
            (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.defined)(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');
            const bb = tickable.getBoundingBox();
            if (bb) {
                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;
            }
            tickable.setContext(context);
            tickable.drawWithStyle();
        }
        this.boundingBox = boundingBox;
    }
}


/***/ }),

/***/ "./node_modules/vexflow_smoosic/build/esm/src/web.js":
/*!***********************************************************!*\
  !*** ./node_modules/vexflow_smoosic/build/esm/src/web.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isHTMLCanvas: () => (/* binding */ isHTMLCanvas),
/* harmony export */   isHTMLDiv: () => (/* binding */ isHTMLDiv)
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/vexflow_smoosic/build/esm/src/util.js");

function isHTMLCanvas(element) {
    if (!element)
        return false;
    const global = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.globalObject)();
    return ((typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||
        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));
}
function isHTMLDiv(element) {
    if (!element)
        return false;
    const global = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.globalObject)();
    return ((typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||
        (typeof element.appendChild === 'function' && typeof element.style === 'object'));
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!************************************!*\
  !*** ./src/application/exports.ts ***!
  \************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Smo: () => (/* binding */ Smo),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_textformatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/textformatter */ "./src/common/textformatter.ts");
/* harmony import */ var _common_vex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/vex */ "./src/common/vex.ts");
/* harmony import */ var _application__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./application */ "./src/application/application.ts");
/* harmony import */ var _eventHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventHandler */ "./src/application/eventHandler.ts");
/* harmony import */ var _ui_exceptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ui/exceptions */ "./src/ui/exceptions.ts");
/* harmony import */ var _ui_qwerty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ui/qwerty */ "./src/ui/qwerty.ts");
/* harmony import */ var _render_sui_piano__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../render/sui/piano */ "./src/render/sui/piano.ts");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom */ "./src/application/dom.ts");
/* harmony import */ var _ui_help__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ui/help */ "./src/ui/help.ts");
/* harmony import */ var _ui_buttons_articulation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ui/buttons/articulation */ "./src/ui/buttons/articulation.ts");
/* harmony import */ var _ui_buttons_beam__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ui/buttons/beam */ "./src/ui/buttons/beam.ts");
/* harmony import */ var _ui_buttons_chord__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ui/buttons/chord */ "./src/ui/buttons/chord.ts");
/* harmony import */ var _ui_buttons_collapsable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ui/buttons/collapsable */ "./src/ui/buttons/collapsable.ts");
/* harmony import */ var _ui_buttons_display__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ui/buttons/display */ "./src/ui/buttons/display.ts");
/* harmony import */ var _ui_buttons_duration__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ui/buttons/duration */ "./src/ui/buttons/duration.ts");
/* harmony import */ var _ui_buttons_measure__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../ui/buttons/measure */ "./src/ui/buttons/measure.ts");
/* harmony import */ var _ui_buttons_microtone__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../ui/buttons/microtone */ "./src/ui/buttons/microtone.ts");
/* harmony import */ var _ui_buttons_navigation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ui/buttons/navigation */ "./src/ui/buttons/navigation.ts");
/* harmony import */ var _ui_buttons_note__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ui/buttons/note */ "./src/ui/buttons/note.ts");
/* harmony import */ var _ui_buttons_player__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ui/buttons/player */ "./src/ui/buttons/player.ts");
/* harmony import */ var _ui_buttons_stave__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../ui/buttons/stave */ "./src/ui/buttons/stave.ts");
/* harmony import */ var _ui_buttons_text__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../ui/buttons/text */ "./src/ui/buttons/text.ts");
/* harmony import */ var _ui_buttons_voice__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../ui/buttons/voice */ "./src/ui/buttons/voice.ts");
/* harmony import */ var _ui_i18n_translationEditor__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../ui/i18n/translationEditor */ "./src/ui/i18n/translationEditor.ts");
/* harmony import */ var _configuration__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./configuration */ "./src/application/configuration.ts");
/* harmony import */ var _ui_buttons_ribbon__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../ui/buttons/ribbon */ "./src/ui/buttons/ribbon.ts");
/* harmony import */ var _ui_ribbonLayout_default_tabletRibbon__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../ui/ribbonLayout/default/tabletRibbon */ "./src/ui/ribbonLayout/default/tabletRibbon.ts");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./common */ "./src/application/common.ts");
/* harmony import */ var _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../ui/i18n/language_en */ "./src/ui/i18n/language_en.js");
/* harmony import */ var _ui_dialogs_dialog__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../ui/dialogs/dialog */ "./src/ui/dialogs/dialog.ts");
/* harmony import */ var _ui_dialogs_factory__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../ui/dialogs/factory */ "./src/ui/dialogs/factory.ts");
/* harmony import */ var _ui_dialogs_measureFormat__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../ui/dialogs/measureFormat */ "./src/ui/dialogs/measureFormat.ts");
/* harmony import */ var _ui_dialogs_addMeasure__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../ui/dialogs/addMeasure */ "./src/ui/dialogs/addMeasure.ts");
/* harmony import */ var _ui_dialogs_instrument__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../ui/dialogs/instrument */ "./src/ui/dialogs/instrument.ts");
/* harmony import */ var _ui_dialogs_timeSignature__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../ui/dialogs/timeSignature */ "./src/ui/dialogs/timeSignature.ts");
/* harmony import */ var _ui_dialogs_tempo__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../ui/dialogs/tempo */ "./src/ui/dialogs/tempo.ts");
/* harmony import */ var _ui_dialogs_scoreId__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../ui/dialogs/scoreId */ "./src/ui/dialogs/scoreId.ts");
/* harmony import */ var _ui_dialogs_preferences__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../ui/dialogs/preferences */ "./src/ui/dialogs/preferences.ts");
/* harmony import */ var _ui_dialogs_pageLayout__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../ui/dialogs/pageLayout */ "./src/ui/dialogs/pageLayout.ts");
/* harmony import */ var _ui_dialogs_textBracket__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../ui/dialogs/textBracket */ "./src/ui/dialogs/textBracket.ts");
/* harmony import */ var _ui_dialogs_fonts__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../ui/dialogs/fonts */ "./src/ui/dialogs/fonts.ts");
/* harmony import */ var _ui_dialogs_globalLayout__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../ui/dialogs/globalLayout */ "./src/ui/dialogs/globalLayout.ts");
/* harmony import */ var _ui_dialogs_scoreView__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../ui/dialogs/scoreView */ "./src/ui/dialogs/scoreView.ts");
/* harmony import */ var _ui_dialogs_library__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../ui/dialogs/library */ "./src/ui/dialogs/library.ts");
/* harmony import */ var _ui_dialogs_chordChange__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../ui/dialogs/chordChange */ "./src/ui/dialogs/chordChange.ts");
/* harmony import */ var _ui_dialogs_lyric__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../ui/dialogs/lyric */ "./src/ui/dialogs/lyric.ts");
/* harmony import */ var _ui_dialogs_textBlock__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../ui/dialogs/textBlock */ "./src/ui/dialogs/textBlock.ts");
/* harmony import */ var _ui_dialogs_dynamics__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../ui/dialogs/dynamics */ "./src/ui/dialogs/dynamics.ts");
/* harmony import */ var _ui_dialogs_slur__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../ui/dialogs/slur */ "./src/ui/dialogs/slur.ts");
/* harmony import */ var _ui_dialogs_tie__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../ui/dialogs/tie */ "./src/ui/dialogs/tie.ts");
/* harmony import */ var _ui_dialogs_volta__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../ui/dialogs/volta */ "./src/ui/dialogs/volta.ts");
/* harmony import */ var _ui_dialogs_hairpin__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../ui/dialogs/hairpin */ "./src/ui/dialogs/hairpin.ts");
/* harmony import */ var _ui_dialogs_staffGroup__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../ui/dialogs/staffGroup */ "./src/ui/dialogs/staffGroup.ts");
/* harmony import */ var _ui_dialogs_arpeggio__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../ui/dialogs/arpeggio */ "./src/ui/dialogs/arpeggio.ts");
/* harmony import */ var _ui_dialogs_partInfo__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../ui/dialogs/partInfo */ "./src/ui/dialogs/partInfo.ts");
/* harmony import */ var _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../ui/dialogs/fileDialogs */ "./src/ui/dialogs/fileDialogs.ts");
/* harmony import */ var _ui_dialogs_components_textInput__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../ui/dialogs/components/textInput */ "./src/ui/dialogs/components/textInput.ts");
/* harmony import */ var _ui_dialogs_components_dropdown__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../ui/dialogs/components/dropdown */ "./src/ui/dialogs/components/dropdown.ts");
/* harmony import */ var _ui_dialogs_components_button__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../ui/dialogs/components/button */ "./src/ui/dialogs/components/button.ts");
/* harmony import */ var _ui_dialogs_components_toggle__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../ui/dialogs/components/toggle */ "./src/ui/dialogs/components/toggle.ts");
/* harmony import */ var _ui_dialogs_components_fileDownload__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../ui/dialogs/components/fileDownload */ "./src/ui/dialogs/components/fileDownload.ts");
/* harmony import */ var _ui_dialogs_components_rocker__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../ui/dialogs/components/rocker */ "./src/ui/dialogs/components/rocker.ts");
/* harmony import */ var _ui_dialogs_components_fontComponent__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../ui/dialogs/components/fontComponent */ "./src/ui/dialogs/components/fontComponent.ts");
/* harmony import */ var _ui_dialogs_components_textInPlace__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../ui/dialogs/components/textInPlace */ "./src/ui/dialogs/components/textInPlace.ts");
/* harmony import */ var _ui_dialogs_components_tree__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../ui/dialogs/components/tree */ "./src/ui/dialogs/components/tree.ts");
/* harmony import */ var _ui_dialogs_components_noteText__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../ui/dialogs/components/noteText */ "./src/ui/dialogs/components/noteText.ts");
/* harmony import */ var _ui_dialogs_components_dragText__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../ui/dialogs/components/dragText */ "./src/ui/dialogs/components/dragText.ts");
/* harmony import */ var _ui_dialogs_components_checkdrop__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../ui/dialogs/components/checkdrop */ "./src/ui/dialogs/components/checkdrop.ts");
/* harmony import */ var _ui_dialogs_components_tie__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../ui/dialogs/components/tie */ "./src/ui/dialogs/components/tie.ts");
/* harmony import */ var _ui_dialogs_components_staffComponents__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../ui/dialogs/components/staffComponents */ "./src/ui/dialogs/components/staffComponents.ts");
/* harmony import */ var _ui_dialogs_components_textCheck__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../ui/dialogs/components/textCheck */ "./src/ui/dialogs/components/textCheck.ts");
/* harmony import */ var _ui_menus_manager__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ../ui/menus/manager */ "./src/ui/menus/manager.ts");
/* harmony import */ var _ui_menus_menu__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ../ui/menus/menu */ "./src/ui/menus/menu.ts");
/* harmony import */ var _ui_menus_score__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ../ui/menus/score */ "./src/ui/menus/score.ts");
/* harmony import */ var _ui_menus_parts__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ../ui/menus/parts */ "./src/ui/menus/parts.ts");
/* harmony import */ var _ui_menus_partSelection__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ../ui/menus/partSelection */ "./src/ui/menus/partSelection.ts");
/* harmony import */ var _ui_menus_dynamics__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ../ui/menus/dynamics */ "./src/ui/menus/dynamics.ts");
/* harmony import */ var _ui_menus_timeSignature__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ../ui/menus/timeSignature */ "./src/ui/menus/timeSignature.ts");
/* harmony import */ var _ui_menus_keySignature__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ../ui/menus/keySignature */ "./src/ui/menus/keySignature.ts");
/* harmony import */ var _ui_menus_staffModifier__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ../ui/menus/staffModifier */ "./src/ui/menus/staffModifier.ts");
/* harmony import */ var _ui_menus_file__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ../ui/menus/file */ "./src/ui/menus/file.ts");
/* harmony import */ var _ui_menus_language__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ../ui/menus/language */ "./src/ui/menus/language.ts");
/* harmony import */ var _ui_i18n_language__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ../ui/i18n/language */ "./src/ui/i18n/language.ts");
/* harmony import */ var _ui_menus_measure__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ../ui/menus/measure */ "./src/ui/menus/measure.ts");
/* harmony import */ var _ui_menus_note__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ../ui/menus/note */ "./src/ui/menus/note.ts");
/* harmony import */ var _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ../ui/fileio/xhrLoader */ "./src/ui/fileio/xhrLoader.ts");
/* harmony import */ var _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ../common/promiseHelpers */ "./src/common/promiseHelpers.ts");
/* harmony import */ var _render_sui_scoreView__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ../render/sui/scoreView */ "./src/render/sui/scoreView.ts");
/* harmony import */ var _render_sui_scoreViewOperations__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ../render/sui/scoreViewOperations */ "./src/render/sui/scoreViewOperations.ts");
/* harmony import */ var _render_sui_scoreRender__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ../render/sui/scoreRender */ "./src/render/sui/scoreRender.ts");
/* harmony import */ var _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ../render/sui/layoutDebug */ "./src/render/sui/layoutDebug.ts");
/* harmony import */ var _render_sui_mapper__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ../render/sui/mapper */ "./src/render/sui/mapper.ts");
/* harmony import */ var _render_sui_scroller__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ../render/sui/scroller */ "./src/render/sui/scroller.ts");
/* harmony import */ var _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ../render/sui/svgHelpers */ "./src/render/sui/svgHelpers.ts");
/* harmony import */ var _render_audio_player__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ../render/audio/player */ "./src/render/audio/player.ts");
/* harmony import */ var _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ../render/audio/oscillator */ "./src/render/audio/oscillator.ts");
/* harmony import */ var _render_audio_samples__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ../render/audio/samples */ "./src/render/audio/samples.ts");
/* harmony import */ var _smo_data_score__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ../smo/data/score */ "./src/smo/data/score.ts");
/* harmony import */ var _smo_xform_undo__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ../smo/xform/undo */ "./src/smo/xform/undo.ts");
/* harmony import */ var _smo_data_note__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ../smo/data/note */ "./src/smo/data/note.ts");
/* harmony import */ var _smo_xform_tickDuration__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ../smo/xform/tickDuration */ "./src/smo/xform/tickDuration.ts");
/* harmony import */ var _tests_file_load__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ../../tests/file-load */ "./tests/file-load.ts");
/* harmony import */ var _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ../smo/data/staffModifiers */ "./src/smo/data/staffModifiers.ts");
/* harmony import */ var _smo_data_measure__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ../smo/data/measure */ "./src/smo/data/measure.ts");
/* harmony import */ var _smo_data_music__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ../smo/data/music */ "./src/smo/data/music.ts");
/* harmony import */ var _smo_xform_selections__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ../smo/xform/selections */ "./src/smo/xform/selections.ts");
/* harmony import */ var _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ../smo/data/noteModifiers */ "./src/smo/data/noteModifiers.ts");
/* harmony import */ var _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ../smo/data/systemStaff */ "./src/smo/data/systemStaff.ts");
/* harmony import */ var _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ../smo/data/scoreModifiers */ "./src/smo/data/scoreModifiers.ts");
/* harmony import */ var _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ../smo/data/scoreText */ "./src/smo/data/scoreText.ts");
/* harmony import */ var _smo_xform_operations__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ../smo/xform/operations */ "./src/smo/xform/operations.ts");
/* harmony import */ var _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ../smo/data/measureModifiers */ "./src/smo/data/measureModifiers.ts");
/* harmony import */ var _smo_mxml_smoToXml__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ../smo/mxml/smoToXml */ "./src/smo/mxml/smoToXml.ts");
/* harmony import */ var _smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ../smo/midi/midiToSmo */ "./src/smo/midi/midiToSmo.ts");
/* harmony import */ var _smo_midi_smoToMidi__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ../smo/midi/smoToMidi */ "./src/smo/midi/smoToMidi.ts");
/* harmony import */ var _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ../smo/mxml/xmlToSmo */ "./src/smo/mxml/xmlToSmo.ts");
/* harmony import */ var _smo_xform_toVex__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ../smo/xform/toVex */ "./src/smo/xform/toVex.ts");
/* harmony import */ var _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ../common/htmlHelpers */ "./src/common/htmlHelpers.ts");
/* harmony import */ var _generateVexTests__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./generateVexTests */ "./src/application/generateVexTests.ts");
// Smoosic relies on dynamic creation of almost everything.  This class exports all the symbols
// that need to be created via reflection.
// ui application components
// vexflow interface




























// Language strings

// ui dialogs and menus
// Dialogs



























// Dialog components
















// menus
















// render library







// audio library



// SMO object model





















// utilities


const getClass = (jsonString) => {
    return eval('Smo.' + jsonString);
};
const Smo = {
    // Application-level classes
    SmoConfiguration: _configuration__WEBPACK_IMPORTED_MODULE_24__.SmoConfiguration,
    SuiApplication: _application__WEBPACK_IMPORTED_MODULE_2__.SuiApplication,
    SuiDom: _dom__WEBPACK_IMPORTED_MODULE_7__.SuiDom, SuiEventHandler: _eventHandler__WEBPACK_IMPORTED_MODULE_3__.SuiEventHandler, SuiExceptionHandler: _ui_exceptions__WEBPACK_IMPORTED_MODULE_4__.SuiExceptionHandler,
    Qwerty: _ui_qwerty__WEBPACK_IMPORTED_MODULE_5__.Qwerty, SuiHelp: _ui_help__WEBPACK_IMPORTED_MODULE_8__.SuiHelp, SmoTranslationEditor: _ui_i18n_translationEditor__WEBPACK_IMPORTED_MODULE_23__.SmoTranslationEditor, SimpleEventHandler: _common__WEBPACK_IMPORTED_MODULE_27__.SimpleEventHandler, ModalEventHandler: _common__WEBPACK_IMPORTED_MODULE_27__.ModalEventHandler,
    // Ribbon buttons
    simpleRibbonLayout: _ui_ribbonLayout_default_tabletRibbon__WEBPACK_IMPORTED_MODULE_26__.simpleRibbonLayout,
    RibbonButtons: _ui_buttons_ribbon__WEBPACK_IMPORTED_MODULE_25__.RibbonButtons, NoteButtons: _ui_buttons_note__WEBPACK_IMPORTED_MODULE_18__.NoteButtons, TextButtons: _ui_buttons_text__WEBPACK_IMPORTED_MODULE_21__.TextButtons, ChordButtons: _ui_buttons_chord__WEBPACK_IMPORTED_MODULE_11__.ChordButtons, MicrotoneButtons: _ui_buttons_microtone__WEBPACK_IMPORTED_MODULE_16__.MicrotoneButtons,
    StaveButtons: _ui_buttons_stave__WEBPACK_IMPORTED_MODULE_20__.StaveButtons, BeamButtons: _ui_buttons_beam__WEBPACK_IMPORTED_MODULE_10__.BeamButtons, MeasureButtons: _ui_buttons_measure__WEBPACK_IMPORTED_MODULE_15__.MeasureButtons, DurationButtons: _ui_buttons_duration__WEBPACK_IMPORTED_MODULE_14__.DurationButtons,
    VoiceButtons: _ui_buttons_voice__WEBPACK_IMPORTED_MODULE_22__.VoiceButtons, PlayerButtons: _ui_buttons_player__WEBPACK_IMPORTED_MODULE_19__.PlayerButtons, ArticulationButtons: _ui_buttons_articulation__WEBPACK_IMPORTED_MODULE_9__.ArticulationButtons, NavigationButtons: _ui_buttons_navigation__WEBPACK_IMPORTED_MODULE_17__.NavigationButtons,
    DisplaySettings: _ui_buttons_display__WEBPACK_IMPORTED_MODULE_13__.DisplaySettings, ExtendedCollapseParent: _ui_buttons_collapsable__WEBPACK_IMPORTED_MODULE_12__.ExtendedCollapseParent, CollapseRibbonControl: _ui_buttons_collapsable__WEBPACK_IMPORTED_MODULE_12__.CollapseRibbonControl,
    // Menus
    SuiMenuManager: _ui_menus_manager__WEBPACK_IMPORTED_MODULE_71__.SuiMenuManager, SuiMenuBase: _ui_menus_menu__WEBPACK_IMPORTED_MODULE_72__.SuiMenuBase, SuiScoreMenu: _ui_menus_score__WEBPACK_IMPORTED_MODULE_73__.SuiScoreMenu, SuiFileMenu: _ui_menus_file__WEBPACK_IMPORTED_MODULE_80__.SuiFileMenu,
    SuiDynamicsMenu: _ui_menus_dynamics__WEBPACK_IMPORTED_MODULE_76__.SuiDynamicsMenu, SuiTimeSignatureMenu: _ui_menus_timeSignature__WEBPACK_IMPORTED_MODULE_77__.SuiTimeSignatureMenu, SuiKeySignatureMenu: _ui_menus_keySignature__WEBPACK_IMPORTED_MODULE_78__.SuiKeySignatureMenu, SuiStaffModifierMenu: _ui_menus_staffModifier__WEBPACK_IMPORTED_MODULE_79__.SuiStaffModifierMenu,
    SuiLanguageMenu: _ui_menus_language__WEBPACK_IMPORTED_MODULE_81__.SuiLanguageMenu, SuiMeasureMenu: _ui_menus_measure__WEBPACK_IMPORTED_MODULE_83__.SuiMeasureMenu, SuiNoteMenu: _ui_menus_note__WEBPACK_IMPORTED_MODULE_84__.SuiNoteMenu, SmoLanguage: _ui_i18n_language__WEBPACK_IMPORTED_MODULE_82__.SmoLanguage, SmoTranslator: _ui_i18n_language__WEBPACK_IMPORTED_MODULE_82__.SmoTranslator, SuiPartMenu: _ui_menus_parts__WEBPACK_IMPORTED_MODULE_74__.SuiPartMenu,
    SuiPartSelectionMenu: _ui_menus_partSelection__WEBPACK_IMPORTED_MODULE_75__.SuiPartSelectionMenu,
    // Dialogs
    SuiTempoDialog: _ui_dialogs_tempo__WEBPACK_IMPORTED_MODULE_35__.SuiTempoDialog, SuiInstrumentDialog: _ui_dialogs_instrument__WEBPACK_IMPORTED_MODULE_33__.SuiInstrumentDialog, SuiModifierDialogFactory: _ui_dialogs_factory__WEBPACK_IMPORTED_MODULE_30__.SuiModifierDialogFactory, SuiLibraryDialog: _ui_dialogs_library__WEBPACK_IMPORTED_MODULE_43__.SuiLibraryDialog,
    SuiTextBracketDialog: _ui_dialogs_textBracket__WEBPACK_IMPORTED_MODULE_39__.SuiTextBracketDialog,
    SuiScoreViewDialog: _ui_dialogs_scoreView__WEBPACK_IMPORTED_MODULE_42__.SuiScoreViewDialog, SuiGlobalLayoutDialog: _ui_dialogs_globalLayout__WEBPACK_IMPORTED_MODULE_41__.SuiGlobalLayoutDialog, SuiScoreIdentificationDialog: _ui_dialogs_scoreId__WEBPACK_IMPORTED_MODULE_36__.SuiScoreIdentificationDialog,
    SuiScoreFontDialog: _ui_dialogs_fonts__WEBPACK_IMPORTED_MODULE_40__.SuiScoreFontDialog, SuiPageLayoutDialog: _ui_dialogs_pageLayout__WEBPACK_IMPORTED_MODULE_38__.SuiPageLayoutDialog, SuiMeasureDialog: _ui_dialogs_measureFormat__WEBPACK_IMPORTED_MODULE_31__.SuiMeasureDialog, SuiInsertMeasures: _ui_dialogs_addMeasure__WEBPACK_IMPORTED_MODULE_32__.SuiInsertMeasures,
    SuiTimeSignatureDialog: _ui_dialogs_timeSignature__WEBPACK_IMPORTED_MODULE_34__.SuiTimeSignatureDialog, SuiTextBlockDialog: _ui_dialogs_textBlock__WEBPACK_IMPORTED_MODULE_46__.SuiTextBlockDialog, SuiLyricDialog: _ui_dialogs_lyric__WEBPACK_IMPORTED_MODULE_45__.SuiLyricDialog, SuiChordChangeDialog: _ui_dialogs_chordChange__WEBPACK_IMPORTED_MODULE_44__.SuiChordChangeDialog,
    SuiSlurAttributesDialog: _ui_dialogs_slur__WEBPACK_IMPORTED_MODULE_48__.SuiSlurAttributesDialog, SuiTieAttributesDialog: _ui_dialogs_tie__WEBPACK_IMPORTED_MODULE_49__.SuiTieAttributesDialog, SuiVoltaAttributeDialog: _ui_dialogs_volta__WEBPACK_IMPORTED_MODULE_50__.SuiVoltaAttributeDialog,
    SuiHairpinAttributesDialog: _ui_dialogs_hairpin__WEBPACK_IMPORTED_MODULE_51__.SuiHairpinAttributesDialog, SuiStaffGroupDialog: _ui_dialogs_staffGroup__WEBPACK_IMPORTED_MODULE_52__.SuiStaffGroupDialog, helpModal: _ui_dialogs_textBlock__WEBPACK_IMPORTED_MODULE_46__.helpModal,
    SuiLoadFileDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiLoadFileDialog, SuiLoadMxmlDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiLoadMxmlDialog, SuiScorePreferencesDialog: _ui_dialogs_preferences__WEBPACK_IMPORTED_MODULE_37__.SuiScorePreferencesDialog,
    SuiPartInfoDialog: _ui_dialogs_partInfo__WEBPACK_IMPORTED_MODULE_54__.SuiPartInfoDialog,
    /* SuiLoadActionsDialog, SuiSaveActionsDialog, */
    SuiPrintFileDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiPrintFileDialog, SuiSaveFileDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiSaveFileDialog, SuiSaveXmlDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiSaveXmlDialog, SuiSaveVexDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiSaveVexDialog,
    SuiSaveMidiDialog: _ui_dialogs_fileDialogs__WEBPACK_IMPORTED_MODULE_55__.SuiSaveMidiDialog, SuiDialogBase: _ui_dialogs_dialog__WEBPACK_IMPORTED_MODULE_29__.SuiDialogBase,
    // Dialog components
    SuiTreeComponent: _ui_dialogs_components_tree__WEBPACK_IMPORTED_MODULE_64__.SuiTreeComponent,
    SuiDropdownComponent: _ui_dialogs_components_dropdown__WEBPACK_IMPORTED_MODULE_57__.SuiDropdownComponent,
    SuiRockerComponent: _ui_dialogs_components_rocker__WEBPACK_IMPORTED_MODULE_61__.SuiRockerComponent, SuiFileDownloadComponent: _ui_dialogs_components_fileDownload__WEBPACK_IMPORTED_MODULE_60__.SuiFileDownloadComponent,
    SuiToggleComponent: _ui_dialogs_components_toggle__WEBPACK_IMPORTED_MODULE_59__.SuiToggleComponent, SuiButtonComponent: _ui_dialogs_components_button__WEBPACK_IMPORTED_MODULE_58__.SuiButtonComponent, SuiDropdownComposite: _ui_dialogs_components_dropdown__WEBPACK_IMPORTED_MODULE_57__.SuiDropdownComposite,
    SuiToggleComposite: _ui_dialogs_components_toggle__WEBPACK_IMPORTED_MODULE_59__.SuiToggleComposite, SuiButtonComposite: _ui_dialogs_components_button__WEBPACK_IMPORTED_MODULE_58__.SuiButtonComposite, SuiRockerComposite: _ui_dialogs_components_rocker__WEBPACK_IMPORTED_MODULE_61__.SuiRockerComposite, SuiTextInputComposite: _ui_dialogs_components_textInput__WEBPACK_IMPORTED_MODULE_56__.SuiTextInputComposite,
    SuiFontComponent: _ui_dialogs_components_fontComponent__WEBPACK_IMPORTED_MODULE_62__.SuiFontComponent, SuiTextInPlace: _ui_dialogs_components_textInPlace__WEBPACK_IMPORTED_MODULE_63__.SuiTextInPlace, SuiLyricComponent: _ui_dialogs_components_noteText__WEBPACK_IMPORTED_MODULE_65__.SuiLyricComponent, SuiChordComponent: _ui_dialogs_components_noteText__WEBPACK_IMPORTED_MODULE_65__.SuiChordComponent, SuiDragText: _ui_dialogs_components_dragText__WEBPACK_IMPORTED_MODULE_66__.SuiDragText,
    SuiNoteTextComponent: _ui_dialogs_components_noteText__WEBPACK_IMPORTED_MODULE_65__.SuiNoteTextComponent, SuiTextBlockComponent: _ui_dialogs_components_textInPlace__WEBPACK_IMPORTED_MODULE_63__.SuiTextBlockComponent, SuiTextInputComponent: _ui_dialogs_components_textInput__WEBPACK_IMPORTED_MODULE_56__.SuiTextInputComponent,
    SuiDynamicModifierDialog: _ui_dialogs_dynamics__WEBPACK_IMPORTED_MODULE_47__.SuiDynamicModifierDialog, CheckboxDropdownComponent: _ui_dialogs_components_checkdrop__WEBPACK_IMPORTED_MODULE_67__.CheckboxDropdownComponent, TieMappingComponent: _ui_dialogs_components_tie__WEBPACK_IMPORTED_MODULE_68__.TieMappingComponent, StaffAddRemoveComponent: _ui_dialogs_components_staffComponents__WEBPACK_IMPORTED_MODULE_69__.StaffAddRemoveComponent,
    StaffCheckComponent: _ui_dialogs_components_staffComponents__WEBPACK_IMPORTED_MODULE_69__.StaffCheckComponent, TextCheckComponent: _ui_dialogs_components_textCheck__WEBPACK_IMPORTED_MODULE_70__.TextCheckComponent, SuiScoreArpeggioDialog: _ui_dialogs_arpeggio__WEBPACK_IMPORTED_MODULE_53__.SuiScoreArpeggioDialog,
    SuiXhrLoader: _ui_fileio_xhrLoader__WEBPACK_IMPORTED_MODULE_85__.SuiXhrLoader, PromiseHelpers: _common_promiseHelpers__WEBPACK_IMPORTED_MODULE_86__.PromiseHelpers,
    // Rendering components
    SuiPiano: _render_sui_piano__WEBPACK_IMPORTED_MODULE_6__.SuiPiano, layoutDebug: _render_sui_layoutDebug__WEBPACK_IMPORTED_MODULE_90__.layoutDebug, SuiScoreView: _render_sui_scoreView__WEBPACK_IMPORTED_MODULE_87__.SuiScoreView, SuiScroller: _render_sui_scroller__WEBPACK_IMPORTED_MODULE_92__.SuiScroller, SvgHelpers: _render_sui_svgHelpers__WEBPACK_IMPORTED_MODULE_93__.SvgHelpers, SuiMapper: _render_sui_mapper__WEBPACK_IMPORTED_MODULE_91__.SuiMapper, SuiScoreRender: _render_sui_scoreRender__WEBPACK_IMPORTED_MODULE_89__.SuiScoreRender,
    SuiScoreViewOperations: _render_sui_scoreViewOperations__WEBPACK_IMPORTED_MODULE_88__.SuiScoreViewOperations, TextFormatter: _common_textformatter__WEBPACK_IMPORTED_MODULE_0__.TextFormatter, VexFlow: _common_vex__WEBPACK_IMPORTED_MODULE_1__.VexFlow,
    // Audio components
    SuiAudioPlayer: _render_audio_player__WEBPACK_IMPORTED_MODULE_94__.SuiAudioPlayer, SuiOscillator: _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_95__.SuiOscillator, SuiSampleMedia: _render_audio_samples__WEBPACK_IMPORTED_MODULE_96__.SuiSampleMedia, SuiSampler: _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_95__.SuiSampler, SuiReverb: _render_audio_oscillator__WEBPACK_IMPORTED_MODULE_95__.SuiReverb,
    // Smo Music Objects
    SmoScore: _smo_data_score__WEBPACK_IMPORTED_MODULE_97__.SmoScore,
    SmoScorePreferences: _smo_data_score__WEBPACK_IMPORTED_MODULE_97__.SmoScorePreferences,
    engravingFontTypes: _smo_data_score__WEBPACK_IMPORTED_MODULE_97__.engravingFontTypes, isEngravingFont: _smo_data_score__WEBPACK_IMPORTED_MODULE_97__.isEngravingFont,
    XmlToSmo: _smo_mxml_xmlToSmo__WEBPACK_IMPORTED_MODULE_115__.XmlToSmo,
    SmoToXml: _smo_mxml_smoToXml__WEBPACK_IMPORTED_MODULE_112__.SmoToXml,
    MidiToSmo: _smo_midi_midiToSmo__WEBPACK_IMPORTED_MODULE_113__.MidiToSmo,
    SmoToMidi: _smo_midi_smoToMidi__WEBPACK_IMPORTED_MODULE_114__.SmoToMidi,
    SmoMusic: _smo_data_music__WEBPACK_IMPORTED_MODULE_104__.SmoMusic,
    SmoAudioPitch: _smo_data_music__WEBPACK_IMPORTED_MODULE_104__.SmoAudioPitch,
    SmoMeasure: _smo_data_measure__WEBPACK_IMPORTED_MODULE_103__.SmoMeasure,
    SmoSystemStaff: _smo_data_systemStaff__WEBPACK_IMPORTED_MODULE_107__.SmoSystemStaff,
    SmoNote: _smo_data_note__WEBPACK_IMPORTED_MODULE_99__.SmoNote,
    // staff modifier
    SmoStaffHairpin: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__.SmoStaffHairpin, StaffModifierBase: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__.StaffModifierBase,
    SmoStaffTextBracket: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__.SmoStaffTextBracket,
    SmoInstrument: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__.SmoInstrument, SmoSlur: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__.SmoSlur, SmoTie: _smo_data_staffModifiers__WEBPACK_IMPORTED_MODULE_102__.SmoTie,
    // score modifiers
    SmoSystemGroup: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_108__.SmoSystemGroup, SmoAudioPlayerSettings: _smo_data_scoreModifiers__WEBPACK_IMPORTED_MODULE_108__.SmoAudioPlayerSettings, SmoTextGroup: _smo_data_scoreText__WEBPACK_IMPORTED_MODULE_109__.SmoTextGroup,
    // measure modifiers
    SmoRehearsalMark: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoRehearsalMark, SmoMeasureFormat: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoMeasureFormat, SmoBarline: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoBarline, SmoRepeatSymbol: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoRepeatSymbol,
    SmoVolta: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoVolta, SmoMeasureText: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoMeasureText, SmoTempoText: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.SmoTempoText, TimeSignature: _smo_data_measureModifiers__WEBPACK_IMPORTED_MODULE_111__.TimeSignature,
    // note modifiers
    SmoOrnament: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoOrnament,
    SmoArticulation: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoArticulation, SmoDynamicText: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoDynamicText, SmoGraceNote: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoGraceNote, SmoMicrotone: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoMicrotone, SmoLyric: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoLyric, SmoArpeggio: _smo_data_noteModifiers__WEBPACK_IMPORTED_MODULE_106__.SmoArpeggio,
    // Smo Transformers
    SmoSelection: _smo_xform_selections__WEBPACK_IMPORTED_MODULE_105__.SmoSelection, SmoSelector: _smo_xform_selections__WEBPACK_IMPORTED_MODULE_105__.SmoSelector, SmoDuration: _smo_xform_tickDuration__WEBPACK_IMPORTED_MODULE_100__.SmoDuration, UndoBuffer: _smo_xform_undo__WEBPACK_IMPORTED_MODULE_98__.UndoBuffer, SmoToVex: _smo_xform_toVex__WEBPACK_IMPORTED_MODULE_116__.SmoToVex, SmoOperation: _smo_xform_operations__WEBPACK_IMPORTED_MODULE_110__.SmoOperation,
    // new score bootstrap
    // help strings
    cardKeysHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardKeysHtmlEn, cardNotesLetterHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardNotesLetterHtmlEn, cardNotesChromaticHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardNotesChromaticHtmlEn, cardNotesChordsHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardNotesChordsHtmlEn,
    cardNotesRestsHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardNotesRestsHtmlEn, cardDurationNotesHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardDurationNotesHtmlEn, cardDurationTupletsHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardDurationTupletsHtmlEn,
    cardSelectionsNotesHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardSelectionsNotesHtmlEn, cardSelectionsModifiersHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardSelectionsModifiersHtmlEn, cardSelectionsNonSelectableHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardSelectionsNonSelectableHtmlEn, cardSelectionsSlashHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardSelectionsSlashHtmlEn,
    cardBeamsAndStemsDirectionHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardBeamsAndStemsDirectionHtmlEn, cardBeamsAndStemsGroupingHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardBeamsAndStemsGroupingHtmlEn,
    cardMeasuresAddDeleteHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardMeasuresAddDeleteHtmlEn, cardVoicesCreateDeleteHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardVoicesCreateDeleteHtmlEn, cardPartAddDeleteHtmlEn: _ui_i18n_language_en__WEBPACK_IMPORTED_MODULE_28__.cardPartAddDeleteHtmlEn,
    getClass,
    createLoadTests: _tests_file_load__WEBPACK_IMPORTED_MODULE_101__.createLoadTests,
    // utilities
    buildDom: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.buildDom, addFileLink: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.addFileLink, InputTrapper: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.InputTrapper, draggable: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.draggable, closeDialogPromise: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.closeDialogPromise, getDomContainer: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.getDomContainer, createTopDomContainer: _common_htmlHelpers__WEBPACK_IMPORTED_MODULE_117__.createTopDomContainer,
    renderVexTests: _generateVexTests__WEBPACK_IMPORTED_MODULE_118__.renderVexTests
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Smo);

})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=smoosic.js.map